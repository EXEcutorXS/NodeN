
NodeN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000093c  0800aa88  0800aa88  0001aa88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3c4  0800b3c4  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3c4  0800b3c4  0001b3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3cc  0800b3cc  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3cc  0800b3cc  0001b3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3d0  0800b3d0  0001b3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b3d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  200001f8  0800b5cc  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  0800b5cc  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee20  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b30  00000000  00000000  0003f040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000cdf6  00000000  00000000  00043b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00050968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001440  00000000  00000000  00051af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b87  00000000  00000000  00052f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d23c  00000000  00000000  00069ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e095  00000000  00000000  00086cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00104d88  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047bc  00000000  00000000  00104ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f8 	.word	0x200001f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800aa70 	.word	0x0800aa70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001fc 	.word	0x200001fc
 8000104:	0800aa70 	.word	0x0800aa70

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ff3d 	bl	80022bc <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe87 	bl	8002160 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ff2f 	bl	80022bc <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 ff25 	bl	80022bc <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fea9 	bl	80021d8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe9f 	bl	80021d8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	1c08      	adds	r0, r1, #0
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fc7b 	bl	8000dac <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fbff 	bl	8000cc4 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc6d 	bl	8000dac <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc63 	bl	8000dac <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc0d 	bl	8000d14 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc03 	bl	8000d14 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	1c08      	adds	r0, r1, #0
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f846 	bl	80005dc <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	0415      	lsls	r5, r2, #16
 8000560:	0c2d      	lsrs	r5, r5, #16
 8000562:	000f      	movs	r7, r1
 8000564:	0001      	movs	r1, r0
 8000566:	002e      	movs	r6, r5
 8000568:	46c6      	mov	lr, r8
 800056a:	4684      	mov	ip, r0
 800056c:	0400      	lsls	r0, r0, #16
 800056e:	0c14      	lsrs	r4, r2, #16
 8000570:	0c00      	lsrs	r0, r0, #16
 8000572:	0c09      	lsrs	r1, r1, #16
 8000574:	4346      	muls	r6, r0
 8000576:	434d      	muls	r5, r1
 8000578:	4360      	muls	r0, r4
 800057a:	4361      	muls	r1, r4
 800057c:	1940      	adds	r0, r0, r5
 800057e:	0c34      	lsrs	r4, r6, #16
 8000580:	1824      	adds	r4, r4, r0
 8000582:	b500      	push	{lr}
 8000584:	42a5      	cmp	r5, r4
 8000586:	d903      	bls.n	8000590 <__aeabi_lmul+0x34>
 8000588:	2080      	movs	r0, #128	; 0x80
 800058a:	0240      	lsls	r0, r0, #9
 800058c:	4680      	mov	r8, r0
 800058e:	4441      	add	r1, r8
 8000590:	0c25      	lsrs	r5, r4, #16
 8000592:	186d      	adds	r5, r5, r1
 8000594:	4661      	mov	r1, ip
 8000596:	4359      	muls	r1, r3
 8000598:	437a      	muls	r2, r7
 800059a:	0430      	lsls	r0, r6, #16
 800059c:	1949      	adds	r1, r1, r5
 800059e:	0424      	lsls	r4, r4, #16
 80005a0:	0c00      	lsrs	r0, r0, #16
 80005a2:	1820      	adds	r0, r4, r0
 80005a4:	1889      	adds	r1, r1, r2
 80005a6:	bc80      	pop	{r7}
 80005a8:	46b8      	mov	r8, r7
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005ac <__aeabi_f2uiz>:
 80005ac:	219e      	movs	r1, #158	; 0x9e
 80005ae:	b510      	push	{r4, lr}
 80005b0:	05c9      	lsls	r1, r1, #23
 80005b2:	1c04      	adds	r4, r0, #0
 80005b4:	f7ff ffa8 	bl	8000508 <__aeabi_fcmpge>
 80005b8:	2800      	cmp	r0, #0
 80005ba:	d103      	bne.n	80005c4 <__aeabi_f2uiz+0x18>
 80005bc:	1c20      	adds	r0, r4, #0
 80005be:	f000 ff21 	bl	8001404 <__aeabi_f2iz>
 80005c2:	bd10      	pop	{r4, pc}
 80005c4:	219e      	movs	r1, #158	; 0x9e
 80005c6:	1c20      	adds	r0, r4, #0
 80005c8:	05c9      	lsls	r1, r1, #23
 80005ca:	f000 fd53 	bl	8001074 <__aeabi_fsub>
 80005ce:	f000 ff19 	bl	8001404 <__aeabi_f2iz>
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	061b      	lsls	r3, r3, #24
 80005d6:	469c      	mov	ip, r3
 80005d8:	4460      	add	r0, ip
 80005da:	e7f2      	b.n	80005c2 <__aeabi_f2uiz+0x16>

080005dc <__udivmoddi4>:
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	4657      	mov	r7, sl
 80005e0:	464e      	mov	r6, r9
 80005e2:	4645      	mov	r5, r8
 80005e4:	46de      	mov	lr, fp
 80005e6:	b5e0      	push	{r5, r6, r7, lr}
 80005e8:	0004      	movs	r4, r0
 80005ea:	000d      	movs	r5, r1
 80005ec:	4692      	mov	sl, r2
 80005ee:	4699      	mov	r9, r3
 80005f0:	b083      	sub	sp, #12
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d830      	bhi.n	8000658 <__udivmoddi4+0x7c>
 80005f6:	d02d      	beq.n	8000654 <__udivmoddi4+0x78>
 80005f8:	4649      	mov	r1, r9
 80005fa:	4650      	mov	r0, sl
 80005fc:	f002 fe64 	bl	80032c8 <__clzdi2>
 8000600:	0029      	movs	r1, r5
 8000602:	0006      	movs	r6, r0
 8000604:	0020      	movs	r0, r4
 8000606:	f002 fe5f 	bl	80032c8 <__clzdi2>
 800060a:	1a33      	subs	r3, r6, r0
 800060c:	4698      	mov	r8, r3
 800060e:	3b20      	subs	r3, #32
 8000610:	469b      	mov	fp, r3
 8000612:	d433      	bmi.n	800067c <__udivmoddi4+0xa0>
 8000614:	465a      	mov	r2, fp
 8000616:	4653      	mov	r3, sl
 8000618:	4093      	lsls	r3, r2
 800061a:	4642      	mov	r2, r8
 800061c:	001f      	movs	r7, r3
 800061e:	4653      	mov	r3, sl
 8000620:	4093      	lsls	r3, r2
 8000622:	001e      	movs	r6, r3
 8000624:	42af      	cmp	r7, r5
 8000626:	d83a      	bhi.n	800069e <__udivmoddi4+0xc2>
 8000628:	42af      	cmp	r7, r5
 800062a:	d100      	bne.n	800062e <__udivmoddi4+0x52>
 800062c:	e078      	b.n	8000720 <__udivmoddi4+0x144>
 800062e:	465b      	mov	r3, fp
 8000630:	1ba4      	subs	r4, r4, r6
 8000632:	41bd      	sbcs	r5, r7
 8000634:	2b00      	cmp	r3, #0
 8000636:	da00      	bge.n	800063a <__udivmoddi4+0x5e>
 8000638:	e075      	b.n	8000726 <__udivmoddi4+0x14a>
 800063a:	2200      	movs	r2, #0
 800063c:	2300      	movs	r3, #0
 800063e:	9200      	str	r2, [sp, #0]
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2301      	movs	r3, #1
 8000644:	465a      	mov	r2, fp
 8000646:	4093      	lsls	r3, r2
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2301      	movs	r3, #1
 800064c:	4642      	mov	r2, r8
 800064e:	4093      	lsls	r3, r2
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	e028      	b.n	80006a6 <__udivmoddi4+0xca>
 8000654:	4282      	cmp	r2, r0
 8000656:	d9cf      	bls.n	80005f8 <__udivmoddi4+0x1c>
 8000658:	2200      	movs	r2, #0
 800065a:	2300      	movs	r3, #0
 800065c:	9200      	str	r2, [sp, #0]
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <__udivmoddi4+0x8e>
 8000666:	601c      	str	r4, [r3, #0]
 8000668:	605d      	str	r5, [r3, #4]
 800066a:	9800      	ldr	r0, [sp, #0]
 800066c:	9901      	ldr	r1, [sp, #4]
 800066e:	b003      	add	sp, #12
 8000670:	bcf0      	pop	{r4, r5, r6, r7}
 8000672:	46bb      	mov	fp, r7
 8000674:	46b2      	mov	sl, r6
 8000676:	46a9      	mov	r9, r5
 8000678:	46a0      	mov	r8, r4
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067c:	4642      	mov	r2, r8
 800067e:	2320      	movs	r3, #32
 8000680:	1a9b      	subs	r3, r3, r2
 8000682:	4652      	mov	r2, sl
 8000684:	40da      	lsrs	r2, r3
 8000686:	4641      	mov	r1, r8
 8000688:	0013      	movs	r3, r2
 800068a:	464a      	mov	r2, r9
 800068c:	408a      	lsls	r2, r1
 800068e:	0017      	movs	r7, r2
 8000690:	4642      	mov	r2, r8
 8000692:	431f      	orrs	r7, r3
 8000694:	4653      	mov	r3, sl
 8000696:	4093      	lsls	r3, r2
 8000698:	001e      	movs	r6, r3
 800069a:	42af      	cmp	r7, r5
 800069c:	d9c4      	bls.n	8000628 <__udivmoddi4+0x4c>
 800069e:	2200      	movs	r2, #0
 80006a0:	2300      	movs	r3, #0
 80006a2:	9200      	str	r2, [sp, #0]
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	4643      	mov	r3, r8
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0d9      	beq.n	8000660 <__udivmoddi4+0x84>
 80006ac:	07fb      	lsls	r3, r7, #31
 80006ae:	0872      	lsrs	r2, r6, #1
 80006b0:	431a      	orrs	r2, r3
 80006b2:	4646      	mov	r6, r8
 80006b4:	087b      	lsrs	r3, r7, #1
 80006b6:	e00e      	b.n	80006d6 <__udivmoddi4+0xfa>
 80006b8:	42ab      	cmp	r3, r5
 80006ba:	d101      	bne.n	80006c0 <__udivmoddi4+0xe4>
 80006bc:	42a2      	cmp	r2, r4
 80006be:	d80c      	bhi.n	80006da <__udivmoddi4+0xfe>
 80006c0:	1aa4      	subs	r4, r4, r2
 80006c2:	419d      	sbcs	r5, r3
 80006c4:	2001      	movs	r0, #1
 80006c6:	1924      	adds	r4, r4, r4
 80006c8:	416d      	adcs	r5, r5
 80006ca:	2100      	movs	r1, #0
 80006cc:	3e01      	subs	r6, #1
 80006ce:	1824      	adds	r4, r4, r0
 80006d0:	414d      	adcs	r5, r1
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	d006      	beq.n	80006e4 <__udivmoddi4+0x108>
 80006d6:	42ab      	cmp	r3, r5
 80006d8:	d9ee      	bls.n	80006b8 <__udivmoddi4+0xdc>
 80006da:	3e01      	subs	r6, #1
 80006dc:	1924      	adds	r4, r4, r4
 80006de:	416d      	adcs	r5, r5
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d1f8      	bne.n	80006d6 <__udivmoddi4+0xfa>
 80006e4:	9800      	ldr	r0, [sp, #0]
 80006e6:	9901      	ldr	r1, [sp, #4]
 80006e8:	465b      	mov	r3, fp
 80006ea:	1900      	adds	r0, r0, r4
 80006ec:	4169      	adcs	r1, r5
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db24      	blt.n	800073c <__udivmoddi4+0x160>
 80006f2:	002b      	movs	r3, r5
 80006f4:	465a      	mov	r2, fp
 80006f6:	4644      	mov	r4, r8
 80006f8:	40d3      	lsrs	r3, r2
 80006fa:	002a      	movs	r2, r5
 80006fc:	40e2      	lsrs	r2, r4
 80006fe:	001c      	movs	r4, r3
 8000700:	465b      	mov	r3, fp
 8000702:	0015      	movs	r5, r2
 8000704:	2b00      	cmp	r3, #0
 8000706:	db2a      	blt.n	800075e <__udivmoddi4+0x182>
 8000708:	0026      	movs	r6, r4
 800070a:	409e      	lsls	r6, r3
 800070c:	0033      	movs	r3, r6
 800070e:	0026      	movs	r6, r4
 8000710:	4647      	mov	r7, r8
 8000712:	40be      	lsls	r6, r7
 8000714:	0032      	movs	r2, r6
 8000716:	1a80      	subs	r0, r0, r2
 8000718:	4199      	sbcs	r1, r3
 800071a:	9000      	str	r0, [sp, #0]
 800071c:	9101      	str	r1, [sp, #4]
 800071e:	e79f      	b.n	8000660 <__udivmoddi4+0x84>
 8000720:	42a3      	cmp	r3, r4
 8000722:	d8bc      	bhi.n	800069e <__udivmoddi4+0xc2>
 8000724:	e783      	b.n	800062e <__udivmoddi4+0x52>
 8000726:	4642      	mov	r2, r8
 8000728:	2320      	movs	r3, #32
 800072a:	2100      	movs	r1, #0
 800072c:	1a9b      	subs	r3, r3, r2
 800072e:	2200      	movs	r2, #0
 8000730:	9100      	str	r1, [sp, #0]
 8000732:	9201      	str	r2, [sp, #4]
 8000734:	2201      	movs	r2, #1
 8000736:	40da      	lsrs	r2, r3
 8000738:	9201      	str	r2, [sp, #4]
 800073a:	e786      	b.n	800064a <__udivmoddi4+0x6e>
 800073c:	4642      	mov	r2, r8
 800073e:	2320      	movs	r3, #32
 8000740:	1a9b      	subs	r3, r3, r2
 8000742:	002a      	movs	r2, r5
 8000744:	4646      	mov	r6, r8
 8000746:	409a      	lsls	r2, r3
 8000748:	0023      	movs	r3, r4
 800074a:	40f3      	lsrs	r3, r6
 800074c:	4644      	mov	r4, r8
 800074e:	4313      	orrs	r3, r2
 8000750:	002a      	movs	r2, r5
 8000752:	40e2      	lsrs	r2, r4
 8000754:	001c      	movs	r4, r3
 8000756:	465b      	mov	r3, fp
 8000758:	0015      	movs	r5, r2
 800075a:	2b00      	cmp	r3, #0
 800075c:	dad4      	bge.n	8000708 <__udivmoddi4+0x12c>
 800075e:	4642      	mov	r2, r8
 8000760:	002f      	movs	r7, r5
 8000762:	2320      	movs	r3, #32
 8000764:	0026      	movs	r6, r4
 8000766:	4097      	lsls	r7, r2
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	40de      	lsrs	r6, r3
 800076c:	003b      	movs	r3, r7
 800076e:	4333      	orrs	r3, r6
 8000770:	e7cd      	b.n	800070e <__udivmoddi4+0x132>
 8000772:	46c0      	nop			; (mov r8, r8)

08000774 <__aeabi_fadd>:
 8000774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000776:	4646      	mov	r6, r8
 8000778:	46d6      	mov	lr, sl
 800077a:	464f      	mov	r7, r9
 800077c:	024d      	lsls	r5, r1, #9
 800077e:	0242      	lsls	r2, r0, #9
 8000780:	b5c0      	push	{r6, r7, lr}
 8000782:	0a52      	lsrs	r2, r2, #9
 8000784:	0a6e      	lsrs	r6, r5, #9
 8000786:	0047      	lsls	r7, r0, #1
 8000788:	46b0      	mov	r8, r6
 800078a:	0e3f      	lsrs	r7, r7, #24
 800078c:	004e      	lsls	r6, r1, #1
 800078e:	0fc4      	lsrs	r4, r0, #31
 8000790:	00d0      	lsls	r0, r2, #3
 8000792:	4694      	mov	ip, r2
 8000794:	003b      	movs	r3, r7
 8000796:	4682      	mov	sl, r0
 8000798:	0e36      	lsrs	r6, r6, #24
 800079a:	0fc9      	lsrs	r1, r1, #31
 800079c:	09ad      	lsrs	r5, r5, #6
 800079e:	428c      	cmp	r4, r1
 80007a0:	d06d      	beq.n	800087e <__aeabi_fadd+0x10a>
 80007a2:	1bb8      	subs	r0, r7, r6
 80007a4:	4681      	mov	r9, r0
 80007a6:	2800      	cmp	r0, #0
 80007a8:	dd4d      	ble.n	8000846 <__aeabi_fadd+0xd2>
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fadd+0x3c>
 80007ae:	e088      	b.n	80008c2 <__aeabi_fadd+0x14e>
 80007b0:	2fff      	cmp	r7, #255	; 0xff
 80007b2:	d05a      	beq.n	800086a <__aeabi_fadd+0xf6>
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	04db      	lsls	r3, r3, #19
 80007b8:	431d      	orrs	r5, r3
 80007ba:	464b      	mov	r3, r9
 80007bc:	2201      	movs	r2, #1
 80007be:	2b1b      	cmp	r3, #27
 80007c0:	dc0a      	bgt.n	80007d8 <__aeabi_fadd+0x64>
 80007c2:	002b      	movs	r3, r5
 80007c4:	464a      	mov	r2, r9
 80007c6:	4649      	mov	r1, r9
 80007c8:	40d3      	lsrs	r3, r2
 80007ca:	2220      	movs	r2, #32
 80007cc:	1a52      	subs	r2, r2, r1
 80007ce:	4095      	lsls	r5, r2
 80007d0:	002a      	movs	r2, r5
 80007d2:	1e55      	subs	r5, r2, #1
 80007d4:	41aa      	sbcs	r2, r5
 80007d6:	431a      	orrs	r2, r3
 80007d8:	4653      	mov	r3, sl
 80007da:	1a9a      	subs	r2, r3, r2
 80007dc:	0153      	lsls	r3, r2, #5
 80007de:	d400      	bmi.n	80007e2 <__aeabi_fadd+0x6e>
 80007e0:	e0b9      	b.n	8000956 <__aeabi_fadd+0x1e2>
 80007e2:	0192      	lsls	r2, r2, #6
 80007e4:	0996      	lsrs	r6, r2, #6
 80007e6:	0030      	movs	r0, r6
 80007e8:	f002 fd50 	bl	800328c <__clzsi2>
 80007ec:	3805      	subs	r0, #5
 80007ee:	4086      	lsls	r6, r0
 80007f0:	4287      	cmp	r7, r0
 80007f2:	dd00      	ble.n	80007f6 <__aeabi_fadd+0x82>
 80007f4:	e0d4      	b.n	80009a0 <__aeabi_fadd+0x22c>
 80007f6:	0033      	movs	r3, r6
 80007f8:	1bc7      	subs	r7, r0, r7
 80007fa:	2020      	movs	r0, #32
 80007fc:	3701      	adds	r7, #1
 80007fe:	40fb      	lsrs	r3, r7
 8000800:	1bc7      	subs	r7, r0, r7
 8000802:	40be      	lsls	r6, r7
 8000804:	0032      	movs	r2, r6
 8000806:	1e56      	subs	r6, r2, #1
 8000808:	41b2      	sbcs	r2, r6
 800080a:	2700      	movs	r7, #0
 800080c:	431a      	orrs	r2, r3
 800080e:	0753      	lsls	r3, r2, #29
 8000810:	d004      	beq.n	800081c <__aeabi_fadd+0xa8>
 8000812:	230f      	movs	r3, #15
 8000814:	4013      	ands	r3, r2
 8000816:	2b04      	cmp	r3, #4
 8000818:	d000      	beq.n	800081c <__aeabi_fadd+0xa8>
 800081a:	3204      	adds	r2, #4
 800081c:	0153      	lsls	r3, r2, #5
 800081e:	d400      	bmi.n	8000822 <__aeabi_fadd+0xae>
 8000820:	e09c      	b.n	800095c <__aeabi_fadd+0x1e8>
 8000822:	1c7b      	adds	r3, r7, #1
 8000824:	2ffe      	cmp	r7, #254	; 0xfe
 8000826:	d100      	bne.n	800082a <__aeabi_fadd+0xb6>
 8000828:	e09a      	b.n	8000960 <__aeabi_fadd+0x1ec>
 800082a:	0192      	lsls	r2, r2, #6
 800082c:	0a52      	lsrs	r2, r2, #9
 800082e:	4694      	mov	ip, r2
 8000830:	b2db      	uxtb	r3, r3
 8000832:	05d8      	lsls	r0, r3, #23
 8000834:	4663      	mov	r3, ip
 8000836:	07e4      	lsls	r4, r4, #31
 8000838:	4318      	orrs	r0, r3
 800083a:	4320      	orrs	r0, r4
 800083c:	bce0      	pop	{r5, r6, r7}
 800083e:	46ba      	mov	sl, r7
 8000840:	46b1      	mov	r9, r6
 8000842:	46a8      	mov	r8, r5
 8000844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000846:	2800      	cmp	r0, #0
 8000848:	d049      	beq.n	80008de <__aeabi_fadd+0x16a>
 800084a:	1bf3      	subs	r3, r6, r7
 800084c:	2f00      	cmp	r7, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_fadd+0xde>
 8000850:	e0b6      	b.n	80009c0 <__aeabi_fadd+0x24c>
 8000852:	4652      	mov	r2, sl
 8000854:	2a00      	cmp	r2, #0
 8000856:	d060      	beq.n	800091a <__aeabi_fadd+0x1a6>
 8000858:	3b01      	subs	r3, #1
 800085a:	2b00      	cmp	r3, #0
 800085c:	d100      	bne.n	8000860 <__aeabi_fadd+0xec>
 800085e:	e0fc      	b.n	8000a5a <__aeabi_fadd+0x2e6>
 8000860:	2eff      	cmp	r6, #255	; 0xff
 8000862:	d000      	beq.n	8000866 <__aeabi_fadd+0xf2>
 8000864:	e0b4      	b.n	80009d0 <__aeabi_fadd+0x25c>
 8000866:	000c      	movs	r4, r1
 8000868:	4642      	mov	r2, r8
 800086a:	2a00      	cmp	r2, #0
 800086c:	d078      	beq.n	8000960 <__aeabi_fadd+0x1ec>
 800086e:	2080      	movs	r0, #128	; 0x80
 8000870:	03c0      	lsls	r0, r0, #15
 8000872:	4310      	orrs	r0, r2
 8000874:	0242      	lsls	r2, r0, #9
 8000876:	0a53      	lsrs	r3, r2, #9
 8000878:	469c      	mov	ip, r3
 800087a:	23ff      	movs	r3, #255	; 0xff
 800087c:	e7d9      	b.n	8000832 <__aeabi_fadd+0xbe>
 800087e:	1bb9      	subs	r1, r7, r6
 8000880:	2900      	cmp	r1, #0
 8000882:	dd71      	ble.n	8000968 <__aeabi_fadd+0x1f4>
 8000884:	2e00      	cmp	r6, #0
 8000886:	d03f      	beq.n	8000908 <__aeabi_fadd+0x194>
 8000888:	2fff      	cmp	r7, #255	; 0xff
 800088a:	d0ee      	beq.n	800086a <__aeabi_fadd+0xf6>
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	04db      	lsls	r3, r3, #19
 8000890:	431d      	orrs	r5, r3
 8000892:	2201      	movs	r2, #1
 8000894:	291b      	cmp	r1, #27
 8000896:	dc07      	bgt.n	80008a8 <__aeabi_fadd+0x134>
 8000898:	002a      	movs	r2, r5
 800089a:	2320      	movs	r3, #32
 800089c:	40ca      	lsrs	r2, r1
 800089e:	1a59      	subs	r1, r3, r1
 80008a0:	408d      	lsls	r5, r1
 80008a2:	1e6b      	subs	r3, r5, #1
 80008a4:	419d      	sbcs	r5, r3
 80008a6:	432a      	orrs	r2, r5
 80008a8:	4452      	add	r2, sl
 80008aa:	0153      	lsls	r3, r2, #5
 80008ac:	d553      	bpl.n	8000956 <__aeabi_fadd+0x1e2>
 80008ae:	3701      	adds	r7, #1
 80008b0:	2fff      	cmp	r7, #255	; 0xff
 80008b2:	d055      	beq.n	8000960 <__aeabi_fadd+0x1ec>
 80008b4:	2301      	movs	r3, #1
 80008b6:	497b      	ldr	r1, [pc, #492]	; (8000aa4 <__aeabi_fadd+0x330>)
 80008b8:	4013      	ands	r3, r2
 80008ba:	0852      	lsrs	r2, r2, #1
 80008bc:	400a      	ands	r2, r1
 80008be:	431a      	orrs	r2, r3
 80008c0:	e7a5      	b.n	800080e <__aeabi_fadd+0x9a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d02c      	beq.n	8000920 <__aeabi_fadd+0x1ac>
 80008c6:	2301      	movs	r3, #1
 80008c8:	425b      	negs	r3, r3
 80008ca:	469c      	mov	ip, r3
 80008cc:	44e1      	add	r9, ip
 80008ce:	464b      	mov	r3, r9
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fadd+0x162>
 80008d4:	e0ad      	b.n	8000a32 <__aeabi_fadd+0x2be>
 80008d6:	2fff      	cmp	r7, #255	; 0xff
 80008d8:	d000      	beq.n	80008dc <__aeabi_fadd+0x168>
 80008da:	e76e      	b.n	80007ba <__aeabi_fadd+0x46>
 80008dc:	e7c5      	b.n	800086a <__aeabi_fadd+0xf6>
 80008de:	20fe      	movs	r0, #254	; 0xfe
 80008e0:	1c7e      	adds	r6, r7, #1
 80008e2:	4230      	tst	r0, r6
 80008e4:	d160      	bne.n	80009a8 <__aeabi_fadd+0x234>
 80008e6:	2f00      	cmp	r7, #0
 80008e8:	d000      	beq.n	80008ec <__aeabi_fadd+0x178>
 80008ea:	e093      	b.n	8000a14 <__aeabi_fadd+0x2a0>
 80008ec:	4652      	mov	r2, sl
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fadd+0x180>
 80008f2:	e0b6      	b.n	8000a62 <__aeabi_fadd+0x2ee>
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d09c      	beq.n	8000832 <__aeabi_fadd+0xbe>
 80008f8:	1b52      	subs	r2, r2, r5
 80008fa:	0150      	lsls	r0, r2, #5
 80008fc:	d400      	bmi.n	8000900 <__aeabi_fadd+0x18c>
 80008fe:	e0c3      	b.n	8000a88 <__aeabi_fadd+0x314>
 8000900:	4653      	mov	r3, sl
 8000902:	000c      	movs	r4, r1
 8000904:	1aea      	subs	r2, r5, r3
 8000906:	e782      	b.n	800080e <__aeabi_fadd+0x9a>
 8000908:	2d00      	cmp	r5, #0
 800090a:	d009      	beq.n	8000920 <__aeabi_fadd+0x1ac>
 800090c:	3901      	subs	r1, #1
 800090e:	2900      	cmp	r1, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_fadd+0x1a0>
 8000912:	e08b      	b.n	8000a2c <__aeabi_fadd+0x2b8>
 8000914:	2fff      	cmp	r7, #255	; 0xff
 8000916:	d1bc      	bne.n	8000892 <__aeabi_fadd+0x11e>
 8000918:	e7a7      	b.n	800086a <__aeabi_fadd+0xf6>
 800091a:	000c      	movs	r4, r1
 800091c:	4642      	mov	r2, r8
 800091e:	0037      	movs	r7, r6
 8000920:	2fff      	cmp	r7, #255	; 0xff
 8000922:	d0a2      	beq.n	800086a <__aeabi_fadd+0xf6>
 8000924:	0252      	lsls	r2, r2, #9
 8000926:	0a53      	lsrs	r3, r2, #9
 8000928:	469c      	mov	ip, r3
 800092a:	b2fb      	uxtb	r3, r7
 800092c:	e781      	b.n	8000832 <__aeabi_fadd+0xbe>
 800092e:	21fe      	movs	r1, #254	; 0xfe
 8000930:	3701      	adds	r7, #1
 8000932:	4239      	tst	r1, r7
 8000934:	d165      	bne.n	8000a02 <__aeabi_fadd+0x28e>
 8000936:	2b00      	cmp	r3, #0
 8000938:	d17e      	bne.n	8000a38 <__aeabi_fadd+0x2c4>
 800093a:	2800      	cmp	r0, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_fadd+0x1cc>
 800093e:	e0aa      	b.n	8000a96 <__aeabi_fadd+0x322>
 8000940:	2d00      	cmp	r5, #0
 8000942:	d100      	bne.n	8000946 <__aeabi_fadd+0x1d2>
 8000944:	e775      	b.n	8000832 <__aeabi_fadd+0xbe>
 8000946:	002a      	movs	r2, r5
 8000948:	4452      	add	r2, sl
 800094a:	2700      	movs	r7, #0
 800094c:	0153      	lsls	r3, r2, #5
 800094e:	d502      	bpl.n	8000956 <__aeabi_fadd+0x1e2>
 8000950:	4b55      	ldr	r3, [pc, #340]	; (8000aa8 <__aeabi_fadd+0x334>)
 8000952:	3701      	adds	r7, #1
 8000954:	401a      	ands	r2, r3
 8000956:	0753      	lsls	r3, r2, #29
 8000958:	d000      	beq.n	800095c <__aeabi_fadd+0x1e8>
 800095a:	e75a      	b.n	8000812 <__aeabi_fadd+0x9e>
 800095c:	08d2      	lsrs	r2, r2, #3
 800095e:	e7df      	b.n	8000920 <__aeabi_fadd+0x1ac>
 8000960:	2200      	movs	r2, #0
 8000962:	23ff      	movs	r3, #255	; 0xff
 8000964:	4694      	mov	ip, r2
 8000966:	e764      	b.n	8000832 <__aeabi_fadd+0xbe>
 8000968:	2900      	cmp	r1, #0
 800096a:	d0e0      	beq.n	800092e <__aeabi_fadd+0x1ba>
 800096c:	1bf3      	subs	r3, r6, r7
 800096e:	2f00      	cmp	r7, #0
 8000970:	d03e      	beq.n	80009f0 <__aeabi_fadd+0x27c>
 8000972:	2eff      	cmp	r6, #255	; 0xff
 8000974:	d100      	bne.n	8000978 <__aeabi_fadd+0x204>
 8000976:	e777      	b.n	8000868 <__aeabi_fadd+0xf4>
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	0001      	movs	r1, r0
 800097c:	04d2      	lsls	r2, r2, #19
 800097e:	4311      	orrs	r1, r2
 8000980:	468a      	mov	sl, r1
 8000982:	2201      	movs	r2, #1
 8000984:	2b1b      	cmp	r3, #27
 8000986:	dc08      	bgt.n	800099a <__aeabi_fadd+0x226>
 8000988:	4652      	mov	r2, sl
 800098a:	2120      	movs	r1, #32
 800098c:	4650      	mov	r0, sl
 800098e:	40da      	lsrs	r2, r3
 8000990:	1acb      	subs	r3, r1, r3
 8000992:	4098      	lsls	r0, r3
 8000994:	1e43      	subs	r3, r0, #1
 8000996:	4198      	sbcs	r0, r3
 8000998:	4302      	orrs	r2, r0
 800099a:	0037      	movs	r7, r6
 800099c:	1952      	adds	r2, r2, r5
 800099e:	e784      	b.n	80008aa <__aeabi_fadd+0x136>
 80009a0:	4a41      	ldr	r2, [pc, #260]	; (8000aa8 <__aeabi_fadd+0x334>)
 80009a2:	1a3f      	subs	r7, r7, r0
 80009a4:	4032      	ands	r2, r6
 80009a6:	e732      	b.n	800080e <__aeabi_fadd+0x9a>
 80009a8:	4653      	mov	r3, sl
 80009aa:	1b5e      	subs	r6, r3, r5
 80009ac:	0173      	lsls	r3, r6, #5
 80009ae:	d42d      	bmi.n	8000a0c <__aeabi_fadd+0x298>
 80009b0:	2e00      	cmp	r6, #0
 80009b2:	d000      	beq.n	80009b6 <__aeabi_fadd+0x242>
 80009b4:	e717      	b.n	80007e6 <__aeabi_fadd+0x72>
 80009b6:	2200      	movs	r2, #0
 80009b8:	2400      	movs	r4, #0
 80009ba:	2300      	movs	r3, #0
 80009bc:	4694      	mov	ip, r2
 80009be:	e738      	b.n	8000832 <__aeabi_fadd+0xbe>
 80009c0:	2eff      	cmp	r6, #255	; 0xff
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x252>
 80009c4:	e74f      	b.n	8000866 <__aeabi_fadd+0xf2>
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	4650      	mov	r0, sl
 80009ca:	04d2      	lsls	r2, r2, #19
 80009cc:	4310      	orrs	r0, r2
 80009ce:	4682      	mov	sl, r0
 80009d0:	2201      	movs	r2, #1
 80009d2:	2b1b      	cmp	r3, #27
 80009d4:	dc08      	bgt.n	80009e8 <__aeabi_fadd+0x274>
 80009d6:	4652      	mov	r2, sl
 80009d8:	2420      	movs	r4, #32
 80009da:	4650      	mov	r0, sl
 80009dc:	40da      	lsrs	r2, r3
 80009de:	1ae3      	subs	r3, r4, r3
 80009e0:	4098      	lsls	r0, r3
 80009e2:	1e43      	subs	r3, r0, #1
 80009e4:	4198      	sbcs	r0, r3
 80009e6:	4302      	orrs	r2, r0
 80009e8:	000c      	movs	r4, r1
 80009ea:	0037      	movs	r7, r6
 80009ec:	1aaa      	subs	r2, r5, r2
 80009ee:	e6f5      	b.n	80007dc <__aeabi_fadd+0x68>
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d093      	beq.n	800091c <__aeabi_fadd+0x1a8>
 80009f4:	3b01      	subs	r3, #1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d04f      	beq.n	8000a9a <__aeabi_fadd+0x326>
 80009fa:	2eff      	cmp	r6, #255	; 0xff
 80009fc:	d1c1      	bne.n	8000982 <__aeabi_fadd+0x20e>
 80009fe:	4642      	mov	r2, r8
 8000a00:	e733      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a02:	2fff      	cmp	r7, #255	; 0xff
 8000a04:	d0ac      	beq.n	8000960 <__aeabi_fadd+0x1ec>
 8000a06:	4455      	add	r5, sl
 8000a08:	086a      	lsrs	r2, r5, #1
 8000a0a:	e7a4      	b.n	8000956 <__aeabi_fadd+0x1e2>
 8000a0c:	4653      	mov	r3, sl
 8000a0e:	000c      	movs	r4, r1
 8000a10:	1aee      	subs	r6, r5, r3
 8000a12:	e6e8      	b.n	80007e6 <__aeabi_fadd+0x72>
 8000a14:	4653      	mov	r3, sl
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d128      	bne.n	8000a6c <__aeabi_fadd+0x2f8>
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d000      	beq.n	8000a20 <__aeabi_fadd+0x2ac>
 8000a1e:	e722      	b.n	8000866 <__aeabi_fadd+0xf2>
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	03db      	lsls	r3, r3, #15
 8000a24:	469c      	mov	ip, r3
 8000a26:	2400      	movs	r4, #0
 8000a28:	23ff      	movs	r3, #255	; 0xff
 8000a2a:	e702      	b.n	8000832 <__aeabi_fadd+0xbe>
 8000a2c:	002a      	movs	r2, r5
 8000a2e:	4452      	add	r2, sl
 8000a30:	e73b      	b.n	80008aa <__aeabi_fadd+0x136>
 8000a32:	4653      	mov	r3, sl
 8000a34:	1b5a      	subs	r2, r3, r5
 8000a36:	e6d1      	b.n	80007dc <__aeabi_fadd+0x68>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_fadd+0x2ca>
 8000a3c:	e714      	b.n	8000868 <__aeabi_fadd+0xf4>
 8000a3e:	2d00      	cmp	r5, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fadd+0x2d0>
 8000a42:	e712      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	03db      	lsls	r3, r3, #15
 8000a48:	421a      	tst	r2, r3
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_fadd+0x2da>
 8000a4c:	e70d      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a4e:	4641      	mov	r1, r8
 8000a50:	4219      	tst	r1, r3
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fadd+0x2e2>
 8000a54:	e709      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a56:	4642      	mov	r2, r8
 8000a58:	e707      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0037      	movs	r7, r6
 8000a5e:	1aaa      	subs	r2, r5, r2
 8000a60:	e6bc      	b.n	80007dc <__aeabi_fadd+0x68>
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	d013      	beq.n	8000a8e <__aeabi_fadd+0x31a>
 8000a66:	000c      	movs	r4, r1
 8000a68:	46c4      	mov	ip, r8
 8000a6a:	e6e2      	b.n	8000832 <__aeabi_fadd+0xbe>
 8000a6c:	2d00      	cmp	r5, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fadd+0x2fe>
 8000a70:	e6fb      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	03db      	lsls	r3, r3, #15
 8000a76:	421a      	tst	r2, r3
 8000a78:	d100      	bne.n	8000a7c <__aeabi_fadd+0x308>
 8000a7a:	e6f6      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	4218      	tst	r0, r3
 8000a80:	d000      	beq.n	8000a84 <__aeabi_fadd+0x310>
 8000a82:	e6f2      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a84:	000c      	movs	r4, r1
 8000a86:	e6ef      	b.n	8000868 <__aeabi_fadd+0xf4>
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	d000      	beq.n	8000a8e <__aeabi_fadd+0x31a>
 8000a8c:	e763      	b.n	8000956 <__aeabi_fadd+0x1e2>
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2400      	movs	r4, #0
 8000a92:	4694      	mov	ip, r2
 8000a94:	e6cd      	b.n	8000832 <__aeabi_fadd+0xbe>
 8000a96:	46c4      	mov	ip, r8
 8000a98:	e6cb      	b.n	8000832 <__aeabi_fadd+0xbe>
 8000a9a:	002a      	movs	r2, r5
 8000a9c:	0037      	movs	r7, r6
 8000a9e:	4452      	add	r2, sl
 8000aa0:	e703      	b.n	80008aa <__aeabi_fadd+0x136>
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	7dffffff 	.word	0x7dffffff
 8000aa8:	fbffffff 	.word	0xfbffffff

08000aac <__aeabi_fdiv>:
 8000aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aae:	464f      	mov	r7, r9
 8000ab0:	4646      	mov	r6, r8
 8000ab2:	46d6      	mov	lr, sl
 8000ab4:	0245      	lsls	r5, r0, #9
 8000ab6:	b5c0      	push	{r6, r7, lr}
 8000ab8:	0047      	lsls	r7, r0, #1
 8000aba:	1c0c      	adds	r4, r1, #0
 8000abc:	0a6d      	lsrs	r5, r5, #9
 8000abe:	0e3f      	lsrs	r7, r7, #24
 8000ac0:	0fc6      	lsrs	r6, r0, #31
 8000ac2:	2f00      	cmp	r7, #0
 8000ac4:	d066      	beq.n	8000b94 <__aeabi_fdiv+0xe8>
 8000ac6:	2fff      	cmp	r7, #255	; 0xff
 8000ac8:	d06c      	beq.n	8000ba4 <__aeabi_fdiv+0xf8>
 8000aca:	2300      	movs	r3, #0
 8000acc:	00ea      	lsls	r2, r5, #3
 8000ace:	2580      	movs	r5, #128	; 0x80
 8000ad0:	4699      	mov	r9, r3
 8000ad2:	469a      	mov	sl, r3
 8000ad4:	04ed      	lsls	r5, r5, #19
 8000ad6:	4315      	orrs	r5, r2
 8000ad8:	3f7f      	subs	r7, #127	; 0x7f
 8000ada:	0260      	lsls	r0, r4, #9
 8000adc:	0061      	lsls	r1, r4, #1
 8000ade:	0a43      	lsrs	r3, r0, #9
 8000ae0:	4698      	mov	r8, r3
 8000ae2:	0e09      	lsrs	r1, r1, #24
 8000ae4:	0fe4      	lsrs	r4, r4, #31
 8000ae6:	2900      	cmp	r1, #0
 8000ae8:	d048      	beq.n	8000b7c <__aeabi_fdiv+0xd0>
 8000aea:	29ff      	cmp	r1, #255	; 0xff
 8000aec:	d010      	beq.n	8000b10 <__aeabi_fdiv+0x64>
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	00d8      	lsls	r0, r3, #3
 8000af2:	04d2      	lsls	r2, r2, #19
 8000af4:	4302      	orrs	r2, r0
 8000af6:	4690      	mov	r8, r2
 8000af8:	2000      	movs	r0, #0
 8000afa:	397f      	subs	r1, #127	; 0x7f
 8000afc:	464a      	mov	r2, r9
 8000afe:	0033      	movs	r3, r6
 8000b00:	1a7f      	subs	r7, r7, r1
 8000b02:	4302      	orrs	r2, r0
 8000b04:	496c      	ldr	r1, [pc, #432]	; (8000cb8 <__aeabi_fdiv+0x20c>)
 8000b06:	0092      	lsls	r2, r2, #2
 8000b08:	588a      	ldr	r2, [r1, r2]
 8000b0a:	4063      	eors	r3, r4
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4697      	mov	pc, r2
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d16d      	bne.n	8000bf0 <__aeabi_fdiv+0x144>
 8000b14:	2002      	movs	r0, #2
 8000b16:	3fff      	subs	r7, #255	; 0xff
 8000b18:	e033      	b.n	8000b82 <__aeabi_fdiv+0xd6>
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	0026      	movs	r6, r4
 8000b20:	4645      	mov	r5, r8
 8000b22:	4682      	mov	sl, r0
 8000b24:	4653      	mov	r3, sl
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fdiv+0x80>
 8000b2a:	e07f      	b.n	8000c2c <__aeabi_fdiv+0x180>
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_fdiv+0x86>
 8000b30:	e094      	b.n	8000c5c <__aeabi_fdiv+0x1b0>
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d017      	beq.n	8000b66 <__aeabi_fdiv+0xba>
 8000b36:	0038      	movs	r0, r7
 8000b38:	307f      	adds	r0, #127	; 0x7f
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	dd5f      	ble.n	8000bfe <__aeabi_fdiv+0x152>
 8000b3e:	076b      	lsls	r3, r5, #29
 8000b40:	d004      	beq.n	8000b4c <__aeabi_fdiv+0xa0>
 8000b42:	230f      	movs	r3, #15
 8000b44:	402b      	ands	r3, r5
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d000      	beq.n	8000b4c <__aeabi_fdiv+0xa0>
 8000b4a:	3504      	adds	r5, #4
 8000b4c:	012b      	lsls	r3, r5, #4
 8000b4e:	d503      	bpl.n	8000b58 <__aeabi_fdiv+0xac>
 8000b50:	0038      	movs	r0, r7
 8000b52:	4b5a      	ldr	r3, [pc, #360]	; (8000cbc <__aeabi_fdiv+0x210>)
 8000b54:	3080      	adds	r0, #128	; 0x80
 8000b56:	401d      	ands	r5, r3
 8000b58:	28fe      	cmp	r0, #254	; 0xfe
 8000b5a:	dc67      	bgt.n	8000c2c <__aeabi_fdiv+0x180>
 8000b5c:	01ad      	lsls	r5, r5, #6
 8000b5e:	0a6d      	lsrs	r5, r5, #9
 8000b60:	b2c0      	uxtb	r0, r0
 8000b62:	e002      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000b64:	001e      	movs	r6, r3
 8000b66:	2000      	movs	r0, #0
 8000b68:	2500      	movs	r5, #0
 8000b6a:	05c0      	lsls	r0, r0, #23
 8000b6c:	4328      	orrs	r0, r5
 8000b6e:	07f6      	lsls	r6, r6, #31
 8000b70:	4330      	orrs	r0, r6
 8000b72:	bce0      	pop	{r5, r6, r7}
 8000b74:	46ba      	mov	sl, r7
 8000b76:	46b1      	mov	r9, r6
 8000b78:	46a8      	mov	r8, r5
 8000b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d12b      	bne.n	8000bd8 <__aeabi_fdiv+0x12c>
 8000b80:	2001      	movs	r0, #1
 8000b82:	464a      	mov	r2, r9
 8000b84:	0033      	movs	r3, r6
 8000b86:	494e      	ldr	r1, [pc, #312]	; (8000cc0 <__aeabi_fdiv+0x214>)
 8000b88:	4302      	orrs	r2, r0
 8000b8a:	0092      	lsls	r2, r2, #2
 8000b8c:	588a      	ldr	r2, [r1, r2]
 8000b8e:	4063      	eors	r3, r4
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	4697      	mov	pc, r2
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d113      	bne.n	8000bc0 <__aeabi_fdiv+0x114>
 8000b98:	2304      	movs	r3, #4
 8000b9a:	4699      	mov	r9, r3
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	2700      	movs	r7, #0
 8000ba0:	469a      	mov	sl, r3
 8000ba2:	e79a      	b.n	8000ada <__aeabi_fdiv+0x2e>
 8000ba4:	2d00      	cmp	r5, #0
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_fdiv+0x108>
 8000ba8:	2308      	movs	r3, #8
 8000baa:	4699      	mov	r9, r3
 8000bac:	3b06      	subs	r3, #6
 8000bae:	27ff      	movs	r7, #255	; 0xff
 8000bb0:	469a      	mov	sl, r3
 8000bb2:	e792      	b.n	8000ada <__aeabi_fdiv+0x2e>
 8000bb4:	230c      	movs	r3, #12
 8000bb6:	4699      	mov	r9, r3
 8000bb8:	3b09      	subs	r3, #9
 8000bba:	27ff      	movs	r7, #255	; 0xff
 8000bbc:	469a      	mov	sl, r3
 8000bbe:	e78c      	b.n	8000ada <__aeabi_fdiv+0x2e>
 8000bc0:	0028      	movs	r0, r5
 8000bc2:	f002 fb63 	bl	800328c <__clzsi2>
 8000bc6:	2776      	movs	r7, #118	; 0x76
 8000bc8:	1f43      	subs	r3, r0, #5
 8000bca:	409d      	lsls	r5, r3
 8000bcc:	2300      	movs	r3, #0
 8000bce:	427f      	negs	r7, r7
 8000bd0:	4699      	mov	r9, r3
 8000bd2:	469a      	mov	sl, r3
 8000bd4:	1a3f      	subs	r7, r7, r0
 8000bd6:	e780      	b.n	8000ada <__aeabi_fdiv+0x2e>
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f002 fb57 	bl	800328c <__clzsi2>
 8000bde:	4642      	mov	r2, r8
 8000be0:	1f43      	subs	r3, r0, #5
 8000be2:	2176      	movs	r1, #118	; 0x76
 8000be4:	409a      	lsls	r2, r3
 8000be6:	4249      	negs	r1, r1
 8000be8:	1a09      	subs	r1, r1, r0
 8000bea:	4690      	mov	r8, r2
 8000bec:	2000      	movs	r0, #0
 8000bee:	e785      	b.n	8000afc <__aeabi_fdiv+0x50>
 8000bf0:	21ff      	movs	r1, #255	; 0xff
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	e782      	b.n	8000afc <__aeabi_fdiv+0x50>
 8000bf6:	001e      	movs	r6, r3
 8000bf8:	20ff      	movs	r0, #255	; 0xff
 8000bfa:	2500      	movs	r5, #0
 8000bfc:	e7b5      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	1a1b      	subs	r3, r3, r0
 8000c02:	2b1b      	cmp	r3, #27
 8000c04:	dcaf      	bgt.n	8000b66 <__aeabi_fdiv+0xba>
 8000c06:	379e      	adds	r7, #158	; 0x9e
 8000c08:	0029      	movs	r1, r5
 8000c0a:	40bd      	lsls	r5, r7
 8000c0c:	40d9      	lsrs	r1, r3
 8000c0e:	1e6a      	subs	r2, r5, #1
 8000c10:	4195      	sbcs	r5, r2
 8000c12:	430d      	orrs	r5, r1
 8000c14:	076b      	lsls	r3, r5, #29
 8000c16:	d004      	beq.n	8000c22 <__aeabi_fdiv+0x176>
 8000c18:	230f      	movs	r3, #15
 8000c1a:	402b      	ands	r3, r5
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d000      	beq.n	8000c22 <__aeabi_fdiv+0x176>
 8000c20:	3504      	adds	r5, #4
 8000c22:	016b      	lsls	r3, r5, #5
 8000c24:	d544      	bpl.n	8000cb0 <__aeabi_fdiv+0x204>
 8000c26:	2001      	movs	r0, #1
 8000c28:	2500      	movs	r5, #0
 8000c2a:	e79e      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000c2c:	20ff      	movs	r0, #255	; 0xff
 8000c2e:	2500      	movs	r5, #0
 8000c30:	e79b      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000c32:	2580      	movs	r5, #128	; 0x80
 8000c34:	2600      	movs	r6, #0
 8000c36:	20ff      	movs	r0, #255	; 0xff
 8000c38:	03ed      	lsls	r5, r5, #15
 8000c3a:	e796      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4698      	mov	r8, r3
 8000c40:	2080      	movs	r0, #128	; 0x80
 8000c42:	03c0      	lsls	r0, r0, #15
 8000c44:	4205      	tst	r5, r0
 8000c46:	d009      	beq.n	8000c5c <__aeabi_fdiv+0x1b0>
 8000c48:	4643      	mov	r3, r8
 8000c4a:	4203      	tst	r3, r0
 8000c4c:	d106      	bne.n	8000c5c <__aeabi_fdiv+0x1b0>
 8000c4e:	4645      	mov	r5, r8
 8000c50:	4305      	orrs	r5, r0
 8000c52:	026d      	lsls	r5, r5, #9
 8000c54:	0026      	movs	r6, r4
 8000c56:	20ff      	movs	r0, #255	; 0xff
 8000c58:	0a6d      	lsrs	r5, r5, #9
 8000c5a:	e786      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000c5c:	2080      	movs	r0, #128	; 0x80
 8000c5e:	03c0      	lsls	r0, r0, #15
 8000c60:	4305      	orrs	r5, r0
 8000c62:	026d      	lsls	r5, r5, #9
 8000c64:	20ff      	movs	r0, #255	; 0xff
 8000c66:	0a6d      	lsrs	r5, r5, #9
 8000c68:	e77f      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000c6a:	4641      	mov	r1, r8
 8000c6c:	016a      	lsls	r2, r5, #5
 8000c6e:	0148      	lsls	r0, r1, #5
 8000c70:	4282      	cmp	r2, r0
 8000c72:	d219      	bcs.n	8000ca8 <__aeabi_fdiv+0x1fc>
 8000c74:	211b      	movs	r1, #27
 8000c76:	2500      	movs	r5, #0
 8000c78:	3f01      	subs	r7, #1
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	0014      	movs	r4, r2
 8000c7e:	006d      	lsls	r5, r5, #1
 8000c80:	0052      	lsls	r2, r2, #1
 8000c82:	2c00      	cmp	r4, #0
 8000c84:	db01      	blt.n	8000c8a <__aeabi_fdiv+0x1de>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	d801      	bhi.n	8000c8e <__aeabi_fdiv+0x1e2>
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	4335      	orrs	r5, r6
 8000c8e:	3901      	subs	r1, #1
 8000c90:	2900      	cmp	r1, #0
 8000c92:	d1f3      	bne.n	8000c7c <__aeabi_fdiv+0x1d0>
 8000c94:	1e50      	subs	r0, r2, #1
 8000c96:	4182      	sbcs	r2, r0
 8000c98:	0038      	movs	r0, r7
 8000c9a:	307f      	adds	r0, #127	; 0x7f
 8000c9c:	001e      	movs	r6, r3
 8000c9e:	4315      	orrs	r5, r2
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	dd00      	ble.n	8000ca6 <__aeabi_fdiv+0x1fa>
 8000ca4:	e74b      	b.n	8000b3e <__aeabi_fdiv+0x92>
 8000ca6:	e7aa      	b.n	8000bfe <__aeabi_fdiv+0x152>
 8000ca8:	211a      	movs	r1, #26
 8000caa:	2501      	movs	r5, #1
 8000cac:	1a12      	subs	r2, r2, r0
 8000cae:	e7e4      	b.n	8000c7a <__aeabi_fdiv+0x1ce>
 8000cb0:	01ad      	lsls	r5, r5, #6
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	0a6d      	lsrs	r5, r5, #9
 8000cb6:	e758      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000cb8:	0800aa88 	.word	0x0800aa88
 8000cbc:	f7ffffff 	.word	0xf7ffffff
 8000cc0:	0800aac8 	.word	0x0800aac8

08000cc4 <__eqsf2>:
 8000cc4:	b570      	push	{r4, r5, r6, lr}
 8000cc6:	0042      	lsls	r2, r0, #1
 8000cc8:	024e      	lsls	r6, r1, #9
 8000cca:	004c      	lsls	r4, r1, #1
 8000ccc:	0245      	lsls	r5, r0, #9
 8000cce:	0a6d      	lsrs	r5, r5, #9
 8000cd0:	0e12      	lsrs	r2, r2, #24
 8000cd2:	0fc3      	lsrs	r3, r0, #31
 8000cd4:	0a76      	lsrs	r6, r6, #9
 8000cd6:	0e24      	lsrs	r4, r4, #24
 8000cd8:	0fc9      	lsrs	r1, r1, #31
 8000cda:	2aff      	cmp	r2, #255	; 0xff
 8000cdc:	d00f      	beq.n	8000cfe <__eqsf2+0x3a>
 8000cde:	2cff      	cmp	r4, #255	; 0xff
 8000ce0:	d011      	beq.n	8000d06 <__eqsf2+0x42>
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	42a2      	cmp	r2, r4
 8000ce6:	d000      	beq.n	8000cea <__eqsf2+0x26>
 8000ce8:	bd70      	pop	{r4, r5, r6, pc}
 8000cea:	42b5      	cmp	r5, r6
 8000cec:	d1fc      	bne.n	8000ce8 <__eqsf2+0x24>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d00d      	beq.n	8000d0e <__eqsf2+0x4a>
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	d1f8      	bne.n	8000ce8 <__eqsf2+0x24>
 8000cf6:	0028      	movs	r0, r5
 8000cf8:	1e45      	subs	r5, r0, #1
 8000cfa:	41a8      	sbcs	r0, r5
 8000cfc:	e7f4      	b.n	8000ce8 <__eqsf2+0x24>
 8000cfe:	2001      	movs	r0, #1
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d1f1      	bne.n	8000ce8 <__eqsf2+0x24>
 8000d04:	e7eb      	b.n	8000cde <__eqsf2+0x1a>
 8000d06:	2001      	movs	r0, #1
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d1ed      	bne.n	8000ce8 <__eqsf2+0x24>
 8000d0c:	e7e9      	b.n	8000ce2 <__eqsf2+0x1e>
 8000d0e:	2000      	movs	r0, #0
 8000d10:	e7ea      	b.n	8000ce8 <__eqsf2+0x24>
 8000d12:	46c0      	nop			; (mov r8, r8)

08000d14 <__gesf2>:
 8000d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d16:	0042      	lsls	r2, r0, #1
 8000d18:	0246      	lsls	r6, r0, #9
 8000d1a:	024d      	lsls	r5, r1, #9
 8000d1c:	004c      	lsls	r4, r1, #1
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e12      	lsrs	r2, r2, #24
 8000d24:	0a6d      	lsrs	r5, r5, #9
 8000d26:	0e24      	lsrs	r4, r4, #24
 8000d28:	0fc8      	lsrs	r0, r1, #31
 8000d2a:	2aff      	cmp	r2, #255	; 0xff
 8000d2c:	d01f      	beq.n	8000d6e <__gesf2+0x5a>
 8000d2e:	2cff      	cmp	r4, #255	; 0xff
 8000d30:	d010      	beq.n	8000d54 <__gesf2+0x40>
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	d11f      	bne.n	8000d76 <__gesf2+0x62>
 8000d36:	4271      	negs	r1, r6
 8000d38:	4171      	adcs	r1, r6
 8000d3a:	2c00      	cmp	r4, #0
 8000d3c:	d101      	bne.n	8000d42 <__gesf2+0x2e>
 8000d3e:	2d00      	cmp	r5, #0
 8000d40:	d01e      	beq.n	8000d80 <__gesf2+0x6c>
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d10e      	bne.n	8000d64 <__gesf2+0x50>
 8000d46:	4283      	cmp	r3, r0
 8000d48:	d01e      	beq.n	8000d88 <__gesf2+0x74>
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	1e58      	subs	r0, r3, #1
 8000d4e:	4008      	ands	r0, r1
 8000d50:	3801      	subs	r0, #1
 8000d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d54:	2d00      	cmp	r5, #0
 8000d56:	d126      	bne.n	8000da6 <__gesf2+0x92>
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	d1f4      	bne.n	8000d46 <__gesf2+0x32>
 8000d5c:	4271      	negs	r1, r6
 8000d5e:	4171      	adcs	r1, r6
 8000d60:	2900      	cmp	r1, #0
 8000d62:	d0f0      	beq.n	8000d46 <__gesf2+0x32>
 8000d64:	2800      	cmp	r0, #0
 8000d66:	d1f4      	bne.n	8000d52 <__gesf2+0x3e>
 8000d68:	2001      	movs	r0, #1
 8000d6a:	4240      	negs	r0, r0
 8000d6c:	e7f1      	b.n	8000d52 <__gesf2+0x3e>
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d119      	bne.n	8000da6 <__gesf2+0x92>
 8000d72:	2cff      	cmp	r4, #255	; 0xff
 8000d74:	d0ee      	beq.n	8000d54 <__gesf2+0x40>
 8000d76:	2c00      	cmp	r4, #0
 8000d78:	d1e5      	bne.n	8000d46 <__gesf2+0x32>
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d1e3      	bne.n	8000d46 <__gesf2+0x32>
 8000d7e:	e7e4      	b.n	8000d4a <__gesf2+0x36>
 8000d80:	2000      	movs	r0, #0
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e5      	beq.n	8000d52 <__gesf2+0x3e>
 8000d86:	e7e0      	b.n	8000d4a <__gesf2+0x36>
 8000d88:	42a2      	cmp	r2, r4
 8000d8a:	dc05      	bgt.n	8000d98 <__gesf2+0x84>
 8000d8c:	dbea      	blt.n	8000d64 <__gesf2+0x50>
 8000d8e:	42ae      	cmp	r6, r5
 8000d90:	d802      	bhi.n	8000d98 <__gesf2+0x84>
 8000d92:	d3e7      	bcc.n	8000d64 <__gesf2+0x50>
 8000d94:	2000      	movs	r0, #0
 8000d96:	e7dc      	b.n	8000d52 <__gesf2+0x3e>
 8000d98:	4241      	negs	r1, r0
 8000d9a:	4141      	adcs	r1, r0
 8000d9c:	4248      	negs	r0, r1
 8000d9e:	2102      	movs	r1, #2
 8000da0:	4008      	ands	r0, r1
 8000da2:	3801      	subs	r0, #1
 8000da4:	e7d5      	b.n	8000d52 <__gesf2+0x3e>
 8000da6:	2002      	movs	r0, #2
 8000da8:	4240      	negs	r0, r0
 8000daa:	e7d2      	b.n	8000d52 <__gesf2+0x3e>

08000dac <__lesf2>:
 8000dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dae:	0042      	lsls	r2, r0, #1
 8000db0:	0246      	lsls	r6, r0, #9
 8000db2:	024d      	lsls	r5, r1, #9
 8000db4:	004c      	lsls	r4, r1, #1
 8000db6:	0fc3      	lsrs	r3, r0, #31
 8000db8:	0a76      	lsrs	r6, r6, #9
 8000dba:	0e12      	lsrs	r2, r2, #24
 8000dbc:	0a6d      	lsrs	r5, r5, #9
 8000dbe:	0e24      	lsrs	r4, r4, #24
 8000dc0:	0fc8      	lsrs	r0, r1, #31
 8000dc2:	2aff      	cmp	r2, #255	; 0xff
 8000dc4:	d00d      	beq.n	8000de2 <__lesf2+0x36>
 8000dc6:	2cff      	cmp	r4, #255	; 0xff
 8000dc8:	d00f      	beq.n	8000dea <__lesf2+0x3e>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	d123      	bne.n	8000e16 <__lesf2+0x6a>
 8000dce:	4271      	negs	r1, r6
 8000dd0:	4171      	adcs	r1, r6
 8000dd2:	2c00      	cmp	r4, #0
 8000dd4:	d10f      	bne.n	8000df6 <__lesf2+0x4a>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d10d      	bne.n	8000df6 <__lesf2+0x4a>
 8000dda:	2000      	movs	r0, #0
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d014      	beq.n	8000e0a <__lesf2+0x5e>
 8000de0:	e00d      	b.n	8000dfe <__lesf2+0x52>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d110      	bne.n	8000e08 <__lesf2+0x5c>
 8000de6:	2cff      	cmp	r4, #255	; 0xff
 8000de8:	d115      	bne.n	8000e16 <__lesf2+0x6a>
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d10c      	bne.n	8000e08 <__lesf2+0x5c>
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	d103      	bne.n	8000dfa <__lesf2+0x4e>
 8000df2:	4271      	negs	r1, r6
 8000df4:	4171      	adcs	r1, r6
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d108      	bne.n	8000e0c <__lesf2+0x60>
 8000dfa:	4283      	cmp	r3, r0
 8000dfc:	d010      	beq.n	8000e20 <__lesf2+0x74>
 8000dfe:	2102      	movs	r1, #2
 8000e00:	1e58      	subs	r0, r3, #1
 8000e02:	4008      	ands	r0, r1
 8000e04:	3801      	subs	r0, #1
 8000e06:	e000      	b.n	8000e0a <__lesf2+0x5e>
 8000e08:	2002      	movs	r0, #2
 8000e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	d1fc      	bne.n	8000e0a <__lesf2+0x5e>
 8000e10:	2001      	movs	r0, #1
 8000e12:	4240      	negs	r0, r0
 8000e14:	e7f9      	b.n	8000e0a <__lesf2+0x5e>
 8000e16:	2c00      	cmp	r4, #0
 8000e18:	d1ef      	bne.n	8000dfa <__lesf2+0x4e>
 8000e1a:	2d00      	cmp	r5, #0
 8000e1c:	d1ed      	bne.n	8000dfa <__lesf2+0x4e>
 8000e1e:	e7ee      	b.n	8000dfe <__lesf2+0x52>
 8000e20:	42a2      	cmp	r2, r4
 8000e22:	dc05      	bgt.n	8000e30 <__lesf2+0x84>
 8000e24:	dbf2      	blt.n	8000e0c <__lesf2+0x60>
 8000e26:	42ae      	cmp	r6, r5
 8000e28:	d802      	bhi.n	8000e30 <__lesf2+0x84>
 8000e2a:	d3ef      	bcc.n	8000e0c <__lesf2+0x60>
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	e7ec      	b.n	8000e0a <__lesf2+0x5e>
 8000e30:	4241      	negs	r1, r0
 8000e32:	4141      	adcs	r1, r0
 8000e34:	4248      	negs	r0, r1
 8000e36:	2102      	movs	r1, #2
 8000e38:	4008      	ands	r0, r1
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	e7e5      	b.n	8000e0a <__lesf2+0x5e>
 8000e3e:	46c0      	nop			; (mov r8, r8)

08000e40 <__aeabi_fmul>:
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	4657      	mov	r7, sl
 8000e44:	464e      	mov	r6, r9
 8000e46:	4645      	mov	r5, r8
 8000e48:	46de      	mov	lr, fp
 8000e4a:	0244      	lsls	r4, r0, #9
 8000e4c:	b5e0      	push	{r5, r6, r7, lr}
 8000e4e:	0045      	lsls	r5, r0, #1
 8000e50:	1c0f      	adds	r7, r1, #0
 8000e52:	0a64      	lsrs	r4, r4, #9
 8000e54:	0e2d      	lsrs	r5, r5, #24
 8000e56:	0fc6      	lsrs	r6, r0, #31
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d047      	beq.n	8000eec <__aeabi_fmul+0xac>
 8000e5c:	2dff      	cmp	r5, #255	; 0xff
 8000e5e:	d04d      	beq.n	8000efc <__aeabi_fmul+0xbc>
 8000e60:	2300      	movs	r3, #0
 8000e62:	2080      	movs	r0, #128	; 0x80
 8000e64:	469a      	mov	sl, r3
 8000e66:	469b      	mov	fp, r3
 8000e68:	00e4      	lsls	r4, r4, #3
 8000e6a:	04c0      	lsls	r0, r0, #19
 8000e6c:	4304      	orrs	r4, r0
 8000e6e:	3d7f      	subs	r5, #127	; 0x7f
 8000e70:	0278      	lsls	r0, r7, #9
 8000e72:	0a43      	lsrs	r3, r0, #9
 8000e74:	4699      	mov	r9, r3
 8000e76:	007a      	lsls	r2, r7, #1
 8000e78:	0ffb      	lsrs	r3, r7, #31
 8000e7a:	4698      	mov	r8, r3
 8000e7c:	0e12      	lsrs	r2, r2, #24
 8000e7e:	464b      	mov	r3, r9
 8000e80:	d044      	beq.n	8000f0c <__aeabi_fmul+0xcc>
 8000e82:	2aff      	cmp	r2, #255	; 0xff
 8000e84:	d011      	beq.n	8000eaa <__aeabi_fmul+0x6a>
 8000e86:	00d8      	lsls	r0, r3, #3
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	04db      	lsls	r3, r3, #19
 8000e8c:	4303      	orrs	r3, r0
 8000e8e:	4699      	mov	r9, r3
 8000e90:	2000      	movs	r0, #0
 8000e92:	3a7f      	subs	r2, #127	; 0x7f
 8000e94:	18ad      	adds	r5, r5, r2
 8000e96:	4647      	mov	r7, r8
 8000e98:	4653      	mov	r3, sl
 8000e9a:	4077      	eors	r7, r6
 8000e9c:	1c69      	adds	r1, r5, #1
 8000e9e:	2b0f      	cmp	r3, #15
 8000ea0:	d83f      	bhi.n	8000f22 <__aeabi_fmul+0xe2>
 8000ea2:	4a72      	ldr	r2, [pc, #456]	; (800106c <__aeabi_fmul+0x22c>)
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	58d3      	ldr	r3, [r2, r3]
 8000ea8:	469f      	mov	pc, r3
 8000eaa:	35ff      	adds	r5, #255	; 0xff
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d000      	beq.n	8000eb2 <__aeabi_fmul+0x72>
 8000eb0:	e079      	b.n	8000fa6 <__aeabi_fmul+0x166>
 8000eb2:	4652      	mov	r2, sl
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	4692      	mov	sl, r2
 8000eba:	2002      	movs	r0, #2
 8000ebc:	e7eb      	b.n	8000e96 <__aeabi_fmul+0x56>
 8000ebe:	4647      	mov	r7, r8
 8000ec0:	464c      	mov	r4, r9
 8000ec2:	4683      	mov	fp, r0
 8000ec4:	465b      	mov	r3, fp
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d028      	beq.n	8000f1c <__aeabi_fmul+0xdc>
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fmul+0x90>
 8000ece:	e0c6      	b.n	800105e <__aeabi_fmul+0x21e>
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d14f      	bne.n	8000f74 <__aeabi_fmul+0x134>
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	05c0      	lsls	r0, r0, #23
 8000eda:	07ff      	lsls	r7, r7, #31
 8000edc:	4320      	orrs	r0, r4
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	bcf0      	pop	{r4, r5, r6, r7}
 8000ee2:	46bb      	mov	fp, r7
 8000ee4:	46b2      	mov	sl, r6
 8000ee6:	46a9      	mov	r9, r5
 8000ee8:	46a0      	mov	r8, r4
 8000eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eec:	2c00      	cmp	r4, #0
 8000eee:	d171      	bne.n	8000fd4 <__aeabi_fmul+0x194>
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	469a      	mov	sl, r3
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	2500      	movs	r5, #0
 8000ef8:	469b      	mov	fp, r3
 8000efa:	e7b9      	b.n	8000e70 <__aeabi_fmul+0x30>
 8000efc:	2c00      	cmp	r4, #0
 8000efe:	d163      	bne.n	8000fc8 <__aeabi_fmul+0x188>
 8000f00:	2308      	movs	r3, #8
 8000f02:	469a      	mov	sl, r3
 8000f04:	3b06      	subs	r3, #6
 8000f06:	25ff      	movs	r5, #255	; 0xff
 8000f08:	469b      	mov	fp, r3
 8000f0a:	e7b1      	b.n	8000e70 <__aeabi_fmul+0x30>
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d150      	bne.n	8000fb2 <__aeabi_fmul+0x172>
 8000f10:	4652      	mov	r2, sl
 8000f12:	3301      	adds	r3, #1
 8000f14:	431a      	orrs	r2, r3
 8000f16:	4692      	mov	sl, r2
 8000f18:	2001      	movs	r0, #1
 8000f1a:	e7bc      	b.n	8000e96 <__aeabi_fmul+0x56>
 8000f1c:	20ff      	movs	r0, #255	; 0xff
 8000f1e:	2400      	movs	r4, #0
 8000f20:	e7da      	b.n	8000ed8 <__aeabi_fmul+0x98>
 8000f22:	4648      	mov	r0, r9
 8000f24:	0c26      	lsrs	r6, r4, #16
 8000f26:	0424      	lsls	r4, r4, #16
 8000f28:	0c22      	lsrs	r2, r4, #16
 8000f2a:	0404      	lsls	r4, r0, #16
 8000f2c:	0c24      	lsrs	r4, r4, #16
 8000f2e:	464b      	mov	r3, r9
 8000f30:	0020      	movs	r0, r4
 8000f32:	0c1b      	lsrs	r3, r3, #16
 8000f34:	4350      	muls	r0, r2
 8000f36:	4374      	muls	r4, r6
 8000f38:	435a      	muls	r2, r3
 8000f3a:	435e      	muls	r6, r3
 8000f3c:	1912      	adds	r2, r2, r4
 8000f3e:	0c03      	lsrs	r3, r0, #16
 8000f40:	189b      	adds	r3, r3, r2
 8000f42:	429c      	cmp	r4, r3
 8000f44:	d903      	bls.n	8000f4e <__aeabi_fmul+0x10e>
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	0252      	lsls	r2, r2, #9
 8000f4a:	4694      	mov	ip, r2
 8000f4c:	4466      	add	r6, ip
 8000f4e:	0400      	lsls	r0, r0, #16
 8000f50:	041a      	lsls	r2, r3, #16
 8000f52:	0c00      	lsrs	r0, r0, #16
 8000f54:	1812      	adds	r2, r2, r0
 8000f56:	0194      	lsls	r4, r2, #6
 8000f58:	1e60      	subs	r0, r4, #1
 8000f5a:	4184      	sbcs	r4, r0
 8000f5c:	0c1b      	lsrs	r3, r3, #16
 8000f5e:	0e92      	lsrs	r2, r2, #26
 8000f60:	199b      	adds	r3, r3, r6
 8000f62:	4314      	orrs	r4, r2
 8000f64:	019b      	lsls	r3, r3, #6
 8000f66:	431c      	orrs	r4, r3
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	d572      	bpl.n	8001052 <__aeabi_fmul+0x212>
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	0863      	lsrs	r3, r4, #1
 8000f70:	4004      	ands	r4, r0
 8000f72:	431c      	orrs	r4, r3
 8000f74:	0008      	movs	r0, r1
 8000f76:	307f      	adds	r0, #127	; 0x7f
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	dd3c      	ble.n	8000ff6 <__aeabi_fmul+0x1b6>
 8000f7c:	0763      	lsls	r3, r4, #29
 8000f7e:	d004      	beq.n	8000f8a <__aeabi_fmul+0x14a>
 8000f80:	230f      	movs	r3, #15
 8000f82:	4023      	ands	r3, r4
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d000      	beq.n	8000f8a <__aeabi_fmul+0x14a>
 8000f88:	3404      	adds	r4, #4
 8000f8a:	0123      	lsls	r3, r4, #4
 8000f8c:	d503      	bpl.n	8000f96 <__aeabi_fmul+0x156>
 8000f8e:	3180      	adds	r1, #128	; 0x80
 8000f90:	0008      	movs	r0, r1
 8000f92:	4b37      	ldr	r3, [pc, #220]	; (8001070 <__aeabi_fmul+0x230>)
 8000f94:	401c      	ands	r4, r3
 8000f96:	28fe      	cmp	r0, #254	; 0xfe
 8000f98:	dcc0      	bgt.n	8000f1c <__aeabi_fmul+0xdc>
 8000f9a:	01a4      	lsls	r4, r4, #6
 8000f9c:	0a64      	lsrs	r4, r4, #9
 8000f9e:	b2c0      	uxtb	r0, r0
 8000fa0:	e79a      	b.n	8000ed8 <__aeabi_fmul+0x98>
 8000fa2:	0037      	movs	r7, r6
 8000fa4:	e78e      	b.n	8000ec4 <__aeabi_fmul+0x84>
 8000fa6:	4652      	mov	r2, sl
 8000fa8:	2303      	movs	r3, #3
 8000faa:	431a      	orrs	r2, r3
 8000fac:	4692      	mov	sl, r2
 8000fae:	2003      	movs	r0, #3
 8000fb0:	e771      	b.n	8000e96 <__aeabi_fmul+0x56>
 8000fb2:	4648      	mov	r0, r9
 8000fb4:	f002 f96a 	bl	800328c <__clzsi2>
 8000fb8:	464a      	mov	r2, r9
 8000fba:	1f43      	subs	r3, r0, #5
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	1a2d      	subs	r5, r5, r0
 8000fc0:	4691      	mov	r9, r2
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	3d76      	subs	r5, #118	; 0x76
 8000fc6:	e766      	b.n	8000e96 <__aeabi_fmul+0x56>
 8000fc8:	230c      	movs	r3, #12
 8000fca:	469a      	mov	sl, r3
 8000fcc:	3b09      	subs	r3, #9
 8000fce:	25ff      	movs	r5, #255	; 0xff
 8000fd0:	469b      	mov	fp, r3
 8000fd2:	e74d      	b.n	8000e70 <__aeabi_fmul+0x30>
 8000fd4:	0020      	movs	r0, r4
 8000fd6:	f002 f959 	bl	800328c <__clzsi2>
 8000fda:	2576      	movs	r5, #118	; 0x76
 8000fdc:	1f43      	subs	r3, r0, #5
 8000fde:	409c      	lsls	r4, r3
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	426d      	negs	r5, r5
 8000fe4:	469a      	mov	sl, r3
 8000fe6:	469b      	mov	fp, r3
 8000fe8:	1a2d      	subs	r5, r5, r0
 8000fea:	e741      	b.n	8000e70 <__aeabi_fmul+0x30>
 8000fec:	2480      	movs	r4, #128	; 0x80
 8000fee:	2700      	movs	r7, #0
 8000ff0:	20ff      	movs	r0, #255	; 0xff
 8000ff2:	03e4      	lsls	r4, r4, #15
 8000ff4:	e770      	b.n	8000ed8 <__aeabi_fmul+0x98>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	1a1b      	subs	r3, r3, r0
 8000ffa:	2b1b      	cmp	r3, #27
 8000ffc:	dd00      	ble.n	8001000 <__aeabi_fmul+0x1c0>
 8000ffe:	e769      	b.n	8000ed4 <__aeabi_fmul+0x94>
 8001000:	319e      	adds	r1, #158	; 0x9e
 8001002:	0020      	movs	r0, r4
 8001004:	408c      	lsls	r4, r1
 8001006:	40d8      	lsrs	r0, r3
 8001008:	1e63      	subs	r3, r4, #1
 800100a:	419c      	sbcs	r4, r3
 800100c:	4304      	orrs	r4, r0
 800100e:	0763      	lsls	r3, r4, #29
 8001010:	d004      	beq.n	800101c <__aeabi_fmul+0x1dc>
 8001012:	230f      	movs	r3, #15
 8001014:	4023      	ands	r3, r4
 8001016:	2b04      	cmp	r3, #4
 8001018:	d000      	beq.n	800101c <__aeabi_fmul+0x1dc>
 800101a:	3404      	adds	r4, #4
 800101c:	0163      	lsls	r3, r4, #5
 800101e:	d51a      	bpl.n	8001056 <__aeabi_fmul+0x216>
 8001020:	2001      	movs	r0, #1
 8001022:	2400      	movs	r4, #0
 8001024:	e758      	b.n	8000ed8 <__aeabi_fmul+0x98>
 8001026:	2080      	movs	r0, #128	; 0x80
 8001028:	03c0      	lsls	r0, r0, #15
 800102a:	4204      	tst	r4, r0
 800102c:	d009      	beq.n	8001042 <__aeabi_fmul+0x202>
 800102e:	464b      	mov	r3, r9
 8001030:	4203      	tst	r3, r0
 8001032:	d106      	bne.n	8001042 <__aeabi_fmul+0x202>
 8001034:	464c      	mov	r4, r9
 8001036:	4304      	orrs	r4, r0
 8001038:	0264      	lsls	r4, r4, #9
 800103a:	4647      	mov	r7, r8
 800103c:	20ff      	movs	r0, #255	; 0xff
 800103e:	0a64      	lsrs	r4, r4, #9
 8001040:	e74a      	b.n	8000ed8 <__aeabi_fmul+0x98>
 8001042:	2080      	movs	r0, #128	; 0x80
 8001044:	03c0      	lsls	r0, r0, #15
 8001046:	4304      	orrs	r4, r0
 8001048:	0264      	lsls	r4, r4, #9
 800104a:	0037      	movs	r7, r6
 800104c:	20ff      	movs	r0, #255	; 0xff
 800104e:	0a64      	lsrs	r4, r4, #9
 8001050:	e742      	b.n	8000ed8 <__aeabi_fmul+0x98>
 8001052:	0029      	movs	r1, r5
 8001054:	e78e      	b.n	8000f74 <__aeabi_fmul+0x134>
 8001056:	01a4      	lsls	r4, r4, #6
 8001058:	2000      	movs	r0, #0
 800105a:	0a64      	lsrs	r4, r4, #9
 800105c:	e73c      	b.n	8000ed8 <__aeabi_fmul+0x98>
 800105e:	2080      	movs	r0, #128	; 0x80
 8001060:	03c0      	lsls	r0, r0, #15
 8001062:	4304      	orrs	r4, r0
 8001064:	0264      	lsls	r4, r4, #9
 8001066:	20ff      	movs	r0, #255	; 0xff
 8001068:	0a64      	lsrs	r4, r4, #9
 800106a:	e735      	b.n	8000ed8 <__aeabi_fmul+0x98>
 800106c:	0800ab08 	.word	0x0800ab08
 8001070:	f7ffffff 	.word	0xf7ffffff

08001074 <__aeabi_fsub>:
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	4646      	mov	r6, r8
 8001078:	46d6      	mov	lr, sl
 800107a:	464f      	mov	r7, r9
 800107c:	0243      	lsls	r3, r0, #9
 800107e:	0a5b      	lsrs	r3, r3, #9
 8001080:	00da      	lsls	r2, r3, #3
 8001082:	4694      	mov	ip, r2
 8001084:	024a      	lsls	r2, r1, #9
 8001086:	b5c0      	push	{r6, r7, lr}
 8001088:	0044      	lsls	r4, r0, #1
 800108a:	0a56      	lsrs	r6, r2, #9
 800108c:	1c05      	adds	r5, r0, #0
 800108e:	46b0      	mov	r8, r6
 8001090:	0e24      	lsrs	r4, r4, #24
 8001092:	004e      	lsls	r6, r1, #1
 8001094:	0992      	lsrs	r2, r2, #6
 8001096:	001f      	movs	r7, r3
 8001098:	0020      	movs	r0, r4
 800109a:	4692      	mov	sl, r2
 800109c:	0fed      	lsrs	r5, r5, #31
 800109e:	0e36      	lsrs	r6, r6, #24
 80010a0:	0fc9      	lsrs	r1, r1, #31
 80010a2:	2eff      	cmp	r6, #255	; 0xff
 80010a4:	d100      	bne.n	80010a8 <__aeabi_fsub+0x34>
 80010a6:	e07f      	b.n	80011a8 <__aeabi_fsub+0x134>
 80010a8:	2201      	movs	r2, #1
 80010aa:	4051      	eors	r1, r2
 80010ac:	428d      	cmp	r5, r1
 80010ae:	d051      	beq.n	8001154 <__aeabi_fsub+0xe0>
 80010b0:	1ba2      	subs	r2, r4, r6
 80010b2:	4691      	mov	r9, r2
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	dc00      	bgt.n	80010ba <__aeabi_fsub+0x46>
 80010b8:	e07e      	b.n	80011b8 <__aeabi_fsub+0x144>
 80010ba:	2e00      	cmp	r6, #0
 80010bc:	d100      	bne.n	80010c0 <__aeabi_fsub+0x4c>
 80010be:	e099      	b.n	80011f4 <__aeabi_fsub+0x180>
 80010c0:	2cff      	cmp	r4, #255	; 0xff
 80010c2:	d100      	bne.n	80010c6 <__aeabi_fsub+0x52>
 80010c4:	e08c      	b.n	80011e0 <__aeabi_fsub+0x16c>
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	4652      	mov	r2, sl
 80010ca:	04db      	lsls	r3, r3, #19
 80010cc:	431a      	orrs	r2, r3
 80010ce:	4692      	mov	sl, r2
 80010d0:	464a      	mov	r2, r9
 80010d2:	2301      	movs	r3, #1
 80010d4:	2a1b      	cmp	r2, #27
 80010d6:	dc08      	bgt.n	80010ea <__aeabi_fsub+0x76>
 80010d8:	4653      	mov	r3, sl
 80010da:	2120      	movs	r1, #32
 80010dc:	40d3      	lsrs	r3, r2
 80010de:	1a89      	subs	r1, r1, r2
 80010e0:	4652      	mov	r2, sl
 80010e2:	408a      	lsls	r2, r1
 80010e4:	1e51      	subs	r1, r2, #1
 80010e6:	418a      	sbcs	r2, r1
 80010e8:	4313      	orrs	r3, r2
 80010ea:	4662      	mov	r2, ip
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	015a      	lsls	r2, r3, #5
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_fsub+0x80>
 80010f2:	e0f3      	b.n	80012dc <__aeabi_fsub+0x268>
 80010f4:	019b      	lsls	r3, r3, #6
 80010f6:	099e      	lsrs	r6, r3, #6
 80010f8:	0030      	movs	r0, r6
 80010fa:	f002 f8c7 	bl	800328c <__clzsi2>
 80010fe:	3805      	subs	r0, #5
 8001100:	4086      	lsls	r6, r0
 8001102:	4284      	cmp	r4, r0
 8001104:	dd00      	ble.n	8001108 <__aeabi_fsub+0x94>
 8001106:	e0f7      	b.n	80012f8 <__aeabi_fsub+0x284>
 8001108:	0032      	movs	r2, r6
 800110a:	1b04      	subs	r4, r0, r4
 800110c:	2020      	movs	r0, #32
 800110e:	3401      	adds	r4, #1
 8001110:	40e2      	lsrs	r2, r4
 8001112:	1b04      	subs	r4, r0, r4
 8001114:	40a6      	lsls	r6, r4
 8001116:	0033      	movs	r3, r6
 8001118:	1e5e      	subs	r6, r3, #1
 800111a:	41b3      	sbcs	r3, r6
 800111c:	2400      	movs	r4, #0
 800111e:	4313      	orrs	r3, r2
 8001120:	075a      	lsls	r2, r3, #29
 8001122:	d004      	beq.n	800112e <__aeabi_fsub+0xba>
 8001124:	220f      	movs	r2, #15
 8001126:	401a      	ands	r2, r3
 8001128:	2a04      	cmp	r2, #4
 800112a:	d000      	beq.n	800112e <__aeabi_fsub+0xba>
 800112c:	3304      	adds	r3, #4
 800112e:	015a      	lsls	r2, r3, #5
 8001130:	d400      	bmi.n	8001134 <__aeabi_fsub+0xc0>
 8001132:	e0d6      	b.n	80012e2 <__aeabi_fsub+0x26e>
 8001134:	1c62      	adds	r2, r4, #1
 8001136:	2cfe      	cmp	r4, #254	; 0xfe
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0xc8>
 800113a:	e0da      	b.n	80012f2 <__aeabi_fsub+0x27e>
 800113c:	019b      	lsls	r3, r3, #6
 800113e:	0a5f      	lsrs	r7, r3, #9
 8001140:	b2d0      	uxtb	r0, r2
 8001142:	05c0      	lsls	r0, r0, #23
 8001144:	4338      	orrs	r0, r7
 8001146:	07ed      	lsls	r5, r5, #31
 8001148:	4328      	orrs	r0, r5
 800114a:	bce0      	pop	{r5, r6, r7}
 800114c:	46ba      	mov	sl, r7
 800114e:	46b1      	mov	r9, r6
 8001150:	46a8      	mov	r8, r5
 8001152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001154:	1ba2      	subs	r2, r4, r6
 8001156:	4691      	mov	r9, r2
 8001158:	2a00      	cmp	r2, #0
 800115a:	dd63      	ble.n	8001224 <__aeabi_fsub+0x1b0>
 800115c:	2e00      	cmp	r6, #0
 800115e:	d100      	bne.n	8001162 <__aeabi_fsub+0xee>
 8001160:	e099      	b.n	8001296 <__aeabi_fsub+0x222>
 8001162:	2cff      	cmp	r4, #255	; 0xff
 8001164:	d03c      	beq.n	80011e0 <__aeabi_fsub+0x16c>
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	4652      	mov	r2, sl
 800116a:	04db      	lsls	r3, r3, #19
 800116c:	431a      	orrs	r2, r3
 800116e:	4692      	mov	sl, r2
 8001170:	464a      	mov	r2, r9
 8001172:	2301      	movs	r3, #1
 8001174:	2a1b      	cmp	r2, #27
 8001176:	dc08      	bgt.n	800118a <__aeabi_fsub+0x116>
 8001178:	4653      	mov	r3, sl
 800117a:	2120      	movs	r1, #32
 800117c:	40d3      	lsrs	r3, r2
 800117e:	1a89      	subs	r1, r1, r2
 8001180:	4652      	mov	r2, sl
 8001182:	408a      	lsls	r2, r1
 8001184:	1e51      	subs	r1, r2, #1
 8001186:	418a      	sbcs	r2, r1
 8001188:	4313      	orrs	r3, r2
 800118a:	4463      	add	r3, ip
 800118c:	015a      	lsls	r2, r3, #5
 800118e:	d400      	bmi.n	8001192 <__aeabi_fsub+0x11e>
 8001190:	e0a4      	b.n	80012dc <__aeabi_fsub+0x268>
 8001192:	3401      	adds	r4, #1
 8001194:	2cff      	cmp	r4, #255	; 0xff
 8001196:	d100      	bne.n	800119a <__aeabi_fsub+0x126>
 8001198:	e0ab      	b.n	80012f2 <__aeabi_fsub+0x27e>
 800119a:	2201      	movs	r2, #1
 800119c:	4997      	ldr	r1, [pc, #604]	; (80013fc <__aeabi_fsub+0x388>)
 800119e:	401a      	ands	r2, r3
 80011a0:	085b      	lsrs	r3, r3, #1
 80011a2:	400b      	ands	r3, r1
 80011a4:	4313      	orrs	r3, r2
 80011a6:	e7bb      	b.n	8001120 <__aeabi_fsub+0xac>
 80011a8:	2a00      	cmp	r2, #0
 80011aa:	d032      	beq.n	8001212 <__aeabi_fsub+0x19e>
 80011ac:	428d      	cmp	r5, r1
 80011ae:	d035      	beq.n	800121c <__aeabi_fsub+0x1a8>
 80011b0:	22ff      	movs	r2, #255	; 0xff
 80011b2:	4252      	negs	r2, r2
 80011b4:	4691      	mov	r9, r2
 80011b6:	44a1      	add	r9, r4
 80011b8:	464a      	mov	r2, r9
 80011ba:	2a00      	cmp	r2, #0
 80011bc:	d051      	beq.n	8001262 <__aeabi_fsub+0x1ee>
 80011be:	1b30      	subs	r0, r6, r4
 80011c0:	2c00      	cmp	r4, #0
 80011c2:	d000      	beq.n	80011c6 <__aeabi_fsub+0x152>
 80011c4:	e09c      	b.n	8001300 <__aeabi_fsub+0x28c>
 80011c6:	4663      	mov	r3, ip
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d100      	bne.n	80011ce <__aeabi_fsub+0x15a>
 80011cc:	e0df      	b.n	800138e <__aeabi_fsub+0x31a>
 80011ce:	3801      	subs	r0, #1
 80011d0:	2800      	cmp	r0, #0
 80011d2:	d100      	bne.n	80011d6 <__aeabi_fsub+0x162>
 80011d4:	e0f7      	b.n	80013c6 <__aeabi_fsub+0x352>
 80011d6:	2eff      	cmp	r6, #255	; 0xff
 80011d8:	d000      	beq.n	80011dc <__aeabi_fsub+0x168>
 80011da:	e099      	b.n	8001310 <__aeabi_fsub+0x29c>
 80011dc:	000d      	movs	r5, r1
 80011de:	4643      	mov	r3, r8
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_fsub+0x172>
 80011e4:	e085      	b.n	80012f2 <__aeabi_fsub+0x27e>
 80011e6:	2780      	movs	r7, #128	; 0x80
 80011e8:	03ff      	lsls	r7, r7, #15
 80011ea:	431f      	orrs	r7, r3
 80011ec:	027f      	lsls	r7, r7, #9
 80011ee:	20ff      	movs	r0, #255	; 0xff
 80011f0:	0a7f      	lsrs	r7, r7, #9
 80011f2:	e7a6      	b.n	8001142 <__aeabi_fsub+0xce>
 80011f4:	4652      	mov	r2, sl
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d074      	beq.n	80012e4 <__aeabi_fsub+0x270>
 80011fa:	2201      	movs	r2, #1
 80011fc:	4252      	negs	r2, r2
 80011fe:	4690      	mov	r8, r2
 8001200:	44c1      	add	r9, r8
 8001202:	464a      	mov	r2, r9
 8001204:	2a00      	cmp	r2, #0
 8001206:	d100      	bne.n	800120a <__aeabi_fsub+0x196>
 8001208:	e0c8      	b.n	800139c <__aeabi_fsub+0x328>
 800120a:	2cff      	cmp	r4, #255	; 0xff
 800120c:	d000      	beq.n	8001210 <__aeabi_fsub+0x19c>
 800120e:	e75f      	b.n	80010d0 <__aeabi_fsub+0x5c>
 8001210:	e7e6      	b.n	80011e0 <__aeabi_fsub+0x16c>
 8001212:	2201      	movs	r2, #1
 8001214:	4051      	eors	r1, r2
 8001216:	42a9      	cmp	r1, r5
 8001218:	d000      	beq.n	800121c <__aeabi_fsub+0x1a8>
 800121a:	e749      	b.n	80010b0 <__aeabi_fsub+0x3c>
 800121c:	22ff      	movs	r2, #255	; 0xff
 800121e:	4252      	negs	r2, r2
 8001220:	4691      	mov	r9, r2
 8001222:	44a1      	add	r9, r4
 8001224:	464a      	mov	r2, r9
 8001226:	2a00      	cmp	r2, #0
 8001228:	d043      	beq.n	80012b2 <__aeabi_fsub+0x23e>
 800122a:	1b31      	subs	r1, r6, r4
 800122c:	2c00      	cmp	r4, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_fsub+0x1be>
 8001230:	e08c      	b.n	800134c <__aeabi_fsub+0x2d8>
 8001232:	2eff      	cmp	r6, #255	; 0xff
 8001234:	d100      	bne.n	8001238 <__aeabi_fsub+0x1c4>
 8001236:	e092      	b.n	800135e <__aeabi_fsub+0x2ea>
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	4662      	mov	r2, ip
 800123c:	04db      	lsls	r3, r3, #19
 800123e:	431a      	orrs	r2, r3
 8001240:	4694      	mov	ip, r2
 8001242:	2301      	movs	r3, #1
 8001244:	291b      	cmp	r1, #27
 8001246:	dc09      	bgt.n	800125c <__aeabi_fsub+0x1e8>
 8001248:	2020      	movs	r0, #32
 800124a:	4663      	mov	r3, ip
 800124c:	4662      	mov	r2, ip
 800124e:	40cb      	lsrs	r3, r1
 8001250:	1a41      	subs	r1, r0, r1
 8001252:	408a      	lsls	r2, r1
 8001254:	0011      	movs	r1, r2
 8001256:	1e48      	subs	r0, r1, #1
 8001258:	4181      	sbcs	r1, r0
 800125a:	430b      	orrs	r3, r1
 800125c:	0034      	movs	r4, r6
 800125e:	4453      	add	r3, sl
 8001260:	e794      	b.n	800118c <__aeabi_fsub+0x118>
 8001262:	22fe      	movs	r2, #254	; 0xfe
 8001264:	1c66      	adds	r6, r4, #1
 8001266:	4232      	tst	r2, r6
 8001268:	d164      	bne.n	8001334 <__aeabi_fsub+0x2c0>
 800126a:	2c00      	cmp	r4, #0
 800126c:	d000      	beq.n	8001270 <__aeabi_fsub+0x1fc>
 800126e:	e082      	b.n	8001376 <__aeabi_fsub+0x302>
 8001270:	4663      	mov	r3, ip
 8001272:	2b00      	cmp	r3, #0
 8001274:	d100      	bne.n	8001278 <__aeabi_fsub+0x204>
 8001276:	e0ab      	b.n	80013d0 <__aeabi_fsub+0x35c>
 8001278:	4653      	mov	r3, sl
 800127a:	2b00      	cmp	r3, #0
 800127c:	d100      	bne.n	8001280 <__aeabi_fsub+0x20c>
 800127e:	e760      	b.n	8001142 <__aeabi_fsub+0xce>
 8001280:	4663      	mov	r3, ip
 8001282:	4652      	mov	r2, sl
 8001284:	1a9b      	subs	r3, r3, r2
 8001286:	015a      	lsls	r2, r3, #5
 8001288:	d400      	bmi.n	800128c <__aeabi_fsub+0x218>
 800128a:	e0aa      	b.n	80013e2 <__aeabi_fsub+0x36e>
 800128c:	4663      	mov	r3, ip
 800128e:	4652      	mov	r2, sl
 8001290:	000d      	movs	r5, r1
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	e744      	b.n	8001120 <__aeabi_fsub+0xac>
 8001296:	4652      	mov	r2, sl
 8001298:	2a00      	cmp	r2, #0
 800129a:	d023      	beq.n	80012e4 <__aeabi_fsub+0x270>
 800129c:	2201      	movs	r2, #1
 800129e:	4252      	negs	r2, r2
 80012a0:	4690      	mov	r8, r2
 80012a2:	44c1      	add	r9, r8
 80012a4:	464a      	mov	r2, r9
 80012a6:	2a00      	cmp	r2, #0
 80012a8:	d075      	beq.n	8001396 <__aeabi_fsub+0x322>
 80012aa:	2cff      	cmp	r4, #255	; 0xff
 80012ac:	d000      	beq.n	80012b0 <__aeabi_fsub+0x23c>
 80012ae:	e75f      	b.n	8001170 <__aeabi_fsub+0xfc>
 80012b0:	e796      	b.n	80011e0 <__aeabi_fsub+0x16c>
 80012b2:	26fe      	movs	r6, #254	; 0xfe
 80012b4:	3401      	adds	r4, #1
 80012b6:	4226      	tst	r6, r4
 80012b8:	d153      	bne.n	8001362 <__aeabi_fsub+0x2ee>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d172      	bne.n	80013a4 <__aeabi_fsub+0x330>
 80012be:	4663      	mov	r3, ip
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_fsub+0x252>
 80012c4:	e093      	b.n	80013ee <__aeabi_fsub+0x37a>
 80012c6:	4653      	mov	r3, sl
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d100      	bne.n	80012ce <__aeabi_fsub+0x25a>
 80012cc:	e739      	b.n	8001142 <__aeabi_fsub+0xce>
 80012ce:	4463      	add	r3, ip
 80012d0:	2400      	movs	r4, #0
 80012d2:	015a      	lsls	r2, r3, #5
 80012d4:	d502      	bpl.n	80012dc <__aeabi_fsub+0x268>
 80012d6:	4a4a      	ldr	r2, [pc, #296]	; (8001400 <__aeabi_fsub+0x38c>)
 80012d8:	3401      	adds	r4, #1
 80012da:	4013      	ands	r3, r2
 80012dc:	075a      	lsls	r2, r3, #29
 80012de:	d000      	beq.n	80012e2 <__aeabi_fsub+0x26e>
 80012e0:	e720      	b.n	8001124 <__aeabi_fsub+0xb0>
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	2cff      	cmp	r4, #255	; 0xff
 80012e6:	d100      	bne.n	80012ea <__aeabi_fsub+0x276>
 80012e8:	e77a      	b.n	80011e0 <__aeabi_fsub+0x16c>
 80012ea:	025b      	lsls	r3, r3, #9
 80012ec:	0a5f      	lsrs	r7, r3, #9
 80012ee:	b2e0      	uxtb	r0, r4
 80012f0:	e727      	b.n	8001142 <__aeabi_fsub+0xce>
 80012f2:	20ff      	movs	r0, #255	; 0xff
 80012f4:	2700      	movs	r7, #0
 80012f6:	e724      	b.n	8001142 <__aeabi_fsub+0xce>
 80012f8:	4b41      	ldr	r3, [pc, #260]	; (8001400 <__aeabi_fsub+0x38c>)
 80012fa:	1a24      	subs	r4, r4, r0
 80012fc:	4033      	ands	r3, r6
 80012fe:	e70f      	b.n	8001120 <__aeabi_fsub+0xac>
 8001300:	2eff      	cmp	r6, #255	; 0xff
 8001302:	d100      	bne.n	8001306 <__aeabi_fsub+0x292>
 8001304:	e76a      	b.n	80011dc <__aeabi_fsub+0x168>
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	4662      	mov	r2, ip
 800130a:	04db      	lsls	r3, r3, #19
 800130c:	431a      	orrs	r2, r3
 800130e:	4694      	mov	ip, r2
 8001310:	2301      	movs	r3, #1
 8001312:	281b      	cmp	r0, #27
 8001314:	dc09      	bgt.n	800132a <__aeabi_fsub+0x2b6>
 8001316:	2420      	movs	r4, #32
 8001318:	4663      	mov	r3, ip
 800131a:	4662      	mov	r2, ip
 800131c:	40c3      	lsrs	r3, r0
 800131e:	1a20      	subs	r0, r4, r0
 8001320:	4082      	lsls	r2, r0
 8001322:	0010      	movs	r0, r2
 8001324:	1e44      	subs	r4, r0, #1
 8001326:	41a0      	sbcs	r0, r4
 8001328:	4303      	orrs	r3, r0
 800132a:	4652      	mov	r2, sl
 800132c:	000d      	movs	r5, r1
 800132e:	0034      	movs	r4, r6
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	e6dc      	b.n	80010ee <__aeabi_fsub+0x7a>
 8001334:	4663      	mov	r3, ip
 8001336:	4652      	mov	r2, sl
 8001338:	1a9e      	subs	r6, r3, r2
 800133a:	0173      	lsls	r3, r6, #5
 800133c:	d417      	bmi.n	800136e <__aeabi_fsub+0x2fa>
 800133e:	2e00      	cmp	r6, #0
 8001340:	d000      	beq.n	8001344 <__aeabi_fsub+0x2d0>
 8001342:	e6d9      	b.n	80010f8 <__aeabi_fsub+0x84>
 8001344:	2500      	movs	r5, #0
 8001346:	2000      	movs	r0, #0
 8001348:	2700      	movs	r7, #0
 800134a:	e6fa      	b.n	8001142 <__aeabi_fsub+0xce>
 800134c:	4663      	mov	r3, ip
 800134e:	2b00      	cmp	r3, #0
 8001350:	d044      	beq.n	80013dc <__aeabi_fsub+0x368>
 8001352:	3901      	subs	r1, #1
 8001354:	2900      	cmp	r1, #0
 8001356:	d04c      	beq.n	80013f2 <__aeabi_fsub+0x37e>
 8001358:	2eff      	cmp	r6, #255	; 0xff
 800135a:	d000      	beq.n	800135e <__aeabi_fsub+0x2ea>
 800135c:	e771      	b.n	8001242 <__aeabi_fsub+0x1ce>
 800135e:	4643      	mov	r3, r8
 8001360:	e73e      	b.n	80011e0 <__aeabi_fsub+0x16c>
 8001362:	2cff      	cmp	r4, #255	; 0xff
 8001364:	d0c5      	beq.n	80012f2 <__aeabi_fsub+0x27e>
 8001366:	4652      	mov	r2, sl
 8001368:	4462      	add	r2, ip
 800136a:	0853      	lsrs	r3, r2, #1
 800136c:	e7b6      	b.n	80012dc <__aeabi_fsub+0x268>
 800136e:	4663      	mov	r3, ip
 8001370:	000d      	movs	r5, r1
 8001372:	1ad6      	subs	r6, r2, r3
 8001374:	e6c0      	b.n	80010f8 <__aeabi_fsub+0x84>
 8001376:	4662      	mov	r2, ip
 8001378:	2a00      	cmp	r2, #0
 800137a:	d116      	bne.n	80013aa <__aeabi_fsub+0x336>
 800137c:	4653      	mov	r3, sl
 800137e:	2b00      	cmp	r3, #0
 8001380:	d000      	beq.n	8001384 <__aeabi_fsub+0x310>
 8001382:	e72b      	b.n	80011dc <__aeabi_fsub+0x168>
 8001384:	2780      	movs	r7, #128	; 0x80
 8001386:	2500      	movs	r5, #0
 8001388:	20ff      	movs	r0, #255	; 0xff
 800138a:	03ff      	lsls	r7, r7, #15
 800138c:	e6d9      	b.n	8001142 <__aeabi_fsub+0xce>
 800138e:	000d      	movs	r5, r1
 8001390:	4643      	mov	r3, r8
 8001392:	0034      	movs	r4, r6
 8001394:	e7a6      	b.n	80012e4 <__aeabi_fsub+0x270>
 8001396:	4653      	mov	r3, sl
 8001398:	4463      	add	r3, ip
 800139a:	e6f7      	b.n	800118c <__aeabi_fsub+0x118>
 800139c:	4663      	mov	r3, ip
 800139e:	4652      	mov	r2, sl
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	e6a4      	b.n	80010ee <__aeabi_fsub+0x7a>
 80013a4:	4662      	mov	r2, ip
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	d0d9      	beq.n	800135e <__aeabi_fsub+0x2ea>
 80013aa:	4652      	mov	r2, sl
 80013ac:	2a00      	cmp	r2, #0
 80013ae:	d100      	bne.n	80013b2 <__aeabi_fsub+0x33e>
 80013b0:	e716      	b.n	80011e0 <__aeabi_fsub+0x16c>
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	03d2      	lsls	r2, r2, #15
 80013b6:	4213      	tst	r3, r2
 80013b8:	d100      	bne.n	80013bc <__aeabi_fsub+0x348>
 80013ba:	e711      	b.n	80011e0 <__aeabi_fsub+0x16c>
 80013bc:	4640      	mov	r0, r8
 80013be:	4210      	tst	r0, r2
 80013c0:	d000      	beq.n	80013c4 <__aeabi_fsub+0x350>
 80013c2:	e70d      	b.n	80011e0 <__aeabi_fsub+0x16c>
 80013c4:	e70a      	b.n	80011dc <__aeabi_fsub+0x168>
 80013c6:	4652      	mov	r2, sl
 80013c8:	000d      	movs	r5, r1
 80013ca:	0034      	movs	r4, r6
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	e68e      	b.n	80010ee <__aeabi_fsub+0x7a>
 80013d0:	4653      	mov	r3, sl
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d008      	beq.n	80013e8 <__aeabi_fsub+0x374>
 80013d6:	000d      	movs	r5, r1
 80013d8:	4647      	mov	r7, r8
 80013da:	e6b2      	b.n	8001142 <__aeabi_fsub+0xce>
 80013dc:	4643      	mov	r3, r8
 80013de:	0034      	movs	r4, r6
 80013e0:	e780      	b.n	80012e4 <__aeabi_fsub+0x270>
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d000      	beq.n	80013e8 <__aeabi_fsub+0x374>
 80013e6:	e779      	b.n	80012dc <__aeabi_fsub+0x268>
 80013e8:	2500      	movs	r5, #0
 80013ea:	2700      	movs	r7, #0
 80013ec:	e6a9      	b.n	8001142 <__aeabi_fsub+0xce>
 80013ee:	4647      	mov	r7, r8
 80013f0:	e6a7      	b.n	8001142 <__aeabi_fsub+0xce>
 80013f2:	4653      	mov	r3, sl
 80013f4:	0034      	movs	r4, r6
 80013f6:	4463      	add	r3, ip
 80013f8:	e6c8      	b.n	800118c <__aeabi_fsub+0x118>
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	7dffffff 	.word	0x7dffffff
 8001400:	fbffffff 	.word	0xfbffffff

08001404 <__aeabi_f2iz>:
 8001404:	0241      	lsls	r1, r0, #9
 8001406:	0042      	lsls	r2, r0, #1
 8001408:	0fc3      	lsrs	r3, r0, #31
 800140a:	0a49      	lsrs	r1, r1, #9
 800140c:	2000      	movs	r0, #0
 800140e:	0e12      	lsrs	r2, r2, #24
 8001410:	2a7e      	cmp	r2, #126	; 0x7e
 8001412:	d903      	bls.n	800141c <__aeabi_f2iz+0x18>
 8001414:	2a9d      	cmp	r2, #157	; 0x9d
 8001416:	d902      	bls.n	800141e <__aeabi_f2iz+0x1a>
 8001418:	4a09      	ldr	r2, [pc, #36]	; (8001440 <__aeabi_f2iz+0x3c>)
 800141a:	1898      	adds	r0, r3, r2
 800141c:	4770      	bx	lr
 800141e:	2080      	movs	r0, #128	; 0x80
 8001420:	0400      	lsls	r0, r0, #16
 8001422:	4301      	orrs	r1, r0
 8001424:	2a95      	cmp	r2, #149	; 0x95
 8001426:	dc07      	bgt.n	8001438 <__aeabi_f2iz+0x34>
 8001428:	2096      	movs	r0, #150	; 0x96
 800142a:	1a82      	subs	r2, r0, r2
 800142c:	40d1      	lsrs	r1, r2
 800142e:	4248      	negs	r0, r1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f3      	bne.n	800141c <__aeabi_f2iz+0x18>
 8001434:	0008      	movs	r0, r1
 8001436:	e7f1      	b.n	800141c <__aeabi_f2iz+0x18>
 8001438:	3a96      	subs	r2, #150	; 0x96
 800143a:	4091      	lsls	r1, r2
 800143c:	e7f7      	b.n	800142e <__aeabi_f2iz+0x2a>
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	7fffffff 	.word	0x7fffffff

08001444 <__aeabi_ui2f>:
 8001444:	b570      	push	{r4, r5, r6, lr}
 8001446:	1e05      	subs	r5, r0, #0
 8001448:	d00e      	beq.n	8001468 <__aeabi_ui2f+0x24>
 800144a:	f001 ff1f 	bl	800328c <__clzsi2>
 800144e:	239e      	movs	r3, #158	; 0x9e
 8001450:	0004      	movs	r4, r0
 8001452:	1a1b      	subs	r3, r3, r0
 8001454:	2b96      	cmp	r3, #150	; 0x96
 8001456:	dc0c      	bgt.n	8001472 <__aeabi_ui2f+0x2e>
 8001458:	2808      	cmp	r0, #8
 800145a:	dd01      	ble.n	8001460 <__aeabi_ui2f+0x1c>
 800145c:	3c08      	subs	r4, #8
 800145e:	40a5      	lsls	r5, r4
 8001460:	026d      	lsls	r5, r5, #9
 8001462:	0a6d      	lsrs	r5, r5, #9
 8001464:	b2d8      	uxtb	r0, r3
 8001466:	e001      	b.n	800146c <__aeabi_ui2f+0x28>
 8001468:	2000      	movs	r0, #0
 800146a:	2500      	movs	r5, #0
 800146c:	05c0      	lsls	r0, r0, #23
 800146e:	4328      	orrs	r0, r5
 8001470:	bd70      	pop	{r4, r5, r6, pc}
 8001472:	2b99      	cmp	r3, #153	; 0x99
 8001474:	dd09      	ble.n	800148a <__aeabi_ui2f+0x46>
 8001476:	0002      	movs	r2, r0
 8001478:	0029      	movs	r1, r5
 800147a:	321b      	adds	r2, #27
 800147c:	4091      	lsls	r1, r2
 800147e:	1e4a      	subs	r2, r1, #1
 8001480:	4191      	sbcs	r1, r2
 8001482:	2205      	movs	r2, #5
 8001484:	1a12      	subs	r2, r2, r0
 8001486:	40d5      	lsrs	r5, r2
 8001488:	430d      	orrs	r5, r1
 800148a:	2c05      	cmp	r4, #5
 800148c:	dd01      	ble.n	8001492 <__aeabi_ui2f+0x4e>
 800148e:	1f62      	subs	r2, r4, #5
 8001490:	4095      	lsls	r5, r2
 8001492:	0029      	movs	r1, r5
 8001494:	4e08      	ldr	r6, [pc, #32]	; (80014b8 <__aeabi_ui2f+0x74>)
 8001496:	4031      	ands	r1, r6
 8001498:	076a      	lsls	r2, r5, #29
 800149a:	d009      	beq.n	80014b0 <__aeabi_ui2f+0x6c>
 800149c:	200f      	movs	r0, #15
 800149e:	4028      	ands	r0, r5
 80014a0:	2804      	cmp	r0, #4
 80014a2:	d005      	beq.n	80014b0 <__aeabi_ui2f+0x6c>
 80014a4:	3104      	adds	r1, #4
 80014a6:	014a      	lsls	r2, r1, #5
 80014a8:	d502      	bpl.n	80014b0 <__aeabi_ui2f+0x6c>
 80014aa:	239f      	movs	r3, #159	; 0x9f
 80014ac:	4031      	ands	r1, r6
 80014ae:	1b1b      	subs	r3, r3, r4
 80014b0:	0189      	lsls	r1, r1, #6
 80014b2:	0a4d      	lsrs	r5, r1, #9
 80014b4:	b2d8      	uxtb	r0, r3
 80014b6:	e7d9      	b.n	800146c <__aeabi_ui2f+0x28>
 80014b8:	fbffffff 	.word	0xfbffffff

080014bc <__aeabi_dadd>:
 80014bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014be:	464f      	mov	r7, r9
 80014c0:	46d6      	mov	lr, sl
 80014c2:	4646      	mov	r6, r8
 80014c4:	000d      	movs	r5, r1
 80014c6:	0001      	movs	r1, r0
 80014c8:	0018      	movs	r0, r3
 80014ca:	b5c0      	push	{r6, r7, lr}
 80014cc:	0017      	movs	r7, r2
 80014ce:	032b      	lsls	r3, r5, #12
 80014d0:	0a5a      	lsrs	r2, r3, #9
 80014d2:	0f4b      	lsrs	r3, r1, #29
 80014d4:	4313      	orrs	r3, r2
 80014d6:	00ca      	lsls	r2, r1, #3
 80014d8:	4691      	mov	r9, r2
 80014da:	0302      	lsls	r2, r0, #12
 80014dc:	006e      	lsls	r6, r5, #1
 80014de:	0041      	lsls	r1, r0, #1
 80014e0:	0a52      	lsrs	r2, r2, #9
 80014e2:	0fec      	lsrs	r4, r5, #31
 80014e4:	0f7d      	lsrs	r5, r7, #29
 80014e6:	4315      	orrs	r5, r2
 80014e8:	0d76      	lsrs	r6, r6, #21
 80014ea:	0d49      	lsrs	r1, r1, #21
 80014ec:	0fc0      	lsrs	r0, r0, #31
 80014ee:	4682      	mov	sl, r0
 80014f0:	46ac      	mov	ip, r5
 80014f2:	00ff      	lsls	r7, r7, #3
 80014f4:	1a72      	subs	r2, r6, r1
 80014f6:	4284      	cmp	r4, r0
 80014f8:	d100      	bne.n	80014fc <__aeabi_dadd+0x40>
 80014fa:	e098      	b.n	800162e <__aeabi_dadd+0x172>
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	dc00      	bgt.n	8001502 <__aeabi_dadd+0x46>
 8001500:	e081      	b.n	8001606 <__aeabi_dadd+0x14a>
 8001502:	2900      	cmp	r1, #0
 8001504:	d100      	bne.n	8001508 <__aeabi_dadd+0x4c>
 8001506:	e0b6      	b.n	8001676 <__aeabi_dadd+0x1ba>
 8001508:	49c9      	ldr	r1, [pc, #804]	; (8001830 <__aeabi_dadd+0x374>)
 800150a:	428e      	cmp	r6, r1
 800150c:	d100      	bne.n	8001510 <__aeabi_dadd+0x54>
 800150e:	e172      	b.n	80017f6 <__aeabi_dadd+0x33a>
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	0028      	movs	r0, r5
 8001514:	0409      	lsls	r1, r1, #16
 8001516:	4308      	orrs	r0, r1
 8001518:	4684      	mov	ip, r0
 800151a:	2a38      	cmp	r2, #56	; 0x38
 800151c:	dd00      	ble.n	8001520 <__aeabi_dadd+0x64>
 800151e:	e15e      	b.n	80017de <__aeabi_dadd+0x322>
 8001520:	2a1f      	cmp	r2, #31
 8001522:	dd00      	ble.n	8001526 <__aeabi_dadd+0x6a>
 8001524:	e1ee      	b.n	8001904 <__aeabi_dadd+0x448>
 8001526:	2020      	movs	r0, #32
 8001528:	0039      	movs	r1, r7
 800152a:	4665      	mov	r5, ip
 800152c:	1a80      	subs	r0, r0, r2
 800152e:	4087      	lsls	r7, r0
 8001530:	40d1      	lsrs	r1, r2
 8001532:	4085      	lsls	r5, r0
 8001534:	430d      	orrs	r5, r1
 8001536:	0039      	movs	r1, r7
 8001538:	1e4f      	subs	r7, r1, #1
 800153a:	41b9      	sbcs	r1, r7
 800153c:	4667      	mov	r7, ip
 800153e:	40d7      	lsrs	r7, r2
 8001540:	4329      	orrs	r1, r5
 8001542:	1bdb      	subs	r3, r3, r7
 8001544:	464a      	mov	r2, r9
 8001546:	1a55      	subs	r5, r2, r1
 8001548:	45a9      	cmp	r9, r5
 800154a:	4189      	sbcs	r1, r1
 800154c:	4249      	negs	r1, r1
 800154e:	1a5b      	subs	r3, r3, r1
 8001550:	4698      	mov	r8, r3
 8001552:	4643      	mov	r3, r8
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	d400      	bmi.n	800155a <__aeabi_dadd+0x9e>
 8001558:	e0cc      	b.n	80016f4 <__aeabi_dadd+0x238>
 800155a:	4643      	mov	r3, r8
 800155c:	025b      	lsls	r3, r3, #9
 800155e:	0a5b      	lsrs	r3, r3, #9
 8001560:	4698      	mov	r8, r3
 8001562:	4643      	mov	r3, r8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0xae>
 8001568:	e12c      	b.n	80017c4 <__aeabi_dadd+0x308>
 800156a:	4640      	mov	r0, r8
 800156c:	f001 fe8e 	bl	800328c <__clzsi2>
 8001570:	0001      	movs	r1, r0
 8001572:	3908      	subs	r1, #8
 8001574:	2220      	movs	r2, #32
 8001576:	0028      	movs	r0, r5
 8001578:	4643      	mov	r3, r8
 800157a:	1a52      	subs	r2, r2, r1
 800157c:	408b      	lsls	r3, r1
 800157e:	40d0      	lsrs	r0, r2
 8001580:	408d      	lsls	r5, r1
 8001582:	4303      	orrs	r3, r0
 8001584:	428e      	cmp	r6, r1
 8001586:	dd00      	ble.n	800158a <__aeabi_dadd+0xce>
 8001588:	e117      	b.n	80017ba <__aeabi_dadd+0x2fe>
 800158a:	1b8e      	subs	r6, r1, r6
 800158c:	1c72      	adds	r2, r6, #1
 800158e:	2a1f      	cmp	r2, #31
 8001590:	dd00      	ble.n	8001594 <__aeabi_dadd+0xd8>
 8001592:	e1a7      	b.n	80018e4 <__aeabi_dadd+0x428>
 8001594:	2120      	movs	r1, #32
 8001596:	0018      	movs	r0, r3
 8001598:	002e      	movs	r6, r5
 800159a:	1a89      	subs	r1, r1, r2
 800159c:	408d      	lsls	r5, r1
 800159e:	4088      	lsls	r0, r1
 80015a0:	40d6      	lsrs	r6, r2
 80015a2:	40d3      	lsrs	r3, r2
 80015a4:	1e69      	subs	r1, r5, #1
 80015a6:	418d      	sbcs	r5, r1
 80015a8:	4330      	orrs	r0, r6
 80015aa:	4698      	mov	r8, r3
 80015ac:	2600      	movs	r6, #0
 80015ae:	4305      	orrs	r5, r0
 80015b0:	076b      	lsls	r3, r5, #29
 80015b2:	d009      	beq.n	80015c8 <__aeabi_dadd+0x10c>
 80015b4:	230f      	movs	r3, #15
 80015b6:	402b      	ands	r3, r5
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d005      	beq.n	80015c8 <__aeabi_dadd+0x10c>
 80015bc:	1d2b      	adds	r3, r5, #4
 80015be:	42ab      	cmp	r3, r5
 80015c0:	41ad      	sbcs	r5, r5
 80015c2:	426d      	negs	r5, r5
 80015c4:	44a8      	add	r8, r5
 80015c6:	001d      	movs	r5, r3
 80015c8:	4643      	mov	r3, r8
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	d400      	bmi.n	80015d0 <__aeabi_dadd+0x114>
 80015ce:	e094      	b.n	80016fa <__aeabi_dadd+0x23e>
 80015d0:	4b97      	ldr	r3, [pc, #604]	; (8001830 <__aeabi_dadd+0x374>)
 80015d2:	1c72      	adds	r2, r6, #1
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d100      	bne.n	80015da <__aeabi_dadd+0x11e>
 80015d8:	e09d      	b.n	8001716 <__aeabi_dadd+0x25a>
 80015da:	4641      	mov	r1, r8
 80015dc:	4b95      	ldr	r3, [pc, #596]	; (8001834 <__aeabi_dadd+0x378>)
 80015de:	08ed      	lsrs	r5, r5, #3
 80015e0:	4019      	ands	r1, r3
 80015e2:	000b      	movs	r3, r1
 80015e4:	0552      	lsls	r2, r2, #21
 80015e6:	0749      	lsls	r1, r1, #29
 80015e8:	025b      	lsls	r3, r3, #9
 80015ea:	4329      	orrs	r1, r5
 80015ec:	0b1b      	lsrs	r3, r3, #12
 80015ee:	0d52      	lsrs	r2, r2, #21
 80015f0:	0512      	lsls	r2, r2, #20
 80015f2:	4313      	orrs	r3, r2
 80015f4:	07e4      	lsls	r4, r4, #31
 80015f6:	4323      	orrs	r3, r4
 80015f8:	0008      	movs	r0, r1
 80015fa:	0019      	movs	r1, r3
 80015fc:	bce0      	pop	{r5, r6, r7}
 80015fe:	46ba      	mov	sl, r7
 8001600:	46b1      	mov	r9, r6
 8001602:	46a8      	mov	r8, r5
 8001604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001606:	2a00      	cmp	r2, #0
 8001608:	d043      	beq.n	8001692 <__aeabi_dadd+0x1d6>
 800160a:	1b8a      	subs	r2, r1, r6
 800160c:	2e00      	cmp	r6, #0
 800160e:	d000      	beq.n	8001612 <__aeabi_dadd+0x156>
 8001610:	e12a      	b.n	8001868 <__aeabi_dadd+0x3ac>
 8001612:	464c      	mov	r4, r9
 8001614:	431c      	orrs	r4, r3
 8001616:	d100      	bne.n	800161a <__aeabi_dadd+0x15e>
 8001618:	e1d1      	b.n	80019be <__aeabi_dadd+0x502>
 800161a:	1e54      	subs	r4, r2, #1
 800161c:	2a01      	cmp	r2, #1
 800161e:	d100      	bne.n	8001622 <__aeabi_dadd+0x166>
 8001620:	e21f      	b.n	8001a62 <__aeabi_dadd+0x5a6>
 8001622:	4d83      	ldr	r5, [pc, #524]	; (8001830 <__aeabi_dadd+0x374>)
 8001624:	42aa      	cmp	r2, r5
 8001626:	d100      	bne.n	800162a <__aeabi_dadd+0x16e>
 8001628:	e272      	b.n	8001b10 <__aeabi_dadd+0x654>
 800162a:	0022      	movs	r2, r4
 800162c:	e123      	b.n	8001876 <__aeabi_dadd+0x3ba>
 800162e:	2a00      	cmp	r2, #0
 8001630:	dc00      	bgt.n	8001634 <__aeabi_dadd+0x178>
 8001632:	e098      	b.n	8001766 <__aeabi_dadd+0x2aa>
 8001634:	2900      	cmp	r1, #0
 8001636:	d042      	beq.n	80016be <__aeabi_dadd+0x202>
 8001638:	497d      	ldr	r1, [pc, #500]	; (8001830 <__aeabi_dadd+0x374>)
 800163a:	428e      	cmp	r6, r1
 800163c:	d100      	bne.n	8001640 <__aeabi_dadd+0x184>
 800163e:	e0da      	b.n	80017f6 <__aeabi_dadd+0x33a>
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	0028      	movs	r0, r5
 8001644:	0409      	lsls	r1, r1, #16
 8001646:	4308      	orrs	r0, r1
 8001648:	4684      	mov	ip, r0
 800164a:	2a38      	cmp	r2, #56	; 0x38
 800164c:	dd00      	ble.n	8001650 <__aeabi_dadd+0x194>
 800164e:	e129      	b.n	80018a4 <__aeabi_dadd+0x3e8>
 8001650:	2a1f      	cmp	r2, #31
 8001652:	dc00      	bgt.n	8001656 <__aeabi_dadd+0x19a>
 8001654:	e187      	b.n	8001966 <__aeabi_dadd+0x4aa>
 8001656:	0011      	movs	r1, r2
 8001658:	4665      	mov	r5, ip
 800165a:	3920      	subs	r1, #32
 800165c:	40cd      	lsrs	r5, r1
 800165e:	2a20      	cmp	r2, #32
 8001660:	d004      	beq.n	800166c <__aeabi_dadd+0x1b0>
 8001662:	2040      	movs	r0, #64	; 0x40
 8001664:	4661      	mov	r1, ip
 8001666:	1a82      	subs	r2, r0, r2
 8001668:	4091      	lsls	r1, r2
 800166a:	430f      	orrs	r7, r1
 800166c:	0039      	movs	r1, r7
 800166e:	1e4f      	subs	r7, r1, #1
 8001670:	41b9      	sbcs	r1, r7
 8001672:	430d      	orrs	r5, r1
 8001674:	e11b      	b.n	80018ae <__aeabi_dadd+0x3f2>
 8001676:	0029      	movs	r1, r5
 8001678:	4339      	orrs	r1, r7
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x1c2>
 800167c:	e0b5      	b.n	80017ea <__aeabi_dadd+0x32e>
 800167e:	1e51      	subs	r1, r2, #1
 8001680:	2a01      	cmp	r2, #1
 8001682:	d100      	bne.n	8001686 <__aeabi_dadd+0x1ca>
 8001684:	e1ab      	b.n	80019de <__aeabi_dadd+0x522>
 8001686:	486a      	ldr	r0, [pc, #424]	; (8001830 <__aeabi_dadd+0x374>)
 8001688:	4282      	cmp	r2, r0
 800168a:	d100      	bne.n	800168e <__aeabi_dadd+0x1d2>
 800168c:	e1b2      	b.n	80019f4 <__aeabi_dadd+0x538>
 800168e:	000a      	movs	r2, r1
 8001690:	e743      	b.n	800151a <__aeabi_dadd+0x5e>
 8001692:	4969      	ldr	r1, [pc, #420]	; (8001838 <__aeabi_dadd+0x37c>)
 8001694:	1c75      	adds	r5, r6, #1
 8001696:	420d      	tst	r5, r1
 8001698:	d000      	beq.n	800169c <__aeabi_dadd+0x1e0>
 800169a:	e0cf      	b.n	800183c <__aeabi_dadd+0x380>
 800169c:	2e00      	cmp	r6, #0
 800169e:	d000      	beq.n	80016a2 <__aeabi_dadd+0x1e6>
 80016a0:	e193      	b.n	80019ca <__aeabi_dadd+0x50e>
 80016a2:	4649      	mov	r1, r9
 80016a4:	4319      	orrs	r1, r3
 80016a6:	d100      	bne.n	80016aa <__aeabi_dadd+0x1ee>
 80016a8:	e1d1      	b.n	8001a4e <__aeabi_dadd+0x592>
 80016aa:	4661      	mov	r1, ip
 80016ac:	4339      	orrs	r1, r7
 80016ae:	d000      	beq.n	80016b2 <__aeabi_dadd+0x1f6>
 80016b0:	e1e3      	b.n	8001a7a <__aeabi_dadd+0x5be>
 80016b2:	4649      	mov	r1, r9
 80016b4:	0758      	lsls	r0, r3, #29
 80016b6:	08c9      	lsrs	r1, r1, #3
 80016b8:	4301      	orrs	r1, r0
 80016ba:	08db      	lsrs	r3, r3, #3
 80016bc:	e026      	b.n	800170c <__aeabi_dadd+0x250>
 80016be:	0029      	movs	r1, r5
 80016c0:	4339      	orrs	r1, r7
 80016c2:	d100      	bne.n	80016c6 <__aeabi_dadd+0x20a>
 80016c4:	e091      	b.n	80017ea <__aeabi_dadd+0x32e>
 80016c6:	1e51      	subs	r1, r2, #1
 80016c8:	2a01      	cmp	r2, #1
 80016ca:	d005      	beq.n	80016d8 <__aeabi_dadd+0x21c>
 80016cc:	4858      	ldr	r0, [pc, #352]	; (8001830 <__aeabi_dadd+0x374>)
 80016ce:	4282      	cmp	r2, r0
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0x218>
 80016d2:	e18f      	b.n	80019f4 <__aeabi_dadd+0x538>
 80016d4:	000a      	movs	r2, r1
 80016d6:	e7b8      	b.n	800164a <__aeabi_dadd+0x18e>
 80016d8:	003d      	movs	r5, r7
 80016da:	444d      	add	r5, r9
 80016dc:	454d      	cmp	r5, r9
 80016de:	4189      	sbcs	r1, r1
 80016e0:	4463      	add	r3, ip
 80016e2:	4698      	mov	r8, r3
 80016e4:	4249      	negs	r1, r1
 80016e6:	4488      	add	r8, r1
 80016e8:	4643      	mov	r3, r8
 80016ea:	2602      	movs	r6, #2
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	d500      	bpl.n	80016f2 <__aeabi_dadd+0x236>
 80016f0:	e0eb      	b.n	80018ca <__aeabi_dadd+0x40e>
 80016f2:	3e01      	subs	r6, #1
 80016f4:	076b      	lsls	r3, r5, #29
 80016f6:	d000      	beq.n	80016fa <__aeabi_dadd+0x23e>
 80016f8:	e75c      	b.n	80015b4 <__aeabi_dadd+0xf8>
 80016fa:	4643      	mov	r3, r8
 80016fc:	08e9      	lsrs	r1, r5, #3
 80016fe:	075a      	lsls	r2, r3, #29
 8001700:	4311      	orrs	r1, r2
 8001702:	0032      	movs	r2, r6
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	484a      	ldr	r0, [pc, #296]	; (8001830 <__aeabi_dadd+0x374>)
 8001708:	4282      	cmp	r2, r0
 800170a:	d021      	beq.n	8001750 <__aeabi_dadd+0x294>
 800170c:	031b      	lsls	r3, r3, #12
 800170e:	0552      	lsls	r2, r2, #21
 8001710:	0b1b      	lsrs	r3, r3, #12
 8001712:	0d52      	lsrs	r2, r2, #21
 8001714:	e76c      	b.n	80015f0 <__aeabi_dadd+0x134>
 8001716:	2300      	movs	r3, #0
 8001718:	2100      	movs	r1, #0
 800171a:	e769      	b.n	80015f0 <__aeabi_dadd+0x134>
 800171c:	002a      	movs	r2, r5
 800171e:	433a      	orrs	r2, r7
 8001720:	d069      	beq.n	80017f6 <__aeabi_dadd+0x33a>
 8001722:	464a      	mov	r2, r9
 8001724:	0758      	lsls	r0, r3, #29
 8001726:	08d1      	lsrs	r1, r2, #3
 8001728:	08da      	lsrs	r2, r3, #3
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	031b      	lsls	r3, r3, #12
 800172e:	4308      	orrs	r0, r1
 8001730:	421a      	tst	r2, r3
 8001732:	d007      	beq.n	8001744 <__aeabi_dadd+0x288>
 8001734:	0029      	movs	r1, r5
 8001736:	08ed      	lsrs	r5, r5, #3
 8001738:	421d      	tst	r5, r3
 800173a:	d103      	bne.n	8001744 <__aeabi_dadd+0x288>
 800173c:	002a      	movs	r2, r5
 800173e:	08ff      	lsrs	r7, r7, #3
 8001740:	0748      	lsls	r0, r1, #29
 8001742:	4338      	orrs	r0, r7
 8001744:	0f43      	lsrs	r3, r0, #29
 8001746:	00c1      	lsls	r1, r0, #3
 8001748:	075b      	lsls	r3, r3, #29
 800174a:	08c9      	lsrs	r1, r1, #3
 800174c:	4319      	orrs	r1, r3
 800174e:	0013      	movs	r3, r2
 8001750:	000a      	movs	r2, r1
 8001752:	431a      	orrs	r2, r3
 8001754:	d100      	bne.n	8001758 <__aeabi_dadd+0x29c>
 8001756:	e213      	b.n	8001b80 <__aeabi_dadd+0x6c4>
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	0312      	lsls	r2, r2, #12
 800175c:	4313      	orrs	r3, r2
 800175e:	031b      	lsls	r3, r3, #12
 8001760:	4a33      	ldr	r2, [pc, #204]	; (8001830 <__aeabi_dadd+0x374>)
 8001762:	0b1b      	lsrs	r3, r3, #12
 8001764:	e744      	b.n	80015f0 <__aeabi_dadd+0x134>
 8001766:	2a00      	cmp	r2, #0
 8001768:	d04b      	beq.n	8001802 <__aeabi_dadd+0x346>
 800176a:	1b8a      	subs	r2, r1, r6
 800176c:	2e00      	cmp	r6, #0
 800176e:	d100      	bne.n	8001772 <__aeabi_dadd+0x2b6>
 8001770:	e0e7      	b.n	8001942 <__aeabi_dadd+0x486>
 8001772:	482f      	ldr	r0, [pc, #188]	; (8001830 <__aeabi_dadd+0x374>)
 8001774:	4281      	cmp	r1, r0
 8001776:	d100      	bne.n	800177a <__aeabi_dadd+0x2be>
 8001778:	e195      	b.n	8001aa6 <__aeabi_dadd+0x5ea>
 800177a:	2080      	movs	r0, #128	; 0x80
 800177c:	0400      	lsls	r0, r0, #16
 800177e:	4303      	orrs	r3, r0
 8001780:	2a38      	cmp	r2, #56	; 0x38
 8001782:	dd00      	ble.n	8001786 <__aeabi_dadd+0x2ca>
 8001784:	e143      	b.n	8001a0e <__aeabi_dadd+0x552>
 8001786:	2a1f      	cmp	r2, #31
 8001788:	dd00      	ble.n	800178c <__aeabi_dadd+0x2d0>
 800178a:	e1db      	b.n	8001b44 <__aeabi_dadd+0x688>
 800178c:	2020      	movs	r0, #32
 800178e:	001d      	movs	r5, r3
 8001790:	464e      	mov	r6, r9
 8001792:	1a80      	subs	r0, r0, r2
 8001794:	4085      	lsls	r5, r0
 8001796:	40d6      	lsrs	r6, r2
 8001798:	4335      	orrs	r5, r6
 800179a:	464e      	mov	r6, r9
 800179c:	4086      	lsls	r6, r0
 800179e:	0030      	movs	r0, r6
 80017a0:	40d3      	lsrs	r3, r2
 80017a2:	1e46      	subs	r6, r0, #1
 80017a4:	41b0      	sbcs	r0, r6
 80017a6:	449c      	add	ip, r3
 80017a8:	4305      	orrs	r5, r0
 80017aa:	19ed      	adds	r5, r5, r7
 80017ac:	42bd      	cmp	r5, r7
 80017ae:	419b      	sbcs	r3, r3
 80017b0:	425b      	negs	r3, r3
 80017b2:	4463      	add	r3, ip
 80017b4:	4698      	mov	r8, r3
 80017b6:	000e      	movs	r6, r1
 80017b8:	e07f      	b.n	80018ba <__aeabi_dadd+0x3fe>
 80017ba:	4a1e      	ldr	r2, [pc, #120]	; (8001834 <__aeabi_dadd+0x378>)
 80017bc:	1a76      	subs	r6, r6, r1
 80017be:	4013      	ands	r3, r2
 80017c0:	4698      	mov	r8, r3
 80017c2:	e6f5      	b.n	80015b0 <__aeabi_dadd+0xf4>
 80017c4:	0028      	movs	r0, r5
 80017c6:	f001 fd61 	bl	800328c <__clzsi2>
 80017ca:	0001      	movs	r1, r0
 80017cc:	3118      	adds	r1, #24
 80017ce:	291f      	cmp	r1, #31
 80017d0:	dc00      	bgt.n	80017d4 <__aeabi_dadd+0x318>
 80017d2:	e6cf      	b.n	8001574 <__aeabi_dadd+0xb8>
 80017d4:	002b      	movs	r3, r5
 80017d6:	3808      	subs	r0, #8
 80017d8:	4083      	lsls	r3, r0
 80017da:	2500      	movs	r5, #0
 80017dc:	e6d2      	b.n	8001584 <__aeabi_dadd+0xc8>
 80017de:	4662      	mov	r2, ip
 80017e0:	433a      	orrs	r2, r7
 80017e2:	0011      	movs	r1, r2
 80017e4:	1e4f      	subs	r7, r1, #1
 80017e6:	41b9      	sbcs	r1, r7
 80017e8:	e6ac      	b.n	8001544 <__aeabi_dadd+0x88>
 80017ea:	4649      	mov	r1, r9
 80017ec:	0758      	lsls	r0, r3, #29
 80017ee:	08c9      	lsrs	r1, r1, #3
 80017f0:	4301      	orrs	r1, r0
 80017f2:	08db      	lsrs	r3, r3, #3
 80017f4:	e787      	b.n	8001706 <__aeabi_dadd+0x24a>
 80017f6:	4649      	mov	r1, r9
 80017f8:	075a      	lsls	r2, r3, #29
 80017fa:	08c9      	lsrs	r1, r1, #3
 80017fc:	4311      	orrs	r1, r2
 80017fe:	08db      	lsrs	r3, r3, #3
 8001800:	e7a6      	b.n	8001750 <__aeabi_dadd+0x294>
 8001802:	490d      	ldr	r1, [pc, #52]	; (8001838 <__aeabi_dadd+0x37c>)
 8001804:	1c70      	adds	r0, r6, #1
 8001806:	4208      	tst	r0, r1
 8001808:	d000      	beq.n	800180c <__aeabi_dadd+0x350>
 800180a:	e0bb      	b.n	8001984 <__aeabi_dadd+0x4c8>
 800180c:	2e00      	cmp	r6, #0
 800180e:	d000      	beq.n	8001812 <__aeabi_dadd+0x356>
 8001810:	e114      	b.n	8001a3c <__aeabi_dadd+0x580>
 8001812:	4649      	mov	r1, r9
 8001814:	4319      	orrs	r1, r3
 8001816:	d100      	bne.n	800181a <__aeabi_dadd+0x35e>
 8001818:	e175      	b.n	8001b06 <__aeabi_dadd+0x64a>
 800181a:	0029      	movs	r1, r5
 800181c:	4339      	orrs	r1, r7
 800181e:	d000      	beq.n	8001822 <__aeabi_dadd+0x366>
 8001820:	e17e      	b.n	8001b20 <__aeabi_dadd+0x664>
 8001822:	4649      	mov	r1, r9
 8001824:	0758      	lsls	r0, r3, #29
 8001826:	08c9      	lsrs	r1, r1, #3
 8001828:	4301      	orrs	r1, r0
 800182a:	08db      	lsrs	r3, r3, #3
 800182c:	e76e      	b.n	800170c <__aeabi_dadd+0x250>
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	000007ff 	.word	0x000007ff
 8001834:	ff7fffff 	.word	0xff7fffff
 8001838:	000007fe 	.word	0x000007fe
 800183c:	4649      	mov	r1, r9
 800183e:	1bcd      	subs	r5, r1, r7
 8001840:	4661      	mov	r1, ip
 8001842:	1a58      	subs	r0, r3, r1
 8001844:	45a9      	cmp	r9, r5
 8001846:	4189      	sbcs	r1, r1
 8001848:	4249      	negs	r1, r1
 800184a:	4688      	mov	r8, r1
 800184c:	0001      	movs	r1, r0
 800184e:	4640      	mov	r0, r8
 8001850:	1a09      	subs	r1, r1, r0
 8001852:	4688      	mov	r8, r1
 8001854:	0209      	lsls	r1, r1, #8
 8001856:	d500      	bpl.n	800185a <__aeabi_dadd+0x39e>
 8001858:	e0a6      	b.n	80019a8 <__aeabi_dadd+0x4ec>
 800185a:	4641      	mov	r1, r8
 800185c:	4329      	orrs	r1, r5
 800185e:	d000      	beq.n	8001862 <__aeabi_dadd+0x3a6>
 8001860:	e67f      	b.n	8001562 <__aeabi_dadd+0xa6>
 8001862:	2300      	movs	r3, #0
 8001864:	2400      	movs	r4, #0
 8001866:	e751      	b.n	800170c <__aeabi_dadd+0x250>
 8001868:	4cc7      	ldr	r4, [pc, #796]	; (8001b88 <__aeabi_dadd+0x6cc>)
 800186a:	42a1      	cmp	r1, r4
 800186c:	d100      	bne.n	8001870 <__aeabi_dadd+0x3b4>
 800186e:	e0c7      	b.n	8001a00 <__aeabi_dadd+0x544>
 8001870:	2480      	movs	r4, #128	; 0x80
 8001872:	0424      	lsls	r4, r4, #16
 8001874:	4323      	orrs	r3, r4
 8001876:	2a38      	cmp	r2, #56	; 0x38
 8001878:	dc54      	bgt.n	8001924 <__aeabi_dadd+0x468>
 800187a:	2a1f      	cmp	r2, #31
 800187c:	dd00      	ble.n	8001880 <__aeabi_dadd+0x3c4>
 800187e:	e0cc      	b.n	8001a1a <__aeabi_dadd+0x55e>
 8001880:	2420      	movs	r4, #32
 8001882:	4648      	mov	r0, r9
 8001884:	1aa4      	subs	r4, r4, r2
 8001886:	001d      	movs	r5, r3
 8001888:	464e      	mov	r6, r9
 800188a:	40a0      	lsls	r0, r4
 800188c:	40d6      	lsrs	r6, r2
 800188e:	40a5      	lsls	r5, r4
 8001890:	0004      	movs	r4, r0
 8001892:	40d3      	lsrs	r3, r2
 8001894:	4662      	mov	r2, ip
 8001896:	4335      	orrs	r5, r6
 8001898:	1e66      	subs	r6, r4, #1
 800189a:	41b4      	sbcs	r4, r6
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	469c      	mov	ip, r3
 80018a0:	4325      	orrs	r5, r4
 80018a2:	e044      	b.n	800192e <__aeabi_dadd+0x472>
 80018a4:	4662      	mov	r2, ip
 80018a6:	433a      	orrs	r2, r7
 80018a8:	0015      	movs	r5, r2
 80018aa:	1e6f      	subs	r7, r5, #1
 80018ac:	41bd      	sbcs	r5, r7
 80018ae:	444d      	add	r5, r9
 80018b0:	454d      	cmp	r5, r9
 80018b2:	4189      	sbcs	r1, r1
 80018b4:	4249      	negs	r1, r1
 80018b6:	4688      	mov	r8, r1
 80018b8:	4498      	add	r8, r3
 80018ba:	4643      	mov	r3, r8
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dadd+0x406>
 80018c0:	e718      	b.n	80016f4 <__aeabi_dadd+0x238>
 80018c2:	4bb1      	ldr	r3, [pc, #708]	; (8001b88 <__aeabi_dadd+0x6cc>)
 80018c4:	3601      	adds	r6, #1
 80018c6:	429e      	cmp	r6, r3
 80018c8:	d049      	beq.n	800195e <__aeabi_dadd+0x4a2>
 80018ca:	4642      	mov	r2, r8
 80018cc:	4baf      	ldr	r3, [pc, #700]	; (8001b8c <__aeabi_dadd+0x6d0>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	401a      	ands	r2, r3
 80018d2:	0013      	movs	r3, r2
 80018d4:	086a      	lsrs	r2, r5, #1
 80018d6:	400d      	ands	r5, r1
 80018d8:	4315      	orrs	r5, r2
 80018da:	07d9      	lsls	r1, r3, #31
 80018dc:	085b      	lsrs	r3, r3, #1
 80018de:	4698      	mov	r8, r3
 80018e0:	430d      	orrs	r5, r1
 80018e2:	e665      	b.n	80015b0 <__aeabi_dadd+0xf4>
 80018e4:	0018      	movs	r0, r3
 80018e6:	3e1f      	subs	r6, #31
 80018e8:	40f0      	lsrs	r0, r6
 80018ea:	2a20      	cmp	r2, #32
 80018ec:	d003      	beq.n	80018f6 <__aeabi_dadd+0x43a>
 80018ee:	2140      	movs	r1, #64	; 0x40
 80018f0:	1a8a      	subs	r2, r1, r2
 80018f2:	4093      	lsls	r3, r2
 80018f4:	431d      	orrs	r5, r3
 80018f6:	1e69      	subs	r1, r5, #1
 80018f8:	418d      	sbcs	r5, r1
 80018fa:	2300      	movs	r3, #0
 80018fc:	2600      	movs	r6, #0
 80018fe:	4698      	mov	r8, r3
 8001900:	4305      	orrs	r5, r0
 8001902:	e6f7      	b.n	80016f4 <__aeabi_dadd+0x238>
 8001904:	0011      	movs	r1, r2
 8001906:	4665      	mov	r5, ip
 8001908:	3920      	subs	r1, #32
 800190a:	40cd      	lsrs	r5, r1
 800190c:	2a20      	cmp	r2, #32
 800190e:	d004      	beq.n	800191a <__aeabi_dadd+0x45e>
 8001910:	2040      	movs	r0, #64	; 0x40
 8001912:	4661      	mov	r1, ip
 8001914:	1a82      	subs	r2, r0, r2
 8001916:	4091      	lsls	r1, r2
 8001918:	430f      	orrs	r7, r1
 800191a:	0039      	movs	r1, r7
 800191c:	1e4f      	subs	r7, r1, #1
 800191e:	41b9      	sbcs	r1, r7
 8001920:	4329      	orrs	r1, r5
 8001922:	e60f      	b.n	8001544 <__aeabi_dadd+0x88>
 8001924:	464a      	mov	r2, r9
 8001926:	4313      	orrs	r3, r2
 8001928:	001d      	movs	r5, r3
 800192a:	1e6b      	subs	r3, r5, #1
 800192c:	419d      	sbcs	r5, r3
 800192e:	1b7d      	subs	r5, r7, r5
 8001930:	42af      	cmp	r7, r5
 8001932:	419b      	sbcs	r3, r3
 8001934:	4662      	mov	r2, ip
 8001936:	425b      	negs	r3, r3
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	4698      	mov	r8, r3
 800193c:	4654      	mov	r4, sl
 800193e:	000e      	movs	r6, r1
 8001940:	e607      	b.n	8001552 <__aeabi_dadd+0x96>
 8001942:	4648      	mov	r0, r9
 8001944:	4318      	orrs	r0, r3
 8001946:	d100      	bne.n	800194a <__aeabi_dadd+0x48e>
 8001948:	e0b3      	b.n	8001ab2 <__aeabi_dadd+0x5f6>
 800194a:	1e50      	subs	r0, r2, #1
 800194c:	2a01      	cmp	r2, #1
 800194e:	d100      	bne.n	8001952 <__aeabi_dadd+0x496>
 8001950:	e10d      	b.n	8001b6e <__aeabi_dadd+0x6b2>
 8001952:	4d8d      	ldr	r5, [pc, #564]	; (8001b88 <__aeabi_dadd+0x6cc>)
 8001954:	42aa      	cmp	r2, r5
 8001956:	d100      	bne.n	800195a <__aeabi_dadd+0x49e>
 8001958:	e0a5      	b.n	8001aa6 <__aeabi_dadd+0x5ea>
 800195a:	0002      	movs	r2, r0
 800195c:	e710      	b.n	8001780 <__aeabi_dadd+0x2c4>
 800195e:	0032      	movs	r2, r6
 8001960:	2300      	movs	r3, #0
 8001962:	2100      	movs	r1, #0
 8001964:	e644      	b.n	80015f0 <__aeabi_dadd+0x134>
 8001966:	2120      	movs	r1, #32
 8001968:	0038      	movs	r0, r7
 800196a:	1a89      	subs	r1, r1, r2
 800196c:	4665      	mov	r5, ip
 800196e:	408f      	lsls	r7, r1
 8001970:	408d      	lsls	r5, r1
 8001972:	40d0      	lsrs	r0, r2
 8001974:	1e79      	subs	r1, r7, #1
 8001976:	418f      	sbcs	r7, r1
 8001978:	4305      	orrs	r5, r0
 800197a:	433d      	orrs	r5, r7
 800197c:	4667      	mov	r7, ip
 800197e:	40d7      	lsrs	r7, r2
 8001980:	19db      	adds	r3, r3, r7
 8001982:	e794      	b.n	80018ae <__aeabi_dadd+0x3f2>
 8001984:	4a80      	ldr	r2, [pc, #512]	; (8001b88 <__aeabi_dadd+0x6cc>)
 8001986:	4290      	cmp	r0, r2
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x4d0>
 800198a:	e0ec      	b.n	8001b66 <__aeabi_dadd+0x6aa>
 800198c:	0039      	movs	r1, r7
 800198e:	4449      	add	r1, r9
 8001990:	4549      	cmp	r1, r9
 8001992:	4192      	sbcs	r2, r2
 8001994:	4463      	add	r3, ip
 8001996:	4252      	negs	r2, r2
 8001998:	189b      	adds	r3, r3, r2
 800199a:	07dd      	lsls	r5, r3, #31
 800199c:	0849      	lsrs	r1, r1, #1
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	4698      	mov	r8, r3
 80019a2:	0006      	movs	r6, r0
 80019a4:	430d      	orrs	r5, r1
 80019a6:	e6a5      	b.n	80016f4 <__aeabi_dadd+0x238>
 80019a8:	464a      	mov	r2, r9
 80019aa:	1abd      	subs	r5, r7, r2
 80019ac:	42af      	cmp	r7, r5
 80019ae:	4189      	sbcs	r1, r1
 80019b0:	4662      	mov	r2, ip
 80019b2:	4249      	negs	r1, r1
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	1a5b      	subs	r3, r3, r1
 80019b8:	4698      	mov	r8, r3
 80019ba:	4654      	mov	r4, sl
 80019bc:	e5d1      	b.n	8001562 <__aeabi_dadd+0xa6>
 80019be:	076c      	lsls	r4, r5, #29
 80019c0:	08f9      	lsrs	r1, r7, #3
 80019c2:	4321      	orrs	r1, r4
 80019c4:	08eb      	lsrs	r3, r5, #3
 80019c6:	0004      	movs	r4, r0
 80019c8:	e69d      	b.n	8001706 <__aeabi_dadd+0x24a>
 80019ca:	464a      	mov	r2, r9
 80019cc:	431a      	orrs	r2, r3
 80019ce:	d175      	bne.n	8001abc <__aeabi_dadd+0x600>
 80019d0:	4661      	mov	r1, ip
 80019d2:	4339      	orrs	r1, r7
 80019d4:	d114      	bne.n	8001a00 <__aeabi_dadd+0x544>
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	2400      	movs	r4, #0
 80019da:	031b      	lsls	r3, r3, #12
 80019dc:	e6bc      	b.n	8001758 <__aeabi_dadd+0x29c>
 80019de:	464a      	mov	r2, r9
 80019e0:	1bd5      	subs	r5, r2, r7
 80019e2:	45a9      	cmp	r9, r5
 80019e4:	4189      	sbcs	r1, r1
 80019e6:	4662      	mov	r2, ip
 80019e8:	4249      	negs	r1, r1
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	1a5b      	subs	r3, r3, r1
 80019ee:	4698      	mov	r8, r3
 80019f0:	2601      	movs	r6, #1
 80019f2:	e5ae      	b.n	8001552 <__aeabi_dadd+0x96>
 80019f4:	464a      	mov	r2, r9
 80019f6:	08d1      	lsrs	r1, r2, #3
 80019f8:	075a      	lsls	r2, r3, #29
 80019fa:	4311      	orrs	r1, r2
 80019fc:	08db      	lsrs	r3, r3, #3
 80019fe:	e6a7      	b.n	8001750 <__aeabi_dadd+0x294>
 8001a00:	4663      	mov	r3, ip
 8001a02:	08f9      	lsrs	r1, r7, #3
 8001a04:	075a      	lsls	r2, r3, #29
 8001a06:	4654      	mov	r4, sl
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	08db      	lsrs	r3, r3, #3
 8001a0c:	e6a0      	b.n	8001750 <__aeabi_dadd+0x294>
 8001a0e:	464a      	mov	r2, r9
 8001a10:	4313      	orrs	r3, r2
 8001a12:	001d      	movs	r5, r3
 8001a14:	1e6b      	subs	r3, r5, #1
 8001a16:	419d      	sbcs	r5, r3
 8001a18:	e6c7      	b.n	80017aa <__aeabi_dadd+0x2ee>
 8001a1a:	0014      	movs	r4, r2
 8001a1c:	001e      	movs	r6, r3
 8001a1e:	3c20      	subs	r4, #32
 8001a20:	40e6      	lsrs	r6, r4
 8001a22:	2a20      	cmp	r2, #32
 8001a24:	d005      	beq.n	8001a32 <__aeabi_dadd+0x576>
 8001a26:	2440      	movs	r4, #64	; 0x40
 8001a28:	1aa2      	subs	r2, r4, r2
 8001a2a:	4093      	lsls	r3, r2
 8001a2c:	464a      	mov	r2, r9
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	4691      	mov	r9, r2
 8001a32:	464d      	mov	r5, r9
 8001a34:	1e6b      	subs	r3, r5, #1
 8001a36:	419d      	sbcs	r5, r3
 8001a38:	4335      	orrs	r5, r6
 8001a3a:	e778      	b.n	800192e <__aeabi_dadd+0x472>
 8001a3c:	464a      	mov	r2, r9
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	d000      	beq.n	8001a44 <__aeabi_dadd+0x588>
 8001a42:	e66b      	b.n	800171c <__aeabi_dadd+0x260>
 8001a44:	076b      	lsls	r3, r5, #29
 8001a46:	08f9      	lsrs	r1, r7, #3
 8001a48:	4319      	orrs	r1, r3
 8001a4a:	08eb      	lsrs	r3, r5, #3
 8001a4c:	e680      	b.n	8001750 <__aeabi_dadd+0x294>
 8001a4e:	4661      	mov	r1, ip
 8001a50:	4339      	orrs	r1, r7
 8001a52:	d054      	beq.n	8001afe <__aeabi_dadd+0x642>
 8001a54:	4663      	mov	r3, ip
 8001a56:	08f9      	lsrs	r1, r7, #3
 8001a58:	075c      	lsls	r4, r3, #29
 8001a5a:	4321      	orrs	r1, r4
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	0004      	movs	r4, r0
 8001a60:	e654      	b.n	800170c <__aeabi_dadd+0x250>
 8001a62:	464a      	mov	r2, r9
 8001a64:	1abd      	subs	r5, r7, r2
 8001a66:	42af      	cmp	r7, r5
 8001a68:	4189      	sbcs	r1, r1
 8001a6a:	4662      	mov	r2, ip
 8001a6c:	4249      	negs	r1, r1
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	1a5b      	subs	r3, r3, r1
 8001a72:	4698      	mov	r8, r3
 8001a74:	0004      	movs	r4, r0
 8001a76:	2601      	movs	r6, #1
 8001a78:	e56b      	b.n	8001552 <__aeabi_dadd+0x96>
 8001a7a:	464a      	mov	r2, r9
 8001a7c:	1bd5      	subs	r5, r2, r7
 8001a7e:	45a9      	cmp	r9, r5
 8001a80:	4189      	sbcs	r1, r1
 8001a82:	4662      	mov	r2, ip
 8001a84:	4249      	negs	r1, r1
 8001a86:	1a9a      	subs	r2, r3, r2
 8001a88:	1a52      	subs	r2, r2, r1
 8001a8a:	4690      	mov	r8, r2
 8001a8c:	0212      	lsls	r2, r2, #8
 8001a8e:	d532      	bpl.n	8001af6 <__aeabi_dadd+0x63a>
 8001a90:	464a      	mov	r2, r9
 8001a92:	1abd      	subs	r5, r7, r2
 8001a94:	42af      	cmp	r7, r5
 8001a96:	4189      	sbcs	r1, r1
 8001a98:	4662      	mov	r2, ip
 8001a9a:	4249      	negs	r1, r1
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	1a5b      	subs	r3, r3, r1
 8001aa0:	4698      	mov	r8, r3
 8001aa2:	0004      	movs	r4, r0
 8001aa4:	e584      	b.n	80015b0 <__aeabi_dadd+0xf4>
 8001aa6:	4663      	mov	r3, ip
 8001aa8:	08f9      	lsrs	r1, r7, #3
 8001aaa:	075a      	lsls	r2, r3, #29
 8001aac:	4311      	orrs	r1, r2
 8001aae:	08db      	lsrs	r3, r3, #3
 8001ab0:	e64e      	b.n	8001750 <__aeabi_dadd+0x294>
 8001ab2:	08f9      	lsrs	r1, r7, #3
 8001ab4:	0768      	lsls	r0, r5, #29
 8001ab6:	4301      	orrs	r1, r0
 8001ab8:	08eb      	lsrs	r3, r5, #3
 8001aba:	e624      	b.n	8001706 <__aeabi_dadd+0x24a>
 8001abc:	4662      	mov	r2, ip
 8001abe:	433a      	orrs	r2, r7
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dadd+0x608>
 8001ac2:	e698      	b.n	80017f6 <__aeabi_dadd+0x33a>
 8001ac4:	464a      	mov	r2, r9
 8001ac6:	08d1      	lsrs	r1, r2, #3
 8001ac8:	075a      	lsls	r2, r3, #29
 8001aca:	4311      	orrs	r1, r2
 8001acc:	08da      	lsrs	r2, r3, #3
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	031b      	lsls	r3, r3, #12
 8001ad2:	421a      	tst	r2, r3
 8001ad4:	d008      	beq.n	8001ae8 <__aeabi_dadd+0x62c>
 8001ad6:	4660      	mov	r0, ip
 8001ad8:	08c5      	lsrs	r5, r0, #3
 8001ada:	421d      	tst	r5, r3
 8001adc:	d104      	bne.n	8001ae8 <__aeabi_dadd+0x62c>
 8001ade:	4654      	mov	r4, sl
 8001ae0:	002a      	movs	r2, r5
 8001ae2:	08f9      	lsrs	r1, r7, #3
 8001ae4:	0743      	lsls	r3, r0, #29
 8001ae6:	4319      	orrs	r1, r3
 8001ae8:	0f4b      	lsrs	r3, r1, #29
 8001aea:	00c9      	lsls	r1, r1, #3
 8001aec:	075b      	lsls	r3, r3, #29
 8001aee:	08c9      	lsrs	r1, r1, #3
 8001af0:	4319      	orrs	r1, r3
 8001af2:	0013      	movs	r3, r2
 8001af4:	e62c      	b.n	8001750 <__aeabi_dadd+0x294>
 8001af6:	4641      	mov	r1, r8
 8001af8:	4329      	orrs	r1, r5
 8001afa:	d000      	beq.n	8001afe <__aeabi_dadd+0x642>
 8001afc:	e5fa      	b.n	80016f4 <__aeabi_dadd+0x238>
 8001afe:	2300      	movs	r3, #0
 8001b00:	000a      	movs	r2, r1
 8001b02:	2400      	movs	r4, #0
 8001b04:	e602      	b.n	800170c <__aeabi_dadd+0x250>
 8001b06:	076b      	lsls	r3, r5, #29
 8001b08:	08f9      	lsrs	r1, r7, #3
 8001b0a:	4319      	orrs	r1, r3
 8001b0c:	08eb      	lsrs	r3, r5, #3
 8001b0e:	e5fd      	b.n	800170c <__aeabi_dadd+0x250>
 8001b10:	4663      	mov	r3, ip
 8001b12:	08f9      	lsrs	r1, r7, #3
 8001b14:	075b      	lsls	r3, r3, #29
 8001b16:	4319      	orrs	r1, r3
 8001b18:	4663      	mov	r3, ip
 8001b1a:	0004      	movs	r4, r0
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	e617      	b.n	8001750 <__aeabi_dadd+0x294>
 8001b20:	003d      	movs	r5, r7
 8001b22:	444d      	add	r5, r9
 8001b24:	4463      	add	r3, ip
 8001b26:	454d      	cmp	r5, r9
 8001b28:	4189      	sbcs	r1, r1
 8001b2a:	4698      	mov	r8, r3
 8001b2c:	4249      	negs	r1, r1
 8001b2e:	4488      	add	r8, r1
 8001b30:	4643      	mov	r3, r8
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	d400      	bmi.n	8001b38 <__aeabi_dadd+0x67c>
 8001b36:	e5dd      	b.n	80016f4 <__aeabi_dadd+0x238>
 8001b38:	4642      	mov	r2, r8
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <__aeabi_dadd+0x6d0>)
 8001b3c:	2601      	movs	r6, #1
 8001b3e:	401a      	ands	r2, r3
 8001b40:	4690      	mov	r8, r2
 8001b42:	e5d7      	b.n	80016f4 <__aeabi_dadd+0x238>
 8001b44:	0010      	movs	r0, r2
 8001b46:	001e      	movs	r6, r3
 8001b48:	3820      	subs	r0, #32
 8001b4a:	40c6      	lsrs	r6, r0
 8001b4c:	2a20      	cmp	r2, #32
 8001b4e:	d005      	beq.n	8001b5c <__aeabi_dadd+0x6a0>
 8001b50:	2040      	movs	r0, #64	; 0x40
 8001b52:	1a82      	subs	r2, r0, r2
 8001b54:	4093      	lsls	r3, r2
 8001b56:	464a      	mov	r2, r9
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	4691      	mov	r9, r2
 8001b5c:	464d      	mov	r5, r9
 8001b5e:	1e6b      	subs	r3, r5, #1
 8001b60:	419d      	sbcs	r5, r3
 8001b62:	4335      	orrs	r5, r6
 8001b64:	e621      	b.n	80017aa <__aeabi_dadd+0x2ee>
 8001b66:	0002      	movs	r2, r0
 8001b68:	2300      	movs	r3, #0
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	e540      	b.n	80015f0 <__aeabi_dadd+0x134>
 8001b6e:	464a      	mov	r2, r9
 8001b70:	19d5      	adds	r5, r2, r7
 8001b72:	42bd      	cmp	r5, r7
 8001b74:	4189      	sbcs	r1, r1
 8001b76:	4463      	add	r3, ip
 8001b78:	4698      	mov	r8, r3
 8001b7a:	4249      	negs	r1, r1
 8001b7c:	4488      	add	r8, r1
 8001b7e:	e5b3      	b.n	80016e8 <__aeabi_dadd+0x22c>
 8001b80:	2100      	movs	r1, #0
 8001b82:	4a01      	ldr	r2, [pc, #4]	; (8001b88 <__aeabi_dadd+0x6cc>)
 8001b84:	000b      	movs	r3, r1
 8001b86:	e533      	b.n	80015f0 <__aeabi_dadd+0x134>
 8001b88:	000007ff 	.word	0x000007ff
 8001b8c:	ff7fffff 	.word	0xff7fffff

08001b90 <__aeabi_ddiv>:
 8001b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b92:	4657      	mov	r7, sl
 8001b94:	464e      	mov	r6, r9
 8001b96:	4645      	mov	r5, r8
 8001b98:	46de      	mov	lr, fp
 8001b9a:	b5e0      	push	{r5, r6, r7, lr}
 8001b9c:	4681      	mov	r9, r0
 8001b9e:	0005      	movs	r5, r0
 8001ba0:	030c      	lsls	r4, r1, #12
 8001ba2:	0048      	lsls	r0, r1, #1
 8001ba4:	4692      	mov	sl, r2
 8001ba6:	001f      	movs	r7, r3
 8001ba8:	b085      	sub	sp, #20
 8001baa:	0b24      	lsrs	r4, r4, #12
 8001bac:	0d40      	lsrs	r0, r0, #21
 8001bae:	0fce      	lsrs	r6, r1, #31
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d059      	beq.n	8001c68 <__aeabi_ddiv+0xd8>
 8001bb4:	4b87      	ldr	r3, [pc, #540]	; (8001dd4 <__aeabi_ddiv+0x244>)
 8001bb6:	4298      	cmp	r0, r3
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_ddiv+0x2c>
 8001bba:	e098      	b.n	8001cee <__aeabi_ddiv+0x15e>
 8001bbc:	0f6b      	lsrs	r3, r5, #29
 8001bbe:	00e4      	lsls	r4, r4, #3
 8001bc0:	431c      	orrs	r4, r3
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	041b      	lsls	r3, r3, #16
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	4698      	mov	r8, r3
 8001bca:	4b83      	ldr	r3, [pc, #524]	; (8001dd8 <__aeabi_ddiv+0x248>)
 8001bcc:	00ed      	lsls	r5, r5, #3
 8001bce:	469b      	mov	fp, r3
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	4699      	mov	r9, r3
 8001bd4:	4483      	add	fp, r0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	033c      	lsls	r4, r7, #12
 8001bda:	007b      	lsls	r3, r7, #1
 8001bdc:	4650      	mov	r0, sl
 8001bde:	0b24      	lsrs	r4, r4, #12
 8001be0:	0d5b      	lsrs	r3, r3, #21
 8001be2:	0fff      	lsrs	r7, r7, #31
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d067      	beq.n	8001cb8 <__aeabi_ddiv+0x128>
 8001be8:	4a7a      	ldr	r2, [pc, #488]	; (8001dd4 <__aeabi_ddiv+0x244>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d018      	beq.n	8001c20 <__aeabi_ddiv+0x90>
 8001bee:	497a      	ldr	r1, [pc, #488]	; (8001dd8 <__aeabi_ddiv+0x248>)
 8001bf0:	0f42      	lsrs	r2, r0, #29
 8001bf2:	468c      	mov	ip, r1
 8001bf4:	00e4      	lsls	r4, r4, #3
 8001bf6:	4659      	mov	r1, fp
 8001bf8:	4314      	orrs	r4, r2
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	4463      	add	r3, ip
 8001bfe:	0412      	lsls	r2, r2, #16
 8001c00:	1acb      	subs	r3, r1, r3
 8001c02:	4314      	orrs	r4, r2
 8001c04:	469b      	mov	fp, r3
 8001c06:	00c2      	lsls	r2, r0, #3
 8001c08:	2000      	movs	r0, #0
 8001c0a:	0033      	movs	r3, r6
 8001c0c:	407b      	eors	r3, r7
 8001c0e:	469a      	mov	sl, r3
 8001c10:	464b      	mov	r3, r9
 8001c12:	2b0f      	cmp	r3, #15
 8001c14:	d900      	bls.n	8001c18 <__aeabi_ddiv+0x88>
 8001c16:	e0ef      	b.n	8001df8 <__aeabi_ddiv+0x268>
 8001c18:	4970      	ldr	r1, [pc, #448]	; (8001ddc <__aeabi_ddiv+0x24c>)
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	58cb      	ldr	r3, [r1, r3]
 8001c1e:	469f      	mov	pc, r3
 8001c20:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <__aeabi_ddiv+0x250>)
 8001c22:	4652      	mov	r2, sl
 8001c24:	469c      	mov	ip, r3
 8001c26:	4322      	orrs	r2, r4
 8001c28:	44e3      	add	fp, ip
 8001c2a:	2a00      	cmp	r2, #0
 8001c2c:	d000      	beq.n	8001c30 <__aeabi_ddiv+0xa0>
 8001c2e:	e095      	b.n	8001d5c <__aeabi_ddiv+0x1cc>
 8001c30:	4649      	mov	r1, r9
 8001c32:	2302      	movs	r3, #2
 8001c34:	4319      	orrs	r1, r3
 8001c36:	4689      	mov	r9, r1
 8001c38:	2400      	movs	r4, #0
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	e7e5      	b.n	8001c0a <__aeabi_ddiv+0x7a>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	2400      	movs	r4, #0
 8001c42:	2500      	movs	r5, #0
 8001c44:	4652      	mov	r2, sl
 8001c46:	051b      	lsls	r3, r3, #20
 8001c48:	4323      	orrs	r3, r4
 8001c4a:	07d2      	lsls	r2, r2, #31
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	0028      	movs	r0, r5
 8001c50:	0019      	movs	r1, r3
 8001c52:	b005      	add	sp, #20
 8001c54:	bcf0      	pop	{r4, r5, r6, r7}
 8001c56:	46bb      	mov	fp, r7
 8001c58:	46b2      	mov	sl, r6
 8001c5a:	46a9      	mov	r9, r5
 8001c5c:	46a0      	mov	r8, r4
 8001c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c60:	2400      	movs	r4, #0
 8001c62:	2500      	movs	r5, #0
 8001c64:	4b5b      	ldr	r3, [pc, #364]	; (8001dd4 <__aeabi_ddiv+0x244>)
 8001c66:	e7ed      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8001c68:	464b      	mov	r3, r9
 8001c6a:	4323      	orrs	r3, r4
 8001c6c:	4698      	mov	r8, r3
 8001c6e:	d100      	bne.n	8001c72 <__aeabi_ddiv+0xe2>
 8001c70:	e089      	b.n	8001d86 <__aeabi_ddiv+0x1f6>
 8001c72:	2c00      	cmp	r4, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_ddiv+0xe8>
 8001c76:	e1e0      	b.n	800203a <__aeabi_ddiv+0x4aa>
 8001c78:	0020      	movs	r0, r4
 8001c7a:	f001 fb07 	bl	800328c <__clzsi2>
 8001c7e:	0001      	movs	r1, r0
 8001c80:	0002      	movs	r2, r0
 8001c82:	390b      	subs	r1, #11
 8001c84:	231d      	movs	r3, #29
 8001c86:	1a5b      	subs	r3, r3, r1
 8001c88:	4649      	mov	r1, r9
 8001c8a:	0010      	movs	r0, r2
 8001c8c:	40d9      	lsrs	r1, r3
 8001c8e:	3808      	subs	r0, #8
 8001c90:	4084      	lsls	r4, r0
 8001c92:	000b      	movs	r3, r1
 8001c94:	464d      	mov	r5, r9
 8001c96:	4323      	orrs	r3, r4
 8001c98:	4698      	mov	r8, r3
 8001c9a:	4085      	lsls	r5, r0
 8001c9c:	4851      	ldr	r0, [pc, #324]	; (8001de4 <__aeabi_ddiv+0x254>)
 8001c9e:	033c      	lsls	r4, r7, #12
 8001ca0:	1a83      	subs	r3, r0, r2
 8001ca2:	469b      	mov	fp, r3
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4699      	mov	r9, r3
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	007b      	lsls	r3, r7, #1
 8001cac:	4650      	mov	r0, sl
 8001cae:	0b24      	lsrs	r4, r4, #12
 8001cb0:	0d5b      	lsrs	r3, r3, #21
 8001cb2:	0fff      	lsrs	r7, r7, #31
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d197      	bne.n	8001be8 <__aeabi_ddiv+0x58>
 8001cb8:	4652      	mov	r2, sl
 8001cba:	4322      	orrs	r2, r4
 8001cbc:	d055      	beq.n	8001d6a <__aeabi_ddiv+0x1da>
 8001cbe:	2c00      	cmp	r4, #0
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_ddiv+0x134>
 8001cc2:	e1ca      	b.n	800205a <__aeabi_ddiv+0x4ca>
 8001cc4:	0020      	movs	r0, r4
 8001cc6:	f001 fae1 	bl	800328c <__clzsi2>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	3a0b      	subs	r2, #11
 8001cce:	231d      	movs	r3, #29
 8001cd0:	0001      	movs	r1, r0
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	4652      	mov	r2, sl
 8001cd6:	3908      	subs	r1, #8
 8001cd8:	40da      	lsrs	r2, r3
 8001cda:	408c      	lsls	r4, r1
 8001cdc:	4314      	orrs	r4, r2
 8001cde:	4652      	mov	r2, sl
 8001ce0:	408a      	lsls	r2, r1
 8001ce2:	4b41      	ldr	r3, [pc, #260]	; (8001de8 <__aeabi_ddiv+0x258>)
 8001ce4:	4458      	add	r0, fp
 8001ce6:	469b      	mov	fp, r3
 8001ce8:	4483      	add	fp, r0
 8001cea:	2000      	movs	r0, #0
 8001cec:	e78d      	b.n	8001c0a <__aeabi_ddiv+0x7a>
 8001cee:	464b      	mov	r3, r9
 8001cf0:	4323      	orrs	r3, r4
 8001cf2:	4698      	mov	r8, r3
 8001cf4:	d140      	bne.n	8001d78 <__aeabi_ddiv+0x1e8>
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	4699      	mov	r9, r3
 8001cfa:	3b06      	subs	r3, #6
 8001cfc:	2500      	movs	r5, #0
 8001cfe:	4683      	mov	fp, r0
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	e769      	b.n	8001bd8 <__aeabi_ddiv+0x48>
 8001d04:	46b2      	mov	sl, r6
 8001d06:	9b00      	ldr	r3, [sp, #0]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d0a9      	beq.n	8001c60 <__aeabi_ddiv+0xd0>
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_ddiv+0x182>
 8001d10:	e211      	b.n	8002136 <__aeabi_ddiv+0x5a6>
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d093      	beq.n	8001c3e <__aeabi_ddiv+0xae>
 8001d16:	4a35      	ldr	r2, [pc, #212]	; (8001dec <__aeabi_ddiv+0x25c>)
 8001d18:	445a      	add	r2, fp
 8001d1a:	2a00      	cmp	r2, #0
 8001d1c:	dc00      	bgt.n	8001d20 <__aeabi_ddiv+0x190>
 8001d1e:	e13c      	b.n	8001f9a <__aeabi_ddiv+0x40a>
 8001d20:	076b      	lsls	r3, r5, #29
 8001d22:	d000      	beq.n	8001d26 <__aeabi_ddiv+0x196>
 8001d24:	e1a7      	b.n	8002076 <__aeabi_ddiv+0x4e6>
 8001d26:	08ed      	lsrs	r5, r5, #3
 8001d28:	4643      	mov	r3, r8
 8001d2a:	01db      	lsls	r3, r3, #7
 8001d2c:	d506      	bpl.n	8001d3c <__aeabi_ddiv+0x1ac>
 8001d2e:	4642      	mov	r2, r8
 8001d30:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <__aeabi_ddiv+0x260>)
 8001d32:	401a      	ands	r2, r3
 8001d34:	4690      	mov	r8, r2
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	00d2      	lsls	r2, r2, #3
 8001d3a:	445a      	add	r2, fp
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <__aeabi_ddiv+0x264>)
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dc8e      	bgt.n	8001c60 <__aeabi_ddiv+0xd0>
 8001d42:	4643      	mov	r3, r8
 8001d44:	0552      	lsls	r2, r2, #21
 8001d46:	0758      	lsls	r0, r3, #29
 8001d48:	025c      	lsls	r4, r3, #9
 8001d4a:	4305      	orrs	r5, r0
 8001d4c:	0b24      	lsrs	r4, r4, #12
 8001d4e:	0d53      	lsrs	r3, r2, #21
 8001d50:	e778      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8001d52:	46ba      	mov	sl, r7
 8001d54:	46a0      	mov	r8, r4
 8001d56:	0015      	movs	r5, r2
 8001d58:	9000      	str	r0, [sp, #0]
 8001d5a:	e7d4      	b.n	8001d06 <__aeabi_ddiv+0x176>
 8001d5c:	464a      	mov	r2, r9
 8001d5e:	2303      	movs	r3, #3
 8001d60:	431a      	orrs	r2, r3
 8001d62:	4691      	mov	r9, r2
 8001d64:	2003      	movs	r0, #3
 8001d66:	4652      	mov	r2, sl
 8001d68:	e74f      	b.n	8001c0a <__aeabi_ddiv+0x7a>
 8001d6a:	4649      	mov	r1, r9
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	4319      	orrs	r1, r3
 8001d70:	4689      	mov	r9, r1
 8001d72:	2400      	movs	r4, #0
 8001d74:	2001      	movs	r0, #1
 8001d76:	e748      	b.n	8001c0a <__aeabi_ddiv+0x7a>
 8001d78:	230c      	movs	r3, #12
 8001d7a:	4699      	mov	r9, r3
 8001d7c:	3b09      	subs	r3, #9
 8001d7e:	46a0      	mov	r8, r4
 8001d80:	4683      	mov	fp, r0
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	e728      	b.n	8001bd8 <__aeabi_ddiv+0x48>
 8001d86:	2304      	movs	r3, #4
 8001d88:	4699      	mov	r9, r3
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	469b      	mov	fp, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	2500      	movs	r5, #0
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	e720      	b.n	8001bd8 <__aeabi_ddiv+0x48>
 8001d96:	2300      	movs	r3, #0
 8001d98:	2480      	movs	r4, #128	; 0x80
 8001d9a:	469a      	mov	sl, r3
 8001d9c:	2500      	movs	r5, #0
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <__aeabi_ddiv+0x244>)
 8001da0:	0324      	lsls	r4, r4, #12
 8001da2:	e74f      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	4641      	mov	r1, r8
 8001da8:	031b      	lsls	r3, r3, #12
 8001daa:	4219      	tst	r1, r3
 8001dac:	d008      	beq.n	8001dc0 <__aeabi_ddiv+0x230>
 8001dae:	421c      	tst	r4, r3
 8001db0:	d106      	bne.n	8001dc0 <__aeabi_ddiv+0x230>
 8001db2:	431c      	orrs	r4, r3
 8001db4:	0324      	lsls	r4, r4, #12
 8001db6:	46ba      	mov	sl, r7
 8001db8:	0015      	movs	r5, r2
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <__aeabi_ddiv+0x244>)
 8001dbc:	0b24      	lsrs	r4, r4, #12
 8001dbe:	e741      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8001dc0:	2480      	movs	r4, #128	; 0x80
 8001dc2:	4643      	mov	r3, r8
 8001dc4:	0324      	lsls	r4, r4, #12
 8001dc6:	431c      	orrs	r4, r3
 8001dc8:	0324      	lsls	r4, r4, #12
 8001dca:	46b2      	mov	sl, r6
 8001dcc:	4b01      	ldr	r3, [pc, #4]	; (8001dd4 <__aeabi_ddiv+0x244>)
 8001dce:	0b24      	lsrs	r4, r4, #12
 8001dd0:	e738      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	000007ff 	.word	0x000007ff
 8001dd8:	fffffc01 	.word	0xfffffc01
 8001ddc:	0800ab48 	.word	0x0800ab48
 8001de0:	fffff801 	.word	0xfffff801
 8001de4:	fffffc0d 	.word	0xfffffc0d
 8001de8:	000003f3 	.word	0x000003f3
 8001dec:	000003ff 	.word	0x000003ff
 8001df0:	feffffff 	.word	0xfeffffff
 8001df4:	000007fe 	.word	0x000007fe
 8001df8:	4544      	cmp	r4, r8
 8001dfa:	d200      	bcs.n	8001dfe <__aeabi_ddiv+0x26e>
 8001dfc:	e116      	b.n	800202c <__aeabi_ddiv+0x49c>
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_ddiv+0x272>
 8001e00:	e111      	b.n	8002026 <__aeabi_ddiv+0x496>
 8001e02:	2301      	movs	r3, #1
 8001e04:	425b      	negs	r3, r3
 8001e06:	469c      	mov	ip, r3
 8001e08:	002e      	movs	r6, r5
 8001e0a:	4640      	mov	r0, r8
 8001e0c:	2500      	movs	r5, #0
 8001e0e:	44e3      	add	fp, ip
 8001e10:	0223      	lsls	r3, r4, #8
 8001e12:	0e14      	lsrs	r4, r2, #24
 8001e14:	431c      	orrs	r4, r3
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	4699      	mov	r9, r3
 8001e1a:	0423      	lsls	r3, r4, #16
 8001e1c:	0c1f      	lsrs	r7, r3, #16
 8001e1e:	0212      	lsls	r2, r2, #8
 8001e20:	4649      	mov	r1, r9
 8001e22:	9200      	str	r2, [sp, #0]
 8001e24:	9701      	str	r7, [sp, #4]
 8001e26:	f7fe fa11 	bl	800024c <__aeabi_uidivmod>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	437a      	muls	r2, r7
 8001e2e:	040b      	lsls	r3, r1, #16
 8001e30:	0c31      	lsrs	r1, r6, #16
 8001e32:	4680      	mov	r8, r0
 8001e34:	4319      	orrs	r1, r3
 8001e36:	428a      	cmp	r2, r1
 8001e38:	d90b      	bls.n	8001e52 <__aeabi_ddiv+0x2c2>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	425b      	negs	r3, r3
 8001e3e:	469c      	mov	ip, r3
 8001e40:	1909      	adds	r1, r1, r4
 8001e42:	44e0      	add	r8, ip
 8001e44:	428c      	cmp	r4, r1
 8001e46:	d804      	bhi.n	8001e52 <__aeabi_ddiv+0x2c2>
 8001e48:	428a      	cmp	r2, r1
 8001e4a:	d902      	bls.n	8001e52 <__aeabi_ddiv+0x2c2>
 8001e4c:	1e83      	subs	r3, r0, #2
 8001e4e:	4698      	mov	r8, r3
 8001e50:	1909      	adds	r1, r1, r4
 8001e52:	1a88      	subs	r0, r1, r2
 8001e54:	4649      	mov	r1, r9
 8001e56:	f7fe f9f9 	bl	800024c <__aeabi_uidivmod>
 8001e5a:	0409      	lsls	r1, r1, #16
 8001e5c:	468c      	mov	ip, r1
 8001e5e:	0431      	lsls	r1, r6, #16
 8001e60:	4666      	mov	r6, ip
 8001e62:	9a01      	ldr	r2, [sp, #4]
 8001e64:	0c09      	lsrs	r1, r1, #16
 8001e66:	4342      	muls	r2, r0
 8001e68:	0003      	movs	r3, r0
 8001e6a:	4331      	orrs	r1, r6
 8001e6c:	428a      	cmp	r2, r1
 8001e6e:	d904      	bls.n	8001e7a <__aeabi_ddiv+0x2ea>
 8001e70:	1909      	adds	r1, r1, r4
 8001e72:	3b01      	subs	r3, #1
 8001e74:	428c      	cmp	r4, r1
 8001e76:	d800      	bhi.n	8001e7a <__aeabi_ddiv+0x2ea>
 8001e78:	e111      	b.n	800209e <__aeabi_ddiv+0x50e>
 8001e7a:	1a89      	subs	r1, r1, r2
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	9e00      	ldr	r6, [sp, #0]
 8001e80:	0412      	lsls	r2, r2, #16
 8001e82:	431a      	orrs	r2, r3
 8001e84:	0c33      	lsrs	r3, r6, #16
 8001e86:	001f      	movs	r7, r3
 8001e88:	0c10      	lsrs	r0, r2, #16
 8001e8a:	4690      	mov	r8, r2
 8001e8c:	9302      	str	r3, [sp, #8]
 8001e8e:	0413      	lsls	r3, r2, #16
 8001e90:	0432      	lsls	r2, r6, #16
 8001e92:	0c16      	lsrs	r6, r2, #16
 8001e94:	0032      	movs	r2, r6
 8001e96:	0c1b      	lsrs	r3, r3, #16
 8001e98:	435a      	muls	r2, r3
 8001e9a:	9603      	str	r6, [sp, #12]
 8001e9c:	437b      	muls	r3, r7
 8001e9e:	4346      	muls	r6, r0
 8001ea0:	4378      	muls	r0, r7
 8001ea2:	0c17      	lsrs	r7, r2, #16
 8001ea4:	46bc      	mov	ip, r7
 8001ea6:	199b      	adds	r3, r3, r6
 8001ea8:	4463      	add	r3, ip
 8001eaa:	429e      	cmp	r6, r3
 8001eac:	d903      	bls.n	8001eb6 <__aeabi_ddiv+0x326>
 8001eae:	2680      	movs	r6, #128	; 0x80
 8001eb0:	0276      	lsls	r6, r6, #9
 8001eb2:	46b4      	mov	ip, r6
 8001eb4:	4460      	add	r0, ip
 8001eb6:	0c1e      	lsrs	r6, r3, #16
 8001eb8:	1830      	adds	r0, r6, r0
 8001eba:	0416      	lsls	r6, r2, #16
 8001ebc:	041b      	lsls	r3, r3, #16
 8001ebe:	0c36      	lsrs	r6, r6, #16
 8001ec0:	199e      	adds	r6, r3, r6
 8001ec2:	4281      	cmp	r1, r0
 8001ec4:	d200      	bcs.n	8001ec8 <__aeabi_ddiv+0x338>
 8001ec6:	e09c      	b.n	8002002 <__aeabi_ddiv+0x472>
 8001ec8:	d100      	bne.n	8001ecc <__aeabi_ddiv+0x33c>
 8001eca:	e097      	b.n	8001ffc <__aeabi_ddiv+0x46c>
 8001ecc:	1bae      	subs	r6, r5, r6
 8001ece:	1a09      	subs	r1, r1, r0
 8001ed0:	42b5      	cmp	r5, r6
 8001ed2:	4180      	sbcs	r0, r0
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	1a08      	subs	r0, r1, r0
 8001ed8:	4284      	cmp	r4, r0
 8001eda:	d100      	bne.n	8001ede <__aeabi_ddiv+0x34e>
 8001edc:	e111      	b.n	8002102 <__aeabi_ddiv+0x572>
 8001ede:	4649      	mov	r1, r9
 8001ee0:	f7fe f9b4 	bl	800024c <__aeabi_uidivmod>
 8001ee4:	9a01      	ldr	r2, [sp, #4]
 8001ee6:	040b      	lsls	r3, r1, #16
 8001ee8:	4342      	muls	r2, r0
 8001eea:	0c31      	lsrs	r1, r6, #16
 8001eec:	0005      	movs	r5, r0
 8001eee:	4319      	orrs	r1, r3
 8001ef0:	428a      	cmp	r2, r1
 8001ef2:	d907      	bls.n	8001f04 <__aeabi_ddiv+0x374>
 8001ef4:	1909      	adds	r1, r1, r4
 8001ef6:	3d01      	subs	r5, #1
 8001ef8:	428c      	cmp	r4, r1
 8001efa:	d803      	bhi.n	8001f04 <__aeabi_ddiv+0x374>
 8001efc:	428a      	cmp	r2, r1
 8001efe:	d901      	bls.n	8001f04 <__aeabi_ddiv+0x374>
 8001f00:	1e85      	subs	r5, r0, #2
 8001f02:	1909      	adds	r1, r1, r4
 8001f04:	1a88      	subs	r0, r1, r2
 8001f06:	4649      	mov	r1, r9
 8001f08:	f7fe f9a0 	bl	800024c <__aeabi_uidivmod>
 8001f0c:	0409      	lsls	r1, r1, #16
 8001f0e:	468c      	mov	ip, r1
 8001f10:	0431      	lsls	r1, r6, #16
 8001f12:	4666      	mov	r6, ip
 8001f14:	9a01      	ldr	r2, [sp, #4]
 8001f16:	0c09      	lsrs	r1, r1, #16
 8001f18:	4342      	muls	r2, r0
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	4331      	orrs	r1, r6
 8001f1e:	428a      	cmp	r2, r1
 8001f20:	d907      	bls.n	8001f32 <__aeabi_ddiv+0x3a2>
 8001f22:	1909      	adds	r1, r1, r4
 8001f24:	3b01      	subs	r3, #1
 8001f26:	428c      	cmp	r4, r1
 8001f28:	d803      	bhi.n	8001f32 <__aeabi_ddiv+0x3a2>
 8001f2a:	428a      	cmp	r2, r1
 8001f2c:	d901      	bls.n	8001f32 <__aeabi_ddiv+0x3a2>
 8001f2e:	1e83      	subs	r3, r0, #2
 8001f30:	1909      	adds	r1, r1, r4
 8001f32:	9e03      	ldr	r6, [sp, #12]
 8001f34:	1a89      	subs	r1, r1, r2
 8001f36:	0032      	movs	r2, r6
 8001f38:	042d      	lsls	r5, r5, #16
 8001f3a:	431d      	orrs	r5, r3
 8001f3c:	9f02      	ldr	r7, [sp, #8]
 8001f3e:	042b      	lsls	r3, r5, #16
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	435a      	muls	r2, r3
 8001f44:	437b      	muls	r3, r7
 8001f46:	469c      	mov	ip, r3
 8001f48:	0c28      	lsrs	r0, r5, #16
 8001f4a:	4346      	muls	r6, r0
 8001f4c:	0c13      	lsrs	r3, r2, #16
 8001f4e:	44b4      	add	ip, r6
 8001f50:	4463      	add	r3, ip
 8001f52:	4378      	muls	r0, r7
 8001f54:	429e      	cmp	r6, r3
 8001f56:	d903      	bls.n	8001f60 <__aeabi_ddiv+0x3d0>
 8001f58:	2680      	movs	r6, #128	; 0x80
 8001f5a:	0276      	lsls	r6, r6, #9
 8001f5c:	46b4      	mov	ip, r6
 8001f5e:	4460      	add	r0, ip
 8001f60:	0c1e      	lsrs	r6, r3, #16
 8001f62:	0412      	lsls	r2, r2, #16
 8001f64:	041b      	lsls	r3, r3, #16
 8001f66:	0c12      	lsrs	r2, r2, #16
 8001f68:	1830      	adds	r0, r6, r0
 8001f6a:	189b      	adds	r3, r3, r2
 8001f6c:	4281      	cmp	r1, r0
 8001f6e:	d306      	bcc.n	8001f7e <__aeabi_ddiv+0x3ee>
 8001f70:	d002      	beq.n	8001f78 <__aeabi_ddiv+0x3e8>
 8001f72:	2301      	movs	r3, #1
 8001f74:	431d      	orrs	r5, r3
 8001f76:	e6ce      	b.n	8001d16 <__aeabi_ddiv+0x186>
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_ddiv+0x3ee>
 8001f7c:	e6cb      	b.n	8001d16 <__aeabi_ddiv+0x186>
 8001f7e:	1861      	adds	r1, r4, r1
 8001f80:	1e6e      	subs	r6, r5, #1
 8001f82:	42a1      	cmp	r1, r4
 8001f84:	d200      	bcs.n	8001f88 <__aeabi_ddiv+0x3f8>
 8001f86:	e0a4      	b.n	80020d2 <__aeabi_ddiv+0x542>
 8001f88:	4281      	cmp	r1, r0
 8001f8a:	d200      	bcs.n	8001f8e <__aeabi_ddiv+0x3fe>
 8001f8c:	e0c9      	b.n	8002122 <__aeabi_ddiv+0x592>
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_ddiv+0x402>
 8001f90:	e0d9      	b.n	8002146 <__aeabi_ddiv+0x5b6>
 8001f92:	0035      	movs	r5, r6
 8001f94:	e7ed      	b.n	8001f72 <__aeabi_ddiv+0x3e2>
 8001f96:	2501      	movs	r5, #1
 8001f98:	426d      	negs	r5, r5
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	1a89      	subs	r1, r1, r2
 8001f9e:	2938      	cmp	r1, #56	; 0x38
 8001fa0:	dd00      	ble.n	8001fa4 <__aeabi_ddiv+0x414>
 8001fa2:	e64c      	b.n	8001c3e <__aeabi_ddiv+0xae>
 8001fa4:	291f      	cmp	r1, #31
 8001fa6:	dc00      	bgt.n	8001faa <__aeabi_ddiv+0x41a>
 8001fa8:	e07f      	b.n	80020aa <__aeabi_ddiv+0x51a>
 8001faa:	231f      	movs	r3, #31
 8001fac:	425b      	negs	r3, r3
 8001fae:	1a9a      	subs	r2, r3, r2
 8001fb0:	4643      	mov	r3, r8
 8001fb2:	40d3      	lsrs	r3, r2
 8001fb4:	2920      	cmp	r1, #32
 8001fb6:	d004      	beq.n	8001fc2 <__aeabi_ddiv+0x432>
 8001fb8:	4644      	mov	r4, r8
 8001fba:	4a65      	ldr	r2, [pc, #404]	; (8002150 <__aeabi_ddiv+0x5c0>)
 8001fbc:	445a      	add	r2, fp
 8001fbe:	4094      	lsls	r4, r2
 8001fc0:	4325      	orrs	r5, r4
 8001fc2:	1e6a      	subs	r2, r5, #1
 8001fc4:	4195      	sbcs	r5, r2
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	432b      	orrs	r3, r5
 8001fca:	0015      	movs	r5, r2
 8001fcc:	2400      	movs	r4, #0
 8001fce:	401d      	ands	r5, r3
 8001fd0:	421a      	tst	r2, r3
 8001fd2:	d100      	bne.n	8001fd6 <__aeabi_ddiv+0x446>
 8001fd4:	e0a1      	b.n	800211a <__aeabi_ddiv+0x58a>
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	2400      	movs	r4, #0
 8001fda:	401a      	ands	r2, r3
 8001fdc:	2a04      	cmp	r2, #4
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_ddiv+0x452>
 8001fe0:	e098      	b.n	8002114 <__aeabi_ddiv+0x584>
 8001fe2:	1d1a      	adds	r2, r3, #4
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	419b      	sbcs	r3, r3
 8001fe8:	425b      	negs	r3, r3
 8001fea:	18e4      	adds	r4, r4, r3
 8001fec:	0013      	movs	r3, r2
 8001fee:	0222      	lsls	r2, r4, #8
 8001ff0:	d400      	bmi.n	8001ff4 <__aeabi_ddiv+0x464>
 8001ff2:	e08f      	b.n	8002114 <__aeabi_ddiv+0x584>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	2400      	movs	r4, #0
 8001ff8:	2500      	movs	r5, #0
 8001ffa:	e623      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8001ffc:	42b5      	cmp	r5, r6
 8001ffe:	d300      	bcc.n	8002002 <__aeabi_ddiv+0x472>
 8002000:	e764      	b.n	8001ecc <__aeabi_ddiv+0x33c>
 8002002:	4643      	mov	r3, r8
 8002004:	1e5a      	subs	r2, r3, #1
 8002006:	9b00      	ldr	r3, [sp, #0]
 8002008:	469c      	mov	ip, r3
 800200a:	4465      	add	r5, ip
 800200c:	001f      	movs	r7, r3
 800200e:	429d      	cmp	r5, r3
 8002010:	419b      	sbcs	r3, r3
 8002012:	425b      	negs	r3, r3
 8002014:	191b      	adds	r3, r3, r4
 8002016:	18c9      	adds	r1, r1, r3
 8002018:	428c      	cmp	r4, r1
 800201a:	d23a      	bcs.n	8002092 <__aeabi_ddiv+0x502>
 800201c:	4288      	cmp	r0, r1
 800201e:	d863      	bhi.n	80020e8 <__aeabi_ddiv+0x558>
 8002020:	d060      	beq.n	80020e4 <__aeabi_ddiv+0x554>
 8002022:	4690      	mov	r8, r2
 8002024:	e752      	b.n	8001ecc <__aeabi_ddiv+0x33c>
 8002026:	42aa      	cmp	r2, r5
 8002028:	d900      	bls.n	800202c <__aeabi_ddiv+0x49c>
 800202a:	e6ea      	b.n	8001e02 <__aeabi_ddiv+0x272>
 800202c:	4643      	mov	r3, r8
 800202e:	07de      	lsls	r6, r3, #31
 8002030:	0858      	lsrs	r0, r3, #1
 8002032:	086b      	lsrs	r3, r5, #1
 8002034:	431e      	orrs	r6, r3
 8002036:	07ed      	lsls	r5, r5, #31
 8002038:	e6ea      	b.n	8001e10 <__aeabi_ddiv+0x280>
 800203a:	4648      	mov	r0, r9
 800203c:	f001 f926 	bl	800328c <__clzsi2>
 8002040:	0001      	movs	r1, r0
 8002042:	0002      	movs	r2, r0
 8002044:	3115      	adds	r1, #21
 8002046:	3220      	adds	r2, #32
 8002048:	291c      	cmp	r1, #28
 800204a:	dc00      	bgt.n	800204e <__aeabi_ddiv+0x4be>
 800204c:	e61a      	b.n	8001c84 <__aeabi_ddiv+0xf4>
 800204e:	464b      	mov	r3, r9
 8002050:	3808      	subs	r0, #8
 8002052:	4083      	lsls	r3, r0
 8002054:	2500      	movs	r5, #0
 8002056:	4698      	mov	r8, r3
 8002058:	e620      	b.n	8001c9c <__aeabi_ddiv+0x10c>
 800205a:	f001 f917 	bl	800328c <__clzsi2>
 800205e:	0003      	movs	r3, r0
 8002060:	001a      	movs	r2, r3
 8002062:	3215      	adds	r2, #21
 8002064:	3020      	adds	r0, #32
 8002066:	2a1c      	cmp	r2, #28
 8002068:	dc00      	bgt.n	800206c <__aeabi_ddiv+0x4dc>
 800206a:	e630      	b.n	8001cce <__aeabi_ddiv+0x13e>
 800206c:	4654      	mov	r4, sl
 800206e:	3b08      	subs	r3, #8
 8002070:	2200      	movs	r2, #0
 8002072:	409c      	lsls	r4, r3
 8002074:	e635      	b.n	8001ce2 <__aeabi_ddiv+0x152>
 8002076:	230f      	movs	r3, #15
 8002078:	402b      	ands	r3, r5
 800207a:	2b04      	cmp	r3, #4
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x4f0>
 800207e:	e652      	b.n	8001d26 <__aeabi_ddiv+0x196>
 8002080:	2305      	movs	r3, #5
 8002082:	425b      	negs	r3, r3
 8002084:	42ab      	cmp	r3, r5
 8002086:	419b      	sbcs	r3, r3
 8002088:	3504      	adds	r5, #4
 800208a:	425b      	negs	r3, r3
 800208c:	08ed      	lsrs	r5, r5, #3
 800208e:	4498      	add	r8, r3
 8002090:	e64a      	b.n	8001d28 <__aeabi_ddiv+0x198>
 8002092:	428c      	cmp	r4, r1
 8002094:	d1c5      	bne.n	8002022 <__aeabi_ddiv+0x492>
 8002096:	42af      	cmp	r7, r5
 8002098:	d9c0      	bls.n	800201c <__aeabi_ddiv+0x48c>
 800209a:	4690      	mov	r8, r2
 800209c:	e716      	b.n	8001ecc <__aeabi_ddiv+0x33c>
 800209e:	428a      	cmp	r2, r1
 80020a0:	d800      	bhi.n	80020a4 <__aeabi_ddiv+0x514>
 80020a2:	e6ea      	b.n	8001e7a <__aeabi_ddiv+0x2ea>
 80020a4:	1e83      	subs	r3, r0, #2
 80020a6:	1909      	adds	r1, r1, r4
 80020a8:	e6e7      	b.n	8001e7a <__aeabi_ddiv+0x2ea>
 80020aa:	4a2a      	ldr	r2, [pc, #168]	; (8002154 <__aeabi_ddiv+0x5c4>)
 80020ac:	0028      	movs	r0, r5
 80020ae:	445a      	add	r2, fp
 80020b0:	4643      	mov	r3, r8
 80020b2:	4095      	lsls	r5, r2
 80020b4:	4093      	lsls	r3, r2
 80020b6:	40c8      	lsrs	r0, r1
 80020b8:	1e6a      	subs	r2, r5, #1
 80020ba:	4195      	sbcs	r5, r2
 80020bc:	4644      	mov	r4, r8
 80020be:	4303      	orrs	r3, r0
 80020c0:	432b      	orrs	r3, r5
 80020c2:	40cc      	lsrs	r4, r1
 80020c4:	075a      	lsls	r2, r3, #29
 80020c6:	d092      	beq.n	8001fee <__aeabi_ddiv+0x45e>
 80020c8:	220f      	movs	r2, #15
 80020ca:	401a      	ands	r2, r3
 80020cc:	2a04      	cmp	r2, #4
 80020ce:	d188      	bne.n	8001fe2 <__aeabi_ddiv+0x452>
 80020d0:	e78d      	b.n	8001fee <__aeabi_ddiv+0x45e>
 80020d2:	0035      	movs	r5, r6
 80020d4:	4281      	cmp	r1, r0
 80020d6:	d000      	beq.n	80020da <__aeabi_ddiv+0x54a>
 80020d8:	e74b      	b.n	8001f72 <__aeabi_ddiv+0x3e2>
 80020da:	9a00      	ldr	r2, [sp, #0]
 80020dc:	4293      	cmp	r3, r2
 80020de:	d000      	beq.n	80020e2 <__aeabi_ddiv+0x552>
 80020e0:	e747      	b.n	8001f72 <__aeabi_ddiv+0x3e2>
 80020e2:	e618      	b.n	8001d16 <__aeabi_ddiv+0x186>
 80020e4:	42ae      	cmp	r6, r5
 80020e6:	d99c      	bls.n	8002022 <__aeabi_ddiv+0x492>
 80020e8:	2302      	movs	r3, #2
 80020ea:	425b      	negs	r3, r3
 80020ec:	469c      	mov	ip, r3
 80020ee:	9b00      	ldr	r3, [sp, #0]
 80020f0:	44e0      	add	r8, ip
 80020f2:	469c      	mov	ip, r3
 80020f4:	4465      	add	r5, ip
 80020f6:	429d      	cmp	r5, r3
 80020f8:	419b      	sbcs	r3, r3
 80020fa:	425b      	negs	r3, r3
 80020fc:	191b      	adds	r3, r3, r4
 80020fe:	18c9      	adds	r1, r1, r3
 8002100:	e6e4      	b.n	8001ecc <__aeabi_ddiv+0x33c>
 8002102:	4a15      	ldr	r2, [pc, #84]	; (8002158 <__aeabi_ddiv+0x5c8>)
 8002104:	445a      	add	r2, fp
 8002106:	2a00      	cmp	r2, #0
 8002108:	dc00      	bgt.n	800210c <__aeabi_ddiv+0x57c>
 800210a:	e744      	b.n	8001f96 <__aeabi_ddiv+0x406>
 800210c:	2301      	movs	r3, #1
 800210e:	2500      	movs	r5, #0
 8002110:	4498      	add	r8, r3
 8002112:	e609      	b.n	8001d28 <__aeabi_ddiv+0x198>
 8002114:	0765      	lsls	r5, r4, #29
 8002116:	0264      	lsls	r4, r4, #9
 8002118:	0b24      	lsrs	r4, r4, #12
 800211a:	08db      	lsrs	r3, r3, #3
 800211c:	431d      	orrs	r5, r3
 800211e:	2300      	movs	r3, #0
 8002120:	e590      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8002122:	9e00      	ldr	r6, [sp, #0]
 8002124:	3d02      	subs	r5, #2
 8002126:	0072      	lsls	r2, r6, #1
 8002128:	42b2      	cmp	r2, r6
 800212a:	41bf      	sbcs	r7, r7
 800212c:	427f      	negs	r7, r7
 800212e:	193c      	adds	r4, r7, r4
 8002130:	1909      	adds	r1, r1, r4
 8002132:	9200      	str	r2, [sp, #0]
 8002134:	e7ce      	b.n	80020d4 <__aeabi_ddiv+0x544>
 8002136:	2480      	movs	r4, #128	; 0x80
 8002138:	4643      	mov	r3, r8
 800213a:	0324      	lsls	r4, r4, #12
 800213c:	431c      	orrs	r4, r3
 800213e:	0324      	lsls	r4, r4, #12
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <__aeabi_ddiv+0x5cc>)
 8002142:	0b24      	lsrs	r4, r4, #12
 8002144:	e57e      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8002146:	9a00      	ldr	r2, [sp, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d3ea      	bcc.n	8002122 <__aeabi_ddiv+0x592>
 800214c:	0035      	movs	r5, r6
 800214e:	e7c4      	b.n	80020da <__aeabi_ddiv+0x54a>
 8002150:	0000043e 	.word	0x0000043e
 8002154:	0000041e 	.word	0x0000041e
 8002158:	000003ff 	.word	0x000003ff
 800215c:	000007ff 	.word	0x000007ff

08002160 <__eqdf2>:
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002162:	464f      	mov	r7, r9
 8002164:	4646      	mov	r6, r8
 8002166:	46d6      	mov	lr, sl
 8002168:	4694      	mov	ip, r2
 800216a:	4691      	mov	r9, r2
 800216c:	031a      	lsls	r2, r3, #12
 800216e:	0b12      	lsrs	r2, r2, #12
 8002170:	4d18      	ldr	r5, [pc, #96]	; (80021d4 <__eqdf2+0x74>)
 8002172:	b5c0      	push	{r6, r7, lr}
 8002174:	004c      	lsls	r4, r1, #1
 8002176:	030f      	lsls	r7, r1, #12
 8002178:	4692      	mov	sl, r2
 800217a:	005a      	lsls	r2, r3, #1
 800217c:	0006      	movs	r6, r0
 800217e:	4680      	mov	r8, r0
 8002180:	0b3f      	lsrs	r7, r7, #12
 8002182:	2001      	movs	r0, #1
 8002184:	0d64      	lsrs	r4, r4, #21
 8002186:	0fc9      	lsrs	r1, r1, #31
 8002188:	0d52      	lsrs	r2, r2, #21
 800218a:	0fdb      	lsrs	r3, r3, #31
 800218c:	42ac      	cmp	r4, r5
 800218e:	d00a      	beq.n	80021a6 <__eqdf2+0x46>
 8002190:	42aa      	cmp	r2, r5
 8002192:	d003      	beq.n	800219c <__eqdf2+0x3c>
 8002194:	4294      	cmp	r4, r2
 8002196:	d101      	bne.n	800219c <__eqdf2+0x3c>
 8002198:	4557      	cmp	r7, sl
 800219a:	d00d      	beq.n	80021b8 <__eqdf2+0x58>
 800219c:	bce0      	pop	{r5, r6, r7}
 800219e:	46ba      	mov	sl, r7
 80021a0:	46b1      	mov	r9, r6
 80021a2:	46a8      	mov	r8, r5
 80021a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a6:	003d      	movs	r5, r7
 80021a8:	4335      	orrs	r5, r6
 80021aa:	d1f7      	bne.n	800219c <__eqdf2+0x3c>
 80021ac:	42a2      	cmp	r2, r4
 80021ae:	d1f5      	bne.n	800219c <__eqdf2+0x3c>
 80021b0:	4652      	mov	r2, sl
 80021b2:	4665      	mov	r5, ip
 80021b4:	432a      	orrs	r2, r5
 80021b6:	d1f1      	bne.n	800219c <__eqdf2+0x3c>
 80021b8:	2001      	movs	r0, #1
 80021ba:	45c8      	cmp	r8, r9
 80021bc:	d1ee      	bne.n	800219c <__eqdf2+0x3c>
 80021be:	4299      	cmp	r1, r3
 80021c0:	d006      	beq.n	80021d0 <__eqdf2+0x70>
 80021c2:	2c00      	cmp	r4, #0
 80021c4:	d1ea      	bne.n	800219c <__eqdf2+0x3c>
 80021c6:	433e      	orrs	r6, r7
 80021c8:	0030      	movs	r0, r6
 80021ca:	1e46      	subs	r6, r0, #1
 80021cc:	41b0      	sbcs	r0, r6
 80021ce:	e7e5      	b.n	800219c <__eqdf2+0x3c>
 80021d0:	2000      	movs	r0, #0
 80021d2:	e7e3      	b.n	800219c <__eqdf2+0x3c>
 80021d4:	000007ff 	.word	0x000007ff

080021d8 <__gedf2>:
 80021d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021da:	464e      	mov	r6, r9
 80021dc:	4645      	mov	r5, r8
 80021de:	4657      	mov	r7, sl
 80021e0:	46de      	mov	lr, fp
 80021e2:	0004      	movs	r4, r0
 80021e4:	0018      	movs	r0, r3
 80021e6:	b5e0      	push	{r5, r6, r7, lr}
 80021e8:	0016      	movs	r6, r2
 80021ea:	031b      	lsls	r3, r3, #12
 80021ec:	0b1b      	lsrs	r3, r3, #12
 80021ee:	4d32      	ldr	r5, [pc, #200]	; (80022b8 <__gedf2+0xe0>)
 80021f0:	030f      	lsls	r7, r1, #12
 80021f2:	004a      	lsls	r2, r1, #1
 80021f4:	4699      	mov	r9, r3
 80021f6:	0043      	lsls	r3, r0, #1
 80021f8:	46a4      	mov	ip, r4
 80021fa:	46b0      	mov	r8, r6
 80021fc:	0b3f      	lsrs	r7, r7, #12
 80021fe:	0d52      	lsrs	r2, r2, #21
 8002200:	0fc9      	lsrs	r1, r1, #31
 8002202:	0d5b      	lsrs	r3, r3, #21
 8002204:	0fc0      	lsrs	r0, r0, #31
 8002206:	42aa      	cmp	r2, r5
 8002208:	d029      	beq.n	800225e <__gedf2+0x86>
 800220a:	42ab      	cmp	r3, r5
 800220c:	d018      	beq.n	8002240 <__gedf2+0x68>
 800220e:	2a00      	cmp	r2, #0
 8002210:	d12a      	bne.n	8002268 <__gedf2+0x90>
 8002212:	433c      	orrs	r4, r7
 8002214:	46a3      	mov	fp, r4
 8002216:	4265      	negs	r5, r4
 8002218:	4165      	adcs	r5, r4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <__gedf2+0x4c>
 800221e:	464c      	mov	r4, r9
 8002220:	4326      	orrs	r6, r4
 8002222:	d027      	beq.n	8002274 <__gedf2+0x9c>
 8002224:	2d00      	cmp	r5, #0
 8002226:	d115      	bne.n	8002254 <__gedf2+0x7c>
 8002228:	4281      	cmp	r1, r0
 800222a:	d028      	beq.n	800227e <__gedf2+0xa6>
 800222c:	2002      	movs	r0, #2
 800222e:	3901      	subs	r1, #1
 8002230:	4008      	ands	r0, r1
 8002232:	3801      	subs	r0, #1
 8002234:	bcf0      	pop	{r4, r5, r6, r7}
 8002236:	46bb      	mov	fp, r7
 8002238:	46b2      	mov	sl, r6
 800223a:	46a9      	mov	r9, r5
 800223c:	46a0      	mov	r8, r4
 800223e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002240:	464d      	mov	r5, r9
 8002242:	432e      	orrs	r6, r5
 8002244:	d12f      	bne.n	80022a6 <__gedf2+0xce>
 8002246:	2a00      	cmp	r2, #0
 8002248:	d1ee      	bne.n	8002228 <__gedf2+0x50>
 800224a:	433c      	orrs	r4, r7
 800224c:	4265      	negs	r5, r4
 800224e:	4165      	adcs	r5, r4
 8002250:	2d00      	cmp	r5, #0
 8002252:	d0e9      	beq.n	8002228 <__gedf2+0x50>
 8002254:	2800      	cmp	r0, #0
 8002256:	d1ed      	bne.n	8002234 <__gedf2+0x5c>
 8002258:	2001      	movs	r0, #1
 800225a:	4240      	negs	r0, r0
 800225c:	e7ea      	b.n	8002234 <__gedf2+0x5c>
 800225e:	003d      	movs	r5, r7
 8002260:	4325      	orrs	r5, r4
 8002262:	d120      	bne.n	80022a6 <__gedf2+0xce>
 8002264:	4293      	cmp	r3, r2
 8002266:	d0eb      	beq.n	8002240 <__gedf2+0x68>
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1dd      	bne.n	8002228 <__gedf2+0x50>
 800226c:	464c      	mov	r4, r9
 800226e:	4326      	orrs	r6, r4
 8002270:	d1da      	bne.n	8002228 <__gedf2+0x50>
 8002272:	e7db      	b.n	800222c <__gedf2+0x54>
 8002274:	465b      	mov	r3, fp
 8002276:	2000      	movs	r0, #0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0db      	beq.n	8002234 <__gedf2+0x5c>
 800227c:	e7d6      	b.n	800222c <__gedf2+0x54>
 800227e:	429a      	cmp	r2, r3
 8002280:	dc0a      	bgt.n	8002298 <__gedf2+0xc0>
 8002282:	dbe7      	blt.n	8002254 <__gedf2+0x7c>
 8002284:	454f      	cmp	r7, r9
 8002286:	d8d1      	bhi.n	800222c <__gedf2+0x54>
 8002288:	d010      	beq.n	80022ac <__gedf2+0xd4>
 800228a:	2000      	movs	r0, #0
 800228c:	454f      	cmp	r7, r9
 800228e:	d2d1      	bcs.n	8002234 <__gedf2+0x5c>
 8002290:	2900      	cmp	r1, #0
 8002292:	d0e1      	beq.n	8002258 <__gedf2+0x80>
 8002294:	0008      	movs	r0, r1
 8002296:	e7cd      	b.n	8002234 <__gedf2+0x5c>
 8002298:	4243      	negs	r3, r0
 800229a:	4158      	adcs	r0, r3
 800229c:	2302      	movs	r3, #2
 800229e:	4240      	negs	r0, r0
 80022a0:	4018      	ands	r0, r3
 80022a2:	3801      	subs	r0, #1
 80022a4:	e7c6      	b.n	8002234 <__gedf2+0x5c>
 80022a6:	2002      	movs	r0, #2
 80022a8:	4240      	negs	r0, r0
 80022aa:	e7c3      	b.n	8002234 <__gedf2+0x5c>
 80022ac:	45c4      	cmp	ip, r8
 80022ae:	d8bd      	bhi.n	800222c <__gedf2+0x54>
 80022b0:	2000      	movs	r0, #0
 80022b2:	45c4      	cmp	ip, r8
 80022b4:	d2be      	bcs.n	8002234 <__gedf2+0x5c>
 80022b6:	e7eb      	b.n	8002290 <__gedf2+0xb8>
 80022b8:	000007ff 	.word	0x000007ff

080022bc <__ledf2>:
 80022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022be:	464e      	mov	r6, r9
 80022c0:	4645      	mov	r5, r8
 80022c2:	4657      	mov	r7, sl
 80022c4:	46de      	mov	lr, fp
 80022c6:	0004      	movs	r4, r0
 80022c8:	0018      	movs	r0, r3
 80022ca:	b5e0      	push	{r5, r6, r7, lr}
 80022cc:	0016      	movs	r6, r2
 80022ce:	031b      	lsls	r3, r3, #12
 80022d0:	0b1b      	lsrs	r3, r3, #12
 80022d2:	4d31      	ldr	r5, [pc, #196]	; (8002398 <__ledf2+0xdc>)
 80022d4:	030f      	lsls	r7, r1, #12
 80022d6:	004a      	lsls	r2, r1, #1
 80022d8:	4699      	mov	r9, r3
 80022da:	0043      	lsls	r3, r0, #1
 80022dc:	46a4      	mov	ip, r4
 80022de:	46b0      	mov	r8, r6
 80022e0:	0b3f      	lsrs	r7, r7, #12
 80022e2:	0d52      	lsrs	r2, r2, #21
 80022e4:	0fc9      	lsrs	r1, r1, #31
 80022e6:	0d5b      	lsrs	r3, r3, #21
 80022e8:	0fc0      	lsrs	r0, r0, #31
 80022ea:	42aa      	cmp	r2, r5
 80022ec:	d011      	beq.n	8002312 <__ledf2+0x56>
 80022ee:	42ab      	cmp	r3, r5
 80022f0:	d014      	beq.n	800231c <__ledf2+0x60>
 80022f2:	2a00      	cmp	r2, #0
 80022f4:	d12f      	bne.n	8002356 <__ledf2+0x9a>
 80022f6:	433c      	orrs	r4, r7
 80022f8:	46a3      	mov	fp, r4
 80022fa:	4265      	negs	r5, r4
 80022fc:	4165      	adcs	r5, r4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d114      	bne.n	800232c <__ledf2+0x70>
 8002302:	464c      	mov	r4, r9
 8002304:	4326      	orrs	r6, r4
 8002306:	d111      	bne.n	800232c <__ledf2+0x70>
 8002308:	465b      	mov	r3, fp
 800230a:	2000      	movs	r0, #0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d017      	beq.n	8002340 <__ledf2+0x84>
 8002310:	e010      	b.n	8002334 <__ledf2+0x78>
 8002312:	003d      	movs	r5, r7
 8002314:	4325      	orrs	r5, r4
 8002316:	d112      	bne.n	800233e <__ledf2+0x82>
 8002318:	4293      	cmp	r3, r2
 800231a:	d11c      	bne.n	8002356 <__ledf2+0x9a>
 800231c:	464d      	mov	r5, r9
 800231e:	432e      	orrs	r6, r5
 8002320:	d10d      	bne.n	800233e <__ledf2+0x82>
 8002322:	2a00      	cmp	r2, #0
 8002324:	d104      	bne.n	8002330 <__ledf2+0x74>
 8002326:	433c      	orrs	r4, r7
 8002328:	4265      	negs	r5, r4
 800232a:	4165      	adcs	r5, r4
 800232c:	2d00      	cmp	r5, #0
 800232e:	d10d      	bne.n	800234c <__ledf2+0x90>
 8002330:	4281      	cmp	r1, r0
 8002332:	d016      	beq.n	8002362 <__ledf2+0xa6>
 8002334:	2002      	movs	r0, #2
 8002336:	3901      	subs	r1, #1
 8002338:	4008      	ands	r0, r1
 800233a:	3801      	subs	r0, #1
 800233c:	e000      	b.n	8002340 <__ledf2+0x84>
 800233e:	2002      	movs	r0, #2
 8002340:	bcf0      	pop	{r4, r5, r6, r7}
 8002342:	46bb      	mov	fp, r7
 8002344:	46b2      	mov	sl, r6
 8002346:	46a9      	mov	r9, r5
 8002348:	46a0      	mov	r8, r4
 800234a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234c:	2800      	cmp	r0, #0
 800234e:	d1f7      	bne.n	8002340 <__ledf2+0x84>
 8002350:	2001      	movs	r0, #1
 8002352:	4240      	negs	r0, r0
 8002354:	e7f4      	b.n	8002340 <__ledf2+0x84>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1ea      	bne.n	8002330 <__ledf2+0x74>
 800235a:	464c      	mov	r4, r9
 800235c:	4326      	orrs	r6, r4
 800235e:	d1e7      	bne.n	8002330 <__ledf2+0x74>
 8002360:	e7e8      	b.n	8002334 <__ledf2+0x78>
 8002362:	429a      	cmp	r2, r3
 8002364:	dd06      	ble.n	8002374 <__ledf2+0xb8>
 8002366:	4243      	negs	r3, r0
 8002368:	4158      	adcs	r0, r3
 800236a:	2302      	movs	r3, #2
 800236c:	4240      	negs	r0, r0
 800236e:	4018      	ands	r0, r3
 8002370:	3801      	subs	r0, #1
 8002372:	e7e5      	b.n	8002340 <__ledf2+0x84>
 8002374:	429a      	cmp	r2, r3
 8002376:	dbe9      	blt.n	800234c <__ledf2+0x90>
 8002378:	454f      	cmp	r7, r9
 800237a:	d8db      	bhi.n	8002334 <__ledf2+0x78>
 800237c:	d006      	beq.n	800238c <__ledf2+0xd0>
 800237e:	2000      	movs	r0, #0
 8002380:	454f      	cmp	r7, r9
 8002382:	d2dd      	bcs.n	8002340 <__ledf2+0x84>
 8002384:	2900      	cmp	r1, #0
 8002386:	d0e3      	beq.n	8002350 <__ledf2+0x94>
 8002388:	0008      	movs	r0, r1
 800238a:	e7d9      	b.n	8002340 <__ledf2+0x84>
 800238c:	45c4      	cmp	ip, r8
 800238e:	d8d1      	bhi.n	8002334 <__ledf2+0x78>
 8002390:	2000      	movs	r0, #0
 8002392:	45c4      	cmp	ip, r8
 8002394:	d2d4      	bcs.n	8002340 <__ledf2+0x84>
 8002396:	e7f5      	b.n	8002384 <__ledf2+0xc8>
 8002398:	000007ff 	.word	0x000007ff

0800239c <__aeabi_dmul>:
 800239c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239e:	4657      	mov	r7, sl
 80023a0:	464e      	mov	r6, r9
 80023a2:	4645      	mov	r5, r8
 80023a4:	46de      	mov	lr, fp
 80023a6:	b5e0      	push	{r5, r6, r7, lr}
 80023a8:	4698      	mov	r8, r3
 80023aa:	030c      	lsls	r4, r1, #12
 80023ac:	004b      	lsls	r3, r1, #1
 80023ae:	0006      	movs	r6, r0
 80023b0:	4692      	mov	sl, r2
 80023b2:	b087      	sub	sp, #28
 80023b4:	0b24      	lsrs	r4, r4, #12
 80023b6:	0d5b      	lsrs	r3, r3, #21
 80023b8:	0fcf      	lsrs	r7, r1, #31
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d06c      	beq.n	8002498 <__aeabi_dmul+0xfc>
 80023be:	4add      	ldr	r2, [pc, #884]	; (8002734 <__aeabi_dmul+0x398>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d100      	bne.n	80023c6 <__aeabi_dmul+0x2a>
 80023c4:	e086      	b.n	80024d4 <__aeabi_dmul+0x138>
 80023c6:	0f42      	lsrs	r2, r0, #29
 80023c8:	00e4      	lsls	r4, r4, #3
 80023ca:	4314      	orrs	r4, r2
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	0412      	lsls	r2, r2, #16
 80023d0:	4314      	orrs	r4, r2
 80023d2:	4ad9      	ldr	r2, [pc, #868]	; (8002738 <__aeabi_dmul+0x39c>)
 80023d4:	00c5      	lsls	r5, r0, #3
 80023d6:	4694      	mov	ip, r2
 80023d8:	4463      	add	r3, ip
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2300      	movs	r3, #0
 80023de:	4699      	mov	r9, r3
 80023e0:	469b      	mov	fp, r3
 80023e2:	4643      	mov	r3, r8
 80023e4:	4642      	mov	r2, r8
 80023e6:	031e      	lsls	r6, r3, #12
 80023e8:	0fd2      	lsrs	r2, r2, #31
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4650      	mov	r0, sl
 80023ee:	4690      	mov	r8, r2
 80023f0:	0b36      	lsrs	r6, r6, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	d100      	bne.n	80023f8 <__aeabi_dmul+0x5c>
 80023f6:	e078      	b.n	80024ea <__aeabi_dmul+0x14e>
 80023f8:	4ace      	ldr	r2, [pc, #824]	; (8002734 <__aeabi_dmul+0x398>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01d      	beq.n	800243a <__aeabi_dmul+0x9e>
 80023fe:	49ce      	ldr	r1, [pc, #824]	; (8002738 <__aeabi_dmul+0x39c>)
 8002400:	0f42      	lsrs	r2, r0, #29
 8002402:	468c      	mov	ip, r1
 8002404:	9900      	ldr	r1, [sp, #0]
 8002406:	4463      	add	r3, ip
 8002408:	00f6      	lsls	r6, r6, #3
 800240a:	468c      	mov	ip, r1
 800240c:	4316      	orrs	r6, r2
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	449c      	add	ip, r3
 8002412:	0412      	lsls	r2, r2, #16
 8002414:	4663      	mov	r3, ip
 8002416:	4316      	orrs	r6, r2
 8002418:	00c2      	lsls	r2, r0, #3
 800241a:	2000      	movs	r0, #0
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	9900      	ldr	r1, [sp, #0]
 8002420:	4643      	mov	r3, r8
 8002422:	3101      	adds	r1, #1
 8002424:	468c      	mov	ip, r1
 8002426:	4649      	mov	r1, r9
 8002428:	407b      	eors	r3, r7
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	290f      	cmp	r1, #15
 800242e:	d900      	bls.n	8002432 <__aeabi_dmul+0x96>
 8002430:	e07e      	b.n	8002530 <__aeabi_dmul+0x194>
 8002432:	4bc2      	ldr	r3, [pc, #776]	; (800273c <__aeabi_dmul+0x3a0>)
 8002434:	0089      	lsls	r1, r1, #2
 8002436:	5859      	ldr	r1, [r3, r1]
 8002438:	468f      	mov	pc, r1
 800243a:	4652      	mov	r2, sl
 800243c:	9b00      	ldr	r3, [sp, #0]
 800243e:	4332      	orrs	r2, r6
 8002440:	d000      	beq.n	8002444 <__aeabi_dmul+0xa8>
 8002442:	e156      	b.n	80026f2 <__aeabi_dmul+0x356>
 8002444:	49bb      	ldr	r1, [pc, #748]	; (8002734 <__aeabi_dmul+0x398>)
 8002446:	2600      	movs	r6, #0
 8002448:	468c      	mov	ip, r1
 800244a:	4463      	add	r3, ip
 800244c:	4649      	mov	r1, r9
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2302      	movs	r3, #2
 8002452:	4319      	orrs	r1, r3
 8002454:	4689      	mov	r9, r1
 8002456:	2002      	movs	r0, #2
 8002458:	e7e1      	b.n	800241e <__aeabi_dmul+0x82>
 800245a:	4643      	mov	r3, r8
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	0034      	movs	r4, r6
 8002460:	0015      	movs	r5, r2
 8002462:	4683      	mov	fp, r0
 8002464:	465b      	mov	r3, fp
 8002466:	2b02      	cmp	r3, #2
 8002468:	d05e      	beq.n	8002528 <__aeabi_dmul+0x18c>
 800246a:	2b03      	cmp	r3, #3
 800246c:	d100      	bne.n	8002470 <__aeabi_dmul+0xd4>
 800246e:	e1f3      	b.n	8002858 <__aeabi_dmul+0x4bc>
 8002470:	2b01      	cmp	r3, #1
 8002472:	d000      	beq.n	8002476 <__aeabi_dmul+0xda>
 8002474:	e118      	b.n	80026a8 <__aeabi_dmul+0x30c>
 8002476:	2200      	movs	r2, #0
 8002478:	2400      	movs	r4, #0
 800247a:	2500      	movs	r5, #0
 800247c:	9b01      	ldr	r3, [sp, #4]
 800247e:	0512      	lsls	r2, r2, #20
 8002480:	4322      	orrs	r2, r4
 8002482:	07db      	lsls	r3, r3, #31
 8002484:	431a      	orrs	r2, r3
 8002486:	0028      	movs	r0, r5
 8002488:	0011      	movs	r1, r2
 800248a:	b007      	add	sp, #28
 800248c:	bcf0      	pop	{r4, r5, r6, r7}
 800248e:	46bb      	mov	fp, r7
 8002490:	46b2      	mov	sl, r6
 8002492:	46a9      	mov	r9, r5
 8002494:	46a0      	mov	r8, r4
 8002496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002498:	0025      	movs	r5, r4
 800249a:	4305      	orrs	r5, r0
 800249c:	d100      	bne.n	80024a0 <__aeabi_dmul+0x104>
 800249e:	e141      	b.n	8002724 <__aeabi_dmul+0x388>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d100      	bne.n	80024a6 <__aeabi_dmul+0x10a>
 80024a4:	e1ad      	b.n	8002802 <__aeabi_dmul+0x466>
 80024a6:	0020      	movs	r0, r4
 80024a8:	f000 fef0 	bl	800328c <__clzsi2>
 80024ac:	0001      	movs	r1, r0
 80024ae:	0002      	movs	r2, r0
 80024b0:	390b      	subs	r1, #11
 80024b2:	231d      	movs	r3, #29
 80024b4:	0010      	movs	r0, r2
 80024b6:	1a5b      	subs	r3, r3, r1
 80024b8:	0031      	movs	r1, r6
 80024ba:	0035      	movs	r5, r6
 80024bc:	3808      	subs	r0, #8
 80024be:	4084      	lsls	r4, r0
 80024c0:	40d9      	lsrs	r1, r3
 80024c2:	4085      	lsls	r5, r0
 80024c4:	430c      	orrs	r4, r1
 80024c6:	489e      	ldr	r0, [pc, #632]	; (8002740 <__aeabi_dmul+0x3a4>)
 80024c8:	1a83      	subs	r3, r0, r2
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2300      	movs	r3, #0
 80024ce:	4699      	mov	r9, r3
 80024d0:	469b      	mov	fp, r3
 80024d2:	e786      	b.n	80023e2 <__aeabi_dmul+0x46>
 80024d4:	0005      	movs	r5, r0
 80024d6:	4325      	orrs	r5, r4
 80024d8:	d000      	beq.n	80024dc <__aeabi_dmul+0x140>
 80024da:	e11c      	b.n	8002716 <__aeabi_dmul+0x37a>
 80024dc:	2208      	movs	r2, #8
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2302      	movs	r3, #2
 80024e2:	2400      	movs	r4, #0
 80024e4:	4691      	mov	r9, r2
 80024e6:	469b      	mov	fp, r3
 80024e8:	e77b      	b.n	80023e2 <__aeabi_dmul+0x46>
 80024ea:	4652      	mov	r2, sl
 80024ec:	4332      	orrs	r2, r6
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dmul+0x156>
 80024f0:	e10a      	b.n	8002708 <__aeabi_dmul+0x36c>
 80024f2:	2e00      	cmp	r6, #0
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dmul+0x15c>
 80024f6:	e176      	b.n	80027e6 <__aeabi_dmul+0x44a>
 80024f8:	0030      	movs	r0, r6
 80024fa:	f000 fec7 	bl	800328c <__clzsi2>
 80024fe:	0002      	movs	r2, r0
 8002500:	3a0b      	subs	r2, #11
 8002502:	231d      	movs	r3, #29
 8002504:	0001      	movs	r1, r0
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	4652      	mov	r2, sl
 800250a:	3908      	subs	r1, #8
 800250c:	40da      	lsrs	r2, r3
 800250e:	408e      	lsls	r6, r1
 8002510:	4316      	orrs	r6, r2
 8002512:	4652      	mov	r2, sl
 8002514:	408a      	lsls	r2, r1
 8002516:	9b00      	ldr	r3, [sp, #0]
 8002518:	4989      	ldr	r1, [pc, #548]	; (8002740 <__aeabi_dmul+0x3a4>)
 800251a:	1a18      	subs	r0, r3, r0
 800251c:	0003      	movs	r3, r0
 800251e:	468c      	mov	ip, r1
 8002520:	4463      	add	r3, ip
 8002522:	2000      	movs	r0, #0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	e77a      	b.n	800241e <__aeabi_dmul+0x82>
 8002528:	2400      	movs	r4, #0
 800252a:	2500      	movs	r5, #0
 800252c:	4a81      	ldr	r2, [pc, #516]	; (8002734 <__aeabi_dmul+0x398>)
 800252e:	e7a5      	b.n	800247c <__aeabi_dmul+0xe0>
 8002530:	0c2f      	lsrs	r7, r5, #16
 8002532:	042d      	lsls	r5, r5, #16
 8002534:	0c2d      	lsrs	r5, r5, #16
 8002536:	002b      	movs	r3, r5
 8002538:	0c11      	lsrs	r1, r2, #16
 800253a:	0412      	lsls	r2, r2, #16
 800253c:	0c12      	lsrs	r2, r2, #16
 800253e:	4353      	muls	r3, r2
 8002540:	4698      	mov	r8, r3
 8002542:	0013      	movs	r3, r2
 8002544:	0028      	movs	r0, r5
 8002546:	437b      	muls	r3, r7
 8002548:	4699      	mov	r9, r3
 800254a:	4348      	muls	r0, r1
 800254c:	4448      	add	r0, r9
 800254e:	4683      	mov	fp, r0
 8002550:	4640      	mov	r0, r8
 8002552:	000b      	movs	r3, r1
 8002554:	0c00      	lsrs	r0, r0, #16
 8002556:	4682      	mov	sl, r0
 8002558:	4658      	mov	r0, fp
 800255a:	437b      	muls	r3, r7
 800255c:	4450      	add	r0, sl
 800255e:	9302      	str	r3, [sp, #8]
 8002560:	4581      	cmp	r9, r0
 8002562:	d906      	bls.n	8002572 <__aeabi_dmul+0x1d6>
 8002564:	469a      	mov	sl, r3
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	025b      	lsls	r3, r3, #9
 800256a:	4699      	mov	r9, r3
 800256c:	44ca      	add	sl, r9
 800256e:	4653      	mov	r3, sl
 8002570:	9302      	str	r3, [sp, #8]
 8002572:	0c03      	lsrs	r3, r0, #16
 8002574:	469b      	mov	fp, r3
 8002576:	4643      	mov	r3, r8
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	0400      	lsls	r0, r0, #16
 800257c:	0c1b      	lsrs	r3, r3, #16
 800257e:	4698      	mov	r8, r3
 8002580:	0003      	movs	r3, r0
 8002582:	4443      	add	r3, r8
 8002584:	9304      	str	r3, [sp, #16]
 8002586:	0c33      	lsrs	r3, r6, #16
 8002588:	4699      	mov	r9, r3
 800258a:	002b      	movs	r3, r5
 800258c:	0436      	lsls	r6, r6, #16
 800258e:	0c36      	lsrs	r6, r6, #16
 8002590:	4373      	muls	r3, r6
 8002592:	4698      	mov	r8, r3
 8002594:	0033      	movs	r3, r6
 8002596:	437b      	muls	r3, r7
 8002598:	469a      	mov	sl, r3
 800259a:	464b      	mov	r3, r9
 800259c:	435d      	muls	r5, r3
 800259e:	435f      	muls	r7, r3
 80025a0:	4643      	mov	r3, r8
 80025a2:	4455      	add	r5, sl
 80025a4:	0c18      	lsrs	r0, r3, #16
 80025a6:	1940      	adds	r0, r0, r5
 80025a8:	4582      	cmp	sl, r0
 80025aa:	d903      	bls.n	80025b4 <__aeabi_dmul+0x218>
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	025b      	lsls	r3, r3, #9
 80025b0:	469a      	mov	sl, r3
 80025b2:	4457      	add	r7, sl
 80025b4:	0c05      	lsrs	r5, r0, #16
 80025b6:	19eb      	adds	r3, r5, r7
 80025b8:	9305      	str	r3, [sp, #20]
 80025ba:	4643      	mov	r3, r8
 80025bc:	041d      	lsls	r5, r3, #16
 80025be:	0c2d      	lsrs	r5, r5, #16
 80025c0:	0400      	lsls	r0, r0, #16
 80025c2:	1940      	adds	r0, r0, r5
 80025c4:	0c25      	lsrs	r5, r4, #16
 80025c6:	0424      	lsls	r4, r4, #16
 80025c8:	0c24      	lsrs	r4, r4, #16
 80025ca:	0027      	movs	r7, r4
 80025cc:	4357      	muls	r7, r2
 80025ce:	436a      	muls	r2, r5
 80025d0:	4690      	mov	r8, r2
 80025d2:	002a      	movs	r2, r5
 80025d4:	0c3b      	lsrs	r3, r7, #16
 80025d6:	469a      	mov	sl, r3
 80025d8:	434a      	muls	r2, r1
 80025da:	4361      	muls	r1, r4
 80025dc:	4441      	add	r1, r8
 80025de:	4451      	add	r1, sl
 80025e0:	4483      	add	fp, r0
 80025e2:	4588      	cmp	r8, r1
 80025e4:	d903      	bls.n	80025ee <__aeabi_dmul+0x252>
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	025b      	lsls	r3, r3, #9
 80025ea:	4698      	mov	r8, r3
 80025ec:	4442      	add	r2, r8
 80025ee:	043f      	lsls	r7, r7, #16
 80025f0:	0c0b      	lsrs	r3, r1, #16
 80025f2:	0c3f      	lsrs	r7, r7, #16
 80025f4:	0409      	lsls	r1, r1, #16
 80025f6:	19c9      	adds	r1, r1, r7
 80025f8:	0027      	movs	r7, r4
 80025fa:	4698      	mov	r8, r3
 80025fc:	464b      	mov	r3, r9
 80025fe:	4377      	muls	r7, r6
 8002600:	435c      	muls	r4, r3
 8002602:	436e      	muls	r6, r5
 8002604:	435d      	muls	r5, r3
 8002606:	0c3b      	lsrs	r3, r7, #16
 8002608:	4699      	mov	r9, r3
 800260a:	19a4      	adds	r4, r4, r6
 800260c:	444c      	add	r4, r9
 800260e:	4442      	add	r2, r8
 8002610:	9503      	str	r5, [sp, #12]
 8002612:	42a6      	cmp	r6, r4
 8002614:	d904      	bls.n	8002620 <__aeabi_dmul+0x284>
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	025b      	lsls	r3, r3, #9
 800261a:	4698      	mov	r8, r3
 800261c:	4445      	add	r5, r8
 800261e:	9503      	str	r5, [sp, #12]
 8002620:	9b02      	ldr	r3, [sp, #8]
 8002622:	043f      	lsls	r7, r7, #16
 8002624:	445b      	add	r3, fp
 8002626:	001e      	movs	r6, r3
 8002628:	4283      	cmp	r3, r0
 800262a:	4180      	sbcs	r0, r0
 800262c:	0423      	lsls	r3, r4, #16
 800262e:	4698      	mov	r8, r3
 8002630:	9b05      	ldr	r3, [sp, #20]
 8002632:	0c3f      	lsrs	r7, r7, #16
 8002634:	4447      	add	r7, r8
 8002636:	4698      	mov	r8, r3
 8002638:	1876      	adds	r6, r6, r1
 800263a:	428e      	cmp	r6, r1
 800263c:	4189      	sbcs	r1, r1
 800263e:	4447      	add	r7, r8
 8002640:	4240      	negs	r0, r0
 8002642:	183d      	adds	r5, r7, r0
 8002644:	46a8      	mov	r8, r5
 8002646:	4693      	mov	fp, r2
 8002648:	4249      	negs	r1, r1
 800264a:	468a      	mov	sl, r1
 800264c:	44c3      	add	fp, r8
 800264e:	429f      	cmp	r7, r3
 8002650:	41bf      	sbcs	r7, r7
 8002652:	4580      	cmp	r8, r0
 8002654:	4180      	sbcs	r0, r0
 8002656:	9b03      	ldr	r3, [sp, #12]
 8002658:	44da      	add	sl, fp
 800265a:	4698      	mov	r8, r3
 800265c:	4653      	mov	r3, sl
 800265e:	4240      	negs	r0, r0
 8002660:	427f      	negs	r7, r7
 8002662:	4307      	orrs	r7, r0
 8002664:	0c24      	lsrs	r4, r4, #16
 8002666:	4593      	cmp	fp, r2
 8002668:	4192      	sbcs	r2, r2
 800266a:	458a      	cmp	sl, r1
 800266c:	4189      	sbcs	r1, r1
 800266e:	193f      	adds	r7, r7, r4
 8002670:	0ddc      	lsrs	r4, r3, #23
 8002672:	9b04      	ldr	r3, [sp, #16]
 8002674:	0275      	lsls	r5, r6, #9
 8002676:	431d      	orrs	r5, r3
 8002678:	1e68      	subs	r0, r5, #1
 800267a:	4185      	sbcs	r5, r0
 800267c:	4653      	mov	r3, sl
 800267e:	4252      	negs	r2, r2
 8002680:	4249      	negs	r1, r1
 8002682:	430a      	orrs	r2, r1
 8002684:	18bf      	adds	r7, r7, r2
 8002686:	4447      	add	r7, r8
 8002688:	0df6      	lsrs	r6, r6, #23
 800268a:	027f      	lsls	r7, r7, #9
 800268c:	4335      	orrs	r5, r6
 800268e:	025a      	lsls	r2, r3, #9
 8002690:	433c      	orrs	r4, r7
 8002692:	4315      	orrs	r5, r2
 8002694:	01fb      	lsls	r3, r7, #7
 8002696:	d400      	bmi.n	800269a <__aeabi_dmul+0x2fe>
 8002698:	e0c1      	b.n	800281e <__aeabi_dmul+0x482>
 800269a:	2101      	movs	r1, #1
 800269c:	086a      	lsrs	r2, r5, #1
 800269e:	400d      	ands	r5, r1
 80026a0:	4315      	orrs	r5, r2
 80026a2:	07e2      	lsls	r2, r4, #31
 80026a4:	4315      	orrs	r5, r2
 80026a6:	0864      	lsrs	r4, r4, #1
 80026a8:	4926      	ldr	r1, [pc, #152]	; (8002744 <__aeabi_dmul+0x3a8>)
 80026aa:	4461      	add	r1, ip
 80026ac:	2900      	cmp	r1, #0
 80026ae:	dd56      	ble.n	800275e <__aeabi_dmul+0x3c2>
 80026b0:	076b      	lsls	r3, r5, #29
 80026b2:	d009      	beq.n	80026c8 <__aeabi_dmul+0x32c>
 80026b4:	220f      	movs	r2, #15
 80026b6:	402a      	ands	r2, r5
 80026b8:	2a04      	cmp	r2, #4
 80026ba:	d005      	beq.n	80026c8 <__aeabi_dmul+0x32c>
 80026bc:	1d2a      	adds	r2, r5, #4
 80026be:	42aa      	cmp	r2, r5
 80026c0:	41ad      	sbcs	r5, r5
 80026c2:	426d      	negs	r5, r5
 80026c4:	1964      	adds	r4, r4, r5
 80026c6:	0015      	movs	r5, r2
 80026c8:	01e3      	lsls	r3, r4, #7
 80026ca:	d504      	bpl.n	80026d6 <__aeabi_dmul+0x33a>
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <__aeabi_dmul+0x3ac>)
 80026d0:	00c9      	lsls	r1, r1, #3
 80026d2:	4014      	ands	r4, r2
 80026d4:	4461      	add	r1, ip
 80026d6:	4a1d      	ldr	r2, [pc, #116]	; (800274c <__aeabi_dmul+0x3b0>)
 80026d8:	4291      	cmp	r1, r2
 80026da:	dd00      	ble.n	80026de <__aeabi_dmul+0x342>
 80026dc:	e724      	b.n	8002528 <__aeabi_dmul+0x18c>
 80026de:	0762      	lsls	r2, r4, #29
 80026e0:	08ed      	lsrs	r5, r5, #3
 80026e2:	0264      	lsls	r4, r4, #9
 80026e4:	0549      	lsls	r1, r1, #21
 80026e6:	4315      	orrs	r5, r2
 80026e8:	0b24      	lsrs	r4, r4, #12
 80026ea:	0d4a      	lsrs	r2, r1, #21
 80026ec:	e6c6      	b.n	800247c <__aeabi_dmul+0xe0>
 80026ee:	9701      	str	r7, [sp, #4]
 80026f0:	e6b8      	b.n	8002464 <__aeabi_dmul+0xc8>
 80026f2:	4a10      	ldr	r2, [pc, #64]	; (8002734 <__aeabi_dmul+0x398>)
 80026f4:	2003      	movs	r0, #3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	464a      	mov	r2, r9
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2303      	movs	r3, #3
 8002700:	431a      	orrs	r2, r3
 8002702:	4691      	mov	r9, r2
 8002704:	4652      	mov	r2, sl
 8002706:	e68a      	b.n	800241e <__aeabi_dmul+0x82>
 8002708:	4649      	mov	r1, r9
 800270a:	2301      	movs	r3, #1
 800270c:	4319      	orrs	r1, r3
 800270e:	4689      	mov	r9, r1
 8002710:	2600      	movs	r6, #0
 8002712:	2001      	movs	r0, #1
 8002714:	e683      	b.n	800241e <__aeabi_dmul+0x82>
 8002716:	220c      	movs	r2, #12
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2303      	movs	r3, #3
 800271c:	0005      	movs	r5, r0
 800271e:	4691      	mov	r9, r2
 8002720:	469b      	mov	fp, r3
 8002722:	e65e      	b.n	80023e2 <__aeabi_dmul+0x46>
 8002724:	2304      	movs	r3, #4
 8002726:	4699      	mov	r9, r3
 8002728:	2300      	movs	r3, #0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	2400      	movs	r4, #0
 8002730:	469b      	mov	fp, r3
 8002732:	e656      	b.n	80023e2 <__aeabi_dmul+0x46>
 8002734:	000007ff 	.word	0x000007ff
 8002738:	fffffc01 	.word	0xfffffc01
 800273c:	0800ab88 	.word	0x0800ab88
 8002740:	fffffc0d 	.word	0xfffffc0d
 8002744:	000003ff 	.word	0x000003ff
 8002748:	feffffff 	.word	0xfeffffff
 800274c:	000007fe 	.word	0x000007fe
 8002750:	2300      	movs	r3, #0
 8002752:	2480      	movs	r4, #128	; 0x80
 8002754:	2500      	movs	r5, #0
 8002756:	4a44      	ldr	r2, [pc, #272]	; (8002868 <__aeabi_dmul+0x4cc>)
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	0324      	lsls	r4, r4, #12
 800275c:	e68e      	b.n	800247c <__aeabi_dmul+0xe0>
 800275e:	2001      	movs	r0, #1
 8002760:	1a40      	subs	r0, r0, r1
 8002762:	2838      	cmp	r0, #56	; 0x38
 8002764:	dd00      	ble.n	8002768 <__aeabi_dmul+0x3cc>
 8002766:	e686      	b.n	8002476 <__aeabi_dmul+0xda>
 8002768:	281f      	cmp	r0, #31
 800276a:	dd5b      	ble.n	8002824 <__aeabi_dmul+0x488>
 800276c:	221f      	movs	r2, #31
 800276e:	0023      	movs	r3, r4
 8002770:	4252      	negs	r2, r2
 8002772:	1a51      	subs	r1, r2, r1
 8002774:	40cb      	lsrs	r3, r1
 8002776:	0019      	movs	r1, r3
 8002778:	2820      	cmp	r0, #32
 800277a:	d003      	beq.n	8002784 <__aeabi_dmul+0x3e8>
 800277c:	4a3b      	ldr	r2, [pc, #236]	; (800286c <__aeabi_dmul+0x4d0>)
 800277e:	4462      	add	r2, ip
 8002780:	4094      	lsls	r4, r2
 8002782:	4325      	orrs	r5, r4
 8002784:	1e6a      	subs	r2, r5, #1
 8002786:	4195      	sbcs	r5, r2
 8002788:	002a      	movs	r2, r5
 800278a:	430a      	orrs	r2, r1
 800278c:	2107      	movs	r1, #7
 800278e:	000d      	movs	r5, r1
 8002790:	2400      	movs	r4, #0
 8002792:	4015      	ands	r5, r2
 8002794:	4211      	tst	r1, r2
 8002796:	d05b      	beq.n	8002850 <__aeabi_dmul+0x4b4>
 8002798:	210f      	movs	r1, #15
 800279a:	2400      	movs	r4, #0
 800279c:	4011      	ands	r1, r2
 800279e:	2904      	cmp	r1, #4
 80027a0:	d053      	beq.n	800284a <__aeabi_dmul+0x4ae>
 80027a2:	1d11      	adds	r1, r2, #4
 80027a4:	4291      	cmp	r1, r2
 80027a6:	4192      	sbcs	r2, r2
 80027a8:	4252      	negs	r2, r2
 80027aa:	18a4      	adds	r4, r4, r2
 80027ac:	000a      	movs	r2, r1
 80027ae:	0223      	lsls	r3, r4, #8
 80027b0:	d54b      	bpl.n	800284a <__aeabi_dmul+0x4ae>
 80027b2:	2201      	movs	r2, #1
 80027b4:	2400      	movs	r4, #0
 80027b6:	2500      	movs	r5, #0
 80027b8:	e660      	b.n	800247c <__aeabi_dmul+0xe0>
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	031b      	lsls	r3, r3, #12
 80027be:	421c      	tst	r4, r3
 80027c0:	d009      	beq.n	80027d6 <__aeabi_dmul+0x43a>
 80027c2:	421e      	tst	r6, r3
 80027c4:	d107      	bne.n	80027d6 <__aeabi_dmul+0x43a>
 80027c6:	4333      	orrs	r3, r6
 80027c8:	031c      	lsls	r4, r3, #12
 80027ca:	4643      	mov	r3, r8
 80027cc:	0015      	movs	r5, r2
 80027ce:	0b24      	lsrs	r4, r4, #12
 80027d0:	4a25      	ldr	r2, [pc, #148]	; (8002868 <__aeabi_dmul+0x4cc>)
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	e652      	b.n	800247c <__aeabi_dmul+0xe0>
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	0312      	lsls	r2, r2, #12
 80027da:	4314      	orrs	r4, r2
 80027dc:	0324      	lsls	r4, r4, #12
 80027de:	4a22      	ldr	r2, [pc, #136]	; (8002868 <__aeabi_dmul+0x4cc>)
 80027e0:	0b24      	lsrs	r4, r4, #12
 80027e2:	9701      	str	r7, [sp, #4]
 80027e4:	e64a      	b.n	800247c <__aeabi_dmul+0xe0>
 80027e6:	f000 fd51 	bl	800328c <__clzsi2>
 80027ea:	0003      	movs	r3, r0
 80027ec:	001a      	movs	r2, r3
 80027ee:	3215      	adds	r2, #21
 80027f0:	3020      	adds	r0, #32
 80027f2:	2a1c      	cmp	r2, #28
 80027f4:	dc00      	bgt.n	80027f8 <__aeabi_dmul+0x45c>
 80027f6:	e684      	b.n	8002502 <__aeabi_dmul+0x166>
 80027f8:	4656      	mov	r6, sl
 80027fa:	3b08      	subs	r3, #8
 80027fc:	2200      	movs	r2, #0
 80027fe:	409e      	lsls	r6, r3
 8002800:	e689      	b.n	8002516 <__aeabi_dmul+0x17a>
 8002802:	f000 fd43 	bl	800328c <__clzsi2>
 8002806:	0001      	movs	r1, r0
 8002808:	0002      	movs	r2, r0
 800280a:	3115      	adds	r1, #21
 800280c:	3220      	adds	r2, #32
 800280e:	291c      	cmp	r1, #28
 8002810:	dc00      	bgt.n	8002814 <__aeabi_dmul+0x478>
 8002812:	e64e      	b.n	80024b2 <__aeabi_dmul+0x116>
 8002814:	0034      	movs	r4, r6
 8002816:	3808      	subs	r0, #8
 8002818:	2500      	movs	r5, #0
 800281a:	4084      	lsls	r4, r0
 800281c:	e653      	b.n	80024c6 <__aeabi_dmul+0x12a>
 800281e:	9b00      	ldr	r3, [sp, #0]
 8002820:	469c      	mov	ip, r3
 8002822:	e741      	b.n	80026a8 <__aeabi_dmul+0x30c>
 8002824:	4912      	ldr	r1, [pc, #72]	; (8002870 <__aeabi_dmul+0x4d4>)
 8002826:	0022      	movs	r2, r4
 8002828:	4461      	add	r1, ip
 800282a:	002e      	movs	r6, r5
 800282c:	408d      	lsls	r5, r1
 800282e:	408a      	lsls	r2, r1
 8002830:	40c6      	lsrs	r6, r0
 8002832:	1e69      	subs	r1, r5, #1
 8002834:	418d      	sbcs	r5, r1
 8002836:	4332      	orrs	r2, r6
 8002838:	432a      	orrs	r2, r5
 800283a:	40c4      	lsrs	r4, r0
 800283c:	0753      	lsls	r3, r2, #29
 800283e:	d0b6      	beq.n	80027ae <__aeabi_dmul+0x412>
 8002840:	210f      	movs	r1, #15
 8002842:	4011      	ands	r1, r2
 8002844:	2904      	cmp	r1, #4
 8002846:	d1ac      	bne.n	80027a2 <__aeabi_dmul+0x406>
 8002848:	e7b1      	b.n	80027ae <__aeabi_dmul+0x412>
 800284a:	0765      	lsls	r5, r4, #29
 800284c:	0264      	lsls	r4, r4, #9
 800284e:	0b24      	lsrs	r4, r4, #12
 8002850:	08d2      	lsrs	r2, r2, #3
 8002852:	4315      	orrs	r5, r2
 8002854:	2200      	movs	r2, #0
 8002856:	e611      	b.n	800247c <__aeabi_dmul+0xe0>
 8002858:	2280      	movs	r2, #128	; 0x80
 800285a:	0312      	lsls	r2, r2, #12
 800285c:	4314      	orrs	r4, r2
 800285e:	0324      	lsls	r4, r4, #12
 8002860:	4a01      	ldr	r2, [pc, #4]	; (8002868 <__aeabi_dmul+0x4cc>)
 8002862:	0b24      	lsrs	r4, r4, #12
 8002864:	e60a      	b.n	800247c <__aeabi_dmul+0xe0>
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	000007ff 	.word	0x000007ff
 800286c:	0000043e 	.word	0x0000043e
 8002870:	0000041e 	.word	0x0000041e

08002874 <__aeabi_dsub>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	4657      	mov	r7, sl
 8002878:	464e      	mov	r6, r9
 800287a:	4645      	mov	r5, r8
 800287c:	46de      	mov	lr, fp
 800287e:	0004      	movs	r4, r0
 8002880:	b5e0      	push	{r5, r6, r7, lr}
 8002882:	001f      	movs	r7, r3
 8002884:	0010      	movs	r0, r2
 8002886:	030b      	lsls	r3, r1, #12
 8002888:	0f62      	lsrs	r2, r4, #29
 800288a:	004e      	lsls	r6, r1, #1
 800288c:	0fcd      	lsrs	r5, r1, #31
 800288e:	0a5b      	lsrs	r3, r3, #9
 8002890:	0339      	lsls	r1, r7, #12
 8002892:	4313      	orrs	r3, r2
 8002894:	0a49      	lsrs	r1, r1, #9
 8002896:	00e2      	lsls	r2, r4, #3
 8002898:	0f44      	lsrs	r4, r0, #29
 800289a:	4321      	orrs	r1, r4
 800289c:	4cc2      	ldr	r4, [pc, #776]	; (8002ba8 <__aeabi_dsub+0x334>)
 800289e:	4691      	mov	r9, r2
 80028a0:	4692      	mov	sl, r2
 80028a2:	00c0      	lsls	r0, r0, #3
 80028a4:	007a      	lsls	r2, r7, #1
 80028a6:	4680      	mov	r8, r0
 80028a8:	0d76      	lsrs	r6, r6, #21
 80028aa:	0d52      	lsrs	r2, r2, #21
 80028ac:	0fff      	lsrs	r7, r7, #31
 80028ae:	42a2      	cmp	r2, r4
 80028b0:	d100      	bne.n	80028b4 <__aeabi_dsub+0x40>
 80028b2:	e0b4      	b.n	8002a1e <__aeabi_dsub+0x1aa>
 80028b4:	2401      	movs	r4, #1
 80028b6:	4067      	eors	r7, r4
 80028b8:	46bb      	mov	fp, r7
 80028ba:	42bd      	cmp	r5, r7
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x4c>
 80028be:	e088      	b.n	80029d2 <__aeabi_dsub+0x15e>
 80028c0:	1ab4      	subs	r4, r6, r2
 80028c2:	46a4      	mov	ip, r4
 80028c4:	2c00      	cmp	r4, #0
 80028c6:	dc00      	bgt.n	80028ca <__aeabi_dsub+0x56>
 80028c8:	e0b2      	b.n	8002a30 <__aeabi_dsub+0x1bc>
 80028ca:	2a00      	cmp	r2, #0
 80028cc:	d100      	bne.n	80028d0 <__aeabi_dsub+0x5c>
 80028ce:	e0c5      	b.n	8002a5c <__aeabi_dsub+0x1e8>
 80028d0:	4ab5      	ldr	r2, [pc, #724]	; (8002ba8 <__aeabi_dsub+0x334>)
 80028d2:	4296      	cmp	r6, r2
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x64>
 80028d6:	e28b      	b.n	8002df0 <__aeabi_dsub+0x57c>
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	0412      	lsls	r2, r2, #16
 80028dc:	4311      	orrs	r1, r2
 80028de:	4662      	mov	r2, ip
 80028e0:	2a38      	cmp	r2, #56	; 0x38
 80028e2:	dd00      	ble.n	80028e6 <__aeabi_dsub+0x72>
 80028e4:	e1a1      	b.n	8002c2a <__aeabi_dsub+0x3b6>
 80028e6:	2a1f      	cmp	r2, #31
 80028e8:	dd00      	ble.n	80028ec <__aeabi_dsub+0x78>
 80028ea:	e216      	b.n	8002d1a <__aeabi_dsub+0x4a6>
 80028ec:	2720      	movs	r7, #32
 80028ee:	000c      	movs	r4, r1
 80028f0:	1abf      	subs	r7, r7, r2
 80028f2:	40bc      	lsls	r4, r7
 80028f4:	0002      	movs	r2, r0
 80028f6:	46a0      	mov	r8, r4
 80028f8:	4664      	mov	r4, ip
 80028fa:	40b8      	lsls	r0, r7
 80028fc:	40e2      	lsrs	r2, r4
 80028fe:	4644      	mov	r4, r8
 8002900:	4314      	orrs	r4, r2
 8002902:	0002      	movs	r2, r0
 8002904:	1e50      	subs	r0, r2, #1
 8002906:	4182      	sbcs	r2, r0
 8002908:	4660      	mov	r0, ip
 800290a:	40c1      	lsrs	r1, r0
 800290c:	4322      	orrs	r2, r4
 800290e:	1a5b      	subs	r3, r3, r1
 8002910:	4649      	mov	r1, r9
 8002912:	1a8c      	subs	r4, r1, r2
 8002914:	45a1      	cmp	r9, r4
 8002916:	4192      	sbcs	r2, r2
 8002918:	4252      	negs	r2, r2
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	4698      	mov	r8, r3
 800291e:	4643      	mov	r3, r8
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	d400      	bmi.n	8002926 <__aeabi_dsub+0xb2>
 8002924:	e117      	b.n	8002b56 <__aeabi_dsub+0x2e2>
 8002926:	4643      	mov	r3, r8
 8002928:	025b      	lsls	r3, r3, #9
 800292a:	0a5b      	lsrs	r3, r3, #9
 800292c:	4698      	mov	r8, r3
 800292e:	4643      	mov	r3, r8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d100      	bne.n	8002936 <__aeabi_dsub+0xc2>
 8002934:	e16c      	b.n	8002c10 <__aeabi_dsub+0x39c>
 8002936:	4640      	mov	r0, r8
 8002938:	f000 fca8 	bl	800328c <__clzsi2>
 800293c:	0002      	movs	r2, r0
 800293e:	3a08      	subs	r2, #8
 8002940:	2120      	movs	r1, #32
 8002942:	0020      	movs	r0, r4
 8002944:	4643      	mov	r3, r8
 8002946:	1a89      	subs	r1, r1, r2
 8002948:	4093      	lsls	r3, r2
 800294a:	40c8      	lsrs	r0, r1
 800294c:	4094      	lsls	r4, r2
 800294e:	4303      	orrs	r3, r0
 8002950:	4296      	cmp	r6, r2
 8002952:	dd00      	ble.n	8002956 <__aeabi_dsub+0xe2>
 8002954:	e157      	b.n	8002c06 <__aeabi_dsub+0x392>
 8002956:	1b96      	subs	r6, r2, r6
 8002958:	1c71      	adds	r1, r6, #1
 800295a:	291f      	cmp	r1, #31
 800295c:	dd00      	ble.n	8002960 <__aeabi_dsub+0xec>
 800295e:	e1cb      	b.n	8002cf8 <__aeabi_dsub+0x484>
 8002960:	2220      	movs	r2, #32
 8002962:	0018      	movs	r0, r3
 8002964:	0026      	movs	r6, r4
 8002966:	1a52      	subs	r2, r2, r1
 8002968:	4094      	lsls	r4, r2
 800296a:	4090      	lsls	r0, r2
 800296c:	40ce      	lsrs	r6, r1
 800296e:	40cb      	lsrs	r3, r1
 8002970:	1e62      	subs	r2, r4, #1
 8002972:	4194      	sbcs	r4, r2
 8002974:	4330      	orrs	r0, r6
 8002976:	4698      	mov	r8, r3
 8002978:	2600      	movs	r6, #0
 800297a:	4304      	orrs	r4, r0
 800297c:	0763      	lsls	r3, r4, #29
 800297e:	d009      	beq.n	8002994 <__aeabi_dsub+0x120>
 8002980:	230f      	movs	r3, #15
 8002982:	4023      	ands	r3, r4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d005      	beq.n	8002994 <__aeabi_dsub+0x120>
 8002988:	1d23      	adds	r3, r4, #4
 800298a:	42a3      	cmp	r3, r4
 800298c:	41a4      	sbcs	r4, r4
 800298e:	4264      	negs	r4, r4
 8002990:	44a0      	add	r8, r4
 8002992:	001c      	movs	r4, r3
 8002994:	4643      	mov	r3, r8
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	d400      	bmi.n	800299c <__aeabi_dsub+0x128>
 800299a:	e0df      	b.n	8002b5c <__aeabi_dsub+0x2e8>
 800299c:	4b82      	ldr	r3, [pc, #520]	; (8002ba8 <__aeabi_dsub+0x334>)
 800299e:	3601      	adds	r6, #1
 80029a0:	429e      	cmp	r6, r3
 80029a2:	d100      	bne.n	80029a6 <__aeabi_dsub+0x132>
 80029a4:	e0fb      	b.n	8002b9e <__aeabi_dsub+0x32a>
 80029a6:	4642      	mov	r2, r8
 80029a8:	4b80      	ldr	r3, [pc, #512]	; (8002bac <__aeabi_dsub+0x338>)
 80029aa:	08e4      	lsrs	r4, r4, #3
 80029ac:	401a      	ands	r2, r3
 80029ae:	0013      	movs	r3, r2
 80029b0:	0571      	lsls	r1, r6, #21
 80029b2:	0752      	lsls	r2, r2, #29
 80029b4:	025b      	lsls	r3, r3, #9
 80029b6:	4322      	orrs	r2, r4
 80029b8:	0b1b      	lsrs	r3, r3, #12
 80029ba:	0d49      	lsrs	r1, r1, #21
 80029bc:	0509      	lsls	r1, r1, #20
 80029be:	07ed      	lsls	r5, r5, #31
 80029c0:	4319      	orrs	r1, r3
 80029c2:	4329      	orrs	r1, r5
 80029c4:	0010      	movs	r0, r2
 80029c6:	bcf0      	pop	{r4, r5, r6, r7}
 80029c8:	46bb      	mov	fp, r7
 80029ca:	46b2      	mov	sl, r6
 80029cc:	46a9      	mov	r9, r5
 80029ce:	46a0      	mov	r8, r4
 80029d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029d2:	1ab4      	subs	r4, r6, r2
 80029d4:	46a4      	mov	ip, r4
 80029d6:	2c00      	cmp	r4, #0
 80029d8:	dd58      	ble.n	8002a8c <__aeabi_dsub+0x218>
 80029da:	2a00      	cmp	r2, #0
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x16c>
 80029de:	e09e      	b.n	8002b1e <__aeabi_dsub+0x2aa>
 80029e0:	4a71      	ldr	r2, [pc, #452]	; (8002ba8 <__aeabi_dsub+0x334>)
 80029e2:	4296      	cmp	r6, r2
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x174>
 80029e6:	e13b      	b.n	8002c60 <__aeabi_dsub+0x3ec>
 80029e8:	2280      	movs	r2, #128	; 0x80
 80029ea:	0412      	lsls	r2, r2, #16
 80029ec:	4311      	orrs	r1, r2
 80029ee:	4662      	mov	r2, ip
 80029f0:	2a38      	cmp	r2, #56	; 0x38
 80029f2:	dd00      	ble.n	80029f6 <__aeabi_dsub+0x182>
 80029f4:	e0c1      	b.n	8002b7a <__aeabi_dsub+0x306>
 80029f6:	2a1f      	cmp	r2, #31
 80029f8:	dc00      	bgt.n	80029fc <__aeabi_dsub+0x188>
 80029fa:	e1bb      	b.n	8002d74 <__aeabi_dsub+0x500>
 80029fc:	000c      	movs	r4, r1
 80029fe:	3a20      	subs	r2, #32
 8002a00:	40d4      	lsrs	r4, r2
 8002a02:	0022      	movs	r2, r4
 8002a04:	4664      	mov	r4, ip
 8002a06:	2c20      	cmp	r4, #32
 8002a08:	d004      	beq.n	8002a14 <__aeabi_dsub+0x1a0>
 8002a0a:	2740      	movs	r7, #64	; 0x40
 8002a0c:	1b3f      	subs	r7, r7, r4
 8002a0e:	40b9      	lsls	r1, r7
 8002a10:	4308      	orrs	r0, r1
 8002a12:	4680      	mov	r8, r0
 8002a14:	4644      	mov	r4, r8
 8002a16:	1e61      	subs	r1, r4, #1
 8002a18:	418c      	sbcs	r4, r1
 8002a1a:	4314      	orrs	r4, r2
 8002a1c:	e0b1      	b.n	8002b82 <__aeabi_dsub+0x30e>
 8002a1e:	000c      	movs	r4, r1
 8002a20:	4304      	orrs	r4, r0
 8002a22:	d02a      	beq.n	8002a7a <__aeabi_dsub+0x206>
 8002a24:	46bb      	mov	fp, r7
 8002a26:	42bd      	cmp	r5, r7
 8002a28:	d02d      	beq.n	8002a86 <__aeabi_dsub+0x212>
 8002a2a:	4c61      	ldr	r4, [pc, #388]	; (8002bb0 <__aeabi_dsub+0x33c>)
 8002a2c:	46a4      	mov	ip, r4
 8002a2e:	44b4      	add	ip, r6
 8002a30:	4664      	mov	r4, ip
 8002a32:	2c00      	cmp	r4, #0
 8002a34:	d05c      	beq.n	8002af0 <__aeabi_dsub+0x27c>
 8002a36:	1b94      	subs	r4, r2, r6
 8002a38:	46a4      	mov	ip, r4
 8002a3a:	2e00      	cmp	r6, #0
 8002a3c:	d000      	beq.n	8002a40 <__aeabi_dsub+0x1cc>
 8002a3e:	e115      	b.n	8002c6c <__aeabi_dsub+0x3f8>
 8002a40:	464d      	mov	r5, r9
 8002a42:	431d      	orrs	r5, r3
 8002a44:	d100      	bne.n	8002a48 <__aeabi_dsub+0x1d4>
 8002a46:	e1c3      	b.n	8002dd0 <__aeabi_dsub+0x55c>
 8002a48:	1e65      	subs	r5, r4, #1
 8002a4a:	2c01      	cmp	r4, #1
 8002a4c:	d100      	bne.n	8002a50 <__aeabi_dsub+0x1dc>
 8002a4e:	e20c      	b.n	8002e6a <__aeabi_dsub+0x5f6>
 8002a50:	4e55      	ldr	r6, [pc, #340]	; (8002ba8 <__aeabi_dsub+0x334>)
 8002a52:	42b4      	cmp	r4, r6
 8002a54:	d100      	bne.n	8002a58 <__aeabi_dsub+0x1e4>
 8002a56:	e1f8      	b.n	8002e4a <__aeabi_dsub+0x5d6>
 8002a58:	46ac      	mov	ip, r5
 8002a5a:	e10e      	b.n	8002c7a <__aeabi_dsub+0x406>
 8002a5c:	000a      	movs	r2, r1
 8002a5e:	4302      	orrs	r2, r0
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x1f0>
 8002a62:	e136      	b.n	8002cd2 <__aeabi_dsub+0x45e>
 8002a64:	0022      	movs	r2, r4
 8002a66:	3a01      	subs	r2, #1
 8002a68:	2c01      	cmp	r4, #1
 8002a6a:	d100      	bne.n	8002a6e <__aeabi_dsub+0x1fa>
 8002a6c:	e1c6      	b.n	8002dfc <__aeabi_dsub+0x588>
 8002a6e:	4c4e      	ldr	r4, [pc, #312]	; (8002ba8 <__aeabi_dsub+0x334>)
 8002a70:	45a4      	cmp	ip, r4
 8002a72:	d100      	bne.n	8002a76 <__aeabi_dsub+0x202>
 8002a74:	e0f4      	b.n	8002c60 <__aeabi_dsub+0x3ec>
 8002a76:	4694      	mov	ip, r2
 8002a78:	e731      	b.n	80028de <__aeabi_dsub+0x6a>
 8002a7a:	2401      	movs	r4, #1
 8002a7c:	4067      	eors	r7, r4
 8002a7e:	46bb      	mov	fp, r7
 8002a80:	42bd      	cmp	r5, r7
 8002a82:	d000      	beq.n	8002a86 <__aeabi_dsub+0x212>
 8002a84:	e71c      	b.n	80028c0 <__aeabi_dsub+0x4c>
 8002a86:	4c4a      	ldr	r4, [pc, #296]	; (8002bb0 <__aeabi_dsub+0x33c>)
 8002a88:	46a4      	mov	ip, r4
 8002a8a:	44b4      	add	ip, r6
 8002a8c:	4664      	mov	r4, ip
 8002a8e:	2c00      	cmp	r4, #0
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x220>
 8002a92:	e0cf      	b.n	8002c34 <__aeabi_dsub+0x3c0>
 8002a94:	1b94      	subs	r4, r2, r6
 8002a96:	46a4      	mov	ip, r4
 8002a98:	2e00      	cmp	r6, #0
 8002a9a:	d100      	bne.n	8002a9e <__aeabi_dsub+0x22a>
 8002a9c:	e15c      	b.n	8002d58 <__aeabi_dsub+0x4e4>
 8002a9e:	4e42      	ldr	r6, [pc, #264]	; (8002ba8 <__aeabi_dsub+0x334>)
 8002aa0:	42b2      	cmp	r2, r6
 8002aa2:	d100      	bne.n	8002aa6 <__aeabi_dsub+0x232>
 8002aa4:	e1ec      	b.n	8002e80 <__aeabi_dsub+0x60c>
 8002aa6:	2680      	movs	r6, #128	; 0x80
 8002aa8:	0436      	lsls	r6, r6, #16
 8002aaa:	4333      	orrs	r3, r6
 8002aac:	4664      	mov	r4, ip
 8002aae:	2c38      	cmp	r4, #56	; 0x38
 8002ab0:	dd00      	ble.n	8002ab4 <__aeabi_dsub+0x240>
 8002ab2:	e1b3      	b.n	8002e1c <__aeabi_dsub+0x5a8>
 8002ab4:	2c1f      	cmp	r4, #31
 8002ab6:	dd00      	ble.n	8002aba <__aeabi_dsub+0x246>
 8002ab8:	e238      	b.n	8002f2c <__aeabi_dsub+0x6b8>
 8002aba:	2620      	movs	r6, #32
 8002abc:	1b36      	subs	r6, r6, r4
 8002abe:	001c      	movs	r4, r3
 8002ac0:	40b4      	lsls	r4, r6
 8002ac2:	464f      	mov	r7, r9
 8002ac4:	46a0      	mov	r8, r4
 8002ac6:	4664      	mov	r4, ip
 8002ac8:	40e7      	lsrs	r7, r4
 8002aca:	4644      	mov	r4, r8
 8002acc:	433c      	orrs	r4, r7
 8002ace:	464f      	mov	r7, r9
 8002ad0:	40b7      	lsls	r7, r6
 8002ad2:	003e      	movs	r6, r7
 8002ad4:	1e77      	subs	r7, r6, #1
 8002ad6:	41be      	sbcs	r6, r7
 8002ad8:	4334      	orrs	r4, r6
 8002ada:	4666      	mov	r6, ip
 8002adc:	40f3      	lsrs	r3, r6
 8002ade:	18c9      	adds	r1, r1, r3
 8002ae0:	1824      	adds	r4, r4, r0
 8002ae2:	4284      	cmp	r4, r0
 8002ae4:	419b      	sbcs	r3, r3
 8002ae6:	425b      	negs	r3, r3
 8002ae8:	4698      	mov	r8, r3
 8002aea:	0016      	movs	r6, r2
 8002aec:	4488      	add	r8, r1
 8002aee:	e04e      	b.n	8002b8e <__aeabi_dsub+0x31a>
 8002af0:	4a30      	ldr	r2, [pc, #192]	; (8002bb4 <__aeabi_dsub+0x340>)
 8002af2:	1c74      	adds	r4, r6, #1
 8002af4:	4214      	tst	r4, r2
 8002af6:	d000      	beq.n	8002afa <__aeabi_dsub+0x286>
 8002af8:	e0d6      	b.n	8002ca8 <__aeabi_dsub+0x434>
 8002afa:	464a      	mov	r2, r9
 8002afc:	431a      	orrs	r2, r3
 8002afe:	2e00      	cmp	r6, #0
 8002b00:	d000      	beq.n	8002b04 <__aeabi_dsub+0x290>
 8002b02:	e15b      	b.n	8002dbc <__aeabi_dsub+0x548>
 8002b04:	2a00      	cmp	r2, #0
 8002b06:	d100      	bne.n	8002b0a <__aeabi_dsub+0x296>
 8002b08:	e1a5      	b.n	8002e56 <__aeabi_dsub+0x5e2>
 8002b0a:	000a      	movs	r2, r1
 8002b0c:	4302      	orrs	r2, r0
 8002b0e:	d000      	beq.n	8002b12 <__aeabi_dsub+0x29e>
 8002b10:	e1bb      	b.n	8002e8a <__aeabi_dsub+0x616>
 8002b12:	464a      	mov	r2, r9
 8002b14:	0759      	lsls	r1, r3, #29
 8002b16:	08d2      	lsrs	r2, r2, #3
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	08db      	lsrs	r3, r3, #3
 8002b1c:	e027      	b.n	8002b6e <__aeabi_dsub+0x2fa>
 8002b1e:	000a      	movs	r2, r1
 8002b20:	4302      	orrs	r2, r0
 8002b22:	d100      	bne.n	8002b26 <__aeabi_dsub+0x2b2>
 8002b24:	e174      	b.n	8002e10 <__aeabi_dsub+0x59c>
 8002b26:	0022      	movs	r2, r4
 8002b28:	3a01      	subs	r2, #1
 8002b2a:	2c01      	cmp	r4, #1
 8002b2c:	d005      	beq.n	8002b3a <__aeabi_dsub+0x2c6>
 8002b2e:	4c1e      	ldr	r4, [pc, #120]	; (8002ba8 <__aeabi_dsub+0x334>)
 8002b30:	45a4      	cmp	ip, r4
 8002b32:	d100      	bne.n	8002b36 <__aeabi_dsub+0x2c2>
 8002b34:	e094      	b.n	8002c60 <__aeabi_dsub+0x3ec>
 8002b36:	4694      	mov	ip, r2
 8002b38:	e759      	b.n	80029ee <__aeabi_dsub+0x17a>
 8002b3a:	4448      	add	r0, r9
 8002b3c:	4548      	cmp	r0, r9
 8002b3e:	4192      	sbcs	r2, r2
 8002b40:	185b      	adds	r3, r3, r1
 8002b42:	4698      	mov	r8, r3
 8002b44:	0004      	movs	r4, r0
 8002b46:	4252      	negs	r2, r2
 8002b48:	4490      	add	r8, r2
 8002b4a:	4643      	mov	r3, r8
 8002b4c:	2602      	movs	r6, #2
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	d500      	bpl.n	8002b54 <__aeabi_dsub+0x2e0>
 8002b52:	e0c4      	b.n	8002cde <__aeabi_dsub+0x46a>
 8002b54:	3e01      	subs	r6, #1
 8002b56:	0763      	lsls	r3, r4, #29
 8002b58:	d000      	beq.n	8002b5c <__aeabi_dsub+0x2e8>
 8002b5a:	e711      	b.n	8002980 <__aeabi_dsub+0x10c>
 8002b5c:	4643      	mov	r3, r8
 8002b5e:	46b4      	mov	ip, r6
 8002b60:	0759      	lsls	r1, r3, #29
 8002b62:	08e2      	lsrs	r2, r4, #3
 8002b64:	430a      	orrs	r2, r1
 8002b66:	08db      	lsrs	r3, r3, #3
 8002b68:	490f      	ldr	r1, [pc, #60]	; (8002ba8 <__aeabi_dsub+0x334>)
 8002b6a:	458c      	cmp	ip, r1
 8002b6c:	d040      	beq.n	8002bf0 <__aeabi_dsub+0x37c>
 8002b6e:	4661      	mov	r1, ip
 8002b70:	031b      	lsls	r3, r3, #12
 8002b72:	0549      	lsls	r1, r1, #21
 8002b74:	0b1b      	lsrs	r3, r3, #12
 8002b76:	0d49      	lsrs	r1, r1, #21
 8002b78:	e720      	b.n	80029bc <__aeabi_dsub+0x148>
 8002b7a:	4301      	orrs	r1, r0
 8002b7c:	000c      	movs	r4, r1
 8002b7e:	1e61      	subs	r1, r4, #1
 8002b80:	418c      	sbcs	r4, r1
 8002b82:	444c      	add	r4, r9
 8002b84:	454c      	cmp	r4, r9
 8002b86:	4192      	sbcs	r2, r2
 8002b88:	4252      	negs	r2, r2
 8002b8a:	4690      	mov	r8, r2
 8002b8c:	4498      	add	r8, r3
 8002b8e:	4643      	mov	r3, r8
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	d5e0      	bpl.n	8002b56 <__aeabi_dsub+0x2e2>
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <__aeabi_dsub+0x334>)
 8002b96:	3601      	adds	r6, #1
 8002b98:	429e      	cmp	r6, r3
 8002b9a:	d000      	beq.n	8002b9e <__aeabi_dsub+0x32a>
 8002b9c:	e09f      	b.n	8002cde <__aeabi_dsub+0x46a>
 8002b9e:	0031      	movs	r1, r6
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	e70a      	b.n	80029bc <__aeabi_dsub+0x148>
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	000007ff 	.word	0x000007ff
 8002bac:	ff7fffff 	.word	0xff7fffff
 8002bb0:	fffff801 	.word	0xfffff801
 8002bb4:	000007fe 	.word	0x000007fe
 8002bb8:	2a00      	cmp	r2, #0
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x34a>
 8002bbc:	e160      	b.n	8002e80 <__aeabi_dsub+0x60c>
 8002bbe:	000a      	movs	r2, r1
 8002bc0:	4302      	orrs	r2, r0
 8002bc2:	d04d      	beq.n	8002c60 <__aeabi_dsub+0x3ec>
 8002bc4:	464a      	mov	r2, r9
 8002bc6:	075c      	lsls	r4, r3, #29
 8002bc8:	08d2      	lsrs	r2, r2, #3
 8002bca:	4322      	orrs	r2, r4
 8002bcc:	2480      	movs	r4, #128	; 0x80
 8002bce:	08db      	lsrs	r3, r3, #3
 8002bd0:	0324      	lsls	r4, r4, #12
 8002bd2:	4223      	tst	r3, r4
 8002bd4:	d007      	beq.n	8002be6 <__aeabi_dsub+0x372>
 8002bd6:	08ce      	lsrs	r6, r1, #3
 8002bd8:	4226      	tst	r6, r4
 8002bda:	d104      	bne.n	8002be6 <__aeabi_dsub+0x372>
 8002bdc:	465d      	mov	r5, fp
 8002bde:	0033      	movs	r3, r6
 8002be0:	08c2      	lsrs	r2, r0, #3
 8002be2:	0749      	lsls	r1, r1, #29
 8002be4:	430a      	orrs	r2, r1
 8002be6:	0f51      	lsrs	r1, r2, #29
 8002be8:	00d2      	lsls	r2, r2, #3
 8002bea:	08d2      	lsrs	r2, r2, #3
 8002bec:	0749      	lsls	r1, r1, #29
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	0011      	movs	r1, r2
 8002bf2:	4319      	orrs	r1, r3
 8002bf4:	d100      	bne.n	8002bf8 <__aeabi_dsub+0x384>
 8002bf6:	e1c8      	b.n	8002f8a <__aeabi_dsub+0x716>
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	0309      	lsls	r1, r1, #12
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	031b      	lsls	r3, r3, #12
 8002c00:	49d5      	ldr	r1, [pc, #852]	; (8002f58 <__aeabi_dsub+0x6e4>)
 8002c02:	0b1b      	lsrs	r3, r3, #12
 8002c04:	e6da      	b.n	80029bc <__aeabi_dsub+0x148>
 8002c06:	49d5      	ldr	r1, [pc, #852]	; (8002f5c <__aeabi_dsub+0x6e8>)
 8002c08:	1ab6      	subs	r6, r6, r2
 8002c0a:	400b      	ands	r3, r1
 8002c0c:	4698      	mov	r8, r3
 8002c0e:	e6b5      	b.n	800297c <__aeabi_dsub+0x108>
 8002c10:	0020      	movs	r0, r4
 8002c12:	f000 fb3b 	bl	800328c <__clzsi2>
 8002c16:	0002      	movs	r2, r0
 8002c18:	3218      	adds	r2, #24
 8002c1a:	2a1f      	cmp	r2, #31
 8002c1c:	dc00      	bgt.n	8002c20 <__aeabi_dsub+0x3ac>
 8002c1e:	e68f      	b.n	8002940 <__aeabi_dsub+0xcc>
 8002c20:	0023      	movs	r3, r4
 8002c22:	3808      	subs	r0, #8
 8002c24:	4083      	lsls	r3, r0
 8002c26:	2400      	movs	r4, #0
 8002c28:	e692      	b.n	8002950 <__aeabi_dsub+0xdc>
 8002c2a:	4308      	orrs	r0, r1
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	1e50      	subs	r0, r2, #1
 8002c30:	4182      	sbcs	r2, r0
 8002c32:	e66d      	b.n	8002910 <__aeabi_dsub+0x9c>
 8002c34:	4cca      	ldr	r4, [pc, #808]	; (8002f60 <__aeabi_dsub+0x6ec>)
 8002c36:	1c72      	adds	r2, r6, #1
 8002c38:	4222      	tst	r2, r4
 8002c3a:	d000      	beq.n	8002c3e <__aeabi_dsub+0x3ca>
 8002c3c:	e0ad      	b.n	8002d9a <__aeabi_dsub+0x526>
 8002c3e:	464a      	mov	r2, r9
 8002c40:	431a      	orrs	r2, r3
 8002c42:	2e00      	cmp	r6, #0
 8002c44:	d1b8      	bne.n	8002bb8 <__aeabi_dsub+0x344>
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x3d8>
 8002c4a:	e158      	b.n	8002efe <__aeabi_dsub+0x68a>
 8002c4c:	000a      	movs	r2, r1
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	d000      	beq.n	8002c54 <__aeabi_dsub+0x3e0>
 8002c52:	e159      	b.n	8002f08 <__aeabi_dsub+0x694>
 8002c54:	464a      	mov	r2, r9
 8002c56:	0759      	lsls	r1, r3, #29
 8002c58:	08d2      	lsrs	r2, r2, #3
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	08db      	lsrs	r3, r3, #3
 8002c5e:	e786      	b.n	8002b6e <__aeabi_dsub+0x2fa>
 8002c60:	464a      	mov	r2, r9
 8002c62:	0759      	lsls	r1, r3, #29
 8002c64:	08d2      	lsrs	r2, r2, #3
 8002c66:	430a      	orrs	r2, r1
 8002c68:	08db      	lsrs	r3, r3, #3
 8002c6a:	e7c1      	b.n	8002bf0 <__aeabi_dsub+0x37c>
 8002c6c:	4dba      	ldr	r5, [pc, #744]	; (8002f58 <__aeabi_dsub+0x6e4>)
 8002c6e:	42aa      	cmp	r2, r5
 8002c70:	d100      	bne.n	8002c74 <__aeabi_dsub+0x400>
 8002c72:	e11e      	b.n	8002eb2 <__aeabi_dsub+0x63e>
 8002c74:	2580      	movs	r5, #128	; 0x80
 8002c76:	042d      	lsls	r5, r5, #16
 8002c78:	432b      	orrs	r3, r5
 8002c7a:	4664      	mov	r4, ip
 8002c7c:	2c38      	cmp	r4, #56	; 0x38
 8002c7e:	dc5d      	bgt.n	8002d3c <__aeabi_dsub+0x4c8>
 8002c80:	2c1f      	cmp	r4, #31
 8002c82:	dd00      	ble.n	8002c86 <__aeabi_dsub+0x412>
 8002c84:	e0d0      	b.n	8002e28 <__aeabi_dsub+0x5b4>
 8002c86:	2520      	movs	r5, #32
 8002c88:	4667      	mov	r7, ip
 8002c8a:	1b2d      	subs	r5, r5, r4
 8002c8c:	464e      	mov	r6, r9
 8002c8e:	001c      	movs	r4, r3
 8002c90:	40fe      	lsrs	r6, r7
 8002c92:	40ac      	lsls	r4, r5
 8002c94:	4334      	orrs	r4, r6
 8002c96:	464e      	mov	r6, r9
 8002c98:	40ae      	lsls	r6, r5
 8002c9a:	0035      	movs	r5, r6
 8002c9c:	40fb      	lsrs	r3, r7
 8002c9e:	1e6e      	subs	r6, r5, #1
 8002ca0:	41b5      	sbcs	r5, r6
 8002ca2:	1ac9      	subs	r1, r1, r3
 8002ca4:	432c      	orrs	r4, r5
 8002ca6:	e04e      	b.n	8002d46 <__aeabi_dsub+0x4d2>
 8002ca8:	464a      	mov	r2, r9
 8002caa:	1a14      	subs	r4, r2, r0
 8002cac:	45a1      	cmp	r9, r4
 8002cae:	4192      	sbcs	r2, r2
 8002cb0:	4252      	negs	r2, r2
 8002cb2:	4690      	mov	r8, r2
 8002cb4:	1a5f      	subs	r7, r3, r1
 8002cb6:	003a      	movs	r2, r7
 8002cb8:	4647      	mov	r7, r8
 8002cba:	1bd2      	subs	r2, r2, r7
 8002cbc:	4690      	mov	r8, r2
 8002cbe:	0212      	lsls	r2, r2, #8
 8002cc0:	d500      	bpl.n	8002cc4 <__aeabi_dsub+0x450>
 8002cc2:	e08b      	b.n	8002ddc <__aeabi_dsub+0x568>
 8002cc4:	4642      	mov	r2, r8
 8002cc6:	4322      	orrs	r2, r4
 8002cc8:	d000      	beq.n	8002ccc <__aeabi_dsub+0x458>
 8002cca:	e630      	b.n	800292e <__aeabi_dsub+0xba>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	2500      	movs	r5, #0
 8002cd0:	e74d      	b.n	8002b6e <__aeabi_dsub+0x2fa>
 8002cd2:	464a      	mov	r2, r9
 8002cd4:	0759      	lsls	r1, r3, #29
 8002cd6:	08d2      	lsrs	r2, r2, #3
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	08db      	lsrs	r3, r3, #3
 8002cdc:	e744      	b.n	8002b68 <__aeabi_dsub+0x2f4>
 8002cde:	4642      	mov	r2, r8
 8002ce0:	4b9e      	ldr	r3, [pc, #632]	; (8002f5c <__aeabi_dsub+0x6e8>)
 8002ce2:	0861      	lsrs	r1, r4, #1
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	0013      	movs	r3, r2
 8002ce8:	2201      	movs	r2, #1
 8002cea:	4014      	ands	r4, r2
 8002cec:	430c      	orrs	r4, r1
 8002cee:	07da      	lsls	r2, r3, #31
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	4698      	mov	r8, r3
 8002cf4:	4314      	orrs	r4, r2
 8002cf6:	e641      	b.n	800297c <__aeabi_dsub+0x108>
 8002cf8:	001a      	movs	r2, r3
 8002cfa:	3e1f      	subs	r6, #31
 8002cfc:	40f2      	lsrs	r2, r6
 8002cfe:	0016      	movs	r6, r2
 8002d00:	2920      	cmp	r1, #32
 8002d02:	d003      	beq.n	8002d0c <__aeabi_dsub+0x498>
 8002d04:	2240      	movs	r2, #64	; 0x40
 8002d06:	1a51      	subs	r1, r2, r1
 8002d08:	408b      	lsls	r3, r1
 8002d0a:	431c      	orrs	r4, r3
 8002d0c:	1e62      	subs	r2, r4, #1
 8002d0e:	4194      	sbcs	r4, r2
 8002d10:	2300      	movs	r3, #0
 8002d12:	4334      	orrs	r4, r6
 8002d14:	4698      	mov	r8, r3
 8002d16:	2600      	movs	r6, #0
 8002d18:	e71d      	b.n	8002b56 <__aeabi_dsub+0x2e2>
 8002d1a:	000c      	movs	r4, r1
 8002d1c:	3a20      	subs	r2, #32
 8002d1e:	40d4      	lsrs	r4, r2
 8002d20:	0022      	movs	r2, r4
 8002d22:	4664      	mov	r4, ip
 8002d24:	2c20      	cmp	r4, #32
 8002d26:	d004      	beq.n	8002d32 <__aeabi_dsub+0x4be>
 8002d28:	2740      	movs	r7, #64	; 0x40
 8002d2a:	1b3f      	subs	r7, r7, r4
 8002d2c:	40b9      	lsls	r1, r7
 8002d2e:	4308      	orrs	r0, r1
 8002d30:	4680      	mov	r8, r0
 8002d32:	4644      	mov	r4, r8
 8002d34:	1e61      	subs	r1, r4, #1
 8002d36:	418c      	sbcs	r4, r1
 8002d38:	4322      	orrs	r2, r4
 8002d3a:	e5e9      	b.n	8002910 <__aeabi_dsub+0x9c>
 8002d3c:	464c      	mov	r4, r9
 8002d3e:	4323      	orrs	r3, r4
 8002d40:	001c      	movs	r4, r3
 8002d42:	1e63      	subs	r3, r4, #1
 8002d44:	419c      	sbcs	r4, r3
 8002d46:	1b04      	subs	r4, r0, r4
 8002d48:	42a0      	cmp	r0, r4
 8002d4a:	419b      	sbcs	r3, r3
 8002d4c:	425b      	negs	r3, r3
 8002d4e:	1acb      	subs	r3, r1, r3
 8002d50:	4698      	mov	r8, r3
 8002d52:	465d      	mov	r5, fp
 8002d54:	0016      	movs	r6, r2
 8002d56:	e5e2      	b.n	800291e <__aeabi_dsub+0xaa>
 8002d58:	464e      	mov	r6, r9
 8002d5a:	431e      	orrs	r6, r3
 8002d5c:	d100      	bne.n	8002d60 <__aeabi_dsub+0x4ec>
 8002d5e:	e0ae      	b.n	8002ebe <__aeabi_dsub+0x64a>
 8002d60:	1e66      	subs	r6, r4, #1
 8002d62:	2c01      	cmp	r4, #1
 8002d64:	d100      	bne.n	8002d68 <__aeabi_dsub+0x4f4>
 8002d66:	e0fd      	b.n	8002f64 <__aeabi_dsub+0x6f0>
 8002d68:	4f7b      	ldr	r7, [pc, #492]	; (8002f58 <__aeabi_dsub+0x6e4>)
 8002d6a:	42bc      	cmp	r4, r7
 8002d6c:	d100      	bne.n	8002d70 <__aeabi_dsub+0x4fc>
 8002d6e:	e107      	b.n	8002f80 <__aeabi_dsub+0x70c>
 8002d70:	46b4      	mov	ip, r6
 8002d72:	e69b      	b.n	8002aac <__aeabi_dsub+0x238>
 8002d74:	4664      	mov	r4, ip
 8002d76:	2220      	movs	r2, #32
 8002d78:	1b12      	subs	r2, r2, r4
 8002d7a:	000c      	movs	r4, r1
 8002d7c:	4094      	lsls	r4, r2
 8002d7e:	0007      	movs	r7, r0
 8002d80:	4090      	lsls	r0, r2
 8002d82:	46a0      	mov	r8, r4
 8002d84:	4664      	mov	r4, ip
 8002d86:	1e42      	subs	r2, r0, #1
 8002d88:	4190      	sbcs	r0, r2
 8002d8a:	4662      	mov	r2, ip
 8002d8c:	40e7      	lsrs	r7, r4
 8002d8e:	4644      	mov	r4, r8
 8002d90:	40d1      	lsrs	r1, r2
 8002d92:	433c      	orrs	r4, r7
 8002d94:	4304      	orrs	r4, r0
 8002d96:	185b      	adds	r3, r3, r1
 8002d98:	e6f3      	b.n	8002b82 <__aeabi_dsub+0x30e>
 8002d9a:	4c6f      	ldr	r4, [pc, #444]	; (8002f58 <__aeabi_dsub+0x6e4>)
 8002d9c:	42a2      	cmp	r2, r4
 8002d9e:	d100      	bne.n	8002da2 <__aeabi_dsub+0x52e>
 8002da0:	e0d5      	b.n	8002f4e <__aeabi_dsub+0x6da>
 8002da2:	4448      	add	r0, r9
 8002da4:	185b      	adds	r3, r3, r1
 8002da6:	4548      	cmp	r0, r9
 8002da8:	4189      	sbcs	r1, r1
 8002daa:	4249      	negs	r1, r1
 8002dac:	185b      	adds	r3, r3, r1
 8002dae:	07dc      	lsls	r4, r3, #31
 8002db0:	0840      	lsrs	r0, r0, #1
 8002db2:	085b      	lsrs	r3, r3, #1
 8002db4:	4698      	mov	r8, r3
 8002db6:	0016      	movs	r6, r2
 8002db8:	4304      	orrs	r4, r0
 8002dba:	e6cc      	b.n	8002b56 <__aeabi_dsub+0x2e2>
 8002dbc:	2a00      	cmp	r2, #0
 8002dbe:	d000      	beq.n	8002dc2 <__aeabi_dsub+0x54e>
 8002dc0:	e082      	b.n	8002ec8 <__aeabi_dsub+0x654>
 8002dc2:	000a      	movs	r2, r1
 8002dc4:	4302      	orrs	r2, r0
 8002dc6:	d140      	bne.n	8002e4a <__aeabi_dsub+0x5d6>
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	2500      	movs	r5, #0
 8002dcc:	031b      	lsls	r3, r3, #12
 8002dce:	e713      	b.n	8002bf8 <__aeabi_dsub+0x384>
 8002dd0:	074b      	lsls	r3, r1, #29
 8002dd2:	08c2      	lsrs	r2, r0, #3
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	465d      	mov	r5, fp
 8002dd8:	08cb      	lsrs	r3, r1, #3
 8002dda:	e6c5      	b.n	8002b68 <__aeabi_dsub+0x2f4>
 8002ddc:	464a      	mov	r2, r9
 8002dde:	1a84      	subs	r4, r0, r2
 8002de0:	42a0      	cmp	r0, r4
 8002de2:	4192      	sbcs	r2, r2
 8002de4:	1acb      	subs	r3, r1, r3
 8002de6:	4252      	negs	r2, r2
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	4698      	mov	r8, r3
 8002dec:	465d      	mov	r5, fp
 8002dee:	e59e      	b.n	800292e <__aeabi_dsub+0xba>
 8002df0:	464a      	mov	r2, r9
 8002df2:	0759      	lsls	r1, r3, #29
 8002df4:	08d2      	lsrs	r2, r2, #3
 8002df6:	430a      	orrs	r2, r1
 8002df8:	08db      	lsrs	r3, r3, #3
 8002dfa:	e6f9      	b.n	8002bf0 <__aeabi_dsub+0x37c>
 8002dfc:	464a      	mov	r2, r9
 8002dfe:	1a14      	subs	r4, r2, r0
 8002e00:	45a1      	cmp	r9, r4
 8002e02:	4192      	sbcs	r2, r2
 8002e04:	1a5b      	subs	r3, r3, r1
 8002e06:	4252      	negs	r2, r2
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	4698      	mov	r8, r3
 8002e0c:	2601      	movs	r6, #1
 8002e0e:	e586      	b.n	800291e <__aeabi_dsub+0xaa>
 8002e10:	464a      	mov	r2, r9
 8002e12:	0759      	lsls	r1, r3, #29
 8002e14:	08d2      	lsrs	r2, r2, #3
 8002e16:	430a      	orrs	r2, r1
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	e6a5      	b.n	8002b68 <__aeabi_dsub+0x2f4>
 8002e1c:	464c      	mov	r4, r9
 8002e1e:	4323      	orrs	r3, r4
 8002e20:	001c      	movs	r4, r3
 8002e22:	1e63      	subs	r3, r4, #1
 8002e24:	419c      	sbcs	r4, r3
 8002e26:	e65b      	b.n	8002ae0 <__aeabi_dsub+0x26c>
 8002e28:	4665      	mov	r5, ip
 8002e2a:	001e      	movs	r6, r3
 8002e2c:	3d20      	subs	r5, #32
 8002e2e:	40ee      	lsrs	r6, r5
 8002e30:	2c20      	cmp	r4, #32
 8002e32:	d005      	beq.n	8002e40 <__aeabi_dsub+0x5cc>
 8002e34:	2540      	movs	r5, #64	; 0x40
 8002e36:	1b2d      	subs	r5, r5, r4
 8002e38:	40ab      	lsls	r3, r5
 8002e3a:	464c      	mov	r4, r9
 8002e3c:	431c      	orrs	r4, r3
 8002e3e:	46a2      	mov	sl, r4
 8002e40:	4654      	mov	r4, sl
 8002e42:	1e63      	subs	r3, r4, #1
 8002e44:	419c      	sbcs	r4, r3
 8002e46:	4334      	orrs	r4, r6
 8002e48:	e77d      	b.n	8002d46 <__aeabi_dsub+0x4d2>
 8002e4a:	074b      	lsls	r3, r1, #29
 8002e4c:	08c2      	lsrs	r2, r0, #3
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	465d      	mov	r5, fp
 8002e52:	08cb      	lsrs	r3, r1, #3
 8002e54:	e6cc      	b.n	8002bf0 <__aeabi_dsub+0x37c>
 8002e56:	000a      	movs	r2, r1
 8002e58:	4302      	orrs	r2, r0
 8002e5a:	d100      	bne.n	8002e5e <__aeabi_dsub+0x5ea>
 8002e5c:	e736      	b.n	8002ccc <__aeabi_dsub+0x458>
 8002e5e:	074b      	lsls	r3, r1, #29
 8002e60:	08c2      	lsrs	r2, r0, #3
 8002e62:	431a      	orrs	r2, r3
 8002e64:	465d      	mov	r5, fp
 8002e66:	08cb      	lsrs	r3, r1, #3
 8002e68:	e681      	b.n	8002b6e <__aeabi_dsub+0x2fa>
 8002e6a:	464a      	mov	r2, r9
 8002e6c:	1a84      	subs	r4, r0, r2
 8002e6e:	42a0      	cmp	r0, r4
 8002e70:	4192      	sbcs	r2, r2
 8002e72:	1acb      	subs	r3, r1, r3
 8002e74:	4252      	negs	r2, r2
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	4698      	mov	r8, r3
 8002e7a:	465d      	mov	r5, fp
 8002e7c:	2601      	movs	r6, #1
 8002e7e:	e54e      	b.n	800291e <__aeabi_dsub+0xaa>
 8002e80:	074b      	lsls	r3, r1, #29
 8002e82:	08c2      	lsrs	r2, r0, #3
 8002e84:	431a      	orrs	r2, r3
 8002e86:	08cb      	lsrs	r3, r1, #3
 8002e88:	e6b2      	b.n	8002bf0 <__aeabi_dsub+0x37c>
 8002e8a:	464a      	mov	r2, r9
 8002e8c:	1a14      	subs	r4, r2, r0
 8002e8e:	45a1      	cmp	r9, r4
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	1a5f      	subs	r7, r3, r1
 8002e94:	4252      	negs	r2, r2
 8002e96:	1aba      	subs	r2, r7, r2
 8002e98:	4690      	mov	r8, r2
 8002e9a:	0212      	lsls	r2, r2, #8
 8002e9c:	d56b      	bpl.n	8002f76 <__aeabi_dsub+0x702>
 8002e9e:	464a      	mov	r2, r9
 8002ea0:	1a84      	subs	r4, r0, r2
 8002ea2:	42a0      	cmp	r0, r4
 8002ea4:	4192      	sbcs	r2, r2
 8002ea6:	1acb      	subs	r3, r1, r3
 8002ea8:	4252      	negs	r2, r2
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	4698      	mov	r8, r3
 8002eae:	465d      	mov	r5, fp
 8002eb0:	e564      	b.n	800297c <__aeabi_dsub+0x108>
 8002eb2:	074b      	lsls	r3, r1, #29
 8002eb4:	08c2      	lsrs	r2, r0, #3
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	465d      	mov	r5, fp
 8002eba:	08cb      	lsrs	r3, r1, #3
 8002ebc:	e698      	b.n	8002bf0 <__aeabi_dsub+0x37c>
 8002ebe:	074b      	lsls	r3, r1, #29
 8002ec0:	08c2      	lsrs	r2, r0, #3
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	08cb      	lsrs	r3, r1, #3
 8002ec6:	e64f      	b.n	8002b68 <__aeabi_dsub+0x2f4>
 8002ec8:	000a      	movs	r2, r1
 8002eca:	4302      	orrs	r2, r0
 8002ecc:	d090      	beq.n	8002df0 <__aeabi_dsub+0x57c>
 8002ece:	464a      	mov	r2, r9
 8002ed0:	075c      	lsls	r4, r3, #29
 8002ed2:	08d2      	lsrs	r2, r2, #3
 8002ed4:	4314      	orrs	r4, r2
 8002ed6:	2280      	movs	r2, #128	; 0x80
 8002ed8:	08db      	lsrs	r3, r3, #3
 8002eda:	0312      	lsls	r2, r2, #12
 8002edc:	4213      	tst	r3, r2
 8002ede:	d008      	beq.n	8002ef2 <__aeabi_dsub+0x67e>
 8002ee0:	08ce      	lsrs	r6, r1, #3
 8002ee2:	4216      	tst	r6, r2
 8002ee4:	d105      	bne.n	8002ef2 <__aeabi_dsub+0x67e>
 8002ee6:	08c0      	lsrs	r0, r0, #3
 8002ee8:	0749      	lsls	r1, r1, #29
 8002eea:	4308      	orrs	r0, r1
 8002eec:	0004      	movs	r4, r0
 8002eee:	465d      	mov	r5, fp
 8002ef0:	0033      	movs	r3, r6
 8002ef2:	0f61      	lsrs	r1, r4, #29
 8002ef4:	00e2      	lsls	r2, r4, #3
 8002ef6:	0749      	lsls	r1, r1, #29
 8002ef8:	08d2      	lsrs	r2, r2, #3
 8002efa:	430a      	orrs	r2, r1
 8002efc:	e678      	b.n	8002bf0 <__aeabi_dsub+0x37c>
 8002efe:	074b      	lsls	r3, r1, #29
 8002f00:	08c2      	lsrs	r2, r0, #3
 8002f02:	431a      	orrs	r2, r3
 8002f04:	08cb      	lsrs	r3, r1, #3
 8002f06:	e632      	b.n	8002b6e <__aeabi_dsub+0x2fa>
 8002f08:	4448      	add	r0, r9
 8002f0a:	185b      	adds	r3, r3, r1
 8002f0c:	4548      	cmp	r0, r9
 8002f0e:	4192      	sbcs	r2, r2
 8002f10:	4698      	mov	r8, r3
 8002f12:	4252      	negs	r2, r2
 8002f14:	4490      	add	r8, r2
 8002f16:	4643      	mov	r3, r8
 8002f18:	0004      	movs	r4, r0
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	d400      	bmi.n	8002f20 <__aeabi_dsub+0x6ac>
 8002f1e:	e61a      	b.n	8002b56 <__aeabi_dsub+0x2e2>
 8002f20:	4642      	mov	r2, r8
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <__aeabi_dsub+0x6e8>)
 8002f24:	2601      	movs	r6, #1
 8002f26:	401a      	ands	r2, r3
 8002f28:	4690      	mov	r8, r2
 8002f2a:	e614      	b.n	8002b56 <__aeabi_dsub+0x2e2>
 8002f2c:	4666      	mov	r6, ip
 8002f2e:	001f      	movs	r7, r3
 8002f30:	3e20      	subs	r6, #32
 8002f32:	40f7      	lsrs	r7, r6
 8002f34:	2c20      	cmp	r4, #32
 8002f36:	d005      	beq.n	8002f44 <__aeabi_dsub+0x6d0>
 8002f38:	2640      	movs	r6, #64	; 0x40
 8002f3a:	1b36      	subs	r6, r6, r4
 8002f3c:	40b3      	lsls	r3, r6
 8002f3e:	464c      	mov	r4, r9
 8002f40:	431c      	orrs	r4, r3
 8002f42:	46a2      	mov	sl, r4
 8002f44:	4654      	mov	r4, sl
 8002f46:	1e63      	subs	r3, r4, #1
 8002f48:	419c      	sbcs	r4, r3
 8002f4a:	433c      	orrs	r4, r7
 8002f4c:	e5c8      	b.n	8002ae0 <__aeabi_dsub+0x26c>
 8002f4e:	0011      	movs	r1, r2
 8002f50:	2300      	movs	r3, #0
 8002f52:	2200      	movs	r2, #0
 8002f54:	e532      	b.n	80029bc <__aeabi_dsub+0x148>
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	000007ff 	.word	0x000007ff
 8002f5c:	ff7fffff 	.word	0xff7fffff
 8002f60:	000007fe 	.word	0x000007fe
 8002f64:	464a      	mov	r2, r9
 8002f66:	1814      	adds	r4, r2, r0
 8002f68:	4284      	cmp	r4, r0
 8002f6a:	4192      	sbcs	r2, r2
 8002f6c:	185b      	adds	r3, r3, r1
 8002f6e:	4698      	mov	r8, r3
 8002f70:	4252      	negs	r2, r2
 8002f72:	4490      	add	r8, r2
 8002f74:	e5e9      	b.n	8002b4a <__aeabi_dsub+0x2d6>
 8002f76:	4642      	mov	r2, r8
 8002f78:	4322      	orrs	r2, r4
 8002f7a:	d100      	bne.n	8002f7e <__aeabi_dsub+0x70a>
 8002f7c:	e6a6      	b.n	8002ccc <__aeabi_dsub+0x458>
 8002f7e:	e5ea      	b.n	8002b56 <__aeabi_dsub+0x2e2>
 8002f80:	074b      	lsls	r3, r1, #29
 8002f82:	08c2      	lsrs	r2, r0, #3
 8002f84:	431a      	orrs	r2, r3
 8002f86:	08cb      	lsrs	r3, r1, #3
 8002f88:	e632      	b.n	8002bf0 <__aeabi_dsub+0x37c>
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	4901      	ldr	r1, [pc, #4]	; (8002f94 <__aeabi_dsub+0x720>)
 8002f8e:	0013      	movs	r3, r2
 8002f90:	e514      	b.n	80029bc <__aeabi_dsub+0x148>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	000007ff 	.word	0x000007ff

08002f98 <__aeabi_dcmpun>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	0005      	movs	r5, r0
 8002f9c:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <__aeabi_dcmpun+0x38>)
 8002f9e:	030c      	lsls	r4, r1, #12
 8002fa0:	0016      	movs	r6, r2
 8002fa2:	0049      	lsls	r1, r1, #1
 8002fa4:	031a      	lsls	r2, r3, #12
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	0b24      	lsrs	r4, r4, #12
 8002faa:	0d49      	lsrs	r1, r1, #21
 8002fac:	0b12      	lsrs	r2, r2, #12
 8002fae:	0d5b      	lsrs	r3, r3, #21
 8002fb0:	4281      	cmp	r1, r0
 8002fb2:	d008      	beq.n	8002fc6 <__aeabi_dcmpun+0x2e>
 8002fb4:	4906      	ldr	r1, [pc, #24]	; (8002fd0 <__aeabi_dcmpun+0x38>)
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	428b      	cmp	r3, r1
 8002fba:	d103      	bne.n	8002fc4 <__aeabi_dcmpun+0x2c>
 8002fbc:	4332      	orrs	r2, r6
 8002fbe:	0010      	movs	r0, r2
 8002fc0:	1e42      	subs	r2, r0, #1
 8002fc2:	4190      	sbcs	r0, r2
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	432c      	orrs	r4, r5
 8002fca:	d1fb      	bne.n	8002fc4 <__aeabi_dcmpun+0x2c>
 8002fcc:	e7f2      	b.n	8002fb4 <__aeabi_dcmpun+0x1c>
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	000007ff 	.word	0x000007ff

08002fd4 <__aeabi_d2iz>:
 8002fd4:	000a      	movs	r2, r1
 8002fd6:	b530      	push	{r4, r5, lr}
 8002fd8:	4c13      	ldr	r4, [pc, #76]	; (8003028 <__aeabi_d2iz+0x54>)
 8002fda:	0053      	lsls	r3, r2, #1
 8002fdc:	0309      	lsls	r1, r1, #12
 8002fde:	0005      	movs	r5, r0
 8002fe0:	0b09      	lsrs	r1, r1, #12
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	0d5b      	lsrs	r3, r3, #21
 8002fe6:	0fd2      	lsrs	r2, r2, #31
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	dd04      	ble.n	8002ff6 <__aeabi_d2iz+0x22>
 8002fec:	480f      	ldr	r0, [pc, #60]	; (800302c <__aeabi_d2iz+0x58>)
 8002fee:	4283      	cmp	r3, r0
 8002ff0:	dd02      	ble.n	8002ff8 <__aeabi_d2iz+0x24>
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <__aeabi_d2iz+0x5c>)
 8002ff4:	18d0      	adds	r0, r2, r3
 8002ff6:	bd30      	pop	{r4, r5, pc}
 8002ff8:	2080      	movs	r0, #128	; 0x80
 8002ffa:	0340      	lsls	r0, r0, #13
 8002ffc:	4301      	orrs	r1, r0
 8002ffe:	480d      	ldr	r0, [pc, #52]	; (8003034 <__aeabi_d2iz+0x60>)
 8003000:	1ac0      	subs	r0, r0, r3
 8003002:	281f      	cmp	r0, #31
 8003004:	dd08      	ble.n	8003018 <__aeabi_d2iz+0x44>
 8003006:	480c      	ldr	r0, [pc, #48]	; (8003038 <__aeabi_d2iz+0x64>)
 8003008:	1ac3      	subs	r3, r0, r3
 800300a:	40d9      	lsrs	r1, r3
 800300c:	000b      	movs	r3, r1
 800300e:	4258      	negs	r0, r3
 8003010:	2a00      	cmp	r2, #0
 8003012:	d1f0      	bne.n	8002ff6 <__aeabi_d2iz+0x22>
 8003014:	0018      	movs	r0, r3
 8003016:	e7ee      	b.n	8002ff6 <__aeabi_d2iz+0x22>
 8003018:	4c08      	ldr	r4, [pc, #32]	; (800303c <__aeabi_d2iz+0x68>)
 800301a:	40c5      	lsrs	r5, r0
 800301c:	46a4      	mov	ip, r4
 800301e:	4463      	add	r3, ip
 8003020:	4099      	lsls	r1, r3
 8003022:	000b      	movs	r3, r1
 8003024:	432b      	orrs	r3, r5
 8003026:	e7f2      	b.n	800300e <__aeabi_d2iz+0x3a>
 8003028:	000003fe 	.word	0x000003fe
 800302c:	0000041d 	.word	0x0000041d
 8003030:	7fffffff 	.word	0x7fffffff
 8003034:	00000433 	.word	0x00000433
 8003038:	00000413 	.word	0x00000413
 800303c:	fffffbed 	.word	0xfffffbed

08003040 <__aeabi_i2d>:
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	2800      	cmp	r0, #0
 8003044:	d016      	beq.n	8003074 <__aeabi_i2d+0x34>
 8003046:	17c3      	asrs	r3, r0, #31
 8003048:	18c5      	adds	r5, r0, r3
 800304a:	405d      	eors	r5, r3
 800304c:	0fc4      	lsrs	r4, r0, #31
 800304e:	0028      	movs	r0, r5
 8003050:	f000 f91c 	bl	800328c <__clzsi2>
 8003054:	4a11      	ldr	r2, [pc, #68]	; (800309c <__aeabi_i2d+0x5c>)
 8003056:	1a12      	subs	r2, r2, r0
 8003058:	280a      	cmp	r0, #10
 800305a:	dc16      	bgt.n	800308a <__aeabi_i2d+0x4a>
 800305c:	0003      	movs	r3, r0
 800305e:	002e      	movs	r6, r5
 8003060:	3315      	adds	r3, #21
 8003062:	409e      	lsls	r6, r3
 8003064:	230b      	movs	r3, #11
 8003066:	1a18      	subs	r0, r3, r0
 8003068:	40c5      	lsrs	r5, r0
 800306a:	0553      	lsls	r3, r2, #21
 800306c:	032d      	lsls	r5, r5, #12
 800306e:	0b2d      	lsrs	r5, r5, #12
 8003070:	0d5b      	lsrs	r3, r3, #21
 8003072:	e003      	b.n	800307c <__aeabi_i2d+0x3c>
 8003074:	2400      	movs	r4, #0
 8003076:	2300      	movs	r3, #0
 8003078:	2500      	movs	r5, #0
 800307a:	2600      	movs	r6, #0
 800307c:	051b      	lsls	r3, r3, #20
 800307e:	432b      	orrs	r3, r5
 8003080:	07e4      	lsls	r4, r4, #31
 8003082:	4323      	orrs	r3, r4
 8003084:	0030      	movs	r0, r6
 8003086:	0019      	movs	r1, r3
 8003088:	bd70      	pop	{r4, r5, r6, pc}
 800308a:	380b      	subs	r0, #11
 800308c:	4085      	lsls	r5, r0
 800308e:	0553      	lsls	r3, r2, #21
 8003090:	032d      	lsls	r5, r5, #12
 8003092:	2600      	movs	r6, #0
 8003094:	0b2d      	lsrs	r5, r5, #12
 8003096:	0d5b      	lsrs	r3, r3, #21
 8003098:	e7f0      	b.n	800307c <__aeabi_i2d+0x3c>
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	0000041e 	.word	0x0000041e

080030a0 <__aeabi_ui2d>:
 80030a0:	b510      	push	{r4, lr}
 80030a2:	1e04      	subs	r4, r0, #0
 80030a4:	d010      	beq.n	80030c8 <__aeabi_ui2d+0x28>
 80030a6:	f000 f8f1 	bl	800328c <__clzsi2>
 80030aa:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <__aeabi_ui2d+0x48>)
 80030ac:	1a1b      	subs	r3, r3, r0
 80030ae:	280a      	cmp	r0, #10
 80030b0:	dc11      	bgt.n	80030d6 <__aeabi_ui2d+0x36>
 80030b2:	220b      	movs	r2, #11
 80030b4:	0021      	movs	r1, r4
 80030b6:	1a12      	subs	r2, r2, r0
 80030b8:	40d1      	lsrs	r1, r2
 80030ba:	3015      	adds	r0, #21
 80030bc:	030a      	lsls	r2, r1, #12
 80030be:	055b      	lsls	r3, r3, #21
 80030c0:	4084      	lsls	r4, r0
 80030c2:	0b12      	lsrs	r2, r2, #12
 80030c4:	0d5b      	lsrs	r3, r3, #21
 80030c6:	e001      	b.n	80030cc <__aeabi_ui2d+0x2c>
 80030c8:	2300      	movs	r3, #0
 80030ca:	2200      	movs	r2, #0
 80030cc:	051b      	lsls	r3, r3, #20
 80030ce:	4313      	orrs	r3, r2
 80030d0:	0020      	movs	r0, r4
 80030d2:	0019      	movs	r1, r3
 80030d4:	bd10      	pop	{r4, pc}
 80030d6:	0022      	movs	r2, r4
 80030d8:	380b      	subs	r0, #11
 80030da:	4082      	lsls	r2, r0
 80030dc:	055b      	lsls	r3, r3, #21
 80030de:	0312      	lsls	r2, r2, #12
 80030e0:	2400      	movs	r4, #0
 80030e2:	0b12      	lsrs	r2, r2, #12
 80030e4:	0d5b      	lsrs	r3, r3, #21
 80030e6:	e7f1      	b.n	80030cc <__aeabi_ui2d+0x2c>
 80030e8:	0000041e 	.word	0x0000041e

080030ec <__aeabi_f2d>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	0043      	lsls	r3, r0, #1
 80030f0:	0246      	lsls	r6, r0, #9
 80030f2:	0fc4      	lsrs	r4, r0, #31
 80030f4:	20fe      	movs	r0, #254	; 0xfe
 80030f6:	0e1b      	lsrs	r3, r3, #24
 80030f8:	1c59      	adds	r1, r3, #1
 80030fa:	0a75      	lsrs	r5, r6, #9
 80030fc:	4208      	tst	r0, r1
 80030fe:	d00c      	beq.n	800311a <__aeabi_f2d+0x2e>
 8003100:	22e0      	movs	r2, #224	; 0xe0
 8003102:	0092      	lsls	r2, r2, #2
 8003104:	4694      	mov	ip, r2
 8003106:	076d      	lsls	r5, r5, #29
 8003108:	0b36      	lsrs	r6, r6, #12
 800310a:	4463      	add	r3, ip
 800310c:	051b      	lsls	r3, r3, #20
 800310e:	4333      	orrs	r3, r6
 8003110:	07e4      	lsls	r4, r4, #31
 8003112:	4323      	orrs	r3, r4
 8003114:	0028      	movs	r0, r5
 8003116:	0019      	movs	r1, r3
 8003118:	bd70      	pop	{r4, r5, r6, pc}
 800311a:	2b00      	cmp	r3, #0
 800311c:	d114      	bne.n	8003148 <__aeabi_f2d+0x5c>
 800311e:	2d00      	cmp	r5, #0
 8003120:	d01b      	beq.n	800315a <__aeabi_f2d+0x6e>
 8003122:	0028      	movs	r0, r5
 8003124:	f000 f8b2 	bl	800328c <__clzsi2>
 8003128:	280a      	cmp	r0, #10
 800312a:	dc1c      	bgt.n	8003166 <__aeabi_f2d+0x7a>
 800312c:	230b      	movs	r3, #11
 800312e:	002a      	movs	r2, r5
 8003130:	1a1b      	subs	r3, r3, r0
 8003132:	40da      	lsrs	r2, r3
 8003134:	0003      	movs	r3, r0
 8003136:	3315      	adds	r3, #21
 8003138:	409d      	lsls	r5, r3
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <__aeabi_f2d+0x88>)
 800313c:	0312      	lsls	r2, r2, #12
 800313e:	1a1b      	subs	r3, r3, r0
 8003140:	055b      	lsls	r3, r3, #21
 8003142:	0b16      	lsrs	r6, r2, #12
 8003144:	0d5b      	lsrs	r3, r3, #21
 8003146:	e7e1      	b.n	800310c <__aeabi_f2d+0x20>
 8003148:	2d00      	cmp	r5, #0
 800314a:	d009      	beq.n	8003160 <__aeabi_f2d+0x74>
 800314c:	0b32      	lsrs	r2, r6, #12
 800314e:	2680      	movs	r6, #128	; 0x80
 8003150:	0336      	lsls	r6, r6, #12
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <__aeabi_f2d+0x8c>)
 8003154:	076d      	lsls	r5, r5, #29
 8003156:	4316      	orrs	r6, r2
 8003158:	e7d8      	b.n	800310c <__aeabi_f2d+0x20>
 800315a:	2300      	movs	r3, #0
 800315c:	2600      	movs	r6, #0
 800315e:	e7d5      	b.n	800310c <__aeabi_f2d+0x20>
 8003160:	2600      	movs	r6, #0
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <__aeabi_f2d+0x8c>)
 8003164:	e7d2      	b.n	800310c <__aeabi_f2d+0x20>
 8003166:	0003      	movs	r3, r0
 8003168:	002a      	movs	r2, r5
 800316a:	3b0b      	subs	r3, #11
 800316c:	409a      	lsls	r2, r3
 800316e:	2500      	movs	r5, #0
 8003170:	e7e3      	b.n	800313a <__aeabi_f2d+0x4e>
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	00000389 	.word	0x00000389
 8003178:	000007ff 	.word	0x000007ff

0800317c <__aeabi_d2f>:
 800317c:	0002      	movs	r2, r0
 800317e:	004b      	lsls	r3, r1, #1
 8003180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003182:	0308      	lsls	r0, r1, #12
 8003184:	0d5b      	lsrs	r3, r3, #21
 8003186:	4e3d      	ldr	r6, [pc, #244]	; (800327c <__aeabi_d2f+0x100>)
 8003188:	0fcc      	lsrs	r4, r1, #31
 800318a:	0a40      	lsrs	r0, r0, #9
 800318c:	0f51      	lsrs	r1, r2, #29
 800318e:	1c5f      	adds	r7, r3, #1
 8003190:	4308      	orrs	r0, r1
 8003192:	00d5      	lsls	r5, r2, #3
 8003194:	4237      	tst	r7, r6
 8003196:	d00a      	beq.n	80031ae <__aeabi_d2f+0x32>
 8003198:	4939      	ldr	r1, [pc, #228]	; (8003280 <__aeabi_d2f+0x104>)
 800319a:	185e      	adds	r6, r3, r1
 800319c:	2efe      	cmp	r6, #254	; 0xfe
 800319e:	dd16      	ble.n	80031ce <__aeabi_d2f+0x52>
 80031a0:	23ff      	movs	r3, #255	; 0xff
 80031a2:	2100      	movs	r1, #0
 80031a4:	05db      	lsls	r3, r3, #23
 80031a6:	430b      	orrs	r3, r1
 80031a8:	07e0      	lsls	r0, r4, #31
 80031aa:	4318      	orrs	r0, r3
 80031ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <__aeabi_d2f+0x44>
 80031b2:	4328      	orrs	r0, r5
 80031b4:	d027      	beq.n	8003206 <__aeabi_d2f+0x8a>
 80031b6:	2105      	movs	r1, #5
 80031b8:	0189      	lsls	r1, r1, #6
 80031ba:	0a49      	lsrs	r1, r1, #9
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e7f1      	b.n	80031a4 <__aeabi_d2f+0x28>
 80031c0:	4305      	orrs	r5, r0
 80031c2:	d0ed      	beq.n	80031a0 <__aeabi_d2f+0x24>
 80031c4:	2180      	movs	r1, #128	; 0x80
 80031c6:	03c9      	lsls	r1, r1, #15
 80031c8:	23ff      	movs	r3, #255	; 0xff
 80031ca:	4301      	orrs	r1, r0
 80031cc:	e7ea      	b.n	80031a4 <__aeabi_d2f+0x28>
 80031ce:	2e00      	cmp	r6, #0
 80031d0:	dd1c      	ble.n	800320c <__aeabi_d2f+0x90>
 80031d2:	0192      	lsls	r2, r2, #6
 80031d4:	0011      	movs	r1, r2
 80031d6:	1e4a      	subs	r2, r1, #1
 80031d8:	4191      	sbcs	r1, r2
 80031da:	00c0      	lsls	r0, r0, #3
 80031dc:	0f6d      	lsrs	r5, r5, #29
 80031de:	4301      	orrs	r1, r0
 80031e0:	4329      	orrs	r1, r5
 80031e2:	074b      	lsls	r3, r1, #29
 80031e4:	d048      	beq.n	8003278 <__aeabi_d2f+0xfc>
 80031e6:	230f      	movs	r3, #15
 80031e8:	400b      	ands	r3, r1
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d000      	beq.n	80031f0 <__aeabi_d2f+0x74>
 80031ee:	3104      	adds	r1, #4
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	04db      	lsls	r3, r3, #19
 80031f4:	400b      	ands	r3, r1
 80031f6:	d03f      	beq.n	8003278 <__aeabi_d2f+0xfc>
 80031f8:	1c72      	adds	r2, r6, #1
 80031fa:	2efe      	cmp	r6, #254	; 0xfe
 80031fc:	d0d0      	beq.n	80031a0 <__aeabi_d2f+0x24>
 80031fe:	0189      	lsls	r1, r1, #6
 8003200:	0a49      	lsrs	r1, r1, #9
 8003202:	b2d3      	uxtb	r3, r2
 8003204:	e7ce      	b.n	80031a4 <__aeabi_d2f+0x28>
 8003206:	2300      	movs	r3, #0
 8003208:	2100      	movs	r1, #0
 800320a:	e7cb      	b.n	80031a4 <__aeabi_d2f+0x28>
 800320c:	0032      	movs	r2, r6
 800320e:	3217      	adds	r2, #23
 8003210:	db22      	blt.n	8003258 <__aeabi_d2f+0xdc>
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	221e      	movs	r2, #30
 8003216:	0409      	lsls	r1, r1, #16
 8003218:	4308      	orrs	r0, r1
 800321a:	1b92      	subs	r2, r2, r6
 800321c:	2a1f      	cmp	r2, #31
 800321e:	dd1d      	ble.n	800325c <__aeabi_d2f+0xe0>
 8003220:	2102      	movs	r1, #2
 8003222:	4249      	negs	r1, r1
 8003224:	1b8e      	subs	r6, r1, r6
 8003226:	0001      	movs	r1, r0
 8003228:	40f1      	lsrs	r1, r6
 800322a:	000e      	movs	r6, r1
 800322c:	2a20      	cmp	r2, #32
 800322e:	d004      	beq.n	800323a <__aeabi_d2f+0xbe>
 8003230:	4a14      	ldr	r2, [pc, #80]	; (8003284 <__aeabi_d2f+0x108>)
 8003232:	4694      	mov	ip, r2
 8003234:	4463      	add	r3, ip
 8003236:	4098      	lsls	r0, r3
 8003238:	4305      	orrs	r5, r0
 800323a:	0029      	movs	r1, r5
 800323c:	1e4d      	subs	r5, r1, #1
 800323e:	41a9      	sbcs	r1, r5
 8003240:	4331      	orrs	r1, r6
 8003242:	2600      	movs	r6, #0
 8003244:	074b      	lsls	r3, r1, #29
 8003246:	d1ce      	bne.n	80031e6 <__aeabi_d2f+0x6a>
 8003248:	2080      	movs	r0, #128	; 0x80
 800324a:	000b      	movs	r3, r1
 800324c:	04c0      	lsls	r0, r0, #19
 800324e:	2201      	movs	r2, #1
 8003250:	4003      	ands	r3, r0
 8003252:	4201      	tst	r1, r0
 8003254:	d1d3      	bne.n	80031fe <__aeabi_d2f+0x82>
 8003256:	e7af      	b.n	80031b8 <__aeabi_d2f+0x3c>
 8003258:	2300      	movs	r3, #0
 800325a:	e7ac      	b.n	80031b6 <__aeabi_d2f+0x3a>
 800325c:	490a      	ldr	r1, [pc, #40]	; (8003288 <__aeabi_d2f+0x10c>)
 800325e:	468c      	mov	ip, r1
 8003260:	0029      	movs	r1, r5
 8003262:	4463      	add	r3, ip
 8003264:	40d1      	lsrs	r1, r2
 8003266:	409d      	lsls	r5, r3
 8003268:	000a      	movs	r2, r1
 800326a:	0029      	movs	r1, r5
 800326c:	4098      	lsls	r0, r3
 800326e:	1e4d      	subs	r5, r1, #1
 8003270:	41a9      	sbcs	r1, r5
 8003272:	4301      	orrs	r1, r0
 8003274:	4311      	orrs	r1, r2
 8003276:	e7e4      	b.n	8003242 <__aeabi_d2f+0xc6>
 8003278:	0033      	movs	r3, r6
 800327a:	e79d      	b.n	80031b8 <__aeabi_d2f+0x3c>
 800327c:	000007fe 	.word	0x000007fe
 8003280:	fffffc80 	.word	0xfffffc80
 8003284:	fffffca2 	.word	0xfffffca2
 8003288:	fffffc82 	.word	0xfffffc82

0800328c <__clzsi2>:
 800328c:	211c      	movs	r1, #28
 800328e:	2301      	movs	r3, #1
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	4298      	cmp	r0, r3
 8003294:	d301      	bcc.n	800329a <__clzsi2+0xe>
 8003296:	0c00      	lsrs	r0, r0, #16
 8003298:	3910      	subs	r1, #16
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	4298      	cmp	r0, r3
 800329e:	d301      	bcc.n	80032a4 <__clzsi2+0x18>
 80032a0:	0a00      	lsrs	r0, r0, #8
 80032a2:	3908      	subs	r1, #8
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	4298      	cmp	r0, r3
 80032a8:	d301      	bcc.n	80032ae <__clzsi2+0x22>
 80032aa:	0900      	lsrs	r0, r0, #4
 80032ac:	3904      	subs	r1, #4
 80032ae:	a202      	add	r2, pc, #8	; (adr r2, 80032b8 <__clzsi2+0x2c>)
 80032b0:	5c10      	ldrb	r0, [r2, r0]
 80032b2:	1840      	adds	r0, r0, r1
 80032b4:	4770      	bx	lr
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	02020304 	.word	0x02020304
 80032bc:	01010101 	.word	0x01010101
	...

080032c8 <__clzdi2>:
 80032c8:	b510      	push	{r4, lr}
 80032ca:	2900      	cmp	r1, #0
 80032cc:	d103      	bne.n	80032d6 <__clzdi2+0xe>
 80032ce:	f7ff ffdd 	bl	800328c <__clzsi2>
 80032d2:	3020      	adds	r0, #32
 80032d4:	e002      	b.n	80032dc <__clzdi2+0x14>
 80032d6:	1c08      	adds	r0, r1, #0
 80032d8:	f7ff ffd8 	bl	800328c <__clzsi2>
 80032dc:	bd10      	pop	{r4, pc}
 80032de:	46c0      	nop			; (mov r8, r8)

080032e0 <pow10_>:
	while(pos<255 && str[pos]!=sym)
		pos++;
	return pos;
}
uint32_t pow10_(uint8_t value)
{
 80032e0:	0003      	movs	r3, r0
 80032e2:	220a      	movs	r2, #10
 80032e4:	2001      	movs	r0, #1
  if (value>0)
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <pow10_+0x12>
  	return 10*pow10_(value-1);
 80032ea:	3b01      	subs	r3, #1
 80032ec:	4350      	muls	r0, r2
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	e7f9      	b.n	80032e6 <pow10_+0x6>
  else
  	return 1;
}
 80032f2:	4770      	bx	lr

080032f4 <DecToInt>:
sprintf(resString,"%li.%d",leftPart,rightPart);
return resString;
}

uint32_t DecToInt(uint8_t * string, uint8_t len)
{
 80032f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t value=0;
	uint8_t i=0;
	for(i=0;i<len;i++)
 80032f6:	2400      	movs	r4, #0
{
 80032f8:	000e      	movs	r6, r1
	uint32_t value=0;
 80032fa:	0025      	movs	r5, r4
{
 80032fc:	9001      	str	r0, [sp, #4]
	for(i=0;i<len;i++)
 80032fe:	42b4      	cmp	r4, r6
 8003300:	d011      	beq.n	8003326 <DecToInt+0x32>
	if (string[i]>='0' && string[i]<='9')
 8003302:	9b01      	ldr	r3, [sp, #4]
 8003304:	5d1f      	ldrb	r7, [r3, r4]
 8003306:	3401      	adds	r4, #1
 8003308:	3f30      	subs	r7, #48	; 0x30
 800330a:	b2fb      	uxtb	r3, r7
 800330c:	2b09      	cmp	r3, #9
 800330e:	d806      	bhi.n	800331e <DecToInt+0x2a>
	value+=(string[i]-'0')*pow10_(len-i-1);
 8003310:	1b30      	subs	r0, r6, r4
 8003312:	b2c0      	uxtb	r0, r0
 8003314:	f7ff ffe4 	bl	80032e0 <pow10_>
 8003318:	4347      	muls	r7, r0
 800331a:	19ed      	adds	r5, r5, r7
	for(i=0;i<len;i++)
 800331c:	e7ef      	b.n	80032fe <DecToInt+0xa>
	else
	{
		Error_Handler();
		return 0xFFFFFFFF;
 800331e:	2501      	movs	r5, #1
		Error_Handler();
 8003320:	f000 fcb6 	bl	8003c90 <Error_Handler>
		return 0xFFFFFFFF;
 8003324:	426d      	negs	r5, r5
	}
	return value;
}
 8003326:	0028      	movs	r0, r5
 8003328:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800332a <HexToInt>:

uint32_t HexToInt(uint8_t * string, uint8_t len)
{
 800332a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t value=0;
 800332c:	2200      	movs	r2, #0
 800332e:	0003      	movs	r3, r0
		case 'D':
		case 'd': tmp=13; break;
		case 'E':
		case 'e': tmp=14; break;
		case 'F':
		case 'f': tmp=15; break;
 8003330:	250f      	movs	r5, #15
		case 'e': tmp=14; break;
 8003332:	260e      	movs	r6, #14
		case 'd': tmp=13; break;
 8003334:	270d      	movs	r7, #13
 8003336:	3901      	subs	r1, #1
 8003338:	b2c9      	uxtb	r1, r1
	for(i=0;i<len;i++)
 800333a:	29ff      	cmp	r1, #255	; 0xff
 800333c:	d047      	beq.n	80033ce <HexToInt+0xa4>
		switch (string[i])
 800333e:	7818      	ldrb	r0, [r3, #0]
 8003340:	3830      	subs	r0, #48	; 0x30
 8003342:	2836      	cmp	r0, #54	; 0x36
 8003344:	d83f      	bhi.n	80033c6 <HexToInt+0x9c>
 8003346:	f7fc fee7 	bl	8000118 <__gnu_thumb1_case_uqi>
 800334a:	1c44      	.short	0x1c44
 800334c:	28262446 	.word	0x28262446
 8003350:	302e2c2a 	.word	0x302e2c2a
 8003354:	3e3e3e3e 	.word	0x3e3e3e3e
 8003358:	323e3e3e 	.word	0x323e3e3e
 800335c:	3a383634 	.word	0x3a383634
 8003360:	3e3e3e3c 	.word	0x3e3e3e3c
 8003364:	3e3e3e3e 	.word	0x3e3e3e3e
 8003368:	3e3e3e3e 	.word	0x3e3e3e3e
 800336c:	3e3e3e3e 	.word	0x3e3e3e3e
 8003370:	3e3e3e3e 	.word	0x3e3e3e3e
 8003374:	3e3e3e3e 	.word	0x3e3e3e3e
 8003378:	323e3e3e 	.word	0x323e3e3e
 800337c:	3a383634 	.word	0x3a383634
 8003380:	3c          	.byte	0x3c
 8003381:	00          	.byte	0x00
 8003382:	2001      	movs	r0, #1
	return 1<<(value*4);
 8003384:	008c      	lsls	r4, r1, #2
		default:
			Error_Handler();
			return 0xFFFFFFFF;
		}
		value+=tmp*pow16(len-i-1);
 8003386:	40a0      	lsls	r0, r4
 8003388:	3901      	subs	r1, #1
 800338a:	1812      	adds	r2, r2, r0
	for(i=0;i<len;i++)
 800338c:	b2c9      	uxtb	r1, r1
 800338e:	3301      	adds	r3, #1
 8003390:	e7d3      	b.n	800333a <HexToInt+0x10>
		case '3': tmp=3; break;
 8003392:	2003      	movs	r0, #3
 8003394:	e7f6      	b.n	8003384 <HexToInt+0x5a>
		case '4': tmp=4; break;
 8003396:	2004      	movs	r0, #4
 8003398:	e7f4      	b.n	8003384 <HexToInt+0x5a>
		case '5': tmp=5; break;
 800339a:	2005      	movs	r0, #5
 800339c:	e7f2      	b.n	8003384 <HexToInt+0x5a>
		case '6': tmp=6; break;
 800339e:	2006      	movs	r0, #6
 80033a0:	e7f0      	b.n	8003384 <HexToInt+0x5a>
		case '7': tmp=7; break;
 80033a2:	2007      	movs	r0, #7
 80033a4:	e7ee      	b.n	8003384 <HexToInt+0x5a>
		case '8': tmp=8; break;
 80033a6:	2008      	movs	r0, #8
 80033a8:	e7ec      	b.n	8003384 <HexToInt+0x5a>
		case '9': tmp=9; break;
 80033aa:	2009      	movs	r0, #9
 80033ac:	e7ea      	b.n	8003384 <HexToInt+0x5a>
		case 'a': tmp=10; break;
 80033ae:	200a      	movs	r0, #10
 80033b0:	e7e8      	b.n	8003384 <HexToInt+0x5a>
		case 'b': tmp=11; break;
 80033b2:	200b      	movs	r0, #11
 80033b4:	e7e6      	b.n	8003384 <HexToInt+0x5a>
		case 'c': tmp=12; break;
 80033b6:	200c      	movs	r0, #12
 80033b8:	e7e4      	b.n	8003384 <HexToInt+0x5a>
		case 'd': tmp=13; break;
 80033ba:	0038      	movs	r0, r7
 80033bc:	e7e2      	b.n	8003384 <HexToInt+0x5a>
		case 'e': tmp=14; break;
 80033be:	0030      	movs	r0, r6
 80033c0:	e7e0      	b.n	8003384 <HexToInt+0x5a>
		case 'f': tmp=15; break;
 80033c2:	0028      	movs	r0, r5
 80033c4:	e7de      	b.n	8003384 <HexToInt+0x5a>
			Error_Handler();
 80033c6:	f000 fc63 	bl	8003c90 <Error_Handler>
			return 0xFFFFFFFF;
 80033ca:	2201      	movs	r2, #1
 80033cc:	4252      	negs	r2, r2
	}
	return value;
}
 80033ce:	0010      	movs	r0, r2
 80033d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		case '0': tmp=0; break;
 80033d2:	2000      	movs	r0, #0
 80033d4:	e7d6      	b.n	8003384 <HexToInt+0x5a>
		case '2': tmp=2; break;
 80033d6:	2002      	movs	r0, #2
 80033d8:	e7d4      	b.n	8003384 <HexToInt+0x5a>
	...

080033dc <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write (int fd, char *ptr, int len)
{
	HAL_UART_Transmit (&huart1, (uint8_t*) ptr, len, 1000L);
 80033dc:	23fa      	movs	r3, #250	; 0xfa
{
 80033de:	b510      	push	{r4, lr}
 80033e0:	0014      	movs	r4, r2
	HAL_UART_Transmit (&huart1, (uint8_t*) ptr, len, 1000L);
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	b292      	uxth	r2, r2
 80033e6:	4802      	ldr	r0, [pc, #8]	; (80033f0 <_write+0x14>)
 80033e8:	f004 f938 	bl	800765c <HAL_UART_Transmit>
	return len;
}
 80033ec:	0020      	movs	r0, r4
 80033ee:	bd10      	pop	{r4, pc}
 80033f0:	20000304 	.word	0x20000304

080033f4 <debugLogTime>:
}

void debugLogTime (char *string)
{
#ifdef DEBUG
	uint32_t time = RTC->TR;
 80033f4:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <debugLogTime+0x3c>)
{
 80033f6:	b570      	push	{r4, r5, r6, lr}
 80033f8:	0005      	movs	r5, r0
	printf ("\n");
 80033fa:	200a      	movs	r0, #10
	uint32_t time = RTC->TR;
 80033fc:	681c      	ldr	r4, [r3, #0]
	printf ("\n");
 80033fe:	f004 ff65 	bl	80082cc <putchar>
	printf ("%08lu", HAL_GetTick ());
 8003402:	f001 fe59 	bl	80050b8 <HAL_GetTick>
 8003406:	0001      	movs	r1, r0
 8003408:	480a      	ldr	r0, [pc, #40]	; (8003434 <debugLogTime+0x40>)
 800340a:	f004 ff45 	bl	8008298 <iprintf>
	printf (" %02x:%02x:%02x ", (uint16_t) (time >> 16) & 0xFF, (uint16_t) (time >> 8) & 0xFF, (uint16_t) time & 0xFF);
 800340e:	21ff      	movs	r1, #255	; 0xff
 8003410:	0023      	movs	r3, r4
 8003412:	0a22      	lsrs	r2, r4, #8
 8003414:	0c24      	lsrs	r4, r4, #16
 8003416:	400b      	ands	r3, r1
 8003418:	400a      	ands	r2, r1
 800341a:	4807      	ldr	r0, [pc, #28]	; (8003438 <debugLogTime+0x44>)
 800341c:	4021      	ands	r1, r4
 800341e:	f004 ff3b 	bl	8008298 <iprintf>
	printf (string);
 8003422:	0028      	movs	r0, r5
 8003424:	f004 ff38 	bl	8008298 <iprintf>
	printf ("\n");
 8003428:	200a      	movs	r0, #10
 800342a:	f004 ff4f 	bl	80082cc <putchar>
#endif
}
 800342e:	bd70      	pop	{r4, r5, r6, pc}
 8003430:	40002800 	.word	0x40002800
 8003434:	0800abc8 	.word	0x0800abc8
 8003438:	0800abce 	.word	0x0800abce

0800343c <debugLog>:

void debugLog (char *string)
{
 800343c:	b510      	push	{r4, lr}
#ifdef DEBUG
	printf (string);
 800343e:	f004 ff2b 	bl	8008298 <iprintf>
	printf ("\n");
 8003442:	200a      	movs	r0, #10
 8003444:	f004 ff42 	bl	80082cc <putchar>
#endif
}
 8003448:	bd10      	pop	{r4, pc}

0800344a <debugLogInt>:

void debugLogInt (char *format, int n)
{
 800344a:	b510      	push	{r4, lr}
#ifdef DEBUG
	printf (format, n);
 800344c:	f004 ff24 	bl	8008298 <iprintf>
	printf ("\n");
 8003450:	200a      	movs	r0, #10
 8003452:	f004 ff3b 	bl	80082cc <putchar>
#endif
}
 8003456:	bd10      	pop	{r4, pc}

08003458 <debugLogString>:

void debugLogString (char *format, char *string)
{
 8003458:	b510      	push	{r4, lr}
#ifdef DEBUG
	printf (format, string);
 800345a:	f004 ff1d 	bl	8008298 <iprintf>
	printf ("\n");
 800345e:	200a      	movs	r0, #10
 8003460:	f004 ff34 	bl	80082cc <putchar>
#endif
}
 8003464:	bd10      	pop	{r4, pc}
	...

08003468 <getVoltage>:
 * Calculates MCU Vdd voltage by internal reference
 * @param None
 * @retval  Volage
 */
float getVoltage ()
{
 8003468:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint16_t adc[2];
	HAL_ADC_Start_DMA (&hadc, (uint32_t*) adc, 2);
 800346a:	4c11      	ldr	r4, [pc, #68]	; (80034b0 <getVoltage+0x48>)
 800346c:	ad01      	add	r5, sp, #4
 800346e:	0029      	movs	r1, r5
 8003470:	2202      	movs	r2, #2
 8003472:	0020      	movs	r0, r4
 8003474:	f001 ff68 	bl	8005348 <HAL_ADC_Start_DMA>
	HAL_Delay (5);
 8003478:	2005      	movs	r0, #5
 800347a:	f001 fe23 	bl	80050c4 <HAL_Delay>
	HAL_ADC_Start_DMA (&hadc, (uint32_t*) adc, 2);
 800347e:	2202      	movs	r2, #2
 8003480:	0029      	movs	r1, r5
 8003482:	0020      	movs	r0, r4
 8003484:	f001 ff60 	bl	8005348 <HAL_ADC_Start_DMA>
	HAL_Delay (2);
 8003488:	2002      	movs	r0, #2
 800348a:	f001 fe1b 	bl	80050c4 <HAL_Delay>
	return 3.0f * (float) VREF_CAL_VALUE / (float) adc[1];
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <getVoltage+0x4c>)
 8003490:	8818      	ldrh	r0, [r3, #0]
 8003492:	f7fd ffd7 	bl	8001444 <__aeabi_ui2f>
 8003496:	4908      	ldr	r1, [pc, #32]	; (80034b8 <getVoltage+0x50>)
 8003498:	f7fd fcd2 	bl	8000e40 <__aeabi_fmul>
 800349c:	1c04      	adds	r4, r0, #0
 800349e:	8868      	ldrh	r0, [r5, #2]
 80034a0:	f7fd ffd0 	bl	8001444 <__aeabi_ui2f>
 80034a4:	1c01      	adds	r1, r0, #0
 80034a6:	1c20      	adds	r0, r4, #0
 80034a8:	f7fd fb00 	bl	8000aac <__aeabi_fdiv>
}
 80034ac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	20000490 	.word	0x20000490
 80034b4:	1ff80078 	.word	0x1ff80078
 80034b8:	40400000 	.word	0x40400000

080034bc <getTemperature>:
 * Can be calculated through NTC thermistor or TI IC
 * @param None
 * @retval  Temperature in Celsius
 */
float getTemperature ()
{
 80034bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint16_t adc;
	float Rt = 0;
	float tKelvin = 0;
	float tCelsius = 0;
#ifdef USE_NTC
	HAL_GPIO_WritePin (TempPower_GPIO_Port, TempPower_Pin, 1);
 80034be:	26a0      	movs	r6, #160	; 0xa0
 80034c0:	05f6      	lsls	r6, r6, #23
 80034c2:	0030      	movs	r0, r6
 80034c4:	2201      	movs	r2, #1
 80034c6:	2102      	movs	r1, #2
 80034c8:	f002 fb7a 	bl	8005bc0 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA (&hadc, (uint32_t*) &adc, 1);
 80034cc:	466b      	mov	r3, sp
 80034ce:	4d29      	ldr	r5, [pc, #164]	; (8003574 <getTemperature+0xb8>)
 80034d0:	1d9c      	adds	r4, r3, #6
 80034d2:	0021      	movs	r1, r4
 80034d4:	2201      	movs	r2, #1
 80034d6:	0028      	movs	r0, r5
 80034d8:	f001 ff36 	bl	8005348 <HAL_ADC_Start_DMA>
	HAL_Delay (5);
 80034dc:	2005      	movs	r0, #5
 80034de:	f001 fdf1 	bl	80050c4 <HAL_Delay>
	HAL_ADC_Start_DMA (&hadc, (uint32_t*) &adc, 1);
 80034e2:	2201      	movs	r2, #1
 80034e4:	0021      	movs	r1, r4
 80034e6:	0028      	movs	r0, r5
 80034e8:	f001 ff2e 	bl	8005348 <HAL_ADC_Start_DMA>
	HAL_Delay (2);
 80034ec:	2002      	movs	r0, #2
 80034ee:	f001 fde9 	bl	80050c4 <HAL_Delay>
	Rt = R_BALANCE * (4096.0 / (float) adc - 1.0F);
 80034f2:	8820      	ldrh	r0, [r4, #0]
 80034f4:	f7fd ffa6 	bl	8001444 <__aeabi_ui2f>
 80034f8:	f7ff fdf8 	bl	80030ec <__aeabi_f2d>
 80034fc:	0002      	movs	r2, r0
 80034fe:	000b      	movs	r3, r1
 8003500:	2000      	movs	r0, #0
 8003502:	491d      	ldr	r1, [pc, #116]	; (8003578 <getTemperature+0xbc>)
 8003504:	f7fe fb44 	bl	8001b90 <__aeabi_ddiv>
 8003508:	2200      	movs	r2, #0
 800350a:	4b1c      	ldr	r3, [pc, #112]	; (800357c <getTemperature+0xc0>)
 800350c:	f7ff f9b2 	bl	8002874 <__aeabi_dsub>
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <getTemperature+0xc4>)
 8003512:	2200      	movs	r2, #0
 8003514:	f7fe ff42 	bl	800239c <__aeabi_dmul>
 8003518:	f7ff fe30 	bl	800317c <__aeabi_d2f>
	tKelvin = (BETA * HOME_TEMP) / (BETA + (HOME_TEMP * log (Rt / R_THERMISTOR_DEFAULT)));
 800351c:	4919      	ldr	r1, [pc, #100]	; (8003584 <getTemperature+0xc8>)
 800351e:	f7fd fac5 	bl	8000aac <__aeabi_fdiv>
 8003522:	f7ff fde3 	bl	80030ec <__aeabi_f2d>
 8003526:	f007 f8af 	bl	800a688 <log>

	tCelsius = tKelvin - 273.15;
	HAL_GPIO_WritePin (TempPower_GPIO_Port, TempPower_Pin, 0);
 800352a:	2200      	movs	r2, #0
	tKelvin = (BETA * HOME_TEMP) / (BETA + (HOME_TEMP * log (Rt / R_THERMISTOR_DEFAULT)));
 800352c:	000d      	movs	r5, r1
 800352e:	0004      	movs	r4, r0
	HAL_GPIO_WritePin (TempPower_GPIO_Port, TempPower_Pin, 0);
 8003530:	2102      	movs	r1, #2
 8003532:	0030      	movs	r0, r6
 8003534:	f002 fb44 	bl	8005bc0 <HAL_GPIO_WritePin>
	tKelvin = (BETA * HOME_TEMP) / (BETA + (HOME_TEMP * log (Rt / R_THERMISTOR_DEFAULT)));
 8003538:	22c0      	movs	r2, #192	; 0xc0
 800353a:	0029      	movs	r1, r5
 800353c:	0020      	movs	r0, r4
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <getTemperature+0xcc>)
 8003540:	05d2      	lsls	r2, r2, #23
 8003542:	f7fe ff2b 	bl	800239c <__aeabi_dmul>
 8003546:	2200      	movs	r2, #0
 8003548:	4b10      	ldr	r3, [pc, #64]	; (800358c <getTemperature+0xd0>)
 800354a:	f7fd ffb7 	bl	80014bc <__aeabi_dadd>
 800354e:	0002      	movs	r2, r0
 8003550:	2080      	movs	r0, #128	; 0x80
 8003552:	000b      	movs	r3, r1
 8003554:	0600      	lsls	r0, r0, #24
 8003556:	490e      	ldr	r1, [pc, #56]	; (8003590 <getTemperature+0xd4>)
 8003558:	f7fe fb1a 	bl	8001b90 <__aeabi_ddiv>
 800355c:	f7ff fe0e 	bl	800317c <__aeabi_d2f>
	tCelsius = tKelvin - 273.15;
 8003560:	f7ff fdc4 	bl	80030ec <__aeabi_f2d>
 8003564:	4a0b      	ldr	r2, [pc, #44]	; (8003594 <getTemperature+0xd8>)
 8003566:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <getTemperature+0xdc>)
 8003568:	f7ff f984 	bl	8002874 <__aeabi_dsub>
 800356c:	f7ff fe06 	bl	800317c <__aeabi_d2f>
#endif
	return tCelsius;
}
 8003570:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	20000490 	.word	0x20000490
 8003578:	40b00000 	.word	0x40b00000
 800357c:	3ff00000 	.word	0x3ff00000
 8003580:	40b25c00 	.word	0x40b25c00
 8003584:	4592e000 	.word	0x4592e000
 8003588:	4072a266 	.word	0x4072a266
 800358c:	40aedc00 	.word	0x40aedc00
 8003590:	4131f85c 	.word	0x4131f85c
 8003594:	66666666 	.word	0x66666666
 8003598:	40711266 	.word	0x40711266

0800359c <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback (RTC_HandleTypeDef *hrtc)
{
 800359c:	b510      	push	{r4, lr}
	debugLogTime ("RTC Interrupt");
 800359e:	4806      	ldr	r0, [pc, #24]	; (80035b8 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 80035a0:	f7ff ff28 	bl	80033f4 <debugLogTime>
	lpTimWdCnt = 0;
 80035a4:	2200      	movs	r2, #0
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 80035a8:	701a      	strb	r2, [r3, #0]
	flag.rtcAlarm = 1;
 80035aa:	2301      	movs	r3, #1
 80035ac:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 80035ae:	7811      	ldrb	r1, [r2, #0]
 80035b0:	430b      	orrs	r3, r1
 80035b2:	7013      	strb	r3, [r2, #0]
}
 80035b4:	bd10      	pop	{r4, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	0800abdf 	.word	0x0800abdf
 80035bc:	20000220 	.word	0x20000220
 80035c0:	20000214 	.word	0x20000214

080035c4 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback (LPTIM_HandleTypeDef *hlptim)
{
	if (lpTimWdCnt > (*workInterval * 2) / WATCHDOG_INTERVAL)
 80035c4:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <HAL_LPTIM_AutoReloadMatchCallback+0x40>)
{
 80035c6:	b570      	push	{r4, r5, r6, lr}
	if (lpTimWdCnt > (*workInterval * 2) / WATCHDOG_INTERVAL)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4c0f      	ldr	r4, [pc, #60]	; (8003608 <HAL_LPTIM_AutoReloadMatchCallback+0x44>)
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	2178      	movs	r1, #120	; 0x78
 80035d0:	0040      	lsls	r0, r0, #1
 80035d2:	7825      	ldrb	r5, [r4, #0]
 80035d4:	f7fc fdb4 	bl	8000140 <__udivsi3>
 80035d8:	4285      	cmp	r5, r0
 80035da:	d908      	bls.n	80035ee <HAL_LPTIM_AutoReloadMatchCallback+0x2a>
		{
			debugLogTime ("###LP WatchDog activated! Reset MCU!");
 80035dc:	480b      	ldr	r0, [pc, #44]	; (800360c <HAL_LPTIM_AutoReloadMatchCallback+0x48>)
 80035de:	f7ff ff09 	bl	80033f4 <debugLogTime>
			SCB->AIRCR |= SCB_AIRCR_SYSRESETREQ_Msk;
 80035e2:	2304      	movs	r3, #4
 80035e4:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <HAL_LPTIM_AutoReloadMatchCallback+0x4c>)
 80035e6:	68d1      	ldr	r1, [r2, #12]
 80035e8:	430b      	orrs	r3, r1
 80035ea:	60d3      	str	r3, [r2, #12]
	else
		{
		debugLogTime ("LP Interrupt");
		debugLogInt("LP Watchdog cnt is %d", ++lpTimWdCnt);
		}
}
 80035ec:	bd70      	pop	{r4, r5, r6, pc}
		debugLogTime ("LP Interrupt");
 80035ee:	4809      	ldr	r0, [pc, #36]	; (8003614 <HAL_LPTIM_AutoReloadMatchCallback+0x50>)
 80035f0:	f7ff ff00 	bl	80033f4 <debugLogTime>
		debugLogInt("LP Watchdog cnt is %d", ++lpTimWdCnt);
 80035f4:	7821      	ldrb	r1, [r4, #0]
 80035f6:	4808      	ldr	r0, [pc, #32]	; (8003618 <HAL_LPTIM_AutoReloadMatchCallback+0x54>)
 80035f8:	3101      	adds	r1, #1
 80035fa:	b2c9      	uxtb	r1, r1
 80035fc:	7021      	strb	r1, [r4, #0]
 80035fe:	f7ff ff24 	bl	800344a <debugLogInt>
}
 8003602:	e7f3      	b.n	80035ec <HAL_LPTIM_AutoReloadMatchCallback+0x28>
 8003604:	200002b8 	.word	0x200002b8
 8003608:	20000220 	.word	0x20000220
 800360c:	0800abed 	.word	0x0800abed
 8003610:	e000ed00 	.word	0xe000ed00
 8003614:	0800ac12 	.word	0x0800ac12
 8003618:	0800ac1f 	.word	0x0800ac1f

0800361c <initiateSettings>:
 * @brief Initialises radio handler structure
 * @param None
 * @retval  None
 */
void initiateSettings (nodeSettings_t *settingsPtr)
{
 800361c:	b570      	push	{r4, r5, r6, lr}
	myRadio.sf = settingsPtr->sf;
 800361e:	4d0c      	ldr	r5, [pc, #48]	; (8003650 <initiateSettings+0x34>)
 8003620:	7b03      	ldrb	r3, [r0, #12]
{
 8003622:	0004      	movs	r4, r0
	myRadio.sf = settingsPtr->sf;
 8003624:	716b      	strb	r3, [r5, #5]
	myRadio.bw = settingsPtr->bw;
 8003626:	7b43      	ldrb	r3, [r0, #13]
 8003628:	71ab      	strb	r3, [r5, #6]
	myRadio.cr = settingsPtr->cr;
 800362a:	7ac3      	ldrb	r3, [r0, #11]
 800362c:	71eb      	strb	r3, [r5, #7]
	myRadio.syncWord = settingsPtr->sw;
 800362e:	7b83      	ldrb	r3, [r0, #14]
 8003630:	73ab      	strb	r3, [r5, #14]
	myRadio.frequency = settingsPtr->realFrequency / 61.035f;
 8003632:	6800      	ldr	r0, [r0, #0]
 8003634:	f7fd ff06 	bl	8001444 <__aeabi_ui2f>
 8003638:	4906      	ldr	r1, [pc, #24]	; (8003654 <initiateSettings+0x38>)
 800363a:	f7fd fa37 	bl	8000aac <__aeabi_fdiv>
 800363e:	f7fc ffb5 	bl	80005ac <__aeabi_f2uiz>
 8003642:	6028      	str	r0, [r5, #0]
	myRadio.power = settingsPtr->power;
 8003644:	7be3      	ldrb	r3, [r4, #15]
 8003646:	712b      	strb	r3, [r5, #4]
	myRadio.preamble = settingsPtr->preamble;
 8003648:	8923      	ldrh	r3, [r4, #8]
 800364a:	81ab      	strh	r3, [r5, #12]
}
 800364c:	bd70      	pop	{r4, r5, r6, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	20000234 	.word	0x20000234
 8003654:	427423d7 	.word	0x427423d7

08003658 <defaultSettings>:
 */
void defaultSettings (nodeSettings_t *settingsPtr)
{
	settingsPtr->nodeNum = 0;
	settingsPtr->workInterval = 600;
	settingsPtr->voltageTreshold = 2.0f;
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	05db      	lsls	r3, r3, #23
 800365c:	6143      	str	r3, [r0, #20]
	settingsPtr->bw = SX127X_LORA_BW_125KHZ;
	settingsPtr->cr = SX127X_CR_4_8;
	settingsPtr->sf = SX127X_LORA_SF_12;
	settingsPtr->sw = 0x1;
	settingsPtr->power = SX127X_POWER_20DBM;
	settingsPtr->realFrequency = DEF_FREQUENCY;
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <defaultSettings+0x24>)
{
 8003660:	b510      	push	{r4, lr}
	settingsPtr->realFrequency = DEF_FREQUENCY;
 8003662:	6003      	str	r3, [r0, #0]
	settingsPtr->workInterval = 600;
 8003664:	2396      	movs	r3, #150	; 0x96
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	6043      	str	r3, [r0, #4]
	settingsPtr->preamble = 5;
 800366a:	4b05      	ldr	r3, [pc, #20]	; (8003680 <defaultSettings+0x28>)
 800366c:	6083      	str	r3, [r0, #8]
	settingsPtr->sf = SX127X_LORA_SF_12;
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <defaultSettings+0x2c>)
 8003670:	60c3      	str	r3, [r0, #12]
	settingsPtr->useLed = true;
 8003672:	2301      	movs	r3, #1
 8003674:	7403      	strb	r3, [r0, #16]
	initiateSettings (settingsPtr);
 8003676:	f7ff ffd1 	bl	800361c <initiateSettings>
}
 800367a:	bd10      	pop	{r4, pc}
 800367c:	33c8d600 	.word	0x33c8d600
 8003680:	04000005 	.word	0x04000005
 8003684:	1401070c 	.word	0x1401070c

08003688 <tryEeprom>:
 * if data exist and valid
 * @param None
 * @retval HAL status
 */
HAL_StatusTypeDef tryEeprom (nodeSettings_t *settingsPtr)
{
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	nodeSettings_t *eepromSettings = (nodeSettings_t*) FLASH_EEPROM_BASE;
	if (eepromSettings->realFrequency > MIN_FREQUENCY && eepromSettings->realFrequency < MAX_FREQUENCY && eepromSettings->bw < 10
 800368a:	4c24      	ldr	r4, [pc, #144]	; (800371c <tryEeprom+0x94>)
 800368c:	4a24      	ldr	r2, [pc, #144]	; (8003720 <tryEeprom+0x98>)
 800368e:	6823      	ldr	r3, [r4, #0]
{
 8003690:	0006      	movs	r6, r0
	if (eepromSettings->realFrequency > MIN_FREQUENCY && eepromSettings->realFrequency < MAX_FREQUENCY && eepromSettings->bw < 10
 8003692:	189b      	adds	r3, r3, r2
 8003694:	4a23      	ldr	r2, [pc, #140]	; (8003724 <tryEeprom+0x9c>)
		{
			memcpy ((uint8_t*) settingsPtr, (uint8_t*) eepromSettings, sizeof(*settingsPtr));
			initiateSettings (settingsPtr);
			return HAL_OK;
		}
	return HAL_ERROR;
 8003696:	2501      	movs	r5, #1
	if (eepromSettings->realFrequency > MIN_FREQUENCY && eepromSettings->realFrequency < MAX_FREQUENCY && eepromSettings->bw < 10
 8003698:	4293      	cmp	r3, r2
 800369a:	d83b      	bhi.n	8003714 <tryEeprom+0x8c>
 800369c:	7b63      	ldrb	r3, [r4, #13]
 800369e:	2b09      	cmp	r3, #9
 80036a0:	d838      	bhi.n	8003714 <tryEeprom+0x8c>
			&& eepromSettings->cr < 5 && eepromSettings->cr > 0 && eepromSettings->sf > 6 && eepromSettings->sf < 13 && eepromSettings->power > 9
 80036a2:	7ae3      	ldrb	r3, [r4, #11]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d834      	bhi.n	8003714 <tryEeprom+0x8c>
 80036aa:	7b23      	ldrb	r3, [r4, #12]
 80036ac:	3b07      	subs	r3, #7
 80036ae:	2b05      	cmp	r3, #5
 80036b0:	d830      	bhi.n	8003714 <tryEeprom+0x8c>
 80036b2:	7be3      	ldrb	r3, [r4, #15]
 80036b4:	3b0a      	subs	r3, #10
 80036b6:	2b0a      	cmp	r3, #10
 80036b8:	d82c      	bhi.n	8003714 <tryEeprom+0x8c>
			&& eepromSettings->power < 21 && eepromSettings->sw != 0x34 && eepromSettings->voltageTreshold >= 1.7f
 80036ba:	7ba3      	ldrb	r3, [r4, #14]
 80036bc:	2b34      	cmp	r3, #52	; 0x34
 80036be:	d029      	beq.n	8003714 <tryEeprom+0x8c>
 80036c0:	6967      	ldr	r7, [r4, #20]
 80036c2:	4919      	ldr	r1, [pc, #100]	; (8003728 <tryEeprom+0xa0>)
 80036c4:	1c38      	adds	r0, r7, #0
 80036c6:	f7fc ff1f 	bl	8000508 <__aeabi_fcmpge>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d022      	beq.n	8003714 <tryEeprom+0x8c>
			&& eepromSettings->voltageTreshold <= 3.0f && eepromSettings->workInterval >= MIN_WORK_INTERVAL
 80036ce:	4917      	ldr	r1, [pc, #92]	; (800372c <tryEeprom+0xa4>)
 80036d0:	1c38      	adds	r0, r7, #0
 80036d2:	f7fc ff05 	bl	80004e0 <__aeabi_fcmple>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d01c      	beq.n	8003714 <tryEeprom+0x8c>
 80036da:	6863      	ldr	r3, [r4, #4]
 80036dc:	4a14      	ldr	r2, [pc, #80]	; (8003730 <tryEeprom+0xa8>)
 80036de:	3b3c      	subs	r3, #60	; 0x3c
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d817      	bhi.n	8003714 <tryEeprom+0x8c>
			&& eepromSettings->workInterval <= MAX_WORK_INTERVAL && eepromSettings->preamble > 1 && eepromSettings->voltageTreshold >= 1.8f
 80036e4:	8923      	ldrh	r3, [r4, #8]
 80036e6:	42ab      	cmp	r3, r5
 80036e8:	d914      	bls.n	8003714 <tryEeprom+0x8c>
 80036ea:	4912      	ldr	r1, [pc, #72]	; (8003734 <tryEeprom+0xac>)
 80036ec:	1c38      	adds	r0, r7, #0
 80036ee:	f7fc ff0b 	bl	8000508 <__aeabi_fcmpge>
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d010      	beq.n	8003718 <tryEeprom+0x90>
			&& eepromSettings->voltageTreshold <= 3.1f)
 80036f6:	4910      	ldr	r1, [pc, #64]	; (8003738 <tryEeprom+0xb0>)
 80036f8:	1c38      	adds	r0, r7, #0
 80036fa:	f7fc fef1 	bl	80004e0 <__aeabi_fcmple>
 80036fe:	2800      	cmp	r0, #0
 8003700:	d00a      	beq.n	8003718 <tryEeprom+0x90>
			memcpy ((uint8_t*) settingsPtr, (uint8_t*) eepromSettings, sizeof(*settingsPtr));
 8003702:	221c      	movs	r2, #28
 8003704:	0021      	movs	r1, r4
 8003706:	0030      	movs	r0, r6
 8003708:	f004 f93a 	bl	8007980 <memcpy>
			initiateSettings (settingsPtr);
 800370c:	0030      	movs	r0, r6
 800370e:	f7ff ff85 	bl	800361c <initiateSettings>
			return HAL_OK;
 8003712:	2500      	movs	r5, #0
}
 8003714:	0028      	movs	r0, r5
 8003716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return HAL_ERROR;
 8003718:	2501      	movs	r5, #1
 800371a:	e7fb      	b.n	8003714 <tryEeprom+0x8c>
 800371c:	08080000 	.word	0x08080000
 8003720:	f7c6497f 	.word	0xf7c6497f
 8003724:	3351d13e 	.word	0x3351d13e
 8003728:	3fd9999a 	.word	0x3fd9999a
 800372c:	40400000 	.word	0x40400000
 8003730:	0000a884 	.word	0x0000a884
 8003734:	3fe66666 	.word	0x3fe66666
 8003738:	40466666 	.word	0x40466666

0800373c <saveSettings>:
 * Saves settings by copying var settings to EEPROM
 * @param None
 * @retval None
 */
void saveSettings (nodeSettings_t *settingsPtr)
{
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	0005      	movs	r5, r0
	uint8_t i;
	uint32_t *ptr = (uint32_t*) settingsPtr;
	HAL_FLASHEx_DATAEEPROM_Unlock ();
 8003740:	2400      	movs	r4, #0
 8003742:	f002 f931 	bl	80059a8 <HAL_FLASHEx_DATAEEPROM_Unlock>
	for (i = 0; i < (sizeof(*settingsPtr) + 3) / 4; i++)
		HAL_FLASHEx_DATAEEPROM_Program (FLASH_TYPEPROGRAMDATA_WORD,
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <saveSettings+0x24>)
 8003748:	592a      	ldr	r2, [r5, r4]
 800374a:	18e1      	adds	r1, r4, r3
 800374c:	2002      	movs	r0, #2
 800374e:	3404      	adds	r4, #4
 8003750:	f002 f94c 	bl	80059ec <HAL_FLASHEx_DATAEEPROM_Program>
	for (i = 0; i < (sizeof(*settingsPtr) + 3) / 4; i++)
 8003754:	2c1c      	cmp	r4, #28
 8003756:	d1f6      	bne.n	8003746 <saveSettings+0xa>
		FLASH_EEPROM_BASE + i * 4,
																		*ptr++);
	HAL_FLASHEx_DATAEEPROM_Lock ();
 8003758:	f002 f93e 	bl	80059d8 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800375c:	bd70      	pop	{r4, r5, r6, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	08080000 	.word	0x08080000

08003764 <setWakeup>:

void setWakeup (uint16_t delay)
{
 8003764:	b510      	push	{r4, lr}
 8003766:	0004      	movs	r4, r0
	HAL_RTCEx_SetWakeUpTimer_IT (&hrtc, recomendedDelay,
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <setWakeup+0x1c>)
 800376a:	2204      	movs	r2, #4
 800376c:	8819      	ldrh	r1, [r3, #0]
 800376e:	4805      	ldr	r0, [pc, #20]	; (8003784 <setWakeup+0x20>)
 8003770:	f003 f8ce 	bl	8006910 <HAL_RTCEx_SetWakeUpTimer_IT>
	RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
	debugLogInt ("Setting WakeUp timer to %d seconds", delay);
 8003774:	0021      	movs	r1, r4
 8003776:	4804      	ldr	r0, [pc, #16]	; (8003788 <setWakeup+0x24>)
 8003778:	f7ff fe67 	bl	800344a <debugLogInt>
}
 800377c:	bd10      	pop	{r4, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	20000000 	.word	0x20000000
 8003784:	200003b8 	.word	0x200003b8
 8003788:	0800ac35 	.word	0x0800ac35

0800378c <sleep>:
 * @param None
 * @retval None
 */
void sleep ()
{
	HAL_GPIO_WritePin (BLUE_GPIO_Port, BLUE_Pin | ORANGE_Pin, LED_OFF);
 800378c:	21c0      	movs	r1, #192	; 0xc0
{
 800378e:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin (BLUE_GPIO_Port, BLUE_Pin | ORANGE_Pin, LED_OFF);
 8003790:	2200      	movs	r2, #0
 8003792:	0189      	lsls	r1, r1, #6
 8003794:	4808      	ldr	r0, [pc, #32]	; (80037b8 <sleep+0x2c>)
 8003796:	f002 fa13 	bl	8005bc0 <HAL_GPIO_WritePin>
	SX127X_sleep (&myRadio);
 800379a:	4808      	ldr	r0, [pc, #32]	; (80037bc <sleep+0x30>)
 800379c:	f001 f8dc 	bl	8004958 <SX127X_sleep>
	HAL_DBGMCU_DisableDBGStopMode ();
 80037a0:	f001 fca2 	bl	80050e8 <HAL_DBGMCU_DisableDBGStopMode>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80037a4:	2304      	movs	r3, #4
 80037a6:	4a06      	ldr	r2, [pc, #24]	; (80037c0 <sleep+0x34>)
 80037a8:	6811      	ldr	r1, [r2, #0]
 80037aa:	430b      	orrs	r3, r1
	HAL_PWR_EnterSTOPMode (PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80037ac:	2101      	movs	r1, #1
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80037ae:	6013      	str	r3, [r2, #0]
	HAL_PWR_EnterSTOPMode (PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80037b0:	0008      	movs	r0, r1
 80037b2:	f002 fb9d 	bl	8005ef0 <HAL_PWR_EnterSTOPMode>

}
 80037b6:	bd10      	pop	{r4, pc}
 80037b8:	50000400 	.word	0x50000400
 80037bc:	20000234 	.word	0x20000234
 80037c0:	40007000 	.word	0x40007000

080037c4 <sendStatus>:
 * @Sends current status of Node to Base station
 * @param None
 * @retval None
 */
void sendStatus (nodeStatus_t *status, nodeSettings_t *settingsPtr)
{
 80037c4:	b570      	push	{r4, r5, r6, lr}
	uplinkMessage_t *txMes = (uplinkMessage_t*) myRadio.txBuf;
	txMes->adr = settingsPtr->nodeNum;
	txMes->uplink = 1;
 80037c6:	4d26      	ldr	r5, [pc, #152]	; (8003860 <sendStatus+0x9c>)
 80037c8:	2301      	movs	r3, #1
	txMes->disarm = status->disarmed;
 80037ca:	7802      	ldrb	r2, [r0, #0]
{
 80037cc:	0004      	movs	r4, r0
	txMes->uplink = 1;
 80037ce:	0028      	movs	r0, r5
 80037d0:	7a89      	ldrb	r1, [r1, #10]
 80037d2:	303d      	adds	r0, #61	; 0x3d
 80037d4:	00c9      	lsls	r1, r1, #3
 80037d6:	4319      	orrs	r1, r3
	txMes->disarm = status->disarmed;
 80037d8:	401a      	ands	r2, r3
	txMes->uplink = 1;
 80037da:	7001      	strb	r1, [r0, #0]
	txMes->disarm = status->disarmed;
 80037dc:	0011      	movs	r1, r2
 80037de:	7842      	ldrb	r2, [r0, #1]
 80037e0:	439a      	bics	r2, r3
 80037e2:	430a      	orrs	r2, r1
 80037e4:	7042      	strb	r2, [r0, #1]
	txMes->message = MSG_UP_ACKNOWLEDGE;
	txMes->opened = status->opened || status->unconfirmedOpening;
 80037e6:	7861      	ldrb	r1, [r4, #1]
 80037e8:	001a      	movs	r2, r3
 80037ea:	2900      	cmp	r1, #0
 80037ec:	d100      	bne.n	80037f0 <sendStatus+0x2c>
 80037ee:	79e2      	ldrb	r2, [r4, #7]
 80037f0:	0029      	movs	r1, r5
 80037f2:	2006      	movs	r0, #6
 80037f4:	7923      	ldrb	r3, [r4, #4]
 80037f6:	313e      	adds	r1, #62	; 0x3e
 80037f8:	0052      	lsls	r2, r2, #1
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4313      	orrs	r3, r2
 80037fe:	780a      	ldrb	r2, [r1, #0]
 8003800:	4003      	ands	r3, r0
 8003802:	4382      	bics	r2, r0
 8003804:	4313      	orrs	r3, r2
 8003806:	700b      	strb	r3, [r1, #0]
	txMes->powered = status->powered;
	txMes->codedTemperature = getTemperature () * 2.0F + 80;
 8003808:	f7ff fe58 	bl	80034bc <getTemperature>
 800380c:	1c01      	adds	r1, r0, #0
 800380e:	f7fc ffb1 	bl	8000774 <__aeabi_fadd>
 8003812:	4914      	ldr	r1, [pc, #80]	; (8003864 <sendStatus+0xa0>)
 8003814:	f7fc ffae 	bl	8000774 <__aeabi_fadd>
 8003818:	f7fc fec8 	bl	80005ac <__aeabi_f2uiz>
 800381c:	002b      	movs	r3, r5
 800381e:	333f      	adds	r3, #63	; 0x3f
 8003820:	7018      	strb	r0, [r3, #0]
	txMes->codedVoltage = ((int) (getVoltage () * 10)) - 19;
 8003822:	f7ff fe21 	bl	8003468 <getVoltage>
 8003826:	4910      	ldr	r1, [pc, #64]	; (8003868 <sendStatus+0xa4>)
 8003828:	f7fd fb0a 	bl	8000e40 <__aeabi_fmul>
 800382c:	f7fd fdea 	bl	8001404 <__aeabi_f2iz>
 8003830:	002a      	movs	r2, r5
 8003832:	2107      	movs	r1, #7
 8003834:	323d      	adds	r2, #61	; 0x3d
 8003836:	3813      	subs	r0, #19
 8003838:	00c3      	lsls	r3, r0, #3
 800383a:	7850      	ldrb	r0, [r2, #1]
 800383c:	4008      	ands	r0, r1
 800383e:	4318      	orrs	r0, r3
 8003840:	7050      	strb	r0, [r2, #1]
	status->openedToConfirm = status->opened || status->unconfirmedOpening;
 8003842:	2201      	movs	r2, #1
 8003844:	7861      	ldrb	r1, [r4, #1]
 8003846:	0013      	movs	r3, r2
 8003848:	2900      	cmp	r1, #0
 800384a:	d100      	bne.n	800384e <sendStatus+0x8a>
 800384c:	79e3      	ldrb	r3, [r4, #7]
 800384e:	4013      	ands	r3, r2
 8003850:	70e3      	strb	r3, [r4, #3]
	status->poweredToConfirm = status->powered;
 8003852:	7923      	ldrb	r3, [r4, #4]
	SX127X_transmitAsync (&myRadio, sizeof(uplinkMessage_t));
 8003854:	0028      	movs	r0, r5
 8003856:	2103      	movs	r1, #3
	status->poweredToConfirm = status->powered;
 8003858:	71a3      	strb	r3, [r4, #6]
	SX127X_transmitAsync (&myRadio, sizeof(uplinkMessage_t));
 800385a:	f001 f9dd 	bl	8004c18 <SX127X_transmitAsync>

}
 800385e:	bd70      	pop	{r4, r5, r6, pc}
 8003860:	20000234 	.word	0x20000234
 8003864:	42a00000 	.word	0x42a00000
 8003868:	41200000 	.word	0x41200000

0800386c <deinitGpio>:
 * @brief Turns of user pins to decrease power consumption
 * @param None
 * @retval None
 */
void deinitGpio ()
{
 800386c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800386e:	2208      	movs	r2, #8
 8003870:	2100      	movs	r1, #0
 8003872:	a804      	add	r0, sp, #16
 8003874:	f004 f88d 	bl	8007992 <memset>

	GPIO_InitStruct.Pin = USER1_Pin | USER2_Pin;
 8003878:	23c0      	movs	r3, #192	; 0xc0
 800387a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800387c:	3bbd      	subs	r3, #189	; 0xbd
 800387e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	2300      	movs	r3, #0
	HAL_GPIO_Init (USER1_GPIO_Port, &GPIO_InitStruct);
 8003882:	4803      	ldr	r0, [pc, #12]	; (8003890 <deinitGpio+0x24>)
 8003884:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003886:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init (USER1_GPIO_Port, &GPIO_InitStruct);
 8003888:	f002 f8da 	bl	8005a40 <HAL_GPIO_Init>
}
 800388c:	b007      	add	sp, #28
 800388e:	bd00      	pop	{pc}
 8003890:	50000400 	.word	0x50000400

08003894 <RadioInit>:
 * if there is no valid data in EEPROM than loads default settings
 * @param None
 * @retval None
 */
void RadioInit (nodeSettings_t *settingsPtr)
{
 8003894:	b530      	push	{r4, r5, lr}
 8003896:	0005      	movs	r5, r0
	SX127X_dio_t nss;
	SX127X_dio_t reset;

	SX127X_defaultConfig (&myRadio);
 8003898:	4c0e      	ldr	r4, [pc, #56]	; (80038d4 <RadioInit+0x40>)
{
 800389a:	b087      	sub	sp, #28
	SX127X_defaultConfig (&myRadio);
 800389c:	0020      	movs	r0, r4
 800389e:	f001 f821 	bl	80048e4 <SX127X_defaultConfig>
	defaultSettings (settingsPtr);
 80038a2:	0028      	movs	r0, r5
 80038a4:	f7ff fed8 	bl	8003658 <defaultSettings>
	tryEeprom (settingsPtr);
 80038a8:	0028      	movs	r0, r5
 80038aa:	f7ff feed 	bl	8003688 <tryEeprom>
	nss.pin = NSS_Pin;
	nss.port = NSS_GPIO_Port;
 80038ae:	22a0      	movs	r2, #160	; 0xa0
	reset.pin = RESET_Pin;
	reset.port = RESET_GPIO_Port;
	SX127X_PortConfig (&myRadio, reset, nss, &hspi1);
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <RadioInit+0x44>)
	nss.port = NSS_GPIO_Port;
 80038b2:	05d2      	lsls	r2, r2, #23
	SX127X_PortConfig (&myRadio, reset, nss, &hspi1);
 80038b4:	2108      	movs	r1, #8
 80038b6:	9200      	str	r2, [sp, #0]
 80038b8:	0020      	movs	r0, r4
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	2310      	movs	r3, #16
 80038be:	f001 f825 	bl	800490c <SX127X_PortConfig>
	SX127X_init (&myRadio);
 80038c2:	0020      	movs	r0, r4
 80038c4:	f001 fa3c 	bl	8004d40 <SX127X_init>
	SX127X_config (&myRadio);
 80038c8:	0020      	movs	r0, r4
 80038ca:	f001 f857 	bl	800497c <SX127X_config>
}
 80038ce:	b007      	add	sp, #28
 80038d0:	bd30      	pop	{r4, r5, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	20000234 	.word	0x20000234
 80038d8:	200003f0 	.word	0x200003f0

080038dc <ReceivingTest>:
 * Green Led means message received (with valid CRC)
 * @param None
 * @retval None
 */
void ReceivingTest ()
{
 80038dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t recTime = 0x80000000;
	uint32_t recTime1 = 0x80000000;
	uint32_t recTime2 = 0x80000000;
 80038de:	2680      	movs	r6, #128	; 0x80
	bool repeaterMode = false;
 80038e0:	2700      	movs	r7, #0
				{
					if (myRadio.badCrc == 0)
						{
							if (myRadio.rxBuf[0] == 255 && myRadio.rxBuf[1] == 255)
								{
									repeaterMode = true;
 80038e2:	2401      	movs	r4, #1
	uint32_t recTime2 = 0x80000000;
 80038e4:	0636      	lsls	r6, r6, #24
	debugLogTime ("Receiving test activated");
 80038e6:	483c      	ldr	r0, [pc, #240]	; (80039d8 <ReceivingTest+0xfc>)
 80038e8:	f7ff fd84 	bl	80033f4 <debugLogTime>
	uint32_t recTime1 = 0x80000000;
 80038ec:	9601      	str	r6, [sp, #4]
	uint32_t recTime = 0x80000000;
 80038ee:	9600      	str	r6, [sp, #0]
			SX127X_Routine (&myRadio);
 80038f0:	4d3a      	ldr	r5, [pc, #232]	; (80039dc <ReceivingTest+0x100>)
 80038f2:	0028      	movs	r0, r5
 80038f4:	f001 f9be 	bl	8004c74 <SX127X_Routine>
			if (myRadio.readBytes > 0)
 80038f8:	002b      	movs	r3, r5
 80038fa:	335d      	adds	r3, #93	; 0x5d
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d01a      	beq.n	8003938 <ReceivingTest+0x5c>
					if (myRadio.badCrc == 0)
 8003902:	002b      	movs	r3, r5
 8003904:	3360      	adds	r3, #96	; 0x60
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d111      	bne.n	8003930 <ReceivingTest+0x54>
							if (myRadio.rxBuf[0] == 255 && myRadio.rxBuf[1] == 255)
 800390c:	4a34      	ldr	r2, [pc, #208]	; (80039e0 <ReceivingTest+0x104>)
 800390e:	69eb      	ldr	r3, [r5, #28]
 8003910:	4013      	ands	r3, r2
 8003912:	4293      	cmp	r3, r2
 8003914:	d13d      	bne.n	8003992 <ReceivingTest+0xb6>
									if (myRadio.rxBuf[2] == 1)
 8003916:	7feb      	ldrb	r3, [r5, #31]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d102      	bne.n	8003922 <ReceivingTest+0x46>
										recTime1 = HAL_GetTick ();
 800391c:	f001 fbcc 	bl	80050b8 <HAL_GetTick>
 8003920:	9001      	str	r0, [sp, #4]
									if (myRadio.rxBuf[2] == 2)
 8003922:	7feb      	ldrb	r3, [r5, #31]
									repeaterMode = true;
 8003924:	0027      	movs	r7, r4
									if (myRadio.rxBuf[2] == 2)
 8003926:	2b02      	cmp	r3, #2
 8003928:	d102      	bne.n	8003930 <ReceivingTest+0x54>
										recTime2 = HAL_GetTick ();
 800392a:	f001 fbc5 	bl	80050b8 <HAL_GetTick>
 800392e:	0006      	movs	r6, r0
									recTime = HAL_GetTick ();
								}

						}

					myRadio.readBytes = 0;
 8003930:	002b      	movs	r3, r5
 8003932:	2200      	movs	r2, #0
 8003934:	335d      	adds	r3, #93	; 0x5d
 8003936:	701a      	strb	r2, [r3, #0]
				}
			if (repeaterMode)
 8003938:	7f2d      	ldrb	r5, [r5, #28]
 800393a:	2f00      	cmp	r7, #0
 800393c:	d035      	beq.n	80039aa <ReceivingTest+0xce>
				{
					if (myRadio.signalDetected)
 800393e:	2d00      	cmp	r5, #0
 8003940:	d02b      	beq.n	800399a <ReceivingTest+0xbe>
						{
							HAL_GPIO_WritePin (BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	0022      	movs	r2, r4
 8003946:	4827      	ldr	r0, [pc, #156]	; (80039e4 <ReceivingTest+0x108>)
 8003948:	0149      	lsls	r1, r1, #5
 800394a:	f002 f939 	bl	8005bc0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin (BLUE_GPIO_Port, ORANGE_Pin, LED_ON);
 800394e:	0022      	movs	r2, r4
						}
					else
						{
							HAL_GPIO_WritePin (BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
							HAL_GPIO_WritePin (BLUE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	4824      	ldr	r0, [pc, #144]	; (80039e4 <ReceivingTest+0x108>)
 8003954:	0189      	lsls	r1, r1, #6
 8003956:	f002 f933 	bl	8005bc0 <HAL_GPIO_WritePin>
						}

					if (HAL_GetTick () - recTime1 < 300)
 800395a:	2596      	movs	r5, #150	; 0x96
 800395c:	f001 fbac 	bl	80050b8 <HAL_GetTick>
 8003960:	9b01      	ldr	r3, [sp, #4]
						HAL_GPIO_WritePin (ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003962:	0022      	movs	r2, r4
					if (HAL_GetTick () - recTime1 < 300)
 8003964:	1ac0      	subs	r0, r0, r3
 8003966:	006d      	lsls	r5, r5, #1
 8003968:	42a8      	cmp	r0, r5
 800396a:	d300      	bcc.n	800396e <ReceivingTest+0x92>
					else
						HAL_GPIO_WritePin (ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	481c      	ldr	r0, [pc, #112]	; (80039e4 <ReceivingTest+0x108>)
 8003972:	0189      	lsls	r1, r1, #6
 8003974:	f002 f924 	bl	8005bc0 <HAL_GPIO_WritePin>
					if (HAL_GetTick () - recTime2 < 300)
 8003978:	f001 fb9e 	bl	80050b8 <HAL_GetTick>
						HAL_GPIO_WritePin (ORANGE_GPIO_Port, BLUE_Pin, LED_ON);
 800397c:	0022      	movs	r2, r4
					if (HAL_GetTick () - recTime2 < 300)
 800397e:	1b80      	subs	r0, r0, r6
 8003980:	42a8      	cmp	r0, r5
 8003982:	d300      	bcc.n	8003986 <ReceivingTest+0xaa>
					else
						HAL_GPIO_WritePin (ORANGE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003984:	2200      	movs	r2, #0
 8003986:	2180      	movs	r1, #128	; 0x80
 8003988:	0149      	lsls	r1, r1, #5
					else
						HAL_GPIO_WritePin (BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
					if (HAL_GetTick () - recTime < 300)
						HAL_GPIO_WritePin (ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
					else
						HAL_GPIO_WritePin (ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 800398a:	4816      	ldr	r0, [pc, #88]	; (80039e4 <ReceivingTest+0x108>)
 800398c:	f002 f918 	bl	8005bc0 <HAL_GPIO_WritePin>
 8003990:	e7ae      	b.n	80038f0 <ReceivingTest+0x14>
									recTime = HAL_GetTick ();
 8003992:	f001 fb91 	bl	80050b8 <HAL_GetTick>
 8003996:	9000      	str	r0, [sp, #0]
 8003998:	e7ca      	b.n	8003930 <ReceivingTest+0x54>
							HAL_GPIO_WritePin (BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 800399a:	2180      	movs	r1, #128	; 0x80
 800399c:	002a      	movs	r2, r5
 800399e:	4811      	ldr	r0, [pc, #68]	; (80039e4 <ReceivingTest+0x108>)
 80039a0:	0149      	lsls	r1, r1, #5
 80039a2:	f002 f90d 	bl	8005bc0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin (BLUE_GPIO_Port, ORANGE_Pin, LED_OFF);
 80039a6:	002a      	movs	r2, r5
 80039a8:	e7d2      	b.n	8003950 <ReceivingTest+0x74>
						HAL_GPIO_WritePin (BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 80039aa:	0022      	movs	r2, r4
					if (myRadio.signalDetected)
 80039ac:	2d00      	cmp	r5, #0
 80039ae:	d100      	bne.n	80039b2 <ReceivingTest+0xd6>
						HAL_GPIO_WritePin (BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 80039b0:	003a      	movs	r2, r7
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	480b      	ldr	r0, [pc, #44]	; (80039e4 <ReceivingTest+0x108>)
 80039b6:	0149      	lsls	r1, r1, #5
 80039b8:	f002 f902 	bl	8005bc0 <HAL_GPIO_WritePin>
					if (HAL_GetTick () - recTime < 300)
 80039bc:	f001 fb7c 	bl	80050b8 <HAL_GetTick>
 80039c0:	9b00      	ldr	r3, [sp, #0]
						HAL_GPIO_WritePin (ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 80039c2:	0022      	movs	r2, r4
					if (HAL_GetTick () - recTime < 300)
 80039c4:	1ac0      	subs	r0, r0, r3
 80039c6:	2396      	movs	r3, #150	; 0x96
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4298      	cmp	r0, r3
 80039cc:	d300      	bcc.n	80039d0 <ReceivingTest+0xf4>
						HAL_GPIO_WritePin (ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 80039ce:	2200      	movs	r2, #0
 80039d0:	2180      	movs	r1, #128	; 0x80
 80039d2:	0189      	lsls	r1, r1, #6
 80039d4:	e7d9      	b.n	800398a <ReceivingTest+0xae>
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	0800ac58 	.word	0x0800ac58
 80039dc:	20000234 	.word	0x20000234
 80039e0:	00ffff00 	.word	0x00ffff00
 80039e4:	50000400 	.word	0x50000400

080039e8 <PingTest>:
 * Red light means transmission in progress
 * @param None
 * @retval None
 */
void PingTest ()
{
 80039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	debugLogTime ("Ping test activated");
 80039ea:	481f      	ldr	r0, [pc, #124]	; (8003a68 <PingTest+0x80>)
					if (myRadio.badCrc == 0)
						recTime = HAL_GetTick ();
					myRadio.readBytes = 0;
				}

			if (HAL_GetTick () - lastTrans > 2000)
 80039ec:	25fa      	movs	r5, #250	; 0xfa
	debugLogTime ("Ping test activated");
 80039ee:	f7ff fd01 	bl	80033f4 <debugLogTime>
			if (HAL_GetTick () - lastTrans > 2000)
 80039f2:	00ed      	lsls	r5, r5, #3
			SX127X_Routine (&myRadio);
 80039f4:	4c1d      	ldr	r4, [pc, #116]	; (8003a6c <PingTest+0x84>)
 80039f6:	0020      	movs	r0, r4
 80039f8:	f001 f93c 	bl	8004c74 <SX127X_Routine>
			if (myRadio.readBytes > 0)
 80039fc:	0023      	movs	r3, r4
 80039fe:	335d      	adds	r3, #93	; 0x5d
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	4e1b      	ldr	r6, [pc, #108]	; (8003a70 <PingTest+0x88>)
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00b      	beq.n	8003a20 <PingTest+0x38>
					if (myRadio.badCrc == 0)
 8003a08:	0023      	movs	r3, r4
 8003a0a:	3360      	adds	r3, #96	; 0x60
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <PingTest+0x30>
						recTime = HAL_GetTick ();
 8003a12:	f001 fb51 	bl	80050b8 <HAL_GetTick>
 8003a16:	6030      	str	r0, [r6, #0]
					myRadio.readBytes = 0;
 8003a18:	0023      	movs	r3, r4
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	335d      	adds	r3, #93	; 0x5d
 8003a1e:	701a      	strb	r2, [r3, #0]
			if (HAL_GetTick () - lastTrans > 2000)
 8003a20:	f001 fb4a 	bl	80050b8 <HAL_GetTick>
 8003a24:	4f13      	ldr	r7, [pc, #76]	; (8003a74 <PingTest+0x8c>)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	1ac0      	subs	r0, r0, r3
 8003a2a:	42a8      	cmp	r0, r5
 8003a2c:	d902      	bls.n	8003a34 <PingTest+0x4c>
				{
					lastTrans = HAL_GetTick ();
 8003a2e:	f001 fb43 	bl	80050b8 <HAL_GetTick>
 8003a32:	6038      	str	r0, [r7, #0]
				}
			if (HAL_GetTick () - recTime < 300)
 8003a34:	f001 fb40 	bl	80050b8 <HAL_GetTick>
 8003a38:	6833      	ldr	r3, [r6, #0]
				HAL_GPIO_WritePin (ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003a3a:	2201      	movs	r2, #1
			if (HAL_GetTick () - recTime < 300)
 8003a3c:	1ac0      	subs	r0, r0, r3
 8003a3e:	2396      	movs	r3, #150	; 0x96
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d300      	bcc.n	8003a48 <PingTest+0x60>
			else
				HAL_GPIO_WritePin (ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003a46:	2200      	movs	r2, #0
 8003a48:	2180      	movs	r1, #128	; 0x80
 8003a4a:	480b      	ldr	r0, [pc, #44]	; (8003a78 <PingTest+0x90>)
 8003a4c:	0189      	lsls	r1, r1, #6
 8003a4e:	f002 f8b7 	bl	8005bc0 <HAL_GPIO_WritePin>

			if (myRadio.status == TX)
 8003a52:	7c23      	ldrb	r3, [r4, #16]
				HAL_GPIO_WritePin (BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 8003a54:	2201      	movs	r2, #1
			if (myRadio.status == TX)
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d000      	beq.n	8003a5c <PingTest+0x74>
			else
				HAL_GPIO_WritePin (BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	4806      	ldr	r0, [pc, #24]	; (8003a78 <PingTest+0x90>)
 8003a60:	0149      	lsls	r1, r1, #5
 8003a62:	f002 f8ad 	bl	8005bc0 <HAL_GPIO_WritePin>
 8003a66:	e7c5      	b.n	80039f4 <PingTest+0xc>
 8003a68:	0800ac71 	.word	0x0800ac71
 8003a6c:	20000234 	.word	0x20000234
 8003a70:	20000224 	.word	0x20000224
 8003a74:	2000021c 	.word	0x2000021c
 8003a78:	50000400 	.word	0x50000400

08003a7c <ledRoutine>:
		}
}

void ledRoutine (SX127X_t *module, nodeSettings_t *settingsPtr)
{
 8003a7c:	b570      	push	{r4, r5, r6, lr}
	static uint32_t lastBlink = 0;
	if (module->signalDetected && settingsPtr->useLed)
 8003a7e:	7f03      	ldrb	r3, [r0, #28]
{
 8003a80:	0005      	movs	r5, r0
 8003a82:	000c      	movs	r4, r1
	if (module->signalDetected && settingsPtr->useLed)
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <ledRoutine+0x14>
 8003a88:	7c0b      	ldrb	r3, [r1, #16]
		HAL_GPIO_WritePin (ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003a8a:	2201      	movs	r2, #1
	if (module->signalDetected && settingsPtr->useLed)
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d100      	bne.n	8003a92 <ledRoutine+0x16>
	else
		HAL_GPIO_WritePin (ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003a90:	2200      	movs	r2, #0
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	4815      	ldr	r0, [pc, #84]	; (8003aec <ledRoutine+0x70>)
 8003a96:	0189      	lsls	r1, r1, #6
 8003a98:	f002 f892 	bl	8005bc0 <HAL_GPIO_WritePin>

	if (module->status == TX && settingsPtr->useLed)
 8003a9c:	7c2b      	ldrb	r3, [r5, #16]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d103      	bne.n	8003aaa <ledRoutine+0x2e>
 8003aa2:	7c23      	ldrb	r3, [r4, #16]
		HAL_GPIO_WritePin (BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 8003aa4:	2201      	movs	r2, #1
	if (module->status == TX && settingsPtr->useLed)
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d100      	bne.n	8003aac <ledRoutine+0x30>
	else
		HAL_GPIO_WritePin (BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2180      	movs	r1, #128	; 0x80
 8003aae:	480f      	ldr	r0, [pc, #60]	; (8003aec <ledRoutine+0x70>)
 8003ab0:	0149      	lsls	r1, r1, #5
 8003ab2:	f002 f885 	bl	8005bc0 <HAL_GPIO_WritePin>

	if (HAL_GetTick () - lastBlink > 5000)
 8003ab6:	f001 faff 	bl	80050b8 <HAL_GetTick>
 8003aba:	4d0d      	ldr	r5, [pc, #52]	; (8003af0 <ledRoutine+0x74>)
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	1ac0      	subs	r0, r0, r3
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <ledRoutine+0x78>)
 8003ac2:	4298      	cmp	r0, r3
 8003ac4:	d902      	bls.n	8003acc <ledRoutine+0x50>
		{
			lastBlink = HAL_GetTick ();
 8003ac6:	f001 faf7 	bl	80050b8 <HAL_GetTick>
 8003aca:	6028      	str	r0, [r5, #0]
		}
	if (HAL_GetTick () - lastBlink < 50 && settingsPtr->useLed)
 8003acc:	f001 faf4 	bl	80050b8 <HAL_GetTick>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	1ac0      	subs	r0, r0, r3
 8003ad4:	2831      	cmp	r0, #49	; 0x31
 8003ad6:	d808      	bhi.n	8003aea <ledRoutine+0x6e>
 8003ad8:	7c23      	ldrb	r3, [r4, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <ledRoutine+0x6e>
		{
			HAL_GPIO_WritePin (BLUE_GPIO_Port, ORANGE_Pin | BLUE_Pin, LED_ON);
 8003ade:	21c0      	movs	r1, #192	; 0xc0
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	4802      	ldr	r0, [pc, #8]	; (8003aec <ledRoutine+0x70>)
 8003ae4:	0189      	lsls	r1, r1, #6
 8003ae6:	f002 f86b 	bl	8005bc0 <HAL_GPIO_WritePin>
		}

}
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	50000400 	.word	0x50000400
 8003af0:	20000218 	.word	0x20000218
 8003af4:	00001388 	.word	0x00001388

08003af8 <printInfo>:

void printInfo (nodeStatus_t *status, uint32_t tm, uint32_t miss)
{
 8003af8:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef DEBUG
	uint32_t time = RTC->TR;
 8003afa:	4b4e      	ldr	r3, [pc, #312]	; (8003c34 <printInfo+0x13c>)
{
 8003afc:	b085      	sub	sp, #20
	uint32_t time = RTC->TR;
 8003afe:	681d      	ldr	r5, [r3, #0]
{
 8003b00:	9203      	str	r2, [sp, #12]
	uint32_t date = RTC->DR;
 8003b02:	685e      	ldr	r6, [r3, #4]
{
 8003b04:	9102      	str	r1, [sp, #8]
 8003b06:	0004      	movs	r4, r0
	uint32_t tick = HAL_GetTick ();
 8003b08:	f001 fad6 	bl	80050b8 <HAL_GetTick>
 8003b0c:	9001      	str	r0, [sp, #4]
	printf ("Status requested\n");
 8003b0e:	484a      	ldr	r0, [pc, #296]	; (8003c38 <printInfo+0x140>)
 8003b10:	f004 fc62 	bl	80083d8 <puts>
	printf ("SysTick: %10lu\n", tick);
 8003b14:	9901      	ldr	r1, [sp, #4]
 8003b16:	4849      	ldr	r0, [pc, #292]	; (8003c3c <printInfo+0x144>)
 8003b18:	f004 fbbe 	bl	8008298 <iprintf>
	printf ("System time: %02x:%02x:%02x\n", (uint16_t) (time >> 16) & 0xFF, (uint16_t) (time >> 8) & 0xFF, (uint16_t) time & 0xFF);
 8003b1c:	27ff      	movs	r7, #255	; 0xff
 8003b1e:	002b      	movs	r3, r5
 8003b20:	0a2a      	lsrs	r2, r5, #8
 8003b22:	0c29      	lsrs	r1, r5, #16
 8003b24:	403b      	ands	r3, r7
 8003b26:	403a      	ands	r2, r7
 8003b28:	4039      	ands	r1, r7
 8003b2a:	4845      	ldr	r0, [pc, #276]	; (8003c40 <printInfo+0x148>)
 8003b2c:	f004 fbb4 	bl	8008298 <iprintf>
	printf ("System date: %x.%02x.%x\n", (uint16_t) date & 0xFF, (uint16_t) (date >> 8) & 0x1F, ((uint16_t) (date >> 16) & 0xFF) + 0x2000);
 8003b30:	2280      	movs	r2, #128	; 0x80
 8003b32:	0031      	movs	r1, r6
 8003b34:	0c33      	lsrs	r3, r6, #16
 8003b36:	0192      	lsls	r2, r2, #6
 8003b38:	403b      	ands	r3, r7
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	04f2      	lsls	r2, r6, #19
 8003b3e:	0ed2      	lsrs	r2, r2, #27
 8003b40:	4039      	ands	r1, r7
 8003b42:	4840      	ldr	r0, [pc, #256]	; (8003c44 <printInfo+0x14c>)
 8003b44:	f004 fba8 	bl	8008298 <iprintf>
	printf ("Voltage: %d.%02d V\n", (int) getVoltage (), ((int) (getVoltage () * 100) % 100));
 8003b48:	f7ff fc8e 	bl	8003468 <getVoltage>
 8003b4c:	1c06      	adds	r6, r0, #0
 8003b4e:	f7ff fc8b 	bl	8003468 <getVoltage>
 8003b52:	493d      	ldr	r1, [pc, #244]	; (8003c48 <printInfo+0x150>)
 8003b54:	f7fd f974 	bl	8000e40 <__aeabi_fmul>
 8003b58:	f7fd fc54 	bl	8001404 <__aeabi_f2iz>
 8003b5c:	2164      	movs	r1, #100	; 0x64
 8003b5e:	f7fc fc5f 	bl	8000420 <__aeabi_idivmod>
 8003b62:	1c30      	adds	r0, r6, #0
 8003b64:	000d      	movs	r5, r1
 8003b66:	f7fd fc4d 	bl	8001404 <__aeabi_f2iz>
 8003b6a:	002a      	movs	r2, r5
 8003b6c:	0001      	movs	r1, r0
 8003b6e:	4837      	ldr	r0, [pc, #220]	; (8003c4c <printInfo+0x154>)
 8003b70:	f004 fb92 	bl	8008298 <iprintf>
	printf ("Temp: %d.%01d C\n", (int) getTemperature (), ((int) (getTemperature () * 10) % 10));
 8003b74:	f7ff fca2 	bl	80034bc <getTemperature>
 8003b78:	1c06      	adds	r6, r0, #0
 8003b7a:	f7ff fc9f 	bl	80034bc <getTemperature>
 8003b7e:	4934      	ldr	r1, [pc, #208]	; (8003c50 <printInfo+0x158>)
 8003b80:	f7fd f95e 	bl	8000e40 <__aeabi_fmul>
 8003b84:	f7fd fc3e 	bl	8001404 <__aeabi_f2iz>
 8003b88:	210a      	movs	r1, #10
 8003b8a:	f7fc fc49 	bl	8000420 <__aeabi_idivmod>
 8003b8e:	1c30      	adds	r0, r6, #0
 8003b90:	000d      	movs	r5, r1
 8003b92:	f7fd fc37 	bl	8001404 <__aeabi_f2iz>
 8003b96:	002a      	movs	r2, r5
 8003b98:	0001      	movs	r1, r0
 8003b9a:	482e      	ldr	r0, [pc, #184]	; (8003c54 <printInfo+0x15c>)
 8003b9c:	f004 fb7c 	bl	8008298 <iprintf>
	printf ("Powered: %s\n", status->powered ? "Yes" : "No");
 8003ba0:	7923      	ldrb	r3, [r4, #4]
 8003ba2:	492d      	ldr	r1, [pc, #180]	; (8003c58 <printInfo+0x160>)
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d100      	bne.n	8003baa <printInfo+0xb2>
 8003ba8:	492c      	ldr	r1, [pc, #176]	; (8003c5c <printInfo+0x164>)
 8003baa:	482d      	ldr	r0, [pc, #180]	; (8003c60 <printInfo+0x168>)
 8003bac:	f004 fb74 	bl	8008298 <iprintf>
	printf ("Powered to confirm: %s\n", status->poweredToConfirm ? "Yes" : "No");
 8003bb0:	79a3      	ldrb	r3, [r4, #6]
 8003bb2:	4929      	ldr	r1, [pc, #164]	; (8003c58 <printInfo+0x160>)
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d100      	bne.n	8003bba <printInfo+0xc2>
 8003bb8:	4928      	ldr	r1, [pc, #160]	; (8003c5c <printInfo+0x164>)
 8003bba:	482a      	ldr	r0, [pc, #168]	; (8003c64 <printInfo+0x16c>)
 8003bbc:	f004 fb6c 	bl	8008298 <iprintf>
	printf ("Disarmed: %s\n", status->disarmed ? "Yes" : "No");
 8003bc0:	7823      	ldrb	r3, [r4, #0]
 8003bc2:	4925      	ldr	r1, [pc, #148]	; (8003c58 <printInfo+0x160>)
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d100      	bne.n	8003bca <printInfo+0xd2>
 8003bc8:	4924      	ldr	r1, [pc, #144]	; (8003c5c <printInfo+0x164>)
 8003bca:	4827      	ldr	r0, [pc, #156]	; (8003c68 <printInfo+0x170>)
 8003bcc:	f004 fb64 	bl	8008298 <iprintf>
	printf ("Door opened: %s\n", status->opened ? "Yes" : "No");
 8003bd0:	7863      	ldrb	r3, [r4, #1]
 8003bd2:	4921      	ldr	r1, [pc, #132]	; (8003c58 <printInfo+0x160>)
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d100      	bne.n	8003bda <printInfo+0xe2>
 8003bd8:	4920      	ldr	r1, [pc, #128]	; (8003c5c <printInfo+0x164>)
 8003bda:	4824      	ldr	r0, [pc, #144]	; (8003c6c <printInfo+0x174>)
 8003bdc:	f004 fb5c 	bl	8008298 <iprintf>
	printf ("Opened to confirm: %s\n", status->openedToConfirm ? "Yes" : "No");
 8003be0:	78e3      	ldrb	r3, [r4, #3]
 8003be2:	491d      	ldr	r1, [pc, #116]	; (8003c58 <printInfo+0x160>)
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d100      	bne.n	8003bea <printInfo+0xf2>
 8003be8:	491c      	ldr	r1, [pc, #112]	; (8003c5c <printInfo+0x164>)
 8003bea:	4821      	ldr	r0, [pc, #132]	; (8003c70 <printInfo+0x178>)
 8003bec:	f004 fb54 	bl	8008298 <iprintf>
	printf ("Unconfirmed opening: %s\n", status->unconfirmedOpening ? "Yes" : "No");
 8003bf0:	79e3      	ldrb	r3, [r4, #7]
 8003bf2:	4919      	ldr	r1, [pc, #100]	; (8003c58 <printInfo+0x160>)
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d100      	bne.n	8003bfa <printInfo+0x102>
 8003bf8:	4918      	ldr	r1, [pc, #96]	; (8003c5c <printInfo+0x164>)
 8003bfa:	481e      	ldr	r0, [pc, #120]	; (8003c74 <printInfo+0x17c>)
 8003bfc:	f004 fb4c 	bl	8008298 <iprintf>
	printf ("Radio status: %s\n", statuses[myRadio.status]);
 8003c00:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <printInfo+0x180>)
 8003c02:	4a1e      	ldr	r2, [pc, #120]	; (8003c7c <printInfo+0x184>)
 8003c04:	7c1b      	ldrb	r3, [r3, #16]
 8003c06:	481e      	ldr	r0, [pc, #120]	; (8003c80 <printInfo+0x188>)
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	5899      	ldr	r1, [r3, r2]
 8003c0c:	f004 fb44 	bl	8008298 <iprintf>
	printf ("Message count: %lu\n", tm);
 8003c10:	9902      	ldr	r1, [sp, #8]
 8003c12:	481c      	ldr	r0, [pc, #112]	; (8003c84 <printInfo+0x18c>)
 8003c14:	f004 fb40 	bl	8008298 <iprintf>
	printf ("Without acknowledge: %lu\n", miss);
 8003c18:	9903      	ldr	r1, [sp, #12]
 8003c1a:	481b      	ldr	r0, [pc, #108]	; (8003c88 <printInfo+0x190>)
 8003c1c:	f004 fb3c 	bl	8008298 <iprintf>
	printf ("Displayed in : %lu ms\n", HAL_GetTick () - tick);
 8003c20:	f001 fa4a 	bl	80050b8 <HAL_GetTick>
 8003c24:	9b01      	ldr	r3, [sp, #4]
 8003c26:	1ac1      	subs	r1, r0, r3
 8003c28:	4818      	ldr	r0, [pc, #96]	; (8003c8c <printInfo+0x194>)
 8003c2a:	f004 fb35 	bl	8008298 <iprintf>
#endif
}
 8003c2e:	b005      	add	sp, #20
 8003c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	40002800 	.word	0x40002800
 8003c38:	0800ac8c 	.word	0x0800ac8c
 8003c3c:	0800ac9d 	.word	0x0800ac9d
 8003c40:	0800acad 	.word	0x0800acad
 8003c44:	0800acca 	.word	0x0800acca
 8003c48:	42c80000 	.word	0x42c80000
 8003c4c:	0800ace3 	.word	0x0800ace3
 8003c50:	41200000 	.word	0x41200000
 8003c54:	0800acf7 	.word	0x0800acf7
 8003c58:	0800ac85 	.word	0x0800ac85
 8003c5c:	0800ac89 	.word	0x0800ac89
 8003c60:	0800ad08 	.word	0x0800ad08
 8003c64:	0800ad15 	.word	0x0800ad15
 8003c68:	0800ad2d 	.word	0x0800ad2d
 8003c6c:	0800ad3b 	.word	0x0800ad3b
 8003c70:	0800ad4c 	.word	0x0800ad4c
 8003c74:	0800ad63 	.word	0x0800ad63
 8003c78:	20000234 	.word	0x20000234
 8003c7c:	20000004 	.word	0x20000004
 8003c80:	0800ad7c 	.word	0x0800ad7c
 8003c84:	0800ad8e 	.word	0x0800ad8e
 8003c88:	0800ada2 	.word	0x0800ada2
 8003c8c:	0800adbc 	.word	0x0800adbc

08003c90 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler (void)
{
 8003c90:	b510      	push	{r4, lr}
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	debugLog ("Error!");
 8003c92:	4802      	ldr	r0, [pc, #8]	; (8003c9c <Error_Handler+0xc>)
 8003c94:	f7ff fbd2 	bl	800343c <debugLog>
	/* USER CODE END Error_Handler_Debug */
}
 8003c98:	bd10      	pop	{r4, pc}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	0800add3 	.word	0x0800add3

08003ca0 <SystemClock_Config>:
{
 8003ca0:	b530      	push	{r4, r5, lr}
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003ca2:	2414      	movs	r4, #20
{
 8003ca4:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003ca6:	2234      	movs	r2, #52	; 0x34
 8003ca8:	2100      	movs	r1, #0
 8003caa:	a80d      	add	r0, sp, #52	; 0x34
 8003cac:	f003 fe71 	bl	8007992 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003cb0:	0022      	movs	r2, r4
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	a801      	add	r0, sp, #4
 8003cb6:	f003 fe6c 	bl	8007992 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8003cba:	221c      	movs	r2, #28
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	a806      	add	r0, sp, #24
 8003cc0:	f003 fe67 	bl	8007992 <memset>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	4922      	ldr	r1, [pc, #136]	; (8003d50 <SystemClock_Config+0xb0>)
 8003cc8:	4d22      	ldr	r5, [pc, #136]	; (8003d54 <SystemClock_Config+0xb4>)
 8003cca:	680a      	ldr	r2, [r1, #0]
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	402a      	ands	r2, r5
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	600b      	str	r3, [r1, #0]
	HAL_PWR_EnableBkUpAccess ();
 8003cd4:	f002 f902 	bl	8005edc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8003cd8:	491f      	ldr	r1, [pc, #124]	; (8003d58 <SystemClock_Config+0xb8>)
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003cda:	22a0      	movs	r2, #160	; 0xa0
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8003cdc:	6d0b      	ldr	r3, [r1, #80]	; 0x50
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003cde:	0212      	lsls	r2, r2, #8
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8003ce0:	401d      	ands	r5, r3
 8003ce2:	2380      	movs	r3, #128	; 0x80
 8003ce4:	015b      	lsls	r3, r3, #5
 8003ce6:	432b      	orrs	r3, r5
 8003ce8:	650b      	str	r3, [r1, #80]	; 0x50
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003cf0:	3bff      	subs	r3, #255	; 0xff
 8003cf2:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8003cf4:	2300      	movs	r3, #0
	if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8003cf6:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8003cf8:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8003cfa:	9314      	str	r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003cfc:	9215      	str	r2, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003cfe:	9316      	str	r3, [sp, #88]	; 0x58
	if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8003d00:	f002 f97a 	bl	8005ff8 <HAL_RCC_OscConfig>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d001      	beq.n	8003d0c <SystemClock_Config+0x6c>
			Error_Handler ();
 8003d08:	f7ff ffc2 	bl	8003c90 <Error_Handler>
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003d0c:	2100      	movs	r1, #0
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d0e:	230f      	movs	r3, #15
	if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003d10:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d12:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003d14:	9102      	str	r1, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d16:	9103      	str	r1, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d18:	9104      	str	r1, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d1a:	9105      	str	r1, [sp, #20]
	if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003d1c:	f002 fbb4 	bl	8006488 <HAL_RCC_ClockConfig>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d001      	beq.n	8003d28 <SystemClock_Config+0x88>
			Error_Handler ();
 8003d24:	f7ff ffb4 	bl	8003c90 <Error_Handler>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_LPTIM1;
 8003d28:	23a1      	movs	r3, #161	; 0xa1
 8003d2a:	9306      	str	r3, [sp, #24]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9308      	str	r3, [sp, #32]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	025b      	lsls	r3, r3, #9
 8003d34:	9307      	str	r3, [sp, #28]
	PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8003d36:	23c0      	movs	r3, #192	; 0xc0
	if (HAL_RCCEx_PeriphCLKConfig (&PeriphClkInit) != HAL_OK)
 8003d38:	a806      	add	r0, sp, #24
	PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8003d3a:	031b      	lsls	r3, r3, #12
 8003d3c:	930c      	str	r3, [sp, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig (&PeriphClkInit) != HAL_OK)
 8003d3e:	f002 fc91 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d001      	beq.n	8003d4a <SystemClock_Config+0xaa>
			Error_Handler ();
 8003d46:	f7ff ffa3 	bl	8003c90 <Error_Handler>
}
 8003d4a:	b01b      	add	sp, #108	; 0x6c
 8003d4c:	bd30      	pop	{r4, r5, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	40007000 	.word	0x40007000
 8003d54:	ffffe7ff 	.word	0xffffe7ff
 8003d58:	40021000 	.word	0x40021000

08003d5c <main>:
{
 8003d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5e:	b09b      	sub	sp, #108	; 0x6c
	nodeStatus_t status = { 0, };
 8003d60:	2208      	movs	r2, #8
 8003d62:	2100      	movs	r1, #0
 8003d64:	a80c      	add	r0, sp, #48	; 0x30
 8003d66:	f003 fe14 	bl	8007992 <memset>
	nodeSettings_t settings = { 0, };
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	221c      	movs	r2, #28
 8003d6e:	a813      	add	r0, sp, #76	; 0x4c
 8003d70:	f003 fe0f 	bl	8007992 <memset>
	workInterval = &settings.workInterval;
 8003d74:	4bdd      	ldr	r3, [pc, #884]	; (80040ec <main+0x390>)
 8003d76:	aa14      	add	r2, sp, #80	; 0x50
 8003d78:	601a      	str	r2, [r3, #0]
	HAL_Init ();
 8003d7a:	f001 f97d 	bl	8005078 <HAL_Init>
	SystemClock_Config ();
 8003d7e:	f7ff ff8f 	bl	8003ca0 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003d82:	2214      	movs	r2, #20
 8003d84:	2100      	movs	r1, #0
 8003d86:	a80e      	add	r0, sp, #56	; 0x38
 8003d88:	f003 fe03 	bl	8007992 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8c:	2104      	movs	r1, #4
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003d8e:	2601      	movs	r6, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003d90:	2702      	movs	r7, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003d92:	4dd7      	ldr	r5, [pc, #860]	; (80040f0 <main+0x394>)
	HAL_GPIO_WritePin (GPIOA, TempPower_Pin | RESET_Pin | NSS_Pin, GPIO_PIN_RESET);
 8003d94:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003d96:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	HAL_GPIO_WritePin (GPIOA, TempPower_Pin | RESET_Pin | NSS_Pin, GPIO_PIN_RESET);
 8003d98:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	62ea      	str	r2, [r5, #44]	; 0x2c
 8003d9e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da0:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003da2:	400b      	ands	r3, r1
 8003da4:	9308      	str	r3, [sp, #32]
 8003da6:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003da8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003daa:	317c      	adds	r1, #124	; 0x7c
 8003dac:	430a      	orrs	r2, r1
 8003dae:	62ea      	str	r2, [r5, #44]	; 0x2c
 8003db0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	HAL_GPIO_WritePin (GPIOA, TempPower_Pin | RESET_Pin | NSS_Pin, GPIO_PIN_RESET);
 8003db2:	2200      	movs	r2, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003db4:	400b      	ands	r3, r1
 8003db6:	9309      	str	r3, [sp, #36]	; 0x24
 8003db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003dba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	HAL_GPIO_WritePin (GPIOA, TempPower_Pin | RESET_Pin | NSS_Pin, GPIO_PIN_RESET);
 8003dbc:	3966      	subs	r1, #102	; 0x66
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003dbe:	4333      	orrs	r3, r6
 8003dc0:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003dc2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003dc4:	4033      	ands	r3, r6
 8003dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8003dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003dca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003dcc:	433b      	orrs	r3, r7
 8003dce:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003dd0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003dd2:	403b      	ands	r3, r7
 8003dd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	HAL_GPIO_WritePin (GPIOA, TempPower_Pin | RESET_Pin | NSS_Pin, GPIO_PIN_RESET);
 8003dd8:	f001 fef2 	bl	8005bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, BLUE_Pin | ORANGE_Pin, GPIO_PIN_RESET);
 8003ddc:	21c0      	movs	r1, #192	; 0xc0
 8003dde:	2200      	movs	r2, #0
 8003de0:	48c4      	ldr	r0, [pc, #784]	; (80040f4 <main+0x398>)
 8003de2:	0189      	lsls	r1, r1, #6
 8003de4:	f001 feec 	bl	8005bc0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	019b      	lsls	r3, r3, #6
 8003dec:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dee:	2303      	movs	r3, #3
	HAL_GPIO_Init (GPIOC, &GPIO_InitStruct);
 8003df0:	48c1      	ldr	r0, [pc, #772]	; (80040f8 <main+0x39c>)
 8003df2:	a90e      	add	r1, sp, #56	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003df4:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df6:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init (GPIOC, &GPIO_InitStruct);
 8003df8:	f001 fe22 	bl	8005a40 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003dfc:	2303      	movs	r3, #3
	HAL_GPIO_Init (GPIOH, &GPIO_InitStruct);
 8003dfe:	48bf      	ldr	r0, [pc, #764]	; (80040fc <main+0x3a0>)
 8003e00:	a90e      	add	r1, sp, #56	; 0x38
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003e02:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e04:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init (GPIOH, &GPIO_InitStruct);
 8003e08:	f001 fe1a 	bl	8005a40 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = D1_Pin | extPower_Pin;
 8003e0c:	2302      	movs	r3, #2
	HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 8003e0e:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = D1_Pin | extPower_Pin;
 8003e10:	33ff      	adds	r3, #255	; 0xff
 8003e12:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003e14:	4bba      	ldr	r3, [pc, #744]	; (8004100 <main+0x3a4>)
	HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 8003e16:	a90e      	add	r1, sp, #56	; 0x38
 8003e18:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003e1a:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e1c:	9710      	str	r7, [sp, #64]	; 0x40
	HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 8003e1e:	f001 fe0f 	bl	8005a40 <HAL_GPIO_Init>
	HAL_GPIO_Init (TempPower_GPIO_Port, &GPIO_InitStruct);
 8003e22:	20a0      	movs	r0, #160	; 0xa0
 8003e24:	a90e      	add	r1, sp, #56	; 0x38
 8003e26:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = TempPower_Pin;
 8003e28:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e2a:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2c:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2e:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init (TempPower_GPIO_Port, &GPIO_InitStruct);
 8003e30:	f001 fe06 	bl	8005a40 <HAL_GPIO_Init>
	HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 8003e34:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = RESET_Pin | NSS_Pin;
 8003e36:	2318      	movs	r3, #24
	HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 8003e38:	a90e      	add	r1, sp, #56	; 0x38
 8003e3a:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = RESET_Pin | NSS_Pin;
 8003e3c:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e3e:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e40:	9711      	str	r7, [sp, #68]	; 0x44
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 8003e44:	f001 fdfc 	bl	8005a40 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_3 | GPIO_PIN_4
 8003e48:	4bae      	ldr	r3, [pc, #696]	; (8004104 <main+0x3a8>)
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e4a:	19bf      	adds	r7, r7, r6
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8003e4c:	48a9      	ldr	r0, [pc, #676]	; (80040f4 <main+0x398>)
 8003e4e:	a90e      	add	r1, sp, #56	; 0x38
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_3 | GPIO_PIN_4
 8003e50:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e52:	970f      	str	r7, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8003e56:	f001 fdf3 	bl	8005a40 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = BLUE_Pin | ORANGE_Pin;
 8003e5a:	23c0      	movs	r3, #192	; 0xc0
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8003e5c:	48a5      	ldr	r0, [pc, #660]	; (80040f4 <main+0x398>)
	GPIO_InitStruct.Pin = BLUE_Pin | ORANGE_Pin;
 8003e5e:	019b      	lsls	r3, r3, #6
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8003e60:	a90e      	add	r1, sp, #56	; 0x38
	GPIO_InitStruct.Pin = BLUE_Pin | ORANGE_Pin;
 8003e62:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e64:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e68:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8003e6a:	f001 fde9 	bl	8005a40 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 8003e6e:	2398      	movs	r3, #152	; 0x98
	HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 8003e70:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 8003e72:	021b      	lsls	r3, r3, #8
	HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 8003e74:	a90e      	add	r1, sp, #56	; 0x38
 8003e76:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 8003e78:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e7a:	970f      	str	r7, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 8003e7e:	f001 fddf 	bl	8005a40 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER1_Pin | USER2_Pin;
 8003e82:	23c0      	movs	r3, #192	; 0xc0
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8003e84:	489b      	ldr	r0, [pc, #620]	; (80040f4 <main+0x398>)
 8003e86:	a90e      	add	r1, sp, #56	; 0x38
	GPIO_InitStruct.Pin = USER1_Pin | USER2_Pin;
 8003e88:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e8a:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e8c:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8003e8e:	f001 fdd7 	bl	8005a40 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority (EXTI0_1_IRQn, 1, 0);
 8003e92:	0031      	movs	r1, r6
 8003e94:	0022      	movs	r2, r4
 8003e96:	2005      	movs	r0, #5
 8003e98:	f001 fb90 	bl	80055bc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (EXTI0_1_IRQn);
 8003e9c:	2005      	movs	r0, #5
 8003e9e:	f001 fbb7 	bl	8005610 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority (EXTI4_15_IRQn, 1, 0);
 8003ea2:	0031      	movs	r1, r6
 8003ea4:	0022      	movs	r2, r4
 8003ea6:	2007      	movs	r0, #7
 8003ea8:	f001 fb88 	bl	80055bc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (EXTI4_15_IRQn);
 8003eac:	2007      	movs	r0, #7
 8003eae:	f001 fbaf 	bl	8005610 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003eb2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority (DMA1_Channel1_IRQn, 0, 0);
 8003eb4:	0022      	movs	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003eb6:	4333      	orrs	r3, r6
 8003eb8:	632b      	str	r3, [r5, #48]	; 0x30
 8003eba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority (DMA1_Channel1_IRQn, 0, 0);
 8003ebc:	0021      	movs	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003ebe:	401e      	ands	r6, r3
	HAL_NVIC_SetPriority (DMA1_Channel1_IRQn, 0, 0);
 8003ec0:	2009      	movs	r0, #9
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003ec2:	9607      	str	r6, [sp, #28]
 8003ec4:	9b07      	ldr	r3, [sp, #28]
	HAL_NVIC_SetPriority (DMA1_Channel1_IRQn, 0, 0);
 8003ec6:	f001 fb79 	bl	80055bc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (DMA1_Channel1_IRQn);
 8003eca:	2009      	movs	r0, #9
 8003ecc:	f001 fba0 	bl	8005610 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority (DMA1_Channel2_3_IRQn, 0, 0);
 8003ed0:	0022      	movs	r2, r4
 8003ed2:	0021      	movs	r1, r4
 8003ed4:	200a      	movs	r0, #10
 8003ed6:	f001 fb71 	bl	80055bc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (DMA1_Channel2_3_IRQn);
 8003eda:	200a      	movs	r0, #10
 8003edc:	f001 fb98 	bl	8005610 <HAL_NVIC_EnableIRQ>
	hrtc.Instance = RTC;
 8003ee0:	4d89      	ldr	r5, [pc, #548]	; (8004108 <main+0x3ac>)
 8003ee2:	4b8a      	ldr	r3, [pc, #552]	; (800410c <main+0x3b0>)
	if (HAL_RTC_Init (&hrtc) != HAL_OK)
 8003ee4:	0028      	movs	r0, r5
	hrtc.Instance = RTC;
 8003ee6:	602b      	str	r3, [r5, #0]
	hrtc.Init.AsynchPrediv = 127;
 8003ee8:	237f      	movs	r3, #127	; 0x7f
 8003eea:	60ab      	str	r3, [r5, #8]
	hrtc.Init.SynchPrediv = 255;
 8003eec:	3380      	adds	r3, #128	; 0x80
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003eee:	606c      	str	r4, [r5, #4]
	hrtc.Init.SynchPrediv = 255;
 8003ef0:	60eb      	str	r3, [r5, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003ef2:	612c      	str	r4, [r5, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003ef4:	616c      	str	r4, [r5, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003ef6:	61ac      	str	r4, [r5, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003ef8:	61ec      	str	r4, [r5, #28]
	if (HAL_RTC_Init (&hrtc) != HAL_OK)
 8003efa:	f002 fcad 	bl	8006858 <HAL_RTC_Init>
 8003efe:	42a0      	cmp	r0, r4
 8003f00:	d001      	beq.n	8003f06 <main+0x1aa>
			Error_Handler ();
 8003f02:	f7ff fec5 	bl	8003c90 <Error_Handler>
	if (HAL_RTCEx_SetWakeUpTimer_IT (&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003f06:	2204      	movs	r2, #4
 8003f08:	213c      	movs	r1, #60	; 0x3c
 8003f0a:	0028      	movs	r0, r5
 8003f0c:	f002 fd00 	bl	8006910 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d001      	beq.n	8003f18 <main+0x1bc>
			Error_Handler ();
 8003f14:	f7ff febc 	bl	8003c90 <Error_Handler>
	hspi1.Instance = SPI1;
 8003f18:	487d      	ldr	r0, [pc, #500]	; (8004110 <main+0x3b4>)
 8003f1a:	4b7e      	ldr	r3, [pc, #504]	; (8004114 <main+0x3b8>)
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f1c:	2280      	movs	r2, #128	; 0x80
	hspi1.Instance = SPI1;
 8003f1e:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f20:	2382      	movs	r3, #130	; 0x82
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	6043      	str	r3, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f26:	2300      	movs	r3, #0
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f28:	0092      	lsls	r2, r2, #2
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f2a:	6083      	str	r3, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f2c:	60c3      	str	r3, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f2e:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f30:	6143      	str	r3, [r0, #20]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f32:	61c3      	str	r3, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f34:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f36:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f38:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8003f3a:	3307      	adds	r3, #7
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f3c:	6182      	str	r2, [r0, #24]
	hspi1.Init.CRCPolynomial = 7;
 8003f3e:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init (&hspi1) != HAL_OK)
 8003f40:	f002 fe0c 	bl	8006b5c <HAL_SPI_Init>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d001      	beq.n	8003f4c <main+0x1f0>
			Error_Handler ();
 8003f48:	f7ff fea2 	bl	8003c90 <Error_Handler>
	huart1.Instance = USART1;
 8003f4c:	4d72      	ldr	r5, [pc, #456]	; (8004118 <main+0x3bc>)
 8003f4e:	4b73      	ldr	r3, [pc, #460]	; (800411c <main+0x3c0>)
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003f50:	220c      	movs	r2, #12
	huart1.Instance = USART1;
 8003f52:	602b      	str	r3, [r5, #0]
	huart1.Init.BaudRate = 9600;
 8003f54:	2396      	movs	r3, #150	; 0x96
 8003f56:	019b      	lsls	r3, r3, #6
 8003f58:	606b      	str	r3, [r5, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f5a:	2300      	movs	r3, #0
	if (HAL_UART_Init (&huart1) != HAL_OK)
 8003f5c:	0028      	movs	r0, r5
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f5e:	60ab      	str	r3, [r5, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003f60:	60eb      	str	r3, [r5, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003f62:	612b      	str	r3, [r5, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003f64:	616a      	str	r2, [r5, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f66:	61ab      	str	r3, [r5, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f68:	61eb      	str	r3, [r5, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f6a:	622b      	str	r3, [r5, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f6c:	626b      	str	r3, [r5, #36]	; 0x24
	if (HAL_UART_Init (&huart1) != HAL_OK)
 8003f6e:	f003 fc19 	bl	80077a4 <HAL_UART_Init>
 8003f72:	2800      	cmp	r0, #0
 8003f74:	d001      	beq.n	8003f7a <main+0x21e>
			Error_Handler ();
 8003f76:	f7ff fe8b 	bl	8003c90 <Error_Handler>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	a80e      	add	r0, sp, #56	; 0x38
 8003f80:	f003 fd07 	bl	8007992 <memset>
	hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8003f84:	2207      	movs	r2, #7
	hadc.Init.OversamplingMode = DISABLE;
 8003f86:	4c66      	ldr	r4, [pc, #408]	; (8004120 <main+0x3c4>)
 8003f88:	2300      	movs	r3, #0
	hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8003f8a:	63a2      	str	r2, [r4, #56]	; 0x38
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f8c:	22c2      	movs	r2, #194	; 0xc2
 8003f8e:	32ff      	adds	r2, #255	; 0xff
 8003f90:	6262      	str	r2, [r4, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 8003f92:	0022      	movs	r2, r4
	hadc.Instance = ADC1;
 8003f94:	4963      	ldr	r1, [pc, #396]	; (8004124 <main+0x3c8>)
	hadc.Init.DMAContinuousRequests = DISABLE;
 8003f96:	322c      	adds	r2, #44	; 0x2c
 8003f98:	7013      	strb	r3, [r2, #0]
	hadc.Instance = ADC1;
 8003f9a:	6021      	str	r1, [r4, #0]
	hadc.Init.LowPowerFrequencyMode = ENABLE;
 8003f9c:	2201      	movs	r2, #1
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8003f9e:	21c0      	movs	r1, #192	; 0xc0
	hadc.Init.LowPowerFrequencyMode = ENABLE;
 8003fa0:	6362      	str	r2, [r4, #52]	; 0x34
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8003fa2:	0609      	lsls	r1, r1, #24
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003fa4:	6122      	str	r2, [r4, #16]
	if (HAL_ADC_Init (&hadc) != HAL_OK)
 8003fa6:	0020      	movs	r0, r4
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003fa8:	3203      	adds	r2, #3
	hadc.Init.ContinuousConvMode = DISABLE;
 8003faa:	8423      	strh	r3, [r4, #32]
	hadc.Init.OversamplingMode = DISABLE;
 8003fac:	63e3      	str	r3, [r4, #60]	; 0x3c
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003fae:	62a3      	str	r3, [r4, #40]	; 0x28
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003fb0:	6323      	str	r3, [r4, #48]	; 0x30
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8003fb2:	6061      	str	r1, [r4, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003fb4:	60a3      	str	r3, [r4, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fb6:	60e3      	str	r3, [r4, #12]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003fb8:	6162      	str	r2, [r4, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8003fba:	61a3      	str	r3, [r4, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003fbc:	61e3      	str	r3, [r4, #28]
	if (HAL_ADC_Init (&hadc) != HAL_OK)
 8003fbe:	f001 f8e9 	bl	8005194 <HAL_ADC_Init>
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	d001      	beq.n	8003fca <main+0x26e>
			Error_Handler ();
 8003fc6:	f7ff fe63 	bl	8003c90 <Error_Handler>
	sConfig.Channel = ADC_CHANNEL_2;
 8003fca:	4b57      	ldr	r3, [pc, #348]	; (8004128 <main+0x3cc>)
	if (HAL_ADC_ConfigChannel (&hadc, &sConfig) != HAL_OK)
 8003fcc:	0020      	movs	r0, r4
	sConfig.Channel = ADC_CHANNEL_2;
 8003fce:	930e      	str	r3, [sp, #56]	; 0x38
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003fd0:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel (&hadc, &sConfig) != HAL_OK)
 8003fd2:	a90e      	add	r1, sp, #56	; 0x38
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003fd4:	015b      	lsls	r3, r3, #5
 8003fd6:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_ADC_ConfigChannel (&hadc, &sConfig) != HAL_OK)
 8003fd8:	f001 fa4c 	bl	8005474 <HAL_ADC_ConfigChannel>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d001      	beq.n	8003fe4 <main+0x288>
			Error_Handler ();
 8003fe0:	f7ff fe56 	bl	8003c90 <Error_Handler>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003fe4:	4b51      	ldr	r3, [pc, #324]	; (800412c <main+0x3d0>)
	if (HAL_ADC_ConfigChannel (&hadc, &sConfig) != HAL_OK)
 8003fe6:	0020      	movs	r0, r4
 8003fe8:	a90e      	add	r1, sp, #56	; 0x38
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003fea:	930e      	str	r3, [sp, #56]	; 0x38
	if (HAL_ADC_ConfigChannel (&hadc, &sConfig) != HAL_OK)
 8003fec:	f001 fa42 	bl	8005474 <HAL_ADC_ConfigChannel>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d001      	beq.n	8003ff8 <main+0x29c>
			Error_Handler ();
 8003ff4:	f7ff fe4c 	bl	8003c90 <Error_Handler>
	hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8003ff8:	22e0      	movs	r2, #224	; 0xe0
	hlptim1.Instance = LPTIM1;
 8003ffa:	4e4d      	ldr	r6, [pc, #308]	; (8004130 <main+0x3d4>)
 8003ffc:	4b4d      	ldr	r3, [pc, #308]	; (8004134 <main+0x3d8>)
	hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8003ffe:	0112      	lsls	r2, r2, #4
	hlptim1.Instance = LPTIM1;
 8004000:	6033      	str	r3, [r6, #0]
	hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8004002:	2300      	movs	r3, #0
	hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8004004:	60b2      	str	r2, [r6, #8]
	hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8004006:	4a4c      	ldr	r2, [pc, #304]	; (8004138 <main+0x3dc>)
	if (HAL_LPTIM_Init (&hlptim1) != HAL_OK)
 8004008:	0030      	movs	r0, r6
	hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800400a:	6073      	str	r3, [r6, #4]
	hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800400c:	6172      	str	r2, [r6, #20]
	hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800400e:	6233      	str	r3, [r6, #32]
	hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8004010:	6273      	str	r3, [r6, #36]	; 0x24
	hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8004012:	62b3      	str	r3, [r6, #40]	; 0x28
	if (HAL_LPTIM_Init (&hlptim1) != HAL_OK)
 8004014:	f001 fe06 	bl	8005c24 <HAL_LPTIM_Init>
 8004018:	2800      	cmp	r0, #0
 800401a:	d001      	beq.n	8004020 <main+0x2c4>
			Error_Handler ();
 800401c:	f7ff fe38 	bl	8003c90 <Error_Handler>
	hwwdg.Instance = WWDG;
 8004020:	4846      	ldr	r0, [pc, #280]	; (800413c <main+0x3e0>)
 8004022:	4b47      	ldr	r3, [pc, #284]	; (8004140 <main+0x3e4>)
 8004024:	6003      	str	r3, [r0, #0]
	hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 8004026:	23c0      	movs	r3, #192	; 0xc0
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	6043      	str	r3, [r0, #4]
	hwwdg.Init.Window = 127;
 800402c:	3b02      	subs	r3, #2
 800402e:	3bff      	subs	r3, #255	; 0xff
 8004030:	6083      	str	r3, [r0, #8]
	hwwdg.Init.Counter = 127;
 8004032:	60c3      	str	r3, [r0, #12]
	hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8004034:	2300      	movs	r3, #0
 8004036:	6103      	str	r3, [r0, #16]
	if (HAL_WWDG_Init (&hwwdg) != HAL_OK)
 8004038:	f003 fc5d 	bl	80078f6 <HAL_WWDG_Init>
 800403c:	2800      	cmp	r0, #0
 800403e:	d001      	beq.n	8004044 <main+0x2e8>
			Error_Handler ();
 8004040:	f7ff fe26 	bl	8003c90 <Error_Handler>
	initUart (&huart1, &hdma_usart1_rx, &myRadio);
 8004044:	4a3f      	ldr	r2, [pc, #252]	; (8004144 <main+0x3e8>)
 8004046:	0028      	movs	r0, r5
 8004048:	493f      	ldr	r1, [pc, #252]	; (8004148 <main+0x3ec>)
 800404a:	f000 fef7 	bl	8004e3c <initUart>
	HAL_LPTIM_Counter_Start_IT (&hlptim1, 256 * WATCHDOG_INTERVAL);
 800404e:	21f0      	movs	r1, #240	; 0xf0
 8004050:	0030      	movs	r0, r6
 8004052:	01c9      	lsls	r1, r1, #7
 8004054:	f001 fefe 	bl	8005e54 <HAL_LPTIM_Counter_Start_IT>
	printf ("<ANv%lx>\n", SOFTWARE_REVISION);
 8004058:	493c      	ldr	r1, [pc, #240]	; (800414c <main+0x3f0>)
 800405a:	483d      	ldr	r0, [pc, #244]	; (8004150 <main+0x3f4>)
 800405c:	f004 f91c 	bl	8008298 <iprintf>
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk | DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk;
 8004060:	23c0      	movs	r3, #192	; 0xc0
 8004062:	4a3c      	ldr	r2, [pc, #240]	; (8004154 <main+0x3f8>)
 8004064:	015b      	lsls	r3, r3, #5
 8004066:	6891      	ldr	r1, [r2, #8]
	HAL_ADCEx_Calibration_Start (&hadc, ADC_SINGLE_ENDED);
 8004068:	0020      	movs	r0, r4
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk | DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk;
 800406a:	430b      	orrs	r3, r1
 800406c:	6093      	str	r3, [r2, #8]
	HAL_ADCEx_Calibration_Start (&hadc, ADC_SINGLE_ENDED);
 800406e:	2100      	movs	r1, #0
 8004070:	f001 fa54 	bl	800551c <HAL_ADCEx_Calibration_Start>
	RadioInit (&settings);
 8004074:	a813      	add	r0, sp, #76	; 0x4c
 8004076:	f7ff fc0d 	bl	8003894 <RadioInit>
	flag.rtcAlarm = 1;
 800407a:	2401      	movs	r4, #1
	status.poweredConfirmed = HAL_GPIO_ReadPin (extPower_GPIO_Port,
 800407c:	2180      	movs	r1, #128	; 0x80
 800407e:	20a0      	movs	r0, #160	; 0xa0
	recomendedDelay = settings.workInterval;
 8004080:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004082:	4b35      	ldr	r3, [pc, #212]	; (8004158 <main+0x3fc>)
	status.poweredConfirmed = HAL_GPIO_ReadPin (extPower_GPIO_Port,
 8004084:	0049      	lsls	r1, r1, #1
	recomendedDelay = settings.workInterval;
 8004086:	801a      	strh	r2, [r3, #0]
	flag.rtcAlarm = 1;
 8004088:	4a34      	ldr	r2, [pc, #208]	; (800415c <main+0x400>)
	status.poweredConfirmed = HAL_GPIO_ReadPin (extPower_GPIO_Port,
 800408a:	05c0      	lsls	r0, r0, #23
	flag.rtcAlarm = 1;
 800408c:	7813      	ldrb	r3, [r2, #0]
 800408e:	4323      	orrs	r3, r4
 8004090:	7013      	strb	r3, [r2, #0]
	status.poweredConfirmed = HAL_GPIO_ReadPin (extPower_GPIO_Port,
 8004092:	f001 fd8f 	bl	8005bb4 <HAL_GPIO_ReadPin>
 8004096:	1e43      	subs	r3, r0, #1
 8004098:	4198      	sbcs	r0, r3
 800409a:	ab06      	add	r3, sp, #24
 800409c:	7758      	strb	r0, [r3, #29]
	status.openedConfirmed = HAL_GPIO_ReadPin (D1_GPIO_Port, D1_Pin);
 800409e:	20a0      	movs	r0, #160	; 0xa0
 80040a0:	0021      	movs	r1, r4
 80040a2:	05c0      	lsls	r0, r0, #23
 80040a4:	f001 fd86 	bl	8005bb4 <HAL_GPIO_ReadPin>
 80040a8:	1e43      	subs	r3, r0, #1
 80040aa:	4198      	sbcs	r0, r3
 80040ac:	ab06      	add	r3, sp, #24
 80040ae:	7698      	strb	r0, [r3, #26]
	HAL_DBGMCU_DisableDBGStopMode ();
 80040b0:	f001 f81a 	bl	80050e8 <HAL_DBGMCU_DisableDBGStopMode>
	if (HAL_GPIO_ReadPin (USER2_GPIO_Port, USER2_Pin) == USER2_ACTIVE && HAL_GPIO_ReadPin (USER1_GPIO_Port, USER1_Pin) != USER1_ACTIVE)
 80040b4:	2180      	movs	r1, #128	; 0x80
 80040b6:	480f      	ldr	r0, [pc, #60]	; (80040f4 <main+0x398>)
 80040b8:	f001 fd7c 	bl	8005bb4 <HAL_GPIO_ReadPin>
 80040bc:	2800      	cmp	r0, #0
 80040be:	d107      	bne.n	80040d0 <main+0x374>
 80040c0:	2140      	movs	r1, #64	; 0x40
 80040c2:	480c      	ldr	r0, [pc, #48]	; (80040f4 <main+0x398>)
 80040c4:	f001 fd76 	bl	8005bb4 <HAL_GPIO_ReadPin>
 80040c8:	2800      	cmp	r0, #0
 80040ca:	d001      	beq.n	80040d0 <main+0x374>
			ReceivingTest ();
 80040cc:	f7ff fc06 	bl	80038dc <ReceivingTest>
	if (HAL_GPIO_ReadPin (USER2_GPIO_Port, USER2_Pin) != USER1_ACTIVE && HAL_GPIO_ReadPin (USER1_GPIO_Port, USER1_Pin) == USER1_ACTIVE)
 80040d0:	2180      	movs	r1, #128	; 0x80
 80040d2:	4808      	ldr	r0, [pc, #32]	; (80040f4 <main+0x398>)
 80040d4:	f001 fd6e 	bl	8005bb4 <HAL_GPIO_ReadPin>
 80040d8:	2800      	cmp	r0, #0
 80040da:	d041      	beq.n	8004160 <main+0x404>
 80040dc:	2140      	movs	r1, #64	; 0x40
 80040de:	4805      	ldr	r0, [pc, #20]	; (80040f4 <main+0x398>)
 80040e0:	f001 fd68 	bl	8005bb4 <HAL_GPIO_ReadPin>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d13b      	bne.n	8004160 <main+0x404>
			PingTest ();
 80040e8:	f7ff fc7e 	bl	80039e8 <PingTest>
 80040ec:	200002b8 	.word	0x200002b8
 80040f0:	40021000 	.word	0x40021000
 80040f4:	50000400 	.word	0x50000400
 80040f8:	50000800 	.word	0x50000800
 80040fc:	50001c00 	.word	0x50001c00
 8004100:	10310000 	.word	0x10310000
 8004104:	0000cf3f 	.word	0x0000cf3f
 8004108:	200003b8 	.word	0x200003b8
 800410c:	40002800 	.word	0x40002800
 8004110:	200003f0 	.word	0x200003f0
 8004114:	40013000 	.word	0x40013000
 8004118:	20000304 	.word	0x20000304
 800411c:	40013800 	.word	0x40013800
 8004120:	20000490 	.word	0x20000490
 8004124:	40012400 	.word	0x40012400
 8004128:	08000004 	.word	0x08000004
 800412c:	44020000 	.word	0x44020000
 8004130:	20000388 	.word	0x20000388
 8004134:	40007c00 	.word	0x40007c00
 8004138:	0000ffff 	.word	0x0000ffff
 800413c:	200003dc 	.word	0x200003dc
 8004140:	40002c00 	.word	0x40002c00
 8004144:	20000234 	.word	0x20000234
 8004148:	200002bc 	.word	0x200002bc
 800414c:	13082021 	.word	0x13082021
 8004150:	0800adda 	.word	0x0800adda
 8004154:	40015800 	.word	0x40015800
 8004158:	20000000 	.word	0x20000000
 800415c:	20000214 	.word	0x20000214
	if (HAL_GPIO_ReadPin (USER2_GPIO_Port, USER2_Pin) == USER2_ACTIVE && HAL_GPIO_ReadPin (USER1_GPIO_Port, USER1_Pin) == USER1_ACTIVE)
 8004160:	2180      	movs	r1, #128	; 0x80
 8004162:	48ce      	ldr	r0, [pc, #824]	; (800449c <main+0x740>)
 8004164:	f001 fd26 	bl	8005bb4 <HAL_GPIO_ReadPin>
	bool dontSleep = false;
 8004168:	2300      	movs	r3, #0
 800416a:	9304      	str	r3, [sp, #16]
	if (HAL_GPIO_ReadPin (USER2_GPIO_Port, USER2_Pin) == USER2_ACTIVE && HAL_GPIO_ReadPin (USER1_GPIO_Port, USER1_Pin) == USER1_ACTIVE)
 800416c:	4298      	cmp	r0, r3
 800416e:	d107      	bne.n	8004180 <main+0x424>
 8004170:	2140      	movs	r1, #64	; 0x40
 8004172:	48ca      	ldr	r0, [pc, #808]	; (800449c <main+0x740>)
 8004174:	f001 fd1e 	bl	8005bb4 <HAL_GPIO_ReadPin>
 8004178:	4243      	negs	r3, r0
 800417a:	4158      	adcs	r0, r3
 800417c:	b2c3      	uxtb	r3, r0
 800417e:	9304      	str	r3, [sp, #16]
	deinitGpio ();
 8004180:	f7ff fb74 	bl	800386c <deinitGpio>
	uint32_t acknowledgeMiss = 0;
 8004184:	2300      	movs	r3, #0
	uint8_t triesToSend = 0;
 8004186:	001f      	movs	r7, r3
	uint32_t acknowledgeMiss = 0;
 8004188:	9305      	str	r3, [sp, #20]
	uint32_t totalMessages = 0;
 800418a:	9301      	str	r3, [sp, #4]
	bool wfa = false;
 800418c:	9302      	str	r3, [sp, #8]
	uint32_t interval = DEFAULT_INTERVAL;
 800418e:	23fa      	movs	r3, #250	; 0xfa
			if (flag.rtcAlarm)
 8004190:	2501      	movs	r5, #1
	uint32_t interval = DEFAULT_INTERVAL;
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	9300      	str	r3, [sp, #0]
	uint32_t lastTransTime = 0;
 8004196:	9703      	str	r7, [sp, #12]
			HAL_WWDG_Refresh (&hwwdg);
 8004198:	48c1      	ldr	r0, [pc, #772]	; (80044a0 <main+0x744>)
 800419a:	f003 fbc1 	bl	8007920 <HAL_WWDG_Refresh>
			status.powered = HAL_GPIO_ReadPin (extPower_GPIO_Port, extPower_Pin);
 800419e:	2180      	movs	r1, #128	; 0x80
 80041a0:	20a0      	movs	r0, #160	; 0xa0
 80041a2:	0049      	lsls	r1, r1, #1
 80041a4:	05c0      	lsls	r0, r0, #23
 80041a6:	f001 fd05 	bl	8005bb4 <HAL_GPIO_ReadPin>
			if (flag.statusRequested)
 80041aa:	2104      	movs	r1, #4
			status.powered = HAL_GPIO_ReadPin (extPower_GPIO_Port, extPower_Pin);
 80041ac:	1e43      	subs	r3, r0, #1
 80041ae:	4198      	sbcs	r0, r3
			if (flag.statusRequested)
 80041b0:	4abc      	ldr	r2, [pc, #752]	; (80044a4 <main+0x748>)
			status.powered = HAL_GPIO_ReadPin (extPower_GPIO_Port, extPower_Pin);
 80041b2:	ac0c      	add	r4, sp, #48	; 0x30
			if (flag.statusRequested)
 80041b4:	7853      	ldrb	r3, [r2, #1]
			status.powered = HAL_GPIO_ReadPin (extPower_GPIO_Port, extPower_Pin);
 80041b6:	7120      	strb	r0, [r4, #4]
			if (flag.statusRequested)
 80041b8:	420b      	tst	r3, r1
 80041ba:	d006      	beq.n	80041ca <main+0x46e>
					flag.statusRequested = 0;
 80041bc:	438b      	bics	r3, r1
 80041be:	7053      	strb	r3, [r2, #1]
					printInfo (&status, totalMessages, acknowledgeMiss);
 80041c0:	0020      	movs	r0, r4
 80041c2:	9a05      	ldr	r2, [sp, #20]
 80041c4:	9901      	ldr	r1, [sp, #4]
 80041c6:	f7ff fc97 	bl	8003af8 <printInfo>
			if (flag.rtcAlarm)
 80041ca:	4ab6      	ldr	r2, [pc, #728]	; (80044a4 <main+0x748>)
 80041cc:	7813      	ldrb	r3, [r2, #0]
 80041ce:	422b      	tst	r3, r5
 80041d0:	d009      	beq.n	80041e6 <main+0x48a>
					flag.rtcAlarm = 0;
 80041d2:	43ab      	bics	r3, r5
 80041d4:	7013      	strb	r3, [r2, #0]
					if (status.disarmed == 0 || status.powered == 0)
 80041d6:	ab0c      	add	r3, sp, #48	; 0x30
 80041d8:	781a      	ldrb	r2, [r3, #0]
 80041da:	2a00      	cmp	r2, #0
 80041dc:	d002      	beq.n	80041e4 <main+0x488>
 80041de:	791b      	ldrb	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d100      	bne.n	80041e6 <main+0x48a>
						triesToSend = MAX_RETRIES;
 80041e4:	2707      	movs	r7, #7
			if (flag.saveSettings)
 80041e6:	2110      	movs	r1, #16
 80041e8:	4aae      	ldr	r2, [pc, #696]	; (80044a4 <main+0x748>)
 80041ea:	7813      	ldrb	r3, [r2, #0]
 80041ec:	420b      	tst	r3, r1
 80041ee:	d00a      	beq.n	8004206 <main+0x4aa>
					flag.saveSettings = 0;
 80041f0:	438b      	bics	r3, r1
					debugLogTime ("Saving settings to EEPROM");
 80041f2:	48ad      	ldr	r0, [pc, #692]	; (80044a8 <main+0x74c>)
					flag.saveSettings = 0;
 80041f4:	7013      	strb	r3, [r2, #0]
					debugLogTime ("Saving settings to EEPROM");
 80041f6:	f7ff f8fd 	bl	80033f4 <debugLogTime>
					initiateSettings (&settings);
 80041fa:	a813      	add	r0, sp, #76	; 0x4c
 80041fc:	f7ff fa0e 	bl	800361c <initiateSettings>
					saveSettings (&settings);
 8004200:	a813      	add	r0, sp, #76	; 0x4c
 8004202:	f7ff fa9b 	bl	800373c <saveSettings>
			if ((status.openedConfirmed != status.opened || status.poweredConfirmed != status.powered || triesToSend > 0 || status.unconfirmedOpening)
 8004206:	ae0c      	add	r6, sp, #48	; 0x30
 8004208:	78b2      	ldrb	r2, [r6, #2]
 800420a:	7873      	ldrb	r3, [r6, #1]
 800420c:	429a      	cmp	r2, r3
 800420e:	d108      	bne.n	8004222 <main+0x4c6>
 8004210:	7972      	ldrb	r2, [r6, #5]
 8004212:	7933      	ldrb	r3, [r6, #4]
 8004214:	429a      	cmp	r2, r3
 8004216:	d104      	bne.n	8004222 <main+0x4c6>
 8004218:	2f00      	cmp	r7, #0
 800421a:	d102      	bne.n	8004222 <main+0x4c6>
 800421c:	79f3      	ldrb	r3, [r6, #7]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d058      	beq.n	80042d4 <main+0x578>
					&& !wfa && !status.disarmed && HAL_GetTick () - myRadio.lastSignalTick > 10 + settings.nodeNum * 50 && myRadio.status != TX)
 8004222:	9b02      	ldr	r3, [sp, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d131      	bne.n	800428c <main+0x530>
 8004228:	7834      	ldrb	r4, [r6, #0]
 800422a:	2c00      	cmp	r4, #0
 800422c:	d000      	beq.n	8004230 <main+0x4d4>
 800422e:	e0b8      	b.n	80043a2 <main+0x646>
 8004230:	f000 ff42 	bl	80050b8 <HAL_GetTick>
 8004234:	213e      	movs	r1, #62	; 0x3e
 8004236:	4a9d      	ldr	r2, [pc, #628]	; (80044ac <main+0x750>)
 8004238:	6993      	ldr	r3, [r2, #24]
 800423a:	1ac0      	subs	r0, r0, r3
 800423c:	ab06      	add	r3, sp, #24
 800423e:	185b      	adds	r3, r3, r1
 8004240:	7819      	ldrb	r1, [r3, #0]
 8004242:	2332      	movs	r3, #50	; 0x32
 8004244:	434b      	muls	r3, r1
 8004246:	330a      	adds	r3, #10
 8004248:	4298      	cmp	r0, r3
 800424a:	d947      	bls.n	80042dc <main+0x580>
 800424c:	7c13      	ldrb	r3, [r2, #16]
 800424e:	2b03      	cmp	r3, #3
 8004250:	d044      	beq.n	80042dc <main+0x580>
					if (status.opened)
 8004252:	7873      	ldrb	r3, [r6, #1]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d000      	beq.n	800425a <main+0x4fe>
						status.unconfirmedOpening = true;
 8004258:	71f5      	strb	r5, [r6, #7]
					if (triesToSend)
 800425a:	2f00      	cmp	r7, #0
 800425c:	d001      	beq.n	8004262 <main+0x506>
						triesToSend--;
 800425e:	3f01      	subs	r7, #1
 8004260:	b2ff      	uxtb	r7, r7
					debugLogTime ("Sending status");
 8004262:	4893      	ldr	r0, [pc, #588]	; (80044b0 <main+0x754>)
 8004264:	f7ff f8c6 	bl	80033f4 <debugLogTime>
					debugLogInt ("%d tries left", triesToSend);
 8004268:	0039      	movs	r1, r7
 800426a:	4892      	ldr	r0, [pc, #584]	; (80044b4 <main+0x758>)
 800426c:	f7ff f8ed 	bl	800344a <debugLogInt>
					totalMessages++;
 8004270:	9b01      	ldr	r3, [sp, #4]
 8004272:	3301      	adds	r3, #1
 8004274:	9301      	str	r3, [sp, #4]
					lastTransTime = HAL_GetTick ();
 8004276:	f000 ff1f 	bl	80050b8 <HAL_GetTick>
					sendStatus (&status, &settings);
 800427a:	a913      	add	r1, sp, #76	; 0x4c
					lastTransTime = HAL_GetTick ();
 800427c:	9003      	str	r0, [sp, #12]
					sendStatus (&status, &settings);
 800427e:	a80c      	add	r0, sp, #48	; 0x30
 8004280:	f7ff faa0 	bl	80037c4 <sendStatus>
					setWakeup (recomendedDelay);
 8004284:	4b8c      	ldr	r3, [pc, #560]	; (80044b8 <main+0x75c>)
 8004286:	8818      	ldrh	r0, [r3, #0]
 8004288:	f7ff fa6c 	bl	8003764 <setWakeup>
			if (wfa && HAL_GetTick () - lastTransTime > interval)
 800428c:	f000 ff14 	bl	80050b8 <HAL_GetTick>
 8004290:	9b03      	ldr	r3, [sp, #12]
 8004292:	002c      	movs	r4, r5
 8004294:	1ac0      	subs	r0, r0, r3
 8004296:	9b00      	ldr	r3, [sp, #0]
 8004298:	4298      	cmp	r0, r3
 800429a:	d91f      	bls.n	80042dc <main+0x580>
					uint32_t maxInterval = settings.workInterval * 1000 / 3;
 800429c:	20fa      	movs	r0, #250	; 0xfa
					acknowledgeMiss++;
 800429e:	9b05      	ldr	r3, [sp, #20]
					uint32_t maxInterval = settings.workInterval * 1000 / 3;
 80042a0:	0080      	lsls	r0, r0, #2
					acknowledgeMiss++;
 80042a2:	3301      	adds	r3, #1
 80042a4:	9305      	str	r3, [sp, #20]
					uint32_t maxInterval = settings.workInterval * 1000 / 3;
 80042a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80042a8:	2103      	movs	r1, #3
 80042aa:	4358      	muls	r0, r3
 80042ac:	f7fb ff48 	bl	8000140 <__udivsi3>
 80042b0:	0004      	movs	r4, r0
					debugLogTime ("Got no acknowledge!");
 80042b2:	4882      	ldr	r0, [pc, #520]	; (80044bc <main+0x760>)
 80042b4:	f7ff f89e 	bl	80033f4 <debugLogTime>
					interval += INTERVAL_STEP;
 80042b8:	22fa      	movs	r2, #250	; 0xfa
 80042ba:	0092      	lsls	r2, r2, #2
 80042bc:	4694      	mov	ip, r2
 80042be:	9b00      	ldr	r3, [sp, #0]
					interval = (interval > maxInterval) ? maxInterval : interval;
 80042c0:	9400      	str	r4, [sp, #0]
					interval += INTERVAL_STEP;
 80042c2:	4463      	add	r3, ip
					interval = (interval > maxInterval) ? maxInterval : interval;
 80042c4:	429c      	cmp	r4, r3
 80042c6:	d900      	bls.n	80042ca <main+0x56e>
 80042c8:	9300      	str	r3, [sp, #0]
					wfa = false;
 80042ca:	2400      	movs	r4, #0
 80042cc:	e006      	b.n	80042dc <main+0x580>
 80042ce:	001c      	movs	r4, r3
 80042d0:	9402      	str	r4, [sp, #8]
 80042d2:	e761      	b.n	8004198 <main+0x43c>
			if (wfa && HAL_GetTick () - lastTransTime > interval)
 80042d4:	9b02      	ldr	r3, [sp, #8]
 80042d6:	003c      	movs	r4, r7
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1d7      	bne.n	800428c <main+0x530>
			if (flag.uartRx)
 80042dc:	2108      	movs	r1, #8
 80042de:	4a71      	ldr	r2, [pc, #452]	; (80044a4 <main+0x748>)
 80042e0:	7813      	ldrb	r3, [r2, #0]
 80042e2:	420b      	tst	r3, r1
 80042e4:	d004      	beq.n	80042f0 <main+0x594>
					flag.uartRx = 0;
 80042e6:	438b      	bics	r3, r1
					uartReceiveHandler (&settings);
 80042e8:	a813      	add	r0, sp, #76	; 0x4c
					flag.uartRx = 0;
 80042ea:	7013      	strb	r3, [r2, #0]
					uartReceiveHandler (&settings);
 80042ec:	f000 fdb4 	bl	8004e58 <uartReceiveHandler>
			if (flag.readConfig)
 80042f0:	2120      	movs	r1, #32
 80042f2:	4a6c      	ldr	r2, [pc, #432]	; (80044a4 <main+0x748>)
 80042f4:	7813      	ldrb	r3, [r2, #0]
 80042f6:	420b      	tst	r3, r1
 80042f8:	d004      	beq.n	8004304 <main+0x5a8>
					flag.readConfig = 0;
 80042fa:	438b      	bics	r3, r1
					sendConfig (&settings);
 80042fc:	a813      	add	r0, sp, #76	; 0x4c
					flag.readConfig = 0;
 80042fe:	7013      	strb	r3, [r2, #0]
					sendConfig (&settings);
 8004300:	f000 fe2c 	bl	8004f5c <sendConfig>
			if (myRadio.readBytes > 0)
 8004304:	4e69      	ldr	r6, [pc, #420]	; (80044ac <main+0x750>)
 8004306:	0033      	movs	r3, r6
 8004308:	335d      	adds	r3, #93	; 0x5d
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00e      	beq.n	800432e <main+0x5d2>
					debugLogTime ("Got message...");
 8004310:	486b      	ldr	r0, [pc, #428]	; (80044c0 <main+0x764>)
 8004312:	f7ff f86f 	bl	80033f4 <debugLogTime>
					if (myRadio.badCrc == 1)
 8004316:	0033      	movs	r3, r6
 8004318:	3360      	adds	r3, #96	; 0x60
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d042      	beq.n	80043a6 <main+0x64a>
							debugLog ("Bad CRC!");
 8004320:	4868      	ldr	r0, [pc, #416]	; (80044c4 <main+0x768>)
 8004322:	f7ff f88b 	bl	800343c <debugLog>
					myRadio.readBytes = 0;
 8004326:	2200      	movs	r2, #0
 8004328:	4b60      	ldr	r3, [pc, #384]	; (80044ac <main+0x750>)
 800432a:	335d      	adds	r3, #93	; 0x5d
 800432c:	701a      	strb	r2, [r3, #0]
			SX127X_Routine (&myRadio);
 800432e:	4e5f      	ldr	r6, [pc, #380]	; (80044ac <main+0x750>)
 8004330:	0030      	movs	r0, r6
 8004332:	f000 fc9f 	bl	8004c74 <SX127X_Routine>
			ledRoutine (&myRadio, &settings);
 8004336:	0030      	movs	r0, r6
 8004338:	a913      	add	r1, sp, #76	; 0x4c
 800433a:	f7ff fb9f 	bl	8003a7c <ledRoutine>
			status.opened = HAL_GPIO_ReadPin (D1_GPIO_Port, D1_Pin) || status.unconfirmedOpening;
 800433e:	20a0      	movs	r0, #160	; 0xa0
 8004340:	0029      	movs	r1, r5
 8004342:	05c0      	lsls	r0, r0, #23
 8004344:	f001 fc36 	bl	8005bb4 <HAL_GPIO_ReadPin>
 8004348:	ae0c      	add	r6, sp, #48	; 0x30
 800434a:	002b      	movs	r3, r5
 800434c:	2800      	cmp	r0, #0
 800434e:	d100      	bne.n	8004352 <main+0x5f6>
 8004350:	79f3      	ldrb	r3, [r6, #7]
			status.powered = HAL_GPIO_ReadPin (extPower_GPIO_Port, extPower_Pin);
 8004352:	2180      	movs	r1, #128	; 0x80
 8004354:	20a0      	movs	r0, #160	; 0xa0
			status.opened = HAL_GPIO_ReadPin (D1_GPIO_Port, D1_Pin) || status.unconfirmedOpening;
 8004356:	402b      	ands	r3, r5
			status.powered = HAL_GPIO_ReadPin (extPower_GPIO_Port, extPower_Pin);
 8004358:	0049      	lsls	r1, r1, #1
 800435a:	05c0      	lsls	r0, r0, #23
			status.opened = HAL_GPIO_ReadPin (D1_GPIO_Port, D1_Pin) || status.unconfirmedOpening;
 800435c:	7073      	strb	r3, [r6, #1]
			status.powered = HAL_GPIO_ReadPin (extPower_GPIO_Port, extPower_Pin);
 800435e:	f001 fc29 	bl	8005bb4 <HAL_GPIO_ReadPin>
 8004362:	0003      	movs	r3, r0
 8004364:	1e5a      	subs	r2, r3, #1
 8004366:	4193      	sbcs	r3, r2
 8004368:	7133      	strb	r3, [r6, #4]
			if (!status.powered && !wfa && !myRadio.TXrequest && status.powered == status.poweredConfirmed && status.opened == status.openedConfirmed
 800436a:	2800      	cmp	r0, #0
 800436c:	d1b0      	bne.n	80042d0 <main+0x574>
 800436e:	2c00      	cmp	r4, #0
 8004370:	d1ae      	bne.n	80042d0 <main+0x574>
 8004372:	4b4e      	ldr	r3, [pc, #312]	; (80044ac <main+0x750>)
 8004374:	7c5b      	ldrb	r3, [r3, #17]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1aa      	bne.n	80042d0 <main+0x574>
 800437a:	7974      	ldrb	r4, [r6, #5]
 800437c:	2c00      	cmp	r4, #0
 800437e:	d1a6      	bne.n	80042ce <main+0x572>
 8004380:	7872      	ldrb	r2, [r6, #1]
 8004382:	78b3      	ldrb	r3, [r6, #2]
 8004384:	429a      	cmp	r2, r3
 8004386:	d1a3      	bne.n	80042d0 <main+0x574>
					&& !dontSleep && triesToSend < 1)
 8004388:	9b04      	ldr	r3, [sp, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1a0      	bne.n	80042d0 <main+0x574>
 800438e:	001c      	movs	r4, r3
 8004390:	2f00      	cmp	r7, #0
 8004392:	d19d      	bne.n	80042d0 <main+0x574>
					debugLogTime ("Sleep...");
 8004394:	484c      	ldr	r0, [pc, #304]	; (80044c8 <main+0x76c>)
 8004396:	f7ff f82d 	bl	80033f4 <debugLogTime>
					sleep ();
 800439a:	003c      	movs	r4, r7
 800439c:	f7ff f9f6 	bl	800378c <sleep>
 80043a0:	e796      	b.n	80042d0 <main+0x574>
 80043a2:	9c02      	ldr	r4, [sp, #8]
 80043a4:	e79a      	b.n	80042dc <main+0x580>
					else if (rxMes->uplink == 0 && rxMes->adr == settings.nodeNum)
 80043a6:	7f73      	ldrb	r3, [r6, #29]
 80043a8:	08d9      	lsrs	r1, r3, #3
 80043aa:	422b      	tst	r3, r5
 80043ac:	d174      	bne.n	8004498 <main+0x73c>
 80043ae:	ab13      	add	r3, sp, #76	; 0x4c
 80043b0:	7a9b      	ldrb	r3, [r3, #10]
 80043b2:	428b      	cmp	r3, r1
 80043b4:	d164      	bne.n	8004480 <main+0x724>
							if (status.disarmed != rxMes->disarm)
 80043b6:	7fb2      	ldrb	r2, [r6, #30]
 80043b8:	a90c      	add	r1, sp, #48	; 0x30
 80043ba:	7809      	ldrb	r1, [r1, #0]
 80043bc:	07d3      	lsls	r3, r2, #31
 80043be:	0fdb      	lsrs	r3, r3, #31
 80043c0:	4299      	cmp	r1, r3
 80043c2:	d006      	beq.n	80043d2 <main+0x676>
								debugLogString ("Disarmed changed to %s", rxMes->disarm ? "Yes" : "No");
 80043c4:	4941      	ldr	r1, [pc, #260]	; (80044cc <main+0x770>)
 80043c6:	422a      	tst	r2, r5
 80043c8:	d100      	bne.n	80043cc <main+0x670>
 80043ca:	4941      	ldr	r1, [pc, #260]	; (80044d0 <main+0x774>)
 80043cc:	4841      	ldr	r0, [pc, #260]	; (80044d4 <main+0x778>)
 80043ce:	f7ff f843 	bl	8003458 <debugLogString>
							status.disarmed = rxMes->disarm;
 80043d2:	4936      	ldr	r1, [pc, #216]	; (80044ac <main+0x750>)
 80043d4:	a80c      	add	r0, sp, #48	; 0x30
 80043d6:	7f8b      	ldrb	r3, [r1, #30]
 80043d8:	07da      	lsls	r2, r3, #31
 80043da:	0fd2      	lsrs	r2, r2, #31
 80043dc:	7002      	strb	r2, [r0, #0]
							if (rxMes->codedDelayMSB || rxMes->codedDelayLSB)
 80043de:	7fc8      	ldrb	r0, [r1, #31]
 80043e0:	0019      	movs	r1, r3
 80043e2:	43a9      	bics	r1, r5
 80043e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80043e6:	4301      	orrs	r1, r0
 80043e8:	d02e      	beq.n	8004448 <main+0x6ec>
									recomendedDelay = rxMes->codedDelayLSB + (rxMes->codedDelayMSB << 8);
 80043ea:	0859      	lsrs	r1, r3, #1
 80043ec:	4e32      	ldr	r6, [pc, #200]	; (80044b8 <main+0x75c>)
 80043ee:	0209      	lsls	r1, r1, #8
 80043f0:	1809      	adds	r1, r1, r0
 80043f2:	8031      	strh	r1, [r6, #0]
									if (recomendedDelay > 2 * settings.workInterval)
 80043f4:	0052      	lsls	r2, r2, #1
 80043f6:	4291      	cmp	r1, r2
 80043f8:	d922      	bls.n	8004440 <main+0x6e4>
											debugLogInt ("###Recommended delay is too high(%u), returning to 2x work Interval", recomendedDelay);
 80043fa:	4837      	ldr	r0, [pc, #220]	; (80044d8 <main+0x77c>)
 80043fc:	f7ff f825 	bl	800344a <debugLogInt>
											recomendedDelay = 2 * settings.workInterval;
 8004400:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	8033      	strh	r3, [r6, #0]
							setWakeup (recomendedDelay);
 8004406:	4b2c      	ldr	r3, [pc, #176]	; (80044b8 <main+0x75c>)
 8004408:	8818      	ldrh	r0, [r3, #0]
 800440a:	f7ff f9ab 	bl	8003764 <setWakeup>
							if (rxMes->message == MSG_DOWN_REQUEST) //Request current status
 800440e:	4b27      	ldr	r3, [pc, #156]	; (80044ac <main+0x750>)
 8004410:	7f5e      	ldrb	r6, [r3, #29]
 8004412:	2306      	movs	r3, #6
 8004414:	401e      	ands	r6, r3
 8004416:	2e02      	cmp	r6, #2
 8004418:	d11e      	bne.n	8004458 <main+0x6fc>
									debugLog ("Status requested...sending");
 800441a:	4830      	ldr	r0, [pc, #192]	; (80044dc <main+0x780>)
 800441c:	f7ff f80e 	bl	800343c <debugLog>
									totalMessages++;
 8004420:	9b01      	ldr	r3, [sp, #4]
									wfa = true;
 8004422:	002c      	movs	r4, r5
									totalMessages++;
 8004424:	3301      	adds	r3, #1
 8004426:	9301      	str	r3, [sp, #4]
									lastTransTime = HAL_GetTick ();
 8004428:	f000 fe46 	bl	80050b8 <HAL_GetTick>
									sendStatus (&status, &settings);
 800442c:	a913      	add	r1, sp, #76	; 0x4c
									lastTransTime = HAL_GetTick ();
 800442e:	9003      	str	r0, [sp, #12]
									sendStatus (&status, &settings);
 8004430:	a80c      	add	r0, sp, #48	; 0x30
 8004432:	f7ff f9c7 	bl	80037c4 <sendStatus>
									setWakeup (recomendedDelay);
 8004436:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <main+0x75c>)
 8004438:	8818      	ldrh	r0, [r3, #0]
 800443a:	f7ff f993 	bl	8003764 <setWakeup>
 800443e:	e772      	b.n	8004326 <main+0x5ca>
										debugLogInt ("Recommended delay set to %u", recomendedDelay);
 8004440:	4827      	ldr	r0, [pc, #156]	; (80044e0 <main+0x784>)
 8004442:	f7ff f802 	bl	800344a <debugLogInt>
 8004446:	e7de      	b.n	8004406 <main+0x6aa>
									debugLogInt ("Recommended returned to %u", (uint16_t) settings.workInterval);
 8004448:	b291      	uxth	r1, r2
 800444a:	4826      	ldr	r0, [pc, #152]	; (80044e4 <main+0x788>)
 800444c:	f7fe fffd 	bl	800344a <debugLogInt>
									recomendedDelay = settings.workInterval;
 8004450:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004452:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <main+0x75c>)
 8004454:	801a      	strh	r2, [r3, #0]
 8004456:	e7d6      	b.n	8004406 <main+0x6aa>
							else if (rxMes->message == MSG_DOWN_ACKNOWLEDGE)
 8004458:	2e00      	cmp	r6, #0
 800445a:	d000      	beq.n	800445e <main+0x702>
 800445c:	e763      	b.n	8004326 <main+0x5ca>
									debugLog ("Acknowledge received");
 800445e:	4822      	ldr	r0, [pc, #136]	; (80044e8 <main+0x78c>)
 8004460:	f7fe ffec 	bl	800343c <debugLog>
									if (status.openedToConfirm == 1)
 8004464:	ab0c      	add	r3, sp, #48	; 0x30
 8004466:	78da      	ldrb	r2, [r3, #3]
 8004468:	2a00      	cmp	r2, #0
 800446a:	d000      	beq.n	800446e <main+0x712>
										status.unconfirmedOpening = 0;
 800446c:	71de      	strb	r6, [r3, #7]
									status.openedConfirmed = status.openedToConfirm;
 800446e:	709a      	strb	r2, [r3, #2]
									status.poweredConfirmed = status.poweredToConfirm;
 8004470:	799a      	ldrb	r2, [r3, #6]
									wfa = false;
 8004472:	2400      	movs	r4, #0
									status.poweredConfirmed = status.poweredToConfirm;
 8004474:	715a      	strb	r2, [r3, #5]
									interval = DEFAULT_INTERVAL;
 8004476:	23fa      	movs	r3, #250	; 0xfa
 8004478:	00db      	lsls	r3, r3, #3
									triesToSend = 0;
 800447a:	0027      	movs	r7, r4
									interval = DEFAULT_INTERVAL;
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	e752      	b.n	8004326 <main+0x5ca>
									debugLogInt ("It's for %d", rxMes->adr);
 8004480:	481a      	ldr	r0, [pc, #104]	; (80044ec <main+0x790>)
 8004482:	f7fe ffe2 	bl	800344a <debugLogInt>
									debugLogInt ("Delay for him: %d", rxMes->codedDelayLSB + (rxMes->codedDelayMSB << 8));
 8004486:	7fb1      	ldrb	r1, [r6, #30]
 8004488:	7ff3      	ldrb	r3, [r6, #31]
 800448a:	0849      	lsrs	r1, r1, #1
 800448c:	0209      	lsls	r1, r1, #8
 800448e:	4818      	ldr	r0, [pc, #96]	; (80044f0 <main+0x794>)
 8004490:	18c9      	adds	r1, r1, r3
									debugLogInt ("It's from %d", rxMes->adr);
 8004492:	f7fe ffda 	bl	800344a <debugLogInt>
 8004496:	e746      	b.n	8004326 <main+0x5ca>
 8004498:	4816      	ldr	r0, [pc, #88]	; (80044f4 <main+0x798>)
 800449a:	e7fa      	b.n	8004492 <main+0x736>
 800449c:	50000400 	.word	0x50000400
 80044a0:	200003dc 	.word	0x200003dc
 80044a4:	20000214 	.word	0x20000214
 80044a8:	0800ade4 	.word	0x0800ade4
 80044ac:	20000234 	.word	0x20000234
 80044b0:	0800adfe 	.word	0x0800adfe
 80044b4:	0800ae0d 	.word	0x0800ae0d
 80044b8:	20000000 	.word	0x20000000
 80044bc:	0800ae1b 	.word	0x0800ae1b
 80044c0:	0800ae2f 	.word	0x0800ae2f
 80044c4:	0800ae3e 	.word	0x0800ae3e
 80044c8:	0800af34 	.word	0x0800af34
 80044cc:	0800ac85 	.word	0x0800ac85
 80044d0:	0800ac89 	.word	0x0800ac89
 80044d4:	0800ae47 	.word	0x0800ae47
 80044d8:	0800ae5e 	.word	0x0800ae5e
 80044dc:	0800aed9 	.word	0x0800aed9
 80044e0:	0800aea2 	.word	0x0800aea2
 80044e4:	0800aebe 	.word	0x0800aebe
 80044e8:	0800aef4 	.word	0x0800aef4
 80044ec:	0800af09 	.word	0x0800af09
 80044f0:	0800af15 	.word	0x0800af15
 80044f4:	0800af27 	.word	0x0800af27

080044f8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f8:	2201      	movs	r2, #1
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_MspInit+0x18>)
 80044fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044fe:	430a      	orrs	r2, r1
 8004500:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004502:	2280      	movs	r2, #128	; 0x80
 8004504:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004506:	0552      	lsls	r2, r2, #21
 8004508:	430a      	orrs	r2, r1
 800450a:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800450c:	4770      	bx	lr
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	40021000 	.word	0x40021000

08004514 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	0006      	movs	r6, r0
 8004518:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451a:	2214      	movs	r2, #20
 800451c:	2100      	movs	r1, #0
 800451e:	a801      	add	r0, sp, #4
 8004520:	f003 fa37 	bl	8007992 <memset>
  if(hadc->Instance==ADC1)
 8004524:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <HAL_ADC_MspInit+0x80>)
 8004526:	6832      	ldr	r2, [r6, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d130      	bne.n	800458e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800452c:	2280      	movs	r2, #128	; 0x80
 800452e:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <HAL_ADC_MspInit+0x84>)
 8004530:	0092      	lsls	r2, r2, #2
 8004532:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = TempSensor_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(TempSensor_GPIO_Port, &GPIO_InitStruct);
 8004534:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004536:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004538:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 800453a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800453c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453e:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004540:	430a      	orrs	r2, r1
 8004542:	62da      	str	r2, [r3, #44]	; 0x2c
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(TempSensor_GPIO_Port, &GPIO_InitStruct);
 8004546:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004548:	400b      	ands	r3, r1
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = TempSensor_Pin;
 800454e:	2304      	movs	r3, #4
    HAL_GPIO_Init(TempSensor_GPIO_Port, &GPIO_InitStruct);
 8004550:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = TempSensor_Pin;
 8004552:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004554:	3b01      	subs	r3, #1
 8004556:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004558:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(TempSensor_GPIO_Port, &GPIO_InitStruct);
 800455a:	f001 fa71 	bl	8005a40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800455e:	4c0f      	ldr	r4, [pc, #60]	; (800459c <HAL_ADC_MspInit+0x88>)
 8004560:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <HAL_ADC_MspInit+0x8c>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc.Init.Mode = DMA_NORMAL;
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004562:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 8004564:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800456a:	18db      	adds	r3, r3, r3
 800456c:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800456e:	2380      	movs	r3, #128	; 0x80
 8004570:	00db      	lsls	r3, r3, #3
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8004572:	6065      	str	r5, [r4, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004574:	60a5      	str	r5, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8004576:	60e5      	str	r5, [r4, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004578:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800457a:	61e5      	str	r5, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800457c:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800457e:	f001 f86d 	bl	800565c <HAL_DMA_Init>
 8004582:	42a8      	cmp	r0, r5
 8004584:	d001      	beq.n	800458a <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8004586:	f7ff fb83 	bl	8003c90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800458a:	64f4      	str	r4, [r6, #76]	; 0x4c
 800458c:	62a6      	str	r6, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800458e:	b006      	add	sp, #24
 8004590:	bd70      	pop	{r4, r5, r6, pc}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	40012400 	.word	0x40012400
 8004598:	40021000 	.word	0x40021000
 800459c:	20000448 	.word	0x20000448
 80045a0:	40020008 	.word	0x40020008

080045a4 <HAL_LPTIM_MspInit>:
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  if(hlptim->Instance==LPTIM1)
 80045a4:	4b09      	ldr	r3, [pc, #36]	; (80045cc <HAL_LPTIM_MspInit+0x28>)
 80045a6:	6802      	ldr	r2, [r0, #0]
{
 80045a8:	b510      	push	{r4, lr}
  if(hlptim->Instance==LPTIM1)
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d10d      	bne.n	80045ca <HAL_LPTIM_MspInit+0x26>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80045ae:	2380      	movs	r3, #128	; 0x80
 80045b0:	4a07      	ldr	r2, [pc, #28]	; (80045d0 <HAL_LPTIM_MspInit+0x2c>)
 80045b2:	061b      	lsls	r3, r3, #24
 80045b4:	6b91      	ldr	r1, [r2, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);
 80045b6:	200d      	movs	r0, #13
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);
 80045bc:	2101      	movs	r1, #1
 80045be:	2200      	movs	r2, #0
 80045c0:	f000 fffc 	bl	80055bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80045c4:	200d      	movs	r0, #13
 80045c6:	f001 f823 	bl	8005610 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80045ca:	bd10      	pop	{r4, pc}
 80045cc:	40007c00 	.word	0x40007c00
 80045d0:	40021000 	.word	0x40021000

080045d4 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80045d4:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_RTC_MspInit+0x28>)
 80045d6:	6802      	ldr	r2, [r0, #0]
{
 80045d8:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 80045da:	429a      	cmp	r2, r3
 80045dc:	d10d      	bne.n	80045fa <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80045de:	2380      	movs	r3, #128	; 0x80
 80045e0:	4a07      	ldr	r2, [pc, #28]	; (8004600 <HAL_RTC_MspInit+0x2c>)
 80045e2:	02db      	lsls	r3, r3, #11
 80045e4:	6d11      	ldr	r1, [r2, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80045e6:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 80045e8:	430b      	orrs	r3, r1
 80045ea:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80045ec:	2200      	movs	r2, #0
 80045ee:	0011      	movs	r1, r2
 80045f0:	f000 ffe4 	bl	80055bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80045f4:	2002      	movs	r0, #2
 80045f6:	f001 f80b 	bl	8005610 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80045fa:	bd10      	pop	{r4, pc}
 80045fc:	40002800 	.word	0x40002800
 8004600:	40021000 	.word	0x40021000

08004604 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004604:	b510      	push	{r4, lr}
 8004606:	0004      	movs	r4, r0
 8004608:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800460a:	2214      	movs	r2, #20
 800460c:	2100      	movs	r1, #0
 800460e:	a801      	add	r0, sp, #4
 8004610:	f003 f9bf 	bl	8007992 <memset>
  if(hspi->Instance==SPI1)
 8004614:	4b10      	ldr	r3, [pc, #64]	; (8004658 <HAL_SPI_MspInit+0x54>)
 8004616:	6822      	ldr	r2, [r4, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d11b      	bne.n	8004654 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800461c:	2280      	movs	r2, #128	; 0x80
 800461e:	4b0f      	ldr	r3, [pc, #60]	; (800465c <HAL_SPI_MspInit+0x58>)
 8004620:	0152      	lsls	r2, r2, #5
 8004622:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004624:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004626:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004628:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 800462a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800462c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800462e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004630:	430a      	orrs	r2, r1
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004636:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004638:	400b      	ands	r3, r1
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800463e:	23e0      	movs	r3, #224	; 0xe0
 8004640:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004642:	3bde      	subs	r3, #222	; 0xde
 8004644:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004646:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004648:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800464c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800464e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004650:	f001 f9f6 	bl	8005a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004654:	b006      	add	sp, #24
 8004656:	bd10      	pop	{r4, pc}
 8004658:	40013000 	.word	0x40013000
 800465c:	40021000 	.word	0x40021000

08004660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004662:	0006      	movs	r6, r0
 8004664:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004666:	2214      	movs	r2, #20
 8004668:	2100      	movs	r1, #0
 800466a:	a801      	add	r0, sp, #4
 800466c:	f003 f991 	bl	8007992 <memset>
  if(huart->Instance==USART1)
 8004670:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <HAL_UART_MspInit+0x94>)
 8004672:	6832      	ldr	r2, [r6, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d13b      	bne.n	80046f0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004678:	2280      	movs	r2, #128	; 0x80
 800467a:	4b1f      	ldr	r3, [pc, #124]	; (80046f8 <HAL_UART_MspInit+0x98>)
 800467c:	01d2      	lsls	r2, r2, #7
 800467e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004680:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8004682:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004684:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 8004686:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468a:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800468c:	430a      	orrs	r2, r1
 800468e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004692:	2703      	movs	r7, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004694:	400b      	ands	r3, r1
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800469a:	23c0      	movs	r3, #192	; 0xc0
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a2:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80046a8:	18db      	adds	r3, r3, r3
 80046aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ac:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ae:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046b0:	f001 f9c6 	bl	8005a40 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80046b4:	4c11      	ldr	r4, [pc, #68]	; (80046fc <HAL_UART_MspInit+0x9c>)
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <HAL_UART_MspInit+0xa0>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80046b8:	0020      	movs	r0, r4
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80046ba:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80046c0:	3b60      	subs	r3, #96	; 0x60
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 80046c2:	6067      	str	r7, [r4, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046c4:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046c6:	60e5      	str	r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046c8:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046ca:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80046cc:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80046ce:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80046d0:	f000 ffc4 	bl	800565c <HAL_DMA_Init>
 80046d4:	42a8      	cmp	r0, r5
 80046d6:	d001      	beq.n	80046dc <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 80046d8:	f7ff fada 	bl	8003c90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80046dc:	201b      	movs	r0, #27
 80046de:	2200      	movs	r2, #0
 80046e0:	2101      	movs	r1, #1
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80046e2:	6734      	str	r4, [r6, #112]	; 0x70
 80046e4:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80046e6:	f000 ff69 	bl	80055bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80046ea:	201b      	movs	r0, #27
 80046ec:	f000 ff90 	bl	8005610 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80046f0:	b007      	add	sp, #28
 80046f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f4:	40013800 	.word	0x40013800
 80046f8:	40021000 	.word	0x40021000
 80046fc:	200002bc 	.word	0x200002bc
 8004700:	40020030 	.word	0x40020030

08004704 <HAL_WWDG_MspInit>:
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
  if(hwwdg->Instance==WWDG)
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <HAL_WWDG_MspInit+0x18>)
 8004706:	6802      	ldr	r2, [r0, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d105      	bne.n	8004718 <HAL_WWDG_MspInit+0x14>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	4a04      	ldr	r2, [pc, #16]	; (8004720 <HAL_WWDG_MspInit+0x1c>)
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004714:	430b      	orrs	r3, r1
 8004716:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8004718:	4770      	bx	lr
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	40002c00 	.word	0x40002c00
 8004720:	40021000 	.word	0x40021000

08004724 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004724:	e7fe      	b.n	8004724 <NMI_Handler>

08004726 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004726:	e7fe      	b.n	8004726 <HardFault_Handler>

08004728 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004728:	4770      	bx	lr

0800472a <PendSV_Handler>:
 800472a:	4770      	bx	lr

0800472c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800472c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800472e:	f000 fcb7 	bl	80050a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004732:	bd10      	pop	{r4, pc}

08004734 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8004734:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004736:	4802      	ldr	r0, [pc, #8]	; (8004740 <RTC_IRQHandler+0xc>)
 8004738:	f002 f968 	bl	8006a0c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800473c:	bd10      	pop	{r4, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	200003b8 	.word	0x200003b8

08004744 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004744:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004746:	2001      	movs	r0, #1
 8004748:	f001 fa42 	bl	8005bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800474c:	bd10      	pop	{r4, pc}

0800474e <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800474e:	2080      	movs	r0, #128	; 0x80
{
 8004750:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004752:	0040      	lsls	r0, r0, #1
 8004754:	f001 fa3c 	bl	8005bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004758:	bd10      	pop	{r4, pc}
	...

0800475c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800475c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800475e:	4802      	ldr	r0, [pc, #8]	; (8004768 <DMA1_Channel1_IRQHandler+0xc>)
 8004760:	f001 f845 	bl	80057ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004764:	bd10      	pop	{r4, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	20000448 	.word	0x20000448

0800476c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800476c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800476e:	4802      	ldr	r0, [pc, #8]	; (8004778 <DMA1_Channel2_3_IRQHandler+0xc>)
 8004770:	f001 f83d 	bl	80057ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004774:	bd10      	pop	{r4, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	200002bc 	.word	0x200002bc

0800477c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 800477c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800477e:	4802      	ldr	r0, [pc, #8]	; (8004788 <LPTIM1_IRQHandler+0xc>)
 8004780:	f001 faa0 	bl	8005cc4 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004784:	bd10      	pop	{r4, pc}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	20000388 	.word	0x20000388

0800478c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800478c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800478e:	4802      	ldr	r0, [pc, #8]	; (8004798 <USART1_IRQHandler+0xc>)
 8004790:	f002 fc4e 	bl	8007030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004794:	bd10      	pop	{r4, pc}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	20000304 	.word	0x20000304

0800479c <SX127X_SetNSS>:
 */
#include "main.h"

#ifndef USE_LL
__weak void SX127X_SetNSS(SX127X_t *module, GPIO_PinState state)
{
 800479c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(module->nss.port, module->nss.pin, state);
 800479e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 80047a0:	000a      	movs	r2, r1
	HAL_GPIO_WritePin(module->nss.port, module->nss.pin, state);
 80047a2:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80047a4:	b299      	uxth	r1, r3
 80047a6:	f001 fa0b 	bl	8005bc0 <HAL_GPIO_WritePin>
}
 80047aa:	bd10      	pop	{r4, pc}

080047ac <SX127X_Reset>:

__weak void SX127X_Reset(SX127X_t *module)
{
 80047ac:	b510      	push	{r4, lr}
 80047ae:	0004      	movs	r4, r0
	SX127X_SetNSS(module, 1);
 80047b0:	2101      	movs	r1, #1
 80047b2:	f7ff fff3 	bl	800479c <SX127X_SetNSS>
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_RESET);
 80047b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047b8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80047ba:	b299      	uxth	r1, r3
 80047bc:	2200      	movs	r2, #0
 80047be:	f001 f9ff 	bl	8005bc0 <HAL_GPIO_WritePin>

	SX127X_delayMicro(1000);

	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 80047c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047c4:	2201      	movs	r2, #1
 80047c6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80047c8:	b299      	uxth	r1, r3
 80047ca:	f001 f9f9 	bl	8005bc0 <HAL_GPIO_WritePin>

	SX127X_delayMicro(6000);
}
 80047ce:	bd10      	pop	{r4, pc}

080047d0 <SX127X_SPICommand>:

__weak void SX127X_SPICommand(SX127X_t *module, uint8_t cmd)
{
 80047d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047d2:	466b      	mov	r3, sp
 80047d4:	71d9      	strb	r1, [r3, #7]
	SX127X_SetNSS(module, 0);
 80047d6:	2100      	movs	r1, #0
{
 80047d8:	1ddd      	adds	r5, r3, #7
 80047da:	0004      	movs	r4, r0
	SX127X_SetNSS(module, 0);
 80047dc:	f7ff ffde 	bl	800479c <SX127X_SetNSS>
	HAL_SPI_Transmit(module->spi, &cmd, 1, 1000);
 80047e0:	23fa      	movs	r3, #250	; 0xfa
 80047e2:	2201      	movs	r2, #1
 80047e4:	0029      	movs	r1, r5
 80047e6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	f002 fa19 	bl	8006c20 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->spi) != HAL_SPI_STATE_READY)
 80047ee:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80047f0:	f002 fbc6 	bl	8006f80 <HAL_SPI_GetState>
 80047f4:	2801      	cmp	r0, #1
 80047f6:	d1fa      	bne.n	80047ee <SX127X_SPICommand+0x1e>
		;
}
 80047f8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080047fa <SX127X_SPIReadByte>:

__weak uint8_t SX127X_SPIReadByte(SX127X_t *module)
{
 80047fa:	b530      	push	{r4, r5, lr}
	uint8_t txByte = 0x00;
 80047fc:	250e      	movs	r5, #14
{
 80047fe:	b085      	sub	sp, #20
	uint8_t txByte = 0x00;
 8004800:	2100      	movs	r1, #0
	uint8_t rxByte = 0x00;
 8004802:	466b      	mov	r3, sp
	uint8_t txByte = 0x00;
 8004804:	446d      	add	r5, sp
{
 8004806:	0004      	movs	r4, r0
	uint8_t txByte = 0x00;
 8004808:	7029      	strb	r1, [r5, #0]
	uint8_t rxByte = 0x00;
 800480a:	73d9      	strb	r1, [r3, #15]

	SX127X_SetNSS(module, 0);
 800480c:	f7ff ffc6 	bl	800479c <SX127X_SetNSS>
	HAL_SPI_TransmitReceive(module->spi, &txByte, &rxByte, 1, 1000);
 8004810:	23fa      	movs	r3, #250	; 0xfa
 8004812:	220f      	movs	r2, #15
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	0029      	movs	r1, r5
 800481a:	2301      	movs	r3, #1
 800481c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800481e:	446a      	add	r2, sp
 8004820:	f002 fab9 	bl	8006d96 <HAL_SPI_TransmitReceive>
	return rxByte;
 8004824:	466b      	mov	r3, sp
 8004826:	7bd8      	ldrb	r0, [r3, #15]
}
 8004828:	b005      	add	sp, #20
 800482a:	bd30      	pop	{r4, r5, pc}

0800482c <SX127X_SPIRead>:
//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX127X_SPIRead(SX127X_t *module, uint8_t addr)
{
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	0004      	movs	r4, r0
	uint8_t tmp;
	SX127X_SPICommand(module, addr);
 8004830:	f7ff ffce 	bl	80047d0 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 8004834:	0020      	movs	r0, r4
 8004836:	f7ff ffe0 	bl	80047fa <SX127X_SPIReadByte>
 800483a:	0005      	movs	r5, r0
	SX127X_SetNSS(module, 1);
 800483c:	2101      	movs	r1, #1
 800483e:	0020      	movs	r0, r4
 8004840:	f7ff ffac 	bl	800479c <SX127X_SetNSS>
	return tmp;
}
 8004844:	0028      	movs	r0, r5
 8004846:	bd70      	pop	{r4, r5, r6, pc}

08004848 <SX127X_SPIWrite>:

void SX127X_SPIWrite(SX127X_t *module, uint8_t addr, uint8_t cmd)
{
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	000d      	movs	r5, r1
	SX127X_SetNSS(module, 0);
 800484c:	2100      	movs	r1, #0
{
 800484e:	0016      	movs	r6, r2
 8004850:	0004      	movs	r4, r0
	SX127X_SetNSS(module, 0);
 8004852:	f7ff ffa3 	bl	800479c <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8004856:	2180      	movs	r1, #128	; 0x80
 8004858:	0020      	movs	r0, r4
 800485a:	4329      	orrs	r1, r5
 800485c:	f7ff ffb8 	bl	80047d0 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8004860:	0031      	movs	r1, r6
 8004862:	0020      	movs	r0, r4
 8004864:	f7ff ffb4 	bl	80047d0 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8004868:	2101      	movs	r1, #1
 800486a:	0020      	movs	r0, r4
 800486c:	f7ff ff96 	bl	800479c <SX127X_SetNSS>
}
 8004870:	bd70      	pop	{r4, r5, r6, pc}

08004872 <SX127X_SPIBurstRead>:

void SX127X_SPIBurstRead(SX127X_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length)
{
 8004872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004874:	0004      	movs	r4, r0
 8004876:	000e      	movs	r6, r1
 8004878:	0017      	movs	r7, r2
 800487a:	001d      	movs	r5, r3
	uint8_t i;
	if (length <= 1)
 800487c:	2b01      	cmp	r3, #1
 800487e:	d913      	bls.n	80048a8 <SX127X_SPIBurstRead+0x36>
		return;
	else
	{
		SX127X_SetNSS(module, 0);
 8004880:	2100      	movs	r1, #0
 8004882:	f7ff ff8b 	bl	800479c <SX127X_SetNSS>
		SX127X_SPICommand(module, addr);
 8004886:	0031      	movs	r1, r6
 8004888:	0020      	movs	r0, r4
 800488a:	f7ff ffa1 	bl	80047d0 <SX127X_SPICommand>
 800488e:	2600      	movs	r6, #0
		for (i = 0; i < length; i++)
		{
			*(rxBuf + i) = SX127X_SPIReadByte(module);
 8004890:	0020      	movs	r0, r4
 8004892:	f7ff ffb2 	bl	80047fa <SX127X_SPIReadByte>
 8004896:	55b8      	strb	r0, [r7, r6]
		for (i = 0; i < length; i++)
 8004898:	3601      	adds	r6, #1
 800489a:	b2f3      	uxtb	r3, r6
 800489c:	429d      	cmp	r5, r3
 800489e:	d8f7      	bhi.n	8004890 <SX127X_SPIBurstRead+0x1e>
		}
		SX127X_SetNSS(module, 1);
 80048a0:	2101      	movs	r1, #1
 80048a2:	0020      	movs	r0, r4
 80048a4:	f7ff ff7a 	bl	800479c <SX127X_SetNSS>
	}
}
 80048a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080048aa <SX127X_SPIBurstWrite>:

void SX127X_SPIBurstWrite(SX127X_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length)
{
 80048aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ac:	0004      	movs	r4, r0
 80048ae:	000d      	movs	r5, r1
 80048b0:	0017      	movs	r7, r2
 80048b2:	001e      	movs	r6, r3
	unsigned char i;
	if (length <= 1)
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d914      	bls.n	80048e2 <SX127X_SPIBurstWrite+0x38>
		return;
	else
	{
		SX127X_SetNSS(module, 0);
 80048b8:	2100      	movs	r1, #0
 80048ba:	f7ff ff6f 	bl	800479c <SX127X_SetNSS>
		SX127X_SPICommand(module, addr | 0x80);
 80048be:	2180      	movs	r1, #128	; 0x80
 80048c0:	0020      	movs	r0, r4
 80048c2:	4329      	orrs	r1, r5
 80048c4:	f7ff ff84 	bl	80047d0 <SX127X_SPICommand>
 80048c8:	2500      	movs	r5, #0
		for (i = 0; i < length; i++)
		{
			SX127X_SPICommand(module, *(txBuf + i));
 80048ca:	5d79      	ldrb	r1, [r7, r5]
 80048cc:	0020      	movs	r0, r4
 80048ce:	3501      	adds	r5, #1
 80048d0:	f7ff ff7e 	bl	80047d0 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 80048d4:	b2eb      	uxtb	r3, r5
 80048d6:	429e      	cmp	r6, r3
 80048d8:	d8f7      	bhi.n	80048ca <SX127X_SPIBurstWrite+0x20>
		}
		SX127X_SetNSS(module, 1);
 80048da:	2101      	movs	r1, #1
 80048dc:	0020      	movs	r0, r4
 80048de:	f7ff ff5d 	bl	800479c <SX127X_SetNSS>
	}
}
 80048e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080048e4 <SX127X_defaultConfig>:
void SX127X_defaultConfig(SX127X_t *module)
{
	module->bw = SX127X_LORA_BW_125KHZ;
	module->cr = SX127X_CR_4_8;
	module->crcEnable = 1;
	module->frequency = SX127X_FREQ_DEFAULT;
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <SX127X_defaultConfig+0x1c>)
 80048e6:	6003      	str	r3, [r0, #0]
	module->implicitHeader = 1;
	module->len = 3;
	module->power = SX127X_POWER_20DBM;
 80048e8:	4b06      	ldr	r3, [pc, #24]	; (8004904 <SX127X_defaultConfig+0x20>)
 80048ea:	6043      	str	r3, [r0, #4]
	module->len = 3;
 80048ec:	2304      	movs	r3, #4
 80048ee:	33ff      	adds	r3, #255	; 0xff
 80048f0:	8103      	strh	r3, [r0, #8]
	module->implicitHeader = 1;
 80048f2:	3b03      	subs	r3, #3
 80048f4:	3bff      	subs	r3, #255	; 0xff
 80048f6:	7283      	strb	r3, [r0, #10]
	module->preamble = 5;
 80048f8:	4b03      	ldr	r3, [pc, #12]	; (8004908 <SX127X_defaultConfig+0x24>)
 80048fa:	60c3      	str	r3, [r0, #12]
	module->sf = SX127X_LORA_SF_12;
	module->syncWord = 0x1;
	module->alwaysRX = 1;
}
 80048fc:	4770      	bx	lr
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	00d94024 	.word	0x00d94024
 8004904:	04070c14 	.word	0x04070c14
 8004908:	01010005 	.word	0x01010005

0800490c <SX127X_PortConfig>:

void SX127X_PortConfig(SX127X_t *module, SX127X_dio_t reset, SX127X_dio_t nss,
		SPI_HandleTypeDef *hspi)
{
 800490c:	b082      	sub	sp, #8
 800490e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004910:	9307      	str	r3, [sp, #28]
 8004912:	466c      	mov	r4, sp
	module->reset = reset;
 8004914:	0003      	movs	r3, r0
{
 8004916:	6062      	str	r2, [r4, #4]
 8004918:	9100      	str	r1, [sp, #0]
	module->reset = reset;
 800491a:	3364      	adds	r3, #100	; 0x64
 800491c:	cc22      	ldmia	r4!, {r1, r5}
 800491e:	c322      	stmia	r3!, {r1, r5}
{
 8004920:	aa07      	add	r2, sp, #28
	module->nss = nss;
 8004922:	ca12      	ldmia	r2!, {r1, r4}
 8004924:	c312      	stmia	r3!, {r1, r4}
	module->spi = hspi;
 8004926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004928:	6743      	str	r3, [r0, #116]	; 0x74
}
 800492a:	bc37      	pop	{r0, r1, r2, r4, r5}
 800492c:	bc08      	pop	{r3}
 800492e:	b002      	add	sp, #8
 8004930:	4718      	bx	r3
	...

08004934 <SX127X_standby>:

void SX127X_standby(SX127X_t *module)
{
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004934:	4b07      	ldr	r3, [pc, #28]	; (8004954 <SX127X_standby+0x20>)
 8004936:	6802      	ldr	r2, [r0, #0]
{
 8004938:	b510      	push	{r4, lr}
 800493a:	0004      	movs	r4, r0
	if (module->frequency < SX127X_FREQ_525MHZ)
 800493c:	429a      	cmp	r2, r3
 800493e:	d807      	bhi.n	8004950 <SX127X_standby+0x1c>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x89);
 8004940:	2289      	movs	r2, #137	; 0x89
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x81);
 8004942:	2101      	movs	r1, #1
 8004944:	0020      	movs	r0, r4
 8004946:	f7ff ff7f 	bl	8004848 <SX127X_SPIWrite>
	module->status = STANDBY;
 800494a:	2302      	movs	r3, #2
 800494c:	7423      	strb	r3, [r4, #16]
}
 800494e:	bd10      	pop	{r4, pc}
		SX127X_SPIWrite(module, LR_RegOpMode, 0x81);
 8004950:	2281      	movs	r2, #129	; 0x81
 8004952:	e7f6      	b.n	8004942 <SX127X_standby+0xe>
 8004954:	00834015 	.word	0x00834015

08004958 <SX127X_sleep>:

void SX127X_sleep(SX127X_t *module)
{
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004958:	4b07      	ldr	r3, [pc, #28]	; (8004978 <SX127X_sleep+0x20>)
 800495a:	6802      	ldr	r2, [r0, #0]
{
 800495c:	b510      	push	{r4, lr}
 800495e:	0004      	movs	r4, r0
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004960:	429a      	cmp	r2, r3
 8004962:	d807      	bhi.n	8004974 <SX127X_sleep+0x1c>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x88);
 8004964:	2288      	movs	r2, #136	; 0x88
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x80);
 8004966:	2101      	movs	r1, #1
 8004968:	0020      	movs	r0, r4
 800496a:	f7ff ff6d 	bl	8004848 <SX127X_SPIWrite>
	module->status = SLEEP;
 800496e:	2301      	movs	r3, #1
 8004970:	7423      	strb	r3, [r4, #16]
}
 8004972:	bd10      	pop	{r4, pc}
		SX127X_SPIWrite(module, LR_RegOpMode, 0x80);
 8004974:	2280      	movs	r2, #128	; 0x80
 8004976:	e7f6      	b.n	8004966 <SX127X_sleep+0xe>
 8004978:	00834015 	.word	0x00834015

0800497c <SX127X_config>:
{
 800497c:	b510      	push	{r4, lr}
 800497e:	0004      	movs	r4, r0
	SX127X_sleep(module); //Change modem mode Must in Sleep mode
 8004980:	f7ff ffea 	bl	8004958 <SX127X_sleep>
	SX127X_SPIWrite(module, LR_RegFrMsb, (module->frequency >> 16) & 0xFF);
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	2106      	movs	r1, #6
 8004988:	0c1a      	lsrs	r2, r3, #16
 800498a:	0020      	movs	r0, r4
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	f7ff ff5b 	bl	8004848 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegFrMid, (module->frequency >> 8) & 0xFF);
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	2107      	movs	r1, #7
 8004996:	0a1a      	lsrs	r2, r3, #8
 8004998:	0020      	movs	r0, r4
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	f7ff ff54 	bl	8004848 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegFrLsb, (module->frequency) & 0xFF);
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	2108      	movs	r1, #8
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	0020      	movs	r0, r4
 80049a8:	f7ff ff4e 	bl	8004848 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPaConfig, 0xF0 | (module->power - 5)); //Setting output power parameter
 80049ac:	2210      	movs	r2, #16
 80049ae:	7923      	ldrb	r3, [r4, #4]
 80049b0:	4252      	negs	r2, r2
 80049b2:	3b05      	subs	r3, #5
 80049b4:	431a      	orrs	r2, r3
 80049b6:	2109      	movs	r1, #9
 80049b8:	0020      	movs	r0, r4
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	f7ff ff44 	bl	8004848 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegOcp, 0x32);	//OCP to 150 mA
 80049c0:	2232      	movs	r2, #50	; 0x32
 80049c2:	210b      	movs	r1, #11
 80049c4:	0020      	movs	r0, r4
 80049c6:	f7ff ff3f 	bl	8004848 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegLna, 0x23);	//LNA to full gain
 80049ca:	2223      	movs	r2, #35	; 0x23
 80049cc:	210c      	movs	r1, #12
 80049ce:	0020      	movs	r0, r4
 80049d0:	f7ff ff3a 	bl	8004848 <SX127X_SPIWrite>
			(module->implicitHeader & 1)); //Implicit header flag
 80049d4:	2101      	movs	r1, #1
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 80049d6:	79a2      	ldrb	r2, [r4, #6]
			(module->cr << 1)) +         //Coding rate
 80049d8:	79e3      	ldrb	r3, [r4, #7]
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 80049da:	0112      	lsls	r2, r2, #4
			(module->cr << 1)) +         //Coding rate
 80049dc:	005b      	lsls	r3, r3, #1
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 80049de:	18d2      	adds	r2, r2, r3
			(module->implicitHeader & 1)); //Implicit header flag
 80049e0:	7aa3      	ldrb	r3, [r4, #10]
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 80049e2:	0020      	movs	r0, r4
			(module->implicitHeader & 1)); //Implicit header flag
 80049e4:	400b      	ands	r3, r1
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 80049e6:	18d2      	adds	r2, r2, r3
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	311c      	adds	r1, #28
 80049ec:	f7ff ff2c 	bl	8004848 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 80049f0:	7962      	ldrb	r2, [r4, #5]
			(module->crcEnable << 2) +     //CRC enable flag
 80049f2:	7a63      	ldrb	r3, [r4, #9]
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 80049f4:	0112      	lsls	r2, r2, #4
			(module->crcEnable << 2) +     //CRC enable flag
 80049f6:	009b      	lsls	r3, r3, #2
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 80049f8:	18d2      	adds	r2, r2, r3
 80049fa:	3203      	adds	r2, #3
 80049fc:	211e      	movs	r1, #30
 80049fe:	0020      	movs	r0, r4
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	f7ff ff21 	bl	8004848 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RX symb Timeout = 0x3FF(Max)
 8004a06:	22ff      	movs	r2, #255	; 0xff
 8004a08:	211f      	movs	r1, #31
 8004a0a:	0020      	movs	r0, r4
 8004a0c:	f7ff ff1c 	bl	8004848 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPreambleMsb, (module->preamble >> 8) & 0xFF); //RegPreambleMsb
 8004a10:	89a2      	ldrh	r2, [r4, #12]
 8004a12:	2120      	movs	r1, #32
 8004a14:	0020      	movs	r0, r4
 8004a16:	0a12      	lsrs	r2, r2, #8
 8004a18:	f7ff ff16 	bl	8004848 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPreambleLsb, module->preamble & 0xFF); //RegPreambleLsb
 8004a1c:	2121      	movs	r1, #33	; 0x21
 8004a1e:	0020      	movs	r0, r4
 8004a20:	7b22      	ldrb	r2, [r4, #12]
 8004a22:	f7ff ff11 	bl	8004848 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //Payload lenght
 8004a26:	2122      	movs	r1, #34	; 0x22
 8004a28:	0020      	movs	r0, r4
 8004a2a:	7a22      	ldrb	r2, [r4, #8]
 8004a2c:	f7ff ff0c 	bl	8004848 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegSyncWord, module->syncWord);  //Sync word
 8004a30:	2139      	movs	r1, #57	; 0x39
 8004a32:	0020      	movs	r0, r4
 8004a34:	7ba2      	ldrb	r2, [r4, #14]
 8004a36:	f7ff ff07 	bl	8004848 <SX127X_SPIWrite>
	module->readBytes = 0;
 8004a3a:	0023      	movs	r3, r4
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	335d      	adds	r3, #93	; 0x5d
 8004a40:	701a      	strb	r2, [r3, #0]
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004a42:	2142      	movs	r1, #66	; 0x42
 8004a44:	0020      	movs	r0, r4
 8004a46:	f7ff fef1 	bl	800482c <SX127X_SPIRead>
 8004a4a:	0023      	movs	r3, r4
 8004a4c:	3378      	adds	r3, #120	; 0x78
 8004a4e:	7018      	strb	r0, [r3, #0]
	if (module->bw == SX127X_LORA_BW_500KHZ && module->revision == 0x12)
 8004a50:	79a3      	ldrb	r3, [r4, #6]
 8004a52:	2b09      	cmp	r3, #9
 8004a54:	d121      	bne.n	8004a9a <SX127X_config+0x11e>
 8004a56:	2812      	cmp	r0, #18
 8004a58:	d11f      	bne.n	8004a9a <SX127X_config+0x11e>
				&& module->frequency < SX127X_FREQ_1020MHZ)
 8004a5a:	4a12      	ldr	r2, [pc, #72]	; (8004aa4 <SX127X_config+0x128>)
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	189b      	adds	r3, r3, r2
		if (module->frequency > SX127X_FREQ_820MHZ
 8004a60:	4a11      	ldr	r2, [pc, #68]	; (8004aa8 <SX127X_config+0x12c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d809      	bhi.n	8004a7a <SX127X_config+0xfe>
			SX127X_SPIWrite(module, 0x36, 0x2);
 8004a66:	2202      	movs	r2, #2
 8004a68:	2136      	movs	r1, #54	; 0x36
 8004a6a:	0020      	movs	r0, r4
 8004a6c:	f7ff feec 	bl	8004848 <SX127X_SPIWrite>
			SX127X_SPIWrite(module, 0x3A, 0x64);
 8004a70:	2264      	movs	r2, #100	; 0x64
 8004a72:	213a      	movs	r1, #58	; 0x3a
 8004a74:	0020      	movs	r0, r4
 8004a76:	f7ff fee7 	bl	8004848 <SX127X_SPIWrite>
				&& module->frequency < SX127X_FREQ_525MHZ)
 8004a7a:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <SX127X_config+0x130>)
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	189b      	adds	r3, r3, r2
		if (module->frequency > SX127X_FREQ_410MHZ
 8004a80:	4a0b      	ldr	r2, [pc, #44]	; (8004ab0 <SX127X_config+0x134>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d809      	bhi.n	8004a9a <SX127X_config+0x11e>
			SX127X_SPIWrite(module, 0x36, 0x3);
 8004a86:	2203      	movs	r2, #3
 8004a88:	2136      	movs	r1, #54	; 0x36
 8004a8a:	0020      	movs	r0, r4
 8004a8c:	f7ff fedc 	bl	8004848 <SX127X_SPIWrite>
			SX127X_SPIWrite(module, 0x3A, 0x7F);
 8004a90:	227f      	movs	r2, #127	; 0x7f
 8004a92:	213a      	movs	r1, #58	; 0x3a
 8004a94:	0020      	movs	r0, r4
 8004a96:	f7ff fed7 	bl	8004848 <SX127X_SPIWrite>
	SX127X_standby(module); //Entry standby mode
 8004a9a:	0020      	movs	r0, r4
 8004a9c:	f7ff ff4a 	bl	8004934 <SX127X_standby>
}
 8004aa0:	bd10      	pop	{r4, pc}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	ff32ffdd 	.word	0xff32ffdd
 8004aa8:	00320006 	.word	0x00320006
 8004aac:	ff997fee 	.word	0xff997fee
 8004ab0:	001cc003 	.word	0x001cc003

08004ab4 <SX127X_clearIrq>:

void SX127X_clearIrq(SX127X_t *module)
{
 8004ab4:	b510      	push	{r4, lr}
	SX127X_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8004ab6:	22ff      	movs	r2, #255	; 0xff
 8004ab8:	2112      	movs	r1, #18
 8004aba:	f7ff fec5 	bl	8004848 <SX127X_SPIWrite>
}
 8004abe:	bd10      	pop	{r4, pc}

08004ac0 <SX127X_startRx>:

int SX127X_startRx(SX127X_t *module, uint32_t timeout)
{
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	0004      	movs	r4, r0
 8004ac4:	000d      	movs	r5, r1
	uint8_t addr;
	SX127X_config(module);		//Setting base parameter
 8004ac6:	f7ff ff59 	bl	800497c <SX127X_config>
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8004aca:	2284      	movs	r2, #132	; 0x84
 8004acc:	214d      	movs	r1, #77	; 0x4d
 8004ace:	0020      	movs	r0, r4
 8004ad0:	f7ff feba 	bl	8004848 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00);	//No FHSS
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2124      	movs	r1, #36	; 0x24
 8004ad8:	0020      	movs	r0, r4
 8004ada:	f7ff feb5 	bl	8004848 <SX127X_SPIWrite>
	SX127X_clearIrq(module);
 8004ade:	0020      	movs	r0, r4
 8004ae0:	f7ff ffe8 	bl	8004ab4 <SX127X_clearIrq>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len);
 8004ae4:	7a22      	ldrb	r2, [r4, #8]
 8004ae6:	2122      	movs	r1, #34	; 0x22
 8004ae8:	0020      	movs	r0, r4
 8004aea:	f7ff fead 	bl	8004848 <SX127X_SPIWrite>
	addr = SX127X_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8004aee:	210f      	movs	r1, #15
 8004af0:	0020      	movs	r0, r4
 8004af2:	f7ff fe9b 	bl	800482c <SX127X_SPIRead>
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8004af6:	210d      	movs	r1, #13
	addr = SX127X_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8004af8:	0002      	movs	r2, r0
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8004afa:	0020      	movs	r0, r4
 8004afc:	f7ff fea4 	bl	8004848 <SX127X_SPIWrite>
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004b00:	4b13      	ldr	r3, [pc, #76]	; (8004b50 <SX127X_startRx+0x90>)
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d812      	bhi.n	8004b2e <SX127X_startRx+0x6e>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8d);	//Cont RX Mode & LF
 8004b08:	228d      	movs	r2, #141	; 0x8d
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x85);	    //Cont RX Mode & HF
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	0020      	movs	r0, r4
 8004b0e:	f7ff fe9b 	bl	8004848 <SX127X_SPIWrite>
	module->readBytes = 0;
 8004b12:	0023      	movs	r3, r4
 8004b14:	2200      	movs	r2, #0

	while (1)
	{
		uint8_t status = SX127X_SPIRead(module, LR_RegModemStat);
		if (status & 0x04)
 8004b16:	2604      	movs	r6, #4
	module->readBytes = 0;
 8004b18:	335d      	adds	r3, #93	; 0x5d
 8004b1a:	701a      	strb	r2, [r3, #0]
		uint8_t status = SX127X_SPIRead(module, LR_RegModemStat);
 8004b1c:	2118      	movs	r1, #24
 8004b1e:	0020      	movs	r0, r4
 8004b20:	f7ff fe84 	bl	800482c <SX127X_SPIRead>
		if (status & 0x04)
 8004b24:	4230      	tst	r0, r6
 8004b26:	d004      	beq.n	8004b32 <SX127X_startRx+0x72>
		{	//Rx-on going RegModemStat
			module->status = RX;
			return 1;
 8004b28:	2001      	movs	r0, #1
			module->status = RX;
 8004b2a:	7426      	strb	r6, [r4, #16]
			return 0;
		}

		HAL_Delay(1);
	}
}
 8004b2c:	bd70      	pop	{r4, r5, r6, pc}
		SX127X_SPIWrite(module, LR_RegOpMode, 0x85);	    //Cont RX Mode & HF
 8004b2e:	2285      	movs	r2, #133	; 0x85
 8004b30:	e7eb      	b.n	8004b0a <SX127X_startRx+0x4a>
		if (--timeout == 0)
 8004b32:	3d01      	subs	r5, #1
 8004b34:	2d00      	cmp	r5, #0
 8004b36:	d107      	bne.n	8004b48 <SX127X_startRx+0x88>
			SX127X_Reset(module);
 8004b38:	0020      	movs	r0, r4
 8004b3a:	f7ff fe37 	bl	80047ac <SX127X_Reset>
			SX127X_config(module);
 8004b3e:	0020      	movs	r0, r4
 8004b40:	f7ff ff1c 	bl	800497c <SX127X_config>
			return 0;
 8004b44:	0028      	movs	r0, r5
 8004b46:	e7f1      	b.n	8004b2c <SX127X_startRx+0x6c>
		HAL_Delay(1);
 8004b48:	2001      	movs	r0, #1
 8004b4a:	f000 fabb 	bl	80050c4 <HAL_Delay>
	{
 8004b4e:	e7e5      	b.n	8004b1c <SX127X_startRx+0x5c>
 8004b50:	00834015 	.word	0x00834015

08004b54 <SX127X_receive>:

uint8_t SX127X_receive(SX127X_t *module)
{
 8004b54:	b570      	push	{r4, r5, r6, lr}
	unsigned char addr;
	unsigned char packet_size;
	memset(module->rxBuf, 0x00, SX127X_MAX_PACKET);
 8004b56:	0006      	movs	r6, r0
{
 8004b58:	0004      	movs	r4, r0
	memset(module->rxBuf, 0x00, SX127X_MAX_PACKET);
 8004b5a:	361d      	adds	r6, #29
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	2100      	movs	r1, #0
 8004b60:	0030      	movs	r0, r6
 8004b62:	f002 ff16 	bl	8007992 <memset>

	addr = SX127X_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8004b66:	2110      	movs	r1, #16
 8004b68:	0020      	movs	r0, r4
 8004b6a:	f7ff fe5f 	bl	800482c <SX127X_SPIRead>
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8004b6e:	210d      	movs	r1, #13
	addr = SX127X_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8004b70:	0002      	movs	r2, r0
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8004b72:	0020      	movs	r0, r4
 8004b74:	f7ff fe68 	bl	8004848 <SX127X_SPIWrite>
	if (module->sf == SX127X_LORA_SF_6)
 8004b78:	7963      	ldrb	r3, [r4, #5]
 8004b7a:	2b06      	cmp	r3, #6
 8004b7c:	d10a      	bne.n	8004b94 <SX127X_receive+0x40>
		packet_size = module->len;
 8004b7e:	7a25      	ldrb	r5, [r4, #8]
	else
		packet_size = SX127X_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
	SX127X_SPIBurstRead(module, 0x00, module->rxBuf, packet_size);
 8004b80:	002b      	movs	r3, r5
 8004b82:	0032      	movs	r2, r6
 8004b84:	0020      	movs	r0, r4
 8004b86:	2100      	movs	r1, #0
	module->readBytes = packet_size;
 8004b88:	345d      	adds	r4, #93	; 0x5d
	SX127X_SPIBurstRead(module, 0x00, module->rxBuf, packet_size);
 8004b8a:	f7ff fe72 	bl	8004872 <SX127X_SPIBurstRead>
	return module->readBytes;
}
 8004b8e:	0028      	movs	r0, r5
	module->readBytes = packet_size;
 8004b90:	7025      	strb	r5, [r4, #0]
}
 8004b92:	bd70      	pop	{r4, r5, r6, pc}
		packet_size = SX127X_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8004b94:	2113      	movs	r1, #19
 8004b96:	0020      	movs	r0, r4
 8004b98:	f7ff fe48 	bl	800482c <SX127X_SPIRead>
 8004b9c:	0005      	movs	r5, r0
 8004b9e:	e7ef      	b.n	8004b80 <SX127X_receive+0x2c>

08004ba0 <SX127X_startTransmission>:

void SX127X_startTransmission(SX127X_t *module)
{
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	0004      	movs	r4, r0
	uint8_t addr;
	SX127X_config(module); //setting base parameter
 8004ba4:	f7ff feea 	bl	800497c <SX127X_config>
	module->status = TX;
 8004ba8:	2303      	movs	r3, #3
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8004baa:	2287      	movs	r2, #135	; 0x87
	module->status = TX;
 8004bac:	7423      	strb	r3, [r4, #16]
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8004bae:	214d      	movs	r1, #77	; 0x4d
 8004bb0:	0020      	movs	r0, r4
 8004bb2:	f7ff fe49 	bl	8004848 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2124      	movs	r1, #36	; 0x24
 8004bba:	0020      	movs	r0, r4
 8004bbc:	f7ff fe44 	bl	8004848 <SX127X_SPIWrite>
	SX127X_clearIrq(module);
 8004bc0:	0020      	movs	r0, r4
 8004bc2:	f7ff ff77 	bl	8004ab4 <SX127X_clearIrq>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //RegPayloadLength 21byte
 8004bc6:	7a22      	ldrb	r2, [r4, #8]
 8004bc8:	2122      	movs	r1, #34	; 0x22
 8004bca:	0020      	movs	r0, r4
 8004bcc:	f7ff fe3c 	bl	8004848 <SX127X_SPIWrite>
	addr = SX127X_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8004bd0:	210e      	movs	r1, #14
 8004bd2:	0020      	movs	r0, r4
 8004bd4:	f7ff fe2a 	bl	800482c <SX127X_SPIRead>
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8004bd8:	210d      	movs	r1, #13
	addr = SX127X_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8004bda:	0002      	movs	r2, r0
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8004bdc:	0020      	movs	r0, r4
 8004bde:	f7ff fe33 	bl	8004848 <SX127X_SPIWrite>
	SX127X_SPIBurstWrite(module, 0x00, module->txBuf, module->len);
 8004be2:	0022      	movs	r2, r4
 8004be4:	7a23      	ldrb	r3, [r4, #8]
 8004be6:	323d      	adds	r2, #61	; 0x3d
 8004be8:	2100      	movs	r1, #0
 8004bea:	0020      	movs	r0, r4
 8004bec:	f7ff fe5d 	bl	80048aa <SX127X_SPIBurstWrite>
	module->lastTransTick = HAL_GetTick();
 8004bf0:	f000 fa62 	bl	80050b8 <HAL_GetTick>
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004bf4:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <SX127X_startTransmission+0x74>)
 8004bf6:	6822      	ldr	r2, [r4, #0]
	module->lastTransTick = HAL_GetTick();
 8004bf8:	6160      	str	r0, [r4, #20]
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d807      	bhi.n	8004c0e <SX127X_startTransmission+0x6e>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode LF
 8004bfe:	228b      	movs	r2, #139	; 0x8b
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x83);	//Tx Mode HF
 8004c00:	2101      	movs	r1, #1
 8004c02:	0020      	movs	r0, r4
 8004c04:	f7ff fe20 	bl	8004848 <SX127X_SPIWrite>
	module->TXrequest = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	7463      	strb	r3, [r4, #17]

}
 8004c0c:	bd10      	pop	{r4, pc}
		SX127X_SPIWrite(module, LR_RegOpMode, 0x83);	//Tx Mode HF
 8004c0e:	2283      	movs	r2, #131	; 0x83
 8004c10:	e7f6      	b.n	8004c00 <SX127X_startTransmission+0x60>
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	00834015 	.word	0x00834015

08004c18 <SX127X_transmitAsync>:

HAL_StatusTypeDef SX127X_transmitAsync(SX127X_t *module, uint8_t lenght)
{
	if (module->TXrequest == 0 && module->status != TX)
 8004c18:	2201      	movs	r2, #1
{
 8004c1a:	b530      	push	{r4, r5, lr}
	if (module->TXrequest == 0 && module->status != TX)
 8004c1c:	7c44      	ldrb	r4, [r0, #17]
{
 8004c1e:	0003      	movs	r3, r0
		module->TXrequest = 1;

		return HAL_OK;
	}
	else
		return HAL_ERROR;
 8004c20:	0010      	movs	r0, r2
	if (module->TXrequest == 0 && module->status != TX)
 8004c22:	2c00      	cmp	r4, #0
 8004c24:	d105      	bne.n	8004c32 <SX127X_transmitAsync+0x1a>
 8004c26:	7c1d      	ldrb	r5, [r3, #16]
 8004c28:	2d03      	cmp	r5, #3
 8004c2a:	d002      	beq.n	8004c32 <SX127X_transmitAsync+0x1a>
		return HAL_OK;
 8004c2c:	0020      	movs	r0, r4
		module->len = lenght;
 8004c2e:	7219      	strb	r1, [r3, #8]
		module->TXrequest = 1;
 8004c30:	745a      	strb	r2, [r3, #17]
}
 8004c32:	bd30      	pop	{r4, r5, pc}

08004c34 <SX127X_readStatus>:
	else
		return -ret;
}

void SX127X_readStatus(SX127X_t *module)
{
 8004c34:	b510      	push	{r4, lr}
 8004c36:	0004      	movs	r4, r0
	module->modemStatus = SX127X_SPIRead(module, LR_RegModemStat);
 8004c38:	2118      	movs	r1, #24
 8004c3a:	f7ff fdf7 	bl	800482c <SX127X_SPIRead>
 8004c3e:	0023      	movs	r3, r4
 8004c40:	335f      	adds	r3, #95	; 0x5f
	if (module->modemStatus & MODEM_STATUS_SIG_DET)
 8004c42:	0002      	movs	r2, r0
	module->modemStatus = SX127X_SPIRead(module, LR_RegModemStat);
 8004c44:	7018      	strb	r0, [r3, #0]
	if (module->modemStatus & MODEM_STATUS_SIG_DET)
 8004c46:	2301      	movs	r3, #1
 8004c48:	401a      	ands	r2, r3
 8004c4a:	4218      	tst	r0, r3
 8004c4c:	d007      	beq.n	8004c5e <SX127X_readStatus+0x2a>
	{
		module->signalDetected = true;
 8004c4e:	7723      	strb	r3, [r4, #28]
		module->lastSignalTick = HAL_GetTick();
 8004c50:	f000 fa32 	bl	80050b8 <HAL_GetTick>
 8004c54:	61a0      	str	r0, [r4, #24]
		module->watchdogTick = HAL_GetTick();
 8004c56:	f000 fa2f 	bl	80050b8 <HAL_GetTick>
 8004c5a:	67e0      	str	r0, [r4, #124]	; 0x7c
	}
	else
		module->signalDetected = false;
}
 8004c5c:	bd10      	pop	{r4, pc}
		module->signalDetected = false;
 8004c5e:	7722      	strb	r2, [r4, #28]
}
 8004c60:	e7fc      	b.n	8004c5c <SX127X_readStatus+0x28>

08004c62 <SX127X_readIrq>:

void SX127X_readIrq(SX127X_t *module)
{
 8004c62:	b510      	push	{r4, lr}
	module->irq = SX127X_SPIRead(module, LR_RegIrqFlags);
 8004c64:	2112      	movs	r1, #18
{
 8004c66:	0004      	movs	r4, r0
	module->irq = SX127X_SPIRead(module, LR_RegIrqFlags);
 8004c68:	f7ff fde0 	bl	800482c <SX127X_SPIRead>
 8004c6c:	345e      	adds	r4, #94	; 0x5e
 8004c6e:	7020      	strb	r0, [r4, #0]
}
 8004c70:	bd10      	pop	{r4, pc}
	...

08004c74 <SX127X_Routine>:
{
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	0004      	movs	r4, r0
	SX127X_readStatus(module);
 8004c78:	f7ff ffdc 	bl	8004c34 <SX127X_readStatus>
	SX127X_readIrq(module);
 8004c7c:	0020      	movs	r0, r4
 8004c7e:	f7ff fff0 	bl	8004c62 <SX127X_readIrq>
	if (module->status == UNINITIALISED)
 8004c82:	7c23      	ldrb	r3, [r4, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <SX127X_Routine+0x20>
		SX127X_Reset(module);
 8004c88:	0020      	movs	r0, r4
 8004c8a:	f7ff fd8f 	bl	80047ac <SX127X_Reset>
		SX127X_config(module);
 8004c8e:	0020      	movs	r0, r4
 8004c90:	f7ff fe74 	bl	800497c <SX127X_config>
	if ((module->status == SLEEP || module->status == STANDBY)
 8004c94:	7c23      	ldrb	r3, [r4, #16]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d807      	bhi.n	8004cac <SX127X_Routine+0x38>
			&& module->alwaysRX)
 8004c9c:	7be3      	ldrb	r3, [r4, #15]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d004      	beq.n	8004cac <SX127X_Routine+0x38>
		SX127X_startRx(module, 1000);
 8004ca2:	21fa      	movs	r1, #250	; 0xfa
 8004ca4:	0020      	movs	r0, r4
 8004ca6:	0089      	lsls	r1, r1, #2
 8004ca8:	f7ff ff0a 	bl	8004ac0 <SX127X_startRx>
	if (module->TXrequest && (module->modemStatus & MODEM_STATUS_SIG_DET) == 0)
 8004cac:	7c63      	ldrb	r3, [r4, #17]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <SX127X_Routine+0x4e>
 8004cb2:	0023      	movs	r3, r4
 8004cb4:	335f      	adds	r3, #95	; 0x5f
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	07db      	lsls	r3, r3, #31
 8004cba:	d402      	bmi.n	8004cc2 <SX127X_Routine+0x4e>
		SX127X_startTransmission(module);
 8004cbc:	0020      	movs	r0, r4
 8004cbe:	f7ff ff6f 	bl	8004ba0 <SX127X_startTransmission>
	if (module->irq & IRQ_TX_DONE)
 8004cc2:	0025      	movs	r5, r4
	SX127X_readIrq(module);
 8004cc4:	0020      	movs	r0, r4
	if (module->irq & IRQ_TX_DONE)
 8004cc6:	355e      	adds	r5, #94	; 0x5e
	SX127X_readIrq(module);
 8004cc8:	f7ff ffcb 	bl	8004c62 <SX127X_readIrq>
	if (module->irq & IRQ_TX_DONE)
 8004ccc:	782b      	ldrb	r3, [r5, #0]
 8004cce:	071b      	lsls	r3, r3, #28
 8004cd0:	d506      	bpl.n	8004ce0 <SX127X_Routine+0x6c>
		SX127X_clearIrq(module);
 8004cd2:	0020      	movs	r0, r4
 8004cd4:	f7ff feee 	bl	8004ab4 <SX127X_clearIrq>
		SX127X_startRx(module, 100);
 8004cd8:	2164      	movs	r1, #100	; 0x64
 8004cda:	0020      	movs	r0, r4
 8004cdc:	f7ff fef0 	bl	8004ac0 <SX127X_startRx>
	if (module->irq & IRQ_RX_DONE)
 8004ce0:	782b      	ldrb	r3, [r5, #0]
 8004ce2:	065a      	lsls	r2, r3, #25
 8004ce4:	d50a      	bpl.n	8004cfc <SX127X_Routine+0x88>
		module->badCrc = (module->irq & IRQ_CRC_ERROR) >> 5;
 8004ce6:	0022      	movs	r2, r4
 8004ce8:	069b      	lsls	r3, r3, #26
 8004cea:	0fdb      	lsrs	r3, r3, #31
 8004cec:	3260      	adds	r2, #96	; 0x60
		SX127X_receive(module);
 8004cee:	0020      	movs	r0, r4
		module->badCrc = (module->irq & IRQ_CRC_ERROR) >> 5;
 8004cf0:	7013      	strb	r3, [r2, #0]
		SX127X_receive(module);
 8004cf2:	f7ff ff2f 	bl	8004b54 <SX127X_receive>
		SX127X_clearIrq(module);
 8004cf6:	0020      	movs	r0, r4
 8004cf8:	f7ff fedc 	bl	8004ab4 <SX127X_clearIrq>
	if (((SX127X_SPIRead(module, 0x1D)) != (module->bw << 4 | module->cr << 1 | module->implicitHeader))
 8004cfc:	211d      	movs	r1, #29
 8004cfe:	0020      	movs	r0, r4
 8004d00:	f7ff fd94 	bl	800482c <SX127X_SPIRead>
 8004d04:	79a3      	ldrb	r3, [r4, #6]
 8004d06:	79e2      	ldrb	r2, [r4, #7]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	0052      	lsls	r2, r2, #1
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	7aa2      	ldrb	r2, [r4, #10]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	4298      	cmp	r0, r3
 8004d14:	d00a      	beq.n	8004d2c <SX127X_Routine+0xb8>
		module->wdCounter++;
 8004d16:	0022      	movs	r2, r4
 8004d18:	3280      	adds	r2, #128	; 0x80
 8004d1a:	8813      	ldrh	r3, [r2, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	8013      	strh	r3, [r2, #0]
		module->watchdogTick = HAL_GetTick();
 8004d20:	f000 f9ca 	bl	80050b8 <HAL_GetTick>
		module->status = UNINITIALISED;
 8004d24:	2300      	movs	r3, #0
		module->watchdogTick = HAL_GetTick();
 8004d26:	67e0      	str	r0, [r4, #124]	; 0x7c
		module->status = UNINITIALISED;
 8004d28:	7423      	strb	r3, [r4, #16]
}
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
			|| (HAL_GetTick() - module->watchdogTick > 120000)) //Watchdog
 8004d2c:	f000 f9c4 	bl	80050b8 <HAL_GetTick>
 8004d30:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004d32:	1ac0      	subs	r0, r0, r3
 8004d34:	4b01      	ldr	r3, [pc, #4]	; (8004d3c <SX127X_Routine+0xc8>)
 8004d36:	4298      	cmp	r0, r3
 8004d38:	d8ed      	bhi.n	8004d16 <SX127X_Routine+0xa2>
 8004d3a:	e7f6      	b.n	8004d2a <SX127X_Routine+0xb6>
 8004d3c:	0001d4c0 	.word	0x0001d4c0

08004d40 <SX127X_init>:
{
	return SX127X_SPIRead(module, LR_RegWideBandRSSI);
}

void SX127X_init(SX127X_t *module)
{
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	0004      	movs	r4, r0
	SX127X_Reset(module);
 8004d44:	f7ff fd32 	bl	80047ac <SX127X_Reset>
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004d48:	0025      	movs	r5, r4
 8004d4a:	2142      	movs	r1, #66	; 0x42
 8004d4c:	0020      	movs	r0, r4
 8004d4e:	f7ff fd6d 	bl	800482c <SX127X_SPIRead>
 8004d52:	3578      	adds	r5, #120	; 0x78
 8004d54:	7028      	strb	r0, [r5, #0]
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004d56:	2142      	movs	r1, #66	; 0x42
 8004d58:	0020      	movs	r0, r4
 8004d5a:	f7ff fd67 	bl	800482c <SX127X_SPIRead>
 8004d5e:	7028      	strb	r0, [r5, #0]
}
 8004d60:	bd70      	pop	{r4, r5, r6, pc}

08004d62 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004d62:	2001      	movs	r0, #1
 8004d64:	4770      	bx	lr

08004d66 <_kill>:

int _kill(int pid, int sig)
{
 8004d66:	b510      	push	{r4, lr}
	errno = EINVAL;
 8004d68:	f002 fde0 	bl	800792c <__errno>
 8004d6c:	2316      	movs	r3, #22
 8004d6e:	6003      	str	r3, [r0, #0]
	return -1;
 8004d70:	2001      	movs	r0, #1
}
 8004d72:	4240      	negs	r0, r0
 8004d74:	bd10      	pop	{r4, pc}

08004d76 <_exit>:

void _exit (int status)
{
 8004d76:	b510      	push	{r4, lr}
	errno = EINVAL;
 8004d78:	f002 fdd8 	bl	800792c <__errno>
 8004d7c:	2316      	movs	r3, #22
 8004d7e:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8004d80:	e7fe      	b.n	8004d80 <_exit+0xa>

08004d82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d82:	b570      	push	{r4, r5, r6, lr}
 8004d84:	000e      	movs	r6, r1
 8004d86:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d88:	2500      	movs	r5, #0
 8004d8a:	42a5      	cmp	r5, r4
 8004d8c:	db01      	blt.n	8004d92 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8004d8e:	0020      	movs	r0, r4
 8004d90:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8004d92:	e000      	b.n	8004d96 <_read+0x14>
 8004d94:	bf00      	nop
 8004d96:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d98:	3501      	adds	r5, #1
 8004d9a:	e7f6      	b.n	8004d8a <_read+0x8>

08004d9c <_close>:
	return len;
}

int _close(int file)
{
	return -1;
 8004d9c:	2001      	movs	r0, #1
}
 8004d9e:	4240      	negs	r0, r0
 8004da0:	4770      	bx	lr

08004da2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	019b      	lsls	r3, r3, #6
	return 0;
}
 8004da6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004da8:	604b      	str	r3, [r1, #4]
}
 8004daa:	4770      	bx	lr

08004dac <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004dac:	2001      	movs	r0, #1
 8004dae:	4770      	bx	lr

08004db0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004db0:	2000      	movs	r0, #0
 8004db2:	4770      	bx	lr

08004db4 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004db4:	4a0b      	ldr	r2, [pc, #44]	; (8004de4 <_sbrk+0x30>)
 8004db6:	490c      	ldr	r1, [pc, #48]	; (8004de8 <_sbrk+0x34>)
{
 8004db8:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004dba:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004dbc:	4a0b      	ldr	r2, [pc, #44]	; (8004dec <_sbrk+0x38>)
{
 8004dbe:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8004dc0:	6810      	ldr	r0, [r2, #0]
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d101      	bne.n	8004dca <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8004dc6:	480a      	ldr	r0, [pc, #40]	; (8004df0 <_sbrk+0x3c>)
 8004dc8:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dca:	6810      	ldr	r0, [r2, #0]
 8004dcc:	18c3      	adds	r3, r0, r3
 8004dce:	428b      	cmp	r3, r1
 8004dd0:	d906      	bls.n	8004de0 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8004dd2:	f002 fdab 	bl	800792c <__errno>
 8004dd6:	230c      	movs	r3, #12
 8004dd8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004dda:	2001      	movs	r0, #1
 8004ddc:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004dde:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004de0:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8004de2:	e7fc      	b.n	8004dde <_sbrk+0x2a>
 8004de4:	00000400 	.word	0x00000400
 8004de8:	20002000 	.word	0x20002000
 8004dec:	20000228 	.word	0x20000228
 8004df0:	20000540 	.word	0x20000540

08004df4 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004df4:	4770      	bx	lr
	...

08004df8 <readByte>:
	hdma->XferCpltCallback = readByte;
}

void readByte (UART_HandleTypeDef* huart)
{
	if (data == '<')
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <readByte+0x30>)
 8004dfa:	490c      	ldr	r1, [pc, #48]	; (8004e2c <readByte+0x34>)
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	2a3c      	cmp	r2, #60	; 0x3c
 8004e00:	d102      	bne.n	8004e08 <readByte+0x10>
		uartPos = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	700b      	strb	r3, [r1, #0]
			len = uartPos;
			flag.uartRx = 1;
		}
	else
		uartRx[uartPos++] = data;
}
 8004e06:	4770      	bx	lr
	else if (data == '>')
 8004e08:	780b      	ldrb	r3, [r1, #0]
 8004e0a:	2a3e      	cmp	r2, #62	; 0x3e
 8004e0c:	d107      	bne.n	8004e1e <readByte+0x26>
			len = uartPos;
 8004e0e:	4a08      	ldr	r2, [pc, #32]	; (8004e30 <readByte+0x38>)
 8004e10:	7013      	strb	r3, [r2, #0]
			flag.uartRx = 1;
 8004e12:	2308      	movs	r3, #8
 8004e14:	4a07      	ldr	r2, [pc, #28]	; (8004e34 <readByte+0x3c>)
 8004e16:	7811      	ldrb	r1, [r2, #0]
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	7013      	strb	r3, [r2, #0]
}
 8004e1c:	e7f3      	b.n	8004e06 <readByte+0xe>
		uartRx[uartPos++] = data;
 8004e1e:	1c58      	adds	r0, r3, #1
 8004e20:	7008      	strb	r0, [r1, #0]
 8004e22:	4905      	ldr	r1, [pc, #20]	; (8004e38 <readByte+0x40>)
 8004e24:	54ca      	strb	r2, [r1, r3]
}
 8004e26:	e7ee      	b.n	8004e06 <readByte+0xe>
 8004e28:	200004ed 	.word	0x200004ed
 8004e2c:	200004ec 	.word	0x200004ec
 8004e30:	2000050e 	.word	0x2000050e
 8004e34:	20000214 	.word	0x20000214
 8004e38:	200004ee 	.word	0x200004ee

08004e3c <initUart>:
{
 8004e3c:	b510      	push	{r4, lr}
 8004e3e:	000c      	movs	r4, r1
	HAL_UART_Receive_DMA(huart, &data, 1);
 8004e40:	2201      	movs	r2, #1
 8004e42:	4903      	ldr	r1, [pc, #12]	; (8004e50 <initUart+0x14>)
 8004e44:	f002 fd22 	bl	800788c <HAL_UART_Receive_DMA>
	hdma->XferCpltCallback = readByte;
 8004e48:	4b02      	ldr	r3, [pc, #8]	; (8004e54 <initUart+0x18>)
 8004e4a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8004e4c:	bd10      	pop	{r4, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	200004ed 	.word	0x200004ed
 8004e54:	08004df9 	.word	0x08004df9

08004e58 <uartReceiveHandler>:

void uartReceiveHandler (nodeSettings_t* settingsPtr)
{
 8004e58:	b510      	push	{r4, lr}

	uint8_t l = len - 1;
 8004e5a:	4b39      	ldr	r3, [pc, #228]	; (8004f40 <uartReceiveHandler+0xe8>)
{
 8004e5c:	0004      	movs	r4, r0
	uint8_t l = len - 1;
 8004e5e:	7819      	ldrb	r1, [r3, #0]
	uint8_t *ptr = uartRx + 1;
	uint32_t tmp;

	switch (uartRx[0])
 8004e60:	4b38      	ldr	r3, [pc, #224]	; (8004f44 <uartReceiveHandler+0xec>)
	uint8_t l = len - 1;
 8004e62:	3901      	subs	r1, #1
	switch (uartRx[0])
 8004e64:	7818      	ldrb	r0, [r3, #0]
	uint8_t l = len - 1;
 8004e66:	b2c9      	uxtb	r1, r1
	switch (uartRx[0])
 8004e68:	2853      	cmp	r0, #83	; 0x53
 8004e6a:	d818      	bhi.n	8004e9e <uartReceiveHandler+0x46>
 8004e6c:	2830      	cmp	r0, #48	; 0x30
 8004e6e:	d91a      	bls.n	8004ea6 <uartReceiveHandler+0x4e>
 8004e70:	3831      	subs	r0, #49	; 0x31
 8004e72:	2822      	cmp	r0, #34	; 0x22
 8004e74:	d817      	bhi.n	8004ea6 <uartReceiveHandler+0x4e>
 8004e76:	f7fb f94f 	bl	8000118 <__gnu_thumb1_case_uqi>
 8004e7a:	211c      	.short	0x211c
 8004e7c:	163a2b26 	.word	0x163a2b26
 8004e80:	16353016 	.word	0x16353016
 8004e84:	16161616 	.word	0x16161616
 8004e88:	1616165d 	.word	0x1616165d
 8004e8c:	16161658 	.word	0x16161658
 8004e90:	16161616 	.word	0x16161616
 8004e94:	16164916 	.word	0x16164916
 8004e98:	54161616 	.word	0x54161616
 8004e9c:	4e          	.byte	0x4e
 8004e9d:	00          	.byte	0x00
 8004e9e:	2869      	cmp	r0, #105	; 0x69
 8004ea0:	d02f      	beq.n	8004f02 <uartReceiveHandler+0xaa>
 8004ea2:	286e      	cmp	r0, #110	; 0x6e
 8004ea4:	d028      	beq.n	8004ef8 <uartReceiveHandler+0xa0>
		case UART_STATUS:
			flag.statusRequested = 1;
			break;

		default:
			printf ("Bad format!");
 8004ea6:	4828      	ldr	r0, [pc, #160]	; (8004f48 <uartReceiveHandler+0xf0>)
 8004ea8:	f003 f9f6 	bl	8008298 <iprintf>
			Error_Handler ();
 8004eac:	f7fe fef0 	bl	8003c90 <Error_Handler>
			break;

	}

}
 8004eb0:	e003      	b.n	8004eba <uartReceiveHandler+0x62>
			tmp = DecToInt (ptr, l);
 8004eb2:	4826      	ldr	r0, [pc, #152]	; (8004f4c <uartReceiveHandler+0xf4>)
 8004eb4:	f7fe fa1e 	bl	80032f4 <DecToInt>
			settingsPtr->realFrequency = tmp;
 8004eb8:	6020      	str	r0, [r4, #0]
}
 8004eba:	bd10      	pop	{r4, pc}
			tmp = DecToInt (ptr, l);
 8004ebc:	4823      	ldr	r0, [pc, #140]	; (8004f4c <uartReceiveHandler+0xf4>)
 8004ebe:	f7fe fa19 	bl	80032f4 <DecToInt>
			settingsPtr->sf = tmp;
 8004ec2:	7320      	strb	r0, [r4, #12]
			break;
 8004ec4:	e7f9      	b.n	8004eba <uartReceiveHandler+0x62>
			tmp = DecToInt (ptr, l);
 8004ec6:	4821      	ldr	r0, [pc, #132]	; (8004f4c <uartReceiveHandler+0xf4>)
 8004ec8:	f7fe fa14 	bl	80032f4 <DecToInt>
			settingsPtr->bw = tmp;
 8004ecc:	7360      	strb	r0, [r4, #13]
			break;
 8004ece:	e7f4      	b.n	8004eba <uartReceiveHandler+0x62>
			tmp = HexToInt (ptr, l);
 8004ed0:	481e      	ldr	r0, [pc, #120]	; (8004f4c <uartReceiveHandler+0xf4>)
 8004ed2:	f7fe fa2a 	bl	800332a <HexToInt>
			settingsPtr->sw = tmp;
 8004ed6:	73a0      	strb	r0, [r4, #14]
			break;
 8004ed8:	e7ef      	b.n	8004eba <uartReceiveHandler+0x62>
			tmp = DecToInt (ptr, l);
 8004eda:	481c      	ldr	r0, [pc, #112]	; (8004f4c <uartReceiveHandler+0xf4>)
 8004edc:	f7fe fa0a 	bl	80032f4 <DecToInt>
			settingsPtr->preamble = tmp;
 8004ee0:	8120      	strh	r0, [r4, #8]
			break;
 8004ee2:	e7ea      	b.n	8004eba <uartReceiveHandler+0x62>
			tmp = DecToInt (ptr, l);
 8004ee4:	4819      	ldr	r0, [pc, #100]	; (8004f4c <uartReceiveHandler+0xf4>)
 8004ee6:	f7fe fa05 	bl	80032f4 <DecToInt>
			settingsPtr->cr = tmp;
 8004eea:	72e0      	strb	r0, [r4, #11]
			break;
 8004eec:	e7e5      	b.n	8004eba <uartReceiveHandler+0x62>
			tmp = DecToInt (ptr, l);
 8004eee:	4817      	ldr	r0, [pc, #92]	; (8004f4c <uartReceiveHandler+0xf4>)
 8004ef0:	f7fe fa00 	bl	80032f4 <DecToInt>
			settingsPtr->power = tmp;
 8004ef4:	73e0      	strb	r0, [r4, #15]
			break;
 8004ef6:	e7e0      	b.n	8004eba <uartReceiveHandler+0x62>
			settingsPtr->nodeNum = DecToInt (ptr, l);
 8004ef8:	4814      	ldr	r0, [pc, #80]	; (8004f4c <uartReceiveHandler+0xf4>)
 8004efa:	f7fe f9fb 	bl	80032f4 <DecToInt>
 8004efe:	72a0      	strb	r0, [r4, #10]
			break;
 8004f00:	e7db      	b.n	8004eba <uartReceiveHandler+0x62>
			settingsPtr->workInterval = DecToInt (ptr, l);
 8004f02:	4812      	ldr	r0, [pc, #72]	; (8004f4c <uartReceiveHandler+0xf4>)
 8004f04:	f7fe f9f6 	bl	80032f4 <DecToInt>
 8004f08:	6060      	str	r0, [r4, #4]
			break;
 8004f0a:	e7d6      	b.n	8004eba <uartReceiveHandler+0x62>
			settingsPtr->useLed = DecToInt (ptr, l);
 8004f0c:	480f      	ldr	r0, [pc, #60]	; (8004f4c <uartReceiveHandler+0xf4>)
 8004f0e:	f7fe f9f1 	bl	80032f4 <DecToInt>
 8004f12:	7420      	strb	r0, [r4, #16]
			break;
 8004f14:	e7d1      	b.n	8004eba <uartReceiveHandler+0x62>
			flag.saveSettings = 1;
 8004f16:	2310      	movs	r3, #16
 8004f18:	4a0d      	ldr	r2, [pc, #52]	; (8004f50 <uartReceiveHandler+0xf8>)
 8004f1a:	7811      	ldrb	r1, [r2, #0]
			flag.readConfig = 1;
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	7013      	strb	r3, [r2, #0]
			break;
 8004f20:	e7cb      	b.n	8004eba <uartReceiveHandler+0x62>
			flag.readConfig = 1;
 8004f22:	4a0b      	ldr	r2, [pc, #44]	; (8004f50 <uartReceiveHandler+0xf8>)
 8004f24:	2320      	movs	r3, #32
 8004f26:	7811      	ldrb	r1, [r2, #0]
 8004f28:	e7f8      	b.n	8004f1c <uartReceiveHandler+0xc4>
			printf ("<ANv%lx>", SOFTWARE_REVISION);
 8004f2a:	490a      	ldr	r1, [pc, #40]	; (8004f54 <uartReceiveHandler+0xfc>)
 8004f2c:	480a      	ldr	r0, [pc, #40]	; (8004f58 <uartReceiveHandler+0x100>)
 8004f2e:	f003 f9b3 	bl	8008298 <iprintf>
			break;
 8004f32:	e7c2      	b.n	8004eba <uartReceiveHandler+0x62>
			flag.statusRequested = 1;
 8004f34:	2304      	movs	r3, #4
 8004f36:	4a06      	ldr	r2, [pc, #24]	; (8004f50 <uartReceiveHandler+0xf8>)
 8004f38:	7851      	ldrb	r1, [r2, #1]
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	7053      	strb	r3, [r2, #1]
			break;
 8004f3e:	e7bc      	b.n	8004eba <uartReceiveHandler+0x62>
 8004f40:	2000050e 	.word	0x2000050e
 8004f44:	200004ee 	.word	0x200004ee
 8004f48:	0800af89 	.word	0x0800af89
 8004f4c:	200004ef 	.word	0x200004ef
 8004f50:	20000214 	.word	0x20000214
 8004f54:	13082021 	.word	0x13082021
 8004f58:	0800af80 	.word	0x0800af80

08004f5c <sendConfig>:

void sendConfig (nodeSettings_t* settingsPtr)
{
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	0004      	movs	r4, r0
	printf ("<1%lu>", settingsPtr->realFrequency);
 8004f60:	6801      	ldr	r1, [r0, #0]
 8004f62:	4814      	ldr	r0, [pc, #80]	; (8004fb4 <sendConfig+0x58>)
 8004f64:	f003 f998 	bl	8008298 <iprintf>
	printf ("<2%u>", settingsPtr->sf);
 8004f68:	7b21      	ldrb	r1, [r4, #12]
 8004f6a:	4813      	ldr	r0, [pc, #76]	; (8004fb8 <sendConfig+0x5c>)
 8004f6c:	f003 f994 	bl	8008298 <iprintf>
	printf ("<3%u>", settingsPtr->bw);
 8004f70:	7b61      	ldrb	r1, [r4, #13]
 8004f72:	4812      	ldr	r0, [pc, #72]	; (8004fbc <sendConfig+0x60>)
 8004f74:	f003 f990 	bl	8008298 <iprintf>
	printf ("<4%X>", settingsPtr->sw);
 8004f78:	7ba1      	ldrb	r1, [r4, #14]
 8004f7a:	4811      	ldr	r0, [pc, #68]	; (8004fc0 <sendConfig+0x64>)
 8004f7c:	f003 f98c 	bl	8008298 <iprintf>
	printf ("<5%u>", settingsPtr->power);
 8004f80:	7be1      	ldrb	r1, [r4, #15]
 8004f82:	4810      	ldr	r0, [pc, #64]	; (8004fc4 <sendConfig+0x68>)
 8004f84:	f003 f988 	bl	8008298 <iprintf>
	printf ("<8%u>", settingsPtr->preamble);
 8004f88:	8921      	ldrh	r1, [r4, #8]
 8004f8a:	480f      	ldr	r0, [pc, #60]	; (8004fc8 <sendConfig+0x6c>)
 8004f8c:	f003 f984 	bl	8008298 <iprintf>
	printf ("<9%u>", settingsPtr->cr);
 8004f90:	7ae1      	ldrb	r1, [r4, #11]
 8004f92:	480e      	ldr	r0, [pc, #56]	; (8004fcc <sendConfig+0x70>)
 8004f94:	f003 f980 	bl	8008298 <iprintf>
	printf ("<n%u>", settingsPtr->nodeNum);
 8004f98:	7aa1      	ldrb	r1, [r4, #10]
 8004f9a:	480d      	ldr	r0, [pc, #52]	; (8004fd0 <sendConfig+0x74>)
 8004f9c:	f003 f97c 	bl	8008298 <iprintf>
	printf ("<i%lu>", settingsPtr->workInterval);
 8004fa0:	6861      	ldr	r1, [r4, #4]
 8004fa2:	480c      	ldr	r0, [pc, #48]	; (8004fd4 <sendConfig+0x78>)
 8004fa4:	f003 f978 	bl	8008298 <iprintf>
	printf ("<L%u>\n", settingsPtr->useLed);
 8004fa8:	7c21      	ldrb	r1, [r4, #16]
 8004faa:	480b      	ldr	r0, [pc, #44]	; (8004fd8 <sendConfig+0x7c>)
 8004fac:	f003 f974 	bl	8008298 <iprintf>
}
 8004fb0:	bd10      	pop	{r4, pc}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	0800af95 	.word	0x0800af95
 8004fb8:	0800af9c 	.word	0x0800af9c
 8004fbc:	0800afa2 	.word	0x0800afa2
 8004fc0:	0800afa8 	.word	0x0800afa8
 8004fc4:	0800afae 	.word	0x0800afae
 8004fc8:	0800afb4 	.word	0x0800afb4
 8004fcc:	0800afba 	.word	0x0800afba
 8004fd0:	0800afc0 	.word	0x0800afc0
 8004fd4:	0800afc6 	.word	0x0800afc6
 8004fd8:	0800afcd 	.word	0x0800afcd

08004fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004fdc:	480d      	ldr	r0, [pc, #52]	; (8005014 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004fde:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fe0:	480d      	ldr	r0, [pc, #52]	; (8005018 <LoopForever+0x6>)
  ldr r1, =_edata
 8004fe2:	490e      	ldr	r1, [pc, #56]	; (800501c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004fe4:	4a0e      	ldr	r2, [pc, #56]	; (8005020 <LoopForever+0xe>)
  movs r3, #0
 8004fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fe8:	e002      	b.n	8004ff0 <LoopCopyDataInit>

08004fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fee:	3304      	adds	r3, #4

08004ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ff4:	d3f9      	bcc.n	8004fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ff6:	4a0b      	ldr	r2, [pc, #44]	; (8005024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ff8:	4c0b      	ldr	r4, [pc, #44]	; (8005028 <LoopForever+0x16>)
  movs r3, #0
 8004ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ffc:	e001      	b.n	8005002 <LoopFillZerobss>

08004ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005000:	3204      	adds	r2, #4

08005002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005004:	d3fb      	bcc.n	8004ffe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005006:	f7ff fef5 	bl	8004df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800500a:	f002 fc95 	bl	8007938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800500e:	f7fe fea5 	bl	8003d5c <main>

08005012 <LoopForever>:

LoopForever:
    b LoopForever
 8005012:	e7fe      	b.n	8005012 <LoopForever>
   ldr   r0, =_estack
 8005014:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800501c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8005020:	0800b3d4 	.word	0x0800b3d4
  ldr r2, =_sbss
 8005024:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8005028:	2000053c 	.word	0x2000053c

0800502c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800502c:	e7fe      	b.n	800502c <ADC1_COMP_IRQHandler>
	...

08005030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005030:	b570      	push	{r4, r5, r6, lr}
 8005032:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005034:	20fa      	movs	r0, #250	; 0xfa
 8005036:	4b0d      	ldr	r3, [pc, #52]	; (800506c <HAL_InitTick+0x3c>)
 8005038:	0080      	lsls	r0, r0, #2
 800503a:	7819      	ldrb	r1, [r3, #0]
 800503c:	f7fb f880 	bl	8000140 <__udivsi3>
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <HAL_InitTick+0x40>)
 8005042:	0001      	movs	r1, r0
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	f7fb f87b 	bl	8000140 <__udivsi3>
 800504a:	f000 faed 	bl	8005628 <HAL_SYSTICK_Config>
 800504e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8005050:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005052:	2c00      	cmp	r4, #0
 8005054:	d109      	bne.n	800506a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005056:	2d03      	cmp	r5, #3
 8005058:	d807      	bhi.n	800506a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800505a:	3802      	subs	r0, #2
 800505c:	0022      	movs	r2, r4
 800505e:	0029      	movs	r1, r5
 8005060:	f000 faac 	bl	80055bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005064:	0020      	movs	r0, r4
 8005066:	4b03      	ldr	r3, [pc, #12]	; (8005074 <HAL_InitTick+0x44>)
 8005068:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	2000001c 	.word	0x2000001c
 8005070:	20000018 	.word	0x20000018
 8005074:	20000020 	.word	0x20000020

08005078 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005078:	2340      	movs	r3, #64	; 0x40
 800507a:	4a08      	ldr	r2, [pc, #32]	; (800509c <HAL_Init+0x24>)
{
 800507c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800507e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005080:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005082:	430b      	orrs	r3, r1
 8005084:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005086:	f7ff ffd3 	bl	8005030 <HAL_InitTick>
 800508a:	1e04      	subs	r4, r0, #0
 800508c:	d103      	bne.n	8005096 <HAL_Init+0x1e>
    HAL_MspInit();
 800508e:	f7ff fa33 	bl	80044f8 <HAL_MspInit>
}
 8005092:	0020      	movs	r0, r4
 8005094:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8005096:	2401      	movs	r4, #1
 8005098:	e7fb      	b.n	8005092 <HAL_Init+0x1a>
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	40022000 	.word	0x40022000

080050a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80050a0:	4a03      	ldr	r2, [pc, #12]	; (80050b0 <HAL_IncTick+0x10>)
 80050a2:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <HAL_IncTick+0x14>)
 80050a4:	6811      	ldr	r1, [r2, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	185b      	adds	r3, r3, r1
 80050aa:	6013      	str	r3, [r2, #0]
}
 80050ac:	4770      	bx	lr
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	20000510 	.word	0x20000510
 80050b4:	2000001c 	.word	0x2000001c

080050b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80050b8:	4b01      	ldr	r3, [pc, #4]	; (80050c0 <HAL_GetTick+0x8>)
 80050ba:	6818      	ldr	r0, [r3, #0]
}
 80050bc:	4770      	bx	lr
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	20000510 	.word	0x20000510

080050c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80050c8:	f7ff fff6 	bl	80050b8 <HAL_GetTick>
 80050cc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050ce:	1c63      	adds	r3, r4, #1
 80050d0:	d002      	beq.n	80050d8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80050d2:	4b04      	ldr	r3, [pc, #16]	; (80050e4 <HAL_Delay+0x20>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050d8:	f7ff ffee 	bl	80050b8 <HAL_GetTick>
 80050dc:	1b40      	subs	r0, r0, r5
 80050de:	42a0      	cmp	r0, r4
 80050e0:	d3fa      	bcc.n	80050d8 <HAL_Delay+0x14>
  {
  }
}
 80050e2:	bd70      	pop	{r4, r5, r6, pc}
 80050e4:	2000001c 	.word	0x2000001c

080050e8 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80050e8:	2102      	movs	r1, #2
 80050ea:	4a02      	ldr	r2, [pc, #8]	; (80050f4 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80050ec:	6853      	ldr	r3, [r2, #4]
 80050ee:	438b      	bics	r3, r1
 80050f0:	6053      	str	r3, [r2, #4]
}
 80050f2:	4770      	bx	lr
 80050f4:	40015800 	.word	0x40015800

080050f8 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80050f8:	4b08      	ldr	r3, [pc, #32]	; (800511c <ADC_DelayMicroSecond+0x24>)
{
 80050fa:	b513      	push	{r0, r1, r4, lr}
 80050fc:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80050fe:	4908      	ldr	r1, [pc, #32]	; (8005120 <ADC_DelayMicroSecond+0x28>)
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	f7fb f81d 	bl	8000140 <__udivsi3>
 8005106:	4344      	muls	r4, r0
 8005108:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 800510a:	9b01      	ldr	r3, [sp, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d100      	bne.n	8005112 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8005110:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8005112:	9b01      	ldr	r3, [sp, #4]
 8005114:	3b01      	subs	r3, #1
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	e7f7      	b.n	800510a <ADC_DelayMicroSecond+0x12>
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	20000018 	.word	0x20000018
 8005120:	000f4240 	.word	0x000f4240

08005124 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005124:	2103      	movs	r1, #3
 8005126:	6803      	ldr	r3, [r0, #0]
{
 8005128:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800512a:	689a      	ldr	r2, [r3, #8]
{
 800512c:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800512e:	400a      	ands	r2, r1
 8005130:	2a01      	cmp	r2, #1
 8005132:	d104      	bne.n	800513e <ADC_Enable+0x1a>
 8005134:	6819      	ldr	r1, [r3, #0]
 8005136:	4211      	tst	r1, r2
 8005138:	d001      	beq.n	800513e <ADC_Enable+0x1a>
  return HAL_OK;
 800513a:	2000      	movs	r0, #0
}
 800513c:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800513e:	6899      	ldr	r1, [r3, #8]
 8005140:	4a13      	ldr	r2, [pc, #76]	; (8005190 <ADC_Enable+0x6c>)
 8005142:	4211      	tst	r1, r2
 8005144:	d008      	beq.n	8005158 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005146:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005148:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800514a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800514c:	4313      	orrs	r3, r2
 800514e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005150:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005152:	4303      	orrs	r3, r0
 8005154:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8005156:	e7f1      	b.n	800513c <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8005158:	2501      	movs	r5, #1
 800515a:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800515c:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 800515e:	432a      	orrs	r2, r5
 8005160:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8005162:	f7ff ffc9 	bl	80050f8 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8005166:	f7ff ffa7 	bl	80050b8 <HAL_GetTick>
 800516a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	422b      	tst	r3, r5
 8005172:	d1e2      	bne.n	800513a <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005174:	f7ff ffa0 	bl	80050b8 <HAL_GetTick>
 8005178:	1b80      	subs	r0, r0, r6
 800517a:	280a      	cmp	r0, #10
 800517c:	d9f6      	bls.n	800516c <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800517e:	2310      	movs	r3, #16
 8005180:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8005182:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005184:	4313      	orrs	r3, r2
 8005186:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005188:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800518a:	431d      	orrs	r5, r3
 800518c:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 800518e:	e7d5      	b.n	800513c <ADC_Enable+0x18>
 8005190:	80000017 	.word	0x80000017

08005194 <HAL_ADC_Init>:
{
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005198:	2001      	movs	r0, #1
  if(hadc == NULL)
 800519a:	2c00      	cmp	r4, #0
 800519c:	d01b      	beq.n	80051d6 <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 800519e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 80051a4:	0022      	movs	r2, r4
 80051a6:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 80051a8:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 80051aa:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80051ac:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80051ae:	f7ff f9b1 	bl	8004514 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80051b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051b4:	06db      	lsls	r3, r3, #27
 80051b6:	d406      	bmi.n	80051c6 <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	2204      	movs	r2, #4
 80051bc:	6899      	ldr	r1, [r3, #8]
 80051be:	0008      	movs	r0, r1
 80051c0:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80051c2:	4211      	tst	r1, r2
 80051c4:	d008      	beq.n	80051d8 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051c6:	2310      	movs	r3, #16
 80051c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80051ca:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051cc:	4313      	orrs	r3, r2
 80051ce:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80051d0:	2300      	movs	r3, #0
 80051d2:	3450      	adds	r4, #80	; 0x50
 80051d4:	7023      	strb	r3, [r4, #0]
}
 80051d6:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 80051d8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80051da:	4955      	ldr	r1, [pc, #340]	; (8005330 <HAL_ADC_Init+0x19c>)
 80051dc:	4011      	ands	r1, r2
 80051de:	2202      	movs	r2, #2
 80051e0:	430a      	orrs	r2, r1
 80051e2:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80051e4:	2203      	movs	r2, #3
 80051e6:	6899      	ldr	r1, [r3, #8]
 80051e8:	4011      	ands	r1, r2
 80051ea:	4a52      	ldr	r2, [pc, #328]	; (8005334 <HAL_ADC_Init+0x1a0>)
 80051ec:	2901      	cmp	r1, #1
 80051ee:	d102      	bne.n	80051f6 <HAL_ADC_Init+0x62>
 80051f0:	681d      	ldr	r5, [r3, #0]
 80051f2:	420d      	tst	r5, r1
 80051f4:	d119      	bne.n	800522a <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80051f6:	2680      	movs	r6, #128	; 0x80
 80051f8:	6861      	ldr	r1, [r4, #4]
 80051fa:	05f6      	lsls	r6, r6, #23
 80051fc:	004d      	lsls	r5, r1, #1
 80051fe:	086d      	lsrs	r5, r5, #1
 8005200:	42b5      	cmp	r5, r6
 8005202:	d003      	beq.n	800520c <HAL_ADC_Init+0x78>
 8005204:	2580      	movs	r5, #128	; 0x80
 8005206:	062d      	lsls	r5, r5, #24
 8005208:	42a9      	cmp	r1, r5
 800520a:	d176      	bne.n	80052fa <HAL_ADC_Init+0x166>
 800520c:	691d      	ldr	r5, [r3, #16]
 800520e:	00ad      	lsls	r5, r5, #2
 8005210:	08ad      	lsrs	r5, r5, #2
 8005212:	611d      	str	r5, [r3, #16]
 8005214:	691d      	ldr	r5, [r3, #16]
 8005216:	4329      	orrs	r1, r5
 8005218:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800521a:	2518      	movs	r5, #24
 800521c:	68d9      	ldr	r1, [r3, #12]
 800521e:	43a9      	bics	r1, r5
 8005220:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8005222:	68d9      	ldr	r1, [r3, #12]
 8005224:	68a5      	ldr	r5, [r4, #8]
 8005226:	4329      	orrs	r1, r5
 8005228:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800522a:	6811      	ldr	r1, [r2, #0]
 800522c:	4d42      	ldr	r5, [pc, #264]	; (8005338 <HAL_ADC_Init+0x1a4>)
 800522e:	4029      	ands	r1, r5
 8005230:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8005232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005234:	6815      	ldr	r5, [r2, #0]
 8005236:	0649      	lsls	r1, r1, #25
 8005238:	4329      	orrs	r1, r5
 800523a:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800523c:	2280      	movs	r2, #128	; 0x80
 800523e:	6899      	ldr	r1, [r3, #8]
 8005240:	0552      	lsls	r2, r2, #21
 8005242:	4211      	tst	r1, r2
 8005244:	d102      	bne.n	800524c <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8005246:	6899      	ldr	r1, [r3, #8]
 8005248:	430a      	orrs	r2, r1
 800524a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	493b      	ldr	r1, [pc, #236]	; (800533c <HAL_ADC_Init+0x1a8>)
 8005250:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005252:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8005254:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005256:	68dd      	ldr	r5, [r3, #12]
 8005258:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800525a:	2902      	cmp	r1, #2
 800525c:	d100      	bne.n	8005260 <HAL_ADC_Init+0xcc>
 800525e:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005260:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005262:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005264:	4332      	orrs	r2, r6
 8005266:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005268:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800526a:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800526c:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800526e:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8005270:	69e5      	ldr	r5, [r4, #28]
 8005272:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005274:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005276:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005278:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800527a:	0025      	movs	r5, r4
 800527c:	352c      	adds	r5, #44	; 0x2c
 800527e:	782d      	ldrb	r5, [r5, #0]
 8005280:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005282:	432a      	orrs	r2, r5
 8005284:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005286:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005288:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800528a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800528c:	30ff      	adds	r0, #255	; 0xff
 800528e:	4282      	cmp	r2, r0
 8005290:	d004      	beq.n	800529c <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005292:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005294:	68d8      	ldr	r0, [r3, #12]
 8005296:	432a      	orrs	r2, r5
 8005298:	4302      	orrs	r2, r0
 800529a:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800529c:	1ca2      	adds	r2, r4, #2
 800529e:	7fd2      	ldrb	r2, [r2, #31]
 80052a0:	2a01      	cmp	r2, #1
 80052a2:	d106      	bne.n	80052b2 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80052a4:	2900      	cmp	r1, #0
 80052a6:	d134      	bne.n	8005312 <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80052a8:	2280      	movs	r2, #128	; 0x80
 80052aa:	68d9      	ldr	r1, [r3, #12]
 80052ac:	0252      	lsls	r2, r2, #9
 80052ae:	430a      	orrs	r2, r1
 80052b0:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 80052b2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80052b4:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 80052b6:	2901      	cmp	r1, #1
 80052b8:	d133      	bne.n	8005322 <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80052ba:	4821      	ldr	r0, [pc, #132]	; (8005340 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80052bc:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80052be:	4002      	ands	r2, r0
 80052c0:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80052c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80052c4:	6918      	ldr	r0, [r3, #16]
 80052c6:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 80052c8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80052ca:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80052cc:	4302      	orrs	r2, r0
 80052ce:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	4311      	orrs	r1, r2
 80052d4:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80052d6:	2107      	movs	r1, #7
 80052d8:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 80052da:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80052dc:	438a      	bics	r2, r1
 80052de:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80052e4:	430a      	orrs	r2, r1
 80052e6:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 80052e8:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80052ea:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80052ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052ee:	4393      	bics	r3, r2
 80052f0:	001a      	movs	r2, r3
 80052f2:	2301      	movs	r3, #1
 80052f4:	4313      	orrs	r3, r2
 80052f6:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 80052f8:	e76d      	b.n	80051d6 <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80052fa:	691d      	ldr	r5, [r3, #16]
 80052fc:	4e11      	ldr	r6, [pc, #68]	; (8005344 <HAL_ADC_Init+0x1b0>)
 80052fe:	00ad      	lsls	r5, r5, #2
 8005300:	08ad      	lsrs	r5, r5, #2
 8005302:	611d      	str	r5, [r3, #16]
 8005304:	6815      	ldr	r5, [r2, #0]
 8005306:	4035      	ands	r5, r6
 8005308:	6015      	str	r5, [r2, #0]
 800530a:	6815      	ldr	r5, [r2, #0]
 800530c:	4329      	orrs	r1, r5
 800530e:	6011      	str	r1, [r2, #0]
 8005310:	e783      	b.n	800521a <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005312:	2120      	movs	r1, #32
 8005314:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005316:	4301      	orrs	r1, r0
 8005318:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800531a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800531c:	430a      	orrs	r2, r1
 800531e:	65a2      	str	r2, [r4, #88]	; 0x58
 8005320:	e7c7      	b.n	80052b2 <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8005322:	2101      	movs	r1, #1
 8005324:	420a      	tst	r2, r1
 8005326:	d0d6      	beq.n	80052d6 <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	438a      	bics	r2, r1
 800532c:	611a      	str	r2, [r3, #16]
 800532e:	e7d2      	b.n	80052d6 <HAL_ADC_Init+0x142>
 8005330:	fffffefd 	.word	0xfffffefd
 8005334:	40012708 	.word	0x40012708
 8005338:	fdffffff 	.word	0xfdffffff
 800533c:	fffe0219 	.word	0xfffe0219
 8005340:	fffffc03 	.word	0xfffffc03
 8005344:	ffc3ffff 	.word	0xffc3ffff

08005348 <HAL_ADC_Start_DMA>:
{
 8005348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800534a:	9201      	str	r2, [sp, #4]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800534c:	6802      	ldr	r2, [r0, #0]
{
 800534e:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005350:	6893      	ldr	r3, [r2, #8]
{
 8005352:	000e      	movs	r6, r1
    tmp_hal_status = HAL_BUSY;
 8005354:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005356:	075b      	lsls	r3, r3, #29
 8005358:	d42f      	bmi.n	80053ba <HAL_ADC_Start_DMA+0x72>
    __HAL_LOCK(hadc);
 800535a:	0027      	movs	r7, r4
 800535c:	3750      	adds	r7, #80	; 0x50
 800535e:	783b      	ldrb	r3, [r7, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d02a      	beq.n	80053ba <HAL_ADC_Start_DMA+0x72>
 8005364:	2301      	movs	r3, #1
 8005366:	703b      	strb	r3, [r7, #0]
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005368:	68d1      	ldr	r1, [r2, #12]
 800536a:	430b      	orrs	r3, r1
 800536c:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800536e:	69e3      	ldr	r3, [r4, #28]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d123      	bne.n	80053bc <HAL_ADC_Start_DMA+0x74>
      ADC_STATE_CLR_SET(hadc->State,
 8005374:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005376:	4a14      	ldr	r2, [pc, #80]	; (80053c8 <HAL_ADC_Start_DMA+0x80>)
      ADC_CLEAR_ERRORCODE(hadc);
 8005378:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 800537a:	401a      	ands	r2, r3
 800537c:	2380      	movs	r3, #128	; 0x80
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	4313      	orrs	r3, r2
 8005382:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8005384:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8005386:	703d      	strb	r5, [r7, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005388:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800538a:	4b10      	ldr	r3, [pc, #64]	; (80053cc <HAL_ADC_Start_DMA+0x84>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800538c:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800538e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005390:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <HAL_ADC_Start_DMA+0x88>)
 8005392:	6303      	str	r3, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005394:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <HAL_ADC_Start_DMA+0x8c>)
 8005396:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005398:	231c      	movs	r3, #28
 800539a:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800539c:	684a      	ldr	r2, [r1, #4]
 800539e:	3b0c      	subs	r3, #12
 80053a0:	4313      	orrs	r3, r2
 80053a2:	604b      	str	r3, [r1, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80053a4:	0032      	movs	r2, r6
 80053a6:	9b01      	ldr	r3, [sp, #4]
 80053a8:	3140      	adds	r1, #64	; 0x40
 80053aa:	f000 f99b 	bl	80056e4 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80053ae:	2304      	movs	r3, #4
 80053b0:	0028      	movs	r0, r5
 80053b2:	6822      	ldr	r2, [r4, #0]
 80053b4:	6891      	ldr	r1, [r2, #8]
 80053b6:	430b      	orrs	r3, r1
 80053b8:	6093      	str	r3, [r2, #8]
}
 80053ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80053bc:	0020      	movs	r0, r4
 80053be:	f7ff feb1 	bl	8005124 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d0d6      	beq.n	8005374 <HAL_ADC_Start_DMA+0x2c>
 80053c6:	e7f8      	b.n	80053ba <HAL_ADC_Start_DMA+0x72>
 80053c8:	fffff0fe 	.word	0xfffff0fe
 80053cc:	080053dd 	.word	0x080053dd
 80053d0:	0800544f 	.word	0x0800544f
 80053d4:	0800545b 	.word	0x0800545b

080053d8 <HAL_ADC_ConvCpltCallback>:
 80053d8:	4770      	bx	lr
	...

080053dc <ADC_DMAConvCplt>:
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80053dc:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053de:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 80053e0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80053e2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053e4:	4211      	tst	r1, r2
 80053e6:	d12b      	bne.n	8005440 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053ea:	32b1      	adds	r2, #177	; 0xb1
 80053ec:	32ff      	adds	r2, #255	; 0xff
 80053ee:	430a      	orrs	r2, r1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80053f0:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053f2:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	0109      	lsls	r1, r1, #4
 80053f8:	68d0      	ldr	r0, [r2, #12]
 80053fa:	4208      	tst	r0, r1
 80053fc:	d113      	bne.n	8005426 <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80053fe:	1c59      	adds	r1, r3, #1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005400:	7fc9      	ldrb	r1, [r1, #31]
 8005402:	2900      	cmp	r1, #0
 8005404:	d10f      	bne.n	8005426 <ADC_DMAConvCplt+0x4a>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005406:	6811      	ldr	r1, [r2, #0]
 8005408:	0709      	lsls	r1, r1, #28
 800540a:	d50c      	bpl.n	8005426 <ADC_DMAConvCplt+0x4a>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800540c:	6891      	ldr	r1, [r2, #8]
 800540e:	0749      	lsls	r1, r1, #29
 8005410:	d40d      	bmi.n	800542e <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005412:	200c      	movs	r0, #12
 8005414:	6851      	ldr	r1, [r2, #4]
 8005416:	4381      	bics	r1, r0
 8005418:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800541a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800541c:	490a      	ldr	r1, [pc, #40]	; (8005448 <ADC_DMAConvCplt+0x6c>)
 800541e:	4011      	ands	r1, r2
 8005420:	2201      	movs	r2, #1
 8005422:	430a      	orrs	r2, r1
 8005424:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8005426:	0018      	movs	r0, r3
 8005428:	f7ff ffd6 	bl	80053d8 <HAL_ADC_ConvCpltCallback>
}
 800542c:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800542e:	2220      	movs	r2, #32
 8005430:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005432:	430a      	orrs	r2, r1
 8005434:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005436:	2201      	movs	r2, #1
 8005438:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800543a:	430a      	orrs	r2, r1
 800543c:	659a      	str	r2, [r3, #88]	; 0x58
 800543e:	e7f2      	b.n	8005426 <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005444:	4798      	blx	r3
}
 8005446:	e7f1      	b.n	800542c <ADC_DMAConvCplt+0x50>
 8005448:	fffffefe 	.word	0xfffffefe

0800544c <HAL_ADC_ConvHalfCpltCallback>:
 800544c:	4770      	bx	lr

0800544e <ADC_DMAHalfConvCplt>:
{
 800544e:	b510      	push	{r4, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8005450:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005452:	f7ff fffb 	bl	800544c <HAL_ADC_ConvHalfCpltCallback>
}
 8005456:	bd10      	pop	{r4, pc}

08005458 <HAL_ADC_ErrorCallback>:
 8005458:	4770      	bx	lr

0800545a <ADC_DMAError>:
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800545a:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800545c:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800545e:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005460:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005462:	4313      	orrs	r3, r2
 8005464:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005466:	2304      	movs	r3, #4
 8005468:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800546a:	4313      	orrs	r3, r2
 800546c:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 800546e:	f7ff fff3 	bl	8005458 <HAL_ADC_ErrorCallback>
}
 8005472:	bd10      	pop	{r4, pc}

08005474 <HAL_ADC_ConfigChannel>:
{
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8005476:	0004      	movs	r4, r0
 8005478:	3450      	adds	r4, #80	; 0x50
 800547a:	7822      	ldrb	r2, [r4, #0]
{
 800547c:	0003      	movs	r3, r0
 800547e:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8005480:	2002      	movs	r0, #2
 8005482:	2a01      	cmp	r2, #1
 8005484:	d00b      	beq.n	800549e <HAL_ADC_ConfigChannel+0x2a>
 8005486:	3801      	subs	r0, #1
 8005488:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	6891      	ldr	r1, [r2, #8]
 800548e:	0749      	lsls	r1, r1, #29
 8005490:	d506      	bpl.n	80054a0 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005492:	2220      	movs	r2, #32
 8005494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005496:	430a      	orrs	r2, r1
 8005498:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800549a:	2300      	movs	r3, #0
 800549c:	7023      	strb	r3, [r4, #0]
}
 800549e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sConfig->Rank != ADC_RANK_NONE)
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	6828      	ldr	r0, [r5, #0]
 80054a4:	4e19      	ldr	r6, [pc, #100]	; (800550c <HAL_ADC_ConfigChannel+0x98>)
 80054a6:	686f      	ldr	r7, [r5, #4]
 80054a8:	0341      	lsls	r1, r0, #13
 80054aa:	02db      	lsls	r3, r3, #11
 80054ac:	0b49      	lsrs	r1, r1, #13
 80054ae:	4003      	ands	r3, r0
 80054b0:	42b7      	cmp	r7, r6
 80054b2:	d019      	beq.n	80054e8 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80054b4:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80054b6:	4301      	orrs	r1, r0
 80054b8:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d008      	beq.n	80054d0 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 80054be:	2380      	movs	r3, #128	; 0x80
 80054c0:	4a13      	ldr	r2, [pc, #76]	; (8005510 <HAL_ADC_ConfigChannel+0x9c>)
 80054c2:	041b      	lsls	r3, r3, #16
 80054c4:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80054c6:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 80054c8:	430b      	orrs	r3, r1
 80054ca:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80054cc:	f7ff fe14 	bl	80050f8 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	039b      	lsls	r3, r3, #14
 80054d4:	d505      	bpl.n	80054e2 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80054d6:	2380      	movs	r3, #128	; 0x80
 80054d8:	4a0d      	ldr	r2, [pc, #52]	; (8005510 <HAL_ADC_ConfigChannel+0x9c>)
 80054da:	03db      	lsls	r3, r3, #15
 80054dc:	6811      	ldr	r1, [r2, #0]
 80054de:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80054e0:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80054e2:	2000      	movs	r0, #0
 80054e4:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80054e6:	e7da      	b.n	800549e <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80054e8:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80054ea:	438d      	bics	r5, r1
 80054ec:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d004      	beq.n	80054fc <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80054f2:	4a07      	ldr	r2, [pc, #28]	; (8005510 <HAL_ADC_ConfigChannel+0x9c>)
 80054f4:	4907      	ldr	r1, [pc, #28]	; (8005514 <HAL_ADC_ConfigChannel+0xa0>)
 80054f6:	6813      	ldr	r3, [r2, #0]
 80054f8:	400b      	ands	r3, r1
 80054fa:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80054fc:	0383      	lsls	r3, r0, #14
 80054fe:	d5f0      	bpl.n	80054e2 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8005500:	4a03      	ldr	r2, [pc, #12]	; (8005510 <HAL_ADC_ConfigChannel+0x9c>)
 8005502:	4905      	ldr	r1, [pc, #20]	; (8005518 <HAL_ADC_ConfigChannel+0xa4>)
 8005504:	6813      	ldr	r3, [r2, #0]
 8005506:	400b      	ands	r3, r1
 8005508:	e7ea      	b.n	80054e0 <HAL_ADC_ConfigChannel+0x6c>
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	00001001 	.word	0x00001001
 8005510:	40012708 	.word	0x40012708
 8005514:	ff7fffff 	.word	0xff7fffff
 8005518:	ffbfffff 	.word	0xffbfffff

0800551c <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800551e:	0005      	movs	r5, r0
 8005520:	3550      	adds	r5, #80	; 0x50
 8005522:	782b      	ldrb	r3, [r5, #0]
{
 8005524:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8005526:	2002      	movs	r0, #2
 8005528:	2b01      	cmp	r3, #1
 800552a:	d044      	beq.n	80055b6 <HAL_ADCEx_Calibration_Start+0x9a>
 800552c:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800552e:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 8005530:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	6898      	ldr	r0, [r3, #8]
 8005536:	4010      	ands	r0, r2
 8005538:	2801      	cmp	r0, #1
 800553a:	d109      	bne.n	8005550 <HAL_ADCEx_Calibration_Start+0x34>
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	4202      	tst	r2, r0
 8005540:	d006      	beq.n	8005550 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005542:	2320      	movs	r3, #32
 8005544:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005546:	4313      	orrs	r3, r2
 8005548:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800554a:	2300      	movs	r3, #0
 800554c:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 800554e:	e032      	b.n	80055b6 <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 8005550:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005552:	4919      	ldr	r1, [pc, #100]	; (80055b8 <HAL_ADCEx_Calibration_Start+0x9c>)
 8005554:	4011      	ands	r1, r2
 8005556:	2202      	movs	r2, #2
 8005558:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800555a:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 800555c:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800555e:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	438a      	bics	r2, r1
 8005564:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8005566:	2280      	movs	r2, #128	; 0x80
 8005568:	6899      	ldr	r1, [r3, #8]
 800556a:	0612      	lsls	r2, r2, #24
 800556c:	430a      	orrs	r2, r1
 800556e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8005570:	f7ff fda2 	bl	80050b8 <HAL_GetTick>
 8005574:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	2a00      	cmp	r2, #0
 800557c:	db0c      	blt.n	8005598 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800557e:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8005580:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005582:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8005584:	430e      	orrs	r6, r1
 8005586:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8005588:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800558a:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800558c:	4393      	bics	r3, r2
 800558e:	001a      	movs	r2, r3
 8005590:	2301      	movs	r3, #1
 8005592:	4313      	orrs	r3, r2
 8005594:	6563      	str	r3, [r4, #84]	; 0x54
 8005596:	e7d8      	b.n	800554a <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005598:	f7ff fd8e 	bl	80050b8 <HAL_GetTick>
 800559c:	1bc0      	subs	r0, r0, r7
 800559e:	280a      	cmp	r0, #10
 80055a0:	d9e9      	bls.n	8005576 <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 80055a2:	2212      	movs	r2, #18
 80055a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 80055a6:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80055a8:	4393      	bics	r3, r2
 80055aa:	001a      	movs	r2, r3
 80055ac:	2310      	movs	r3, #16
 80055ae:	4313      	orrs	r3, r2
 80055b0:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80055b2:	2300      	movs	r3, #0
 80055b4:	702b      	strb	r3, [r5, #0]
}
 80055b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b8:	fffffefd 	.word	0xfffffefd

080055bc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055bc:	b530      	push	{r4, r5, lr}
 80055be:	25ff      	movs	r5, #255	; 0xff
 80055c0:	2403      	movs	r4, #3
 80055c2:	002a      	movs	r2, r5
 80055c4:	4004      	ands	r4, r0
 80055c6:	00e4      	lsls	r4, r4, #3
 80055c8:	40a2      	lsls	r2, r4
 80055ca:	0189      	lsls	r1, r1, #6
 80055cc:	4029      	ands	r1, r5
 80055ce:	43d2      	mvns	r2, r2
 80055d0:	40a1      	lsls	r1, r4
 80055d2:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80055d4:	2800      	cmp	r0, #0
 80055d6:	db0a      	blt.n	80055ee <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055d8:	24c0      	movs	r4, #192	; 0xc0
 80055da:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <HAL_NVIC_SetPriority+0x4c>)
 80055dc:	0880      	lsrs	r0, r0, #2
 80055de:	0080      	lsls	r0, r0, #2
 80055e0:	18c0      	adds	r0, r0, r3
 80055e2:	00a4      	lsls	r4, r4, #2
 80055e4:	5903      	ldr	r3, [r0, r4]
 80055e6:	401a      	ands	r2, r3
 80055e8:	4311      	orrs	r1, r2
 80055ea:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80055ec:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055ee:	200f      	movs	r0, #15
 80055f0:	4003      	ands	r3, r0
 80055f2:	3b08      	subs	r3, #8
 80055f4:	4805      	ldr	r0, [pc, #20]	; (800560c <HAL_NVIC_SetPriority+0x50>)
 80055f6:	089b      	lsrs	r3, r3, #2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	181b      	adds	r3, r3, r0
 80055fc:	69d8      	ldr	r0, [r3, #28]
 80055fe:	4002      	ands	r2, r0
 8005600:	4311      	orrs	r1, r2
 8005602:	61d9      	str	r1, [r3, #28]
 8005604:	e7f2      	b.n	80055ec <HAL_NVIC_SetPriority+0x30>
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	e000e100 	.word	0xe000e100
 800560c:	e000ed00 	.word	0xe000ed00

08005610 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005610:	2800      	cmp	r0, #0
 8005612:	db05      	blt.n	8005620 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005614:	231f      	movs	r3, #31
 8005616:	4018      	ands	r0, r3
 8005618:	3b1e      	subs	r3, #30
 800561a:	4083      	lsls	r3, r0
 800561c:	4a01      	ldr	r2, [pc, #4]	; (8005624 <HAL_NVIC_EnableIRQ+0x14>)
 800561e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005620:	4770      	bx	lr
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	e000e100 	.word	0xe000e100

08005628 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005628:	2280      	movs	r2, #128	; 0x80
 800562a:	1e43      	subs	r3, r0, #1
 800562c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800562e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005630:	4293      	cmp	r3, r2
 8005632:	d20d      	bcs.n	8005650 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005634:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005636:	4a07      	ldr	r2, [pc, #28]	; (8005654 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005638:	4807      	ldr	r0, [pc, #28]	; (8005658 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800563a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800563c:	6a03      	ldr	r3, [r0, #32]
 800563e:	0609      	lsls	r1, r1, #24
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	430b      	orrs	r3, r1
 8005646:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005648:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800564a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800564c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800564e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005650:	4770      	bx	lr
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	e000e010 	.word	0xe000e010
 8005658:	e000ed00 	.word	0xe000ed00

0800565c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8005660:	2001      	movs	r0, #1
  if(hdma == NULL)
 8005662:	2c00      	cmp	r4, #0
 8005664:	d035      	beq.n	80056d2 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005666:	6825      	ldr	r5, [r4, #0]
 8005668:	4b1a      	ldr	r3, [pc, #104]	; (80056d4 <HAL_DMA_Init+0x78>)
 800566a:	2114      	movs	r1, #20
 800566c:	18e8      	adds	r0, r5, r3
 800566e:	f7fa fd67 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8005672:	4b19      	ldr	r3, [pc, #100]	; (80056d8 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005674:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8005676:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005678:	2302      	movs	r3, #2
 800567a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800567c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800567e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005680:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005682:	4b16      	ldr	r3, [pc, #88]	; (80056dc <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005684:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005686:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8005688:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800568a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 800568c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800568e:	433b      	orrs	r3, r7
 8005690:	6967      	ldr	r7, [r4, #20]
 8005692:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005694:	69a7      	ldr	r7, [r4, #24]
 8005696:	433b      	orrs	r3, r7
 8005698:	69e7      	ldr	r7, [r4, #28]
 800569a:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800569c:	6a27      	ldr	r7, [r4, #32]
 800569e:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80056a0:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80056a2:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	01db      	lsls	r3, r3, #7
 80056a8:	4299      	cmp	r1, r3
 80056aa:	d00c      	beq.n	80056c6 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80056ac:	251c      	movs	r5, #28
 80056ae:	4028      	ands	r0, r5
 80056b0:	3d0d      	subs	r5, #13
 80056b2:	4085      	lsls	r5, r0
 80056b4:	490a      	ldr	r1, [pc, #40]	; (80056e0 <HAL_DMA_Init+0x84>)
 80056b6:	680b      	ldr	r3, [r1, #0]
 80056b8:	43ab      	bics	r3, r5
 80056ba:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80056bc:	6863      	ldr	r3, [r4, #4]
 80056be:	680d      	ldr	r5, [r1, #0]
 80056c0:	4083      	lsls	r3, r0
 80056c2:	432b      	orrs	r3, r5
 80056c4:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c6:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80056c8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056ca:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056cc:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 80056ce:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 80056d0:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80056d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d4:	bffdfff8 	.word	0xbffdfff8
 80056d8:	40020000 	.word	0x40020000
 80056dc:	ffff800f 	.word	0xffff800f
 80056e0:	400200a8 	.word	0x400200a8

080056e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80056e6:	1d45      	adds	r5, r0, #5
{
 80056e8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80056ea:	7feb      	ldrb	r3, [r5, #31]
{
 80056ec:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80056ee:	2002      	movs	r0, #2
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d029      	beq.n	8005748 <HAL_DMA_Start_IT+0x64>
 80056f4:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 80056f6:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 80056f8:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 80056fa:	7ffb      	ldrb	r3, [r7, #31]
 80056fc:	2600      	movs	r6, #0
 80056fe:	469c      	mov	ip, r3
 8005700:	4660      	mov	r0, ip
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2801      	cmp	r0, #1
 8005706:	d12a      	bne.n	800575e <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005708:	3001      	adds	r0, #1
 800570a:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800570c:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800570e:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005710:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8005712:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005714:	361c      	adds	r6, #28
 8005716:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8005718:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800571a:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 800571c:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800571e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8005720:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005722:	9b01      	ldr	r3, [sp, #4]
 8005724:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	2b10      	cmp	r3, #16
 800572a:	d10e      	bne.n	800574a <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800572c:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800572e:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8005730:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00c      	beq.n	8005750 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005736:	230e      	movs	r3, #14
 8005738:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800573a:	4313      	orrs	r3, r2
 800573c:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 800573e:	2301      	movs	r3, #1
 8005740:	6802      	ldr	r2, [r0, #0]
 8005742:	4313      	orrs	r3, r2
 8005744:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005746:	2000      	movs	r0, #0
}
 8005748:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800574a:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800574c:	60c2      	str	r2, [r0, #12]
 800574e:	e7ef      	b.n	8005730 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005750:	2204      	movs	r2, #4
 8005752:	6803      	ldr	r3, [r0, #0]
 8005754:	4393      	bics	r3, r2
 8005756:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005758:	6802      	ldr	r2, [r0, #0]
 800575a:	230a      	movs	r3, #10
 800575c:	e7ed      	b.n	800573a <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 800575e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8005760:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8005762:	e7f1      	b.n	8005748 <HAL_DMA_Start_IT+0x64>

08005764 <HAL_DMA_Abort>:
{
 8005764:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005766:	1d85      	adds	r5, r0, #6
 8005768:	7feb      	ldrb	r3, [r5, #31]
 800576a:	1d44      	adds	r4, r0, #5
 800576c:	2b02      	cmp	r3, #2
 800576e:	d005      	beq.n	800577c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005770:	2304      	movs	r3, #4
 8005772:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8005774:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005776:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8005778:	77e3      	strb	r3, [r4, #31]
}
 800577a:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800577c:	210e      	movs	r1, #14
 800577e:	6803      	ldr	r3, [r0, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	438a      	bics	r2, r1
 8005784:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005786:	2201      	movs	r2, #1
 8005788:	6819      	ldr	r1, [r3, #0]
 800578a:	4391      	bics	r1, r2
 800578c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800578e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005790:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005792:	201c      	movs	r0, #28
 8005794:	4003      	ands	r3, r0
 8005796:	0010      	movs	r0, r2
 8005798:	4098      	lsls	r0, r3
 800579a:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800579c:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800579e:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 80057a0:	77e0      	strb	r0, [r4, #31]
    return status;
 80057a2:	e7ea      	b.n	800577a <HAL_DMA_Abort+0x16>

080057a4 <HAL_DMA_Abort_IT>:
{
 80057a4:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80057a6:	1d84      	adds	r4, r0, #6
 80057a8:	7fe3      	ldrb	r3, [r4, #31]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d004      	beq.n	80057b8 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057ae:	2304      	movs	r3, #4
 80057b0:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80057b2:	3b03      	subs	r3, #3
}
 80057b4:	0018      	movs	r0, r3
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057b8:	210e      	movs	r1, #14
 80057ba:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80057bc:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	438a      	bics	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80057c4:	2201      	movs	r2, #1
 80057c6:	6819      	ldr	r1, [r3, #0]
 80057c8:	4391      	bics	r1, r2
 80057ca:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80057cc:	231c      	movs	r3, #28
 80057ce:	402b      	ands	r3, r5
 80057d0:	0015      	movs	r5, r2
 80057d2:	409d      	lsls	r5, r3
 80057d4:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 80057d6:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80057d8:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80057da:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80057dc:	2400      	movs	r4, #0
 80057de:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 80057e0:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 80057e2:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80057e4:	42a2      	cmp	r2, r4
 80057e6:	d0e5      	beq.n	80057b4 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80057e8:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80057ea:	0023      	movs	r3, r4
 80057ec:	e7e2      	b.n	80057b4 <HAL_DMA_Abort_IT+0x10>

080057ee <HAL_DMA_IRQHandler>:
{
 80057ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80057f0:	221c      	movs	r2, #28
 80057f2:	2704      	movs	r7, #4
 80057f4:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057f6:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80057f8:	4032      	ands	r2, r6
 80057fa:	003e      	movs	r6, r7
 80057fc:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057fe:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005800:	6803      	ldr	r3, [r0, #0]
 8005802:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005804:	4235      	tst	r5, r6
 8005806:	d00d      	beq.n	8005824 <HAL_DMA_IRQHandler+0x36>
 8005808:	423c      	tst	r4, r7
 800580a:	d00b      	beq.n	8005824 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	0692      	lsls	r2, r2, #26
 8005810:	d402      	bmi.n	8005818 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	43ba      	bics	r2, r7
 8005816:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8005818:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800581a:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 800581c:	2b00      	cmp	r3, #0
 800581e:	d019      	beq.n	8005854 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8005820:	4798      	blx	r3
  return;
 8005822:	e017      	b.n	8005854 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8005824:	2702      	movs	r7, #2
 8005826:	003e      	movs	r6, r7
 8005828:	4096      	lsls	r6, r2
 800582a:	4235      	tst	r5, r6
 800582c:	d013      	beq.n	8005856 <HAL_DMA_IRQHandler+0x68>
 800582e:	423c      	tst	r4, r7
 8005830:	d011      	beq.n	8005856 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	0692      	lsls	r2, r2, #26
 8005836:	d406      	bmi.n	8005846 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005838:	240a      	movs	r4, #10
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	43a2      	bics	r2, r4
 800583e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005840:	2201      	movs	r2, #1
 8005842:	1d83      	adds	r3, r0, #6
 8005844:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8005846:	2200      	movs	r2, #0
 8005848:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800584a:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 800584c:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 800584e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8005850:	4293      	cmp	r3, r2
 8005852:	d1e5      	bne.n	8005820 <HAL_DMA_IRQHandler+0x32>
}
 8005854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8005856:	2608      	movs	r6, #8
 8005858:	0037      	movs	r7, r6
 800585a:	4097      	lsls	r7, r2
 800585c:	423d      	tst	r5, r7
 800585e:	d0f9      	beq.n	8005854 <HAL_DMA_IRQHandler+0x66>
 8005860:	4234      	tst	r4, r6
 8005862:	d0f7      	beq.n	8005854 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005864:	250e      	movs	r5, #14
 8005866:	681c      	ldr	r4, [r3, #0]
 8005868:	43ac      	bics	r4, r5
 800586a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800586c:	2301      	movs	r3, #1
 800586e:	001c      	movs	r4, r3
 8005870:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8005872:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005874:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005876:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8005878:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800587a:	2200      	movs	r2, #0
 800587c:	1d43      	adds	r3, r0, #5
 800587e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8005880:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005882:	e7e5      	b.n	8005850 <HAL_DMA_IRQHandler+0x62>

08005884 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005884:	4a28      	ldr	r2, [pc, #160]	; (8005928 <FLASH_SetErrorCode+0xa4>)
 8005886:	2180      	movs	r1, #128	; 0x80
 8005888:	6990      	ldr	r0, [r2, #24]
 800588a:	0049      	lsls	r1, r1, #1
 800588c:	0003      	movs	r3, r0
{
 800588e:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005890:	400b      	ands	r3, r1
 8005892:	4208      	tst	r0, r1
 8005894:	d005      	beq.n	80058a2 <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005896:	2302      	movs	r3, #2
 8005898:	4824      	ldr	r0, [pc, #144]	; (800592c <FLASH_SetErrorCode+0xa8>)
 800589a:	6944      	ldr	r4, [r0, #20]
 800589c:	4323      	orrs	r3, r4
 800589e:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 80058a0:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80058a2:	2080      	movs	r0, #128	; 0x80
 80058a4:	6991      	ldr	r1, [r2, #24]
 80058a6:	0080      	lsls	r0, r0, #2
 80058a8:	4201      	tst	r1, r0
 80058aa:	d005      	beq.n	80058b8 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80058ac:	2101      	movs	r1, #1
 80058ae:	4c1f      	ldr	r4, [pc, #124]	; (800592c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 80058b0:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80058b2:	6965      	ldr	r5, [r4, #20]
 80058b4:	4329      	orrs	r1, r5
 80058b6:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80058b8:	2080      	movs	r0, #128	; 0x80
 80058ba:	6991      	ldr	r1, [r2, #24]
 80058bc:	00c0      	lsls	r0, r0, #3
 80058be:	4201      	tst	r1, r0
 80058c0:	d005      	beq.n	80058ce <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80058c2:	2108      	movs	r1, #8
 80058c4:	4c19      	ldr	r4, [pc, #100]	; (800592c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 80058c6:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80058c8:	6965      	ldr	r5, [r4, #20]
 80058ca:	4329      	orrs	r1, r5
 80058cc:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80058ce:	2080      	movs	r0, #128	; 0x80
 80058d0:	6991      	ldr	r1, [r2, #24]
 80058d2:	0100      	lsls	r0, r0, #4
 80058d4:	4201      	tst	r1, r0
 80058d6:	d005      	beq.n	80058e4 <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80058d8:	2104      	movs	r1, #4
 80058da:	4c14      	ldr	r4, [pc, #80]	; (800592c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 80058dc:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80058de:	6965      	ldr	r5, [r4, #20]
 80058e0:	4329      	orrs	r1, r5
 80058e2:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80058e4:	2080      	movs	r0, #128	; 0x80
 80058e6:	6991      	ldr	r1, [r2, #24]
 80058e8:	0180      	lsls	r0, r0, #6
 80058ea:	4201      	tst	r1, r0
 80058ec:	d005      	beq.n	80058fa <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80058ee:	2110      	movs	r1, #16
 80058f0:	4c0e      	ldr	r4, [pc, #56]	; (800592c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 80058f2:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80058f4:	6965      	ldr	r5, [r4, #20]
 80058f6:	4329      	orrs	r1, r5
 80058f8:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80058fa:	6991      	ldr	r1, [r2, #24]
 80058fc:	0389      	lsls	r1, r1, #14
 80058fe:	d505      	bpl.n	800590c <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8005900:	2020      	movs	r0, #32
 8005902:	4c0a      	ldr	r4, [pc, #40]	; (800592c <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 8005904:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8005906:	6961      	ldr	r1, [r4, #20]
 8005908:	4301      	orrs	r1, r0
 800590a:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800590c:	2080      	movs	r0, #128	; 0x80
 800590e:	6991      	ldr	r1, [r2, #24]
 8005910:	0240      	lsls	r0, r0, #9
 8005912:	4201      	tst	r1, r0
 8005914:	d005      	beq.n	8005922 <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8005916:	2140      	movs	r1, #64	; 0x40
 8005918:	4c04      	ldr	r4, [pc, #16]	; (800592c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 800591a:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800591c:	6965      	ldr	r5, [r4, #20]
 800591e:	4329      	orrs	r1, r5
 8005920:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005922:	6193      	str	r3, [r2, #24]
}  
 8005924:	bd30      	pop	{r4, r5, pc}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	40022000 	.word	0x40022000
 800592c:	20000514 	.word	0x20000514

08005930 <FLASH_WaitForLastOperation>:
{
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005934:	f7ff fbc0 	bl	80050b8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005938:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 800593a:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800593c:	4a19      	ldr	r2, [pc, #100]	; (80059a4 <FLASH_WaitForLastOperation+0x74>)
 800593e:	0013      	movs	r3, r2
 8005940:	6991      	ldr	r1, [r2, #24]
 8005942:	4231      	tst	r1, r6
 8005944:	d121      	bne.n	800598a <FLASH_WaitForLastOperation+0x5a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005946:	2102      	movs	r1, #2
 8005948:	6990      	ldr	r0, [r2, #24]
 800594a:	4208      	tst	r0, r1
 800594c:	d000      	beq.n	8005950 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800594e:	6191      	str	r1, [r2, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	05d2      	lsls	r2, r2, #23
 8005954:	d415      	bmi.n	8005982 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8005956:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8005958:	0592      	lsls	r2, r2, #22
 800595a:	d412      	bmi.n	8005982 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800595c:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800595e:	0552      	lsls	r2, r2, #21
 8005960:	d40f      	bmi.n	8005982 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8005962:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8005964:	0512      	lsls	r2, r2, #20
 8005966:	d40c      	bmi.n	8005982 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8005968:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800596a:	0492      	lsls	r2, r2, #18
 800596c:	d409      	bmi.n	8005982 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800596e:	6999      	ldr	r1, [r3, #24]
 8005970:	2280      	movs	r2, #128	; 0x80
 8005972:	0008      	movs	r0, r1
 8005974:	0292      	lsls	r2, r2, #10
 8005976:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8005978:	4211      	tst	r1, r2
 800597a:	d102      	bne.n	8005982 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800597c:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800597e:	03db      	lsls	r3, r3, #15
 8005980:	d508      	bpl.n	8005994 <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 8005982:	f7ff ff7f 	bl	8005884 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005986:	2001      	movs	r0, #1
 8005988:	e004      	b.n	8005994 <FLASH_WaitForLastOperation+0x64>
    if (Timeout != HAL_MAX_DELAY)
 800598a:	1c61      	adds	r1, r4, #1
 800598c:	d0d8      	beq.n	8005940 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800598e:	2c00      	cmp	r4, #0
 8005990:	d101      	bne.n	8005996 <FLASH_WaitForLastOperation+0x66>
        return HAL_TIMEOUT;
 8005992:	2003      	movs	r0, #3
}
 8005994:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005996:	f7ff fb8f 	bl	80050b8 <HAL_GetTick>
 800599a:	1b40      	subs	r0, r0, r5
 800599c:	42a0      	cmp	r0, r4
 800599e:	d9cd      	bls.n	800593c <FLASH_WaitForLastOperation+0xc>
 80059a0:	e7f7      	b.n	8005992 <FLASH_WaitForLastOperation+0x62>
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	40022000 	.word	0x40022000

080059a8 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80059a8:	2201      	movs	r2, #1
 80059aa:	4b08      	ldr	r3, [pc, #32]	; (80059cc <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 80059ac:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80059ae:	6859      	ldr	r1, [r3, #4]
 80059b0:	4211      	tst	r1, r2
 80059b2:	d00a      	beq.n	80059ca <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80059b8:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 80059ba:	4805      	ldr	r0, [pc, #20]	; (80059d0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 80059bc:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80059be:	4805      	ldr	r0, [pc, #20]	; (80059d4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80059c0:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c2:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80059c6:	6858      	ldr	r0, [r3, #4]
 80059c8:	4010      	ands	r0, r2
}
 80059ca:	4770      	bx	lr
 80059cc:	40022000 	.word	0x40022000
 80059d0:	89abcdef 	.word	0x89abcdef
 80059d4:	02030405 	.word	0x02030405

080059d8 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80059d8:	2301      	movs	r3, #1
 80059da:	4a03      	ldr	r2, [pc, #12]	; (80059e8 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 80059dc:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80059de:	6851      	ldr	r1, [r2, #4]
 80059e0:	430b      	orrs	r3, r1
 80059e2:	6053      	str	r3, [r2, #4]
}
 80059e4:	4770      	bx	lr
 80059e6:	46c0      	nop			; (mov r8, r8)
 80059e8:	40022000 	.word	0x40022000

080059ec <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80059ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80059ee:	4f12      	ldr	r7, [pc, #72]	; (8005a38 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 80059f0:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 80059f2:	7c3b      	ldrb	r3, [r7, #16]
{
 80059f4:	000d      	movs	r5, r1
 80059f6:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 80059f8:	2002      	movs	r0, #2
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d00c      	beq.n	8005a18 <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 80059fe:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a00:	480e      	ldr	r0, [pc, #56]	; (8005a3c <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 8005a02:	743b      	strb	r3, [r7, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a04:	f7ff ff94 	bl	8005930 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d103      	bne.n	8005a14 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a0c:	6178      	str	r0, [r7, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8005a0e:	2e02      	cmp	r6, #2
 8005a10:	d103      	bne.n	8005a1a <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8005a12:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a14:	2300      	movs	r3, #0
 8005a16:	743b      	strb	r3, [r7, #16]

  return status;
}
 8005a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8005a1a:	2e01      	cmp	r6, #1
 8005a1c:	d102      	bne.n	8005a24 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8005a1e:	b2a4      	uxth	r4, r4
 8005a20:	802c      	strh	r4, [r5, #0]
 8005a22:	e7f7      	b.n	8005a14 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8005a24:	2e00      	cmp	r6, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a28:	4804      	ldr	r0, [pc, #16]	; (8005a3c <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 8005a2a:	f7ff ff81 	bl	8005930 <FLASH_WaitForLastOperation>
 8005a2e:	e7f1      	b.n	8005a14 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8005a30:	b2e4      	uxtb	r4, r4
 8005a32:	702c      	strb	r4, [r5, #0]
 8005a34:	e7ee      	b.n	8005a14 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	20000514 	.word	0x20000514
 8005a3c:	0000c350 	.word	0x0000c350

08005a40 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005a40:	4a55      	ldr	r2, [pc, #340]	; (8005b98 <HAL_GPIO_Init+0x158>)
{
 8005a42:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005a44:	1882      	adds	r2, r0, r2
 8005a46:	1e54      	subs	r4, r2, #1
 8005a48:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8005a4a:	2300      	movs	r3, #0
{
 8005a4c:	b085      	sub	sp, #20
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005a4e:	3205      	adds	r2, #5
 8005a50:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005a52:	680a      	ldr	r2, [r1, #0]
 8005a54:	0014      	movs	r4, r2
 8005a56:	40dc      	lsrs	r4, r3
 8005a58:	d101      	bne.n	8005a5e <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8005a5a:	b005      	add	sp, #20
 8005a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005a5e:	2701      	movs	r7, #1
 8005a60:	003c      	movs	r4, r7
 8005a62:	0015      	movs	r5, r2
 8005a64:	409c      	lsls	r4, r3
 8005a66:	4025      	ands	r5, r4
 8005a68:	9500      	str	r5, [sp, #0]
    if (iocurrent)
 8005a6a:	4222      	tst	r2, r4
 8005a6c:	d100      	bne.n	8005a70 <HAL_GPIO_Init+0x30>
 8005a6e:	e091      	b.n	8005b94 <HAL_GPIO_Init+0x154>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a70:	684a      	ldr	r2, [r1, #4]
 8005a72:	4694      	mov	ip, r2
 8005a74:	2210      	movs	r2, #16
 8005a76:	4665      	mov	r5, ip
 8005a78:	4395      	bics	r5, r2
 8005a7a:	9502      	str	r5, [sp, #8]
 8005a7c:	3a0d      	subs	r2, #13
 8005a7e:	005d      	lsls	r5, r3, #1
 8005a80:	40aa      	lsls	r2, r5
 8005a82:	43d2      	mvns	r2, r2
 8005a84:	9201      	str	r2, [sp, #4]
 8005a86:	9a02      	ldr	r2, [sp, #8]
 8005a88:	3a01      	subs	r2, #1
 8005a8a:	42ba      	cmp	r2, r7
 8005a8c:	d80f      	bhi.n	8005aae <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8005a8e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005a90:	9a01      	ldr	r2, [sp, #4]
 8005a92:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a94:	68ca      	ldr	r2, [r1, #12]
 8005a96:	40aa      	lsls	r2, r5
 8005a98:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8005a9a:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8005a9c:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a9e:	43a2      	bics	r2, r4
 8005aa0:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005aa2:	4662      	mov	r2, ip
 8005aa4:	0912      	lsrs	r2, r2, #4
 8005aa6:	403a      	ands	r2, r7
 8005aa8:	409a      	lsls	r2, r3
 8005aaa:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8005aac:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8005aae:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ab0:	9a01      	ldr	r2, [sp, #4]
 8005ab2:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ab4:	688a      	ldr	r2, [r1, #8]
 8005ab6:	40aa      	lsls	r2, r5
 8005ab8:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 8005aba:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005abc:	9a02      	ldr	r2, [sp, #8]
 8005abe:	2a02      	cmp	r2, #2
 8005ac0:	d10d      	bne.n	8005ade <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005ac2:	2407      	movs	r4, #7
 8005ac4:	270f      	movs	r7, #15
 8005ac6:	401c      	ands	r4, r3
 8005ac8:	00a4      	lsls	r4, r4, #2
 8005aca:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8005acc:	08da      	lsrs	r2, r3, #3
 8005ace:	0092      	lsls	r2, r2, #2
 8005ad0:	1882      	adds	r2, r0, r2
 8005ad2:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005ad4:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005ad6:	690f      	ldr	r7, [r1, #16]
 8005ad8:	40a7      	lsls	r7, r4
 8005ada:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8005adc:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8005ade:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ae0:	9a01      	ldr	r2, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ae2:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ae4:	4022      	ands	r2, r4
 8005ae6:	0014      	movs	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ae8:	4662      	mov	r2, ip
 8005aea:	4032      	ands	r2, r6
 8005aec:	40aa      	lsls	r2, r5
 8005aee:	4314      	orrs	r4, r2
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005af0:	4662      	mov	r2, ip
      GPIOx->MODER = temp;
 8005af2:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005af4:	00d2      	lsls	r2, r2, #3
 8005af6:	d54d      	bpl.n	8005b94 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005af8:	2501      	movs	r5, #1
 8005afa:	4c28      	ldr	r4, [pc, #160]	; (8005b9c <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005afc:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005afe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005b00:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005b02:	001d      	movs	r5, r3
 8005b04:	4035      	ands	r5, r6
 8005b06:	00ad      	lsls	r5, r5, #2
 8005b08:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b0a:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8005b0c:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <HAL_GPIO_Init+0x160>)
 8005b0e:	089c      	lsrs	r4, r3, #2
 8005b10:	00a4      	lsls	r4, r4, #2
 8005b12:	18a4      	adds	r4, r4, r2
 8005b14:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005b16:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005b18:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005b1a:	9201      	str	r2, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005b1c:	05ff      	lsls	r7, r7, #23
 8005b1e:	2200      	movs	r2, #0
 8005b20:	42b8      	cmp	r0, r7
 8005b22:	d00c      	beq.n	8005b3e <HAL_GPIO_Init+0xfe>
 8005b24:	4f1f      	ldr	r7, [pc, #124]	; (8005ba4 <HAL_GPIO_Init+0x164>)
 8005b26:	3201      	adds	r2, #1
 8005b28:	42b8      	cmp	r0, r7
 8005b2a:	d008      	beq.n	8005b3e <HAL_GPIO_Init+0xfe>
 8005b2c:	4f1e      	ldr	r7, [pc, #120]	; (8005ba8 <HAL_GPIO_Init+0x168>)
 8005b2e:	3201      	adds	r2, #1
 8005b30:	42b8      	cmp	r0, r7
 8005b32:	d004      	beq.n	8005b3e <HAL_GPIO_Init+0xfe>
 8005b34:	4f1d      	ldr	r7, [pc, #116]	; (8005bac <HAL_GPIO_Init+0x16c>)
 8005b36:	0032      	movs	r2, r6
 8005b38:	42b8      	cmp	r0, r7
 8005b3a:	d000      	beq.n	8005b3e <HAL_GPIO_Init+0xfe>
 8005b3c:	9a03      	ldr	r2, [sp, #12]
 8005b3e:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b40:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005b42:	9d01      	ldr	r5, [sp, #4]
 8005b44:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b46:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8005b48:	4a19      	ldr	r2, [pc, #100]	; (8005bb0 <HAL_GPIO_Init+0x170>)
        temp &= ~((uint32_t)iocurrent);
 8005b4a:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8005b4c:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8005b4e:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8005b50:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8005b52:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b54:	03ff      	lsls	r7, r7, #15
 8005b56:	d401      	bmi.n	8005b5c <HAL_GPIO_Init+0x11c>
        temp &= ~((uint32_t)iocurrent);
 8005b58:	0035      	movs	r5, r6
 8005b5a:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b5c:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8005b5e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8005b60:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8005b62:	9d00      	ldr	r5, [sp, #0]
 8005b64:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b66:	03bf      	lsls	r7, r7, #14
 8005b68:	d401      	bmi.n	8005b6e <HAL_GPIO_Init+0x12e>
        temp &= ~((uint32_t)iocurrent);
 8005b6a:	0035      	movs	r5, r6
 8005b6c:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b6e:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8005b70:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8005b72:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8005b74:	9d00      	ldr	r5, [sp, #0]
 8005b76:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b78:	02ff      	lsls	r7, r7, #11
 8005b7a:	d401      	bmi.n	8005b80 <HAL_GPIO_Init+0x140>
        temp &= ~((uint32_t)iocurrent);
 8005b7c:	0035      	movs	r5, r6
 8005b7e:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b80:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8005b82:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8005b84:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8005b86:	9e00      	ldr	r6, [sp, #0]
 8005b88:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b8a:	02bf      	lsls	r7, r7, #10
 8005b8c:	d401      	bmi.n	8005b92 <HAL_GPIO_Init+0x152>
        temp &= ~((uint32_t)iocurrent);
 8005b8e:	4025      	ands	r5, r4
 8005b90:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8005b92:	60d6      	str	r6, [r2, #12]
    position++;
 8005b94:	3301      	adds	r3, #1
 8005b96:	e75c      	b.n	8005a52 <HAL_GPIO_Init+0x12>
 8005b98:	afffe400 	.word	0xafffe400
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	40010000 	.word	0x40010000
 8005ba4:	50000400 	.word	0x50000400
 8005ba8:	50000800 	.word	0x50000800
 8005bac:	50000c00 	.word	0x50000c00
 8005bb0:	40010400 	.word	0x40010400

08005bb4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005bb4:	6900      	ldr	r0, [r0, #16]
 8005bb6:	4008      	ands	r0, r1
 8005bb8:	1e41      	subs	r1, r0, #1
 8005bba:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8005bbc:	b2c0      	uxtb	r0, r0
}
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bc0:	2a00      	cmp	r2, #0
 8005bc2:	d001      	beq.n	8005bc8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bc4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005bc6:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8005bc8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8005bca:	e7fc      	b.n	8005bc6 <HAL_GPIO_WritePin+0x6>

08005bcc <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005bcc:	4770      	bx	lr
	...

08005bd0 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005bd0:	4b04      	ldr	r3, [pc, #16]	; (8005be4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8005bd2:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005bd4:	695a      	ldr	r2, [r3, #20]
 8005bd6:	4210      	tst	r0, r2
 8005bd8:	d002      	beq.n	8005be0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bda:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bdc:	f7ff fff6 	bl	8005bcc <HAL_GPIO_EXTI_Callback>
}
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	40010400 	.word	0x40010400

08005be8 <LPTIM_WaitForFlag>:
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005be8:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <LPTIM_WaitForFlag+0x34>)
{
 8005bea:	b570      	push	{r4, r5, r6, lr}
 8005bec:	0005      	movs	r5, r0
 8005bee:	000c      	movs	r4, r1
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	490b      	ldr	r1, [pc, #44]	; (8005c20 <LPTIM_WaitForFlag+0x38>)
 8005bf4:	f7fa faa4 	bl	8000140 <__udivsi3>
 8005bf8:	23fa      	movs	r3, #250	; 0xfa
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4343      	muls	r3, r0
    count--;
    if (count == 0UL)
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005bfe:	6829      	ldr	r1, [r5, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005c00:	2000      	movs	r0, #0
      result = HAL_TIMEOUT;
 8005c02:	2503      	movs	r5, #3
    count--;
 8005c04:	3b01      	subs	r3, #1
    if (count == 0UL)
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d100      	bne.n	8005c0c <LPTIM_WaitForFlag+0x24>
      result = HAL_TIMEOUT;
 8005c0a:	0028      	movs	r0, r5
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005c0c:	680a      	ldr	r2, [r1, #0]
 8005c0e:	4022      	ands	r2, r4
 8005c10:	42a2      	cmp	r2, r4
 8005c12:	d001      	beq.n	8005c18 <LPTIM_WaitForFlag+0x30>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f5      	bne.n	8005c04 <LPTIM_WaitForFlag+0x1c>

  return result;
}
 8005c18:	bd70      	pop	{r4, r5, r6, pc}
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	20000018 	.word	0x20000018
 8005c20:	00004e20 	.word	0x00004e20

08005c24 <HAL_LPTIM_Init>:
{
 8005c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c26:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005c28:	2001      	movs	r0, #1
  if (hlptim == NULL)
 8005c2a:	2c00      	cmp	r4, #0
 8005c2c:	d039      	beq.n	8005ca2 <HAL_LPTIM_Init+0x7e>
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005c2e:	0025      	movs	r5, r4
 8005c30:	352e      	adds	r5, #46	; 0x2e
 8005c32:	782b      	ldrb	r3, [r5, #0]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d105      	bne.n	8005c46 <HAL_LPTIM_Init+0x22>
    hlptim->Lock = HAL_UNLOCKED;
 8005c3a:	0023      	movs	r3, r4
 8005c3c:	332d      	adds	r3, #45	; 0x2d
    HAL_LPTIM_MspInit(hlptim);
 8005c3e:	0020      	movs	r0, r4
    hlptim->Lock = HAL_UNLOCKED;
 8005c40:	701a      	strb	r2, [r3, #0]
    HAL_LPTIM_MspInit(hlptim);
 8005c42:	f7fe fcaf 	bl	80045a4 <HAL_LPTIM_MspInit>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005c46:	2302      	movs	r3, #2
 8005c48:	702b      	strb	r3, [r5, #0]
  tmpcfgr = hlptim->Instance->CFGR;
 8005c4a:	6820      	ldr	r0, [r4, #0]
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005c4c:	6861      	ldr	r1, [r4, #4]
  tmpcfgr = hlptim->Instance->CFGR;
 8005c4e:	68c3      	ldr	r3, [r0, #12]
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005c50:	2901      	cmp	r1, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_LPTIM_Init+0x34>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8005c54:	2206      	movs	r2, #6
 8005c56:	4393      	bics	r3, r2
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005c58:	4e14      	ldr	r6, [pc, #80]	; (8005cac <HAL_LPTIM_Init+0x88>)
 8005c5a:	6962      	ldr	r2, [r4, #20]
 8005c5c:	46b4      	mov	ip, r6
 8005c5e:	42b2      	cmp	r2, r6
 8005c60:	d001      	beq.n	8005c66 <HAL_LPTIM_Init+0x42>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 8005c62:	4f13      	ldr	r7, [pc, #76]	; (8005cb0 <HAL_LPTIM_Init+0x8c>)
 8005c64:	403b      	ands	r3, r7
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005c66:	2900      	cmp	r1, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_LPTIM_Init+0x4a>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 8005c6a:	27d8      	movs	r7, #216	; 0xd8
 8005c6c:	43bb      	bics	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005c6e:	4f11      	ldr	r7, [pc, #68]	; (8005cb4 <HAL_LPTIM_Init+0x90>)
              hlptim->Init.Clock.Prescaler |
 8005c70:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005c72:	401f      	ands	r7, r3
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005c74:	68a3      	ldr	r3, [r4, #8]
 8005c76:	430b      	orrs	r3, r1
              hlptim->Init.Clock.Prescaler |
 8005c78:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 8005c7a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c7c:	4333      	orrs	r3, r6
              hlptim->Init.UpdateMode      |
 8005c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c80:	4333      	orrs	r3, r6
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005c82:	433b      	orrs	r3, r7
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005c84:	2900      	cmp	r1, #0
 8005c86:	d10d      	bne.n	8005ca4 <HAL_LPTIM_Init+0x80>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005c88:	69e1      	ldr	r1, [r4, #28]
 8005c8a:	6926      	ldr	r6, [r4, #16]
 8005c8c:	4331      	orrs	r1, r6
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8005c8e:	430b      	orrs	r3, r1
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005c90:	4562      	cmp	r2, ip
 8005c92:	d002      	beq.n	8005c9a <HAL_LPTIM_Init+0x76>
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8005c94:	69a1      	ldr	r1, [r4, #24]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	4313      	orrs	r3, r2
  hlptim->Instance->CFGR = tmpcfgr;
 8005c9a:	60c3      	str	r3, [r0, #12]
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005c9c:	2301      	movs	r3, #1
  return HAL_OK;
 8005c9e:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005ca0:	702b      	strb	r3, [r5, #0]
}
 8005ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005ca4:	2901      	cmp	r1, #1
 8005ca6:	d1f3      	bne.n	8005c90 <HAL_LPTIM_Init+0x6c>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8005ca8:	68e1      	ldr	r1, [r4, #12]
 8005caa:	e7f0      	b.n	8005c8e <HAL_LPTIM_Init+0x6a>
 8005cac:	0000ffff 	.word	0x0000ffff
 8005cb0:	ffff1fff 	.word	0xffff1fff
 8005cb4:	ff19f1f8 	.word	0xff19f1f8

08005cb8 <HAL_LPTIM_CompareMatchCallback>:
 8005cb8:	4770      	bx	lr

08005cba <HAL_LPTIM_TriggerCallback>:
 8005cba:	4770      	bx	lr

08005cbc <HAL_LPTIM_CompareWriteCallback>:
 8005cbc:	4770      	bx	lr

08005cbe <HAL_LPTIM_AutoReloadWriteCallback>:
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_LPTIM_DirectionUpCallback>:
 8005cc0:	4770      	bx	lr

08005cc2 <HAL_LPTIM_DirectionDownCallback>:
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_LPTIM_IRQHandler>:
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	6803      	ldr	r3, [r0, #0]
{
 8005cc8:	b510      	push	{r4, lr}
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005cca:	6819      	ldr	r1, [r3, #0]
{
 8005ccc:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005cce:	4211      	tst	r1, r2
 8005cd0:	d005      	beq.n	8005cde <HAL_LPTIM_IRQHandler+0x1a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8005cd2:	6899      	ldr	r1, [r3, #8]
 8005cd4:	4211      	tst	r1, r2
 8005cd6:	d002      	beq.n	8005cde <HAL_LPTIM_IRQHandler+0x1a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8005cd8:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8005cda:	f7ff ffed 	bl	8005cb8 <HAL_LPTIM_CompareMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8005cde:	2202      	movs	r2, #2
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	6819      	ldr	r1, [r3, #0]
 8005ce4:	4211      	tst	r1, r2
 8005ce6:	d006      	beq.n	8005cf6 <HAL_LPTIM_IRQHandler+0x32>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005ce8:	6899      	ldr	r1, [r3, #8]
 8005cea:	4211      	tst	r1, r2
 8005cec:	d003      	beq.n	8005cf6 <HAL_LPTIM_IRQHandler+0x32>
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8005cee:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005cf0:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8005cf2:	f7fd fc67 	bl	80035c4 <HAL_LPTIM_AutoReloadMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8005cf6:	2204      	movs	r2, #4
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	6819      	ldr	r1, [r3, #0]
 8005cfc:	4211      	tst	r1, r2
 8005cfe:	d006      	beq.n	8005d0e <HAL_LPTIM_IRQHandler+0x4a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8005d00:	6899      	ldr	r1, [r3, #8]
 8005d02:	4211      	tst	r1, r2
 8005d04:	d003      	beq.n	8005d0e <HAL_LPTIM_IRQHandler+0x4a>
      HAL_LPTIM_TriggerCallback(hlptim);
 8005d06:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8005d08:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 8005d0a:	f7ff ffd6 	bl	8005cba <HAL_LPTIM_TriggerCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8005d0e:	2208      	movs	r2, #8
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	6819      	ldr	r1, [r3, #0]
 8005d14:	4211      	tst	r1, r2
 8005d16:	d006      	beq.n	8005d26 <HAL_LPTIM_IRQHandler+0x62>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8005d18:	6899      	ldr	r1, [r3, #8]
 8005d1a:	4211      	tst	r1, r2
 8005d1c:	d003      	beq.n	8005d26 <HAL_LPTIM_IRQHandler+0x62>
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8005d1e:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005d20:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8005d22:	f7ff ffcb 	bl	8005cbc <HAL_LPTIM_CompareWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005d26:	2210      	movs	r2, #16
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	6819      	ldr	r1, [r3, #0]
 8005d2c:	4211      	tst	r1, r2
 8005d2e:	d006      	beq.n	8005d3e <HAL_LPTIM_IRQHandler+0x7a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8005d30:	6899      	ldr	r1, [r3, #8]
 8005d32:	4211      	tst	r1, r2
 8005d34:	d003      	beq.n	8005d3e <HAL_LPTIM_IRQHandler+0x7a>
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8005d36:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005d38:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8005d3a:	f7ff ffc0 	bl	8005cbe <HAL_LPTIM_AutoReloadWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8005d3e:	2220      	movs	r2, #32
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	6819      	ldr	r1, [r3, #0]
 8005d44:	4211      	tst	r1, r2
 8005d46:	d006      	beq.n	8005d56 <HAL_LPTIM_IRQHandler+0x92>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8005d48:	6899      	ldr	r1, [r3, #8]
 8005d4a:	4211      	tst	r1, r2
 8005d4c:	d003      	beq.n	8005d56 <HAL_LPTIM_IRQHandler+0x92>
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8005d4e:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8005d50:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8005d52:	f7ff ffb5 	bl	8005cc0 <HAL_LPTIM_DirectionUpCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8005d56:	2240      	movs	r2, #64	; 0x40
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	6819      	ldr	r1, [r3, #0]
 8005d5c:	4211      	tst	r1, r2
 8005d5e:	d006      	beq.n	8005d6e <HAL_LPTIM_IRQHandler+0xaa>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8005d60:	6899      	ldr	r1, [r3, #8]
 8005d62:	4211      	tst	r1, r2
 8005d64:	d003      	beq.n	8005d6e <HAL_LPTIM_IRQHandler+0xaa>
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005d66:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005d68:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005d6a:	f7ff ffaa 	bl	8005cc2 <HAL_LPTIM_DirectionDownCallback>
}
 8005d6e:	bd10      	pop	{r4, pc}

08005d70 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d72:	0004      	movs	r4, r0
 8005d74:	b085      	sub	sp, #20
  __ASM volatile ("cpsid i" : : : "memory");
 8005d76:	b672      	cpsid	i
  uint32_t tmpclksource = 0;
 8005d78:	2200      	movs	r2, #0

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005d7a:	6803      	ldr	r3, [r0, #0]
 8005d7c:	4e32      	ldr	r6, [pc, #200]	; (8005e48 <LPTIM_Disable+0xd8>)
  uint32_t tmpclksource = 0;
 8005d7e:	9201      	str	r2, [sp, #4]
  switch ((uint32_t)hlptim->Instance)
 8005d80:	42b3      	cmp	r3, r6
 8005d82:	d105      	bne.n	8005d90 <LPTIM_Disable+0x20>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005d84:	4a31      	ldr	r2, [pc, #196]	; (8005e4c <LPTIM_Disable+0xdc>)
 8005d86:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8005d88:	22c0      	movs	r2, #192	; 0xc0
 8005d8a:	0312      	lsls	r2, r2, #12
 8005d8c:	4015      	ands	r5, r2
 8005d8e:	9501      	str	r5, [sp, #4]
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	9202      	str	r2, [sp, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 8005d94:	68da      	ldr	r2, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 8005d96:	6958      	ldr	r0, [r3, #20]
  tmpCFGR = hlptim->Instance->CFGR;
 8005d98:	9203      	str	r2, [sp, #12]
  tmpARR = hlptim->Instance->ARR;
 8005d9a:	699f      	ldr	r7, [r3, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005d9c:	42b3      	cmp	r3, r6
 8005d9e:	d10b      	bne.n	8005db8 <LPTIM_Disable+0x48>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005da0:	492a      	ldr	r1, [pc, #168]	; (8005e4c <LPTIM_Disable+0xdc>)
 8005da2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005da4:	4694      	mov	ip, r2
 8005da6:	2280      	movs	r2, #128	; 0x80
 8005da8:	4665      	mov	r5, ip
 8005daa:	0612      	lsls	r2, r2, #24
 8005dac:	432a      	orrs	r2, r5
 8005dae:	628a      	str	r2, [r1, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005db0:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005db2:	0052      	lsls	r2, r2, #1
 8005db4:	0852      	lsrs	r2, r2, #1
 8005db6:	628a      	str	r2, [r1, #40]	; 0x28
    default:
      break;
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8005db8:	0002      	movs	r2, r0
 8005dba:	433a      	orrs	r2, r7
 8005dbc:	d037      	beq.n	8005e2e <LPTIM_Disable+0xbe>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005dbe:	42b3      	cmp	r3, r6
 8005dc0:	d104      	bne.n	8005dcc <LPTIM_Disable+0x5c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8005dc2:	4922      	ldr	r1, [pc, #136]	; (8005e4c <LPTIM_Disable+0xdc>)
 8005dc4:	4d22      	ldr	r5, [pc, #136]	; (8005e50 <LPTIM_Disable+0xe0>)
 8005dc6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005dc8:	402a      	ands	r2, r5
 8005dca:	64ca      	str	r2, [r1, #76]	; 0x4c
        break;
      default:
        break;
    }

    if (tmpCMP != 0UL)
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d010      	beq.n	8005df2 <LPTIM_Disable+0x82>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	6919      	ldr	r1, [r3, #16]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005dd8:	2108      	movs	r1, #8
      hlptim->Instance->CMP = tmpCMP;
 8005dda:	6158      	str	r0, [r3, #20]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005ddc:	0020      	movs	r0, r4
 8005dde:	f7ff ff03 	bl	8005be8 <LPTIM_WaitForFlag>
 8005de2:	2803      	cmp	r0, #3
 8005de4:	d102      	bne.n	8005dec <LPTIM_Disable+0x7c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005de6:	0023      	movs	r3, r4
 8005de8:	332e      	adds	r3, #46	; 0x2e
 8005dea:	7018      	strb	r0, [r3, #0]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005dec:	2208      	movs	r2, #8
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005df2:	2f00      	cmp	r7, #0
 8005df4:	d011      	beq.n	8005e1a <LPTIM_Disable+0xaa>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005df6:	2201      	movs	r2, #1
 8005df8:	6823      	ldr	r3, [r4, #0]
      hlptim->Instance->ARR = tmpARR;

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005dfa:	0020      	movs	r0, r4
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005dfc:	6919      	ldr	r1, [r3, #16]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	611a      	str	r2, [r3, #16]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005e02:	2110      	movs	r1, #16
      hlptim->Instance->ARR = tmpARR;
 8005e04:	619f      	str	r7, [r3, #24]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005e06:	f7ff feef 	bl	8005be8 <LPTIM_WaitForFlag>
 8005e0a:	2803      	cmp	r0, #3
 8005e0c:	d102      	bne.n	8005e14 <LPTIM_Disable+0xa4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005e0e:	0023      	movs	r3, r4
 8005e10:	332e      	adds	r3, #46	; 0x2e
 8005e12:	7018      	strb	r0, [r3, #0]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005e14:	2210      	movs	r2, #16
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	42b3      	cmp	r3, r6
 8005e1e:	d106      	bne.n	8005e2e <LPTIM_Disable+0xbe>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005e20:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <LPTIM_Disable+0xdc>)
 8005e22:	490b      	ldr	r1, [pc, #44]	; (8005e50 <LPTIM_Disable+0xe0>)
 8005e24:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005e26:	9d01      	ldr	r5, [sp, #4]
 8005e28:	400b      	ands	r3, r1
 8005e2a:	431d      	orrs	r5, r3
 8005e2c:	64d5      	str	r5, [r2, #76]	; 0x4c
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8005e2e:	2101      	movs	r1, #1
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	438a      	bics	r2, r1
 8005e36:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005e38:	9a02      	ldr	r2, [sp, #8]
 8005e3a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005e3c:	9a03      	ldr	r2, [sp, #12]
 8005e3e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e40:	b662      	cpsie	i

  __enable_irq();
}
 8005e42:	b005      	add	sp, #20
 8005e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	40007c00 	.word	0x40007c00
 8005e4c:	40021000 	.word	0x40021000
 8005e50:	fff3ffff 	.word	0xfff3ffff

08005e54 <HAL_LPTIM_Counter_Start_IT>:
{
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005e56:	0006      	movs	r6, r0
 8005e58:	2302      	movs	r3, #2
 8005e5a:	362e      	adds	r6, #46	; 0x2e
 8005e5c:	7033      	strb	r3, [r6, #0]
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005e5e:	2380      	movs	r3, #128	; 0x80
{
 8005e60:	0004      	movs	r4, r0
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005e62:	4a1c      	ldr	r2, [pc, #112]	; (8005ed4 <HAL_LPTIM_Counter_Start_IT+0x80>)
 8005e64:	059b      	lsls	r3, r3, #22
 8005e66:	6810      	ldr	r0, [r2, #0]
 8005e68:	4303      	orrs	r3, r0
 8005e6a:	6013      	str	r3, [r2, #0]
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8005e6c:	6862      	ldr	r2, [r4, #4]
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	2a01      	cmp	r2, #1
 8005e72:	d008      	beq.n	8005e86 <HAL_LPTIM_Counter_Start_IT+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005e74:	2280      	movs	r2, #128	; 0x80
 8005e76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005e78:	0412      	lsls	r2, r2, #16
 8005e7a:	4290      	cmp	r0, r2
 8005e7c:	d103      	bne.n	8005e86 <HAL_LPTIM_Counter_Start_IT+0x32>
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	4815      	ldr	r0, [pc, #84]	; (8005ed8 <HAL_LPTIM_Counter_Start_IT+0x84>)
 8005e82:	4002      	ands	r2, r0
 8005e84:	60da      	str	r2, [r3, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 8005e86:	2701      	movs	r7, #1
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005e88:	2510      	movs	r5, #16
  __HAL_LPTIM_ENABLE(hlptim);
 8005e8a:	691a      	ldr	r2, [r3, #16]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005e8c:	0020      	movs	r0, r4
  __HAL_LPTIM_ENABLE(hlptim);
 8005e8e:	433a      	orrs	r2, r7
 8005e90:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005e92:	605d      	str	r5, [r3, #4]
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005e94:	6199      	str	r1, [r3, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005e96:	0029      	movs	r1, r5
 8005e98:	f7ff fea6 	bl	8005be8 <LPTIM_WaitForFlag>
 8005e9c:	2803      	cmp	r0, #3
 8005e9e:	d101      	bne.n	8005ea4 <HAL_LPTIM_Counter_Start_IT+0x50>
    return HAL_TIMEOUT;
 8005ea0:	2003      	movs	r0, #3
}
 8005ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LPTIM_DISABLE(hlptim);
 8005ea4:	0020      	movs	r0, r4
 8005ea6:	f7ff ff63 	bl	8005d70 <LPTIM_Disable>
  return hlptim->State;
 8005eaa:	7833      	ldrb	r3, [r6, #0]
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d0f7      	beq.n	8005ea0 <HAL_LPTIM_Counter_Start_IT+0x4c>
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8005eb0:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8005eb2:	2000      	movs	r0, #0
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	4315      	orrs	r5, r2
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8005eb8:	2202      	movs	r2, #2
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8005eba:	609d      	str	r5, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8005ebc:	6899      	ldr	r1, [r3, #8]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE(hlptim);
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	433a      	orrs	r2, r7
 8005ec6:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005ec8:	2204      	movs	r2, #4
 8005eca:	6919      	ldr	r1, [r3, #16]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	611a      	str	r2, [r3, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005ed0:	7037      	strb	r7, [r6, #0]
  return HAL_OK;
 8005ed2:	e7e6      	b.n	8005ea2 <HAL_LPTIM_Counter_Start_IT+0x4e>
 8005ed4:	40010400 	.word	0x40010400
 8005ed8:	fffff1ff 	.word	0xfffff1ff

08005edc <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8005edc:	2380      	movs	r3, #128	; 0x80
 8005ede:	4a03      	ldr	r2, [pc, #12]	; (8005eec <HAL_PWR_EnableBkUpAccess+0x10>)
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	6811      	ldr	r1, [r2, #0]
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	6013      	str	r3, [r2, #0]
}
 8005ee8:	4770      	bx	lr
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	40007000 	.word	0x40007000

08005ef0 <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005ef0:	4b19      	ldr	r3, [pc, #100]	; (8005f58 <HAL_PWR_EnterSTOPMode+0x68>)
{
 8005ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005ef4:	681e      	ldr	r6, [r3, #0]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005ef6:	4c19      	ldr	r4, [pc, #100]	; (8005f5c <HAL_PWR_EnterSTOPMode+0x6c>)
{
 8005ef8:	0002      	movs	r2, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005efa:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005efc:	6a27      	ldr	r7, [r4, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005efe:	0035      	movs	r5, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005f00:	2401      	movs	r4, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005f02:	0080      	lsls	r0, r0, #2
 8005f04:	4005      	ands	r5, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005f06:	403c      	ands	r4, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8005f08:	4206      	tst	r6, r0
 8005f0a:	d005      	beq.n	8005f18 <HAL_PWR_EnterSTOPMode+0x28>
 8005f0c:	2c00      	cmp	r4, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	4e13      	ldr	r6, [pc, #76]	; (8005f60 <HAL_PWR_EnterSTOPMode+0x70>)
 8005f14:	4030      	ands	r0, r6
 8005f16:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005f18:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8005f1a:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005f1c:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8005f1e:	4310      	orrs	r0, r2

  /* Store the new value */
  PWR->CR = tmpreg;
 8005f20:	6018      	str	r0, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005f22:	2004      	movs	r0, #4
 8005f24:	4a0f      	ldr	r2, [pc, #60]	; (8005f64 <HAL_PWR_EnterSTOPMode+0x74>)
 8005f26:	6916      	ldr	r6, [r2, #16]
 8005f28:	4330      	orrs	r0, r6
 8005f2a:	6110      	str	r0, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005f2c:	2901      	cmp	r1, #1
 8005f2e:	d10e      	bne.n	8005f4e <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005f30:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005f32:	2004      	movs	r0, #4
 8005f34:	6911      	ldr	r1, [r2, #16]
 8005f36:	4381      	bics	r1, r0
 8005f38:	6111      	str	r1, [r2, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8005f3a:	2d00      	cmp	r5, #0
 8005f3c:	d006      	beq.n	8005f4c <HAL_PWR_EnterSTOPMode+0x5c>
 8005f3e:	2c00      	cmp	r4, #0
 8005f40:	d004      	beq.n	8005f4c <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8005f42:	2280      	movs	r2, #128	; 0x80
 8005f44:	6819      	ldr	r1, [r3, #0]
 8005f46:	0092      	lsls	r2, r2, #2
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	601a      	str	r2, [r3, #0]
  }
}
 8005f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8005f4e:	bf40      	sev
    __WFE();
 8005f50:	bf20      	wfe
    __WFE();
 8005f52:	bf20      	wfe
 8005f54:	e7ed      	b.n	8005f32 <HAL_PWR_EnterSTOPMode+0x42>
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	40007000 	.word	0x40007000
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	fffffdff 	.word	0xfffffdff
 8005f64:	e000ed00 	.word	0xe000ed00

08005f68 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f68:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8005f6a:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8005f6c:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8005f6e:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8005f70:	4022      	ands	r2, r4
 8005f72:	2a08      	cmp	r2, #8
 8005f74:	d031      	beq.n	8005fda <HAL_RCC_GetSysClockFreq+0x72>
 8005f76:	2a0c      	cmp	r2, #12
 8005f78:	d009      	beq.n	8005f8e <HAL_RCC_GetSysClockFreq+0x26>
 8005f7a:	2a04      	cmp	r2, #4
 8005f7c:	d125      	bne.n	8005fca <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005f7e:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8005f80:	4b18      	ldr	r3, [pc, #96]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005f82:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8005f84:	17c0      	asrs	r0, r0, #31
 8005f86:	4018      	ands	r0, r3
 8005f88:	4b17      	ldr	r3, [pc, #92]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x80>)
 8005f8a:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8005f8c:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005f8e:	02a2      	lsls	r2, r4, #10
 8005f90:	4816      	ldr	r0, [pc, #88]	; (8005fec <HAL_RCC_GetSysClockFreq+0x84>)
 8005f92:	0f12      	lsrs	r2, r2, #28
 8005f94:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f96:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005f98:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f9a:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005f9c:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f9e:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005fa0:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fa2:	4211      	tst	r1, r2
 8005fa4:	d009      	beq.n	8005fba <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005fa6:	4a12      	ldr	r2, [pc, #72]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0x88>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	2100      	movs	r1, #0
 8005fac:	f7fa fad6 	bl	800055c <__aeabi_lmul>
 8005fb0:	0022      	movs	r2, r4
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f7fa fab2 	bl	800051c <__aeabi_uldivmod>
 8005fb8:	e7e8      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	421a      	tst	r2, r3
 8005fc0:	d001      	beq.n	8005fc6 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005fc2:	4a0c      	ldr	r2, [pc, #48]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8005fc4:	e7f0      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005fc6:	4a08      	ldr	r2, [pc, #32]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x80>)
 8005fc8:	e7ee      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005fca:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005fcc:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005fce:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005fd0:	041b      	lsls	r3, r3, #16
 8005fd2:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	4098      	lsls	r0, r3
  return sysclockfreq;
 8005fd8:	e7d8      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8005fda:	4805      	ldr	r0, [pc, #20]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0x88>)
 8005fdc:	e7d6      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x24>
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	ff48e500 	.word	0xff48e500
 8005fe8:	00f42400 	.word	0x00f42400
 8005fec:	0800af77 	.word	0x0800af77
 8005ff0:	007a1200 	.word	0x007a1200
 8005ff4:	003d0900 	.word	0x003d0900

08005ff8 <HAL_RCC_OscConfig>:
{
 8005ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ffa:	0005      	movs	r5, r0
 8005ffc:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d055      	beq.n	80060ae <HAL_RCC_OscConfig+0xb6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006002:	230c      	movs	r3, #12
 8006004:	4cbd      	ldr	r4, [pc, #756]	; (80062fc <HAL_RCC_OscConfig+0x304>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006006:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006008:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800600a:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800600c:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800600e:	2380      	movs	r3, #128	; 0x80
 8006010:	025b      	lsls	r3, r3, #9
 8006012:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006014:	07d2      	lsls	r2, r2, #31
 8006016:	d43e      	bmi.n	8006096 <HAL_RCC_OscConfig+0x9e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	079b      	lsls	r3, r3, #30
 800601c:	d500      	bpl.n	8006020 <HAL_RCC_OscConfig+0x28>
 800601e:	e087      	b.n	8006130 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006020:	682b      	ldr	r3, [r5, #0]
 8006022:	06db      	lsls	r3, r3, #27
 8006024:	d529      	bpl.n	800607a <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006026:	2e00      	cmp	r6, #0
 8006028:	d000      	beq.n	800602c <HAL_RCC_OscConfig+0x34>
 800602a:	e0d8      	b.n	80061de <HAL_RCC_OscConfig+0x1e6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	059b      	lsls	r3, r3, #22
 8006030:	d502      	bpl.n	8006038 <HAL_RCC_OscConfig+0x40>
 8006032:	69ab      	ldr	r3, [r5, #24]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d03a      	beq.n	80060ae <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006038:	6862      	ldr	r2, [r4, #4]
 800603a:	49b1      	ldr	r1, [pc, #708]	; (8006300 <HAL_RCC_OscConfig+0x308>)
 800603c:	6a2b      	ldr	r3, [r5, #32]
 800603e:	400a      	ands	r2, r1
 8006040:	431a      	orrs	r2, r3
 8006042:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006044:	6861      	ldr	r1, [r4, #4]
 8006046:	69ea      	ldr	r2, [r5, #28]
 8006048:	0209      	lsls	r1, r1, #8
 800604a:	0a09      	lsrs	r1, r1, #8
 800604c:	0612      	lsls	r2, r2, #24
 800604e:	430a      	orrs	r2, r1
 8006050:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006052:	2280      	movs	r2, #128	; 0x80
 8006054:	0b5b      	lsrs	r3, r3, #13
 8006056:	3301      	adds	r3, #1
 8006058:	0212      	lsls	r2, r2, #8
 800605a:	409a      	lsls	r2, r3
 800605c:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800605e:	68e1      	ldr	r1, [r4, #12]
 8006060:	060a      	lsls	r2, r1, #24
 8006062:	49a8      	ldr	r1, [pc, #672]	; (8006304 <HAL_RCC_OscConfig+0x30c>)
 8006064:	0f12      	lsrs	r2, r2, #28
 8006066:	5c8a      	ldrb	r2, [r1, r2]
 8006068:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800606a:	4aa7      	ldr	r2, [pc, #668]	; (8006308 <HAL_RCC_OscConfig+0x310>)
 800606c:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 800606e:	4ba7      	ldr	r3, [pc, #668]	; (800630c <HAL_RCC_OscConfig+0x314>)
 8006070:	6818      	ldr	r0, [r3, #0]
 8006072:	f7fe ffdd 	bl	8005030 <HAL_InitTick>
        if(status != HAL_OK)
 8006076:	2800      	cmp	r0, #0
 8006078:	d130      	bne.n	80060dc <HAL_RCC_OscConfig+0xe4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800607a:	682b      	ldr	r3, [r5, #0]
 800607c:	071b      	lsls	r3, r3, #28
 800607e:	d500      	bpl.n	8006082 <HAL_RCC_OscConfig+0x8a>
 8006080:	e0e4      	b.n	800624c <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006082:	682b      	ldr	r3, [r5, #0]
 8006084:	075b      	lsls	r3, r3, #29
 8006086:	d500      	bpl.n	800608a <HAL_RCC_OscConfig+0x92>
 8006088:	e106      	b.n	8006298 <HAL_RCC_OscConfig+0x2a0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800608a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	d000      	beq.n	8006092 <HAL_RCC_OscConfig+0x9a>
 8006090:	e18d      	b.n	80063ae <HAL_RCC_OscConfig+0x3b6>
  return HAL_OK;
 8006092:	2000      	movs	r0, #0
 8006094:	e022      	b.n	80060dc <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006096:	2e08      	cmp	r6, #8
 8006098:	d003      	beq.n	80060a2 <HAL_RCC_OscConfig+0xaa>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800609a:	2e0c      	cmp	r6, #12
 800609c:	d109      	bne.n	80060b2 <HAL_RCC_OscConfig+0xba>
 800609e:	2f00      	cmp	r7, #0
 80060a0:	d007      	beq.n	80060b2 <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	039b      	lsls	r3, r3, #14
 80060a6:	d5b7      	bpl.n	8006018 <HAL_RCC_OscConfig+0x20>
 80060a8:	686b      	ldr	r3, [r5, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1b4      	bne.n	8006018 <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 80060ae:	2001      	movs	r0, #1
 80060b0:	e014      	b.n	80060dc <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060b2:	686a      	ldr	r2, [r5, #4]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d113      	bne.n	80060e0 <HAL_RCC_OscConfig+0xe8>
 80060b8:	6822      	ldr	r2, [r4, #0]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80060be:	f7fe fffb 	bl	80050b8 <HAL_GetTick>
 80060c2:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060c4:	2280      	movs	r2, #128	; 0x80
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	0292      	lsls	r2, r2, #10
 80060ca:	4213      	tst	r3, r2
 80060cc:	d1a4      	bne.n	8006018 <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060ce:	f7fe fff3 	bl	80050b8 <HAL_GetTick>
 80060d2:	9b01      	ldr	r3, [sp, #4]
 80060d4:	1ac0      	subs	r0, r0, r3
 80060d6:	2864      	cmp	r0, #100	; 0x64
 80060d8:	d9f4      	bls.n	80060c4 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80060da:	2003      	movs	r0, #3
}
 80060dc:	b007      	add	sp, #28
 80060de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060e0:	21a0      	movs	r1, #160	; 0xa0
 80060e2:	02c9      	lsls	r1, r1, #11
 80060e4:	428a      	cmp	r2, r1
 80060e6:	d105      	bne.n	80060f4 <HAL_RCC_OscConfig+0xfc>
 80060e8:	2280      	movs	r2, #128	; 0x80
 80060ea:	6821      	ldr	r1, [r4, #0]
 80060ec:	02d2      	lsls	r2, r2, #11
 80060ee:	430a      	orrs	r2, r1
 80060f0:	6022      	str	r2, [r4, #0]
 80060f2:	e7e1      	b.n	80060b8 <HAL_RCC_OscConfig+0xc0>
 80060f4:	6821      	ldr	r1, [r4, #0]
 80060f6:	4886      	ldr	r0, [pc, #536]	; (8006310 <HAL_RCC_OscConfig+0x318>)
 80060f8:	4001      	ands	r1, r0
 80060fa:	6021      	str	r1, [r4, #0]
 80060fc:	6821      	ldr	r1, [r4, #0]
 80060fe:	400b      	ands	r3, r1
 8006100:	9305      	str	r3, [sp, #20]
 8006102:	9b05      	ldr	r3, [sp, #20]
 8006104:	4983      	ldr	r1, [pc, #524]	; (8006314 <HAL_RCC_OscConfig+0x31c>)
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	400b      	ands	r3, r1
 800610a:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800610c:	2a00      	cmp	r2, #0
 800610e:	d1d6      	bne.n	80060be <HAL_RCC_OscConfig+0xc6>
        tickstart = HAL_GetTick();
 8006110:	f7fe ffd2 	bl	80050b8 <HAL_GetTick>
 8006114:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006116:	2280      	movs	r2, #128	; 0x80
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	0292      	lsls	r2, r2, #10
 800611c:	4213      	tst	r3, r2
 800611e:	d100      	bne.n	8006122 <HAL_RCC_OscConfig+0x12a>
 8006120:	e77a      	b.n	8006018 <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006122:	f7fe ffc9 	bl	80050b8 <HAL_GetTick>
 8006126:	9b01      	ldr	r3, [sp, #4]
 8006128:	1ac0      	subs	r0, r0, r3
 800612a:	2864      	cmp	r0, #100	; 0x64
 800612c:	d9f3      	bls.n	8006116 <HAL_RCC_OscConfig+0x11e>
 800612e:	e7d4      	b.n	80060da <HAL_RCC_OscConfig+0xe2>
    hsi_state = RCC_OscInitStruct->HSIState;
 8006130:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006132:	2e04      	cmp	r6, #4
 8006134:	d003      	beq.n	800613e <HAL_RCC_OscConfig+0x146>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006136:	2e0c      	cmp	r6, #12
 8006138:	d124      	bne.n	8006184 <HAL_RCC_OscConfig+0x18c>
 800613a:	2f00      	cmp	r7, #0
 800613c:	d122      	bne.n	8006184 <HAL_RCC_OscConfig+0x18c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	075b      	lsls	r3, r3, #29
 8006142:	d501      	bpl.n	8006148 <HAL_RCC_OscConfig+0x150>
 8006144:	2a00      	cmp	r2, #0
 8006146:	d0b2      	beq.n	80060ae <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006148:	6861      	ldr	r1, [r4, #4]
 800614a:	692b      	ldr	r3, [r5, #16]
 800614c:	4872      	ldr	r0, [pc, #456]	; (8006318 <HAL_RCC_OscConfig+0x320>)
 800614e:	021b      	lsls	r3, r3, #8
 8006150:	4001      	ands	r1, r0
 8006152:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006154:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006156:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	438b      	bics	r3, r1
 800615c:	4313      	orrs	r3, r2
 800615e:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006160:	f7ff ff02 	bl	8005f68 <HAL_RCC_GetSysClockFreq>
 8006164:	68e3      	ldr	r3, [r4, #12]
 8006166:	4a67      	ldr	r2, [pc, #412]	; (8006304 <HAL_RCC_OscConfig+0x30c>)
 8006168:	061b      	lsls	r3, r3, #24
 800616a:	0f1b      	lsrs	r3, r3, #28
 800616c:	5cd3      	ldrb	r3, [r2, r3]
 800616e:	40d8      	lsrs	r0, r3
 8006170:	4b65      	ldr	r3, [pc, #404]	; (8006308 <HAL_RCC_OscConfig+0x310>)
 8006172:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8006174:	4b65      	ldr	r3, [pc, #404]	; (800630c <HAL_RCC_OscConfig+0x314>)
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	f7fe ff5a 	bl	8005030 <HAL_InitTick>
      if(status != HAL_OK)
 800617c:	2800      	cmp	r0, #0
 800617e:	d100      	bne.n	8006182 <HAL_RCC_OscConfig+0x18a>
 8006180:	e74e      	b.n	8006020 <HAL_RCC_OscConfig+0x28>
 8006182:	e7ab      	b.n	80060dc <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006184:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8006186:	2a00      	cmp	r2, #0
 8006188:	d018      	beq.n	80061bc <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800618a:	2109      	movs	r1, #9
 800618c:	438b      	bics	r3, r1
 800618e:	4313      	orrs	r3, r2
 8006190:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006192:	f7fe ff91 	bl	80050b8 <HAL_GetTick>
 8006196:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006198:	2204      	movs	r2, #4
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	4213      	tst	r3, r2
 800619e:	d007      	beq.n	80061b0 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a0:	6862      	ldr	r2, [r4, #4]
 80061a2:	692b      	ldr	r3, [r5, #16]
 80061a4:	495c      	ldr	r1, [pc, #368]	; (8006318 <HAL_RCC_OscConfig+0x320>)
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	400a      	ands	r2, r1
 80061aa:	4313      	orrs	r3, r2
 80061ac:	6063      	str	r3, [r4, #4]
 80061ae:	e737      	b.n	8006020 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061b0:	f7fe ff82 	bl	80050b8 <HAL_GetTick>
 80061b4:	1bc0      	subs	r0, r0, r7
 80061b6:	2802      	cmp	r0, #2
 80061b8:	d9ee      	bls.n	8006198 <HAL_RCC_OscConfig+0x1a0>
 80061ba:	e78e      	b.n	80060da <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 80061bc:	2201      	movs	r2, #1
 80061be:	4393      	bics	r3, r2
 80061c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80061c2:	f7fe ff79 	bl	80050b8 <HAL_GetTick>
 80061c6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061c8:	2204      	movs	r2, #4
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	4213      	tst	r3, r2
 80061ce:	d100      	bne.n	80061d2 <HAL_RCC_OscConfig+0x1da>
 80061d0:	e726      	b.n	8006020 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061d2:	f7fe ff71 	bl	80050b8 <HAL_GetTick>
 80061d6:	1bc0      	subs	r0, r0, r7
 80061d8:	2802      	cmp	r0, #2
 80061da:	d9f5      	bls.n	80061c8 <HAL_RCC_OscConfig+0x1d0>
 80061dc:	e77d      	b.n	80060da <HAL_RCC_OscConfig+0xe2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80061de:	69ab      	ldr	r3, [r5, #24]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d020      	beq.n	8006226 <HAL_RCC_OscConfig+0x22e>
        __HAL_RCC_MSI_ENABLE();
 80061e4:	2380      	movs	r3, #128	; 0x80
 80061e6:	6822      	ldr	r2, [r4, #0]
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	4313      	orrs	r3, r2
 80061ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80061ee:	f7fe ff63 	bl	80050b8 <HAL_GetTick>
 80061f2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80061f4:	2280      	movs	r2, #128	; 0x80
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	0092      	lsls	r2, r2, #2
 80061fa:	4213      	tst	r3, r2
 80061fc:	d00d      	beq.n	800621a <HAL_RCC_OscConfig+0x222>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061fe:	6863      	ldr	r3, [r4, #4]
 8006200:	4a3f      	ldr	r2, [pc, #252]	; (8006300 <HAL_RCC_OscConfig+0x308>)
 8006202:	4013      	ands	r3, r2
 8006204:	6a2a      	ldr	r2, [r5, #32]
 8006206:	4313      	orrs	r3, r2
 8006208:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800620a:	6862      	ldr	r2, [r4, #4]
 800620c:	69eb      	ldr	r3, [r5, #28]
 800620e:	0212      	lsls	r2, r2, #8
 8006210:	061b      	lsls	r3, r3, #24
 8006212:	0a12      	lsrs	r2, r2, #8
 8006214:	4313      	orrs	r3, r2
 8006216:	6063      	str	r3, [r4, #4]
 8006218:	e72f      	b.n	800607a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800621a:	f7fe ff4d 	bl	80050b8 <HAL_GetTick>
 800621e:	1bc0      	subs	r0, r0, r7
 8006220:	2802      	cmp	r0, #2
 8006222:	d9e7      	bls.n	80061f4 <HAL_RCC_OscConfig+0x1fc>
 8006224:	e759      	b.n	80060da <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_MSI_DISABLE();
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	4a3c      	ldr	r2, [pc, #240]	; (800631c <HAL_RCC_OscConfig+0x324>)
 800622a:	4013      	ands	r3, r2
 800622c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800622e:	f7fe ff43 	bl	80050b8 <HAL_GetTick>
 8006232:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006234:	2280      	movs	r2, #128	; 0x80
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	0092      	lsls	r2, r2, #2
 800623a:	4213      	tst	r3, r2
 800623c:	d100      	bne.n	8006240 <HAL_RCC_OscConfig+0x248>
 800623e:	e71c      	b.n	800607a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006240:	f7fe ff3a 	bl	80050b8 <HAL_GetTick>
 8006244:	1bc0      	subs	r0, r0, r7
 8006246:	2802      	cmp	r0, #2
 8006248:	d9f4      	bls.n	8006234 <HAL_RCC_OscConfig+0x23c>
 800624a:	e746      	b.n	80060da <HAL_RCC_OscConfig+0xe2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800624c:	696a      	ldr	r2, [r5, #20]
 800624e:	2301      	movs	r3, #1
 8006250:	2a00      	cmp	r2, #0
 8006252:	d010      	beq.n	8006276 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_ENABLE();
 8006254:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006256:	4313      	orrs	r3, r2
 8006258:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800625a:	f7fe ff2d 	bl	80050b8 <HAL_GetTick>
 800625e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006260:	2202      	movs	r2, #2
 8006262:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006264:	4213      	tst	r3, r2
 8006266:	d000      	beq.n	800626a <HAL_RCC_OscConfig+0x272>
 8006268:	e70b      	b.n	8006082 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800626a:	f7fe ff25 	bl	80050b8 <HAL_GetTick>
 800626e:	1bc0      	subs	r0, r0, r7
 8006270:	2802      	cmp	r0, #2
 8006272:	d9f5      	bls.n	8006260 <HAL_RCC_OscConfig+0x268>
 8006274:	e731      	b.n	80060da <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_LSI_DISABLE();
 8006276:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006278:	439a      	bics	r2, r3
 800627a:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800627c:	f7fe ff1c 	bl	80050b8 <HAL_GetTick>
 8006280:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006282:	2202      	movs	r2, #2
 8006284:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006286:	4213      	tst	r3, r2
 8006288:	d100      	bne.n	800628c <HAL_RCC_OscConfig+0x294>
 800628a:	e6fa      	b.n	8006082 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800628c:	f7fe ff14 	bl	80050b8 <HAL_GetTick>
 8006290:	1bc0      	subs	r0, r0, r7
 8006292:	2802      	cmp	r0, #2
 8006294:	d9f5      	bls.n	8006282 <HAL_RCC_OscConfig+0x28a>
 8006296:	e720      	b.n	80060da <HAL_RCC_OscConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006298:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800629a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800629c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800629e:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80062a0:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062a2:	421a      	tst	r2, r3
 80062a4:	d104      	bne.n	80062b0 <HAL_RCC_OscConfig+0x2b8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80062a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80062a8:	4313      	orrs	r3, r2
 80062aa:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80062ac:	2301      	movs	r3, #1
 80062ae:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b0:	2280      	movs	r2, #128	; 0x80
 80062b2:	4f1b      	ldr	r7, [pc, #108]	; (8006320 <HAL_RCC_OscConfig+0x328>)
 80062b4:	0052      	lsls	r2, r2, #1
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	4213      	tst	r3, r2
 80062ba:	d008      	beq.n	80062ce <HAL_RCC_OscConfig+0x2d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062bc:	2280      	movs	r2, #128	; 0x80
 80062be:	68ab      	ldr	r3, [r5, #8]
 80062c0:	0052      	lsls	r2, r2, #1
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d12e      	bne.n	8006324 <HAL_RCC_OscConfig+0x32c>
 80062c6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80062c8:	4313      	orrs	r3, r2
 80062ca:	6523      	str	r3, [r4, #80]	; 0x50
 80062cc:	e04f      	b.n	800636e <HAL_RCC_OscConfig+0x376>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062ce:	2280      	movs	r2, #128	; 0x80
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	0052      	lsls	r2, r2, #1
 80062d4:	4313      	orrs	r3, r2
 80062d6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80062d8:	f7fe feee 	bl	80050b8 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062dc:	2380      	movs	r3, #128	; 0x80
 80062de:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 80062e0:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e2:	9303      	str	r3, [sp, #12]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	9a03      	ldr	r2, [sp, #12]
 80062e8:	4213      	tst	r3, r2
 80062ea:	d1e7      	bne.n	80062bc <HAL_RCC_OscConfig+0x2c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ec:	f7fe fee4 	bl	80050b8 <HAL_GetTick>
 80062f0:	9b02      	ldr	r3, [sp, #8]
 80062f2:	1ac0      	subs	r0, r0, r3
 80062f4:	2864      	cmp	r0, #100	; 0x64
 80062f6:	d9f5      	bls.n	80062e4 <HAL_RCC_OscConfig+0x2ec>
 80062f8:	e6ef      	b.n	80060da <HAL_RCC_OscConfig+0xe2>
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	40021000 	.word	0x40021000
 8006300:	ffff1fff 	.word	0xffff1fff
 8006304:	0800af5f 	.word	0x0800af5f
 8006308:	20000018 	.word	0x20000018
 800630c:	20000020 	.word	0x20000020
 8006310:	fffeffff 	.word	0xfffeffff
 8006314:	fffbffff 	.word	0xfffbffff
 8006318:	ffffe0ff 	.word	0xffffe0ff
 800631c:	fffffeff 	.word	0xfffffeff
 8006320:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006324:	2b00      	cmp	r3, #0
 8006326:	d116      	bne.n	8006356 <HAL_RCC_OscConfig+0x35e>
 8006328:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800632a:	4a51      	ldr	r2, [pc, #324]	; (8006470 <HAL_RCC_OscConfig+0x478>)
 800632c:	4013      	ands	r3, r2
 800632e:	6523      	str	r3, [r4, #80]	; 0x50
 8006330:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006332:	4a50      	ldr	r2, [pc, #320]	; (8006474 <HAL_RCC_OscConfig+0x47c>)
 8006334:	4013      	ands	r3, r2
 8006336:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8006338:	f7fe febe 	bl	80050b8 <HAL_GetTick>
 800633c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800633e:	2280      	movs	r2, #128	; 0x80
 8006340:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006342:	0092      	lsls	r2, r2, #2
 8006344:	4213      	tst	r3, r2
 8006346:	d01a      	beq.n	800637e <HAL_RCC_OscConfig+0x386>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006348:	f7fe feb6 	bl	80050b8 <HAL_GetTick>
 800634c:	4b4a      	ldr	r3, [pc, #296]	; (8006478 <HAL_RCC_OscConfig+0x480>)
 800634e:	1bc0      	subs	r0, r0, r7
 8006350:	4298      	cmp	r0, r3
 8006352:	d9f4      	bls.n	800633e <HAL_RCC_OscConfig+0x346>
 8006354:	e6c1      	b.n	80060da <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006356:	21a0      	movs	r1, #160	; 0xa0
 8006358:	00c9      	lsls	r1, r1, #3
 800635a:	428b      	cmp	r3, r1
 800635c:	d118      	bne.n	8006390 <HAL_RCC_OscConfig+0x398>
 800635e:	2380      	movs	r3, #128	; 0x80
 8006360:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	430b      	orrs	r3, r1
 8006366:	6523      	str	r3, [r4, #80]	; 0x50
 8006368:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800636a:	431a      	orrs	r2, r3
 800636c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800636e:	f7fe fea3 	bl	80050b8 <HAL_GetTick>
 8006372:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006374:	2280      	movs	r2, #128	; 0x80
 8006376:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006378:	0092      	lsls	r2, r2, #2
 800637a:	4213      	tst	r3, r2
 800637c:	d010      	beq.n	80063a0 <HAL_RCC_OscConfig+0x3a8>
    if(pwrclkchanged == SET)
 800637e:	9b01      	ldr	r3, [sp, #4]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d000      	beq.n	8006386 <HAL_RCC_OscConfig+0x38e>
 8006384:	e681      	b.n	800608a <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006386:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006388:	4a3c      	ldr	r2, [pc, #240]	; (800647c <HAL_RCC_OscConfig+0x484>)
 800638a:	4013      	ands	r3, r2
 800638c:	63a3      	str	r3, [r4, #56]	; 0x38
 800638e:	e67c      	b.n	800608a <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006390:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006392:	4a37      	ldr	r2, [pc, #220]	; (8006470 <HAL_RCC_OscConfig+0x478>)
 8006394:	4013      	ands	r3, r2
 8006396:	6523      	str	r3, [r4, #80]	; 0x50
 8006398:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800639a:	4a36      	ldr	r2, [pc, #216]	; (8006474 <HAL_RCC_OscConfig+0x47c>)
 800639c:	4013      	ands	r3, r2
 800639e:	e794      	b.n	80062ca <HAL_RCC_OscConfig+0x2d2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063a0:	f7fe fe8a 	bl	80050b8 <HAL_GetTick>
 80063a4:	4b34      	ldr	r3, [pc, #208]	; (8006478 <HAL_RCC_OscConfig+0x480>)
 80063a6:	1bc0      	subs	r0, r0, r7
 80063a8:	4298      	cmp	r0, r3
 80063aa:	d9e3      	bls.n	8006374 <HAL_RCC_OscConfig+0x37c>
 80063ac:	e695      	b.n	80060da <HAL_RCC_OscConfig+0xe2>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063ae:	2e0c      	cmp	r6, #12
 80063b0:	d043      	beq.n	800643a <HAL_RCC_OscConfig+0x442>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063b2:	4a33      	ldr	r2, [pc, #204]	; (8006480 <HAL_RCC_OscConfig+0x488>)
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d12e      	bne.n	8006416 <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_DISABLE();
 80063b8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80063ba:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80063bc:	4013      	ands	r3, r2
 80063be:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80063c0:	f7fe fe7a 	bl	80050b8 <HAL_GetTick>
 80063c4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80063c6:	04bf      	lsls	r7, r7, #18
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	423b      	tst	r3, r7
 80063cc:	d11d      	bne.n	800640a <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063ce:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80063d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80063d2:	68e2      	ldr	r2, [r4, #12]
 80063d4:	430b      	orrs	r3, r1
 80063d6:	492b      	ldr	r1, [pc, #172]	; (8006484 <HAL_RCC_OscConfig+0x48c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80063d8:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063da:	400a      	ands	r2, r1
 80063dc:	4313      	orrs	r3, r2
 80063de:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80063e0:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80063e6:	2380      	movs	r3, #128	; 0x80
 80063e8:	6822      	ldr	r2, [r4, #0]
 80063ea:	045b      	lsls	r3, r3, #17
 80063ec:	4313      	orrs	r3, r2
 80063ee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80063f0:	f7fe fe62 	bl	80050b8 <HAL_GetTick>
 80063f4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	4233      	tst	r3, r6
 80063fa:	d000      	beq.n	80063fe <HAL_RCC_OscConfig+0x406>
 80063fc:	e649      	b.n	8006092 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063fe:	f7fe fe5b 	bl	80050b8 <HAL_GetTick>
 8006402:	1b40      	subs	r0, r0, r5
 8006404:	2802      	cmp	r0, #2
 8006406:	d9f6      	bls.n	80063f6 <HAL_RCC_OscConfig+0x3fe>
 8006408:	e667      	b.n	80060da <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800640a:	f7fe fe55 	bl	80050b8 <HAL_GetTick>
 800640e:	1b80      	subs	r0, r0, r6
 8006410:	2802      	cmp	r0, #2
 8006412:	d9d9      	bls.n	80063c8 <HAL_RCC_OscConfig+0x3d0>
 8006414:	e661      	b.n	80060da <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_PLL_DISABLE();
 8006416:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006418:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800641a:	4013      	ands	r3, r2
 800641c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800641e:	f7fe fe4b 	bl	80050b8 <HAL_GetTick>
 8006422:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006424:	04b6      	lsls	r6, r6, #18
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	4233      	tst	r3, r6
 800642a:	d100      	bne.n	800642e <HAL_RCC_OscConfig+0x436>
 800642c:	e631      	b.n	8006092 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800642e:	f7fe fe43 	bl	80050b8 <HAL_GetTick>
 8006432:	1b40      	subs	r0, r0, r5
 8006434:	2802      	cmp	r0, #2
 8006436:	d9f6      	bls.n	8006426 <HAL_RCC_OscConfig+0x42e>
 8006438:	e64f      	b.n	80060da <HAL_RCC_OscConfig+0xe2>
        return HAL_ERROR;
 800643a:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800643c:	2b01      	cmp	r3, #1
 800643e:	d100      	bne.n	8006442 <HAL_RCC_OscConfig+0x44a>
 8006440:	e64c      	b.n	80060dc <HAL_RCC_OscConfig+0xe4>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006442:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8006444:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006446:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8006448:	0252      	lsls	r2, r2, #9
 800644a:	401a      	ands	r2, r3
 800644c:	428a      	cmp	r2, r1
 800644e:	d000      	beq.n	8006452 <HAL_RCC_OscConfig+0x45a>
 8006450:	e62d      	b.n	80060ae <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006452:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006454:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006456:	0392      	lsls	r2, r2, #14
 8006458:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800645a:	428a      	cmp	r2, r1
 800645c:	d000      	beq.n	8006460 <HAL_RCC_OscConfig+0x468>
 800645e:	e626      	b.n	80060ae <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006460:	22c0      	movs	r2, #192	; 0xc0
 8006462:	0412      	lsls	r2, r2, #16
 8006464:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006466:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006468:	4293      	cmp	r3, r2
 800646a:	d100      	bne.n	800646e <HAL_RCC_OscConfig+0x476>
 800646c:	e611      	b.n	8006092 <HAL_RCC_OscConfig+0x9a>
 800646e:	e61e      	b.n	80060ae <HAL_RCC_OscConfig+0xb6>
 8006470:	fffffeff 	.word	0xfffffeff
 8006474:	fffffbff 	.word	0xfffffbff
 8006478:	00001388 	.word	0x00001388
 800647c:	efffffff 	.word	0xefffffff
 8006480:	feffffff 	.word	0xfeffffff
 8006484:	ff02ffff 	.word	0xff02ffff

08006488 <HAL_RCC_ClockConfig>:
{
 8006488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800648a:	1e04      	subs	r4, r0, #0
 800648c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800648e:	d101      	bne.n	8006494 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8006490:	2001      	movs	r0, #1
}
 8006492:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006494:	2601      	movs	r6, #1
 8006496:	4d5b      	ldr	r5, [pc, #364]	; (8006604 <HAL_RCC_ClockConfig+0x17c>)
 8006498:	9a01      	ldr	r2, [sp, #4]
 800649a:	682b      	ldr	r3, [r5, #0]
 800649c:	4033      	ands	r3, r6
 800649e:	4293      	cmp	r3, r2
 80064a0:	d331      	bcc.n	8006506 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064a2:	6822      	ldr	r2, [r4, #0]
 80064a4:	0793      	lsls	r3, r2, #30
 80064a6:	d443      	bmi.n	8006530 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064a8:	07d3      	lsls	r3, r2, #31
 80064aa:	d449      	bmi.n	8006540 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064ac:	2601      	movs	r6, #1
 80064ae:	682b      	ldr	r3, [r5, #0]
 80064b0:	9a01      	ldr	r2, [sp, #4]
 80064b2:	4033      	ands	r3, r6
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d909      	bls.n	80064cc <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	43b3      	bics	r3, r6
 80064bc:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80064be:	f7fe fdfb 	bl	80050b8 <HAL_GetTick>
 80064c2:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	4233      	tst	r3, r6
 80064c8:	d000      	beq.n	80064cc <HAL_RCC_ClockConfig+0x44>
 80064ca:	e08c      	b.n	80065e6 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064cc:	6822      	ldr	r2, [r4, #0]
 80064ce:	4d4e      	ldr	r5, [pc, #312]	; (8006608 <HAL_RCC_ClockConfig+0x180>)
 80064d0:	0753      	lsls	r3, r2, #29
 80064d2:	d500      	bpl.n	80064d6 <HAL_RCC_ClockConfig+0x4e>
 80064d4:	e08f      	b.n	80065f6 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064d6:	0713      	lsls	r3, r2, #28
 80064d8:	d506      	bpl.n	80064e8 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064da:	68ea      	ldr	r2, [r5, #12]
 80064dc:	6923      	ldr	r3, [r4, #16]
 80064de:	494b      	ldr	r1, [pc, #300]	; (800660c <HAL_RCC_ClockConfig+0x184>)
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	400a      	ands	r2, r1
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064e8:	f7ff fd3e 	bl	8005f68 <HAL_RCC_GetSysClockFreq>
 80064ec:	68eb      	ldr	r3, [r5, #12]
 80064ee:	4a48      	ldr	r2, [pc, #288]	; (8006610 <HAL_RCC_ClockConfig+0x188>)
 80064f0:	061b      	lsls	r3, r3, #24
 80064f2:	0f1b      	lsrs	r3, r3, #28
 80064f4:	5cd3      	ldrb	r3, [r2, r3]
 80064f6:	40d8      	lsrs	r0, r3
 80064f8:	4b46      	ldr	r3, [pc, #280]	; (8006614 <HAL_RCC_ClockConfig+0x18c>)
 80064fa:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80064fc:	4b46      	ldr	r3, [pc, #280]	; (8006618 <HAL_RCC_ClockConfig+0x190>)
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	f7fe fd96 	bl	8005030 <HAL_InitTick>
  if(status != HAL_OK)
 8006504:	e7c5      	b.n	8006492 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006506:	682b      	ldr	r3, [r5, #0]
 8006508:	9a01      	ldr	r2, [sp, #4]
 800650a:	43b3      	bics	r3, r6
 800650c:	4313      	orrs	r3, r2
 800650e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006510:	f7fe fdd2 	bl	80050b8 <HAL_GetTick>
 8006514:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006516:	682b      	ldr	r3, [r5, #0]
 8006518:	9a01      	ldr	r2, [sp, #4]
 800651a:	4033      	ands	r3, r6
 800651c:	4293      	cmp	r3, r2
 800651e:	d0c0      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006520:	f7fe fdca 	bl	80050b8 <HAL_GetTick>
 8006524:	4b3d      	ldr	r3, [pc, #244]	; (800661c <HAL_RCC_ClockConfig+0x194>)
 8006526:	1bc0      	subs	r0, r0, r7
 8006528:	4298      	cmp	r0, r3
 800652a:	d9f4      	bls.n	8006516 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 800652c:	2003      	movs	r0, #3
 800652e:	e7b0      	b.n	8006492 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006530:	20f0      	movs	r0, #240	; 0xf0
 8006532:	4935      	ldr	r1, [pc, #212]	; (8006608 <HAL_RCC_ClockConfig+0x180>)
 8006534:	68cb      	ldr	r3, [r1, #12]
 8006536:	4383      	bics	r3, r0
 8006538:	68a0      	ldr	r0, [r4, #8]
 800653a:	4303      	orrs	r3, r0
 800653c:	60cb      	str	r3, [r1, #12]
 800653e:	e7b3      	b.n	80064a8 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006540:	4e31      	ldr	r6, [pc, #196]	; (8006608 <HAL_RCC_ClockConfig+0x180>)
 8006542:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006544:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006546:	2a02      	cmp	r2, #2
 8006548:	d118      	bne.n	800657c <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800654a:	039b      	lsls	r3, r3, #14
 800654c:	d5a0      	bpl.n	8006490 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800654e:	2103      	movs	r1, #3
 8006550:	68f3      	ldr	r3, [r6, #12]
 8006552:	438b      	bics	r3, r1
 8006554:	4313      	orrs	r3, r2
 8006556:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8006558:	f7fe fdae 	bl	80050b8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800655c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800655e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006560:	2b02      	cmp	r3, #2
 8006562:	d118      	bne.n	8006596 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006564:	220c      	movs	r2, #12
 8006566:	68f3      	ldr	r3, [r6, #12]
 8006568:	4013      	ands	r3, r2
 800656a:	2b08      	cmp	r3, #8
 800656c:	d09e      	beq.n	80064ac <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800656e:	f7fe fda3 	bl	80050b8 <HAL_GetTick>
 8006572:	4b2a      	ldr	r3, [pc, #168]	; (800661c <HAL_RCC_ClockConfig+0x194>)
 8006574:	1bc0      	subs	r0, r0, r7
 8006576:	4298      	cmp	r0, r3
 8006578:	d9f4      	bls.n	8006564 <HAL_RCC_ClockConfig+0xdc>
 800657a:	e7d7      	b.n	800652c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800657c:	2a03      	cmp	r2, #3
 800657e:	d102      	bne.n	8006586 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006580:	019b      	lsls	r3, r3, #6
 8006582:	d4e4      	bmi.n	800654e <HAL_RCC_ClockConfig+0xc6>
 8006584:	e784      	b.n	8006490 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006586:	2a01      	cmp	r2, #1
 8006588:	d102      	bne.n	8006590 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800658a:	075b      	lsls	r3, r3, #29
 800658c:	d4df      	bmi.n	800654e <HAL_RCC_ClockConfig+0xc6>
 800658e:	e77f      	b.n	8006490 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006590:	059b      	lsls	r3, r3, #22
 8006592:	d4dc      	bmi.n	800654e <HAL_RCC_ClockConfig+0xc6>
 8006594:	e77c      	b.n	8006490 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006596:	2b03      	cmp	r3, #3
 8006598:	d10b      	bne.n	80065b2 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800659a:	220c      	movs	r2, #12
 800659c:	68f3      	ldr	r3, [r6, #12]
 800659e:	4013      	ands	r3, r2
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d083      	beq.n	80064ac <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065a4:	f7fe fd88 	bl	80050b8 <HAL_GetTick>
 80065a8:	4b1c      	ldr	r3, [pc, #112]	; (800661c <HAL_RCC_ClockConfig+0x194>)
 80065aa:	1bc0      	subs	r0, r0, r7
 80065ac:	4298      	cmp	r0, r3
 80065ae:	d9f4      	bls.n	800659a <HAL_RCC_ClockConfig+0x112>
 80065b0:	e7bc      	b.n	800652c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d011      	beq.n	80065da <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80065b6:	220c      	movs	r2, #12
 80065b8:	68f3      	ldr	r3, [r6, #12]
 80065ba:	4213      	tst	r3, r2
 80065bc:	d100      	bne.n	80065c0 <HAL_RCC_ClockConfig+0x138>
 80065be:	e775      	b.n	80064ac <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c0:	f7fe fd7a 	bl	80050b8 <HAL_GetTick>
 80065c4:	4b15      	ldr	r3, [pc, #84]	; (800661c <HAL_RCC_ClockConfig+0x194>)
 80065c6:	1bc0      	subs	r0, r0, r7
 80065c8:	4298      	cmp	r0, r3
 80065ca:	d9f4      	bls.n	80065b6 <HAL_RCC_ClockConfig+0x12e>
 80065cc:	e7ae      	b.n	800652c <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ce:	f7fe fd73 	bl	80050b8 <HAL_GetTick>
 80065d2:	4b12      	ldr	r3, [pc, #72]	; (800661c <HAL_RCC_ClockConfig+0x194>)
 80065d4:	1bc0      	subs	r0, r0, r7
 80065d6:	4298      	cmp	r0, r3
 80065d8:	d8a8      	bhi.n	800652c <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80065da:	220c      	movs	r2, #12
 80065dc:	68f3      	ldr	r3, [r6, #12]
 80065de:	4013      	ands	r3, r2
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d1f4      	bne.n	80065ce <HAL_RCC_ClockConfig+0x146>
 80065e4:	e762      	b.n	80064ac <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e6:	f7fe fd67 	bl	80050b8 <HAL_GetTick>
 80065ea:	4b0c      	ldr	r3, [pc, #48]	; (800661c <HAL_RCC_ClockConfig+0x194>)
 80065ec:	1bc0      	subs	r0, r0, r7
 80065ee:	4298      	cmp	r0, r3
 80065f0:	d800      	bhi.n	80065f4 <HAL_RCC_ClockConfig+0x16c>
 80065f2:	e767      	b.n	80064c4 <HAL_RCC_ClockConfig+0x3c>
 80065f4:	e79a      	b.n	800652c <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065f6:	68eb      	ldr	r3, [r5, #12]
 80065f8:	4909      	ldr	r1, [pc, #36]	; (8006620 <HAL_RCC_ClockConfig+0x198>)
 80065fa:	400b      	ands	r3, r1
 80065fc:	68e1      	ldr	r1, [r4, #12]
 80065fe:	430b      	orrs	r3, r1
 8006600:	60eb      	str	r3, [r5, #12]
 8006602:	e768      	b.n	80064d6 <HAL_RCC_ClockConfig+0x4e>
 8006604:	40022000 	.word	0x40022000
 8006608:	40021000 	.word	0x40021000
 800660c:	ffffc7ff 	.word	0xffffc7ff
 8006610:	0800af5f 	.word	0x0800af5f
 8006614:	20000018 	.word	0x20000018
 8006618:	20000020 	.word	0x20000020
 800661c:	00001388 	.word	0x00001388
 8006620:	fffff8ff 	.word	0xfffff8ff

08006624 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006624:	4b04      	ldr	r3, [pc, #16]	; (8006638 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006626:	4a05      	ldr	r2, [pc, #20]	; (800663c <HAL_RCC_GetPCLK1Freq+0x18>)
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	055b      	lsls	r3, r3, #21
 800662c:	0f5b      	lsrs	r3, r3, #29
 800662e:	5cd3      	ldrb	r3, [r2, r3]
 8006630:	4a03      	ldr	r2, [pc, #12]	; (8006640 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006632:	6810      	ldr	r0, [r2, #0]
 8006634:	40d8      	lsrs	r0, r3
}
 8006636:	4770      	bx	lr
 8006638:	40021000 	.word	0x40021000
 800663c:	0800af6f 	.word	0x0800af6f
 8006640:	20000018 	.word	0x20000018

08006644 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006644:	4b04      	ldr	r3, [pc, #16]	; (8006658 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006646:	4a05      	ldr	r2, [pc, #20]	; (800665c <HAL_RCC_GetPCLK2Freq+0x18>)
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	049b      	lsls	r3, r3, #18
 800664c:	0f5b      	lsrs	r3, r3, #29
 800664e:	5cd3      	ldrb	r3, [r2, r3]
 8006650:	4a03      	ldr	r2, [pc, #12]	; (8006660 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006652:	6810      	ldr	r0, [r2, #0]
 8006654:	40d8      	lsrs	r0, r3
}
 8006656:	4770      	bx	lr
 8006658:	40021000 	.word	0x40021000
 800665c:	0800af6f 	.word	0x0800af6f
 8006660:	20000018 	.word	0x20000018

08006664 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006664:	6803      	ldr	r3, [r0, #0]
{
 8006666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006668:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800666a:	069b      	lsls	r3, r3, #26
 800666c:	d53d      	bpl.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x86>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800666e:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8006670:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006672:	4c54      	ldr	r4, [pc, #336]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006674:	055b      	lsls	r3, r3, #21
 8006676:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8006678:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800667a:	421a      	tst	r2, r3
 800667c:	d104      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800667e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006680:	4313      	orrs	r3, r2
 8006682:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8006684:	2301      	movs	r3, #1
 8006686:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006688:	2780      	movs	r7, #128	; 0x80
 800668a:	4e4f      	ldr	r6, [pc, #316]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800668c:	007f      	lsls	r7, r7, #1
 800668e:	6833      	ldr	r3, [r6, #0]
 8006690:	423b      	tst	r3, r7
 8006692:	d05a      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006694:	686b      	ldr	r3, [r5, #4]
 8006696:	22c0      	movs	r2, #192	; 0xc0
 8006698:	20c0      	movs	r0, #192	; 0xc0
 800669a:	001e      	movs	r6, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800669c:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800669e:	0292      	lsls	r2, r2, #10
 80066a0:	0380      	lsls	r0, r0, #14
 80066a2:	0017      	movs	r7, r2
 80066a4:	4016      	ands	r6, r2
 80066a6:	4003      	ands	r3, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80066a8:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80066aa:	428b      	cmp	r3, r1
 80066ac:	d15e      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x108>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80066ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80066b0:	001a      	movs	r2, r3
 80066b2:	403a      	ands	r2, r7

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80066b4:	423b      	tst	r3, r7
 80066b6:	d160      	bne.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x116>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066b8:	6869      	ldr	r1, [r5, #4]
 80066ba:	23c0      	movs	r3, #192	; 0xc0
 80066bc:	000a      	movs	r2, r1
 80066be:	029b      	lsls	r3, r3, #10
 80066c0:	401a      	ands	r2, r3
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d107      	bne.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	4840      	ldr	r0, [pc, #256]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066ca:	4003      	ands	r3, r0
 80066cc:	20c0      	movs	r0, #192	; 0xc0
 80066ce:	0380      	lsls	r0, r0, #14
 80066d0:	4001      	ands	r1, r0
 80066d2:	430b      	orrs	r3, r1
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80066d8:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80066da:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066dc:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d103      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066e4:	4a3a      	ldr	r2, [pc, #232]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066ea:	682b      	ldr	r3, [r5, #0]
 80066ec:	07da      	lsls	r2, r3, #31
 80066ee:	d506      	bpl.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066f0:	2003      	movs	r0, #3
 80066f2:	4934      	ldr	r1, [pc, #208]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80066f6:	4382      	bics	r2, r0
 80066f8:	68a8      	ldr	r0, [r5, #8]
 80066fa:	4302      	orrs	r2, r0
 80066fc:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066fe:	079a      	lsls	r2, r3, #30
 8006700:	d506      	bpl.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006702:	200c      	movs	r0, #12
 8006704:	492f      	ldr	r1, [pc, #188]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006706:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006708:	4382      	bics	r2, r0
 800670a:	68e8      	ldr	r0, [r5, #12]
 800670c:	4302      	orrs	r2, r0
 800670e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006710:	075a      	lsls	r2, r3, #29
 8006712:	d506      	bpl.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006714:	492b      	ldr	r1, [pc, #172]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006716:	482f      	ldr	r0, [pc, #188]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8006718:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800671a:	4002      	ands	r2, r0
 800671c:	6928      	ldr	r0, [r5, #16]
 800671e:	4302      	orrs	r2, r0
 8006720:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006722:	071a      	lsls	r2, r3, #28
 8006724:	d506      	bpl.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006726:	4927      	ldr	r1, [pc, #156]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006728:	482b      	ldr	r0, [pc, #172]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800672a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800672c:	4002      	ands	r2, r0
 800672e:	6968      	ldr	r0, [r5, #20]
 8006730:	4302      	orrs	r2, r0
 8006732:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8006734:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006736:	061b      	lsls	r3, r3, #24
 8006738:	d517      	bpl.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800673a:	4a22      	ldr	r2, [pc, #136]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800673c:	4927      	ldr	r1, [pc, #156]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800673e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006740:	400b      	ands	r3, r1
 8006742:	69a9      	ldr	r1, [r5, #24]
 8006744:	430b      	orrs	r3, r1
 8006746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006748:	e00f      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x106>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800674a:	6833      	ldr	r3, [r6, #0]
 800674c:	433b      	orrs	r3, r7
 800674e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006750:	f7fe fcb2 	bl	80050b8 <HAL_GetTick>
 8006754:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006756:	6833      	ldr	r3, [r6, #0]
 8006758:	423b      	tst	r3, r7
 800675a:	d19b      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800675c:	f7fe fcac 	bl	80050b8 <HAL_GetTick>
 8006760:	9b01      	ldr	r3, [sp, #4]
 8006762:	1ac0      	subs	r0, r0, r3
 8006764:	2864      	cmp	r0, #100	; 0x64
 8006766:	d9f6      	bls.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          return HAL_TIMEOUT;
 8006768:	2003      	movs	r0, #3
}
 800676a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800676c:	4296      	cmp	r6, r2
 800676e:	d19e      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006770:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8006772:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006774:	039b      	lsls	r3, r3, #14
 8006776:	d59a      	bpl.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006778:	e7f7      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x106>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800677a:	42b2      	cmp	r2, r6
 800677c:	d09c      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800677e:	682b      	ldr	r3, [r5, #0]
 8006780:	069b      	lsls	r3, r3, #26
 8006782:	d599      	bpl.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8006784:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006786:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8006788:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800678a:	0312      	lsls	r2, r2, #12
 800678c:	4302      	orrs	r2, r0
 800678e:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006790:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006792:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006794:	4813      	ldr	r0, [pc, #76]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006796:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006798:	4002      	ands	r2, r0
 800679a:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800679c:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800679e:	05cb      	lsls	r3, r1, #23
 80067a0:	d400      	bmi.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80067a2:	e789      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 80067a4:	f7fe fc88 	bl	80050b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067a8:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80067aa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067ac:	00bf      	lsls	r7, r7, #2
 80067ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80067b0:	423b      	tst	r3, r7
 80067b2:	d000      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80067b4:	e780      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067b6:	f7fe fc7f 	bl	80050b8 <HAL_GetTick>
 80067ba:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80067bc:	1b80      	subs	r0, r0, r6
 80067be:	4298      	cmp	r0, r3
 80067c0:	d9f5      	bls.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80067c2:	e7d1      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80067c4:	40021000 	.word	0x40021000
 80067c8:	40007000 	.word	0x40007000
 80067cc:	ffcfffff 	.word	0xffcfffff
 80067d0:	efffffff 	.word	0xefffffff
 80067d4:	fffff3ff 	.word	0xfffff3ff
 80067d8:	ffffcfff 	.word	0xffffcfff
 80067dc:	fff3ffff 	.word	0xfff3ffff
 80067e0:	fffcffff 	.word	0xfffcffff
 80067e4:	fff7ffff 	.word	0xfff7ffff
 80067e8:	00001388 	.word	0x00001388

080067ec <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80067ec:	21a0      	movs	r1, #160	; 0xa0
 80067ee:	6802      	ldr	r2, [r0, #0]
{
 80067f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80067f2:	68d3      	ldr	r3, [r2, #12]
{
 80067f4:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80067f6:	438b      	bics	r3, r1
 80067f8:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80067fa:	f7fe fc5d 	bl	80050b8 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067fe:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8006800:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006802:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006804:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	4233      	tst	r3, r6
 800680c:	d001      	beq.n	8006812 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800680e:	2000      	movs	r0, #0
}
 8006810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006812:	f7fe fc51 	bl	80050b8 <HAL_GetTick>
 8006816:	1b40      	subs	r0, r0, r5
 8006818:	42b8      	cmp	r0, r7
 800681a:	d9f4      	bls.n	8006806 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 800681c:	2003      	movs	r0, #3
 800681e:	e7f7      	b.n	8006810 <HAL_RTC_WaitForSynchro+0x24>

08006820 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006822:	2440      	movs	r4, #64	; 0x40
 8006824:	6803      	ldr	r3, [r0, #0]
{
 8006826:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	4222      	tst	r2, r4
 800682c:	d001      	beq.n	8006832 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800682e:	2000      	movs	r0, #0
}
 8006830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006832:	2201      	movs	r2, #1
 8006834:	4252      	negs	r2, r2
 8006836:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8006838:	f7fe fc3e 	bl	80050b8 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800683c:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 800683e:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006840:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006842:	682b      	ldr	r3, [r5, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	4223      	tst	r3, r4
 8006848:	d1f1      	bne.n	800682e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800684a:	f7fe fc35 	bl	80050b8 <HAL_GetTick>
 800684e:	1b80      	subs	r0, r0, r6
 8006850:	42b8      	cmp	r0, r7
 8006852:	d9f6      	bls.n	8006842 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8006854:	2003      	movs	r0, #3
 8006856:	e7eb      	b.n	8006830 <RTC_EnterInitMode+0x10>

08006858 <HAL_RTC_Init>:
{
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800685c:	2501      	movs	r5, #1
  if (hrtc == NULL)
 800685e:	2800      	cmp	r0, #0
 8006860:	d01a      	beq.n	8006898 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006862:	1c86      	adds	r6, r0, #2
 8006864:	7ff3      	ldrb	r3, [r6, #31]
 8006866:	b2da      	uxtb	r2, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d103      	bne.n	8006874 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 800686c:	1943      	adds	r3, r0, r5
 800686e:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8006870:	f7fd feb0 	bl	80045d4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006874:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006876:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006878:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800687a:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800687c:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800687e:	625a      	str	r2, [r3, #36]	; 0x24
 8006880:	3a77      	subs	r2, #119	; 0x77
 8006882:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006884:	f7ff ffcc 	bl	8006820 <RTC_EnterInitMode>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	1e05      	subs	r5, r0, #0
 800688c:	d006      	beq.n	800689c <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800688e:	22ff      	movs	r2, #255	; 0xff
 8006890:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006892:	2304      	movs	r3, #4
 8006894:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8006896:	2501      	movs	r5, #1
}
 8006898:	0028      	movs	r0, r5
 800689a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	491b      	ldr	r1, [pc, #108]	; (800690c <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068a0:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80068a2:	400a      	ands	r2, r1
 80068a4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068a6:	6862      	ldr	r2, [r4, #4]
 80068a8:	6899      	ldr	r1, [r3, #8]
 80068aa:	4302      	orrs	r2, r0
 80068ac:	69a0      	ldr	r0, [r4, #24]
 80068ae:	4302      	orrs	r2, r0
 80068b0:	430a      	orrs	r2, r1
 80068b2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068b4:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80068b6:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068b8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80068ba:	68a2      	ldr	r2, [r4, #8]
 80068bc:	6919      	ldr	r1, [r3, #16]
 80068be:	0412      	lsls	r2, r2, #16
 80068c0:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80068c2:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80068c4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	438a      	bics	r2, r1
 80068ca:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80068cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068ce:	397d      	subs	r1, #125	; 0x7d
 80068d0:	438a      	bics	r2, r1
 80068d2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80068d4:	69e2      	ldr	r2, [r4, #28]
 80068d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80068d8:	4302      	orrs	r2, r0
 80068da:	430a      	orrs	r2, r1
 80068dc:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	069b      	lsls	r3, r3, #26
 80068e2:	d40c      	bmi.n	80068fe <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80068e4:	0020      	movs	r0, r4
 80068e6:	f7ff ff81 	bl	80067ec <HAL_RTC_WaitForSynchro>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d007      	beq.n	80068fe <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ee:	22ff      	movs	r2, #255	; 0xff
 80068f0:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 80068f2:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068f4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80068f6:	2304      	movs	r3, #4
 80068f8:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80068fa:	77e5      	strb	r5, [r4, #31]
 80068fc:	e7cb      	b.n	8006896 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068fe:	22ff      	movs	r2, #255	; 0xff
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8006904:	2301      	movs	r3, #1
 8006906:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8006908:	e7c6      	b.n	8006898 <HAL_RTC_Init+0x40>
 800690a:	46c0      	nop			; (mov r8, r8)
 800690c:	ff8fffbf 	.word	0xff8fffbf

08006910 <HAL_RTCEx_SetWakeUpTimer_IT>:
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006910:	2302      	movs	r3, #2
{
 8006912:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006914:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8006916:	1c46      	adds	r6, r0, #1
{
 8006918:	9101      	str	r1, [sp, #4]
 800691a:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(hrtc);
 800691c:	7ff2      	ldrb	r2, [r6, #31]
{
 800691e:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8006920:	0018      	movs	r0, r3
 8006922:	2a01      	cmp	r2, #1
 8006924:	d05a      	beq.n	80069dc <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
 8006926:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006928:	18e7      	adds	r7, r4, r3
  __HAL_LOCK(hrtc);
 800692a:	77f2      	strb	r2, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800692c:	77fb      	strb	r3, [r7, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	32c9      	adds	r2, #201	; 0xc9
 8006932:	625a      	str	r2, [r3, #36]	; 0x24
 8006934:	3a77      	subs	r2, #119	; 0x77
 8006936:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	055b      	lsls	r3, r3, #21
 800693c:	d438      	bmi.n	80069b0 <HAL_RTCEx_SetWakeUpTimer_IT+0xa0>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	492f      	ldr	r1, [pc, #188]	; (8006a00 <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 8006942:	689a      	ldr	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);

  tickstart = HAL_GetTick();

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006944:	2504      	movs	r5, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006946:	400a      	ands	r2, r1
 8006948:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800694a:	68d9      	ldr	r1, [r3, #12]
 800694c:	4a2d      	ldr	r2, [pc, #180]	; (8006a04 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 800694e:	b2c9      	uxtb	r1, r1
 8006950:	430a      	orrs	r2, r1
 8006952:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 8006954:	f7fe fbb0 	bl	80050b8 <HAL_GetTick>
 8006958:	9000      	str	r0, [sp, #0]
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	0011      	movs	r1, r2
 8006960:	4029      	ands	r1, r5
 8006962:	9103      	str	r1, [sp, #12]
 8006964:	422a      	tst	r2, r5
 8006966:	d03b      	beq.n	80069e0 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006968:	2107      	movs	r1, #7
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800696a:	9a01      	ldr	r2, [sp, #4]
 800696c:	615a      	str	r2, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	438a      	bics	r2, r1
 8006972:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	9902      	ldr	r1, [sp, #8]
 8006978:	430a      	orrs	r2, r1

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800697a:	2180      	movs	r1, #128	; 0x80
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800697c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800697e:	4a22      	ldr	r2, [pc, #136]	; (8006a08 <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8006980:	0349      	lsls	r1, r1, #13
 8006982:	6810      	ldr	r0, [r2, #0]
 8006984:	4308      	orrs	r0, r1
 8006986:	6010      	str	r0, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006988:	6890      	ldr	r0, [r2, #8]
 800698a:	4301      	orrs	r1, r0
 800698c:	6091      	str	r1, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800698e:	2280      	movs	r2, #128	; 0x80
 8006990:	6899      	ldr	r1, [r3, #8]
 8006992:	01d2      	lsls	r2, r2, #7
 8006994:	430a      	orrs	r2, r1
 8006996:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006998:	2280      	movs	r2, #128	; 0x80
 800699a:	6899      	ldr	r1, [r3, #8]
 800699c:	00d2      	lsls	r2, r2, #3
 800699e:	430a      	orrs	r2, r1
 80069a0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069a2:	22ff      	movs	r2, #255	; 0xff

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069a4:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069a6:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80069a8:	2301      	movs	r3, #1
 80069aa:	77fb      	strb	r3, [r7, #31]
  __HAL_UNLOCK(hrtc);
 80069ac:	77f0      	strb	r0, [r6, #31]

  return HAL_OK;
 80069ae:	e015      	b.n	80069dc <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
    tickstart = HAL_GetTick();
 80069b0:	f7fe fb82 	bl	80050b8 <HAL_GetTick>
 80069b4:	0005      	movs	r5, r0
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80069b6:	2204      	movs	r2, #4
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	4213      	tst	r3, r2
 80069be:	d0be      	beq.n	800693e <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069c0:	f7fe fb7a 	bl	80050b8 <HAL_GetTick>
 80069c4:	23fa      	movs	r3, #250	; 0xfa
 80069c6:	1b40      	subs	r0, r0, r5
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4298      	cmp	r0, r3
 80069cc:	d9f3      	bls.n	80069b6 <HAL_RTCEx_SetWakeUpTimer_IT+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069ce:	22ff      	movs	r2, #255	; 0xff
 80069d0:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069d2:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069d4:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 80069d6:	2300      	movs	r3, #0
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069d8:	77f8      	strb	r0, [r7, #31]
      __HAL_UNLOCK(hrtc);
 80069da:	77f3      	strb	r3, [r6, #31]
}
 80069dc:	b005      	add	sp, #20
 80069de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069e0:	f7fe fb6a 	bl	80050b8 <HAL_GetTick>
 80069e4:	9b00      	ldr	r3, [sp, #0]
 80069e6:	1ac0      	subs	r0, r0, r3
 80069e8:	23fa      	movs	r3, #250	; 0xfa
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4298      	cmp	r0, r3
 80069ee:	d9b4      	bls.n	800695a <HAL_RTCEx_SetWakeUpTimer_IT+0x4a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069f0:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069f2:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_UNLOCK(hrtc);
 80069f8:	9b03      	ldr	r3, [sp, #12]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069fa:	77f8      	strb	r0, [r7, #31]
      __HAL_UNLOCK(hrtc);
 80069fc:	e7ed      	b.n	80069da <HAL_RTCEx_SetWakeUpTimer_IT+0xca>
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	fffffbff 	.word	0xfffffbff
 8006a04:	fffffb7f 	.word	0xfffffb7f
 8006a08:	40010400 	.word	0x40010400

08006a0c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006a0c:	6803      	ldr	r3, [r0, #0]
{
 8006a0e:	b510      	push	{r4, lr}
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006a10:	68db      	ldr	r3, [r3, #12]
{
 8006a12:	0004      	movs	r4, r0
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006a14:	055b      	lsls	r3, r3, #21
 8006a16:	d507      	bpl.n	8006a28 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006a18:	f7fc fdc0 	bl	800359c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006a1c:	6821      	ldr	r1, [r4, #0]
 8006a1e:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8006a20:	68ca      	ldr	r2, [r1, #12]
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60cb      	str	r3, [r1, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006a28:	2280      	movs	r2, #128	; 0x80
 8006a2a:	4b04      	ldr	r3, [pc, #16]	; (8006a3c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8006a2c:	0352      	lsls	r2, r2, #13
 8006a2e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a30:	2301      	movs	r3, #1
 8006a32:	3402      	adds	r4, #2
 8006a34:	77e3      	strb	r3, [r4, #31]
}
 8006a36:	bd10      	pop	{r4, pc}
 8006a38:	fffffb7f 	.word	0xfffffb7f
 8006a3c:	40010400 	.word	0x40010400

08006a40 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a42:	001d      	movs	r5, r3
 8006a44:	0017      	movs	r7, r2
 8006a46:	b085      	sub	sp, #20
 8006a48:	000e      	movs	r6, r1
 8006a4a:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a4c:	f7fe fb34 	bl	80050b8 <HAL_GetTick>
 8006a50:	19ed      	adds	r5, r5, r7
 8006a52:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8006a54:	f7fe fb30 	bl	80050b8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a58:	4b25      	ldr	r3, [pc, #148]	; (8006af0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8006a5a:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	015b      	lsls	r3, r3, #5
 8006a60:	0d1b      	lsrs	r3, r3, #20
 8006a62:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a64:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8006a66:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a68:	6893      	ldr	r3, [r2, #8]
 8006a6a:	4033      	ands	r3, r6
 8006a6c:	429e      	cmp	r6, r3
 8006a6e:	d001      	beq.n	8006a74 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8006a70:	2000      	movs	r0, #0
 8006a72:	e032      	b.n	8006ada <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 8006a74:	1c7b      	adds	r3, r7, #1
 8006a76:	d0f7      	beq.n	8006a68 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a78:	f7fe fb1e 	bl	80050b8 <HAL_GetTick>
 8006a7c:	9b01      	ldr	r3, [sp, #4]
 8006a7e:	1ac0      	subs	r0, r0, r3
 8006a80:	42a8      	cmp	r0, r5
 8006a82:	d32c      	bcc.n	8006ade <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a84:	21e0      	movs	r1, #224	; 0xe0
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	438a      	bics	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a8e:	2282      	movs	r2, #130	; 0x82
 8006a90:	6861      	ldr	r1, [r4, #4]
 8006a92:	0052      	lsls	r2, r2, #1
 8006a94:	4291      	cmp	r1, r2
 8006a96:	d10c      	bne.n	8006ab2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8006a98:	2180      	movs	r1, #128	; 0x80
 8006a9a:	68a2      	ldr	r2, [r4, #8]
 8006a9c:	0209      	lsls	r1, r1, #8
 8006a9e:	428a      	cmp	r2, r1
 8006aa0:	d003      	beq.n	8006aaa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aa2:	2180      	movs	r1, #128	; 0x80
 8006aa4:	00c9      	lsls	r1, r1, #3
 8006aa6:	428a      	cmp	r2, r1
 8006aa8:	d103      	bne.n	8006ab2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8006aaa:	2140      	movs	r1, #64	; 0x40
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	438a      	bics	r2, r1
 8006ab0:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ab2:	2180      	movs	r1, #128	; 0x80
 8006ab4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006ab6:	0189      	lsls	r1, r1, #6
 8006ab8:	428a      	cmp	r2, r1
 8006aba:	d106      	bne.n	8006aca <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8006abc:	6819      	ldr	r1, [r3, #0]
 8006abe:	480d      	ldr	r0, [pc, #52]	; (8006af4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8006ac0:	4001      	ands	r1, r0
 8006ac2:	6019      	str	r1, [r3, #0]
 8006ac4:	6819      	ldr	r1, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006aca:	0023      	movs	r3, r4
 8006acc:	2201      	movs	r2, #1
 8006ace:	3351      	adds	r3, #81	; 0x51
 8006ad0:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	2003      	movs	r0, #3
 8006ad6:	3450      	adds	r4, #80	; 0x50
 8006ad8:	7023      	strb	r3, [r4, #0]
}
 8006ada:	b005      	add	sp, #20
 8006adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8006ade:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8006ae0:	1e5a      	subs	r2, r3, #1
 8006ae2:	4193      	sbcs	r3, r2
 8006ae4:	425b      	negs	r3, r3
 8006ae6:	401d      	ands	r5, r3
      count--;
 8006ae8:	9b03      	ldr	r3, [sp, #12]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	e7ba      	b.n	8006a64 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8006aee:	46c0      	nop			; (mov r8, r8)
 8006af0:	20000018 	.word	0x20000018
 8006af4:	ffffdfff 	.word	0xffffdfff

08006af8 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006af8:	4b16      	ldr	r3, [pc, #88]	; (8006b54 <SPI_EndRxTxTransaction+0x5c>)
{
 8006afa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006afc:	0004      	movs	r4, r0
 8006afe:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	4915      	ldr	r1, [pc, #84]	; (8006b58 <SPI_EndRxTxTransaction+0x60>)
{
 8006b04:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b06:	f7f9 fb1b 	bl	8000140 <__udivsi3>
 8006b0a:	23fa      	movs	r3, #250	; 0xfa
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4343      	muls	r3, r0
 8006b10:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b12:	2382      	movs	r3, #130	; 0x82
 8006b14:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b16:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	4299      	cmp	r1, r3
 8006b1c:	d10d      	bne.n	8006b3a <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b1e:	0033      	movs	r3, r6
 8006b20:	002a      	movs	r2, r5
 8006b22:	2180      	movs	r1, #128	; 0x80
 8006b24:	0020      	movs	r0, r4
 8006b26:	f7ff ff8b 	bl	8006a40 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d00f      	beq.n	8006b4e <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b2e:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8006b30:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b32:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006b34:	4313      	orrs	r3, r2
 8006b36:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8006b38:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8006b3a:	9b01      	ldr	r3, [sp, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d006      	beq.n	8006b4e <SPI_EndRxTxTransaction+0x56>
      count--;
 8006b40:	9b01      	ldr	r3, [sp, #4]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	4213      	tst	r3, r2
 8006b4c:	d1f5      	bne.n	8006b3a <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8006b4e:	2000      	movs	r0, #0
 8006b50:	e7f2      	b.n	8006b38 <SPI_EndRxTxTransaction+0x40>
 8006b52:	46c0      	nop			; (mov r8, r8)
 8006b54:	20000018 	.word	0x20000018
 8006b58:	016e3600 	.word	0x016e3600

08006b5c <HAL_SPI_Init>:
{
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8006b60:	2001      	movs	r0, #1
  if (hspi == NULL)
 8006b62:	2c00      	cmp	r4, #0
 8006b64:	d054      	beq.n	8006c10 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d152      	bne.n	8006c12 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b6c:	2282      	movs	r2, #130	; 0x82
 8006b6e:	6861      	ldr	r1, [r4, #4]
 8006b70:	0052      	lsls	r2, r2, #1
 8006b72:	4291      	cmp	r1, r2
 8006b74:	d000      	beq.n	8006b78 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b76:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b78:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b7a:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b7c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b7e:	3551      	adds	r5, #81	; 0x51
 8006b80:	782b      	ldrb	r3, [r5, #0]
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d105      	bne.n	8006b94 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8006b88:	0023      	movs	r3, r4
 8006b8a:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8006b8c:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006b8e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8006b90:	f7fd fd38 	bl	8004604 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006b94:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8006b96:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8006b98:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8006b9a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b9c:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8006b9e:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ba0:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8006ba2:	4393      	bics	r3, r2
 8006ba4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ba6:	2382      	movs	r3, #130	; 0x82
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	4033      	ands	r3, r6
 8006bac:	2684      	movs	r6, #132	; 0x84
 8006bae:	0236      	lsls	r6, r6, #8
 8006bb0:	403e      	ands	r6, r7
 8006bb2:	4333      	orrs	r3, r6
 8006bb4:	2680      	movs	r6, #128	; 0x80
 8006bb6:	68e7      	ldr	r7, [r4, #12]
 8006bb8:	0136      	lsls	r6, r6, #4
 8006bba:	403e      	ands	r6, r7
 8006bbc:	4333      	orrs	r3, r6
 8006bbe:	6926      	ldr	r6, [r4, #16]
 8006bc0:	69a2      	ldr	r2, [r4, #24]
 8006bc2:	4030      	ands	r0, r6
 8006bc4:	2601      	movs	r6, #1
 8006bc6:	4303      	orrs	r3, r0
 8006bc8:	6960      	ldr	r0, [r4, #20]
 8006bca:	69e7      	ldr	r7, [r4, #28]
 8006bcc:	4030      	ands	r0, r6
 8006bce:	4303      	orrs	r3, r0
 8006bd0:	2080      	movs	r0, #128	; 0x80
 8006bd2:	0080      	lsls	r0, r0, #2
 8006bd4:	4010      	ands	r0, r2
 8006bd6:	4303      	orrs	r3, r0
 8006bd8:	2038      	movs	r0, #56	; 0x38
 8006bda:	4038      	ands	r0, r7
 8006bdc:	4303      	orrs	r3, r0
 8006bde:	2080      	movs	r0, #128	; 0x80
 8006be0:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006be2:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006be4:	4038      	ands	r0, r7
 8006be6:	4303      	orrs	r3, r0
 8006be8:	2080      	movs	r0, #128	; 0x80
 8006bea:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006bec:	0180      	lsls	r0, r0, #6
 8006bee:	4038      	ands	r0, r7
 8006bf0:	4303      	orrs	r3, r0
 8006bf2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006bf8:	401a      	ands	r2, r3
 8006bfa:	330c      	adds	r3, #12
 8006bfc:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bfe:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c00:	431a      	orrs	r2, r3
 8006c02:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c04:	69cb      	ldr	r3, [r1, #28]
 8006c06:	4a05      	ldr	r2, [pc, #20]	; (8006c1c <HAL_SPI_Init+0xc0>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c0c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c0e:	702e      	strb	r6, [r5, #0]
}
 8006c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c12:	2300      	movs	r3, #0
 8006c14:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c16:	6163      	str	r3, [r4, #20]
 8006c18:	e7ae      	b.n	8006b78 <HAL_SPI_Init+0x1c>
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	fffff7ff 	.word	0xfffff7ff

08006c20 <HAL_SPI_Transmit>:
{
 8006c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c22:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8006c24:	0003      	movs	r3, r0
{
 8006c26:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8006c28:	3350      	adds	r3, #80	; 0x50
 8006c2a:	9301      	str	r3, [sp, #4]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
{
 8006c2e:	0004      	movs	r4, r0
 8006c30:	000d      	movs	r5, r1
 8006c32:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8006c34:	2002      	movs	r0, #2
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d100      	bne.n	8006c3c <HAL_SPI_Transmit+0x1c>
 8006c3a:	e07b      	b.n	8006d34 <HAL_SPI_Transmit+0x114>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	9a01      	ldr	r2, [sp, #4]
 8006c40:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8006c42:	f7fe fa39 	bl	80050b8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006c46:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8006c48:	9000      	str	r0, [sp, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8006c4a:	3351      	adds	r3, #81	; 0x51
 8006c4c:	781a      	ldrb	r2, [r3, #0]
 8006c4e:	b2d0      	uxtb	r0, r2
 8006c50:	2a01      	cmp	r2, #1
 8006c52:	d000      	beq.n	8006c56 <HAL_SPI_Transmit+0x36>
 8006c54:	e09d      	b.n	8006d92 <HAL_SPI_Transmit+0x172>
  if ((pData == NULL) || (Size == 0U))
 8006c56:	2d00      	cmp	r5, #0
 8006c58:	d066      	beq.n	8006d28 <HAL_SPI_Transmit+0x108>
 8006c5a:	2f00      	cmp	r7, #0
 8006c5c:	d064      	beq.n	8006d28 <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c5e:	3202      	adds	r2, #2
 8006c60:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c62:	2300      	movs	r3, #0
 8006c64:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c66:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006c68:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8006c6a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c6c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c6e:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c70:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c72:	2380      	movs	r3, #128	; 0x80
 8006c74:	68a1      	ldr	r1, [r4, #8]
 8006c76:	6822      	ldr	r2, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c78:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c7a:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c7c:	021b      	lsls	r3, r3, #8
 8006c7e:	4299      	cmp	r1, r3
 8006c80:	d108      	bne.n	8006c94 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 8006c82:	2140      	movs	r1, #64	; 0x40
 8006c84:	6813      	ldr	r3, [r2, #0]
 8006c86:	438b      	bics	r3, r1
 8006c88:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8006c8a:	2380      	movs	r3, #128	; 0x80
 8006c8c:	6811      	ldr	r1, [r2, #0]
 8006c8e:	01db      	lsls	r3, r3, #7
 8006c90:	430b      	orrs	r3, r1
 8006c92:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c94:	2340      	movs	r3, #64	; 0x40
 8006c96:	6811      	ldr	r1, [r2, #0]
 8006c98:	4219      	tst	r1, r3
 8006c9a:	d102      	bne.n	8006ca2 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 8006c9c:	6811      	ldr	r1, [r2, #0]
 8006c9e:	430b      	orrs	r3, r1
 8006ca0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ca2:	2180      	movs	r1, #128	; 0x80
 8006ca4:	68e0      	ldr	r0, [r4, #12]
 8006ca6:	6863      	ldr	r3, [r4, #4]
 8006ca8:	0109      	lsls	r1, r1, #4
 8006caa:	4288      	cmp	r0, r1
 8006cac:	d144      	bne.n	8006d38 <HAL_SPI_Transmit+0x118>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_SPI_Transmit+0x96>
 8006cb2:	2f01      	cmp	r7, #1
 8006cb4:	d107      	bne.n	8006cc6 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cb6:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cb8:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cba:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8006cbc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cbe:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cc6:	2502      	movs	r5, #2
 8006cc8:	e00c      	b.n	8006ce4 <HAL_SPI_Transmit+0xc4>
 8006cca:	6822      	ldr	r2, [r4, #0]
 8006ccc:	6893      	ldr	r3, [r2, #8]
 8006cce:	422b      	tst	r3, r5
 8006cd0:	d021      	beq.n	8006d16 <HAL_SPI_Transmit+0xf6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006cd4:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cd6:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cd8:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cda:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006cdc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006ce4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1ef      	bne.n	8006cca <HAL_SPI_Transmit+0xaa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cea:	0031      	movs	r1, r6
 8006cec:	0020      	movs	r0, r4
 8006cee:	9a00      	ldr	r2, [sp, #0]
 8006cf0:	f7ff ff02 	bl	8006af8 <SPI_EndRxTxTransaction>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d149      	bne.n	8006d8c <HAL_SPI_Transmit+0x16c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cf8:	68a3      	ldr	r3, [r4, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <HAL_SPI_Transmit+0xec>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cfe:	9303      	str	r3, [sp, #12]
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	68da      	ldr	r2, [r3, #12]
 8006d04:	9203      	str	r2, [sp, #12]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	9303      	str	r3, [sp, #12]
 8006d0a:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d0e:	1e43      	subs	r3, r0, #1
 8006d10:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 8006d12:	b2c0      	uxtb	r0, r0
error:
 8006d14:	e008      	b.n	8006d28 <HAL_SPI_Transmit+0x108>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d16:	f7fe f9cf 	bl	80050b8 <HAL_GetTick>
 8006d1a:	9b00      	ldr	r3, [sp, #0]
 8006d1c:	1ac0      	subs	r0, r0, r3
 8006d1e:	42b0      	cmp	r0, r6
 8006d20:	d3e0      	bcc.n	8006ce4 <HAL_SPI_Transmit+0xc4>
 8006d22:	1c73      	adds	r3, r6, #1
 8006d24:	d0de      	beq.n	8006ce4 <HAL_SPI_Transmit+0xc4>
          errorcode = HAL_TIMEOUT;
 8006d26:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	3451      	adds	r4, #81	; 0x51
 8006d2c:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9a01      	ldr	r2, [sp, #4]
 8006d32:	7013      	strb	r3, [r2, #0]
}
 8006d34:	b005      	add	sp, #20
 8006d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <HAL_SPI_Transmit+0x120>
 8006d3c:	2f01      	cmp	r7, #1
 8006d3e:	d108      	bne.n	8006d52 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d40:	782b      	ldrb	r3, [r5, #0]
 8006d42:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006d46:	3301      	adds	r3, #1
 8006d48:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006d4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d52:	2502      	movs	r5, #2
 8006d54:	e00d      	b.n	8006d72 <HAL_SPI_Transmit+0x152>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	689a      	ldr	r2, [r3, #8]
 8006d5a:	422a      	tst	r2, r5
 8006d5c:	d00d      	beq.n	8006d7a <HAL_SPI_Transmit+0x15a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006d60:	7812      	ldrb	r2, [r2, #0]
 8006d62:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006d66:	3301      	adds	r3, #1
 8006d68:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006d6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006d72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1ee      	bne.n	8006d56 <HAL_SPI_Transmit+0x136>
 8006d78:	e7b7      	b.n	8006cea <HAL_SPI_Transmit+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d7a:	f7fe f99d 	bl	80050b8 <HAL_GetTick>
 8006d7e:	9b00      	ldr	r3, [sp, #0]
 8006d80:	1ac0      	subs	r0, r0, r3
 8006d82:	42b0      	cmp	r0, r6
 8006d84:	d3f5      	bcc.n	8006d72 <HAL_SPI_Transmit+0x152>
 8006d86:	1c73      	adds	r3, r6, #1
 8006d88:	d0f3      	beq.n	8006d72 <HAL_SPI_Transmit+0x152>
 8006d8a:	e7cc      	b.n	8006d26 <HAL_SPI_Transmit+0x106>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d8c:	2320      	movs	r3, #32
 8006d8e:	6563      	str	r3, [r4, #84]	; 0x54
 8006d90:	e7b2      	b.n	8006cf8 <HAL_SPI_Transmit+0xd8>
    errorcode = HAL_BUSY;
 8006d92:	2002      	movs	r0, #2
 8006d94:	e7c8      	b.n	8006d28 <HAL_SPI_Transmit+0x108>

08006d96 <HAL_SPI_TransmitReceive>:
{
 8006d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d98:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8006d9a:	0003      	movs	r3, r0
 8006d9c:	3350      	adds	r3, #80	; 0x50
{
 8006d9e:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8006da0:	781a      	ldrb	r2, [r3, #0]
{
 8006da2:	0004      	movs	r4, r0
 8006da4:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8006da6:	2002      	movs	r0, #2
{
 8006da8:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8006daa:	2a01      	cmp	r2, #1
 8006dac:	d100      	bne.n	8006db0 <HAL_SPI_TransmitReceive+0x1a>
 8006dae:	e092      	b.n	8006ed6 <HAL_SPI_TransmitReceive+0x140>
 8006db0:	2201      	movs	r2, #1
 8006db2:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8006db4:	f7fe f980 	bl	80050b8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006db8:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8006dba:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8006dbc:	3351      	adds	r3, #81	; 0x51
 8006dbe:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006dc0:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8006dc2:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d00a      	beq.n	8006dde <HAL_SPI_TransmitReceive+0x48>
 8006dc8:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8006dca:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	4299      	cmp	r1, r3
 8006dd0:	d000      	beq.n	8006dd4 <HAL_SPI_TransmitReceive+0x3e>
 8006dd2:	e079      	b.n	8006ec8 <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006dd4:	68a3      	ldr	r3, [r4, #8]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d176      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x132>
 8006dda:	2a04      	cmp	r2, #4
 8006ddc:	d174      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 8006dde:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006de0:	2d00      	cmp	r5, #0
 8006de2:	d071      	beq.n	8006ec8 <HAL_SPI_TransmitReceive+0x132>
 8006de4:	2f00      	cmp	r7, #0
 8006de6:	d06f      	beq.n	8006ec8 <HAL_SPI_TransmitReceive+0x132>
 8006de8:	2e00      	cmp	r6, #0
 8006dea:	d06d      	beq.n	8006ec8 <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006dec:	0023      	movs	r3, r4
 8006dee:	3351      	adds	r3, #81	; 0x51
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	2a04      	cmp	r2, #4
 8006df4:	d001      	beq.n	8006dfa <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006df6:	2205      	movs	r2, #5
 8006df8:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dfa:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dfc:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dfe:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8006e00:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006e02:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e04:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8006e06:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8006e08:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e0a:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e0c:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006e0e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e10:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006e12:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e14:	4210      	tst	r0, r2
 8006e16:	d102      	bne.n	8006e1e <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 8006e18:	6818      	ldr	r0, [r3, #0]
 8006e1a:	4302      	orrs	r2, r0
 8006e1c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e1e:	2280      	movs	r2, #128	; 0x80
 8006e20:	68e0      	ldr	r0, [r4, #12]
 8006e22:	0112      	lsls	r2, r2, #4
 8006e24:	4290      	cmp	r0, r2
 8006e26:	d158      	bne.n	8006eda <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e28:	2900      	cmp	r1, #0
 8006e2a:	d001      	beq.n	8006e30 <HAL_SPI_TransmitReceive+0x9a>
 8006e2c:	2e01      	cmp	r6, #1
 8006e2e:	d107      	bne.n	8006e40 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e30:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e32:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e34:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006e36:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e38:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006e40:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e42:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e44:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10e      	bne.n	8006e6a <HAL_SPI_TransmitReceive+0xd4>
 8006e4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10b      	bne.n	8006e6a <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e52:	0020      	movs	r0, r4
 8006e54:	9a01      	ldr	r2, [sp, #4]
 8006e56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e58:	f7ff fe4e 	bl	8006af8 <SPI_EndRxTxTransaction>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d100      	bne.n	8006e62 <HAL_SPI_TransmitReceive+0xcc>
 8006e60:	e083      	b.n	8006f6a <HAL_SPI_TransmitReceive+0x1d4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e62:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8006e64:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e66:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8006e68:	e02e      	b.n	8006ec8 <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e6a:	6821      	ldr	r1, [r4, #0]
 8006e6c:	688b      	ldr	r3, [r1, #8]
 8006e6e:	423b      	tst	r3, r7
 8006e70:	d00e      	beq.n	8006e90 <HAL_SPI_TransmitReceive+0xfa>
 8006e72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00b      	beq.n	8006e90 <HAL_SPI_TransmitReceive+0xfa>
 8006e78:	2d01      	cmp	r5, #1
 8006e7a:	d109      	bne.n	8006e90 <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 8006e7c:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e80:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e82:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e84:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e86:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006e88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e90:	688b      	ldr	r3, [r1, #8]
 8006e92:	001a      	movs	r2, r3
 8006e94:	4032      	ands	r2, r6
 8006e96:	4233      	tst	r3, r6
 8006e98:	d00c      	beq.n	8006eb4 <HAL_SPI_TransmitReceive+0x11e>
 8006e9a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d009      	beq.n	8006eb4 <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8006ea0:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ea2:	68c9      	ldr	r1, [r1, #12]
 8006ea4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ea6:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ea8:	3302      	adds	r3, #2
 8006eaa:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006eac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006eb4:	f7fe f900 	bl	80050b8 <HAL_GetTick>
 8006eb8:	9b01      	ldr	r3, [sp, #4]
 8006eba:	1ac0      	subs	r0, r0, r3
 8006ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ebe:	4298      	cmp	r0, r3
 8006ec0:	d3c1      	bcc.n	8006e46 <HAL_SPI_TransmitReceive+0xb0>
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	d0bf      	beq.n	8006e46 <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 8006ec6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006ec8:	0023      	movs	r3, r4
 8006eca:	2201      	movs	r2, #1
 8006ecc:	3351      	adds	r3, #81	; 0x51
 8006ece:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	3450      	adds	r4, #80	; 0x50
 8006ed4:	7023      	strb	r3, [r4, #0]
}
 8006ed6:	b005      	add	sp, #20
 8006ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eda:	2900      	cmp	r1, #0
 8006edc:	d001      	beq.n	8006ee2 <HAL_SPI_TransmitReceive+0x14c>
 8006ede:	2e01      	cmp	r6, #1
 8006ee0:	d108      	bne.n	8006ef4 <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ee2:	782a      	ldrb	r2, [r5, #0]
 8006ee4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ee6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006ee8:	3301      	adds	r3, #1
 8006eea:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006eec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006ef4:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ef6:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ef8:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006efa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <HAL_SPI_TransmitReceive+0x170>
 8006f00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0a5      	beq.n	8006e52 <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	689a      	ldr	r2, [r3, #8]
 8006f0a:	423a      	tst	r2, r7
 8006f0c:	d00f      	beq.n	8006f2e <HAL_SPI_TransmitReceive+0x198>
 8006f0e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006f10:	2a00      	cmp	r2, #0
 8006f12:	d00c      	beq.n	8006f2e <HAL_SPI_TransmitReceive+0x198>
 8006f14:	2d01      	cmp	r5, #1
 8006f16:	d10a      	bne.n	8006f2e <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 8006f18:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006f1c:	7812      	ldrb	r2, [r2, #0]
 8006f1e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006f20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006f22:	3301      	adds	r3, #1
 8006f24:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006f26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	6899      	ldr	r1, [r3, #8]
 8006f32:	000a      	movs	r2, r1
 8006f34:	4032      	ands	r2, r6
 8006f36:	4231      	tst	r1, r6
 8006f38:	d00d      	beq.n	8006f56 <HAL_SPI_TransmitReceive+0x1c0>
 8006f3a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006f3c:	2900      	cmp	r1, #0
 8006f3e:	d00a      	beq.n	8006f56 <HAL_SPI_TransmitReceive+0x1c0>
        txallowed = 1U;
 8006f40:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f46:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 8006f48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006f4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f56:	f7fe f8af 	bl	80050b8 <HAL_GetTick>
 8006f5a:	9b01      	ldr	r3, [sp, #4]
 8006f5c:	1ac0      	subs	r0, r0, r3
 8006f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f60:	4298      	cmp	r0, r3
 8006f62:	d3ca      	bcc.n	8006efa <HAL_SPI_TransmitReceive+0x164>
 8006f64:	3301      	adds	r3, #1
 8006f66:	d0c8      	beq.n	8006efa <HAL_SPI_TransmitReceive+0x164>
 8006f68:	e7ad      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f6a:	68a3      	ldr	r3, [r4, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1ab      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	9003      	str	r0, [sp, #12]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	9203      	str	r2, [sp, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	9303      	str	r3, [sp, #12]
 8006f7c:	9b03      	ldr	r3, [sp, #12]
 8006f7e:	e7a3      	b.n	8006ec8 <HAL_SPI_TransmitReceive+0x132>

08006f80 <HAL_SPI_GetState>:
  return hspi->State;
 8006f80:	3051      	adds	r0, #81	; 0x51
 8006f82:	7800      	ldrb	r0, [r0, #0]
 8006f84:	b2c0      	uxtb	r0, r0
}
 8006f86:	4770      	bx	lr

08006f88 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f88:	6803      	ldr	r3, [r0, #0]
 8006f8a:	490b      	ldr	r1, [pc, #44]	; (8006fb8 <UART_EndRxTransfer+0x30>)
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	400a      	ands	r2, r1
 8006f90:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	3123      	adds	r1, #35	; 0x23
 8006f96:	31ff      	adds	r1, #255	; 0xff
 8006f98:	438a      	bics	r2, r1
 8006f9a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f9c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006f9e:	428a      	cmp	r2, r1
 8006fa0:	d103      	bne.n	8006faa <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	310f      	adds	r1, #15
 8006fa6:	438a      	bics	r2, r1
 8006fa8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006faa:	2320      	movs	r3, #32
 8006fac:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fb2:	6643      	str	r3, [r0, #100]	; 0x64
}
 8006fb4:	4770      	bx	lr
 8006fb6:	46c0      	nop			; (mov r8, r8)
 8006fb8:	fffffedf 	.word	0xfffffedf

08006fbc <HAL_UART_TxCpltCallback>:
 8006fbc:	4770      	bx	lr

08006fbe <HAL_UART_RxCpltCallback>:
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_UART_RxHalfCpltCallback>:
 8006fc0:	4770      	bx	lr

08006fc2 <HAL_UART_ErrorCallback>:
 8006fc2:	4770      	bx	lr

08006fc4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fc4:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fc6:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006fc8:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006fca:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006fcc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006fce:	6898      	ldr	r0, [r3, #8]
 8006fd0:	0600      	lsls	r0, r0, #24
 8006fd2:	d50b      	bpl.n	8006fec <UART_DMAError+0x28>
 8006fd4:	2a21      	cmp	r2, #33	; 0x21
 8006fd6:	d109      	bne.n	8006fec <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006fd8:	0022      	movs	r2, r4
 8006fda:	2000      	movs	r0, #0
 8006fdc:	3252      	adds	r2, #82	; 0x52
 8006fde:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	30c0      	adds	r0, #192	; 0xc0
 8006fe4:	4382      	bics	r2, r0
 8006fe6:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006fe8:	2220      	movs	r2, #32
 8006fea:	67a2      	str	r2, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	065b      	lsls	r3, r3, #25
 8006ff0:	d508      	bpl.n	8007004 <UART_DMAError+0x40>
 8006ff2:	2922      	cmp	r1, #34	; 0x22
 8006ff4:	d106      	bne.n	8007004 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006ff6:	0023      	movs	r3, r4
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 8006ffc:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8006ffe:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8007000:	f7ff ffc2 	bl	8006f88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007004:	2310      	movs	r3, #16
 8007006:	1d22      	adds	r2, r4, #4
 8007008:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800700a:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800700c:	430b      	orrs	r3, r1
 800700e:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8007010:	f7ff ffd7 	bl	8006fc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007014:	bd10      	pop	{r4, pc}

08007016 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007016:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	0002      	movs	r2, r0
{
 800701c:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 800701e:	325a      	adds	r2, #90	; 0x5a
 8007020:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8007022:	3a08      	subs	r2, #8
 8007024:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007026:	f7ff ffcc 	bl	8006fc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800702a:	bd10      	pop	{r4, pc}

0800702c <HAL_UARTEx_RxEventCallback>:
}
 800702c:	4770      	bx	lr
	...

08007030 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007030:	6803      	ldr	r3, [r0, #0]
{
 8007032:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007034:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007036:	4a85      	ldr	r2, [pc, #532]	; (800724c <HAL_UART_IRQHandler+0x21c>)
{
 8007038:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800703a:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800703c:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 800703e:	4211      	tst	r1, r2
 8007040:	d10b      	bne.n	800705a <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007042:	2220      	movs	r2, #32
 8007044:	4211      	tst	r1, r2
 8007046:	d100      	bne.n	800704a <HAL_UART_IRQHandler+0x1a>
 8007048:	e076      	b.n	8007138 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800704a:	4210      	tst	r0, r2
 800704c:	d100      	bne.n	8007050 <HAL_UART_IRQHandler+0x20>
 800704e:	e073      	b.n	8007138 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8007050:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8007052:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8007054:	2b00      	cmp	r3, #0
 8007056:	d165      	bne.n	8007124 <HAL_UART_IRQHandler+0xf4>
 8007058:	e065      	b.n	8007126 <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800705a:	2201      	movs	r2, #1
 800705c:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800705e:	4d7c      	ldr	r5, [pc, #496]	; (8007250 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007060:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007062:	4005      	ands	r5, r0
 8007064:	433d      	orrs	r5, r7
 8007066:	d067      	beq.n	8007138 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007068:	1d25      	adds	r5, r4, #4
 800706a:	4211      	tst	r1, r2
 800706c:	d005      	beq.n	800707a <HAL_UART_IRQHandler+0x4a>
 800706e:	05c6      	lsls	r6, r0, #23
 8007070:	d503      	bpl.n	800707a <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007072:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007074:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8007076:	4332      	orrs	r2, r6
 8007078:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800707a:	2202      	movs	r2, #2
 800707c:	4211      	tst	r1, r2
 800707e:	d006      	beq.n	800708e <HAL_UART_IRQHandler+0x5e>
 8007080:	2f00      	cmp	r7, #0
 8007082:	d004      	beq.n	800708e <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007084:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007086:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8007088:	1892      	adds	r2, r2, r2
 800708a:	4332      	orrs	r2, r6
 800708c:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800708e:	2204      	movs	r2, #4
 8007090:	4211      	tst	r1, r2
 8007092:	d006      	beq.n	80070a2 <HAL_UART_IRQHandler+0x72>
 8007094:	2f00      	cmp	r7, #0
 8007096:	d004      	beq.n	80070a2 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007098:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800709a:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800709c:	3a02      	subs	r2, #2
 800709e:	4332      	orrs	r2, r6
 80070a0:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070a2:	2208      	movs	r2, #8
 80070a4:	4211      	tst	r1, r2
 80070a6:	d007      	beq.n	80070b8 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070a8:	2620      	movs	r6, #32
 80070aa:	4006      	ands	r6, r0
 80070ac:	433e      	orrs	r6, r7
 80070ae:	d003      	beq.n	80070b8 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070b0:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070b2:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80070b4:	4332      	orrs	r2, r6
 80070b6:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80070b8:	2280      	movs	r2, #128	; 0x80
 80070ba:	0112      	lsls	r2, r2, #4
 80070bc:	4211      	tst	r1, r2
 80070be:	d006      	beq.n	80070ce <HAL_UART_IRQHandler+0x9e>
 80070c0:	0146      	lsls	r6, r0, #5
 80070c2:	d504      	bpl.n	80070ce <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070c4:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80070c6:	2320      	movs	r3, #32
 80070c8:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80070ca:	4313      	orrs	r3, r2
 80070cc:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070ce:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d028      	beq.n	8007126 <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80070d4:	2320      	movs	r3, #32
 80070d6:	4219      	tst	r1, r3
 80070d8:	d006      	beq.n	80070e8 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070da:	4218      	tst	r0, r3
 80070dc:	d004      	beq.n	80070e8 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 80070de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 80070e4:	0020      	movs	r0, r4
 80070e6:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070e8:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80070ea:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070ec:	2740      	movs	r7, #64	; 0x40
 80070ee:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070f0:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070f2:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070f4:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 80070f6:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070f8:	431e      	orrs	r6, r3
 80070fa:	d019      	beq.n	8007130 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 80070fc:	f7ff ff44 	bl	8006f88 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	423a      	tst	r2, r7
 8007106:	d00f      	beq.n	8007128 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007108:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800710a:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800710c:	43ba      	bics	r2, r7
 800710e:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8007110:	2800      	cmp	r0, #0
 8007112:	d009      	beq.n	8007128 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007114:	4b4f      	ldr	r3, [pc, #316]	; (8007254 <HAL_UART_IRQHandler+0x224>)
 8007116:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007118:	f7fe fb44 	bl	80057a4 <HAL_DMA_Abort_IT>
 800711c:	2800      	cmp	r0, #0
 800711e:	d002      	beq.n	8007126 <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007120:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007122:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007124:	4798      	blx	r3
}
 8007126:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8007128:	0020      	movs	r0, r4
 800712a:	f7ff ff4a 	bl	8006fc2 <HAL_UART_ErrorCallback>
 800712e:	e7fa      	b.n	8007126 <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8007130:	f7ff ff47 	bl	8006fc2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007134:	67ee      	str	r6, [r5, #124]	; 0x7c
 8007136:	e7f6      	b.n	8007126 <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007138:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800713a:	2d01      	cmp	r5, #1
 800713c:	d161      	bne.n	8007202 <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800713e:	2210      	movs	r2, #16
 8007140:	4211      	tst	r1, r2
 8007142:	d05e      	beq.n	8007202 <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007144:	4210      	tst	r0, r2
 8007146:	d05c      	beq.n	8007202 <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007148:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800714a:	6899      	ldr	r1, [r3, #8]
 800714c:	2640      	movs	r6, #64	; 0x40
 800714e:	000f      	movs	r7, r1
 8007150:	4037      	ands	r7, r6
 8007152:	4231      	tst	r1, r6
 8007154:	d038      	beq.n	80071c8 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007156:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007158:	680f      	ldr	r7, [r1, #0]
 800715a:	9100      	str	r1, [sp, #0]
 800715c:	6879      	ldr	r1, [r7, #4]
 800715e:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 8007160:	2900      	cmp	r1, #0
 8007162:	d0e0      	beq.n	8007126 <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007164:	2058      	movs	r0, #88	; 0x58
 8007166:	4684      	mov	ip, r0
 8007168:	44a4      	add	ip, r4
 800716a:	4660      	mov	r0, ip
 800716c:	8800      	ldrh	r0, [r0, #0]
 800716e:	4288      	cmp	r0, r1
 8007170:	d9d9      	bls.n	8007126 <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 8007172:	205a      	movs	r0, #90	; 0x5a
 8007174:	4684      	mov	ip, r0
 8007176:	44a4      	add	ip, r4
 8007178:	4660      	mov	r0, ip
 800717a:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800717c:	683f      	ldr	r7, [r7, #0]
 800717e:	2120      	movs	r1, #32
 8007180:	0038      	movs	r0, r7
 8007182:	4008      	ands	r0, r1
 8007184:	9001      	str	r0, [sp, #4]
 8007186:	420f      	tst	r7, r1
 8007188:	d112      	bne.n	80071b0 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800718a:	681f      	ldr	r7, [r3, #0]
 800718c:	4832      	ldr	r0, [pc, #200]	; (8007258 <HAL_UART_IRQHandler+0x228>)
 800718e:	4007      	ands	r7, r0
 8007190:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007192:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007194:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007196:	43af      	bics	r7, r5
 8007198:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800719a:	689d      	ldr	r5, [r3, #8]
 800719c:	43b5      	bics	r5, r6
 800719e:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 80071a0:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a2:	9901      	ldr	r1, [sp, #4]
 80071a4:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a6:	6819      	ldr	r1, [r3, #0]
 80071a8:	4391      	bics	r1, r2
 80071aa:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071ac:	f7fe fada 	bl	8005764 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071b0:	0023      	movs	r3, r4
 80071b2:	0022      	movs	r2, r4
 80071b4:	335a      	adds	r3, #90	; 0x5a
 80071b6:	3258      	adds	r2, #88	; 0x58
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	8811      	ldrh	r1, [r2, #0]
 80071bc:	1ac9      	subs	r1, r1, r3
 80071be:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071c0:	0020      	movs	r0, r4
 80071c2:	f7ff ff33 	bl	800702c <HAL_UARTEx_RxEventCallback>
 80071c6:	e7ae      	b.n	8007126 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071c8:	0026      	movs	r6, r4
 80071ca:	365a      	adds	r6, #90	; 0x5a
 80071cc:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 80071ce:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071d0:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 80071d2:	2900      	cmp	r1, #0
 80071d4:	d0a7      	beq.n	8007126 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071d6:	0021      	movs	r1, r4
 80071d8:	3158      	adds	r1, #88	; 0x58
 80071da:	8809      	ldrh	r1, [r1, #0]
 80071dc:	1a09      	subs	r1, r1, r0
 80071de:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 80071e0:	2900      	cmp	r1, #0
 80071e2:	d0a0      	beq.n	8007126 <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	4e1d      	ldr	r6, [pc, #116]	; (800725c <HAL_UART_IRQHandler+0x22c>)
 80071e8:	4030      	ands	r0, r6
 80071ea:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ec:	6898      	ldr	r0, [r3, #8]
 80071ee:	43a8      	bics	r0, r5
 80071f0:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80071f2:	2020      	movs	r0, #32
 80071f4:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f6:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f8:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 80071fa:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fc:	4390      	bics	r0, r2
 80071fe:	6018      	str	r0, [r3, #0]
 8007200:	e7de      	b.n	80071c0 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007202:	2280      	movs	r2, #128	; 0x80
 8007204:	0352      	lsls	r2, r2, #13
 8007206:	4211      	tst	r1, r2
 8007208:	d006      	beq.n	8007218 <HAL_UART_IRQHandler+0x1e8>
 800720a:	0275      	lsls	r5, r6, #9
 800720c:	d504      	bpl.n	8007218 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 800720e:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007210:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8007212:	f000 fb6f 	bl	80078f4 <HAL_UARTEx_WakeupCallback>
    return;
 8007216:	e786      	b.n	8007126 <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007218:	2280      	movs	r2, #128	; 0x80
 800721a:	4211      	tst	r1, r2
 800721c:	d003      	beq.n	8007226 <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800721e:	4210      	tst	r0, r2
 8007220:	d001      	beq.n	8007226 <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 8007222:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007224:	e715      	b.n	8007052 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007226:	2540      	movs	r5, #64	; 0x40
 8007228:	4229      	tst	r1, r5
 800722a:	d100      	bne.n	800722e <HAL_UART_IRQHandler+0x1fe>
 800722c:	e77b      	b.n	8007126 <HAL_UART_IRQHandler+0xf6>
 800722e:	4228      	tst	r0, r5
 8007230:	d100      	bne.n	8007234 <HAL_UART_IRQHandler+0x204>
 8007232:	e778      	b.n	8007126 <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007234:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007236:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007238:	43aa      	bics	r2, r5
 800723a:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800723c:	2320      	movs	r3, #32
 800723e:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8007240:	2300      	movs	r3, #0
 8007242:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8007244:	f7ff feba 	bl	8006fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007248:	e76d      	b.n	8007126 <HAL_UART_IRQHandler+0xf6>
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	0000080f 	.word	0x0000080f
 8007250:	04000120 	.word	0x04000120
 8007254:	08007017 	.word	0x08007017
 8007258:	fffffeff 	.word	0xfffffeff
 800725c:	fffffedf 	.word	0xfffffedf

08007260 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007260:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8007262:	b510      	push	{r4, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007264:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007266:	2b01      	cmp	r3, #1
 8007268:	d106      	bne.n	8007278 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800726a:	0003      	movs	r3, r0
 800726c:	3358      	adds	r3, #88	; 0x58
 800726e:	8819      	ldrh	r1, [r3, #0]
 8007270:	0849      	lsrs	r1, r1, #1
 8007272:	f7ff fedb 	bl	800702c <HAL_UARTEx_RxEventCallback>
}
 8007276:	bd10      	pop	{r4, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8007278:	f7ff fea2 	bl	8006fc0 <HAL_UART_RxHalfCpltCallback>
}
 800727c:	e7fb      	b.n	8007276 <UART_DMARxHalfCplt+0x16>
	...

08007280 <UART_DMAReceiveCplt>:
{
 8007280:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2220      	movs	r2, #32
 8007286:	681b      	ldr	r3, [r3, #0]
{
 8007288:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800728a:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800728c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800728e:	4011      	ands	r1, r2
 8007290:	4213      	tst	r3, r2
 8007292:	d118      	bne.n	80072c6 <UART_DMAReceiveCplt+0x46>
    huart->RxXferCount = 0U;
 8007294:	0003      	movs	r3, r0
 8007296:	335a      	adds	r3, #90	; 0x5a
 8007298:	8019      	strh	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800729a:	6803      	ldr	r3, [r0, #0]
 800729c:	4c10      	ldr	r4, [pc, #64]	; (80072e0 <UART_DMAReceiveCplt+0x60>)
 800729e:	6819      	ldr	r1, [r3, #0]
 80072a0:	4021      	ands	r1, r4
 80072a2:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a4:	6899      	ldr	r1, [r3, #8]
 80072a6:	3403      	adds	r4, #3
 80072a8:	34ff      	adds	r4, #255	; 0xff
 80072aa:	43a1      	bics	r1, r4
 80072ac:	6099      	str	r1, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ae:	6899      	ldr	r1, [r3, #8]
 80072b0:	343f      	adds	r4, #63	; 0x3f
 80072b2:	43a1      	bics	r1, r4
 80072b4:	6099      	str	r1, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 80072b6:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80072ba:	2a01      	cmp	r2, #1
 80072bc:	d103      	bne.n	80072c6 <UART_DMAReceiveCplt+0x46>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072be:	2110      	movs	r1, #16
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	438a      	bics	r2, r1
 80072c4:	601a      	str	r2, [r3, #0]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d105      	bne.n	80072d8 <UART_DMAReceiveCplt+0x58>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072cc:	0003      	movs	r3, r0
 80072ce:	3358      	adds	r3, #88	; 0x58
 80072d0:	8819      	ldrh	r1, [r3, #0]
 80072d2:	f7ff feab 	bl	800702c <HAL_UARTEx_RxEventCallback>
}
 80072d6:	bd10      	pop	{r4, pc}
    HAL_UART_RxCpltCallback(huart);
 80072d8:	f7ff fe71 	bl	8006fbe <HAL_UART_RxCpltCallback>
}
 80072dc:	e7fb      	b.n	80072d6 <UART_DMAReceiveCplt+0x56>
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	fffffeff 	.word	0xfffffeff

080072e4 <UART_SetConfig>:
{
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072e8:	6925      	ldr	r5, [r4, #16]
 80072ea:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80072ec:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072ee:	4329      	orrs	r1, r5
 80072f0:	6965      	ldr	r5, [r4, #20]
 80072f2:	69c3      	ldr	r3, [r0, #28]
 80072f4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072f6:	6810      	ldr	r0, [r2, #0]
 80072f8:	4d72      	ldr	r5, [pc, #456]	; (80074c4 <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072fa:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072fc:	4028      	ands	r0, r5
 80072fe:	4301      	orrs	r1, r0
 8007300:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007302:	6851      	ldr	r1, [r2, #4]
 8007304:	4870      	ldr	r0, [pc, #448]	; (80074c8 <UART_SetConfig+0x1e4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007306:	4d71      	ldr	r5, [pc, #452]	; (80074cc <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007308:	4001      	ands	r1, r0
 800730a:	68e0      	ldr	r0, [r4, #12]
 800730c:	4301      	orrs	r1, r0
 800730e:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007310:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007312:	42aa      	cmp	r2, r5
 8007314:	d001      	beq.n	800731a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8007316:	6a21      	ldr	r1, [r4, #32]
 8007318:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800731a:	6891      	ldr	r1, [r2, #8]
 800731c:	4e6c      	ldr	r6, [pc, #432]	; (80074d0 <UART_SetConfig+0x1ec>)
 800731e:	4031      	ands	r1, r6
 8007320:	4301      	orrs	r1, r0
 8007322:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007324:	496b      	ldr	r1, [pc, #428]	; (80074d4 <UART_SetConfig+0x1f0>)
 8007326:	428a      	cmp	r2, r1
 8007328:	d10f      	bne.n	800734a <UART_SetConfig+0x66>
 800732a:	2103      	movs	r1, #3
 800732c:	4a6a      	ldr	r2, [pc, #424]	; (80074d8 <UART_SetConfig+0x1f4>)
 800732e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007330:	400a      	ands	r2, r1
 8007332:	3a01      	subs	r2, #1
 8007334:	4969      	ldr	r1, [pc, #420]	; (80074dc <UART_SetConfig+0x1f8>)
 8007336:	2a02      	cmp	r2, #2
 8007338:	d90f      	bls.n	800735a <UART_SetConfig+0x76>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800733a:	2280      	movs	r2, #128	; 0x80
 800733c:	0212      	lsls	r2, r2, #8
 800733e:	4293      	cmp	r3, r2
 8007340:	d100      	bne.n	8007344 <UART_SetConfig+0x60>
 8007342:	e069      	b.n	8007418 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007344:	f7ff f97e 	bl	8006644 <HAL_RCC_GetPCLK2Freq>
        break;
 8007348:	e09c      	b.n	8007484 <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800734a:	4965      	ldr	r1, [pc, #404]	; (80074e0 <UART_SetConfig+0x1fc>)
 800734c:	428a      	cmp	r2, r1
 800734e:	d113      	bne.n	8007378 <UART_SetConfig+0x94>
 8007350:	210c      	movs	r1, #12
 8007352:	4a61      	ldr	r2, [pc, #388]	; (80074d8 <UART_SetConfig+0x1f4>)
 8007354:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007356:	400a      	ands	r2, r1
 8007358:	4962      	ldr	r1, [pc, #392]	; (80074e4 <UART_SetConfig+0x200>)
 800735a:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800735c:	2280      	movs	r2, #128	; 0x80
 800735e:	0212      	lsls	r2, r2, #8
 8007360:	4293      	cmp	r3, r2
 8007362:	d000      	beq.n	8007366 <UART_SetConfig+0x82>
 8007364:	e07f      	b.n	8007466 <UART_SetConfig+0x182>
    switch (clocksource)
 8007366:	2808      	cmp	r0, #8
 8007368:	d818      	bhi.n	800739c <UART_SetConfig+0xb8>
 800736a:	f7f8 fed5 	bl	8000118 <__gnu_thumb1_case_uqi>
 800736e:	5550      	.short	0x5550
 8007370:	17791758 	.word	0x17791758
 8007374:	1717      	.short	0x1717
 8007376:	63          	.byte	0x63
 8007377:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007378:	42aa      	cmp	r2, r5
 800737a:	d10f      	bne.n	800739c <UART_SetConfig+0xb8>
 800737c:	21c0      	movs	r1, #192	; 0xc0
 800737e:	2080      	movs	r0, #128	; 0x80
 8007380:	4a55      	ldr	r2, [pc, #340]	; (80074d8 <UART_SetConfig+0x1f4>)
 8007382:	0109      	lsls	r1, r1, #4
 8007384:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007386:	0100      	lsls	r0, r0, #4
 8007388:	400b      	ands	r3, r1
 800738a:	4283      	cmp	r3, r0
 800738c:	d016      	beq.n	80073bc <UART_SetConfig+0xd8>
 800738e:	d807      	bhi.n	80073a0 <UART_SetConfig+0xbc>
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00a      	beq.n	80073aa <UART_SetConfig+0xc6>
 8007394:	2280      	movs	r2, #128	; 0x80
 8007396:	00d2      	lsls	r2, r2, #3
 8007398:	4293      	cmp	r3, r2
 800739a:	d035      	beq.n	8007408 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800739c:	2001      	movs	r0, #1
 800739e:	e009      	b.n	80073b4 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073a0:	428b      	cmp	r3, r1
 80073a2:	d1fb      	bne.n	800739c <UART_SetConfig+0xb8>
 80073a4:	2080      	movs	r0, #128	; 0x80
 80073a6:	0200      	lsls	r0, r0, #8
 80073a8:	e012      	b.n	80073d0 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 80073aa:	f7ff f93b 	bl	8006624 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d10e      	bne.n	80073d0 <UART_SetConfig+0xec>
 80073b2:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80073b8:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80073ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073bc:	2310      	movs	r3, #16
 80073be:	6810      	ldr	r0, [r2, #0]
 80073c0:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80073c2:	4243      	negs	r3, r0
 80073c4:	4158      	adcs	r0, r3
 80073c6:	4b48      	ldr	r3, [pc, #288]	; (80074e8 <UART_SetConfig+0x204>)
 80073c8:	4240      	negs	r0, r0
 80073ca:	4018      	ands	r0, r3
 80073cc:	4b47      	ldr	r3, [pc, #284]	; (80074ec <UART_SetConfig+0x208>)
 80073ce:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073d0:	2203      	movs	r2, #3
 80073d2:	6863      	ldr	r3, [r4, #4]
 80073d4:	435a      	muls	r2, r3
 80073d6:	4282      	cmp	r2, r0
 80073d8:	d8e0      	bhi.n	800739c <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80073da:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073dc:	4282      	cmp	r2, r0
 80073de:	d3dd      	bcc.n	800739c <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80073e0:	2700      	movs	r7, #0
 80073e2:	0e02      	lsrs	r2, r0, #24
 80073e4:	0201      	lsls	r1, r0, #8
 80073e6:	085e      	lsrs	r6, r3, #1
 80073e8:	1989      	adds	r1, r1, r6
 80073ea:	417a      	adcs	r2, r7
 80073ec:	0008      	movs	r0, r1
 80073ee:	0011      	movs	r1, r2
 80073f0:	001a      	movs	r2, r3
 80073f2:	003b      	movs	r3, r7
 80073f4:	f7f9 f892 	bl	800051c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073f8:	4b3d      	ldr	r3, [pc, #244]	; (80074f0 <UART_SetConfig+0x20c>)
 80073fa:	18c2      	adds	r2, r0, r3
 80073fc:	4b3d      	ldr	r3, [pc, #244]	; (80074f4 <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073fe:	429a      	cmp	r2, r3
 8007400:	d8cc      	bhi.n	800739c <UART_SetConfig+0xb8>
        huart->Instance->BRR = usartdiv;
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	60d8      	str	r0, [r3, #12]
 8007406:	e7d4      	b.n	80073b2 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8007408:	f7fe fdae 	bl	8005f68 <HAL_RCC_GetSysClockFreq>
        break;
 800740c:	e7cf      	b.n	80073ae <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800740e:	f7ff f909 	bl	8006624 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8007412:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8007414:	d0cd      	beq.n	80073b2 <UART_SetConfig+0xce>
 8007416:	e00d      	b.n	8007434 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007418:	f7ff f914 	bl	8006644 <HAL_RCC_GetPCLK2Freq>
 800741c:	e7f9      	b.n	8007412 <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800741e:	4b2e      	ldr	r3, [pc, #184]	; (80074d8 <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007420:	4a32      	ldr	r2, [pc, #200]	; (80074ec <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007422:	6818      	ldr	r0, [r3, #0]
 8007424:	2310      	movs	r3, #16
 8007426:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007428:	4243      	negs	r3, r0
 800742a:	4158      	adcs	r0, r3
 800742c:	4b2e      	ldr	r3, [pc, #184]	; (80074e8 <UART_SetConfig+0x204>)
 800742e:	4240      	negs	r0, r0
 8007430:	4003      	ands	r3, r0
 8007432:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007434:	0058      	lsls	r0, r3, #1
 8007436:	6863      	ldr	r3, [r4, #4]
 8007438:	6861      	ldr	r1, [r4, #4]
 800743a:	085b      	lsrs	r3, r3, #1
 800743c:	18c0      	adds	r0, r0, r3
 800743e:	f7f8 fe7f 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007442:	492d      	ldr	r1, [pc, #180]	; (80074f8 <UART_SetConfig+0x214>)
 8007444:	b282      	uxth	r2, r0
 8007446:	3a10      	subs	r2, #16
 8007448:	0403      	lsls	r3, r0, #16
 800744a:	428a      	cmp	r2, r1
 800744c:	d8a6      	bhi.n	800739c <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800744e:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007450:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007452:	4390      	bics	r0, r2
 8007454:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8007456:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007458:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800745a:	4318      	orrs	r0, r3
 800745c:	60d0      	str	r0, [r2, #12]
 800745e:	e7a8      	b.n	80073b2 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8007460:	f7fe fd82 	bl	8005f68 <HAL_RCC_GetSysClockFreq>
 8007464:	e7d5      	b.n	8007412 <UART_SetConfig+0x12e>
    switch (clocksource)
 8007466:	2808      	cmp	r0, #8
 8007468:	d898      	bhi.n	800739c <UART_SetConfig+0xb8>
 800746a:	f7f8 fe5f 	bl	800012c <__gnu_thumb1_case_shi>
 800746e:	0009      	.short	0x0009
 8007470:	000fff6b 	.word	0x000fff6b
 8007474:	0025ff97 	.word	0x0025ff97
 8007478:	ff97ff97 	.word	0xff97ff97
 800747c:	0028ff97 	.word	0x0028ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 8007480:	f7ff f8d0 	bl	8006624 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007484:	2800      	cmp	r0, #0
 8007486:	d100      	bne.n	800748a <UART_SetConfig+0x1a6>
 8007488:	e793      	b.n	80073b2 <UART_SetConfig+0xce>
 800748a:	e00a      	b.n	80074a2 <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800748c:	4b12      	ldr	r3, [pc, #72]	; (80074d8 <UART_SetConfig+0x1f4>)
 800748e:	6818      	ldr	r0, [r3, #0]
 8007490:	2310      	movs	r3, #16
 8007492:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007494:	4243      	negs	r3, r0
 8007496:	4158      	adcs	r0, r3
 8007498:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <UART_SetConfig+0x204>)
 800749a:	4240      	negs	r0, r0
 800749c:	4018      	ands	r0, r3
 800749e:	4b13      	ldr	r3, [pc, #76]	; (80074ec <UART_SetConfig+0x208>)
 80074a0:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074a2:	6863      	ldr	r3, [r4, #4]
 80074a4:	6861      	ldr	r1, [r4, #4]
 80074a6:	085b      	lsrs	r3, r3, #1
 80074a8:	1818      	adds	r0, r3, r0
 80074aa:	f7f8 fe49 	bl	8000140 <__udivsi3>
 80074ae:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074b0:	0002      	movs	r2, r0
 80074b2:	4b11      	ldr	r3, [pc, #68]	; (80074f8 <UART_SetConfig+0x214>)
 80074b4:	3a10      	subs	r2, #16
 80074b6:	e7a2      	b.n	80073fe <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 80074b8:	f7fe fd56 	bl	8005f68 <HAL_RCC_GetSysClockFreq>
        break;
 80074bc:	e7e2      	b.n	8007484 <UART_SetConfig+0x1a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074be:	2080      	movs	r0, #128	; 0x80
 80074c0:	0200      	lsls	r0, r0, #8
 80074c2:	e7ee      	b.n	80074a2 <UART_SetConfig+0x1be>
 80074c4:	efff69f3 	.word	0xefff69f3
 80074c8:	ffffcfff 	.word	0xffffcfff
 80074cc:	40004800 	.word	0x40004800
 80074d0:	fffff4ff 	.word	0xfffff4ff
 80074d4:	40013800 	.word	0x40013800
 80074d8:	40021000 	.word	0x40021000
 80074dc:	0800afd4 	.word	0x0800afd4
 80074e0:	40004400 	.word	0x40004400
 80074e4:	0800afd7 	.word	0x0800afd7
 80074e8:	00b71b00 	.word	0x00b71b00
 80074ec:	003d0900 	.word	0x003d0900
 80074f0:	fffffd00 	.word	0xfffffd00
 80074f4:	000ffcff 	.word	0x000ffcff
 80074f8:	0000ffef 	.word	0x0000ffef

080074fc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80074fe:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007500:	07da      	lsls	r2, r3, #31
 8007502:	d506      	bpl.n	8007512 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007504:	6801      	ldr	r1, [r0, #0]
 8007506:	4c28      	ldr	r4, [pc, #160]	; (80075a8 <UART_AdvFeatureConfig+0xac>)
 8007508:	684a      	ldr	r2, [r1, #4]
 800750a:	4022      	ands	r2, r4
 800750c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800750e:	4322      	orrs	r2, r4
 8007510:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007512:	079a      	lsls	r2, r3, #30
 8007514:	d506      	bpl.n	8007524 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007516:	6801      	ldr	r1, [r0, #0]
 8007518:	4c24      	ldr	r4, [pc, #144]	; (80075ac <UART_AdvFeatureConfig+0xb0>)
 800751a:	684a      	ldr	r2, [r1, #4]
 800751c:	4022      	ands	r2, r4
 800751e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007520:	4322      	orrs	r2, r4
 8007522:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007524:	075a      	lsls	r2, r3, #29
 8007526:	d506      	bpl.n	8007536 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007528:	6801      	ldr	r1, [r0, #0]
 800752a:	4c21      	ldr	r4, [pc, #132]	; (80075b0 <UART_AdvFeatureConfig+0xb4>)
 800752c:	684a      	ldr	r2, [r1, #4]
 800752e:	4022      	ands	r2, r4
 8007530:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007532:	4322      	orrs	r2, r4
 8007534:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007536:	071a      	lsls	r2, r3, #28
 8007538:	d506      	bpl.n	8007548 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800753a:	6801      	ldr	r1, [r0, #0]
 800753c:	4c1d      	ldr	r4, [pc, #116]	; (80075b4 <UART_AdvFeatureConfig+0xb8>)
 800753e:	684a      	ldr	r2, [r1, #4]
 8007540:	4022      	ands	r2, r4
 8007542:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007544:	4322      	orrs	r2, r4
 8007546:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007548:	06da      	lsls	r2, r3, #27
 800754a:	d506      	bpl.n	800755a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800754c:	6801      	ldr	r1, [r0, #0]
 800754e:	4c1a      	ldr	r4, [pc, #104]	; (80075b8 <UART_AdvFeatureConfig+0xbc>)
 8007550:	688a      	ldr	r2, [r1, #8]
 8007552:	4022      	ands	r2, r4
 8007554:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007556:	4322      	orrs	r2, r4
 8007558:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800755a:	069a      	lsls	r2, r3, #26
 800755c:	d506      	bpl.n	800756c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800755e:	6801      	ldr	r1, [r0, #0]
 8007560:	4c16      	ldr	r4, [pc, #88]	; (80075bc <UART_AdvFeatureConfig+0xc0>)
 8007562:	688a      	ldr	r2, [r1, #8]
 8007564:	4022      	ands	r2, r4
 8007566:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007568:	4322      	orrs	r2, r4
 800756a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800756c:	065a      	lsls	r2, r3, #25
 800756e:	d510      	bpl.n	8007592 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007570:	6801      	ldr	r1, [r0, #0]
 8007572:	4d13      	ldr	r5, [pc, #76]	; (80075c0 <UART_AdvFeatureConfig+0xc4>)
 8007574:	684a      	ldr	r2, [r1, #4]
 8007576:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007578:	402a      	ands	r2, r5
 800757a:	4322      	orrs	r2, r4
 800757c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800757e:	2280      	movs	r2, #128	; 0x80
 8007580:	0352      	lsls	r2, r2, #13
 8007582:	4294      	cmp	r4, r2
 8007584:	d105      	bne.n	8007592 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007586:	684a      	ldr	r2, [r1, #4]
 8007588:	4c0e      	ldr	r4, [pc, #56]	; (80075c4 <UART_AdvFeatureConfig+0xc8>)
 800758a:	4022      	ands	r2, r4
 800758c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800758e:	4322      	orrs	r2, r4
 8007590:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007592:	061b      	lsls	r3, r3, #24
 8007594:	d506      	bpl.n	80075a4 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007596:	6802      	ldr	r2, [r0, #0]
 8007598:	490b      	ldr	r1, [pc, #44]	; (80075c8 <UART_AdvFeatureConfig+0xcc>)
 800759a:	6853      	ldr	r3, [r2, #4]
 800759c:	400b      	ands	r3, r1
 800759e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80075a0:	430b      	orrs	r3, r1
 80075a2:	6053      	str	r3, [r2, #4]
}
 80075a4:	bd30      	pop	{r4, r5, pc}
 80075a6:	46c0      	nop			; (mov r8, r8)
 80075a8:	fffdffff 	.word	0xfffdffff
 80075ac:	fffeffff 	.word	0xfffeffff
 80075b0:	fffbffff 	.word	0xfffbffff
 80075b4:	ffff7fff 	.word	0xffff7fff
 80075b8:	ffffefff 	.word	0xffffefff
 80075bc:	ffffdfff 	.word	0xffffdfff
 80075c0:	ffefffff 	.word	0xffefffff
 80075c4:	ff9fffff 	.word	0xff9fffff
 80075c8:	fff7ffff 	.word	0xfff7ffff

080075cc <UART_WaitOnFlagUntilTimeout>:
{
 80075cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075ce:	2780      	movs	r7, #128	; 0x80
{
 80075d0:	0004      	movs	r4, r0
 80075d2:	000d      	movs	r5, r1
 80075d4:	0016      	movs	r6, r2
 80075d6:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075d8:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075da:	6822      	ldr	r2, [r4, #0]
 80075dc:	69d3      	ldr	r3, [r2, #28]
 80075de:	402b      	ands	r3, r5
 80075e0:	1b5b      	subs	r3, r3, r5
 80075e2:	4259      	negs	r1, r3
 80075e4:	414b      	adcs	r3, r1
 80075e6:	42b3      	cmp	r3, r6
 80075e8:	d001      	beq.n	80075ee <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 80075ea:	2000      	movs	r0, #0
 80075ec:	e01c      	b.n	8007628 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80075ee:	9b08      	ldr	r3, [sp, #32]
 80075f0:	3301      	adds	r3, #1
 80075f2:	d0f3      	beq.n	80075dc <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075f4:	f7fd fd60 	bl	80050b8 <HAL_GetTick>
 80075f8:	9b01      	ldr	r3, [sp, #4]
 80075fa:	9a08      	ldr	r2, [sp, #32]
 80075fc:	1ac0      	subs	r0, r0, r3
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	4290      	cmp	r0, r2
 8007602:	d801      	bhi.n	8007608 <UART_WaitOnFlagUntilTimeout+0x3c>
 8007604:	2a00      	cmp	r2, #0
 8007606:	d110      	bne.n	800762a <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	4913      	ldr	r1, [pc, #76]	; (8007658 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800760c:	400a      	ands	r2, r1
 800760e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	31a3      	adds	r1, #163	; 0xa3
 8007614:	31ff      	adds	r1, #255	; 0xff
 8007616:	438a      	bics	r2, r1
 8007618:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800761a:	2320      	movs	r3, #32
 800761c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800761e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8007620:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8007622:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8007624:	3474      	adds	r4, #116	; 0x74
 8007626:	7023      	strb	r3, [r4, #0]
}
 8007628:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800762a:	2104      	movs	r1, #4
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	420a      	tst	r2, r1
 8007630:	d0d3      	beq.n	80075da <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007632:	69da      	ldr	r2, [r3, #28]
 8007634:	423a      	tst	r2, r7
 8007636:	d0d0      	beq.n	80075da <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007638:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	4906      	ldr	r1, [pc, #24]	; (8007658 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800763e:	400a      	ands	r2, r1
 8007640:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	31a3      	adds	r1, #163	; 0xa3
 8007646:	31ff      	adds	r1, #255	; 0xff
 8007648:	438a      	bics	r2, r1
 800764a:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800764c:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800764e:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8007650:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007652:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007654:	67d3      	str	r3, [r2, #124]	; 0x7c
 8007656:	e7e3      	b.n	8007620 <UART_WaitOnFlagUntilTimeout+0x54>
 8007658:	fffffe5f 	.word	0xfffffe5f

0800765c <HAL_UART_Transmit>:
{
 800765c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800765e:	b087      	sub	sp, #28
 8007660:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8007662:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8007664:	0004      	movs	r4, r0
 8007666:	000d      	movs	r5, r1
 8007668:	0016      	movs	r6, r2
    return HAL_BUSY;
 800766a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800766c:	2b20      	cmp	r3, #32
 800766e:	d151      	bne.n	8007714 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 8007670:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8007672:	2900      	cmp	r1, #0
 8007674:	d04e      	beq.n	8007714 <HAL_UART_Transmit+0xb8>
 8007676:	2a00      	cmp	r2, #0
 8007678:	d04c      	beq.n	8007714 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800767a:	2380      	movs	r3, #128	; 0x80
 800767c:	68a2      	ldr	r2, [r4, #8]
 800767e:	015b      	lsls	r3, r3, #5
 8007680:	429a      	cmp	r2, r3
 8007682:	d104      	bne.n	800768e <HAL_UART_Transmit+0x32>
 8007684:	6923      	ldr	r3, [r4, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 800768a:	4201      	tst	r1, r0
 800768c:	d142      	bne.n	8007714 <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 800768e:	0023      	movs	r3, r4
 8007690:	3374      	adds	r3, #116	; 0x74
 8007692:	9303      	str	r3, [sp, #12]
 8007694:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 8007696:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8007698:	2b01      	cmp	r3, #1
 800769a:	d03b      	beq.n	8007714 <HAL_UART_Transmit+0xb8>
 800769c:	2301      	movs	r3, #1
 800769e:	9a03      	ldr	r2, [sp, #12]
 80076a0:	7013      	strb	r3, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a2:	2200      	movs	r2, #0
 80076a4:	1d23      	adds	r3, r4, #4
 80076a6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076a8:	2321      	movs	r3, #33	; 0x21
 80076aa:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 80076ac:	f7fd fd04 	bl	80050b8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80076b0:	0023      	movs	r3, r4
 80076b2:	3350      	adds	r3, #80	; 0x50
 80076b4:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 80076b6:	3302      	adds	r3, #2
 80076b8:	801e      	strh	r6, [r3, #0]
 80076ba:	9304      	str	r3, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076bc:	2380      	movs	r3, #128	; 0x80
 80076be:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80076c0:	0007      	movs	r7, r0
      pdata16bits = NULL;
 80076c2:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c4:	015b      	lsls	r3, r3, #5
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d104      	bne.n	80076d4 <HAL_UART_Transmit+0x78>
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	42b3      	cmp	r3, r6
 80076ce:	d101      	bne.n	80076d4 <HAL_UART_Transmit+0x78>
 80076d0:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80076d2:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 80076d4:	2300      	movs	r3, #0
 80076d6:	9a03      	ldr	r2, [sp, #12]
 80076d8:	7013      	strb	r3, [r2, #0]
    while (huart->TxXferCount > 0U)
 80076da:	0023      	movs	r3, r4
 80076dc:	3352      	adds	r3, #82	; 0x52
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10b      	bne.n	80076fe <HAL_UART_Transmit+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076e6:	9b05      	ldr	r3, [sp, #20]
 80076e8:	2140      	movs	r1, #64	; 0x40
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	0020      	movs	r0, r4
 80076ee:	003b      	movs	r3, r7
 80076f0:	f7ff ff6c 	bl	80075cc <UART_WaitOnFlagUntilTimeout>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	d10c      	bne.n	8007712 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80076f8:	2320      	movs	r3, #32
 80076fa:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80076fc:	e00a      	b.n	8007714 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076fe:	9b05      	ldr	r3, [sp, #20]
 8007700:	2200      	movs	r2, #0
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	2180      	movs	r1, #128	; 0x80
 8007706:	003b      	movs	r3, r7
 8007708:	0020      	movs	r0, r4
 800770a:	f7ff ff5f 	bl	80075cc <UART_WaitOnFlagUntilTimeout>
 800770e:	2800      	cmp	r0, #0
 8007710:	d002      	beq.n	8007718 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 8007712:	2003      	movs	r0, #3
}
 8007714:	b007      	add	sp, #28
 8007716:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdata8bits == NULL)
 8007718:	6822      	ldr	r2, [r4, #0]
 800771a:	2d00      	cmp	r5, #0
 800771c:	d10b      	bne.n	8007736 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800771e:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8007720:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007722:	05db      	lsls	r3, r3, #23
 8007724:	0ddb      	lsrs	r3, r3, #23
 8007726:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8007728:	9b04      	ldr	r3, [sp, #16]
 800772a:	9a04      	ldr	r2, [sp, #16]
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	3b01      	subs	r3, #1
 8007730:	b29b      	uxth	r3, r3
 8007732:	8013      	strh	r3, [r2, #0]
 8007734:	e7d1      	b.n	80076da <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007736:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8007738:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800773a:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 800773c:	e7f4      	b.n	8007728 <HAL_UART_Transmit+0xcc>
	...

08007740 <UART_CheckIdleState>:
{
 8007740:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007742:	2600      	movs	r6, #0
{
 8007744:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007746:	1d03      	adds	r3, r0, #4
 8007748:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800774a:	f7fd fcb5 	bl	80050b8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800774e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007750:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	071b      	lsls	r3, r3, #28
 8007756:	d416      	bmi.n	8007786 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	075b      	lsls	r3, r3, #29
 800775e:	d50a      	bpl.n	8007776 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007760:	2180      	movs	r1, #128	; 0x80
 8007762:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <UART_CheckIdleState+0x60>)
 8007764:	2200      	movs	r2, #0
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	0020      	movs	r0, r4
 800776a:	002b      	movs	r3, r5
 800776c:	03c9      	lsls	r1, r1, #15
 800776e:	f7ff ff2d 	bl	80075cc <UART_WaitOnFlagUntilTimeout>
 8007772:	2800      	cmp	r0, #0
 8007774:	d112      	bne.n	800779c <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8007776:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007778:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800777a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800777c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777e:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8007780:	3474      	adds	r4, #116	; 0x74
 8007782:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8007784:	e00b      	b.n	800779e <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007786:	2180      	movs	r1, #128	; 0x80
 8007788:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <UART_CheckIdleState+0x60>)
 800778a:	0032      	movs	r2, r6
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	0389      	lsls	r1, r1, #14
 8007790:	0003      	movs	r3, r0
 8007792:	0020      	movs	r0, r4
 8007794:	f7ff ff1a 	bl	80075cc <UART_WaitOnFlagUntilTimeout>
 8007798:	2800      	cmp	r0, #0
 800779a:	d0dd      	beq.n	8007758 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800779c:	2003      	movs	r0, #3
}
 800779e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80077a0:	01ffffff 	.word	0x01ffffff

080077a4 <HAL_UART_Init>:
{
 80077a4:	b510      	push	{r4, lr}
 80077a6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80077a8:	d101      	bne.n	80077ae <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80077aa:	2001      	movs	r0, #1
}
 80077ac:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80077ae:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d104      	bne.n	80077be <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80077b4:	0002      	movs	r2, r0
 80077b6:	3274      	adds	r2, #116	; 0x74
 80077b8:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80077ba:	f7fc ff51 	bl	8004660 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80077be:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80077c0:	2101      	movs	r1, #1
 80077c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80077c4:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80077c6:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077c8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80077ca:	438b      	bics	r3, r1
 80077cc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077ce:	f7ff fd89 	bl	80072e4 <UART_SetConfig>
 80077d2:	2801      	cmp	r0, #1
 80077d4:	d0e9      	beq.n	80077aa <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80077dc:	0020      	movs	r0, r4
 80077de:	f7ff fe8d 	bl	80074fc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	4907      	ldr	r1, [pc, #28]	; (8007804 <HAL_UART_Init+0x60>)
 80077e6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80077e8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077ea:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077ec:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077f0:	689a      	ldr	r2, [r3, #8]
 80077f2:	438a      	bics	r2, r1
 80077f4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80077f6:	2201      	movs	r2, #1
 80077f8:	6819      	ldr	r1, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80077fe:	f7ff ff9f 	bl	8007740 <UART_CheckIdleState>
 8007802:	e7d3      	b.n	80077ac <HAL_UART_Init+0x8>
 8007804:	ffffb7ff 	.word	0xffffb7ff

08007808 <UART_Start_Receive_DMA>:
{
 8007808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800780a:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 800780c:	0002      	movs	r2, r0
{
 800780e:	0004      	movs	r4, r0
  huart->RxXferSize = Size;
 8007810:	3258      	adds	r2, #88	; 0x58
  huart->pRxBuffPtr = pData;
 8007812:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007814:	2500      	movs	r5, #0
  huart->RxXferSize = Size;
 8007816:	8013      	strh	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007818:	2222      	movs	r2, #34	; 0x22
 800781a:	0026      	movs	r6, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800781c:	1d07      	adds	r7, r0, #4
 800781e:	67fd      	str	r5, [r7, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007820:	67c2      	str	r2, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 8007822:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8007824:	3674      	adds	r6, #116	; 0x74
 8007826:	42a8      	cmp	r0, r5
 8007828:	d018      	beq.n	800785c <UART_Start_Receive_DMA+0x54>
 800782a:	6822      	ldr	r2, [r4, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 800782c:	6385      	str	r5, [r0, #56]	; 0x38
 800782e:	9201      	str	r2, [sp, #4]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007830:	4a13      	ldr	r2, [pc, #76]	; (8007880 <UART_Start_Receive_DMA+0x78>)
 8007832:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007834:	4a13      	ldr	r2, [pc, #76]	; (8007884 <UART_Start_Receive_DMA+0x7c>)
 8007836:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007838:	4a13      	ldr	r2, [pc, #76]	; (8007888 <UART_Start_Receive_DMA+0x80>)
 800783a:	6342      	str	r2, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800783c:	9a01      	ldr	r2, [sp, #4]
 800783e:	3224      	adds	r2, #36	; 0x24
 8007840:	4694      	mov	ip, r2
 8007842:	000a      	movs	r2, r1
 8007844:	4661      	mov	r1, ip
 8007846:	f7fd ff4d 	bl	80056e4 <HAL_DMA_Start_IT>
 800784a:	42a8      	cmp	r0, r5
 800784c:	d006      	beq.n	800785c <UART_Start_Receive_DMA+0x54>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800784e:	2310      	movs	r3, #16
      return HAL_ERROR;
 8007850:	2001      	movs	r0, #1
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007852:	67fb      	str	r3, [r7, #124]	; 0x7c
      huart->gState = HAL_UART_STATE_READY;
 8007854:	18db      	adds	r3, r3, r3
      __HAL_UNLOCK(huart);
 8007856:	7035      	strb	r5, [r6, #0]
      huart->gState = HAL_UART_STATE_READY;
 8007858:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800785a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  __HAL_UNLOCK(huart);
 800785c:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800785e:	2280      	movs	r2, #128	; 0x80
  __HAL_UNLOCK(huart);
 8007860:	7030      	strb	r0, [r6, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	0052      	lsls	r2, r2, #1
 8007866:	6819      	ldr	r1, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	601a      	str	r2, [r3, #0]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786c:	2201      	movs	r2, #1
 800786e:	6899      	ldr	r1, [r3, #8]
 8007870:	430a      	orrs	r2, r1
 8007872:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007874:	2240      	movs	r2, #64	; 0x40
 8007876:	6899      	ldr	r1, [r3, #8]
 8007878:	430a      	orrs	r2, r1
 800787a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800787c:	e7ed      	b.n	800785a <UART_Start_Receive_DMA+0x52>
 800787e:	46c0      	nop			; (mov r8, r8)
 8007880:	08007281 	.word	0x08007281
 8007884:	08007261 	.word	0x08007261
 8007888:	08006fc5 	.word	0x08006fc5

0800788c <HAL_UART_Receive_DMA>:
{
 800788c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800788e:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 8007890:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8007892:	2c20      	cmp	r4, #32
 8007894:	d129      	bne.n	80078ea <HAL_UART_Receive_DMA+0x5e>
      return HAL_ERROR;
 8007896:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8007898:	2900      	cmp	r1, #0
 800789a:	d026      	beq.n	80078ea <HAL_UART_Receive_DMA+0x5e>
 800789c:	2a00      	cmp	r2, #0
 800789e:	d024      	beq.n	80078ea <HAL_UART_Receive_DMA+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078a0:	2380      	movs	r3, #128	; 0x80
 80078a2:	6884      	ldr	r4, [r0, #8]
 80078a4:	015b      	lsls	r3, r3, #5
 80078a6:	429c      	cmp	r4, r3
 80078a8:	d106      	bne.n	80078b8 <HAL_UART_Receive_DMA+0x2c>
 80078aa:	6903      	ldr	r3, [r0, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d103      	bne.n	80078b8 <HAL_UART_Receive_DMA+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 80078b0:	2401      	movs	r4, #1
      return HAL_ERROR;
 80078b2:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 80078b4:	4221      	tst	r1, r4
 80078b6:	d118      	bne.n	80078ea <HAL_UART_Receive_DMA+0x5e>
    __HAL_LOCK(huart);
 80078b8:	0004      	movs	r4, r0
 80078ba:	3474      	adds	r4, #116	; 0x74
 80078bc:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 80078be:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 80078c0:	2d01      	cmp	r5, #1
 80078c2:	d012      	beq.n	80078ea <HAL_UART_Receive_DMA+0x5e>
 80078c4:	3b01      	subs	r3, #1
 80078c6:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c8:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078ca:	4c09      	ldr	r4, [pc, #36]	; (80078f0 <HAL_UART_Receive_DMA+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078cc:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078ce:	6803      	ldr	r3, [r0, #0]
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	d007      	beq.n	80078e4 <HAL_UART_Receive_DMA+0x58>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078d4:	685c      	ldr	r4, [r3, #4]
 80078d6:	0224      	lsls	r4, r4, #8
 80078d8:	d504      	bpl.n	80078e4 <HAL_UART_Receive_DMA+0x58>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078da:	2480      	movs	r4, #128	; 0x80
 80078dc:	681d      	ldr	r5, [r3, #0]
 80078de:	04e4      	lsls	r4, r4, #19
 80078e0:	432c      	orrs	r4, r5
 80078e2:	601c      	str	r4, [r3, #0]
    return(UART_Start_Receive_DMA(huart, pData, Size));
 80078e4:	f7ff ff90 	bl	8007808 <UART_Start_Receive_DMA>
 80078e8:	0003      	movs	r3, r0
}
 80078ea:	0018      	movs	r0, r3
 80078ec:	bd70      	pop	{r4, r5, r6, pc}
 80078ee:	46c0      	nop			; (mov r8, r8)
 80078f0:	40004800 	.word	0x40004800

080078f4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078f4:	4770      	bx	lr

080078f6 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80078f6:	b510      	push	{r4, lr}
 80078f8:	0004      	movs	r4, r0
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
  {
    return HAL_ERROR;
 80078fa:	2001      	movs	r0, #1
  if (hwwdg == NULL)
 80078fc:	2c00      	cmp	r4, #0
 80078fe:	d00e      	beq.n	800791e <HAL_WWDG_Init+0x28>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8007900:	0020      	movs	r0, r4
 8007902:	f7fc feff 	bl	8004704 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8007906:	2380      	movs	r3, #128	; 0x80

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));

  /* Return function status */
  return HAL_OK;
 8007908:	2000      	movs	r0, #0
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800790a:	68e1      	ldr	r1, [r4, #12]
 800790c:	6822      	ldr	r2, [r4, #0]
 800790e:	430b      	orrs	r3, r1
 8007910:	6013      	str	r3, [r2, #0]
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8007912:	6861      	ldr	r1, [r4, #4]
 8007914:	6923      	ldr	r3, [r4, #16]
 8007916:	430b      	orrs	r3, r1
 8007918:	68a1      	ldr	r1, [r4, #8]
 800791a:	430b      	orrs	r3, r1
 800791c:	6053      	str	r3, [r2, #4]
}
 800791e:	bd10      	pop	{r4, pc}

08007920 <HAL_WWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8007920:	6803      	ldr	r3, [r0, #0]
 8007922:	68c2      	ldr	r2, [r0, #12]

  /* Return function status */
  return HAL_OK;
}
 8007924:	2000      	movs	r0, #0
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8007926:	601a      	str	r2, [r3, #0]
}
 8007928:	4770      	bx	lr
	...

0800792c <__errno>:
 800792c:	4b01      	ldr	r3, [pc, #4]	; (8007934 <__errno+0x8>)
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	4770      	bx	lr
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	20000024 	.word	0x20000024

08007938 <__libc_init_array>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	2600      	movs	r6, #0
 800793c:	4d0c      	ldr	r5, [pc, #48]	; (8007970 <__libc_init_array+0x38>)
 800793e:	4c0d      	ldr	r4, [pc, #52]	; (8007974 <__libc_init_array+0x3c>)
 8007940:	1b64      	subs	r4, r4, r5
 8007942:	10a4      	asrs	r4, r4, #2
 8007944:	42a6      	cmp	r6, r4
 8007946:	d109      	bne.n	800795c <__libc_init_array+0x24>
 8007948:	2600      	movs	r6, #0
 800794a:	f003 f891 	bl	800aa70 <_init>
 800794e:	4d0a      	ldr	r5, [pc, #40]	; (8007978 <__libc_init_array+0x40>)
 8007950:	4c0a      	ldr	r4, [pc, #40]	; (800797c <__libc_init_array+0x44>)
 8007952:	1b64      	subs	r4, r4, r5
 8007954:	10a4      	asrs	r4, r4, #2
 8007956:	42a6      	cmp	r6, r4
 8007958:	d105      	bne.n	8007966 <__libc_init_array+0x2e>
 800795a:	bd70      	pop	{r4, r5, r6, pc}
 800795c:	00b3      	lsls	r3, r6, #2
 800795e:	58eb      	ldr	r3, [r5, r3]
 8007960:	4798      	blx	r3
 8007962:	3601      	adds	r6, #1
 8007964:	e7ee      	b.n	8007944 <__libc_init_array+0xc>
 8007966:	00b3      	lsls	r3, r6, #2
 8007968:	58eb      	ldr	r3, [r5, r3]
 800796a:	4798      	blx	r3
 800796c:	3601      	adds	r6, #1
 800796e:	e7f2      	b.n	8007956 <__libc_init_array+0x1e>
 8007970:	0800b3cc 	.word	0x0800b3cc
 8007974:	0800b3cc 	.word	0x0800b3cc
 8007978:	0800b3cc 	.word	0x0800b3cc
 800797c:	0800b3d0 	.word	0x0800b3d0

08007980 <memcpy>:
 8007980:	2300      	movs	r3, #0
 8007982:	b510      	push	{r4, lr}
 8007984:	429a      	cmp	r2, r3
 8007986:	d100      	bne.n	800798a <memcpy+0xa>
 8007988:	bd10      	pop	{r4, pc}
 800798a:	5ccc      	ldrb	r4, [r1, r3]
 800798c:	54c4      	strb	r4, [r0, r3]
 800798e:	3301      	adds	r3, #1
 8007990:	e7f8      	b.n	8007984 <memcpy+0x4>

08007992 <memset>:
 8007992:	0003      	movs	r3, r0
 8007994:	1882      	adds	r2, r0, r2
 8007996:	4293      	cmp	r3, r2
 8007998:	d100      	bne.n	800799c <memset+0xa>
 800799a:	4770      	bx	lr
 800799c:	7019      	strb	r1, [r3, #0]
 800799e:	3301      	adds	r3, #1
 80079a0:	e7f9      	b.n	8007996 <memset+0x4>

080079a2 <__cvt>:
 80079a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079a4:	001e      	movs	r6, r3
 80079a6:	2300      	movs	r3, #0
 80079a8:	0014      	movs	r4, r2
 80079aa:	b08b      	sub	sp, #44	; 0x2c
 80079ac:	429e      	cmp	r6, r3
 80079ae:	da04      	bge.n	80079ba <__cvt+0x18>
 80079b0:	2180      	movs	r1, #128	; 0x80
 80079b2:	0609      	lsls	r1, r1, #24
 80079b4:	1873      	adds	r3, r6, r1
 80079b6:	001e      	movs	r6, r3
 80079b8:	232d      	movs	r3, #45	; 0x2d
 80079ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079bc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80079be:	7013      	strb	r3, [r2, #0]
 80079c0:	2320      	movs	r3, #32
 80079c2:	2203      	movs	r2, #3
 80079c4:	439f      	bics	r7, r3
 80079c6:	2f46      	cmp	r7, #70	; 0x46
 80079c8:	d007      	beq.n	80079da <__cvt+0x38>
 80079ca:	003b      	movs	r3, r7
 80079cc:	3b45      	subs	r3, #69	; 0x45
 80079ce:	4259      	negs	r1, r3
 80079d0:	414b      	adcs	r3, r1
 80079d2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80079d4:	3a01      	subs	r2, #1
 80079d6:	18cb      	adds	r3, r1, r3
 80079d8:	9310      	str	r3, [sp, #64]	; 0x40
 80079da:	ab09      	add	r3, sp, #36	; 0x24
 80079dc:	9304      	str	r3, [sp, #16]
 80079de:	ab08      	add	r3, sp, #32
 80079e0:	9303      	str	r3, [sp, #12]
 80079e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079e4:	9200      	str	r2, [sp, #0]
 80079e6:	9302      	str	r3, [sp, #8]
 80079e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079ea:	0022      	movs	r2, r4
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	0033      	movs	r3, r6
 80079f0:	f000 fe56 	bl	80086a0 <_dtoa_r>
 80079f4:	0005      	movs	r5, r0
 80079f6:	2f47      	cmp	r7, #71	; 0x47
 80079f8:	d102      	bne.n	8007a00 <__cvt+0x5e>
 80079fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079fc:	07db      	lsls	r3, r3, #31
 80079fe:	d528      	bpl.n	8007a52 <__cvt+0xb0>
 8007a00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a02:	18eb      	adds	r3, r5, r3
 8007a04:	9307      	str	r3, [sp, #28]
 8007a06:	2f46      	cmp	r7, #70	; 0x46
 8007a08:	d114      	bne.n	8007a34 <__cvt+0x92>
 8007a0a:	782b      	ldrb	r3, [r5, #0]
 8007a0c:	2b30      	cmp	r3, #48	; 0x30
 8007a0e:	d10c      	bne.n	8007a2a <__cvt+0x88>
 8007a10:	2200      	movs	r2, #0
 8007a12:	2300      	movs	r3, #0
 8007a14:	0020      	movs	r0, r4
 8007a16:	0031      	movs	r1, r6
 8007a18:	f7f8 fd18 	bl	800044c <__aeabi_dcmpeq>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d104      	bne.n	8007a2a <__cvt+0x88>
 8007a20:	2301      	movs	r3, #1
 8007a22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a24:	1a9b      	subs	r3, r3, r2
 8007a26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a2c:	9a07      	ldr	r2, [sp, #28]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	18d3      	adds	r3, r2, r3
 8007a32:	9307      	str	r3, [sp, #28]
 8007a34:	2200      	movs	r2, #0
 8007a36:	2300      	movs	r3, #0
 8007a38:	0020      	movs	r0, r4
 8007a3a:	0031      	movs	r1, r6
 8007a3c:	f7f8 fd06 	bl	800044c <__aeabi_dcmpeq>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d001      	beq.n	8007a48 <__cvt+0xa6>
 8007a44:	9b07      	ldr	r3, [sp, #28]
 8007a46:	9309      	str	r3, [sp, #36]	; 0x24
 8007a48:	2230      	movs	r2, #48	; 0x30
 8007a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4c:	9907      	ldr	r1, [sp, #28]
 8007a4e:	428b      	cmp	r3, r1
 8007a50:	d306      	bcc.n	8007a60 <__cvt+0xbe>
 8007a52:	0028      	movs	r0, r5
 8007a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007a58:	1b5b      	subs	r3, r3, r5
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	b00b      	add	sp, #44	; 0x2c
 8007a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a60:	1c59      	adds	r1, r3, #1
 8007a62:	9109      	str	r1, [sp, #36]	; 0x24
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	e7f0      	b.n	8007a4a <__cvt+0xa8>

08007a68 <__exponent>:
 8007a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a6a:	1c83      	adds	r3, r0, #2
 8007a6c:	b087      	sub	sp, #28
 8007a6e:	9303      	str	r3, [sp, #12]
 8007a70:	0005      	movs	r5, r0
 8007a72:	000c      	movs	r4, r1
 8007a74:	232b      	movs	r3, #43	; 0x2b
 8007a76:	7002      	strb	r2, [r0, #0]
 8007a78:	2900      	cmp	r1, #0
 8007a7a:	da01      	bge.n	8007a80 <__exponent+0x18>
 8007a7c:	424c      	negs	r4, r1
 8007a7e:	3302      	adds	r3, #2
 8007a80:	706b      	strb	r3, [r5, #1]
 8007a82:	2c09      	cmp	r4, #9
 8007a84:	dd31      	ble.n	8007aea <__exponent+0x82>
 8007a86:	270a      	movs	r7, #10
 8007a88:	ab04      	add	r3, sp, #16
 8007a8a:	1dde      	adds	r6, r3, #7
 8007a8c:	0020      	movs	r0, r4
 8007a8e:	0039      	movs	r1, r7
 8007a90:	9601      	str	r6, [sp, #4]
 8007a92:	f7f8 fcc5 	bl	8000420 <__aeabi_idivmod>
 8007a96:	3e01      	subs	r6, #1
 8007a98:	3130      	adds	r1, #48	; 0x30
 8007a9a:	0020      	movs	r0, r4
 8007a9c:	7031      	strb	r1, [r6, #0]
 8007a9e:	0039      	movs	r1, r7
 8007aa0:	9402      	str	r4, [sp, #8]
 8007aa2:	f7f8 fbd7 	bl	8000254 <__divsi3>
 8007aa6:	9b02      	ldr	r3, [sp, #8]
 8007aa8:	0004      	movs	r4, r0
 8007aaa:	2b63      	cmp	r3, #99	; 0x63
 8007aac:	dcee      	bgt.n	8007a8c <__exponent+0x24>
 8007aae:	9b01      	ldr	r3, [sp, #4]
 8007ab0:	3430      	adds	r4, #48	; 0x30
 8007ab2:	1e9a      	subs	r2, r3, #2
 8007ab4:	0013      	movs	r3, r2
 8007ab6:	9903      	ldr	r1, [sp, #12]
 8007ab8:	7014      	strb	r4, [r2, #0]
 8007aba:	a804      	add	r0, sp, #16
 8007abc:	3007      	adds	r0, #7
 8007abe:	4298      	cmp	r0, r3
 8007ac0:	d80e      	bhi.n	8007ae0 <__exponent+0x78>
 8007ac2:	ab04      	add	r3, sp, #16
 8007ac4:	3307      	adds	r3, #7
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d804      	bhi.n	8007ad6 <__exponent+0x6e>
 8007acc:	ab04      	add	r3, sp, #16
 8007ace:	3009      	adds	r0, #9
 8007ad0:	18c0      	adds	r0, r0, r3
 8007ad2:	9b01      	ldr	r3, [sp, #4]
 8007ad4:	1ac0      	subs	r0, r0, r3
 8007ad6:	9b03      	ldr	r3, [sp, #12]
 8007ad8:	1818      	adds	r0, r3, r0
 8007ada:	1b40      	subs	r0, r0, r5
 8007adc:	b007      	add	sp, #28
 8007ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ae0:	7818      	ldrb	r0, [r3, #0]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	7008      	strb	r0, [r1, #0]
 8007ae6:	3101      	adds	r1, #1
 8007ae8:	e7e7      	b.n	8007aba <__exponent+0x52>
 8007aea:	2330      	movs	r3, #48	; 0x30
 8007aec:	18e4      	adds	r4, r4, r3
 8007aee:	70ab      	strb	r3, [r5, #2]
 8007af0:	1d28      	adds	r0, r5, #4
 8007af2:	70ec      	strb	r4, [r5, #3]
 8007af4:	e7f1      	b.n	8007ada <__exponent+0x72>
	...

08007af8 <_printf_float>:
 8007af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007afa:	b095      	sub	sp, #84	; 0x54
 8007afc:	000c      	movs	r4, r1
 8007afe:	9208      	str	r2, [sp, #32]
 8007b00:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007b02:	9309      	str	r3, [sp, #36]	; 0x24
 8007b04:	0007      	movs	r7, r0
 8007b06:	f001 fdb7 	bl	8009678 <_localeconv_r>
 8007b0a:	6803      	ldr	r3, [r0, #0]
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b10:	f7f8 fafa 	bl	8000108 <strlen>
 8007b14:	2300      	movs	r3, #0
 8007b16:	9312      	str	r3, [sp, #72]	; 0x48
 8007b18:	7e23      	ldrb	r3, [r4, #24]
 8007b1a:	2207      	movs	r2, #7
 8007b1c:	001e      	movs	r6, r3
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	900d      	str	r0, [sp, #52]	; 0x34
 8007b22:	930c      	str	r3, [sp, #48]	; 0x30
 8007b24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b26:	682b      	ldr	r3, [r5, #0]
 8007b28:	05c9      	lsls	r1, r1, #23
 8007b2a:	d547      	bpl.n	8007bbc <_printf_float+0xc4>
 8007b2c:	189b      	adds	r3, r3, r2
 8007b2e:	4393      	bics	r3, r2
 8007b30:	001a      	movs	r2, r3
 8007b32:	3208      	adds	r2, #8
 8007b34:	602a      	str	r2, [r5, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	64a2      	str	r2, [r4, #72]	; 0x48
 8007b3c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007b3e:	2201      	movs	r2, #1
 8007b40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007b42:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007b44:	930a      	str	r3, [sp, #40]	; 0x28
 8007b46:	006b      	lsls	r3, r5, #1
 8007b48:	085b      	lsrs	r3, r3, #1
 8007b4a:	930e      	str	r3, [sp, #56]	; 0x38
 8007b4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b4e:	4ba8      	ldr	r3, [pc, #672]	; (8007df0 <_printf_float+0x2f8>)
 8007b50:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007b52:	4252      	negs	r2, r2
 8007b54:	f7fb fa20 	bl	8002f98 <__aeabi_dcmpun>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d131      	bne.n	8007bc0 <_printf_float+0xc8>
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	4ba4      	ldr	r3, [pc, #656]	; (8007df0 <_printf_float+0x2f8>)
 8007b60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b62:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007b64:	4252      	negs	r2, r2
 8007b66:	f7f8 fc81 	bl	800046c <__aeabi_dcmple>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d128      	bne.n	8007bc0 <_printf_float+0xc8>
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2300      	movs	r3, #0
 8007b72:	0029      	movs	r1, r5
 8007b74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b76:	f7f8 fc6f 	bl	8000458 <__aeabi_dcmplt>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d003      	beq.n	8007b86 <_printf_float+0x8e>
 8007b7e:	0023      	movs	r3, r4
 8007b80:	222d      	movs	r2, #45	; 0x2d
 8007b82:	3343      	adds	r3, #67	; 0x43
 8007b84:	701a      	strb	r2, [r3, #0]
 8007b86:	4d9b      	ldr	r5, [pc, #620]	; (8007df4 <_printf_float+0x2fc>)
 8007b88:	2e47      	cmp	r6, #71	; 0x47
 8007b8a:	d900      	bls.n	8007b8e <_printf_float+0x96>
 8007b8c:	4d9a      	ldr	r5, [pc, #616]	; (8007df8 <_printf_float+0x300>)
 8007b8e:	2303      	movs	r3, #3
 8007b90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b92:	6123      	str	r3, [r4, #16]
 8007b94:	3301      	adds	r3, #1
 8007b96:	439a      	bics	r2, r3
 8007b98:	2300      	movs	r3, #0
 8007b9a:	6022      	str	r2, [r4, #0]
 8007b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8007b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba0:	0021      	movs	r1, r4
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	0038      	movs	r0, r7
 8007ba6:	9b08      	ldr	r3, [sp, #32]
 8007ba8:	aa13      	add	r2, sp, #76	; 0x4c
 8007baa:	f000 f9f3 	bl	8007f94 <_printf_common>
 8007bae:	1c43      	adds	r3, r0, #1
 8007bb0:	d000      	beq.n	8007bb4 <_printf_float+0xbc>
 8007bb2:	e09e      	b.n	8007cf2 <_printf_float+0x1fa>
 8007bb4:	2001      	movs	r0, #1
 8007bb6:	4240      	negs	r0, r0
 8007bb8:	b015      	add	sp, #84	; 0x54
 8007bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bbc:	3307      	adds	r3, #7
 8007bbe:	e7b6      	b.n	8007b2e <_printf_float+0x36>
 8007bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bc2:	002b      	movs	r3, r5
 8007bc4:	0010      	movs	r0, r2
 8007bc6:	0029      	movs	r1, r5
 8007bc8:	f7fb f9e6 	bl	8002f98 <__aeabi_dcmpun>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d00a      	beq.n	8007be6 <_printf_float+0xee>
 8007bd0:	2d00      	cmp	r5, #0
 8007bd2:	da03      	bge.n	8007bdc <_printf_float+0xe4>
 8007bd4:	0023      	movs	r3, r4
 8007bd6:	222d      	movs	r2, #45	; 0x2d
 8007bd8:	3343      	adds	r3, #67	; 0x43
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	4d87      	ldr	r5, [pc, #540]	; (8007dfc <_printf_float+0x304>)
 8007bde:	2e47      	cmp	r6, #71	; 0x47
 8007be0:	d9d5      	bls.n	8007b8e <_printf_float+0x96>
 8007be2:	4d87      	ldr	r5, [pc, #540]	; (8007e00 <_printf_float+0x308>)
 8007be4:	e7d3      	b.n	8007b8e <_printf_float+0x96>
 8007be6:	2220      	movs	r2, #32
 8007be8:	0031      	movs	r1, r6
 8007bea:	6863      	ldr	r3, [r4, #4]
 8007bec:	4391      	bics	r1, r2
 8007bee:	910e      	str	r1, [sp, #56]	; 0x38
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	d147      	bne.n	8007c84 <_printf_float+0x18c>
 8007bf4:	3307      	adds	r3, #7
 8007bf6:	6063      	str	r3, [r4, #4]
 8007bf8:	2380      	movs	r3, #128	; 0x80
 8007bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bfc:	00db      	lsls	r3, r3, #3
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	2200      	movs	r2, #0
 8007c02:	9206      	str	r2, [sp, #24]
 8007c04:	aa12      	add	r2, sp, #72	; 0x48
 8007c06:	9205      	str	r2, [sp, #20]
 8007c08:	aa11      	add	r2, sp, #68	; 0x44
 8007c0a:	9203      	str	r2, [sp, #12]
 8007c0c:	2223      	movs	r2, #35	; 0x23
 8007c0e:	a908      	add	r1, sp, #32
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	9301      	str	r3, [sp, #4]
 8007c14:	6863      	ldr	r3, [r4, #4]
 8007c16:	1852      	adds	r2, r2, r1
 8007c18:	9202      	str	r2, [sp, #8]
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	0038      	movs	r0, r7
 8007c1e:	002b      	movs	r3, r5
 8007c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c22:	9604      	str	r6, [sp, #16]
 8007c24:	f7ff febd 	bl	80079a2 <__cvt>
 8007c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c2a:	0005      	movs	r5, r0
 8007c2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007c2e:	2b47      	cmp	r3, #71	; 0x47
 8007c30:	d108      	bne.n	8007c44 <_printf_float+0x14c>
 8007c32:	1ccb      	adds	r3, r1, #3
 8007c34:	db02      	blt.n	8007c3c <_printf_float+0x144>
 8007c36:	6863      	ldr	r3, [r4, #4]
 8007c38:	4299      	cmp	r1, r3
 8007c3a:	dd46      	ble.n	8007cca <_printf_float+0x1d2>
 8007c3c:	0033      	movs	r3, r6
 8007c3e:	3b02      	subs	r3, #2
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	001e      	movs	r6, r3
 8007c44:	2e65      	cmp	r6, #101	; 0x65
 8007c46:	d824      	bhi.n	8007c92 <_printf_float+0x19a>
 8007c48:	0020      	movs	r0, r4
 8007c4a:	0032      	movs	r2, r6
 8007c4c:	3901      	subs	r1, #1
 8007c4e:	3050      	adds	r0, #80	; 0x50
 8007c50:	9111      	str	r1, [sp, #68]	; 0x44
 8007c52:	f7ff ff09 	bl	8007a68 <__exponent>
 8007c56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c58:	900a      	str	r0, [sp, #40]	; 0x28
 8007c5a:	1813      	adds	r3, r2, r0
 8007c5c:	6123      	str	r3, [r4, #16]
 8007c5e:	2a01      	cmp	r2, #1
 8007c60:	dc02      	bgt.n	8007c68 <_printf_float+0x170>
 8007c62:	6822      	ldr	r2, [r4, #0]
 8007c64:	07d2      	lsls	r2, r2, #31
 8007c66:	d501      	bpl.n	8007c6c <_printf_float+0x174>
 8007c68:	3301      	adds	r3, #1
 8007c6a:	6123      	str	r3, [r4, #16]
 8007c6c:	2323      	movs	r3, #35	; 0x23
 8007c6e:	aa08      	add	r2, sp, #32
 8007c70:	189b      	adds	r3, r3, r2
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d100      	bne.n	8007c7a <_printf_float+0x182>
 8007c78:	e791      	b.n	8007b9e <_printf_float+0xa6>
 8007c7a:	0023      	movs	r3, r4
 8007c7c:	222d      	movs	r2, #45	; 0x2d
 8007c7e:	3343      	adds	r3, #67	; 0x43
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	e78c      	b.n	8007b9e <_printf_float+0xa6>
 8007c84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c86:	2a47      	cmp	r2, #71	; 0x47
 8007c88:	d1b6      	bne.n	8007bf8 <_printf_float+0x100>
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1b4      	bne.n	8007bf8 <_printf_float+0x100>
 8007c8e:	3301      	adds	r3, #1
 8007c90:	e7b1      	b.n	8007bf6 <_printf_float+0xfe>
 8007c92:	2e66      	cmp	r6, #102	; 0x66
 8007c94:	d11b      	bne.n	8007cce <_printf_float+0x1d6>
 8007c96:	6863      	ldr	r3, [r4, #4]
 8007c98:	2900      	cmp	r1, #0
 8007c9a:	dd0d      	ble.n	8007cb8 <_printf_float+0x1c0>
 8007c9c:	6121      	str	r1, [r4, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d102      	bne.n	8007ca8 <_printf_float+0x1b0>
 8007ca2:	6822      	ldr	r2, [r4, #0]
 8007ca4:	07d2      	lsls	r2, r2, #31
 8007ca6:	d502      	bpl.n	8007cae <_printf_float+0x1b6>
 8007ca8:	3301      	adds	r3, #1
 8007caa:	1859      	adds	r1, r3, r1
 8007cac:	6121      	str	r1, [r4, #16]
 8007cae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cb0:	65a3      	str	r3, [r4, #88]	; 0x58
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	930a      	str	r3, [sp, #40]	; 0x28
 8007cb6:	e7d9      	b.n	8007c6c <_printf_float+0x174>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d103      	bne.n	8007cc4 <_printf_float+0x1cc>
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	6821      	ldr	r1, [r4, #0]
 8007cc0:	4211      	tst	r1, r2
 8007cc2:	d000      	beq.n	8007cc6 <_printf_float+0x1ce>
 8007cc4:	1c9a      	adds	r2, r3, #2
 8007cc6:	6122      	str	r2, [r4, #16]
 8007cc8:	e7f1      	b.n	8007cae <_printf_float+0x1b6>
 8007cca:	2367      	movs	r3, #103	; 0x67
 8007ccc:	001e      	movs	r6, r3
 8007cce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	db06      	blt.n	8007ce4 <_printf_float+0x1ec>
 8007cd6:	6822      	ldr	r2, [r4, #0]
 8007cd8:	6123      	str	r3, [r4, #16]
 8007cda:	07d2      	lsls	r2, r2, #31
 8007cdc:	d5e7      	bpl.n	8007cae <_printf_float+0x1b6>
 8007cde:	3301      	adds	r3, #1
 8007ce0:	6123      	str	r3, [r4, #16]
 8007ce2:	e7e4      	b.n	8007cae <_printf_float+0x1b6>
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	dc01      	bgt.n	8007cee <_printf_float+0x1f6>
 8007cea:	1849      	adds	r1, r1, r1
 8007cec:	1ac9      	subs	r1, r1, r3
 8007cee:	1852      	adds	r2, r2, r1
 8007cf0:	e7e9      	b.n	8007cc6 <_printf_float+0x1ce>
 8007cf2:	6822      	ldr	r2, [r4, #0]
 8007cf4:	0553      	lsls	r3, r2, #21
 8007cf6:	d408      	bmi.n	8007d0a <_printf_float+0x212>
 8007cf8:	6923      	ldr	r3, [r4, #16]
 8007cfa:	002a      	movs	r2, r5
 8007cfc:	0038      	movs	r0, r7
 8007cfe:	9908      	ldr	r1, [sp, #32]
 8007d00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007d02:	47a8      	blx	r5
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d129      	bne.n	8007d5c <_printf_float+0x264>
 8007d08:	e754      	b.n	8007bb4 <_printf_float+0xbc>
 8007d0a:	2e65      	cmp	r6, #101	; 0x65
 8007d0c:	d800      	bhi.n	8007d10 <_printf_float+0x218>
 8007d0e:	e0ec      	b.n	8007eea <_printf_float+0x3f2>
 8007d10:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007d12:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007d14:	2200      	movs	r2, #0
 8007d16:	2300      	movs	r3, #0
 8007d18:	f7f8 fb98 	bl	800044c <__aeabi_dcmpeq>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d034      	beq.n	8007d8a <_printf_float+0x292>
 8007d20:	2301      	movs	r3, #1
 8007d22:	0038      	movs	r0, r7
 8007d24:	4a37      	ldr	r2, [pc, #220]	; (8007e04 <_printf_float+0x30c>)
 8007d26:	9908      	ldr	r1, [sp, #32]
 8007d28:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007d2a:	47a8      	blx	r5
 8007d2c:	1c43      	adds	r3, r0, #1
 8007d2e:	d100      	bne.n	8007d32 <_printf_float+0x23a>
 8007d30:	e740      	b.n	8007bb4 <_printf_float+0xbc>
 8007d32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d36:	4293      	cmp	r3, r2
 8007d38:	db02      	blt.n	8007d40 <_printf_float+0x248>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	07db      	lsls	r3, r3, #31
 8007d3e:	d50d      	bpl.n	8007d5c <_printf_float+0x264>
 8007d40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007d42:	0038      	movs	r0, r7
 8007d44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d48:	9908      	ldr	r1, [sp, #32]
 8007d4a:	47a8      	blx	r5
 8007d4c:	2500      	movs	r5, #0
 8007d4e:	1c43      	adds	r3, r0, #1
 8007d50:	d100      	bne.n	8007d54 <_printf_float+0x25c>
 8007d52:	e72f      	b.n	8007bb4 <_printf_float+0xbc>
 8007d54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d56:	3b01      	subs	r3, #1
 8007d58:	42ab      	cmp	r3, r5
 8007d5a:	dc0a      	bgt.n	8007d72 <_printf_float+0x27a>
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	079b      	lsls	r3, r3, #30
 8007d60:	d500      	bpl.n	8007d64 <_printf_float+0x26c>
 8007d62:	e114      	b.n	8007f8e <_printf_float+0x496>
 8007d64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d66:	68e0      	ldr	r0, [r4, #12]
 8007d68:	4298      	cmp	r0, r3
 8007d6a:	db00      	blt.n	8007d6e <_printf_float+0x276>
 8007d6c:	e724      	b.n	8007bb8 <_printf_float+0xc0>
 8007d6e:	0018      	movs	r0, r3
 8007d70:	e722      	b.n	8007bb8 <_printf_float+0xc0>
 8007d72:	0022      	movs	r2, r4
 8007d74:	2301      	movs	r3, #1
 8007d76:	0038      	movs	r0, r7
 8007d78:	9908      	ldr	r1, [sp, #32]
 8007d7a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007d7c:	321a      	adds	r2, #26
 8007d7e:	47b0      	blx	r6
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	d100      	bne.n	8007d86 <_printf_float+0x28e>
 8007d84:	e716      	b.n	8007bb4 <_printf_float+0xbc>
 8007d86:	3501      	adds	r5, #1
 8007d88:	e7e4      	b.n	8007d54 <_printf_float+0x25c>
 8007d8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	dc3b      	bgt.n	8007e08 <_printf_float+0x310>
 8007d90:	2301      	movs	r3, #1
 8007d92:	0038      	movs	r0, r7
 8007d94:	4a1b      	ldr	r2, [pc, #108]	; (8007e04 <_printf_float+0x30c>)
 8007d96:	9908      	ldr	r1, [sp, #32]
 8007d98:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007d9a:	47b0      	blx	r6
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	d100      	bne.n	8007da2 <_printf_float+0x2aa>
 8007da0:	e708      	b.n	8007bb4 <_printf_float+0xbc>
 8007da2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007da4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007da6:	4313      	orrs	r3, r2
 8007da8:	d102      	bne.n	8007db0 <_printf_float+0x2b8>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	07db      	lsls	r3, r3, #31
 8007dae:	d5d5      	bpl.n	8007d5c <_printf_float+0x264>
 8007db0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007db2:	0038      	movs	r0, r7
 8007db4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007db6:	9908      	ldr	r1, [sp, #32]
 8007db8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007dba:	47b0      	blx	r6
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d100      	bne.n	8007dc2 <_printf_float+0x2ca>
 8007dc0:	e6f8      	b.n	8007bb4 <_printf_float+0xbc>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	930a      	str	r3, [sp, #40]	; 0x28
 8007dc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dca:	425b      	negs	r3, r3
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	dc01      	bgt.n	8007dd4 <_printf_float+0x2dc>
 8007dd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dd2:	e792      	b.n	8007cfa <_printf_float+0x202>
 8007dd4:	0022      	movs	r2, r4
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	0038      	movs	r0, r7
 8007dda:	9908      	ldr	r1, [sp, #32]
 8007ddc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007dde:	321a      	adds	r2, #26
 8007de0:	47b0      	blx	r6
 8007de2:	1c43      	adds	r3, r0, #1
 8007de4:	d100      	bne.n	8007de8 <_printf_float+0x2f0>
 8007de6:	e6e5      	b.n	8007bb4 <_printf_float+0xbc>
 8007de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dea:	3301      	adds	r3, #1
 8007dec:	e7ea      	b.n	8007dc4 <_printf_float+0x2cc>
 8007dee:	46c0      	nop			; (mov r8, r8)
 8007df0:	7fefffff 	.word	0x7fefffff
 8007df4:	0800afe8 	.word	0x0800afe8
 8007df8:	0800afec 	.word	0x0800afec
 8007dfc:	0800aff0 	.word	0x0800aff0
 8007e00:	0800aff4 	.word	0x0800aff4
 8007e04:	0800aff8 	.word	0x0800aff8
 8007e08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e0c:	920a      	str	r2, [sp, #40]	; 0x28
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	dd00      	ble.n	8007e14 <_printf_float+0x31c>
 8007e12:	930a      	str	r3, [sp, #40]	; 0x28
 8007e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	dc3d      	bgt.n	8007e96 <_printf_float+0x39e>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	930e      	str	r3, [sp, #56]	; 0x38
 8007e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e20:	43db      	mvns	r3, r3
 8007e22:	17db      	asrs	r3, r3, #31
 8007e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e2a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e2e:	4013      	ands	r3, r2
 8007e30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e36:	4293      	cmp	r3, r2
 8007e38:	dc36      	bgt.n	8007ea8 <_printf_float+0x3b0>
 8007e3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	db40      	blt.n	8007ec4 <_printf_float+0x3cc>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	07db      	lsls	r3, r3, #31
 8007e46:	d43d      	bmi.n	8007ec4 <_printf_float+0x3cc>
 8007e48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	1a52      	subs	r2, r2, r1
 8007e52:	920a      	str	r2, [sp, #40]	; 0x28
 8007e54:	429a      	cmp	r2, r3
 8007e56:	dd00      	ble.n	8007e5a <_printf_float+0x362>
 8007e58:	930a      	str	r3, [sp, #40]	; 0x28
 8007e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dc3a      	bgt.n	8007ed6 <_printf_float+0x3de>
 8007e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e62:	2500      	movs	r5, #0
 8007e64:	43db      	mvns	r3, r3
 8007e66:	17db      	asrs	r3, r3, #31
 8007e68:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e70:	1a9b      	subs	r3, r3, r2
 8007e72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e74:	400a      	ands	r2, r1
 8007e76:	1a9b      	subs	r3, r3, r2
 8007e78:	42ab      	cmp	r3, r5
 8007e7a:	dc00      	bgt.n	8007e7e <_printf_float+0x386>
 8007e7c:	e76e      	b.n	8007d5c <_printf_float+0x264>
 8007e7e:	0022      	movs	r2, r4
 8007e80:	2301      	movs	r3, #1
 8007e82:	0038      	movs	r0, r7
 8007e84:	9908      	ldr	r1, [sp, #32]
 8007e86:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007e88:	321a      	adds	r2, #26
 8007e8a:	47b0      	blx	r6
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d100      	bne.n	8007e92 <_printf_float+0x39a>
 8007e90:	e690      	b.n	8007bb4 <_printf_float+0xbc>
 8007e92:	3501      	adds	r5, #1
 8007e94:	e7e9      	b.n	8007e6a <_printf_float+0x372>
 8007e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e98:	002a      	movs	r2, r5
 8007e9a:	0038      	movs	r0, r7
 8007e9c:	9908      	ldr	r1, [sp, #32]
 8007e9e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007ea0:	47b0      	blx	r6
 8007ea2:	1c43      	adds	r3, r0, #1
 8007ea4:	d1b9      	bne.n	8007e1a <_printf_float+0x322>
 8007ea6:	e685      	b.n	8007bb4 <_printf_float+0xbc>
 8007ea8:	0022      	movs	r2, r4
 8007eaa:	2301      	movs	r3, #1
 8007eac:	0038      	movs	r0, r7
 8007eae:	9908      	ldr	r1, [sp, #32]
 8007eb0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007eb2:	321a      	adds	r2, #26
 8007eb4:	47b0      	blx	r6
 8007eb6:	1c43      	adds	r3, r0, #1
 8007eb8:	d100      	bne.n	8007ebc <_printf_float+0x3c4>
 8007eba:	e67b      	b.n	8007bb4 <_printf_float+0xbc>
 8007ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	930e      	str	r3, [sp, #56]	; 0x38
 8007ec2:	e7b0      	b.n	8007e26 <_printf_float+0x32e>
 8007ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ec6:	0038      	movs	r0, r7
 8007ec8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007eca:	9908      	ldr	r1, [sp, #32]
 8007ecc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007ece:	47b0      	blx	r6
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d1b9      	bne.n	8007e48 <_printf_float+0x350>
 8007ed4:	e66e      	b.n	8007bb4 <_printf_float+0xbc>
 8007ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ed8:	0038      	movs	r0, r7
 8007eda:	18ea      	adds	r2, r5, r3
 8007edc:	9908      	ldr	r1, [sp, #32]
 8007ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007ee2:	47a8      	blx	r5
 8007ee4:	1c43      	adds	r3, r0, #1
 8007ee6:	d1bb      	bne.n	8007e60 <_printf_float+0x368>
 8007ee8:	e664      	b.n	8007bb4 <_printf_float+0xbc>
 8007eea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	dc02      	bgt.n	8007ef6 <_printf_float+0x3fe>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	421a      	tst	r2, r3
 8007ef4:	d038      	beq.n	8007f68 <_printf_float+0x470>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	002a      	movs	r2, r5
 8007efa:	0038      	movs	r0, r7
 8007efc:	9908      	ldr	r1, [sp, #32]
 8007efe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007f00:	47b0      	blx	r6
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	d100      	bne.n	8007f08 <_printf_float+0x410>
 8007f06:	e655      	b.n	8007bb4 <_printf_float+0xbc>
 8007f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f0a:	0038      	movs	r0, r7
 8007f0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f0e:	9908      	ldr	r1, [sp, #32]
 8007f10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007f12:	47b0      	blx	r6
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d100      	bne.n	8007f1a <_printf_float+0x422>
 8007f18:	e64c      	b.n	8007bb4 <_printf_float+0xbc>
 8007f1a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007f1c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007f1e:	2200      	movs	r2, #0
 8007f20:	2300      	movs	r3, #0
 8007f22:	f7f8 fa93 	bl	800044c <__aeabi_dcmpeq>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d11c      	bne.n	8007f64 <_printf_float+0x46c>
 8007f2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f2c:	1c6a      	adds	r2, r5, #1
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	0038      	movs	r0, r7
 8007f32:	9908      	ldr	r1, [sp, #32]
 8007f34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007f36:	47a8      	blx	r5
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d10f      	bne.n	8007f5c <_printf_float+0x464>
 8007f3c:	e63a      	b.n	8007bb4 <_printf_float+0xbc>
 8007f3e:	0022      	movs	r2, r4
 8007f40:	2301      	movs	r3, #1
 8007f42:	0038      	movs	r0, r7
 8007f44:	9908      	ldr	r1, [sp, #32]
 8007f46:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007f48:	321a      	adds	r2, #26
 8007f4a:	47b0      	blx	r6
 8007f4c:	1c43      	adds	r3, r0, #1
 8007f4e:	d100      	bne.n	8007f52 <_printf_float+0x45a>
 8007f50:	e630      	b.n	8007bb4 <_printf_float+0xbc>
 8007f52:	3501      	adds	r5, #1
 8007f54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f56:	3b01      	subs	r3, #1
 8007f58:	42ab      	cmp	r3, r5
 8007f5a:	dcf0      	bgt.n	8007f3e <_printf_float+0x446>
 8007f5c:	0022      	movs	r2, r4
 8007f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f60:	3250      	adds	r2, #80	; 0x50
 8007f62:	e6cb      	b.n	8007cfc <_printf_float+0x204>
 8007f64:	2500      	movs	r5, #0
 8007f66:	e7f5      	b.n	8007f54 <_printf_float+0x45c>
 8007f68:	002a      	movs	r2, r5
 8007f6a:	e7e1      	b.n	8007f30 <_printf_float+0x438>
 8007f6c:	0022      	movs	r2, r4
 8007f6e:	2301      	movs	r3, #1
 8007f70:	0038      	movs	r0, r7
 8007f72:	9908      	ldr	r1, [sp, #32]
 8007f74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007f76:	3219      	adds	r2, #25
 8007f78:	47b0      	blx	r6
 8007f7a:	1c43      	adds	r3, r0, #1
 8007f7c:	d100      	bne.n	8007f80 <_printf_float+0x488>
 8007f7e:	e619      	b.n	8007bb4 <_printf_float+0xbc>
 8007f80:	3501      	adds	r5, #1
 8007f82:	68e3      	ldr	r3, [r4, #12]
 8007f84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f86:	1a9b      	subs	r3, r3, r2
 8007f88:	42ab      	cmp	r3, r5
 8007f8a:	dcef      	bgt.n	8007f6c <_printf_float+0x474>
 8007f8c:	e6ea      	b.n	8007d64 <_printf_float+0x26c>
 8007f8e:	2500      	movs	r5, #0
 8007f90:	e7f7      	b.n	8007f82 <_printf_float+0x48a>
 8007f92:	46c0      	nop			; (mov r8, r8)

08007f94 <_printf_common>:
 8007f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f96:	0015      	movs	r5, r2
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	688a      	ldr	r2, [r1, #8]
 8007f9c:	690b      	ldr	r3, [r1, #16]
 8007f9e:	000c      	movs	r4, r1
 8007fa0:	9000      	str	r0, [sp, #0]
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	da00      	bge.n	8007fa8 <_printf_common+0x14>
 8007fa6:	0013      	movs	r3, r2
 8007fa8:	0022      	movs	r2, r4
 8007faa:	602b      	str	r3, [r5, #0]
 8007fac:	3243      	adds	r2, #67	; 0x43
 8007fae:	7812      	ldrb	r2, [r2, #0]
 8007fb0:	2a00      	cmp	r2, #0
 8007fb2:	d001      	beq.n	8007fb8 <_printf_common+0x24>
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	602b      	str	r3, [r5, #0]
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	069b      	lsls	r3, r3, #26
 8007fbc:	d502      	bpl.n	8007fc4 <_printf_common+0x30>
 8007fbe:	682b      	ldr	r3, [r5, #0]
 8007fc0:	3302      	adds	r3, #2
 8007fc2:	602b      	str	r3, [r5, #0]
 8007fc4:	6822      	ldr	r2, [r4, #0]
 8007fc6:	2306      	movs	r3, #6
 8007fc8:	0017      	movs	r7, r2
 8007fca:	401f      	ands	r7, r3
 8007fcc:	421a      	tst	r2, r3
 8007fce:	d027      	beq.n	8008020 <_printf_common+0x8c>
 8007fd0:	0023      	movs	r3, r4
 8007fd2:	3343      	adds	r3, #67	; 0x43
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	1e5a      	subs	r2, r3, #1
 8007fd8:	4193      	sbcs	r3, r2
 8007fda:	6822      	ldr	r2, [r4, #0]
 8007fdc:	0692      	lsls	r2, r2, #26
 8007fde:	d430      	bmi.n	8008042 <_printf_common+0xae>
 8007fe0:	0022      	movs	r2, r4
 8007fe2:	9901      	ldr	r1, [sp, #4]
 8007fe4:	9800      	ldr	r0, [sp, #0]
 8007fe6:	9e08      	ldr	r6, [sp, #32]
 8007fe8:	3243      	adds	r2, #67	; 0x43
 8007fea:	47b0      	blx	r6
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d025      	beq.n	800803c <_printf_common+0xa8>
 8007ff0:	2306      	movs	r3, #6
 8007ff2:	6820      	ldr	r0, [r4, #0]
 8007ff4:	682a      	ldr	r2, [r5, #0]
 8007ff6:	68e1      	ldr	r1, [r4, #12]
 8007ff8:	2500      	movs	r5, #0
 8007ffa:	4003      	ands	r3, r0
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	d103      	bne.n	8008008 <_printf_common+0x74>
 8008000:	1a8d      	subs	r5, r1, r2
 8008002:	43eb      	mvns	r3, r5
 8008004:	17db      	asrs	r3, r3, #31
 8008006:	401d      	ands	r5, r3
 8008008:	68a3      	ldr	r3, [r4, #8]
 800800a:	6922      	ldr	r2, [r4, #16]
 800800c:	4293      	cmp	r3, r2
 800800e:	dd01      	ble.n	8008014 <_printf_common+0x80>
 8008010:	1a9b      	subs	r3, r3, r2
 8008012:	18ed      	adds	r5, r5, r3
 8008014:	2700      	movs	r7, #0
 8008016:	42bd      	cmp	r5, r7
 8008018:	d120      	bne.n	800805c <_printf_common+0xc8>
 800801a:	2000      	movs	r0, #0
 800801c:	e010      	b.n	8008040 <_printf_common+0xac>
 800801e:	3701      	adds	r7, #1
 8008020:	68e3      	ldr	r3, [r4, #12]
 8008022:	682a      	ldr	r2, [r5, #0]
 8008024:	1a9b      	subs	r3, r3, r2
 8008026:	42bb      	cmp	r3, r7
 8008028:	ddd2      	ble.n	8007fd0 <_printf_common+0x3c>
 800802a:	0022      	movs	r2, r4
 800802c:	2301      	movs	r3, #1
 800802e:	9901      	ldr	r1, [sp, #4]
 8008030:	9800      	ldr	r0, [sp, #0]
 8008032:	9e08      	ldr	r6, [sp, #32]
 8008034:	3219      	adds	r2, #25
 8008036:	47b0      	blx	r6
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d1f0      	bne.n	800801e <_printf_common+0x8a>
 800803c:	2001      	movs	r0, #1
 800803e:	4240      	negs	r0, r0
 8008040:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008042:	2030      	movs	r0, #48	; 0x30
 8008044:	18e1      	adds	r1, r4, r3
 8008046:	3143      	adds	r1, #67	; 0x43
 8008048:	7008      	strb	r0, [r1, #0]
 800804a:	0021      	movs	r1, r4
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	3145      	adds	r1, #69	; 0x45
 8008050:	7809      	ldrb	r1, [r1, #0]
 8008052:	18a2      	adds	r2, r4, r2
 8008054:	3243      	adds	r2, #67	; 0x43
 8008056:	3302      	adds	r3, #2
 8008058:	7011      	strb	r1, [r2, #0]
 800805a:	e7c1      	b.n	8007fe0 <_printf_common+0x4c>
 800805c:	0022      	movs	r2, r4
 800805e:	2301      	movs	r3, #1
 8008060:	9901      	ldr	r1, [sp, #4]
 8008062:	9800      	ldr	r0, [sp, #0]
 8008064:	9e08      	ldr	r6, [sp, #32]
 8008066:	321a      	adds	r2, #26
 8008068:	47b0      	blx	r6
 800806a:	1c43      	adds	r3, r0, #1
 800806c:	d0e6      	beq.n	800803c <_printf_common+0xa8>
 800806e:	3701      	adds	r7, #1
 8008070:	e7d1      	b.n	8008016 <_printf_common+0x82>
	...

08008074 <_printf_i>:
 8008074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008076:	b08b      	sub	sp, #44	; 0x2c
 8008078:	9206      	str	r2, [sp, #24]
 800807a:	000a      	movs	r2, r1
 800807c:	3243      	adds	r2, #67	; 0x43
 800807e:	9307      	str	r3, [sp, #28]
 8008080:	9005      	str	r0, [sp, #20]
 8008082:	9204      	str	r2, [sp, #16]
 8008084:	7e0a      	ldrb	r2, [r1, #24]
 8008086:	000c      	movs	r4, r1
 8008088:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800808a:	2a78      	cmp	r2, #120	; 0x78
 800808c:	d806      	bhi.n	800809c <_printf_i+0x28>
 800808e:	2a62      	cmp	r2, #98	; 0x62
 8008090:	d808      	bhi.n	80080a4 <_printf_i+0x30>
 8008092:	2a00      	cmp	r2, #0
 8008094:	d100      	bne.n	8008098 <_printf_i+0x24>
 8008096:	e0c0      	b.n	800821a <_printf_i+0x1a6>
 8008098:	2a58      	cmp	r2, #88	; 0x58
 800809a:	d052      	beq.n	8008142 <_printf_i+0xce>
 800809c:	0026      	movs	r6, r4
 800809e:	3642      	adds	r6, #66	; 0x42
 80080a0:	7032      	strb	r2, [r6, #0]
 80080a2:	e022      	b.n	80080ea <_printf_i+0x76>
 80080a4:	0010      	movs	r0, r2
 80080a6:	3863      	subs	r0, #99	; 0x63
 80080a8:	2815      	cmp	r0, #21
 80080aa:	d8f7      	bhi.n	800809c <_printf_i+0x28>
 80080ac:	f7f8 f83e 	bl	800012c <__gnu_thumb1_case_shi>
 80080b0:	001f0016 	.word	0x001f0016
 80080b4:	fff6fff6 	.word	0xfff6fff6
 80080b8:	fff6fff6 	.word	0xfff6fff6
 80080bc:	fff6001f 	.word	0xfff6001f
 80080c0:	fff6fff6 	.word	0xfff6fff6
 80080c4:	00a8fff6 	.word	0x00a8fff6
 80080c8:	009a0036 	.word	0x009a0036
 80080cc:	fff6fff6 	.word	0xfff6fff6
 80080d0:	fff600b9 	.word	0xfff600b9
 80080d4:	fff60036 	.word	0xfff60036
 80080d8:	009efff6 	.word	0x009efff6
 80080dc:	0026      	movs	r6, r4
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	3642      	adds	r6, #66	; 0x42
 80080e2:	1d11      	adds	r1, r2, #4
 80080e4:	6019      	str	r1, [r3, #0]
 80080e6:	6813      	ldr	r3, [r2, #0]
 80080e8:	7033      	strb	r3, [r6, #0]
 80080ea:	2301      	movs	r3, #1
 80080ec:	e0a7      	b.n	800823e <_printf_i+0x1ca>
 80080ee:	6808      	ldr	r0, [r1, #0]
 80080f0:	6819      	ldr	r1, [r3, #0]
 80080f2:	1d0a      	adds	r2, r1, #4
 80080f4:	0605      	lsls	r5, r0, #24
 80080f6:	d50b      	bpl.n	8008110 <_printf_i+0x9c>
 80080f8:	680d      	ldr	r5, [r1, #0]
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	2d00      	cmp	r5, #0
 80080fe:	da03      	bge.n	8008108 <_printf_i+0x94>
 8008100:	232d      	movs	r3, #45	; 0x2d
 8008102:	9a04      	ldr	r2, [sp, #16]
 8008104:	426d      	negs	r5, r5
 8008106:	7013      	strb	r3, [r2, #0]
 8008108:	4b61      	ldr	r3, [pc, #388]	; (8008290 <_printf_i+0x21c>)
 800810a:	270a      	movs	r7, #10
 800810c:	9303      	str	r3, [sp, #12]
 800810e:	e032      	b.n	8008176 <_printf_i+0x102>
 8008110:	680d      	ldr	r5, [r1, #0]
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	0641      	lsls	r1, r0, #25
 8008116:	d5f1      	bpl.n	80080fc <_printf_i+0x88>
 8008118:	b22d      	sxth	r5, r5
 800811a:	e7ef      	b.n	80080fc <_printf_i+0x88>
 800811c:	680d      	ldr	r5, [r1, #0]
 800811e:	6819      	ldr	r1, [r3, #0]
 8008120:	1d08      	adds	r0, r1, #4
 8008122:	6018      	str	r0, [r3, #0]
 8008124:	062e      	lsls	r6, r5, #24
 8008126:	d501      	bpl.n	800812c <_printf_i+0xb8>
 8008128:	680d      	ldr	r5, [r1, #0]
 800812a:	e003      	b.n	8008134 <_printf_i+0xc0>
 800812c:	066d      	lsls	r5, r5, #25
 800812e:	d5fb      	bpl.n	8008128 <_printf_i+0xb4>
 8008130:	680d      	ldr	r5, [r1, #0]
 8008132:	b2ad      	uxth	r5, r5
 8008134:	4b56      	ldr	r3, [pc, #344]	; (8008290 <_printf_i+0x21c>)
 8008136:	270a      	movs	r7, #10
 8008138:	9303      	str	r3, [sp, #12]
 800813a:	2a6f      	cmp	r2, #111	; 0x6f
 800813c:	d117      	bne.n	800816e <_printf_i+0xfa>
 800813e:	2708      	movs	r7, #8
 8008140:	e015      	b.n	800816e <_printf_i+0xfa>
 8008142:	3145      	adds	r1, #69	; 0x45
 8008144:	700a      	strb	r2, [r1, #0]
 8008146:	4a52      	ldr	r2, [pc, #328]	; (8008290 <_printf_i+0x21c>)
 8008148:	9203      	str	r2, [sp, #12]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	6821      	ldr	r1, [r4, #0]
 800814e:	ca20      	ldmia	r2!, {r5}
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	0608      	lsls	r0, r1, #24
 8008154:	d550      	bpl.n	80081f8 <_printf_i+0x184>
 8008156:	07cb      	lsls	r3, r1, #31
 8008158:	d502      	bpl.n	8008160 <_printf_i+0xec>
 800815a:	2320      	movs	r3, #32
 800815c:	4319      	orrs	r1, r3
 800815e:	6021      	str	r1, [r4, #0]
 8008160:	2710      	movs	r7, #16
 8008162:	2d00      	cmp	r5, #0
 8008164:	d103      	bne.n	800816e <_printf_i+0xfa>
 8008166:	2320      	movs	r3, #32
 8008168:	6822      	ldr	r2, [r4, #0]
 800816a:	439a      	bics	r2, r3
 800816c:	6022      	str	r2, [r4, #0]
 800816e:	0023      	movs	r3, r4
 8008170:	2200      	movs	r2, #0
 8008172:	3343      	adds	r3, #67	; 0x43
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	6863      	ldr	r3, [r4, #4]
 8008178:	60a3      	str	r3, [r4, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	db03      	blt.n	8008186 <_printf_i+0x112>
 800817e:	2204      	movs	r2, #4
 8008180:	6821      	ldr	r1, [r4, #0]
 8008182:	4391      	bics	r1, r2
 8008184:	6021      	str	r1, [r4, #0]
 8008186:	2d00      	cmp	r5, #0
 8008188:	d102      	bne.n	8008190 <_printf_i+0x11c>
 800818a:	9e04      	ldr	r6, [sp, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00c      	beq.n	80081aa <_printf_i+0x136>
 8008190:	9e04      	ldr	r6, [sp, #16]
 8008192:	0028      	movs	r0, r5
 8008194:	0039      	movs	r1, r7
 8008196:	f7f8 f859 	bl	800024c <__aeabi_uidivmod>
 800819a:	9b03      	ldr	r3, [sp, #12]
 800819c:	3e01      	subs	r6, #1
 800819e:	5c5b      	ldrb	r3, [r3, r1]
 80081a0:	7033      	strb	r3, [r6, #0]
 80081a2:	002b      	movs	r3, r5
 80081a4:	0005      	movs	r5, r0
 80081a6:	429f      	cmp	r7, r3
 80081a8:	d9f3      	bls.n	8008192 <_printf_i+0x11e>
 80081aa:	2f08      	cmp	r7, #8
 80081ac:	d109      	bne.n	80081c2 <_printf_i+0x14e>
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	07db      	lsls	r3, r3, #31
 80081b2:	d506      	bpl.n	80081c2 <_printf_i+0x14e>
 80081b4:	6863      	ldr	r3, [r4, #4]
 80081b6:	6922      	ldr	r2, [r4, #16]
 80081b8:	4293      	cmp	r3, r2
 80081ba:	dc02      	bgt.n	80081c2 <_printf_i+0x14e>
 80081bc:	2330      	movs	r3, #48	; 0x30
 80081be:	3e01      	subs	r6, #1
 80081c0:	7033      	strb	r3, [r6, #0]
 80081c2:	9b04      	ldr	r3, [sp, #16]
 80081c4:	1b9b      	subs	r3, r3, r6
 80081c6:	6123      	str	r3, [r4, #16]
 80081c8:	9b07      	ldr	r3, [sp, #28]
 80081ca:	0021      	movs	r1, r4
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	9805      	ldr	r0, [sp, #20]
 80081d0:	9b06      	ldr	r3, [sp, #24]
 80081d2:	aa09      	add	r2, sp, #36	; 0x24
 80081d4:	f7ff fede 	bl	8007f94 <_printf_common>
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	d135      	bne.n	8008248 <_printf_i+0x1d4>
 80081dc:	2001      	movs	r0, #1
 80081de:	4240      	negs	r0, r0
 80081e0:	b00b      	add	sp, #44	; 0x2c
 80081e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081e4:	2220      	movs	r2, #32
 80081e6:	6809      	ldr	r1, [r1, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	6022      	str	r2, [r4, #0]
 80081ec:	0022      	movs	r2, r4
 80081ee:	2178      	movs	r1, #120	; 0x78
 80081f0:	3245      	adds	r2, #69	; 0x45
 80081f2:	7011      	strb	r1, [r2, #0]
 80081f4:	4a27      	ldr	r2, [pc, #156]	; (8008294 <_printf_i+0x220>)
 80081f6:	e7a7      	b.n	8008148 <_printf_i+0xd4>
 80081f8:	0648      	lsls	r0, r1, #25
 80081fa:	d5ac      	bpl.n	8008156 <_printf_i+0xe2>
 80081fc:	b2ad      	uxth	r5, r5
 80081fe:	e7aa      	b.n	8008156 <_printf_i+0xe2>
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	680d      	ldr	r5, [r1, #0]
 8008204:	1d10      	adds	r0, r2, #4
 8008206:	6949      	ldr	r1, [r1, #20]
 8008208:	6018      	str	r0, [r3, #0]
 800820a:	6813      	ldr	r3, [r2, #0]
 800820c:	062e      	lsls	r6, r5, #24
 800820e:	d501      	bpl.n	8008214 <_printf_i+0x1a0>
 8008210:	6019      	str	r1, [r3, #0]
 8008212:	e002      	b.n	800821a <_printf_i+0x1a6>
 8008214:	066d      	lsls	r5, r5, #25
 8008216:	d5fb      	bpl.n	8008210 <_printf_i+0x19c>
 8008218:	8019      	strh	r1, [r3, #0]
 800821a:	2300      	movs	r3, #0
 800821c:	9e04      	ldr	r6, [sp, #16]
 800821e:	6123      	str	r3, [r4, #16]
 8008220:	e7d2      	b.n	80081c8 <_printf_i+0x154>
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	1d11      	adds	r1, r2, #4
 8008226:	6019      	str	r1, [r3, #0]
 8008228:	6816      	ldr	r6, [r2, #0]
 800822a:	2100      	movs	r1, #0
 800822c:	0030      	movs	r0, r6
 800822e:	6862      	ldr	r2, [r4, #4]
 8008230:	f001 faa0 	bl	8009774 <memchr>
 8008234:	2800      	cmp	r0, #0
 8008236:	d001      	beq.n	800823c <_printf_i+0x1c8>
 8008238:	1b80      	subs	r0, r0, r6
 800823a:	6060      	str	r0, [r4, #4]
 800823c:	6863      	ldr	r3, [r4, #4]
 800823e:	6123      	str	r3, [r4, #16]
 8008240:	2300      	movs	r3, #0
 8008242:	9a04      	ldr	r2, [sp, #16]
 8008244:	7013      	strb	r3, [r2, #0]
 8008246:	e7bf      	b.n	80081c8 <_printf_i+0x154>
 8008248:	6923      	ldr	r3, [r4, #16]
 800824a:	0032      	movs	r2, r6
 800824c:	9906      	ldr	r1, [sp, #24]
 800824e:	9805      	ldr	r0, [sp, #20]
 8008250:	9d07      	ldr	r5, [sp, #28]
 8008252:	47a8      	blx	r5
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	d0c1      	beq.n	80081dc <_printf_i+0x168>
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	079b      	lsls	r3, r3, #30
 800825c:	d415      	bmi.n	800828a <_printf_i+0x216>
 800825e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008260:	68e0      	ldr	r0, [r4, #12]
 8008262:	4298      	cmp	r0, r3
 8008264:	dabc      	bge.n	80081e0 <_printf_i+0x16c>
 8008266:	0018      	movs	r0, r3
 8008268:	e7ba      	b.n	80081e0 <_printf_i+0x16c>
 800826a:	0022      	movs	r2, r4
 800826c:	2301      	movs	r3, #1
 800826e:	9906      	ldr	r1, [sp, #24]
 8008270:	9805      	ldr	r0, [sp, #20]
 8008272:	9e07      	ldr	r6, [sp, #28]
 8008274:	3219      	adds	r2, #25
 8008276:	47b0      	blx	r6
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d0af      	beq.n	80081dc <_printf_i+0x168>
 800827c:	3501      	adds	r5, #1
 800827e:	68e3      	ldr	r3, [r4, #12]
 8008280:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008282:	1a9b      	subs	r3, r3, r2
 8008284:	42ab      	cmp	r3, r5
 8008286:	dcf0      	bgt.n	800826a <_printf_i+0x1f6>
 8008288:	e7e9      	b.n	800825e <_printf_i+0x1ea>
 800828a:	2500      	movs	r5, #0
 800828c:	e7f7      	b.n	800827e <_printf_i+0x20a>
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	0800affa 	.word	0x0800affa
 8008294:	0800b00b 	.word	0x0800b00b

08008298 <iprintf>:
 8008298:	b40f      	push	{r0, r1, r2, r3}
 800829a:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <iprintf+0x30>)
 800829c:	b513      	push	{r0, r1, r4, lr}
 800829e:	681c      	ldr	r4, [r3, #0]
 80082a0:	2c00      	cmp	r4, #0
 80082a2:	d005      	beq.n	80082b0 <iprintf+0x18>
 80082a4:	69a3      	ldr	r3, [r4, #24]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d102      	bne.n	80082b0 <iprintf+0x18>
 80082aa:	0020      	movs	r0, r4
 80082ac:	f001 f944 	bl	8009538 <__sinit>
 80082b0:	ab05      	add	r3, sp, #20
 80082b2:	0020      	movs	r0, r4
 80082b4:	9a04      	ldr	r2, [sp, #16]
 80082b6:	68a1      	ldr	r1, [r4, #8]
 80082b8:	9301      	str	r3, [sp, #4]
 80082ba:	f001 fee3 	bl	800a084 <_vfiprintf_r>
 80082be:	bc16      	pop	{r1, r2, r4}
 80082c0:	bc08      	pop	{r3}
 80082c2:	b004      	add	sp, #16
 80082c4:	4718      	bx	r3
 80082c6:	46c0      	nop			; (mov r8, r8)
 80082c8:	20000024 	.word	0x20000024

080082cc <putchar>:
 80082cc:	4b08      	ldr	r3, [pc, #32]	; (80082f0 <putchar+0x24>)
 80082ce:	b570      	push	{r4, r5, r6, lr}
 80082d0:	681c      	ldr	r4, [r3, #0]
 80082d2:	0005      	movs	r5, r0
 80082d4:	2c00      	cmp	r4, #0
 80082d6:	d005      	beq.n	80082e4 <putchar+0x18>
 80082d8:	69a3      	ldr	r3, [r4, #24]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d102      	bne.n	80082e4 <putchar+0x18>
 80082de:	0020      	movs	r0, r4
 80082e0:	f001 f92a 	bl	8009538 <__sinit>
 80082e4:	0029      	movs	r1, r5
 80082e6:	0020      	movs	r0, r4
 80082e8:	68a2      	ldr	r2, [r4, #8]
 80082ea:	f002 f805 	bl	800a2f8 <_putc_r>
 80082ee:	bd70      	pop	{r4, r5, r6, pc}
 80082f0:	20000024 	.word	0x20000024

080082f4 <_puts_r>:
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	0005      	movs	r5, r0
 80082f8:	000e      	movs	r6, r1
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d004      	beq.n	8008308 <_puts_r+0x14>
 80082fe:	6983      	ldr	r3, [r0, #24]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <_puts_r+0x14>
 8008304:	f001 f918 	bl	8009538 <__sinit>
 8008308:	69ab      	ldr	r3, [r5, #24]
 800830a:	68ac      	ldr	r4, [r5, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d102      	bne.n	8008316 <_puts_r+0x22>
 8008310:	0028      	movs	r0, r5
 8008312:	f001 f911 	bl	8009538 <__sinit>
 8008316:	4b2d      	ldr	r3, [pc, #180]	; (80083cc <_puts_r+0xd8>)
 8008318:	429c      	cmp	r4, r3
 800831a:	d122      	bne.n	8008362 <_puts_r+0x6e>
 800831c:	686c      	ldr	r4, [r5, #4]
 800831e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008320:	07db      	lsls	r3, r3, #31
 8008322:	d405      	bmi.n	8008330 <_puts_r+0x3c>
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	059b      	lsls	r3, r3, #22
 8008328:	d402      	bmi.n	8008330 <_puts_r+0x3c>
 800832a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800832c:	f001 f9a9 	bl	8009682 <__retarget_lock_acquire_recursive>
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	071b      	lsls	r3, r3, #28
 8008334:	d502      	bpl.n	800833c <_puts_r+0x48>
 8008336:	6923      	ldr	r3, [r4, #16]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d129      	bne.n	8008390 <_puts_r+0x9c>
 800833c:	0021      	movs	r1, r4
 800833e:	0028      	movs	r0, r5
 8008340:	f000 f8aa 	bl	8008498 <__swsetup_r>
 8008344:	2800      	cmp	r0, #0
 8008346:	d023      	beq.n	8008390 <_puts_r+0x9c>
 8008348:	2501      	movs	r5, #1
 800834a:	426d      	negs	r5, r5
 800834c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800834e:	07db      	lsls	r3, r3, #31
 8008350:	d405      	bmi.n	800835e <_puts_r+0x6a>
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	059b      	lsls	r3, r3, #22
 8008356:	d402      	bmi.n	800835e <_puts_r+0x6a>
 8008358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800835a:	f001 f993 	bl	8009684 <__retarget_lock_release_recursive>
 800835e:	0028      	movs	r0, r5
 8008360:	bd70      	pop	{r4, r5, r6, pc}
 8008362:	4b1b      	ldr	r3, [pc, #108]	; (80083d0 <_puts_r+0xdc>)
 8008364:	429c      	cmp	r4, r3
 8008366:	d101      	bne.n	800836c <_puts_r+0x78>
 8008368:	68ac      	ldr	r4, [r5, #8]
 800836a:	e7d8      	b.n	800831e <_puts_r+0x2a>
 800836c:	4b19      	ldr	r3, [pc, #100]	; (80083d4 <_puts_r+0xe0>)
 800836e:	429c      	cmp	r4, r3
 8008370:	d1d5      	bne.n	800831e <_puts_r+0x2a>
 8008372:	68ec      	ldr	r4, [r5, #12]
 8008374:	e7d3      	b.n	800831e <_puts_r+0x2a>
 8008376:	3601      	adds	r6, #1
 8008378:	60a3      	str	r3, [r4, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	da04      	bge.n	8008388 <_puts_r+0x94>
 800837e:	69a2      	ldr	r2, [r4, #24]
 8008380:	429a      	cmp	r2, r3
 8008382:	dc16      	bgt.n	80083b2 <_puts_r+0xbe>
 8008384:	290a      	cmp	r1, #10
 8008386:	d014      	beq.n	80083b2 <_puts_r+0xbe>
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	6022      	str	r2, [r4, #0]
 800838e:	7019      	strb	r1, [r3, #0]
 8008390:	68a3      	ldr	r3, [r4, #8]
 8008392:	7831      	ldrb	r1, [r6, #0]
 8008394:	3b01      	subs	r3, #1
 8008396:	2900      	cmp	r1, #0
 8008398:	d1ed      	bne.n	8008376 <_puts_r+0x82>
 800839a:	60a3      	str	r3, [r4, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	da0f      	bge.n	80083c0 <_puts_r+0xcc>
 80083a0:	0028      	movs	r0, r5
 80083a2:	0022      	movs	r2, r4
 80083a4:	310a      	adds	r1, #10
 80083a6:	f000 f821 	bl	80083ec <__swbuf_r>
 80083aa:	250a      	movs	r5, #10
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d1cd      	bne.n	800834c <_puts_r+0x58>
 80083b0:	e7ca      	b.n	8008348 <_puts_r+0x54>
 80083b2:	0022      	movs	r2, r4
 80083b4:	0028      	movs	r0, r5
 80083b6:	f000 f819 	bl	80083ec <__swbuf_r>
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	d1e8      	bne.n	8008390 <_puts_r+0x9c>
 80083be:	e7c3      	b.n	8008348 <_puts_r+0x54>
 80083c0:	250a      	movs	r5, #10
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	6022      	str	r2, [r4, #0]
 80083c8:	701d      	strb	r5, [r3, #0]
 80083ca:	e7bf      	b.n	800834c <_puts_r+0x58>
 80083cc:	0800b0d0 	.word	0x0800b0d0
 80083d0:	0800b0f0 	.word	0x0800b0f0
 80083d4:	0800b0b0 	.word	0x0800b0b0

080083d8 <puts>:
 80083d8:	b510      	push	{r4, lr}
 80083da:	4b03      	ldr	r3, [pc, #12]	; (80083e8 <puts+0x10>)
 80083dc:	0001      	movs	r1, r0
 80083de:	6818      	ldr	r0, [r3, #0]
 80083e0:	f7ff ff88 	bl	80082f4 <_puts_r>
 80083e4:	bd10      	pop	{r4, pc}
 80083e6:	46c0      	nop			; (mov r8, r8)
 80083e8:	20000024 	.word	0x20000024

080083ec <__swbuf_r>:
 80083ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ee:	0005      	movs	r5, r0
 80083f0:	000e      	movs	r6, r1
 80083f2:	0014      	movs	r4, r2
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d004      	beq.n	8008402 <__swbuf_r+0x16>
 80083f8:	6983      	ldr	r3, [r0, #24]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <__swbuf_r+0x16>
 80083fe:	f001 f89b 	bl	8009538 <__sinit>
 8008402:	4b22      	ldr	r3, [pc, #136]	; (800848c <__swbuf_r+0xa0>)
 8008404:	429c      	cmp	r4, r3
 8008406:	d12e      	bne.n	8008466 <__swbuf_r+0x7a>
 8008408:	686c      	ldr	r4, [r5, #4]
 800840a:	69a3      	ldr	r3, [r4, #24]
 800840c:	60a3      	str	r3, [r4, #8]
 800840e:	89a3      	ldrh	r3, [r4, #12]
 8008410:	071b      	lsls	r3, r3, #28
 8008412:	d532      	bpl.n	800847a <__swbuf_r+0x8e>
 8008414:	6923      	ldr	r3, [r4, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d02f      	beq.n	800847a <__swbuf_r+0x8e>
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	6922      	ldr	r2, [r4, #16]
 800841e:	b2f7      	uxtb	r7, r6
 8008420:	1a98      	subs	r0, r3, r2
 8008422:	6963      	ldr	r3, [r4, #20]
 8008424:	b2f6      	uxtb	r6, r6
 8008426:	4283      	cmp	r3, r0
 8008428:	dc05      	bgt.n	8008436 <__swbuf_r+0x4a>
 800842a:	0021      	movs	r1, r4
 800842c:	0028      	movs	r0, r5
 800842e:	f000 ffe1 	bl	80093f4 <_fflush_r>
 8008432:	2800      	cmp	r0, #0
 8008434:	d127      	bne.n	8008486 <__swbuf_r+0x9a>
 8008436:	68a3      	ldr	r3, [r4, #8]
 8008438:	3001      	adds	r0, #1
 800843a:	3b01      	subs	r3, #1
 800843c:	60a3      	str	r3, [r4, #8]
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	6022      	str	r2, [r4, #0]
 8008444:	701f      	strb	r7, [r3, #0]
 8008446:	6963      	ldr	r3, [r4, #20]
 8008448:	4283      	cmp	r3, r0
 800844a:	d004      	beq.n	8008456 <__swbuf_r+0x6a>
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	07db      	lsls	r3, r3, #31
 8008450:	d507      	bpl.n	8008462 <__swbuf_r+0x76>
 8008452:	2e0a      	cmp	r6, #10
 8008454:	d105      	bne.n	8008462 <__swbuf_r+0x76>
 8008456:	0021      	movs	r1, r4
 8008458:	0028      	movs	r0, r5
 800845a:	f000 ffcb 	bl	80093f4 <_fflush_r>
 800845e:	2800      	cmp	r0, #0
 8008460:	d111      	bne.n	8008486 <__swbuf_r+0x9a>
 8008462:	0030      	movs	r0, r6
 8008464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008466:	4b0a      	ldr	r3, [pc, #40]	; (8008490 <__swbuf_r+0xa4>)
 8008468:	429c      	cmp	r4, r3
 800846a:	d101      	bne.n	8008470 <__swbuf_r+0x84>
 800846c:	68ac      	ldr	r4, [r5, #8]
 800846e:	e7cc      	b.n	800840a <__swbuf_r+0x1e>
 8008470:	4b08      	ldr	r3, [pc, #32]	; (8008494 <__swbuf_r+0xa8>)
 8008472:	429c      	cmp	r4, r3
 8008474:	d1c9      	bne.n	800840a <__swbuf_r+0x1e>
 8008476:	68ec      	ldr	r4, [r5, #12]
 8008478:	e7c7      	b.n	800840a <__swbuf_r+0x1e>
 800847a:	0021      	movs	r1, r4
 800847c:	0028      	movs	r0, r5
 800847e:	f000 f80b 	bl	8008498 <__swsetup_r>
 8008482:	2800      	cmp	r0, #0
 8008484:	d0c9      	beq.n	800841a <__swbuf_r+0x2e>
 8008486:	2601      	movs	r6, #1
 8008488:	4276      	negs	r6, r6
 800848a:	e7ea      	b.n	8008462 <__swbuf_r+0x76>
 800848c:	0800b0d0 	.word	0x0800b0d0
 8008490:	0800b0f0 	.word	0x0800b0f0
 8008494:	0800b0b0 	.word	0x0800b0b0

08008498 <__swsetup_r>:
 8008498:	4b37      	ldr	r3, [pc, #220]	; (8008578 <__swsetup_r+0xe0>)
 800849a:	b570      	push	{r4, r5, r6, lr}
 800849c:	681d      	ldr	r5, [r3, #0]
 800849e:	0006      	movs	r6, r0
 80084a0:	000c      	movs	r4, r1
 80084a2:	2d00      	cmp	r5, #0
 80084a4:	d005      	beq.n	80084b2 <__swsetup_r+0x1a>
 80084a6:	69ab      	ldr	r3, [r5, #24]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d102      	bne.n	80084b2 <__swsetup_r+0x1a>
 80084ac:	0028      	movs	r0, r5
 80084ae:	f001 f843 	bl	8009538 <__sinit>
 80084b2:	4b32      	ldr	r3, [pc, #200]	; (800857c <__swsetup_r+0xe4>)
 80084b4:	429c      	cmp	r4, r3
 80084b6:	d10f      	bne.n	80084d8 <__swsetup_r+0x40>
 80084b8:	686c      	ldr	r4, [r5, #4]
 80084ba:	230c      	movs	r3, #12
 80084bc:	5ee2      	ldrsh	r2, [r4, r3]
 80084be:	b293      	uxth	r3, r2
 80084c0:	0711      	lsls	r1, r2, #28
 80084c2:	d42d      	bmi.n	8008520 <__swsetup_r+0x88>
 80084c4:	06d9      	lsls	r1, r3, #27
 80084c6:	d411      	bmi.n	80084ec <__swsetup_r+0x54>
 80084c8:	2309      	movs	r3, #9
 80084ca:	2001      	movs	r0, #1
 80084cc:	6033      	str	r3, [r6, #0]
 80084ce:	3337      	adds	r3, #55	; 0x37
 80084d0:	4313      	orrs	r3, r2
 80084d2:	81a3      	strh	r3, [r4, #12]
 80084d4:	4240      	negs	r0, r0
 80084d6:	bd70      	pop	{r4, r5, r6, pc}
 80084d8:	4b29      	ldr	r3, [pc, #164]	; (8008580 <__swsetup_r+0xe8>)
 80084da:	429c      	cmp	r4, r3
 80084dc:	d101      	bne.n	80084e2 <__swsetup_r+0x4a>
 80084de:	68ac      	ldr	r4, [r5, #8]
 80084e0:	e7eb      	b.n	80084ba <__swsetup_r+0x22>
 80084e2:	4b28      	ldr	r3, [pc, #160]	; (8008584 <__swsetup_r+0xec>)
 80084e4:	429c      	cmp	r4, r3
 80084e6:	d1e8      	bne.n	80084ba <__swsetup_r+0x22>
 80084e8:	68ec      	ldr	r4, [r5, #12]
 80084ea:	e7e6      	b.n	80084ba <__swsetup_r+0x22>
 80084ec:	075b      	lsls	r3, r3, #29
 80084ee:	d513      	bpl.n	8008518 <__swsetup_r+0x80>
 80084f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084f2:	2900      	cmp	r1, #0
 80084f4:	d008      	beq.n	8008508 <__swsetup_r+0x70>
 80084f6:	0023      	movs	r3, r4
 80084f8:	3344      	adds	r3, #68	; 0x44
 80084fa:	4299      	cmp	r1, r3
 80084fc:	d002      	beq.n	8008504 <__swsetup_r+0x6c>
 80084fe:	0030      	movs	r0, r6
 8008500:	f001 fcf0 	bl	8009ee4 <_free_r>
 8008504:	2300      	movs	r3, #0
 8008506:	6363      	str	r3, [r4, #52]	; 0x34
 8008508:	2224      	movs	r2, #36	; 0x24
 800850a:	89a3      	ldrh	r3, [r4, #12]
 800850c:	4393      	bics	r3, r2
 800850e:	81a3      	strh	r3, [r4, #12]
 8008510:	2300      	movs	r3, #0
 8008512:	6063      	str	r3, [r4, #4]
 8008514:	6923      	ldr	r3, [r4, #16]
 8008516:	6023      	str	r3, [r4, #0]
 8008518:	2308      	movs	r3, #8
 800851a:	89a2      	ldrh	r2, [r4, #12]
 800851c:	4313      	orrs	r3, r2
 800851e:	81a3      	strh	r3, [r4, #12]
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10b      	bne.n	800853e <__swsetup_r+0xa6>
 8008526:	21a0      	movs	r1, #160	; 0xa0
 8008528:	2280      	movs	r2, #128	; 0x80
 800852a:	89a3      	ldrh	r3, [r4, #12]
 800852c:	0089      	lsls	r1, r1, #2
 800852e:	0092      	lsls	r2, r2, #2
 8008530:	400b      	ands	r3, r1
 8008532:	4293      	cmp	r3, r2
 8008534:	d003      	beq.n	800853e <__swsetup_r+0xa6>
 8008536:	0021      	movs	r1, r4
 8008538:	0030      	movs	r0, r6
 800853a:	f001 f8cd 	bl	80096d8 <__smakebuf_r>
 800853e:	220c      	movs	r2, #12
 8008540:	5ea3      	ldrsh	r3, [r4, r2]
 8008542:	2001      	movs	r0, #1
 8008544:	001a      	movs	r2, r3
 8008546:	b299      	uxth	r1, r3
 8008548:	4002      	ands	r2, r0
 800854a:	4203      	tst	r3, r0
 800854c:	d00f      	beq.n	800856e <__swsetup_r+0xd6>
 800854e:	2200      	movs	r2, #0
 8008550:	60a2      	str	r2, [r4, #8]
 8008552:	6962      	ldr	r2, [r4, #20]
 8008554:	4252      	negs	r2, r2
 8008556:	61a2      	str	r2, [r4, #24]
 8008558:	2000      	movs	r0, #0
 800855a:	6922      	ldr	r2, [r4, #16]
 800855c:	4282      	cmp	r2, r0
 800855e:	d1ba      	bne.n	80084d6 <__swsetup_r+0x3e>
 8008560:	060a      	lsls	r2, r1, #24
 8008562:	d5b8      	bpl.n	80084d6 <__swsetup_r+0x3e>
 8008564:	2240      	movs	r2, #64	; 0x40
 8008566:	4313      	orrs	r3, r2
 8008568:	81a3      	strh	r3, [r4, #12]
 800856a:	3801      	subs	r0, #1
 800856c:	e7b3      	b.n	80084d6 <__swsetup_r+0x3e>
 800856e:	0788      	lsls	r0, r1, #30
 8008570:	d400      	bmi.n	8008574 <__swsetup_r+0xdc>
 8008572:	6962      	ldr	r2, [r4, #20]
 8008574:	60a2      	str	r2, [r4, #8]
 8008576:	e7ef      	b.n	8008558 <__swsetup_r+0xc0>
 8008578:	20000024 	.word	0x20000024
 800857c:	0800b0d0 	.word	0x0800b0d0
 8008580:	0800b0f0 	.word	0x0800b0f0
 8008584:	0800b0b0 	.word	0x0800b0b0

08008588 <quorem>:
 8008588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800858a:	0006      	movs	r6, r0
 800858c:	690d      	ldr	r5, [r1, #16]
 800858e:	6933      	ldr	r3, [r6, #16]
 8008590:	b087      	sub	sp, #28
 8008592:	2000      	movs	r0, #0
 8008594:	9102      	str	r1, [sp, #8]
 8008596:	42ab      	cmp	r3, r5
 8008598:	db6b      	blt.n	8008672 <quorem+0xea>
 800859a:	000b      	movs	r3, r1
 800859c:	3d01      	subs	r5, #1
 800859e:	00ac      	lsls	r4, r5, #2
 80085a0:	3314      	adds	r3, #20
 80085a2:	9305      	str	r3, [sp, #20]
 80085a4:	191b      	adds	r3, r3, r4
 80085a6:	9303      	str	r3, [sp, #12]
 80085a8:	0033      	movs	r3, r6
 80085aa:	3314      	adds	r3, #20
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	191c      	adds	r4, r3, r4
 80085b0:	9b03      	ldr	r3, [sp, #12]
 80085b2:	6827      	ldr	r7, [r4, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	0038      	movs	r0, r7
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	3301      	adds	r3, #1
 80085bc:	0019      	movs	r1, r3
 80085be:	9304      	str	r3, [sp, #16]
 80085c0:	f7f7 fdbe 	bl	8000140 <__udivsi3>
 80085c4:	9b04      	ldr	r3, [sp, #16]
 80085c6:	9000      	str	r0, [sp, #0]
 80085c8:	429f      	cmp	r7, r3
 80085ca:	d329      	bcc.n	8008620 <quorem+0x98>
 80085cc:	2300      	movs	r3, #0
 80085ce:	469c      	mov	ip, r3
 80085d0:	9801      	ldr	r0, [sp, #4]
 80085d2:	9f05      	ldr	r7, [sp, #20]
 80085d4:	9304      	str	r3, [sp, #16]
 80085d6:	cf08      	ldmia	r7!, {r3}
 80085d8:	9a00      	ldr	r2, [sp, #0]
 80085da:	b299      	uxth	r1, r3
 80085dc:	4351      	muls	r1, r2
 80085de:	0c1b      	lsrs	r3, r3, #16
 80085e0:	4353      	muls	r3, r2
 80085e2:	4461      	add	r1, ip
 80085e4:	0c0a      	lsrs	r2, r1, #16
 80085e6:	189b      	adds	r3, r3, r2
 80085e8:	0c1a      	lsrs	r2, r3, #16
 80085ea:	9305      	str	r3, [sp, #20]
 80085ec:	6803      	ldr	r3, [r0, #0]
 80085ee:	4694      	mov	ip, r2
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	9b04      	ldr	r3, [sp, #16]
 80085f4:	b289      	uxth	r1, r1
 80085f6:	18d2      	adds	r2, r2, r3
 80085f8:	6803      	ldr	r3, [r0, #0]
 80085fa:	1a52      	subs	r2, r2, r1
 80085fc:	0c19      	lsrs	r1, r3, #16
 80085fe:	466b      	mov	r3, sp
 8008600:	8a9b      	ldrh	r3, [r3, #20]
 8008602:	1acb      	subs	r3, r1, r3
 8008604:	1411      	asrs	r1, r2, #16
 8008606:	185b      	adds	r3, r3, r1
 8008608:	1419      	asrs	r1, r3, #16
 800860a:	b292      	uxth	r2, r2
 800860c:	041b      	lsls	r3, r3, #16
 800860e:	431a      	orrs	r2, r3
 8008610:	9b03      	ldr	r3, [sp, #12]
 8008612:	9104      	str	r1, [sp, #16]
 8008614:	c004      	stmia	r0!, {r2}
 8008616:	42bb      	cmp	r3, r7
 8008618:	d2dd      	bcs.n	80085d6 <quorem+0x4e>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d02e      	beq.n	800867e <quorem+0xf6>
 8008620:	0030      	movs	r0, r6
 8008622:	9902      	ldr	r1, [sp, #8]
 8008624:	f001 fb38 	bl	8009c98 <__mcmp>
 8008628:	2800      	cmp	r0, #0
 800862a:	db21      	blt.n	8008670 <quorem+0xe8>
 800862c:	0030      	movs	r0, r6
 800862e:	2400      	movs	r4, #0
 8008630:	9b00      	ldr	r3, [sp, #0]
 8008632:	9902      	ldr	r1, [sp, #8]
 8008634:	3301      	adds	r3, #1
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	3014      	adds	r0, #20
 800863a:	3114      	adds	r1, #20
 800863c:	6802      	ldr	r2, [r0, #0]
 800863e:	c908      	ldmia	r1!, {r3}
 8008640:	b292      	uxth	r2, r2
 8008642:	1914      	adds	r4, r2, r4
 8008644:	b29a      	uxth	r2, r3
 8008646:	1aa2      	subs	r2, r4, r2
 8008648:	6804      	ldr	r4, [r0, #0]
 800864a:	0c1b      	lsrs	r3, r3, #16
 800864c:	0c24      	lsrs	r4, r4, #16
 800864e:	1ae3      	subs	r3, r4, r3
 8008650:	1414      	asrs	r4, r2, #16
 8008652:	191b      	adds	r3, r3, r4
 8008654:	141c      	asrs	r4, r3, #16
 8008656:	b292      	uxth	r2, r2
 8008658:	041b      	lsls	r3, r3, #16
 800865a:	4313      	orrs	r3, r2
 800865c:	c008      	stmia	r0!, {r3}
 800865e:	9b03      	ldr	r3, [sp, #12]
 8008660:	428b      	cmp	r3, r1
 8008662:	d2eb      	bcs.n	800863c <quorem+0xb4>
 8008664:	9a01      	ldr	r2, [sp, #4]
 8008666:	00ab      	lsls	r3, r5, #2
 8008668:	18d3      	adds	r3, r2, r3
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	2a00      	cmp	r2, #0
 800866e:	d010      	beq.n	8008692 <quorem+0x10a>
 8008670:	9800      	ldr	r0, [sp, #0]
 8008672:	b007      	add	sp, #28
 8008674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d104      	bne.n	8008686 <quorem+0xfe>
 800867c:	3d01      	subs	r5, #1
 800867e:	9b01      	ldr	r3, [sp, #4]
 8008680:	3c04      	subs	r4, #4
 8008682:	42a3      	cmp	r3, r4
 8008684:	d3f7      	bcc.n	8008676 <quorem+0xee>
 8008686:	6135      	str	r5, [r6, #16]
 8008688:	e7ca      	b.n	8008620 <quorem+0x98>
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	2a00      	cmp	r2, #0
 800868e:	d104      	bne.n	800869a <quorem+0x112>
 8008690:	3d01      	subs	r5, #1
 8008692:	9a01      	ldr	r2, [sp, #4]
 8008694:	3b04      	subs	r3, #4
 8008696:	429a      	cmp	r2, r3
 8008698:	d3f7      	bcc.n	800868a <quorem+0x102>
 800869a:	6135      	str	r5, [r6, #16]
 800869c:	e7e8      	b.n	8008670 <quorem+0xe8>
	...

080086a0 <_dtoa_r>:
 80086a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086a2:	b09d      	sub	sp, #116	; 0x74
 80086a4:	9202      	str	r2, [sp, #8]
 80086a6:	9303      	str	r3, [sp, #12]
 80086a8:	9b02      	ldr	r3, [sp, #8]
 80086aa:	9c03      	ldr	r4, [sp, #12]
 80086ac:	930a      	str	r3, [sp, #40]	; 0x28
 80086ae:	940b      	str	r4, [sp, #44]	; 0x2c
 80086b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80086b2:	0007      	movs	r7, r0
 80086b4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80086b6:	2c00      	cmp	r4, #0
 80086b8:	d10e      	bne.n	80086d8 <_dtoa_r+0x38>
 80086ba:	2010      	movs	r0, #16
 80086bc:	f001 f850 	bl	8009760 <malloc>
 80086c0:	1e02      	subs	r2, r0, #0
 80086c2:	6278      	str	r0, [r7, #36]	; 0x24
 80086c4:	d104      	bne.n	80086d0 <_dtoa_r+0x30>
 80086c6:	21ea      	movs	r1, #234	; 0xea
 80086c8:	4bc0      	ldr	r3, [pc, #768]	; (80089cc <_dtoa_r+0x32c>)
 80086ca:	48c1      	ldr	r0, [pc, #772]	; (80089d0 <_dtoa_r+0x330>)
 80086cc:	f001 fed0 	bl	800a470 <__assert_func>
 80086d0:	6044      	str	r4, [r0, #4]
 80086d2:	6084      	str	r4, [r0, #8]
 80086d4:	6004      	str	r4, [r0, #0]
 80086d6:	60c4      	str	r4, [r0, #12]
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	6819      	ldr	r1, [r3, #0]
 80086dc:	2900      	cmp	r1, #0
 80086de:	d00a      	beq.n	80086f6 <_dtoa_r+0x56>
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	2301      	movs	r3, #1
 80086e4:	4093      	lsls	r3, r2
 80086e6:	604a      	str	r2, [r1, #4]
 80086e8:	608b      	str	r3, [r1, #8]
 80086ea:	0038      	movs	r0, r7
 80086ec:	f001 f892 	bl	8009814 <_Bfree>
 80086f0:	2200      	movs	r2, #0
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	9b03      	ldr	r3, [sp, #12]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	da21      	bge.n	8008740 <_dtoa_r+0xa0>
 80086fc:	2301      	movs	r3, #1
 80086fe:	602b      	str	r3, [r5, #0]
 8008700:	9b03      	ldr	r3, [sp, #12]
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	085b      	lsrs	r3, r3, #1
 8008706:	930b      	str	r3, [sp, #44]	; 0x2c
 8008708:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800870a:	4bb2      	ldr	r3, [pc, #712]	; (80089d4 <_dtoa_r+0x334>)
 800870c:	002a      	movs	r2, r5
 800870e:	9318      	str	r3, [sp, #96]	; 0x60
 8008710:	401a      	ands	r2, r3
 8008712:	429a      	cmp	r2, r3
 8008714:	d117      	bne.n	8008746 <_dtoa_r+0xa6>
 8008716:	4bb0      	ldr	r3, [pc, #704]	; (80089d8 <_dtoa_r+0x338>)
 8008718:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800871a:	0328      	lsls	r0, r5, #12
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	9b02      	ldr	r3, [sp, #8]
 8008720:	0b00      	lsrs	r0, r0, #12
 8008722:	4318      	orrs	r0, r3
 8008724:	d101      	bne.n	800872a <_dtoa_r+0x8a>
 8008726:	f000 fdc3 	bl	80092b0 <_dtoa_r+0xc10>
 800872a:	48ac      	ldr	r0, [pc, #688]	; (80089dc <_dtoa_r+0x33c>)
 800872c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800872e:	9005      	str	r0, [sp, #20]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <_dtoa_r+0x9a>
 8008734:	4baa      	ldr	r3, [pc, #680]	; (80089e0 <_dtoa_r+0x340>)
 8008736:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	9805      	ldr	r0, [sp, #20]
 800873c:	b01d      	add	sp, #116	; 0x74
 800873e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008740:	2300      	movs	r3, #0
 8008742:	602b      	str	r3, [r5, #0]
 8008744:	e7e0      	b.n	8008708 <_dtoa_r+0x68>
 8008746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008748:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800874a:	9312      	str	r3, [sp, #72]	; 0x48
 800874c:	9413      	str	r4, [sp, #76]	; 0x4c
 800874e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008750:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008752:	2200      	movs	r2, #0
 8008754:	2300      	movs	r3, #0
 8008756:	f7f7 fe79 	bl	800044c <__aeabi_dcmpeq>
 800875a:	1e04      	subs	r4, r0, #0
 800875c:	d00b      	beq.n	8008776 <_dtoa_r+0xd6>
 800875e:	2301      	movs	r3, #1
 8008760:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	4b9f      	ldr	r3, [pc, #636]	; (80089e4 <_dtoa_r+0x344>)
 8008766:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008768:	9305      	str	r3, [sp, #20]
 800876a:	2a00      	cmp	r2, #0
 800876c:	d0e5      	beq.n	800873a <_dtoa_r+0x9a>
 800876e:	4a9e      	ldr	r2, [pc, #632]	; (80089e8 <_dtoa_r+0x348>)
 8008770:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008772:	600a      	str	r2, [r1, #0]
 8008774:	e7e1      	b.n	800873a <_dtoa_r+0x9a>
 8008776:	ab1a      	add	r3, sp, #104	; 0x68
 8008778:	9301      	str	r3, [sp, #4]
 800877a:	ab1b      	add	r3, sp, #108	; 0x6c
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	0038      	movs	r0, r7
 8008780:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008782:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008784:	f001 fb3c 	bl	8009e00 <__d2b>
 8008788:	006e      	lsls	r6, r5, #1
 800878a:	9004      	str	r0, [sp, #16]
 800878c:	0d76      	lsrs	r6, r6, #21
 800878e:	d100      	bne.n	8008792 <_dtoa_r+0xf2>
 8008790:	e07c      	b.n	800888c <_dtoa_r+0x1ec>
 8008792:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008794:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008796:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008798:	4a94      	ldr	r2, [pc, #592]	; (80089ec <_dtoa_r+0x34c>)
 800879a:	031b      	lsls	r3, r3, #12
 800879c:	0b1b      	lsrs	r3, r3, #12
 800879e:	431a      	orrs	r2, r3
 80087a0:	0011      	movs	r1, r2
 80087a2:	4b93      	ldr	r3, [pc, #588]	; (80089f0 <_dtoa_r+0x350>)
 80087a4:	9416      	str	r4, [sp, #88]	; 0x58
 80087a6:	18f6      	adds	r6, r6, r3
 80087a8:	2200      	movs	r2, #0
 80087aa:	4b92      	ldr	r3, [pc, #584]	; (80089f4 <_dtoa_r+0x354>)
 80087ac:	f7fa f862 	bl	8002874 <__aeabi_dsub>
 80087b0:	4a91      	ldr	r2, [pc, #580]	; (80089f8 <_dtoa_r+0x358>)
 80087b2:	4b92      	ldr	r3, [pc, #584]	; (80089fc <_dtoa_r+0x35c>)
 80087b4:	f7f9 fdf2 	bl	800239c <__aeabi_dmul>
 80087b8:	4a91      	ldr	r2, [pc, #580]	; (8008a00 <_dtoa_r+0x360>)
 80087ba:	4b92      	ldr	r3, [pc, #584]	; (8008a04 <_dtoa_r+0x364>)
 80087bc:	f7f8 fe7e 	bl	80014bc <__aeabi_dadd>
 80087c0:	0004      	movs	r4, r0
 80087c2:	0030      	movs	r0, r6
 80087c4:	000d      	movs	r5, r1
 80087c6:	f7fa fc3b 	bl	8003040 <__aeabi_i2d>
 80087ca:	4a8f      	ldr	r2, [pc, #572]	; (8008a08 <_dtoa_r+0x368>)
 80087cc:	4b8f      	ldr	r3, [pc, #572]	; (8008a0c <_dtoa_r+0x36c>)
 80087ce:	f7f9 fde5 	bl	800239c <__aeabi_dmul>
 80087d2:	0002      	movs	r2, r0
 80087d4:	000b      	movs	r3, r1
 80087d6:	0020      	movs	r0, r4
 80087d8:	0029      	movs	r1, r5
 80087da:	f7f8 fe6f 	bl	80014bc <__aeabi_dadd>
 80087de:	0004      	movs	r4, r0
 80087e0:	000d      	movs	r5, r1
 80087e2:	f7fa fbf7 	bl	8002fd4 <__aeabi_d2iz>
 80087e6:	2200      	movs	r2, #0
 80087e8:	9002      	str	r0, [sp, #8]
 80087ea:	2300      	movs	r3, #0
 80087ec:	0020      	movs	r0, r4
 80087ee:	0029      	movs	r1, r5
 80087f0:	f7f7 fe32 	bl	8000458 <__aeabi_dcmplt>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d00b      	beq.n	8008810 <_dtoa_r+0x170>
 80087f8:	9802      	ldr	r0, [sp, #8]
 80087fa:	f7fa fc21 	bl	8003040 <__aeabi_i2d>
 80087fe:	002b      	movs	r3, r5
 8008800:	0022      	movs	r2, r4
 8008802:	f7f7 fe23 	bl	800044c <__aeabi_dcmpeq>
 8008806:	4243      	negs	r3, r0
 8008808:	4158      	adcs	r0, r3
 800880a:	9b02      	ldr	r3, [sp, #8]
 800880c:	1a1b      	subs	r3, r3, r0
 800880e:	9302      	str	r3, [sp, #8]
 8008810:	2301      	movs	r3, #1
 8008812:	9315      	str	r3, [sp, #84]	; 0x54
 8008814:	9b02      	ldr	r3, [sp, #8]
 8008816:	2b16      	cmp	r3, #22
 8008818:	d80f      	bhi.n	800883a <_dtoa_r+0x19a>
 800881a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800881c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800881e:	00da      	lsls	r2, r3, #3
 8008820:	4b7b      	ldr	r3, [pc, #492]	; (8008a10 <_dtoa_r+0x370>)
 8008822:	189b      	adds	r3, r3, r2
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f7f7 fe16 	bl	8000458 <__aeabi_dcmplt>
 800882c:	2800      	cmp	r0, #0
 800882e:	d049      	beq.n	80088c4 <_dtoa_r+0x224>
 8008830:	9b02      	ldr	r3, [sp, #8]
 8008832:	3b01      	subs	r3, #1
 8008834:	9302      	str	r3, [sp, #8]
 8008836:	2300      	movs	r3, #0
 8008838:	9315      	str	r3, [sp, #84]	; 0x54
 800883a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800883c:	1b9e      	subs	r6, r3, r6
 800883e:	2300      	movs	r3, #0
 8008840:	9308      	str	r3, [sp, #32]
 8008842:	0033      	movs	r3, r6
 8008844:	3b01      	subs	r3, #1
 8008846:	930d      	str	r3, [sp, #52]	; 0x34
 8008848:	d504      	bpl.n	8008854 <_dtoa_r+0x1b4>
 800884a:	2301      	movs	r3, #1
 800884c:	1b9b      	subs	r3, r3, r6
 800884e:	9308      	str	r3, [sp, #32]
 8008850:	2300      	movs	r3, #0
 8008852:	930d      	str	r3, [sp, #52]	; 0x34
 8008854:	9b02      	ldr	r3, [sp, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	db36      	blt.n	80088c8 <_dtoa_r+0x228>
 800885a:	9a02      	ldr	r2, [sp, #8]
 800885c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800885e:	4694      	mov	ip, r2
 8008860:	4463      	add	r3, ip
 8008862:	930d      	str	r3, [sp, #52]	; 0x34
 8008864:	2300      	movs	r3, #0
 8008866:	9214      	str	r2, [sp, #80]	; 0x50
 8008868:	930e      	str	r3, [sp, #56]	; 0x38
 800886a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800886c:	2401      	movs	r4, #1
 800886e:	2b09      	cmp	r3, #9
 8008870:	d862      	bhi.n	8008938 <_dtoa_r+0x298>
 8008872:	2b05      	cmp	r3, #5
 8008874:	dd02      	ble.n	800887c <_dtoa_r+0x1dc>
 8008876:	2400      	movs	r4, #0
 8008878:	3b04      	subs	r3, #4
 800887a:	9322      	str	r3, [sp, #136]	; 0x88
 800887c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800887e:	1e98      	subs	r0, r3, #2
 8008880:	2803      	cmp	r0, #3
 8008882:	d862      	bhi.n	800894a <_dtoa_r+0x2aa>
 8008884:	f7f7 fc48 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008888:	56343629 	.word	0x56343629
 800888c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800888e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008890:	189e      	adds	r6, r3, r2
 8008892:	4b60      	ldr	r3, [pc, #384]	; (8008a14 <_dtoa_r+0x374>)
 8008894:	18f2      	adds	r2, r6, r3
 8008896:	2a20      	cmp	r2, #32
 8008898:	dd0f      	ble.n	80088ba <_dtoa_r+0x21a>
 800889a:	2340      	movs	r3, #64	; 0x40
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	409d      	lsls	r5, r3
 80088a0:	4b5d      	ldr	r3, [pc, #372]	; (8008a18 <_dtoa_r+0x378>)
 80088a2:	9802      	ldr	r0, [sp, #8]
 80088a4:	18f3      	adds	r3, r6, r3
 80088a6:	40d8      	lsrs	r0, r3
 80088a8:	4328      	orrs	r0, r5
 80088aa:	f7fa fbf9 	bl	80030a0 <__aeabi_ui2d>
 80088ae:	2301      	movs	r3, #1
 80088b0:	4c5a      	ldr	r4, [pc, #360]	; (8008a1c <_dtoa_r+0x37c>)
 80088b2:	3e01      	subs	r6, #1
 80088b4:	1909      	adds	r1, r1, r4
 80088b6:	9316      	str	r3, [sp, #88]	; 0x58
 80088b8:	e776      	b.n	80087a8 <_dtoa_r+0x108>
 80088ba:	2320      	movs	r3, #32
 80088bc:	9802      	ldr	r0, [sp, #8]
 80088be:	1a9b      	subs	r3, r3, r2
 80088c0:	4098      	lsls	r0, r3
 80088c2:	e7f2      	b.n	80088aa <_dtoa_r+0x20a>
 80088c4:	9015      	str	r0, [sp, #84]	; 0x54
 80088c6:	e7b8      	b.n	800883a <_dtoa_r+0x19a>
 80088c8:	9b08      	ldr	r3, [sp, #32]
 80088ca:	9a02      	ldr	r2, [sp, #8]
 80088cc:	1a9b      	subs	r3, r3, r2
 80088ce:	9308      	str	r3, [sp, #32]
 80088d0:	4253      	negs	r3, r2
 80088d2:	930e      	str	r3, [sp, #56]	; 0x38
 80088d4:	2300      	movs	r3, #0
 80088d6:	9314      	str	r3, [sp, #80]	; 0x50
 80088d8:	e7c7      	b.n	800886a <_dtoa_r+0x1ca>
 80088da:	2300      	movs	r3, #0
 80088dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80088de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	dc36      	bgt.n	8008952 <_dtoa_r+0x2b2>
 80088e4:	2301      	movs	r3, #1
 80088e6:	001a      	movs	r2, r3
 80088e8:	930c      	str	r3, [sp, #48]	; 0x30
 80088ea:	9306      	str	r3, [sp, #24]
 80088ec:	9223      	str	r2, [sp, #140]	; 0x8c
 80088ee:	e00d      	b.n	800890c <_dtoa_r+0x26c>
 80088f0:	2301      	movs	r3, #1
 80088f2:	e7f3      	b.n	80088dc <_dtoa_r+0x23c>
 80088f4:	2300      	movs	r3, #0
 80088f6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80088f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80088fa:	4694      	mov	ip, r2
 80088fc:	9b02      	ldr	r3, [sp, #8]
 80088fe:	4463      	add	r3, ip
 8008900:	930c      	str	r3, [sp, #48]	; 0x30
 8008902:	3301      	adds	r3, #1
 8008904:	9306      	str	r3, [sp, #24]
 8008906:	2b00      	cmp	r3, #0
 8008908:	dc00      	bgt.n	800890c <_dtoa_r+0x26c>
 800890a:	2301      	movs	r3, #1
 800890c:	2200      	movs	r2, #0
 800890e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008910:	6042      	str	r2, [r0, #4]
 8008912:	3204      	adds	r2, #4
 8008914:	0015      	movs	r5, r2
 8008916:	3514      	adds	r5, #20
 8008918:	6841      	ldr	r1, [r0, #4]
 800891a:	429d      	cmp	r5, r3
 800891c:	d91d      	bls.n	800895a <_dtoa_r+0x2ba>
 800891e:	0038      	movs	r0, r7
 8008920:	f000 ff34 	bl	800978c <_Balloc>
 8008924:	9005      	str	r0, [sp, #20]
 8008926:	2800      	cmp	r0, #0
 8008928:	d11b      	bne.n	8008962 <_dtoa_r+0x2c2>
 800892a:	21d5      	movs	r1, #213	; 0xd5
 800892c:	0002      	movs	r2, r0
 800892e:	4b3c      	ldr	r3, [pc, #240]	; (8008a20 <_dtoa_r+0x380>)
 8008930:	0049      	lsls	r1, r1, #1
 8008932:	e6ca      	b.n	80086ca <_dtoa_r+0x2a>
 8008934:	2301      	movs	r3, #1
 8008936:	e7de      	b.n	80088f6 <_dtoa_r+0x256>
 8008938:	2300      	movs	r3, #0
 800893a:	940f      	str	r4, [sp, #60]	; 0x3c
 800893c:	9322      	str	r3, [sp, #136]	; 0x88
 800893e:	3b01      	subs	r3, #1
 8008940:	930c      	str	r3, [sp, #48]	; 0x30
 8008942:	9306      	str	r3, [sp, #24]
 8008944:	2200      	movs	r2, #0
 8008946:	3313      	adds	r3, #19
 8008948:	e7d0      	b.n	80088ec <_dtoa_r+0x24c>
 800894a:	2301      	movs	r3, #1
 800894c:	930f      	str	r3, [sp, #60]	; 0x3c
 800894e:	3b02      	subs	r3, #2
 8008950:	e7f6      	b.n	8008940 <_dtoa_r+0x2a0>
 8008952:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008954:	930c      	str	r3, [sp, #48]	; 0x30
 8008956:	9306      	str	r3, [sp, #24]
 8008958:	e7d8      	b.n	800890c <_dtoa_r+0x26c>
 800895a:	3101      	adds	r1, #1
 800895c:	6041      	str	r1, [r0, #4]
 800895e:	0052      	lsls	r2, r2, #1
 8008960:	e7d8      	b.n	8008914 <_dtoa_r+0x274>
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	9a05      	ldr	r2, [sp, #20]
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	9b06      	ldr	r3, [sp, #24]
 800896a:	2b0e      	cmp	r3, #14
 800896c:	d900      	bls.n	8008970 <_dtoa_r+0x2d0>
 800896e:	e0eb      	b.n	8008b48 <_dtoa_r+0x4a8>
 8008970:	2c00      	cmp	r4, #0
 8008972:	d100      	bne.n	8008976 <_dtoa_r+0x2d6>
 8008974:	e0e8      	b.n	8008b48 <_dtoa_r+0x4a8>
 8008976:	9b02      	ldr	r3, [sp, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	dd68      	ble.n	8008a4e <_dtoa_r+0x3ae>
 800897c:	001a      	movs	r2, r3
 800897e:	210f      	movs	r1, #15
 8008980:	4b23      	ldr	r3, [pc, #140]	; (8008a10 <_dtoa_r+0x370>)
 8008982:	400a      	ands	r2, r1
 8008984:	00d2      	lsls	r2, r2, #3
 8008986:	189b      	adds	r3, r3, r2
 8008988:	681d      	ldr	r5, [r3, #0]
 800898a:	685e      	ldr	r6, [r3, #4]
 800898c:	9b02      	ldr	r3, [sp, #8]
 800898e:	111c      	asrs	r4, r3, #4
 8008990:	2302      	movs	r3, #2
 8008992:	9310      	str	r3, [sp, #64]	; 0x40
 8008994:	9b02      	ldr	r3, [sp, #8]
 8008996:	05db      	lsls	r3, r3, #23
 8008998:	d50b      	bpl.n	80089b2 <_dtoa_r+0x312>
 800899a:	4b22      	ldr	r3, [pc, #136]	; (8008a24 <_dtoa_r+0x384>)
 800899c:	400c      	ands	r4, r1
 800899e:	6a1a      	ldr	r2, [r3, #32]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80089a4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80089a6:	f7f9 f8f3 	bl	8001b90 <__aeabi_ddiv>
 80089aa:	2303      	movs	r3, #3
 80089ac:	900a      	str	r0, [sp, #40]	; 0x28
 80089ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80089b0:	9310      	str	r3, [sp, #64]	; 0x40
 80089b2:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <_dtoa_r+0x384>)
 80089b4:	9307      	str	r3, [sp, #28]
 80089b6:	2c00      	cmp	r4, #0
 80089b8:	d136      	bne.n	8008a28 <_dtoa_r+0x388>
 80089ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80089bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089be:	002a      	movs	r2, r5
 80089c0:	0033      	movs	r3, r6
 80089c2:	f7f9 f8e5 	bl	8001b90 <__aeabi_ddiv>
 80089c6:	900a      	str	r0, [sp, #40]	; 0x28
 80089c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80089ca:	e05c      	b.n	8008a86 <_dtoa_r+0x3e6>
 80089cc:	0800b029 	.word	0x0800b029
 80089d0:	0800b040 	.word	0x0800b040
 80089d4:	7ff00000 	.word	0x7ff00000
 80089d8:	0000270f 	.word	0x0000270f
 80089dc:	0800b025 	.word	0x0800b025
 80089e0:	0800b028 	.word	0x0800b028
 80089e4:	0800aff8 	.word	0x0800aff8
 80089e8:	0800aff9 	.word	0x0800aff9
 80089ec:	3ff00000 	.word	0x3ff00000
 80089f0:	fffffc01 	.word	0xfffffc01
 80089f4:	3ff80000 	.word	0x3ff80000
 80089f8:	636f4361 	.word	0x636f4361
 80089fc:	3fd287a7 	.word	0x3fd287a7
 8008a00:	8b60c8b3 	.word	0x8b60c8b3
 8008a04:	3fc68a28 	.word	0x3fc68a28
 8008a08:	509f79fb 	.word	0x509f79fb
 8008a0c:	3fd34413 	.word	0x3fd34413
 8008a10:	0800b198 	.word	0x0800b198
 8008a14:	00000432 	.word	0x00000432
 8008a18:	00000412 	.word	0x00000412
 8008a1c:	fe100000 	.word	0xfe100000
 8008a20:	0800b09f 	.word	0x0800b09f
 8008a24:	0800b170 	.word	0x0800b170
 8008a28:	2301      	movs	r3, #1
 8008a2a:	421c      	tst	r4, r3
 8008a2c:	d00b      	beq.n	8008a46 <_dtoa_r+0x3a6>
 8008a2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a30:	0028      	movs	r0, r5
 8008a32:	3301      	adds	r3, #1
 8008a34:	9310      	str	r3, [sp, #64]	; 0x40
 8008a36:	9b07      	ldr	r3, [sp, #28]
 8008a38:	0031      	movs	r1, r6
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f7f9 fcad 	bl	800239c <__aeabi_dmul>
 8008a42:	0005      	movs	r5, r0
 8008a44:	000e      	movs	r6, r1
 8008a46:	9b07      	ldr	r3, [sp, #28]
 8008a48:	1064      	asrs	r4, r4, #1
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	e7b2      	b.n	80089b4 <_dtoa_r+0x314>
 8008a4e:	2302      	movs	r3, #2
 8008a50:	9310      	str	r3, [sp, #64]	; 0x40
 8008a52:	9b02      	ldr	r3, [sp, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d016      	beq.n	8008a86 <_dtoa_r+0x3e6>
 8008a58:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008a5a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008a5c:	425c      	negs	r4, r3
 8008a5e:	230f      	movs	r3, #15
 8008a60:	4ab5      	ldr	r2, [pc, #724]	; (8008d38 <_dtoa_r+0x698>)
 8008a62:	4023      	ands	r3, r4
 8008a64:	00db      	lsls	r3, r3, #3
 8008a66:	18d3      	adds	r3, r2, r3
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f7f9 fc96 	bl	800239c <__aeabi_dmul>
 8008a70:	2601      	movs	r6, #1
 8008a72:	2300      	movs	r3, #0
 8008a74:	900a      	str	r0, [sp, #40]	; 0x28
 8008a76:	910b      	str	r1, [sp, #44]	; 0x2c
 8008a78:	4db0      	ldr	r5, [pc, #704]	; (8008d3c <_dtoa_r+0x69c>)
 8008a7a:	1124      	asrs	r4, r4, #4
 8008a7c:	2c00      	cmp	r4, #0
 8008a7e:	d000      	beq.n	8008a82 <_dtoa_r+0x3e2>
 8008a80:	e094      	b.n	8008bac <_dtoa_r+0x50c>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d19f      	bne.n	80089c6 <_dtoa_r+0x326>
 8008a86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d100      	bne.n	8008a8e <_dtoa_r+0x3ee>
 8008a8c:	e09b      	b.n	8008bc6 <_dtoa_r+0x526>
 8008a8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a90:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008a92:	2200      	movs	r2, #0
 8008a94:	0020      	movs	r0, r4
 8008a96:	0029      	movs	r1, r5
 8008a98:	4ba9      	ldr	r3, [pc, #676]	; (8008d40 <_dtoa_r+0x6a0>)
 8008a9a:	f7f7 fcdd 	bl	8000458 <__aeabi_dcmplt>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d100      	bne.n	8008aa4 <_dtoa_r+0x404>
 8008aa2:	e090      	b.n	8008bc6 <_dtoa_r+0x526>
 8008aa4:	9b06      	ldr	r3, [sp, #24]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d100      	bne.n	8008aac <_dtoa_r+0x40c>
 8008aaa:	e08c      	b.n	8008bc6 <_dtoa_r+0x526>
 8008aac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	dd46      	ble.n	8008b40 <_dtoa_r+0x4a0>
 8008ab2:	9b02      	ldr	r3, [sp, #8]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	0020      	movs	r0, r4
 8008ab8:	0029      	movs	r1, r5
 8008aba:	1e5e      	subs	r6, r3, #1
 8008abc:	4ba1      	ldr	r3, [pc, #644]	; (8008d44 <_dtoa_r+0x6a4>)
 8008abe:	f7f9 fc6d 	bl	800239c <__aeabi_dmul>
 8008ac2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ac4:	900a      	str	r0, [sp, #40]	; 0x28
 8008ac6:	910b      	str	r1, [sp, #44]	; 0x2c
 8008ac8:	3301      	adds	r3, #1
 8008aca:	9310      	str	r3, [sp, #64]	; 0x40
 8008acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ace:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008ad0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ad2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008ad4:	9307      	str	r3, [sp, #28]
 8008ad6:	f7fa fab3 	bl	8003040 <__aeabi_i2d>
 8008ada:	0022      	movs	r2, r4
 8008adc:	002b      	movs	r3, r5
 8008ade:	f7f9 fc5d 	bl	800239c <__aeabi_dmul>
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	4b98      	ldr	r3, [pc, #608]	; (8008d48 <_dtoa_r+0x6a8>)
 8008ae6:	f7f8 fce9 	bl	80014bc <__aeabi_dadd>
 8008aea:	9010      	str	r0, [sp, #64]	; 0x40
 8008aec:	9111      	str	r1, [sp, #68]	; 0x44
 8008aee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008af0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008af2:	920a      	str	r2, [sp, #40]	; 0x28
 8008af4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008af6:	4a95      	ldr	r2, [pc, #596]	; (8008d4c <_dtoa_r+0x6ac>)
 8008af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008afa:	4694      	mov	ip, r2
 8008afc:	4463      	add	r3, ip
 8008afe:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b00:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b02:	9b07      	ldr	r3, [sp, #28]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d161      	bne.n	8008bcc <_dtoa_r+0x52c>
 8008b08:	2200      	movs	r2, #0
 8008b0a:	0020      	movs	r0, r4
 8008b0c:	0029      	movs	r1, r5
 8008b0e:	4b90      	ldr	r3, [pc, #576]	; (8008d50 <_dtoa_r+0x6b0>)
 8008b10:	f7f9 feb0 	bl	8002874 <__aeabi_dsub>
 8008b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b18:	0004      	movs	r4, r0
 8008b1a:	000d      	movs	r5, r1
 8008b1c:	f7f7 fcb0 	bl	8000480 <__aeabi_dcmpgt>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d000      	beq.n	8008b26 <_dtoa_r+0x486>
 8008b24:	e2b5      	b.n	8009092 <_dtoa_r+0x9f2>
 8008b26:	488b      	ldr	r0, [pc, #556]	; (8008d54 <_dtoa_r+0x6b4>)
 8008b28:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008b2a:	4684      	mov	ip, r0
 8008b2c:	4461      	add	r1, ip
 8008b2e:	000b      	movs	r3, r1
 8008b30:	0020      	movs	r0, r4
 8008b32:	0029      	movs	r1, r5
 8008b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b36:	f7f7 fc8f 	bl	8000458 <__aeabi_dcmplt>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d000      	beq.n	8008b40 <_dtoa_r+0x4a0>
 8008b3e:	e2a5      	b.n	800908c <_dtoa_r+0x9ec>
 8008b40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b42:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008b44:	930a      	str	r3, [sp, #40]	; 0x28
 8008b46:	940b      	str	r4, [sp, #44]	; 0x2c
 8008b48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	da00      	bge.n	8008b50 <_dtoa_r+0x4b0>
 8008b4e:	e171      	b.n	8008e34 <_dtoa_r+0x794>
 8008b50:	9a02      	ldr	r2, [sp, #8]
 8008b52:	2a0e      	cmp	r2, #14
 8008b54:	dd00      	ble.n	8008b58 <_dtoa_r+0x4b8>
 8008b56:	e16d      	b.n	8008e34 <_dtoa_r+0x794>
 8008b58:	4b77      	ldr	r3, [pc, #476]	; (8008d38 <_dtoa_r+0x698>)
 8008b5a:	00d2      	lsls	r2, r2, #3
 8008b5c:	189b      	adds	r3, r3, r2
 8008b5e:	685c      	ldr	r4, [r3, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	9308      	str	r3, [sp, #32]
 8008b64:	9409      	str	r4, [sp, #36]	; 0x24
 8008b66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	db00      	blt.n	8008b6e <_dtoa_r+0x4ce>
 8008b6c:	e0f6      	b.n	8008d5c <_dtoa_r+0x6bc>
 8008b6e:	9b06      	ldr	r3, [sp, #24]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	dd00      	ble.n	8008b76 <_dtoa_r+0x4d6>
 8008b74:	e0f2      	b.n	8008d5c <_dtoa_r+0x6bc>
 8008b76:	d000      	beq.n	8008b7a <_dtoa_r+0x4da>
 8008b78:	e288      	b.n	800908c <_dtoa_r+0x9ec>
 8008b7a:	9808      	ldr	r0, [sp, #32]
 8008b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b7e:	2200      	movs	r2, #0
 8008b80:	4b73      	ldr	r3, [pc, #460]	; (8008d50 <_dtoa_r+0x6b0>)
 8008b82:	f7f9 fc0b 	bl	800239c <__aeabi_dmul>
 8008b86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b8a:	f7f7 fc83 	bl	8000494 <__aeabi_dcmpge>
 8008b8e:	9e06      	ldr	r6, [sp, #24]
 8008b90:	0035      	movs	r5, r6
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d000      	beq.n	8008b98 <_dtoa_r+0x4f8>
 8008b96:	e25f      	b.n	8009058 <_dtoa_r+0x9b8>
 8008b98:	9b05      	ldr	r3, [sp, #20]
 8008b9a:	9a05      	ldr	r2, [sp, #20]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	9307      	str	r3, [sp, #28]
 8008ba0:	2331      	movs	r3, #49	; 0x31
 8008ba2:	7013      	strb	r3, [r2, #0]
 8008ba4:	9b02      	ldr	r3, [sp, #8]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	9302      	str	r3, [sp, #8]
 8008baa:	e25a      	b.n	8009062 <_dtoa_r+0x9c2>
 8008bac:	4234      	tst	r4, r6
 8008bae:	d007      	beq.n	8008bc0 <_dtoa_r+0x520>
 8008bb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	9310      	str	r3, [sp, #64]	; 0x40
 8008bb6:	682a      	ldr	r2, [r5, #0]
 8008bb8:	686b      	ldr	r3, [r5, #4]
 8008bba:	f7f9 fbef 	bl	800239c <__aeabi_dmul>
 8008bbe:	0033      	movs	r3, r6
 8008bc0:	1064      	asrs	r4, r4, #1
 8008bc2:	3508      	adds	r5, #8
 8008bc4:	e75a      	b.n	8008a7c <_dtoa_r+0x3dc>
 8008bc6:	9e02      	ldr	r6, [sp, #8]
 8008bc8:	9b06      	ldr	r3, [sp, #24]
 8008bca:	e780      	b.n	8008ace <_dtoa_r+0x42e>
 8008bcc:	9b07      	ldr	r3, [sp, #28]
 8008bce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008bd0:	1e5a      	subs	r2, r3, #1
 8008bd2:	4b59      	ldr	r3, [pc, #356]	; (8008d38 <_dtoa_r+0x698>)
 8008bd4:	00d2      	lsls	r2, r2, #3
 8008bd6:	189b      	adds	r3, r3, r2
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	d051      	beq.n	8008c84 <_dtoa_r+0x5e4>
 8008be0:	2000      	movs	r0, #0
 8008be2:	495d      	ldr	r1, [pc, #372]	; (8008d58 <_dtoa_r+0x6b8>)
 8008be4:	f7f8 ffd4 	bl	8001b90 <__aeabi_ddiv>
 8008be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bec:	f7f9 fe42 	bl	8002874 <__aeabi_dsub>
 8008bf0:	9a05      	ldr	r2, [sp, #20]
 8008bf2:	9b05      	ldr	r3, [sp, #20]
 8008bf4:	4694      	mov	ip, r2
 8008bf6:	9310      	str	r3, [sp, #64]	; 0x40
 8008bf8:	9b07      	ldr	r3, [sp, #28]
 8008bfa:	900a      	str	r0, [sp, #40]	; 0x28
 8008bfc:	910b      	str	r1, [sp, #44]	; 0x2c
 8008bfe:	4463      	add	r3, ip
 8008c00:	9319      	str	r3, [sp, #100]	; 0x64
 8008c02:	0029      	movs	r1, r5
 8008c04:	0020      	movs	r0, r4
 8008c06:	f7fa f9e5 	bl	8002fd4 <__aeabi_d2iz>
 8008c0a:	9017      	str	r0, [sp, #92]	; 0x5c
 8008c0c:	f7fa fa18 	bl	8003040 <__aeabi_i2d>
 8008c10:	0002      	movs	r2, r0
 8008c12:	000b      	movs	r3, r1
 8008c14:	0020      	movs	r0, r4
 8008c16:	0029      	movs	r1, r5
 8008c18:	f7f9 fe2c 	bl	8002874 <__aeabi_dsub>
 8008c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c20:	3301      	adds	r3, #1
 8008c22:	9307      	str	r3, [sp, #28]
 8008c24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c26:	0004      	movs	r4, r0
 8008c28:	3330      	adds	r3, #48	; 0x30
 8008c2a:	7013      	strb	r3, [r2, #0]
 8008c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c30:	000d      	movs	r5, r1
 8008c32:	f7f7 fc11 	bl	8000458 <__aeabi_dcmplt>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d175      	bne.n	8008d26 <_dtoa_r+0x686>
 8008c3a:	0022      	movs	r2, r4
 8008c3c:	002b      	movs	r3, r5
 8008c3e:	2000      	movs	r0, #0
 8008c40:	493f      	ldr	r1, [pc, #252]	; (8008d40 <_dtoa_r+0x6a0>)
 8008c42:	f7f9 fe17 	bl	8002874 <__aeabi_dsub>
 8008c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c4a:	f7f7 fc05 	bl	8000458 <__aeabi_dcmplt>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d000      	beq.n	8008c54 <_dtoa_r+0x5b4>
 8008c52:	e0d1      	b.n	8008df8 <_dtoa_r+0x758>
 8008c54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c56:	9a07      	ldr	r2, [sp, #28]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d100      	bne.n	8008c5e <_dtoa_r+0x5be>
 8008c5c:	e770      	b.n	8008b40 <_dtoa_r+0x4a0>
 8008c5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c62:	2200      	movs	r2, #0
 8008c64:	4b37      	ldr	r3, [pc, #220]	; (8008d44 <_dtoa_r+0x6a4>)
 8008c66:	f7f9 fb99 	bl	800239c <__aeabi_dmul>
 8008c6a:	4b36      	ldr	r3, [pc, #216]	; (8008d44 <_dtoa_r+0x6a4>)
 8008c6c:	900a      	str	r0, [sp, #40]	; 0x28
 8008c6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008c70:	2200      	movs	r2, #0
 8008c72:	0020      	movs	r0, r4
 8008c74:	0029      	movs	r1, r5
 8008c76:	f7f9 fb91 	bl	800239c <__aeabi_dmul>
 8008c7a:	9b07      	ldr	r3, [sp, #28]
 8008c7c:	0004      	movs	r4, r0
 8008c7e:	000d      	movs	r5, r1
 8008c80:	9310      	str	r3, [sp, #64]	; 0x40
 8008c82:	e7be      	b.n	8008c02 <_dtoa_r+0x562>
 8008c84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c88:	f7f9 fb88 	bl	800239c <__aeabi_dmul>
 8008c8c:	9a05      	ldr	r2, [sp, #20]
 8008c8e:	9b05      	ldr	r3, [sp, #20]
 8008c90:	4694      	mov	ip, r2
 8008c92:	930a      	str	r3, [sp, #40]	; 0x28
 8008c94:	9b07      	ldr	r3, [sp, #28]
 8008c96:	9010      	str	r0, [sp, #64]	; 0x40
 8008c98:	9111      	str	r1, [sp, #68]	; 0x44
 8008c9a:	4463      	add	r3, ip
 8008c9c:	9319      	str	r3, [sp, #100]	; 0x64
 8008c9e:	0029      	movs	r1, r5
 8008ca0:	0020      	movs	r0, r4
 8008ca2:	f7fa f997 	bl	8002fd4 <__aeabi_d2iz>
 8008ca6:	9017      	str	r0, [sp, #92]	; 0x5c
 8008ca8:	f7fa f9ca 	bl	8003040 <__aeabi_i2d>
 8008cac:	0002      	movs	r2, r0
 8008cae:	000b      	movs	r3, r1
 8008cb0:	0020      	movs	r0, r4
 8008cb2:	0029      	movs	r1, r5
 8008cb4:	f7f9 fdde 	bl	8002874 <__aeabi_dsub>
 8008cb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cbc:	3330      	adds	r3, #48	; 0x30
 8008cbe:	7013      	strb	r3, [r2, #0]
 8008cc0:	0013      	movs	r3, r2
 8008cc2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	0004      	movs	r4, r0
 8008cc8:	000d      	movs	r5, r1
 8008cca:	930a      	str	r3, [sp, #40]	; 0x28
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d12c      	bne.n	8008d2a <_dtoa_r+0x68a>
 8008cd0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008cd2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008cd4:	9a05      	ldr	r2, [sp, #20]
 8008cd6:	9b07      	ldr	r3, [sp, #28]
 8008cd8:	4694      	mov	ip, r2
 8008cda:	4463      	add	r3, ip
 8008cdc:	2200      	movs	r2, #0
 8008cde:	9307      	str	r3, [sp, #28]
 8008ce0:	4b1d      	ldr	r3, [pc, #116]	; (8008d58 <_dtoa_r+0x6b8>)
 8008ce2:	f7f8 fbeb 	bl	80014bc <__aeabi_dadd>
 8008ce6:	0002      	movs	r2, r0
 8008ce8:	000b      	movs	r3, r1
 8008cea:	0020      	movs	r0, r4
 8008cec:	0029      	movs	r1, r5
 8008cee:	f7f7 fbc7 	bl	8000480 <__aeabi_dcmpgt>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d000      	beq.n	8008cf8 <_dtoa_r+0x658>
 8008cf6:	e07f      	b.n	8008df8 <_dtoa_r+0x758>
 8008cf8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008cfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	4916      	ldr	r1, [pc, #88]	; (8008d58 <_dtoa_r+0x6b8>)
 8008d00:	f7f9 fdb8 	bl	8002874 <__aeabi_dsub>
 8008d04:	0002      	movs	r2, r0
 8008d06:	000b      	movs	r3, r1
 8008d08:	0020      	movs	r0, r4
 8008d0a:	0029      	movs	r1, r5
 8008d0c:	f7f7 fba4 	bl	8000458 <__aeabi_dcmplt>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d100      	bne.n	8008d16 <_dtoa_r+0x676>
 8008d14:	e714      	b.n	8008b40 <_dtoa_r+0x4a0>
 8008d16:	9b07      	ldr	r3, [sp, #28]
 8008d18:	001a      	movs	r2, r3
 8008d1a:	3a01      	subs	r2, #1
 8008d1c:	9207      	str	r2, [sp, #28]
 8008d1e:	7812      	ldrb	r2, [r2, #0]
 8008d20:	2a30      	cmp	r2, #48	; 0x30
 8008d22:	d0f8      	beq.n	8008d16 <_dtoa_r+0x676>
 8008d24:	9307      	str	r3, [sp, #28]
 8008d26:	9602      	str	r6, [sp, #8]
 8008d28:	e054      	b.n	8008dd4 <_dtoa_r+0x734>
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <_dtoa_r+0x6a4>)
 8008d2e:	f7f9 fb35 	bl	800239c <__aeabi_dmul>
 8008d32:	0004      	movs	r4, r0
 8008d34:	000d      	movs	r5, r1
 8008d36:	e7b2      	b.n	8008c9e <_dtoa_r+0x5fe>
 8008d38:	0800b198 	.word	0x0800b198
 8008d3c:	0800b170 	.word	0x0800b170
 8008d40:	3ff00000 	.word	0x3ff00000
 8008d44:	40240000 	.word	0x40240000
 8008d48:	401c0000 	.word	0x401c0000
 8008d4c:	fcc00000 	.word	0xfcc00000
 8008d50:	40140000 	.word	0x40140000
 8008d54:	7cc00000 	.word	0x7cc00000
 8008d58:	3fe00000 	.word	0x3fe00000
 8008d5c:	9b06      	ldr	r3, [sp, #24]
 8008d5e:	9e05      	ldr	r6, [sp, #20]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	199b      	adds	r3, r3, r6
 8008d64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008d66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008d68:	930a      	str	r3, [sp, #40]	; 0x28
 8008d6a:	9a08      	ldr	r2, [sp, #32]
 8008d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d6e:	0020      	movs	r0, r4
 8008d70:	0029      	movs	r1, r5
 8008d72:	f7f8 ff0d 	bl	8001b90 <__aeabi_ddiv>
 8008d76:	f7fa f92d 	bl	8002fd4 <__aeabi_d2iz>
 8008d7a:	9006      	str	r0, [sp, #24]
 8008d7c:	f7fa f960 	bl	8003040 <__aeabi_i2d>
 8008d80:	9a08      	ldr	r2, [sp, #32]
 8008d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d84:	f7f9 fb0a 	bl	800239c <__aeabi_dmul>
 8008d88:	0002      	movs	r2, r0
 8008d8a:	000b      	movs	r3, r1
 8008d8c:	0020      	movs	r0, r4
 8008d8e:	0029      	movs	r1, r5
 8008d90:	f7f9 fd70 	bl	8002874 <__aeabi_dsub>
 8008d94:	0033      	movs	r3, r6
 8008d96:	9a06      	ldr	r2, [sp, #24]
 8008d98:	3601      	adds	r6, #1
 8008d9a:	3230      	adds	r2, #48	; 0x30
 8008d9c:	701a      	strb	r2, [r3, #0]
 8008d9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008da0:	9607      	str	r6, [sp, #28]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d139      	bne.n	8008e1a <_dtoa_r+0x77a>
 8008da6:	0002      	movs	r2, r0
 8008da8:	000b      	movs	r3, r1
 8008daa:	f7f8 fb87 	bl	80014bc <__aeabi_dadd>
 8008dae:	9a08      	ldr	r2, [sp, #32]
 8008db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db2:	0004      	movs	r4, r0
 8008db4:	000d      	movs	r5, r1
 8008db6:	f7f7 fb63 	bl	8000480 <__aeabi_dcmpgt>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d11b      	bne.n	8008df6 <_dtoa_r+0x756>
 8008dbe:	9a08      	ldr	r2, [sp, #32]
 8008dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc2:	0020      	movs	r0, r4
 8008dc4:	0029      	movs	r1, r5
 8008dc6:	f7f7 fb41 	bl	800044c <__aeabi_dcmpeq>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d002      	beq.n	8008dd4 <_dtoa_r+0x734>
 8008dce:	9b06      	ldr	r3, [sp, #24]
 8008dd0:	07db      	lsls	r3, r3, #31
 8008dd2:	d410      	bmi.n	8008df6 <_dtoa_r+0x756>
 8008dd4:	0038      	movs	r0, r7
 8008dd6:	9904      	ldr	r1, [sp, #16]
 8008dd8:	f000 fd1c 	bl	8009814 <_Bfree>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	9a07      	ldr	r2, [sp, #28]
 8008de0:	9802      	ldr	r0, [sp, #8]
 8008de2:	7013      	strb	r3, [r2, #0]
 8008de4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008de6:	3001      	adds	r0, #1
 8008de8:	6018      	str	r0, [r3, #0]
 8008dea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d100      	bne.n	8008df2 <_dtoa_r+0x752>
 8008df0:	e4a3      	b.n	800873a <_dtoa_r+0x9a>
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	e4a1      	b.n	800873a <_dtoa_r+0x9a>
 8008df6:	9e02      	ldr	r6, [sp, #8]
 8008df8:	9b07      	ldr	r3, [sp, #28]
 8008dfa:	9307      	str	r3, [sp, #28]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	781a      	ldrb	r2, [r3, #0]
 8008e00:	2a39      	cmp	r2, #57	; 0x39
 8008e02:	d106      	bne.n	8008e12 <_dtoa_r+0x772>
 8008e04:	9a05      	ldr	r2, [sp, #20]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d1f7      	bne.n	8008dfa <_dtoa_r+0x75a>
 8008e0a:	2230      	movs	r2, #48	; 0x30
 8008e0c:	9905      	ldr	r1, [sp, #20]
 8008e0e:	3601      	adds	r6, #1
 8008e10:	700a      	strb	r2, [r1, #0]
 8008e12:	781a      	ldrb	r2, [r3, #0]
 8008e14:	3201      	adds	r2, #1
 8008e16:	701a      	strb	r2, [r3, #0]
 8008e18:	e785      	b.n	8008d26 <_dtoa_r+0x686>
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	4bad      	ldr	r3, [pc, #692]	; (80090d4 <_dtoa_r+0xa34>)
 8008e1e:	f7f9 fabd 	bl	800239c <__aeabi_dmul>
 8008e22:	2200      	movs	r2, #0
 8008e24:	2300      	movs	r3, #0
 8008e26:	0004      	movs	r4, r0
 8008e28:	000d      	movs	r5, r1
 8008e2a:	f7f7 fb0f 	bl	800044c <__aeabi_dcmpeq>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d09b      	beq.n	8008d6a <_dtoa_r+0x6ca>
 8008e32:	e7cf      	b.n	8008dd4 <_dtoa_r+0x734>
 8008e34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e36:	2a00      	cmp	r2, #0
 8008e38:	d100      	bne.n	8008e3c <_dtoa_r+0x79c>
 8008e3a:	e082      	b.n	8008f42 <_dtoa_r+0x8a2>
 8008e3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e3e:	2a01      	cmp	r2, #1
 8008e40:	dc66      	bgt.n	8008f10 <_dtoa_r+0x870>
 8008e42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008e44:	2a00      	cmp	r2, #0
 8008e46:	d05f      	beq.n	8008f08 <_dtoa_r+0x868>
 8008e48:	4aa3      	ldr	r2, [pc, #652]	; (80090d8 <_dtoa_r+0xa38>)
 8008e4a:	189b      	adds	r3, r3, r2
 8008e4c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008e4e:	9c08      	ldr	r4, [sp, #32]
 8008e50:	9a08      	ldr	r2, [sp, #32]
 8008e52:	2101      	movs	r1, #1
 8008e54:	18d2      	adds	r2, r2, r3
 8008e56:	9208      	str	r2, [sp, #32]
 8008e58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e5a:	0038      	movs	r0, r7
 8008e5c:	18d3      	adds	r3, r2, r3
 8008e5e:	930d      	str	r3, [sp, #52]	; 0x34
 8008e60:	f000 fd88 	bl	8009974 <__i2b>
 8008e64:	0005      	movs	r5, r0
 8008e66:	2c00      	cmp	r4, #0
 8008e68:	dd0e      	ble.n	8008e88 <_dtoa_r+0x7e8>
 8008e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	dd0b      	ble.n	8008e88 <_dtoa_r+0x7e8>
 8008e70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e72:	0023      	movs	r3, r4
 8008e74:	4294      	cmp	r4, r2
 8008e76:	dd00      	ble.n	8008e7a <_dtoa_r+0x7da>
 8008e78:	0013      	movs	r3, r2
 8008e7a:	9a08      	ldr	r2, [sp, #32]
 8008e7c:	1ae4      	subs	r4, r4, r3
 8008e7e:	1ad2      	subs	r2, r2, r3
 8008e80:	9208      	str	r2, [sp, #32]
 8008e82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	930d      	str	r3, [sp, #52]	; 0x34
 8008e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d01f      	beq.n	8008ece <_dtoa_r+0x82e>
 8008e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d05a      	beq.n	8008f4a <_dtoa_r+0x8aa>
 8008e94:	2e00      	cmp	r6, #0
 8008e96:	dd11      	ble.n	8008ebc <_dtoa_r+0x81c>
 8008e98:	0029      	movs	r1, r5
 8008e9a:	0032      	movs	r2, r6
 8008e9c:	0038      	movs	r0, r7
 8008e9e:	f000 fe2f 	bl	8009b00 <__pow5mult>
 8008ea2:	9a04      	ldr	r2, [sp, #16]
 8008ea4:	0001      	movs	r1, r0
 8008ea6:	0005      	movs	r5, r0
 8008ea8:	0038      	movs	r0, r7
 8008eaa:	f000 fd79 	bl	80099a0 <__multiply>
 8008eae:	9904      	ldr	r1, [sp, #16]
 8008eb0:	9007      	str	r0, [sp, #28]
 8008eb2:	0038      	movs	r0, r7
 8008eb4:	f000 fcae 	bl	8009814 <_Bfree>
 8008eb8:	9b07      	ldr	r3, [sp, #28]
 8008eba:	9304      	str	r3, [sp, #16]
 8008ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ebe:	1b9a      	subs	r2, r3, r6
 8008ec0:	42b3      	cmp	r3, r6
 8008ec2:	d004      	beq.n	8008ece <_dtoa_r+0x82e>
 8008ec4:	0038      	movs	r0, r7
 8008ec6:	9904      	ldr	r1, [sp, #16]
 8008ec8:	f000 fe1a 	bl	8009b00 <__pow5mult>
 8008ecc:	9004      	str	r0, [sp, #16]
 8008ece:	2101      	movs	r1, #1
 8008ed0:	0038      	movs	r0, r7
 8008ed2:	f000 fd4f 	bl	8009974 <__i2b>
 8008ed6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ed8:	0006      	movs	r6, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	dd37      	ble.n	8008f4e <_dtoa_r+0x8ae>
 8008ede:	001a      	movs	r2, r3
 8008ee0:	0001      	movs	r1, r0
 8008ee2:	0038      	movs	r0, r7
 8008ee4:	f000 fe0c 	bl	8009b00 <__pow5mult>
 8008ee8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008eea:	0006      	movs	r6, r0
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	dd33      	ble.n	8008f58 <_dtoa_r+0x8b8>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	9307      	str	r3, [sp, #28]
 8008ef4:	6933      	ldr	r3, [r6, #16]
 8008ef6:	3303      	adds	r3, #3
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	18f3      	adds	r3, r6, r3
 8008efc:	6858      	ldr	r0, [r3, #4]
 8008efe:	f000 fcf1 	bl	80098e4 <__hi0bits>
 8008f02:	2320      	movs	r3, #32
 8008f04:	1a18      	subs	r0, r3, r0
 8008f06:	e03f      	b.n	8008f88 <_dtoa_r+0x8e8>
 8008f08:	2336      	movs	r3, #54	; 0x36
 8008f0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008f0c:	1a9b      	subs	r3, r3, r2
 8008f0e:	e79d      	b.n	8008e4c <_dtoa_r+0x7ac>
 8008f10:	9b06      	ldr	r3, [sp, #24]
 8008f12:	1e5e      	subs	r6, r3, #1
 8008f14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f16:	42b3      	cmp	r3, r6
 8008f18:	db08      	blt.n	8008f2c <_dtoa_r+0x88c>
 8008f1a:	1b9e      	subs	r6, r3, r6
 8008f1c:	9b06      	ldr	r3, [sp, #24]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	da0c      	bge.n	8008f3c <_dtoa_r+0x89c>
 8008f22:	9b08      	ldr	r3, [sp, #32]
 8008f24:	9a06      	ldr	r2, [sp, #24]
 8008f26:	1a9c      	subs	r4, r3, r2
 8008f28:	2300      	movs	r3, #0
 8008f2a:	e791      	b.n	8008e50 <_dtoa_r+0x7b0>
 8008f2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f30:	1af3      	subs	r3, r6, r3
 8008f32:	18d3      	adds	r3, r2, r3
 8008f34:	960e      	str	r6, [sp, #56]	; 0x38
 8008f36:	9314      	str	r3, [sp, #80]	; 0x50
 8008f38:	2600      	movs	r6, #0
 8008f3a:	e7ef      	b.n	8008f1c <_dtoa_r+0x87c>
 8008f3c:	9c08      	ldr	r4, [sp, #32]
 8008f3e:	9b06      	ldr	r3, [sp, #24]
 8008f40:	e786      	b.n	8008e50 <_dtoa_r+0x7b0>
 8008f42:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008f44:	9c08      	ldr	r4, [sp, #32]
 8008f46:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f48:	e78d      	b.n	8008e66 <_dtoa_r+0x7c6>
 8008f4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f4c:	e7ba      	b.n	8008ec4 <_dtoa_r+0x824>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	9307      	str	r3, [sp, #28]
 8008f52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	dc13      	bgt.n	8008f80 <_dtoa_r+0x8e0>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	9307      	str	r3, [sp, #28]
 8008f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10e      	bne.n	8008f80 <_dtoa_r+0x8e0>
 8008f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f64:	031b      	lsls	r3, r3, #12
 8008f66:	d10b      	bne.n	8008f80 <_dtoa_r+0x8e0>
 8008f68:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008f6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f6c:	4213      	tst	r3, r2
 8008f6e:	d007      	beq.n	8008f80 <_dtoa_r+0x8e0>
 8008f70:	9b08      	ldr	r3, [sp, #32]
 8008f72:	3301      	adds	r3, #1
 8008f74:	9308      	str	r3, [sp, #32]
 8008f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f78:	3301      	adds	r3, #1
 8008f7a:	930d      	str	r3, [sp, #52]	; 0x34
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	9307      	str	r3, [sp, #28]
 8008f80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f82:	2001      	movs	r0, #1
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1b5      	bne.n	8008ef4 <_dtoa_r+0x854>
 8008f88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f8a:	221f      	movs	r2, #31
 8008f8c:	1818      	adds	r0, r3, r0
 8008f8e:	0003      	movs	r3, r0
 8008f90:	4013      	ands	r3, r2
 8008f92:	4210      	tst	r0, r2
 8008f94:	d046      	beq.n	8009024 <_dtoa_r+0x984>
 8008f96:	3201      	adds	r2, #1
 8008f98:	1ad2      	subs	r2, r2, r3
 8008f9a:	2a04      	cmp	r2, #4
 8008f9c:	dd3f      	ble.n	800901e <_dtoa_r+0x97e>
 8008f9e:	221c      	movs	r2, #28
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	9a08      	ldr	r2, [sp, #32]
 8008fa4:	18e4      	adds	r4, r4, r3
 8008fa6:	18d2      	adds	r2, r2, r3
 8008fa8:	9208      	str	r2, [sp, #32]
 8008faa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fac:	18d3      	adds	r3, r2, r3
 8008fae:	930d      	str	r3, [sp, #52]	; 0x34
 8008fb0:	9b08      	ldr	r3, [sp, #32]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dd05      	ble.n	8008fc2 <_dtoa_r+0x922>
 8008fb6:	001a      	movs	r2, r3
 8008fb8:	0038      	movs	r0, r7
 8008fba:	9904      	ldr	r1, [sp, #16]
 8008fbc:	f000 fdfc 	bl	8009bb8 <__lshift>
 8008fc0:	9004      	str	r0, [sp, #16]
 8008fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	dd05      	ble.n	8008fd4 <_dtoa_r+0x934>
 8008fc8:	0031      	movs	r1, r6
 8008fca:	001a      	movs	r2, r3
 8008fcc:	0038      	movs	r0, r7
 8008fce:	f000 fdf3 	bl	8009bb8 <__lshift>
 8008fd2:	0006      	movs	r6, r0
 8008fd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d026      	beq.n	8009028 <_dtoa_r+0x988>
 8008fda:	0031      	movs	r1, r6
 8008fdc:	9804      	ldr	r0, [sp, #16]
 8008fde:	f000 fe5b 	bl	8009c98 <__mcmp>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	da20      	bge.n	8009028 <_dtoa_r+0x988>
 8008fe6:	9b02      	ldr	r3, [sp, #8]
 8008fe8:	220a      	movs	r2, #10
 8008fea:	3b01      	subs	r3, #1
 8008fec:	9302      	str	r3, [sp, #8]
 8008fee:	0038      	movs	r0, r7
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	9904      	ldr	r1, [sp, #16]
 8008ff4:	f000 fc32 	bl	800985c <__multadd>
 8008ff8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ffa:	9004      	str	r0, [sp, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d100      	bne.n	8009002 <_dtoa_r+0x962>
 8009000:	e160      	b.n	80092c4 <_dtoa_r+0xc24>
 8009002:	2300      	movs	r3, #0
 8009004:	0029      	movs	r1, r5
 8009006:	220a      	movs	r2, #10
 8009008:	0038      	movs	r0, r7
 800900a:	f000 fc27 	bl	800985c <__multadd>
 800900e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009010:	0005      	movs	r5, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	dc47      	bgt.n	80090a6 <_dtoa_r+0xa06>
 8009016:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009018:	2b02      	cmp	r3, #2
 800901a:	dc0d      	bgt.n	8009038 <_dtoa_r+0x998>
 800901c:	e043      	b.n	80090a6 <_dtoa_r+0xa06>
 800901e:	2a04      	cmp	r2, #4
 8009020:	d0c6      	beq.n	8008fb0 <_dtoa_r+0x910>
 8009022:	0013      	movs	r3, r2
 8009024:	331c      	adds	r3, #28
 8009026:	e7bc      	b.n	8008fa2 <_dtoa_r+0x902>
 8009028:	9b06      	ldr	r3, [sp, #24]
 800902a:	2b00      	cmp	r3, #0
 800902c:	dc35      	bgt.n	800909a <_dtoa_r+0x9fa>
 800902e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009030:	2b02      	cmp	r3, #2
 8009032:	dd32      	ble.n	800909a <_dtoa_r+0x9fa>
 8009034:	9b06      	ldr	r3, [sp, #24]
 8009036:	930c      	str	r3, [sp, #48]	; 0x30
 8009038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10c      	bne.n	8009058 <_dtoa_r+0x9b8>
 800903e:	0031      	movs	r1, r6
 8009040:	2205      	movs	r2, #5
 8009042:	0038      	movs	r0, r7
 8009044:	f000 fc0a 	bl	800985c <__multadd>
 8009048:	0006      	movs	r6, r0
 800904a:	0001      	movs	r1, r0
 800904c:	9804      	ldr	r0, [sp, #16]
 800904e:	f000 fe23 	bl	8009c98 <__mcmp>
 8009052:	2800      	cmp	r0, #0
 8009054:	dd00      	ble.n	8009058 <_dtoa_r+0x9b8>
 8009056:	e59f      	b.n	8008b98 <_dtoa_r+0x4f8>
 8009058:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800905a:	43db      	mvns	r3, r3
 800905c:	9302      	str	r3, [sp, #8]
 800905e:	9b05      	ldr	r3, [sp, #20]
 8009060:	9307      	str	r3, [sp, #28]
 8009062:	2400      	movs	r4, #0
 8009064:	0031      	movs	r1, r6
 8009066:	0038      	movs	r0, r7
 8009068:	f000 fbd4 	bl	8009814 <_Bfree>
 800906c:	2d00      	cmp	r5, #0
 800906e:	d100      	bne.n	8009072 <_dtoa_r+0x9d2>
 8009070:	e6b0      	b.n	8008dd4 <_dtoa_r+0x734>
 8009072:	2c00      	cmp	r4, #0
 8009074:	d005      	beq.n	8009082 <_dtoa_r+0x9e2>
 8009076:	42ac      	cmp	r4, r5
 8009078:	d003      	beq.n	8009082 <_dtoa_r+0x9e2>
 800907a:	0021      	movs	r1, r4
 800907c:	0038      	movs	r0, r7
 800907e:	f000 fbc9 	bl	8009814 <_Bfree>
 8009082:	0029      	movs	r1, r5
 8009084:	0038      	movs	r0, r7
 8009086:	f000 fbc5 	bl	8009814 <_Bfree>
 800908a:	e6a3      	b.n	8008dd4 <_dtoa_r+0x734>
 800908c:	2600      	movs	r6, #0
 800908e:	0035      	movs	r5, r6
 8009090:	e7e2      	b.n	8009058 <_dtoa_r+0x9b8>
 8009092:	9602      	str	r6, [sp, #8]
 8009094:	9e07      	ldr	r6, [sp, #28]
 8009096:	0035      	movs	r5, r6
 8009098:	e57e      	b.n	8008b98 <_dtoa_r+0x4f8>
 800909a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800909c:	2b00      	cmp	r3, #0
 800909e:	d100      	bne.n	80090a2 <_dtoa_r+0xa02>
 80090a0:	e0c8      	b.n	8009234 <_dtoa_r+0xb94>
 80090a2:	9b06      	ldr	r3, [sp, #24]
 80090a4:	930c      	str	r3, [sp, #48]	; 0x30
 80090a6:	2c00      	cmp	r4, #0
 80090a8:	dd05      	ble.n	80090b6 <_dtoa_r+0xa16>
 80090aa:	0029      	movs	r1, r5
 80090ac:	0022      	movs	r2, r4
 80090ae:	0038      	movs	r0, r7
 80090b0:	f000 fd82 	bl	8009bb8 <__lshift>
 80090b4:	0005      	movs	r5, r0
 80090b6:	9b07      	ldr	r3, [sp, #28]
 80090b8:	0028      	movs	r0, r5
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d01f      	beq.n	80090fe <_dtoa_r+0xa5e>
 80090be:	0038      	movs	r0, r7
 80090c0:	6869      	ldr	r1, [r5, #4]
 80090c2:	f000 fb63 	bl	800978c <_Balloc>
 80090c6:	1e04      	subs	r4, r0, #0
 80090c8:	d10c      	bne.n	80090e4 <_dtoa_r+0xa44>
 80090ca:	0002      	movs	r2, r0
 80090cc:	4b03      	ldr	r3, [pc, #12]	; (80090dc <_dtoa_r+0xa3c>)
 80090ce:	4904      	ldr	r1, [pc, #16]	; (80090e0 <_dtoa_r+0xa40>)
 80090d0:	f7ff fafb 	bl	80086ca <_dtoa_r+0x2a>
 80090d4:	40240000 	.word	0x40240000
 80090d8:	00000433 	.word	0x00000433
 80090dc:	0800b09f 	.word	0x0800b09f
 80090e0:	000002ea 	.word	0x000002ea
 80090e4:	0029      	movs	r1, r5
 80090e6:	692b      	ldr	r3, [r5, #16]
 80090e8:	310c      	adds	r1, #12
 80090ea:	1c9a      	adds	r2, r3, #2
 80090ec:	0092      	lsls	r2, r2, #2
 80090ee:	300c      	adds	r0, #12
 80090f0:	f7fe fc46 	bl	8007980 <memcpy>
 80090f4:	2201      	movs	r2, #1
 80090f6:	0021      	movs	r1, r4
 80090f8:	0038      	movs	r0, r7
 80090fa:	f000 fd5d 	bl	8009bb8 <__lshift>
 80090fe:	002c      	movs	r4, r5
 8009100:	0005      	movs	r5, r0
 8009102:	9b05      	ldr	r3, [sp, #20]
 8009104:	9308      	str	r3, [sp, #32]
 8009106:	0031      	movs	r1, r6
 8009108:	9804      	ldr	r0, [sp, #16]
 800910a:	f7ff fa3d 	bl	8008588 <quorem>
 800910e:	0003      	movs	r3, r0
 8009110:	0021      	movs	r1, r4
 8009112:	3330      	adds	r3, #48	; 0x30
 8009114:	900e      	str	r0, [sp, #56]	; 0x38
 8009116:	9804      	ldr	r0, [sp, #16]
 8009118:	9306      	str	r3, [sp, #24]
 800911a:	f000 fdbd 	bl	8009c98 <__mcmp>
 800911e:	002a      	movs	r2, r5
 8009120:	900f      	str	r0, [sp, #60]	; 0x3c
 8009122:	0031      	movs	r1, r6
 8009124:	0038      	movs	r0, r7
 8009126:	f000 fdd3 	bl	8009cd0 <__mdiff>
 800912a:	68c3      	ldr	r3, [r0, #12]
 800912c:	9007      	str	r0, [sp, #28]
 800912e:	9310      	str	r3, [sp, #64]	; 0x40
 8009130:	2301      	movs	r3, #1
 8009132:	930d      	str	r3, [sp, #52]	; 0x34
 8009134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009136:	2b00      	cmp	r3, #0
 8009138:	d104      	bne.n	8009144 <_dtoa_r+0xaa4>
 800913a:	0001      	movs	r1, r0
 800913c:	9804      	ldr	r0, [sp, #16]
 800913e:	f000 fdab 	bl	8009c98 <__mcmp>
 8009142:	900d      	str	r0, [sp, #52]	; 0x34
 8009144:	0038      	movs	r0, r7
 8009146:	9907      	ldr	r1, [sp, #28]
 8009148:	f000 fb64 	bl	8009814 <_Bfree>
 800914c:	2301      	movs	r3, #1
 800914e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009150:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009152:	4018      	ands	r0, r3
 8009154:	9b08      	ldr	r3, [sp, #32]
 8009156:	3301      	adds	r3, #1
 8009158:	9307      	str	r3, [sp, #28]
 800915a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800915c:	4313      	orrs	r3, r2
 800915e:	4303      	orrs	r3, r0
 8009160:	d10c      	bne.n	800917c <_dtoa_r+0xadc>
 8009162:	9b06      	ldr	r3, [sp, #24]
 8009164:	2b39      	cmp	r3, #57	; 0x39
 8009166:	d025      	beq.n	80091b4 <_dtoa_r+0xb14>
 8009168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800916a:	2b00      	cmp	r3, #0
 800916c:	dd02      	ble.n	8009174 <_dtoa_r+0xad4>
 800916e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009170:	3331      	adds	r3, #49	; 0x31
 8009172:	9306      	str	r3, [sp, #24]
 8009174:	9b08      	ldr	r3, [sp, #32]
 8009176:	9a06      	ldr	r2, [sp, #24]
 8009178:	701a      	strb	r2, [r3, #0]
 800917a:	e773      	b.n	8009064 <_dtoa_r+0x9c4>
 800917c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800917e:	2b00      	cmp	r3, #0
 8009180:	db03      	blt.n	800918a <_dtoa_r+0xaea>
 8009182:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009184:	4313      	orrs	r3, r2
 8009186:	4303      	orrs	r3, r0
 8009188:	d11f      	bne.n	80091ca <_dtoa_r+0xb2a>
 800918a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800918c:	2b00      	cmp	r3, #0
 800918e:	ddf1      	ble.n	8009174 <_dtoa_r+0xad4>
 8009190:	9904      	ldr	r1, [sp, #16]
 8009192:	2201      	movs	r2, #1
 8009194:	0038      	movs	r0, r7
 8009196:	f000 fd0f 	bl	8009bb8 <__lshift>
 800919a:	0031      	movs	r1, r6
 800919c:	9004      	str	r0, [sp, #16]
 800919e:	f000 fd7b 	bl	8009c98 <__mcmp>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	dc03      	bgt.n	80091ae <_dtoa_r+0xb0e>
 80091a6:	d1e5      	bne.n	8009174 <_dtoa_r+0xad4>
 80091a8:	9b06      	ldr	r3, [sp, #24]
 80091aa:	07db      	lsls	r3, r3, #31
 80091ac:	d5e2      	bpl.n	8009174 <_dtoa_r+0xad4>
 80091ae:	9b06      	ldr	r3, [sp, #24]
 80091b0:	2b39      	cmp	r3, #57	; 0x39
 80091b2:	d1dc      	bne.n	800916e <_dtoa_r+0xace>
 80091b4:	2339      	movs	r3, #57	; 0x39
 80091b6:	9a08      	ldr	r2, [sp, #32]
 80091b8:	7013      	strb	r3, [r2, #0]
 80091ba:	9b07      	ldr	r3, [sp, #28]
 80091bc:	9307      	str	r3, [sp, #28]
 80091be:	3b01      	subs	r3, #1
 80091c0:	781a      	ldrb	r2, [r3, #0]
 80091c2:	2a39      	cmp	r2, #57	; 0x39
 80091c4:	d06c      	beq.n	80092a0 <_dtoa_r+0xc00>
 80091c6:	3201      	adds	r2, #1
 80091c8:	e7d6      	b.n	8009178 <_dtoa_r+0xad8>
 80091ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dd07      	ble.n	80091e0 <_dtoa_r+0xb40>
 80091d0:	9b06      	ldr	r3, [sp, #24]
 80091d2:	2b39      	cmp	r3, #57	; 0x39
 80091d4:	d0ee      	beq.n	80091b4 <_dtoa_r+0xb14>
 80091d6:	9b06      	ldr	r3, [sp, #24]
 80091d8:	9a08      	ldr	r2, [sp, #32]
 80091da:	3301      	adds	r3, #1
 80091dc:	7013      	strb	r3, [r2, #0]
 80091de:	e741      	b.n	8009064 <_dtoa_r+0x9c4>
 80091e0:	9b08      	ldr	r3, [sp, #32]
 80091e2:	9a06      	ldr	r2, [sp, #24]
 80091e4:	701a      	strb	r2, [r3, #0]
 80091e6:	2301      	movs	r3, #1
 80091e8:	9a05      	ldr	r2, [sp, #20]
 80091ea:	1a9b      	subs	r3, r3, r2
 80091ec:	9a08      	ldr	r2, [sp, #32]
 80091ee:	189b      	adds	r3, r3, r2
 80091f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d03e      	beq.n	8009274 <_dtoa_r+0xbd4>
 80091f6:	2300      	movs	r3, #0
 80091f8:	220a      	movs	r2, #10
 80091fa:	9904      	ldr	r1, [sp, #16]
 80091fc:	0038      	movs	r0, r7
 80091fe:	f000 fb2d 	bl	800985c <__multadd>
 8009202:	2300      	movs	r3, #0
 8009204:	9004      	str	r0, [sp, #16]
 8009206:	220a      	movs	r2, #10
 8009208:	0021      	movs	r1, r4
 800920a:	0038      	movs	r0, r7
 800920c:	42ac      	cmp	r4, r5
 800920e:	d106      	bne.n	800921e <_dtoa_r+0xb7e>
 8009210:	f000 fb24 	bl	800985c <__multadd>
 8009214:	0004      	movs	r4, r0
 8009216:	0005      	movs	r5, r0
 8009218:	9b07      	ldr	r3, [sp, #28]
 800921a:	9308      	str	r3, [sp, #32]
 800921c:	e773      	b.n	8009106 <_dtoa_r+0xa66>
 800921e:	f000 fb1d 	bl	800985c <__multadd>
 8009222:	0029      	movs	r1, r5
 8009224:	0004      	movs	r4, r0
 8009226:	2300      	movs	r3, #0
 8009228:	220a      	movs	r2, #10
 800922a:	0038      	movs	r0, r7
 800922c:	f000 fb16 	bl	800985c <__multadd>
 8009230:	0005      	movs	r5, r0
 8009232:	e7f1      	b.n	8009218 <_dtoa_r+0xb78>
 8009234:	9b06      	ldr	r3, [sp, #24]
 8009236:	930c      	str	r3, [sp, #48]	; 0x30
 8009238:	2400      	movs	r4, #0
 800923a:	0031      	movs	r1, r6
 800923c:	9804      	ldr	r0, [sp, #16]
 800923e:	f7ff f9a3 	bl	8008588 <quorem>
 8009242:	9b05      	ldr	r3, [sp, #20]
 8009244:	3030      	adds	r0, #48	; 0x30
 8009246:	5518      	strb	r0, [r3, r4]
 8009248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800924a:	3401      	adds	r4, #1
 800924c:	9006      	str	r0, [sp, #24]
 800924e:	42a3      	cmp	r3, r4
 8009250:	dd07      	ble.n	8009262 <_dtoa_r+0xbc2>
 8009252:	2300      	movs	r3, #0
 8009254:	220a      	movs	r2, #10
 8009256:	0038      	movs	r0, r7
 8009258:	9904      	ldr	r1, [sp, #16]
 800925a:	f000 faff 	bl	800985c <__multadd>
 800925e:	9004      	str	r0, [sp, #16]
 8009260:	e7eb      	b.n	800923a <_dtoa_r+0xb9a>
 8009262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009264:	2001      	movs	r0, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	dd00      	ble.n	800926c <_dtoa_r+0xbcc>
 800926a:	0018      	movs	r0, r3
 800926c:	2400      	movs	r4, #0
 800926e:	9b05      	ldr	r3, [sp, #20]
 8009270:	181b      	adds	r3, r3, r0
 8009272:	9307      	str	r3, [sp, #28]
 8009274:	9904      	ldr	r1, [sp, #16]
 8009276:	2201      	movs	r2, #1
 8009278:	0038      	movs	r0, r7
 800927a:	f000 fc9d 	bl	8009bb8 <__lshift>
 800927e:	0031      	movs	r1, r6
 8009280:	9004      	str	r0, [sp, #16]
 8009282:	f000 fd09 	bl	8009c98 <__mcmp>
 8009286:	2800      	cmp	r0, #0
 8009288:	dc97      	bgt.n	80091ba <_dtoa_r+0xb1a>
 800928a:	d102      	bne.n	8009292 <_dtoa_r+0xbf2>
 800928c:	9b06      	ldr	r3, [sp, #24]
 800928e:	07db      	lsls	r3, r3, #31
 8009290:	d493      	bmi.n	80091ba <_dtoa_r+0xb1a>
 8009292:	9b07      	ldr	r3, [sp, #28]
 8009294:	9307      	str	r3, [sp, #28]
 8009296:	3b01      	subs	r3, #1
 8009298:	781a      	ldrb	r2, [r3, #0]
 800929a:	2a30      	cmp	r2, #48	; 0x30
 800929c:	d0fa      	beq.n	8009294 <_dtoa_r+0xbf4>
 800929e:	e6e1      	b.n	8009064 <_dtoa_r+0x9c4>
 80092a0:	9a05      	ldr	r2, [sp, #20]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d18a      	bne.n	80091bc <_dtoa_r+0xb1c>
 80092a6:	9b02      	ldr	r3, [sp, #8]
 80092a8:	3301      	adds	r3, #1
 80092aa:	9302      	str	r3, [sp, #8]
 80092ac:	2331      	movs	r3, #49	; 0x31
 80092ae:	e795      	b.n	80091dc <_dtoa_r+0xb3c>
 80092b0:	4b08      	ldr	r3, [pc, #32]	; (80092d4 <_dtoa_r+0xc34>)
 80092b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80092b4:	9305      	str	r3, [sp, #20]
 80092b6:	4b08      	ldr	r3, [pc, #32]	; (80092d8 <_dtoa_r+0xc38>)
 80092b8:	2a00      	cmp	r2, #0
 80092ba:	d001      	beq.n	80092c0 <_dtoa_r+0xc20>
 80092bc:	f7ff fa3b 	bl	8008736 <_dtoa_r+0x96>
 80092c0:	f7ff fa3b 	bl	800873a <_dtoa_r+0x9a>
 80092c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	dcb6      	bgt.n	8009238 <_dtoa_r+0xb98>
 80092ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	dd00      	ble.n	80092d2 <_dtoa_r+0xc32>
 80092d0:	e6b2      	b.n	8009038 <_dtoa_r+0x998>
 80092d2:	e7b1      	b.n	8009238 <_dtoa_r+0xb98>
 80092d4:	0800b01c 	.word	0x0800b01c
 80092d8:	0800b024 	.word	0x0800b024

080092dc <__sflush_r>:
 80092dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092de:	898b      	ldrh	r3, [r1, #12]
 80092e0:	0005      	movs	r5, r0
 80092e2:	000c      	movs	r4, r1
 80092e4:	071a      	lsls	r2, r3, #28
 80092e6:	d45f      	bmi.n	80093a8 <__sflush_r+0xcc>
 80092e8:	684a      	ldr	r2, [r1, #4]
 80092ea:	2a00      	cmp	r2, #0
 80092ec:	dc04      	bgt.n	80092f8 <__sflush_r+0x1c>
 80092ee:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80092f0:	2a00      	cmp	r2, #0
 80092f2:	dc01      	bgt.n	80092f8 <__sflush_r+0x1c>
 80092f4:	2000      	movs	r0, #0
 80092f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092f8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80092fa:	2f00      	cmp	r7, #0
 80092fc:	d0fa      	beq.n	80092f4 <__sflush_r+0x18>
 80092fe:	2200      	movs	r2, #0
 8009300:	2180      	movs	r1, #128	; 0x80
 8009302:	682e      	ldr	r6, [r5, #0]
 8009304:	602a      	str	r2, [r5, #0]
 8009306:	001a      	movs	r2, r3
 8009308:	0149      	lsls	r1, r1, #5
 800930a:	400a      	ands	r2, r1
 800930c:	420b      	tst	r3, r1
 800930e:	d034      	beq.n	800937a <__sflush_r+0x9e>
 8009310:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	075b      	lsls	r3, r3, #29
 8009316:	d506      	bpl.n	8009326 <__sflush_r+0x4a>
 8009318:	6863      	ldr	r3, [r4, #4]
 800931a:	1ac0      	subs	r0, r0, r3
 800931c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <__sflush_r+0x4a>
 8009322:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009324:	1ac0      	subs	r0, r0, r3
 8009326:	0002      	movs	r2, r0
 8009328:	6a21      	ldr	r1, [r4, #32]
 800932a:	2300      	movs	r3, #0
 800932c:	0028      	movs	r0, r5
 800932e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009330:	47b8      	blx	r7
 8009332:	89a1      	ldrh	r1, [r4, #12]
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d106      	bne.n	8009346 <__sflush_r+0x6a>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	2b1d      	cmp	r3, #29
 800933c:	d831      	bhi.n	80093a2 <__sflush_r+0xc6>
 800933e:	4a2c      	ldr	r2, [pc, #176]	; (80093f0 <__sflush_r+0x114>)
 8009340:	40da      	lsrs	r2, r3
 8009342:	07d3      	lsls	r3, r2, #31
 8009344:	d52d      	bpl.n	80093a2 <__sflush_r+0xc6>
 8009346:	2300      	movs	r3, #0
 8009348:	6063      	str	r3, [r4, #4]
 800934a:	6923      	ldr	r3, [r4, #16]
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	04cb      	lsls	r3, r1, #19
 8009350:	d505      	bpl.n	800935e <__sflush_r+0x82>
 8009352:	1c43      	adds	r3, r0, #1
 8009354:	d102      	bne.n	800935c <__sflush_r+0x80>
 8009356:	682b      	ldr	r3, [r5, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d100      	bne.n	800935e <__sflush_r+0x82>
 800935c:	6560      	str	r0, [r4, #84]	; 0x54
 800935e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009360:	602e      	str	r6, [r5, #0]
 8009362:	2900      	cmp	r1, #0
 8009364:	d0c6      	beq.n	80092f4 <__sflush_r+0x18>
 8009366:	0023      	movs	r3, r4
 8009368:	3344      	adds	r3, #68	; 0x44
 800936a:	4299      	cmp	r1, r3
 800936c:	d002      	beq.n	8009374 <__sflush_r+0x98>
 800936e:	0028      	movs	r0, r5
 8009370:	f000 fdb8 	bl	8009ee4 <_free_r>
 8009374:	2000      	movs	r0, #0
 8009376:	6360      	str	r0, [r4, #52]	; 0x34
 8009378:	e7bd      	b.n	80092f6 <__sflush_r+0x1a>
 800937a:	2301      	movs	r3, #1
 800937c:	0028      	movs	r0, r5
 800937e:	6a21      	ldr	r1, [r4, #32]
 8009380:	47b8      	blx	r7
 8009382:	1c43      	adds	r3, r0, #1
 8009384:	d1c5      	bne.n	8009312 <__sflush_r+0x36>
 8009386:	682b      	ldr	r3, [r5, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d0c2      	beq.n	8009312 <__sflush_r+0x36>
 800938c:	2b1d      	cmp	r3, #29
 800938e:	d001      	beq.n	8009394 <__sflush_r+0xb8>
 8009390:	2b16      	cmp	r3, #22
 8009392:	d101      	bne.n	8009398 <__sflush_r+0xbc>
 8009394:	602e      	str	r6, [r5, #0]
 8009396:	e7ad      	b.n	80092f4 <__sflush_r+0x18>
 8009398:	2340      	movs	r3, #64	; 0x40
 800939a:	89a2      	ldrh	r2, [r4, #12]
 800939c:	4313      	orrs	r3, r2
 800939e:	81a3      	strh	r3, [r4, #12]
 80093a0:	e7a9      	b.n	80092f6 <__sflush_r+0x1a>
 80093a2:	2340      	movs	r3, #64	; 0x40
 80093a4:	430b      	orrs	r3, r1
 80093a6:	e7fa      	b.n	800939e <__sflush_r+0xc2>
 80093a8:	690f      	ldr	r7, [r1, #16]
 80093aa:	2f00      	cmp	r7, #0
 80093ac:	d0a2      	beq.n	80092f4 <__sflush_r+0x18>
 80093ae:	680a      	ldr	r2, [r1, #0]
 80093b0:	600f      	str	r7, [r1, #0]
 80093b2:	1bd2      	subs	r2, r2, r7
 80093b4:	9201      	str	r2, [sp, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	079b      	lsls	r3, r3, #30
 80093ba:	d100      	bne.n	80093be <__sflush_r+0xe2>
 80093bc:	694a      	ldr	r2, [r1, #20]
 80093be:	60a2      	str	r2, [r4, #8]
 80093c0:	9b01      	ldr	r3, [sp, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	dc00      	bgt.n	80093c8 <__sflush_r+0xec>
 80093c6:	e795      	b.n	80092f4 <__sflush_r+0x18>
 80093c8:	003a      	movs	r2, r7
 80093ca:	0028      	movs	r0, r5
 80093cc:	9b01      	ldr	r3, [sp, #4]
 80093ce:	6a21      	ldr	r1, [r4, #32]
 80093d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093d2:	47b0      	blx	r6
 80093d4:	2800      	cmp	r0, #0
 80093d6:	dc06      	bgt.n	80093e6 <__sflush_r+0x10a>
 80093d8:	2340      	movs	r3, #64	; 0x40
 80093da:	2001      	movs	r0, #1
 80093dc:	89a2      	ldrh	r2, [r4, #12]
 80093de:	4240      	negs	r0, r0
 80093e0:	4313      	orrs	r3, r2
 80093e2:	81a3      	strh	r3, [r4, #12]
 80093e4:	e787      	b.n	80092f6 <__sflush_r+0x1a>
 80093e6:	9b01      	ldr	r3, [sp, #4]
 80093e8:	183f      	adds	r7, r7, r0
 80093ea:	1a1b      	subs	r3, r3, r0
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	e7e7      	b.n	80093c0 <__sflush_r+0xe4>
 80093f0:	20400001 	.word	0x20400001

080093f4 <_fflush_r>:
 80093f4:	690b      	ldr	r3, [r1, #16]
 80093f6:	b570      	push	{r4, r5, r6, lr}
 80093f8:	0005      	movs	r5, r0
 80093fa:	000c      	movs	r4, r1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d102      	bne.n	8009406 <_fflush_r+0x12>
 8009400:	2500      	movs	r5, #0
 8009402:	0028      	movs	r0, r5
 8009404:	bd70      	pop	{r4, r5, r6, pc}
 8009406:	2800      	cmp	r0, #0
 8009408:	d004      	beq.n	8009414 <_fflush_r+0x20>
 800940a:	6983      	ldr	r3, [r0, #24]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <_fflush_r+0x20>
 8009410:	f000 f892 	bl	8009538 <__sinit>
 8009414:	4b14      	ldr	r3, [pc, #80]	; (8009468 <_fflush_r+0x74>)
 8009416:	429c      	cmp	r4, r3
 8009418:	d11b      	bne.n	8009452 <_fflush_r+0x5e>
 800941a:	686c      	ldr	r4, [r5, #4]
 800941c:	220c      	movs	r2, #12
 800941e:	5ea3      	ldrsh	r3, [r4, r2]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d0ed      	beq.n	8009400 <_fflush_r+0xc>
 8009424:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009426:	07d2      	lsls	r2, r2, #31
 8009428:	d404      	bmi.n	8009434 <_fflush_r+0x40>
 800942a:	059b      	lsls	r3, r3, #22
 800942c:	d402      	bmi.n	8009434 <_fflush_r+0x40>
 800942e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009430:	f000 f927 	bl	8009682 <__retarget_lock_acquire_recursive>
 8009434:	0028      	movs	r0, r5
 8009436:	0021      	movs	r1, r4
 8009438:	f7ff ff50 	bl	80092dc <__sflush_r>
 800943c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800943e:	0005      	movs	r5, r0
 8009440:	07db      	lsls	r3, r3, #31
 8009442:	d4de      	bmi.n	8009402 <_fflush_r+0xe>
 8009444:	89a3      	ldrh	r3, [r4, #12]
 8009446:	059b      	lsls	r3, r3, #22
 8009448:	d4db      	bmi.n	8009402 <_fflush_r+0xe>
 800944a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800944c:	f000 f91a 	bl	8009684 <__retarget_lock_release_recursive>
 8009450:	e7d7      	b.n	8009402 <_fflush_r+0xe>
 8009452:	4b06      	ldr	r3, [pc, #24]	; (800946c <_fflush_r+0x78>)
 8009454:	429c      	cmp	r4, r3
 8009456:	d101      	bne.n	800945c <_fflush_r+0x68>
 8009458:	68ac      	ldr	r4, [r5, #8]
 800945a:	e7df      	b.n	800941c <_fflush_r+0x28>
 800945c:	4b04      	ldr	r3, [pc, #16]	; (8009470 <_fflush_r+0x7c>)
 800945e:	429c      	cmp	r4, r3
 8009460:	d1dc      	bne.n	800941c <_fflush_r+0x28>
 8009462:	68ec      	ldr	r4, [r5, #12]
 8009464:	e7da      	b.n	800941c <_fflush_r+0x28>
 8009466:	46c0      	nop			; (mov r8, r8)
 8009468:	0800b0d0 	.word	0x0800b0d0
 800946c:	0800b0f0 	.word	0x0800b0f0
 8009470:	0800b0b0 	.word	0x0800b0b0

08009474 <std>:
 8009474:	2300      	movs	r3, #0
 8009476:	b510      	push	{r4, lr}
 8009478:	0004      	movs	r4, r0
 800947a:	6003      	str	r3, [r0, #0]
 800947c:	6043      	str	r3, [r0, #4]
 800947e:	6083      	str	r3, [r0, #8]
 8009480:	8181      	strh	r1, [r0, #12]
 8009482:	6643      	str	r3, [r0, #100]	; 0x64
 8009484:	0019      	movs	r1, r3
 8009486:	81c2      	strh	r2, [r0, #14]
 8009488:	6103      	str	r3, [r0, #16]
 800948a:	6143      	str	r3, [r0, #20]
 800948c:	6183      	str	r3, [r0, #24]
 800948e:	2208      	movs	r2, #8
 8009490:	305c      	adds	r0, #92	; 0x5c
 8009492:	f7fe fa7e 	bl	8007992 <memset>
 8009496:	4b05      	ldr	r3, [pc, #20]	; (80094ac <std+0x38>)
 8009498:	6263      	str	r3, [r4, #36]	; 0x24
 800949a:	4b05      	ldr	r3, [pc, #20]	; (80094b0 <std+0x3c>)
 800949c:	6224      	str	r4, [r4, #32]
 800949e:	62a3      	str	r3, [r4, #40]	; 0x28
 80094a0:	4b04      	ldr	r3, [pc, #16]	; (80094b4 <std+0x40>)
 80094a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094a4:	4b04      	ldr	r3, [pc, #16]	; (80094b8 <std+0x44>)
 80094a6:	6323      	str	r3, [r4, #48]	; 0x30
 80094a8:	bd10      	pop	{r4, pc}
 80094aa:	46c0      	nop			; (mov r8, r8)
 80094ac:	0800a3b1 	.word	0x0800a3b1
 80094b0:	0800a3d9 	.word	0x0800a3d9
 80094b4:	0800a411 	.word	0x0800a411
 80094b8:	0800a43d 	.word	0x0800a43d

080094bc <_cleanup_r>:
 80094bc:	b510      	push	{r4, lr}
 80094be:	4902      	ldr	r1, [pc, #8]	; (80094c8 <_cleanup_r+0xc>)
 80094c0:	f000 f8ba 	bl	8009638 <_fwalk_reent>
 80094c4:	bd10      	pop	{r4, pc}
 80094c6:	46c0      	nop			; (mov r8, r8)
 80094c8:	080093f5 	.word	0x080093f5

080094cc <__sfmoreglue>:
 80094cc:	b570      	push	{r4, r5, r6, lr}
 80094ce:	2568      	movs	r5, #104	; 0x68
 80094d0:	1e4a      	subs	r2, r1, #1
 80094d2:	4355      	muls	r5, r2
 80094d4:	000e      	movs	r6, r1
 80094d6:	0029      	movs	r1, r5
 80094d8:	3174      	adds	r1, #116	; 0x74
 80094da:	f000 fd4d 	bl	8009f78 <_malloc_r>
 80094de:	1e04      	subs	r4, r0, #0
 80094e0:	d008      	beq.n	80094f4 <__sfmoreglue+0x28>
 80094e2:	2100      	movs	r1, #0
 80094e4:	002a      	movs	r2, r5
 80094e6:	6001      	str	r1, [r0, #0]
 80094e8:	6046      	str	r6, [r0, #4]
 80094ea:	300c      	adds	r0, #12
 80094ec:	60a0      	str	r0, [r4, #8]
 80094ee:	3268      	adds	r2, #104	; 0x68
 80094f0:	f7fe fa4f 	bl	8007992 <memset>
 80094f4:	0020      	movs	r0, r4
 80094f6:	bd70      	pop	{r4, r5, r6, pc}

080094f8 <__sfp_lock_acquire>:
 80094f8:	b510      	push	{r4, lr}
 80094fa:	4802      	ldr	r0, [pc, #8]	; (8009504 <__sfp_lock_acquire+0xc>)
 80094fc:	f000 f8c1 	bl	8009682 <__retarget_lock_acquire_recursive>
 8009500:	bd10      	pop	{r4, pc}
 8009502:	46c0      	nop			; (mov r8, r8)
 8009504:	20000534 	.word	0x20000534

08009508 <__sfp_lock_release>:
 8009508:	b510      	push	{r4, lr}
 800950a:	4802      	ldr	r0, [pc, #8]	; (8009514 <__sfp_lock_release+0xc>)
 800950c:	f000 f8ba 	bl	8009684 <__retarget_lock_release_recursive>
 8009510:	bd10      	pop	{r4, pc}
 8009512:	46c0      	nop			; (mov r8, r8)
 8009514:	20000534 	.word	0x20000534

08009518 <__sinit_lock_acquire>:
 8009518:	b510      	push	{r4, lr}
 800951a:	4802      	ldr	r0, [pc, #8]	; (8009524 <__sinit_lock_acquire+0xc>)
 800951c:	f000 f8b1 	bl	8009682 <__retarget_lock_acquire_recursive>
 8009520:	bd10      	pop	{r4, pc}
 8009522:	46c0      	nop			; (mov r8, r8)
 8009524:	2000052f 	.word	0x2000052f

08009528 <__sinit_lock_release>:
 8009528:	b510      	push	{r4, lr}
 800952a:	4802      	ldr	r0, [pc, #8]	; (8009534 <__sinit_lock_release+0xc>)
 800952c:	f000 f8aa 	bl	8009684 <__retarget_lock_release_recursive>
 8009530:	bd10      	pop	{r4, pc}
 8009532:	46c0      	nop			; (mov r8, r8)
 8009534:	2000052f 	.word	0x2000052f

08009538 <__sinit>:
 8009538:	b513      	push	{r0, r1, r4, lr}
 800953a:	0004      	movs	r4, r0
 800953c:	f7ff ffec 	bl	8009518 <__sinit_lock_acquire>
 8009540:	69a3      	ldr	r3, [r4, #24]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d002      	beq.n	800954c <__sinit+0x14>
 8009546:	f7ff ffef 	bl	8009528 <__sinit_lock_release>
 800954a:	bd13      	pop	{r0, r1, r4, pc}
 800954c:	64a3      	str	r3, [r4, #72]	; 0x48
 800954e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009550:	6523      	str	r3, [r4, #80]	; 0x50
 8009552:	4b13      	ldr	r3, [pc, #76]	; (80095a0 <__sinit+0x68>)
 8009554:	4a13      	ldr	r2, [pc, #76]	; (80095a4 <__sinit+0x6c>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	62a2      	str	r2, [r4, #40]	; 0x28
 800955a:	9301      	str	r3, [sp, #4]
 800955c:	42a3      	cmp	r3, r4
 800955e:	d101      	bne.n	8009564 <__sinit+0x2c>
 8009560:	2301      	movs	r3, #1
 8009562:	61a3      	str	r3, [r4, #24]
 8009564:	0020      	movs	r0, r4
 8009566:	f000 f81f 	bl	80095a8 <__sfp>
 800956a:	6060      	str	r0, [r4, #4]
 800956c:	0020      	movs	r0, r4
 800956e:	f000 f81b 	bl	80095a8 <__sfp>
 8009572:	60a0      	str	r0, [r4, #8]
 8009574:	0020      	movs	r0, r4
 8009576:	f000 f817 	bl	80095a8 <__sfp>
 800957a:	2200      	movs	r2, #0
 800957c:	2104      	movs	r1, #4
 800957e:	60e0      	str	r0, [r4, #12]
 8009580:	6860      	ldr	r0, [r4, #4]
 8009582:	f7ff ff77 	bl	8009474 <std>
 8009586:	2201      	movs	r2, #1
 8009588:	2109      	movs	r1, #9
 800958a:	68a0      	ldr	r0, [r4, #8]
 800958c:	f7ff ff72 	bl	8009474 <std>
 8009590:	2202      	movs	r2, #2
 8009592:	2112      	movs	r1, #18
 8009594:	68e0      	ldr	r0, [r4, #12]
 8009596:	f7ff ff6d 	bl	8009474 <std>
 800959a:	2301      	movs	r3, #1
 800959c:	61a3      	str	r3, [r4, #24]
 800959e:	e7d2      	b.n	8009546 <__sinit+0xe>
 80095a0:	0800afe4 	.word	0x0800afe4
 80095a4:	080094bd 	.word	0x080094bd

080095a8 <__sfp>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	0007      	movs	r7, r0
 80095ac:	f7ff ffa4 	bl	80094f8 <__sfp_lock_acquire>
 80095b0:	4b1f      	ldr	r3, [pc, #124]	; (8009630 <__sfp+0x88>)
 80095b2:	681e      	ldr	r6, [r3, #0]
 80095b4:	69b3      	ldr	r3, [r6, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d102      	bne.n	80095c0 <__sfp+0x18>
 80095ba:	0030      	movs	r0, r6
 80095bc:	f7ff ffbc 	bl	8009538 <__sinit>
 80095c0:	3648      	adds	r6, #72	; 0x48
 80095c2:	68b4      	ldr	r4, [r6, #8]
 80095c4:	6873      	ldr	r3, [r6, #4]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	d504      	bpl.n	80095d4 <__sfp+0x2c>
 80095ca:	6833      	ldr	r3, [r6, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d022      	beq.n	8009616 <__sfp+0x6e>
 80095d0:	6836      	ldr	r6, [r6, #0]
 80095d2:	e7f6      	b.n	80095c2 <__sfp+0x1a>
 80095d4:	220c      	movs	r2, #12
 80095d6:	5ea5      	ldrsh	r5, [r4, r2]
 80095d8:	2d00      	cmp	r5, #0
 80095da:	d11a      	bne.n	8009612 <__sfp+0x6a>
 80095dc:	0020      	movs	r0, r4
 80095de:	4b15      	ldr	r3, [pc, #84]	; (8009634 <__sfp+0x8c>)
 80095e0:	3058      	adds	r0, #88	; 0x58
 80095e2:	60e3      	str	r3, [r4, #12]
 80095e4:	6665      	str	r5, [r4, #100]	; 0x64
 80095e6:	f000 f84b 	bl	8009680 <__retarget_lock_init_recursive>
 80095ea:	f7ff ff8d 	bl	8009508 <__sfp_lock_release>
 80095ee:	0020      	movs	r0, r4
 80095f0:	2208      	movs	r2, #8
 80095f2:	0029      	movs	r1, r5
 80095f4:	6025      	str	r5, [r4, #0]
 80095f6:	60a5      	str	r5, [r4, #8]
 80095f8:	6065      	str	r5, [r4, #4]
 80095fa:	6125      	str	r5, [r4, #16]
 80095fc:	6165      	str	r5, [r4, #20]
 80095fe:	61a5      	str	r5, [r4, #24]
 8009600:	305c      	adds	r0, #92	; 0x5c
 8009602:	f7fe f9c6 	bl	8007992 <memset>
 8009606:	6365      	str	r5, [r4, #52]	; 0x34
 8009608:	63a5      	str	r5, [r4, #56]	; 0x38
 800960a:	64a5      	str	r5, [r4, #72]	; 0x48
 800960c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800960e:	0020      	movs	r0, r4
 8009610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009612:	3468      	adds	r4, #104	; 0x68
 8009614:	e7d7      	b.n	80095c6 <__sfp+0x1e>
 8009616:	2104      	movs	r1, #4
 8009618:	0038      	movs	r0, r7
 800961a:	f7ff ff57 	bl	80094cc <__sfmoreglue>
 800961e:	1e04      	subs	r4, r0, #0
 8009620:	6030      	str	r0, [r6, #0]
 8009622:	d1d5      	bne.n	80095d0 <__sfp+0x28>
 8009624:	f7ff ff70 	bl	8009508 <__sfp_lock_release>
 8009628:	230c      	movs	r3, #12
 800962a:	603b      	str	r3, [r7, #0]
 800962c:	e7ef      	b.n	800960e <__sfp+0x66>
 800962e:	46c0      	nop			; (mov r8, r8)
 8009630:	0800afe4 	.word	0x0800afe4
 8009634:	ffff0001 	.word	0xffff0001

08009638 <_fwalk_reent>:
 8009638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800963a:	0004      	movs	r4, r0
 800963c:	0006      	movs	r6, r0
 800963e:	2700      	movs	r7, #0
 8009640:	9101      	str	r1, [sp, #4]
 8009642:	3448      	adds	r4, #72	; 0x48
 8009644:	6863      	ldr	r3, [r4, #4]
 8009646:	68a5      	ldr	r5, [r4, #8]
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	9b00      	ldr	r3, [sp, #0]
 800964c:	3b01      	subs	r3, #1
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	d504      	bpl.n	800965c <_fwalk_reent+0x24>
 8009652:	6824      	ldr	r4, [r4, #0]
 8009654:	2c00      	cmp	r4, #0
 8009656:	d1f5      	bne.n	8009644 <_fwalk_reent+0xc>
 8009658:	0038      	movs	r0, r7
 800965a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800965c:	89ab      	ldrh	r3, [r5, #12]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d908      	bls.n	8009674 <_fwalk_reent+0x3c>
 8009662:	220e      	movs	r2, #14
 8009664:	5eab      	ldrsh	r3, [r5, r2]
 8009666:	3301      	adds	r3, #1
 8009668:	d004      	beq.n	8009674 <_fwalk_reent+0x3c>
 800966a:	0029      	movs	r1, r5
 800966c:	0030      	movs	r0, r6
 800966e:	9b01      	ldr	r3, [sp, #4]
 8009670:	4798      	blx	r3
 8009672:	4307      	orrs	r7, r0
 8009674:	3568      	adds	r5, #104	; 0x68
 8009676:	e7e8      	b.n	800964a <_fwalk_reent+0x12>

08009678 <_localeconv_r>:
 8009678:	4800      	ldr	r0, [pc, #0]	; (800967c <_localeconv_r+0x4>)
 800967a:	4770      	bx	lr
 800967c:	20000178 	.word	0x20000178

08009680 <__retarget_lock_init_recursive>:
 8009680:	4770      	bx	lr

08009682 <__retarget_lock_acquire_recursive>:
 8009682:	4770      	bx	lr

08009684 <__retarget_lock_release_recursive>:
 8009684:	4770      	bx	lr
	...

08009688 <__swhatbuf_r>:
 8009688:	b570      	push	{r4, r5, r6, lr}
 800968a:	000e      	movs	r6, r1
 800968c:	001d      	movs	r5, r3
 800968e:	230e      	movs	r3, #14
 8009690:	5ec9      	ldrsh	r1, [r1, r3]
 8009692:	0014      	movs	r4, r2
 8009694:	b096      	sub	sp, #88	; 0x58
 8009696:	2900      	cmp	r1, #0
 8009698:	da07      	bge.n	80096aa <__swhatbuf_r+0x22>
 800969a:	2300      	movs	r3, #0
 800969c:	602b      	str	r3, [r5, #0]
 800969e:	89b3      	ldrh	r3, [r6, #12]
 80096a0:	061b      	lsls	r3, r3, #24
 80096a2:	d411      	bmi.n	80096c8 <__swhatbuf_r+0x40>
 80096a4:	2380      	movs	r3, #128	; 0x80
 80096a6:	00db      	lsls	r3, r3, #3
 80096a8:	e00f      	b.n	80096ca <__swhatbuf_r+0x42>
 80096aa:	466a      	mov	r2, sp
 80096ac:	f000 ff20 	bl	800a4f0 <_fstat_r>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	dbf2      	blt.n	800969a <__swhatbuf_r+0x12>
 80096b4:	23f0      	movs	r3, #240	; 0xf0
 80096b6:	9901      	ldr	r1, [sp, #4]
 80096b8:	021b      	lsls	r3, r3, #8
 80096ba:	4019      	ands	r1, r3
 80096bc:	4b05      	ldr	r3, [pc, #20]	; (80096d4 <__swhatbuf_r+0x4c>)
 80096be:	18c9      	adds	r1, r1, r3
 80096c0:	424b      	negs	r3, r1
 80096c2:	4159      	adcs	r1, r3
 80096c4:	6029      	str	r1, [r5, #0]
 80096c6:	e7ed      	b.n	80096a4 <__swhatbuf_r+0x1c>
 80096c8:	2340      	movs	r3, #64	; 0x40
 80096ca:	2000      	movs	r0, #0
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	b016      	add	sp, #88	; 0x58
 80096d0:	bd70      	pop	{r4, r5, r6, pc}
 80096d2:	46c0      	nop			; (mov r8, r8)
 80096d4:	ffffe000 	.word	0xffffe000

080096d8 <__smakebuf_r>:
 80096d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096da:	2602      	movs	r6, #2
 80096dc:	898b      	ldrh	r3, [r1, #12]
 80096de:	0005      	movs	r5, r0
 80096e0:	000c      	movs	r4, r1
 80096e2:	4233      	tst	r3, r6
 80096e4:	d006      	beq.n	80096f4 <__smakebuf_r+0x1c>
 80096e6:	0023      	movs	r3, r4
 80096e8:	3347      	adds	r3, #71	; 0x47
 80096ea:	6023      	str	r3, [r4, #0]
 80096ec:	6123      	str	r3, [r4, #16]
 80096ee:	2301      	movs	r3, #1
 80096f0:	6163      	str	r3, [r4, #20]
 80096f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80096f4:	466a      	mov	r2, sp
 80096f6:	ab01      	add	r3, sp, #4
 80096f8:	f7ff ffc6 	bl	8009688 <__swhatbuf_r>
 80096fc:	9900      	ldr	r1, [sp, #0]
 80096fe:	0007      	movs	r7, r0
 8009700:	0028      	movs	r0, r5
 8009702:	f000 fc39 	bl	8009f78 <_malloc_r>
 8009706:	2800      	cmp	r0, #0
 8009708:	d108      	bne.n	800971c <__smakebuf_r+0x44>
 800970a:	220c      	movs	r2, #12
 800970c:	5ea3      	ldrsh	r3, [r4, r2]
 800970e:	059a      	lsls	r2, r3, #22
 8009710:	d4ef      	bmi.n	80096f2 <__smakebuf_r+0x1a>
 8009712:	2203      	movs	r2, #3
 8009714:	4393      	bics	r3, r2
 8009716:	431e      	orrs	r6, r3
 8009718:	81a6      	strh	r6, [r4, #12]
 800971a:	e7e4      	b.n	80096e6 <__smakebuf_r+0xe>
 800971c:	4b0f      	ldr	r3, [pc, #60]	; (800975c <__smakebuf_r+0x84>)
 800971e:	62ab      	str	r3, [r5, #40]	; 0x28
 8009720:	2380      	movs	r3, #128	; 0x80
 8009722:	89a2      	ldrh	r2, [r4, #12]
 8009724:	6020      	str	r0, [r4, #0]
 8009726:	4313      	orrs	r3, r2
 8009728:	81a3      	strh	r3, [r4, #12]
 800972a:	9b00      	ldr	r3, [sp, #0]
 800972c:	6120      	str	r0, [r4, #16]
 800972e:	6163      	str	r3, [r4, #20]
 8009730:	9b01      	ldr	r3, [sp, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00d      	beq.n	8009752 <__smakebuf_r+0x7a>
 8009736:	0028      	movs	r0, r5
 8009738:	230e      	movs	r3, #14
 800973a:	5ee1      	ldrsh	r1, [r4, r3]
 800973c:	f000 feea 	bl	800a514 <_isatty_r>
 8009740:	2800      	cmp	r0, #0
 8009742:	d006      	beq.n	8009752 <__smakebuf_r+0x7a>
 8009744:	2203      	movs	r2, #3
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	4393      	bics	r3, r2
 800974a:	001a      	movs	r2, r3
 800974c:	2301      	movs	r3, #1
 800974e:	4313      	orrs	r3, r2
 8009750:	81a3      	strh	r3, [r4, #12]
 8009752:	89a0      	ldrh	r0, [r4, #12]
 8009754:	4307      	orrs	r7, r0
 8009756:	81a7      	strh	r7, [r4, #12]
 8009758:	e7cb      	b.n	80096f2 <__smakebuf_r+0x1a>
 800975a:	46c0      	nop			; (mov r8, r8)
 800975c:	080094bd 	.word	0x080094bd

08009760 <malloc>:
 8009760:	b510      	push	{r4, lr}
 8009762:	4b03      	ldr	r3, [pc, #12]	; (8009770 <malloc+0x10>)
 8009764:	0001      	movs	r1, r0
 8009766:	6818      	ldr	r0, [r3, #0]
 8009768:	f000 fc06 	bl	8009f78 <_malloc_r>
 800976c:	bd10      	pop	{r4, pc}
 800976e:	46c0      	nop			; (mov r8, r8)
 8009770:	20000024 	.word	0x20000024

08009774 <memchr>:
 8009774:	b2c9      	uxtb	r1, r1
 8009776:	1882      	adds	r2, r0, r2
 8009778:	4290      	cmp	r0, r2
 800977a:	d101      	bne.n	8009780 <memchr+0xc>
 800977c:	2000      	movs	r0, #0
 800977e:	4770      	bx	lr
 8009780:	7803      	ldrb	r3, [r0, #0]
 8009782:	428b      	cmp	r3, r1
 8009784:	d0fb      	beq.n	800977e <memchr+0xa>
 8009786:	3001      	adds	r0, #1
 8009788:	e7f6      	b.n	8009778 <memchr+0x4>
	...

0800978c <_Balloc>:
 800978c:	b570      	push	{r4, r5, r6, lr}
 800978e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009790:	0006      	movs	r6, r0
 8009792:	000c      	movs	r4, r1
 8009794:	2d00      	cmp	r5, #0
 8009796:	d10e      	bne.n	80097b6 <_Balloc+0x2a>
 8009798:	2010      	movs	r0, #16
 800979a:	f7ff ffe1 	bl	8009760 <malloc>
 800979e:	1e02      	subs	r2, r0, #0
 80097a0:	6270      	str	r0, [r6, #36]	; 0x24
 80097a2:	d104      	bne.n	80097ae <_Balloc+0x22>
 80097a4:	2166      	movs	r1, #102	; 0x66
 80097a6:	4b19      	ldr	r3, [pc, #100]	; (800980c <_Balloc+0x80>)
 80097a8:	4819      	ldr	r0, [pc, #100]	; (8009810 <_Balloc+0x84>)
 80097aa:	f000 fe61 	bl	800a470 <__assert_func>
 80097ae:	6045      	str	r5, [r0, #4]
 80097b0:	6085      	str	r5, [r0, #8]
 80097b2:	6005      	str	r5, [r0, #0]
 80097b4:	60c5      	str	r5, [r0, #12]
 80097b6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80097b8:	68eb      	ldr	r3, [r5, #12]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d013      	beq.n	80097e6 <_Balloc+0x5a>
 80097be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80097c0:	00a2      	lsls	r2, r4, #2
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	189b      	adds	r3, r3, r2
 80097c6:	6818      	ldr	r0, [r3, #0]
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d118      	bne.n	80097fe <_Balloc+0x72>
 80097cc:	2101      	movs	r1, #1
 80097ce:	000d      	movs	r5, r1
 80097d0:	40a5      	lsls	r5, r4
 80097d2:	1d6a      	adds	r2, r5, #5
 80097d4:	0030      	movs	r0, r6
 80097d6:	0092      	lsls	r2, r2, #2
 80097d8:	f000 fb76 	bl	8009ec8 <_calloc_r>
 80097dc:	2800      	cmp	r0, #0
 80097de:	d00c      	beq.n	80097fa <_Balloc+0x6e>
 80097e0:	6044      	str	r4, [r0, #4]
 80097e2:	6085      	str	r5, [r0, #8]
 80097e4:	e00d      	b.n	8009802 <_Balloc+0x76>
 80097e6:	2221      	movs	r2, #33	; 0x21
 80097e8:	2104      	movs	r1, #4
 80097ea:	0030      	movs	r0, r6
 80097ec:	f000 fb6c 	bl	8009ec8 <_calloc_r>
 80097f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80097f2:	60e8      	str	r0, [r5, #12]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1e1      	bne.n	80097be <_Balloc+0x32>
 80097fa:	2000      	movs	r0, #0
 80097fc:	bd70      	pop	{r4, r5, r6, pc}
 80097fe:	6802      	ldr	r2, [r0, #0]
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	2300      	movs	r3, #0
 8009804:	6103      	str	r3, [r0, #16]
 8009806:	60c3      	str	r3, [r0, #12]
 8009808:	e7f8      	b.n	80097fc <_Balloc+0x70>
 800980a:	46c0      	nop			; (mov r8, r8)
 800980c:	0800b029 	.word	0x0800b029
 8009810:	0800b110 	.word	0x0800b110

08009814 <_Bfree>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009818:	0005      	movs	r5, r0
 800981a:	000c      	movs	r4, r1
 800981c:	2e00      	cmp	r6, #0
 800981e:	d10e      	bne.n	800983e <_Bfree+0x2a>
 8009820:	2010      	movs	r0, #16
 8009822:	f7ff ff9d 	bl	8009760 <malloc>
 8009826:	1e02      	subs	r2, r0, #0
 8009828:	6268      	str	r0, [r5, #36]	; 0x24
 800982a:	d104      	bne.n	8009836 <_Bfree+0x22>
 800982c:	218a      	movs	r1, #138	; 0x8a
 800982e:	4b09      	ldr	r3, [pc, #36]	; (8009854 <_Bfree+0x40>)
 8009830:	4809      	ldr	r0, [pc, #36]	; (8009858 <_Bfree+0x44>)
 8009832:	f000 fe1d 	bl	800a470 <__assert_func>
 8009836:	6046      	str	r6, [r0, #4]
 8009838:	6086      	str	r6, [r0, #8]
 800983a:	6006      	str	r6, [r0, #0]
 800983c:	60c6      	str	r6, [r0, #12]
 800983e:	2c00      	cmp	r4, #0
 8009840:	d007      	beq.n	8009852 <_Bfree+0x3e>
 8009842:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009844:	6862      	ldr	r2, [r4, #4]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	0092      	lsls	r2, r2, #2
 800984a:	189b      	adds	r3, r3, r2
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	6022      	str	r2, [r4, #0]
 8009850:	601c      	str	r4, [r3, #0]
 8009852:	bd70      	pop	{r4, r5, r6, pc}
 8009854:	0800b029 	.word	0x0800b029
 8009858:	0800b110 	.word	0x0800b110

0800985c <__multadd>:
 800985c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800985e:	000e      	movs	r6, r1
 8009860:	9001      	str	r0, [sp, #4]
 8009862:	000c      	movs	r4, r1
 8009864:	001d      	movs	r5, r3
 8009866:	2000      	movs	r0, #0
 8009868:	690f      	ldr	r7, [r1, #16]
 800986a:	3614      	adds	r6, #20
 800986c:	6833      	ldr	r3, [r6, #0]
 800986e:	3001      	adds	r0, #1
 8009870:	b299      	uxth	r1, r3
 8009872:	4351      	muls	r1, r2
 8009874:	0c1b      	lsrs	r3, r3, #16
 8009876:	4353      	muls	r3, r2
 8009878:	1949      	adds	r1, r1, r5
 800987a:	0c0d      	lsrs	r5, r1, #16
 800987c:	195b      	adds	r3, r3, r5
 800987e:	0c1d      	lsrs	r5, r3, #16
 8009880:	b289      	uxth	r1, r1
 8009882:	041b      	lsls	r3, r3, #16
 8009884:	185b      	adds	r3, r3, r1
 8009886:	c608      	stmia	r6!, {r3}
 8009888:	4287      	cmp	r7, r0
 800988a:	dcef      	bgt.n	800986c <__multadd+0x10>
 800988c:	2d00      	cmp	r5, #0
 800988e:	d022      	beq.n	80098d6 <__multadd+0x7a>
 8009890:	68a3      	ldr	r3, [r4, #8]
 8009892:	42bb      	cmp	r3, r7
 8009894:	dc19      	bgt.n	80098ca <__multadd+0x6e>
 8009896:	6863      	ldr	r3, [r4, #4]
 8009898:	9801      	ldr	r0, [sp, #4]
 800989a:	1c59      	adds	r1, r3, #1
 800989c:	f7ff ff76 	bl	800978c <_Balloc>
 80098a0:	1e06      	subs	r6, r0, #0
 80098a2:	d105      	bne.n	80098b0 <__multadd+0x54>
 80098a4:	0002      	movs	r2, r0
 80098a6:	21b5      	movs	r1, #181	; 0xb5
 80098a8:	4b0c      	ldr	r3, [pc, #48]	; (80098dc <__multadd+0x80>)
 80098aa:	480d      	ldr	r0, [pc, #52]	; (80098e0 <__multadd+0x84>)
 80098ac:	f000 fde0 	bl	800a470 <__assert_func>
 80098b0:	0021      	movs	r1, r4
 80098b2:	6923      	ldr	r3, [r4, #16]
 80098b4:	310c      	adds	r1, #12
 80098b6:	1c9a      	adds	r2, r3, #2
 80098b8:	0092      	lsls	r2, r2, #2
 80098ba:	300c      	adds	r0, #12
 80098bc:	f7fe f860 	bl	8007980 <memcpy>
 80098c0:	0021      	movs	r1, r4
 80098c2:	9801      	ldr	r0, [sp, #4]
 80098c4:	f7ff ffa6 	bl	8009814 <_Bfree>
 80098c8:	0034      	movs	r4, r6
 80098ca:	1d3b      	adds	r3, r7, #4
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	18e3      	adds	r3, r4, r3
 80098d0:	605d      	str	r5, [r3, #4]
 80098d2:	1c7b      	adds	r3, r7, #1
 80098d4:	6123      	str	r3, [r4, #16]
 80098d6:	0020      	movs	r0, r4
 80098d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098da:	46c0      	nop			; (mov r8, r8)
 80098dc:	0800b09f 	.word	0x0800b09f
 80098e0:	0800b110 	.word	0x0800b110

080098e4 <__hi0bits>:
 80098e4:	0003      	movs	r3, r0
 80098e6:	0c02      	lsrs	r2, r0, #16
 80098e8:	2000      	movs	r0, #0
 80098ea:	4282      	cmp	r2, r0
 80098ec:	d101      	bne.n	80098f2 <__hi0bits+0xe>
 80098ee:	041b      	lsls	r3, r3, #16
 80098f0:	3010      	adds	r0, #16
 80098f2:	0e1a      	lsrs	r2, r3, #24
 80098f4:	d101      	bne.n	80098fa <__hi0bits+0x16>
 80098f6:	3008      	adds	r0, #8
 80098f8:	021b      	lsls	r3, r3, #8
 80098fa:	0f1a      	lsrs	r2, r3, #28
 80098fc:	d101      	bne.n	8009902 <__hi0bits+0x1e>
 80098fe:	3004      	adds	r0, #4
 8009900:	011b      	lsls	r3, r3, #4
 8009902:	0f9a      	lsrs	r2, r3, #30
 8009904:	d101      	bne.n	800990a <__hi0bits+0x26>
 8009906:	3002      	adds	r0, #2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	2b00      	cmp	r3, #0
 800990c:	db03      	blt.n	8009916 <__hi0bits+0x32>
 800990e:	3001      	adds	r0, #1
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	d400      	bmi.n	8009916 <__hi0bits+0x32>
 8009914:	2020      	movs	r0, #32
 8009916:	4770      	bx	lr

08009918 <__lo0bits>:
 8009918:	6803      	ldr	r3, [r0, #0]
 800991a:	0002      	movs	r2, r0
 800991c:	2107      	movs	r1, #7
 800991e:	0018      	movs	r0, r3
 8009920:	4008      	ands	r0, r1
 8009922:	420b      	tst	r3, r1
 8009924:	d00d      	beq.n	8009942 <__lo0bits+0x2a>
 8009926:	3906      	subs	r1, #6
 8009928:	2000      	movs	r0, #0
 800992a:	420b      	tst	r3, r1
 800992c:	d105      	bne.n	800993a <__lo0bits+0x22>
 800992e:	3002      	adds	r0, #2
 8009930:	4203      	tst	r3, r0
 8009932:	d003      	beq.n	800993c <__lo0bits+0x24>
 8009934:	40cb      	lsrs	r3, r1
 8009936:	0008      	movs	r0, r1
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	4770      	bx	lr
 800993c:	089b      	lsrs	r3, r3, #2
 800993e:	6013      	str	r3, [r2, #0]
 8009940:	e7fb      	b.n	800993a <__lo0bits+0x22>
 8009942:	b299      	uxth	r1, r3
 8009944:	2900      	cmp	r1, #0
 8009946:	d101      	bne.n	800994c <__lo0bits+0x34>
 8009948:	2010      	movs	r0, #16
 800994a:	0c1b      	lsrs	r3, r3, #16
 800994c:	b2d9      	uxtb	r1, r3
 800994e:	2900      	cmp	r1, #0
 8009950:	d101      	bne.n	8009956 <__lo0bits+0x3e>
 8009952:	3008      	adds	r0, #8
 8009954:	0a1b      	lsrs	r3, r3, #8
 8009956:	0719      	lsls	r1, r3, #28
 8009958:	d101      	bne.n	800995e <__lo0bits+0x46>
 800995a:	3004      	adds	r0, #4
 800995c:	091b      	lsrs	r3, r3, #4
 800995e:	0799      	lsls	r1, r3, #30
 8009960:	d101      	bne.n	8009966 <__lo0bits+0x4e>
 8009962:	3002      	adds	r0, #2
 8009964:	089b      	lsrs	r3, r3, #2
 8009966:	07d9      	lsls	r1, r3, #31
 8009968:	d4e9      	bmi.n	800993e <__lo0bits+0x26>
 800996a:	3001      	adds	r0, #1
 800996c:	085b      	lsrs	r3, r3, #1
 800996e:	d1e6      	bne.n	800993e <__lo0bits+0x26>
 8009970:	2020      	movs	r0, #32
 8009972:	e7e2      	b.n	800993a <__lo0bits+0x22>

08009974 <__i2b>:
 8009974:	b510      	push	{r4, lr}
 8009976:	000c      	movs	r4, r1
 8009978:	2101      	movs	r1, #1
 800997a:	f7ff ff07 	bl	800978c <_Balloc>
 800997e:	2800      	cmp	r0, #0
 8009980:	d106      	bne.n	8009990 <__i2b+0x1c>
 8009982:	21a0      	movs	r1, #160	; 0xa0
 8009984:	0002      	movs	r2, r0
 8009986:	4b04      	ldr	r3, [pc, #16]	; (8009998 <__i2b+0x24>)
 8009988:	4804      	ldr	r0, [pc, #16]	; (800999c <__i2b+0x28>)
 800998a:	0049      	lsls	r1, r1, #1
 800998c:	f000 fd70 	bl	800a470 <__assert_func>
 8009990:	2301      	movs	r3, #1
 8009992:	6144      	str	r4, [r0, #20]
 8009994:	6103      	str	r3, [r0, #16]
 8009996:	bd10      	pop	{r4, pc}
 8009998:	0800b09f 	.word	0x0800b09f
 800999c:	0800b110 	.word	0x0800b110

080099a0 <__multiply>:
 80099a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099a2:	690b      	ldr	r3, [r1, #16]
 80099a4:	0014      	movs	r4, r2
 80099a6:	6912      	ldr	r2, [r2, #16]
 80099a8:	000d      	movs	r5, r1
 80099aa:	b089      	sub	sp, #36	; 0x24
 80099ac:	4293      	cmp	r3, r2
 80099ae:	da01      	bge.n	80099b4 <__multiply+0x14>
 80099b0:	0025      	movs	r5, r4
 80099b2:	000c      	movs	r4, r1
 80099b4:	692f      	ldr	r7, [r5, #16]
 80099b6:	6926      	ldr	r6, [r4, #16]
 80099b8:	6869      	ldr	r1, [r5, #4]
 80099ba:	19bb      	adds	r3, r7, r6
 80099bc:	9302      	str	r3, [sp, #8]
 80099be:	68ab      	ldr	r3, [r5, #8]
 80099c0:	19ba      	adds	r2, r7, r6
 80099c2:	4293      	cmp	r3, r2
 80099c4:	da00      	bge.n	80099c8 <__multiply+0x28>
 80099c6:	3101      	adds	r1, #1
 80099c8:	f7ff fee0 	bl	800978c <_Balloc>
 80099cc:	9001      	str	r0, [sp, #4]
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d106      	bne.n	80099e0 <__multiply+0x40>
 80099d2:	215e      	movs	r1, #94	; 0x5e
 80099d4:	0002      	movs	r2, r0
 80099d6:	4b48      	ldr	r3, [pc, #288]	; (8009af8 <__multiply+0x158>)
 80099d8:	4848      	ldr	r0, [pc, #288]	; (8009afc <__multiply+0x15c>)
 80099da:	31ff      	adds	r1, #255	; 0xff
 80099dc:	f000 fd48 	bl	800a470 <__assert_func>
 80099e0:	9b01      	ldr	r3, [sp, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	3314      	adds	r3, #20
 80099e6:	469c      	mov	ip, r3
 80099e8:	19bb      	adds	r3, r7, r6
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4463      	add	r3, ip
 80099ee:	9303      	str	r3, [sp, #12]
 80099f0:	4663      	mov	r3, ip
 80099f2:	9903      	ldr	r1, [sp, #12]
 80099f4:	428b      	cmp	r3, r1
 80099f6:	d32c      	bcc.n	8009a52 <__multiply+0xb2>
 80099f8:	002b      	movs	r3, r5
 80099fa:	0022      	movs	r2, r4
 80099fc:	3314      	adds	r3, #20
 80099fe:	00bf      	lsls	r7, r7, #2
 8009a00:	3214      	adds	r2, #20
 8009a02:	9306      	str	r3, [sp, #24]
 8009a04:	00b6      	lsls	r6, r6, #2
 8009a06:	19db      	adds	r3, r3, r7
 8009a08:	9304      	str	r3, [sp, #16]
 8009a0a:	1993      	adds	r3, r2, r6
 8009a0c:	9307      	str	r3, [sp, #28]
 8009a0e:	2304      	movs	r3, #4
 8009a10:	9305      	str	r3, [sp, #20]
 8009a12:	002b      	movs	r3, r5
 8009a14:	9904      	ldr	r1, [sp, #16]
 8009a16:	3315      	adds	r3, #21
 8009a18:	9200      	str	r2, [sp, #0]
 8009a1a:	4299      	cmp	r1, r3
 8009a1c:	d305      	bcc.n	8009a2a <__multiply+0x8a>
 8009a1e:	1b4b      	subs	r3, r1, r5
 8009a20:	3b15      	subs	r3, #21
 8009a22:	089b      	lsrs	r3, r3, #2
 8009a24:	3301      	adds	r3, #1
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	9305      	str	r3, [sp, #20]
 8009a2a:	9b07      	ldr	r3, [sp, #28]
 8009a2c:	9a00      	ldr	r2, [sp, #0]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d311      	bcc.n	8009a56 <__multiply+0xb6>
 8009a32:	9b02      	ldr	r3, [sp, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	dd06      	ble.n	8009a46 <__multiply+0xa6>
 8009a38:	9b03      	ldr	r3, [sp, #12]
 8009a3a:	3b04      	subs	r3, #4
 8009a3c:	9303      	str	r3, [sp, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d054      	beq.n	8009af0 <__multiply+0x150>
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	9a02      	ldr	r2, [sp, #8]
 8009a4a:	0018      	movs	r0, r3
 8009a4c:	611a      	str	r2, [r3, #16]
 8009a4e:	b009      	add	sp, #36	; 0x24
 8009a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a52:	c304      	stmia	r3!, {r2}
 8009a54:	e7cd      	b.n	80099f2 <__multiply+0x52>
 8009a56:	9b00      	ldr	r3, [sp, #0]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	b298      	uxth	r0, r3
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d01c      	beq.n	8009a9a <__multiply+0xfa>
 8009a60:	4667      	mov	r7, ip
 8009a62:	2400      	movs	r4, #0
 8009a64:	9e06      	ldr	r6, [sp, #24]
 8009a66:	ce02      	ldmia	r6!, {r1}
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	b28b      	uxth	r3, r1
 8009a6c:	4343      	muls	r3, r0
 8009a6e:	0c09      	lsrs	r1, r1, #16
 8009a70:	4341      	muls	r1, r0
 8009a72:	b292      	uxth	r2, r2
 8009a74:	189b      	adds	r3, r3, r2
 8009a76:	191b      	adds	r3, r3, r4
 8009a78:	000c      	movs	r4, r1
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	0c11      	lsrs	r1, r2, #16
 8009a7e:	1861      	adds	r1, r4, r1
 8009a80:	0c1c      	lsrs	r4, r3, #16
 8009a82:	1909      	adds	r1, r1, r4
 8009a84:	0c0c      	lsrs	r4, r1, #16
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	0409      	lsls	r1, r1, #16
 8009a8a:	430b      	orrs	r3, r1
 8009a8c:	c708      	stmia	r7!, {r3}
 8009a8e:	9b04      	ldr	r3, [sp, #16]
 8009a90:	42b3      	cmp	r3, r6
 8009a92:	d8e8      	bhi.n	8009a66 <__multiply+0xc6>
 8009a94:	4663      	mov	r3, ip
 8009a96:	9a05      	ldr	r2, [sp, #20]
 8009a98:	509c      	str	r4, [r3, r2]
 8009a9a:	9b00      	ldr	r3, [sp, #0]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	0c1e      	lsrs	r6, r3, #16
 8009aa0:	d020      	beq.n	8009ae4 <__multiply+0x144>
 8009aa2:	4663      	mov	r3, ip
 8009aa4:	002c      	movs	r4, r5
 8009aa6:	4660      	mov	r0, ip
 8009aa8:	2700      	movs	r7, #0
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3414      	adds	r4, #20
 8009aae:	6822      	ldr	r2, [r4, #0]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	b291      	uxth	r1, r2
 8009ab4:	4371      	muls	r1, r6
 8009ab6:	6802      	ldr	r2, [r0, #0]
 8009ab8:	0c12      	lsrs	r2, r2, #16
 8009aba:	1889      	adds	r1, r1, r2
 8009abc:	19cf      	adds	r7, r1, r7
 8009abe:	0439      	lsls	r1, r7, #16
 8009ac0:	430b      	orrs	r3, r1
 8009ac2:	6003      	str	r3, [r0, #0]
 8009ac4:	cc02      	ldmia	r4!, {r1}
 8009ac6:	6843      	ldr	r3, [r0, #4]
 8009ac8:	0c09      	lsrs	r1, r1, #16
 8009aca:	4371      	muls	r1, r6
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	0c3f      	lsrs	r7, r7, #16
 8009ad0:	18cb      	adds	r3, r1, r3
 8009ad2:	9a04      	ldr	r2, [sp, #16]
 8009ad4:	19db      	adds	r3, r3, r7
 8009ad6:	0c1f      	lsrs	r7, r3, #16
 8009ad8:	3004      	adds	r0, #4
 8009ada:	42a2      	cmp	r2, r4
 8009adc:	d8e7      	bhi.n	8009aae <__multiply+0x10e>
 8009ade:	4662      	mov	r2, ip
 8009ae0:	9905      	ldr	r1, [sp, #20]
 8009ae2:	5053      	str	r3, [r2, r1]
 8009ae4:	9b00      	ldr	r3, [sp, #0]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	2304      	movs	r3, #4
 8009aec:	449c      	add	ip, r3
 8009aee:	e79c      	b.n	8009a2a <__multiply+0x8a>
 8009af0:	9b02      	ldr	r3, [sp, #8]
 8009af2:	3b01      	subs	r3, #1
 8009af4:	9302      	str	r3, [sp, #8]
 8009af6:	e79c      	b.n	8009a32 <__multiply+0x92>
 8009af8:	0800b09f 	.word	0x0800b09f
 8009afc:	0800b110 	.word	0x0800b110

08009b00 <__pow5mult>:
 8009b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b02:	2303      	movs	r3, #3
 8009b04:	0015      	movs	r5, r2
 8009b06:	0007      	movs	r7, r0
 8009b08:	000e      	movs	r6, r1
 8009b0a:	401a      	ands	r2, r3
 8009b0c:	421d      	tst	r5, r3
 8009b0e:	d008      	beq.n	8009b22 <__pow5mult+0x22>
 8009b10:	4925      	ldr	r1, [pc, #148]	; (8009ba8 <__pow5mult+0xa8>)
 8009b12:	3a01      	subs	r2, #1
 8009b14:	0092      	lsls	r2, r2, #2
 8009b16:	5852      	ldr	r2, [r2, r1]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	0031      	movs	r1, r6
 8009b1c:	f7ff fe9e 	bl	800985c <__multadd>
 8009b20:	0006      	movs	r6, r0
 8009b22:	10ad      	asrs	r5, r5, #2
 8009b24:	d03d      	beq.n	8009ba2 <__pow5mult+0xa2>
 8009b26:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009b28:	2c00      	cmp	r4, #0
 8009b2a:	d10f      	bne.n	8009b4c <__pow5mult+0x4c>
 8009b2c:	2010      	movs	r0, #16
 8009b2e:	f7ff fe17 	bl	8009760 <malloc>
 8009b32:	1e02      	subs	r2, r0, #0
 8009b34:	6278      	str	r0, [r7, #36]	; 0x24
 8009b36:	d105      	bne.n	8009b44 <__pow5mult+0x44>
 8009b38:	21d7      	movs	r1, #215	; 0xd7
 8009b3a:	4b1c      	ldr	r3, [pc, #112]	; (8009bac <__pow5mult+0xac>)
 8009b3c:	481c      	ldr	r0, [pc, #112]	; (8009bb0 <__pow5mult+0xb0>)
 8009b3e:	0049      	lsls	r1, r1, #1
 8009b40:	f000 fc96 	bl	800a470 <__assert_func>
 8009b44:	6044      	str	r4, [r0, #4]
 8009b46:	6084      	str	r4, [r0, #8]
 8009b48:	6004      	str	r4, [r0, #0]
 8009b4a:	60c4      	str	r4, [r0, #12]
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	689c      	ldr	r4, [r3, #8]
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	2c00      	cmp	r4, #0
 8009b54:	d108      	bne.n	8009b68 <__pow5mult+0x68>
 8009b56:	0038      	movs	r0, r7
 8009b58:	4916      	ldr	r1, [pc, #88]	; (8009bb4 <__pow5mult+0xb4>)
 8009b5a:	f7ff ff0b 	bl	8009974 <__i2b>
 8009b5e:	9b01      	ldr	r3, [sp, #4]
 8009b60:	0004      	movs	r4, r0
 8009b62:	6098      	str	r0, [r3, #8]
 8009b64:	2300      	movs	r3, #0
 8009b66:	6003      	str	r3, [r0, #0]
 8009b68:	2301      	movs	r3, #1
 8009b6a:	421d      	tst	r5, r3
 8009b6c:	d00a      	beq.n	8009b84 <__pow5mult+0x84>
 8009b6e:	0031      	movs	r1, r6
 8009b70:	0022      	movs	r2, r4
 8009b72:	0038      	movs	r0, r7
 8009b74:	f7ff ff14 	bl	80099a0 <__multiply>
 8009b78:	0031      	movs	r1, r6
 8009b7a:	9001      	str	r0, [sp, #4]
 8009b7c:	0038      	movs	r0, r7
 8009b7e:	f7ff fe49 	bl	8009814 <_Bfree>
 8009b82:	9e01      	ldr	r6, [sp, #4]
 8009b84:	106d      	asrs	r5, r5, #1
 8009b86:	d00c      	beq.n	8009ba2 <__pow5mult+0xa2>
 8009b88:	6820      	ldr	r0, [r4, #0]
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	d107      	bne.n	8009b9e <__pow5mult+0x9e>
 8009b8e:	0022      	movs	r2, r4
 8009b90:	0021      	movs	r1, r4
 8009b92:	0038      	movs	r0, r7
 8009b94:	f7ff ff04 	bl	80099a0 <__multiply>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	6020      	str	r0, [r4, #0]
 8009b9c:	6003      	str	r3, [r0, #0]
 8009b9e:	0004      	movs	r4, r0
 8009ba0:	e7e2      	b.n	8009b68 <__pow5mult+0x68>
 8009ba2:	0030      	movs	r0, r6
 8009ba4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ba6:	46c0      	nop			; (mov r8, r8)
 8009ba8:	0800b260 	.word	0x0800b260
 8009bac:	0800b029 	.word	0x0800b029
 8009bb0:	0800b110 	.word	0x0800b110
 8009bb4:	00000271 	.word	0x00000271

08009bb8 <__lshift>:
 8009bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bba:	000c      	movs	r4, r1
 8009bbc:	0017      	movs	r7, r2
 8009bbe:	6923      	ldr	r3, [r4, #16]
 8009bc0:	1155      	asrs	r5, r2, #5
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	18eb      	adds	r3, r5, r3
 8009bc6:	9302      	str	r3, [sp, #8]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	9301      	str	r3, [sp, #4]
 8009bcc:	6849      	ldr	r1, [r1, #4]
 8009bce:	68a3      	ldr	r3, [r4, #8]
 8009bd0:	9004      	str	r0, [sp, #16]
 8009bd2:	9a01      	ldr	r2, [sp, #4]
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	db11      	blt.n	8009bfc <__lshift+0x44>
 8009bd8:	9804      	ldr	r0, [sp, #16]
 8009bda:	f7ff fdd7 	bl	800978c <_Balloc>
 8009bde:	0002      	movs	r2, r0
 8009be0:	2300      	movs	r3, #0
 8009be2:	3214      	adds	r2, #20
 8009be4:	0006      	movs	r6, r0
 8009be6:	0011      	movs	r1, r2
 8009be8:	9203      	str	r2, [sp, #12]
 8009bea:	4298      	cmp	r0, r3
 8009bec:	d10d      	bne.n	8009c0a <__lshift+0x52>
 8009bee:	21da      	movs	r1, #218	; 0xda
 8009bf0:	0002      	movs	r2, r0
 8009bf2:	4b27      	ldr	r3, [pc, #156]	; (8009c90 <__lshift+0xd8>)
 8009bf4:	4827      	ldr	r0, [pc, #156]	; (8009c94 <__lshift+0xdc>)
 8009bf6:	31ff      	adds	r1, #255	; 0xff
 8009bf8:	f000 fc3a 	bl	800a470 <__assert_func>
 8009bfc:	3101      	adds	r1, #1
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	e7e7      	b.n	8009bd2 <__lshift+0x1a>
 8009c02:	2200      	movs	r2, #0
 8009c04:	0098      	lsls	r0, r3, #2
 8009c06:	500a      	str	r2, [r1, r0]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	42ab      	cmp	r3, r5
 8009c0c:	dbf9      	blt.n	8009c02 <__lshift+0x4a>
 8009c0e:	43eb      	mvns	r3, r5
 8009c10:	17db      	asrs	r3, r3, #31
 8009c12:	401d      	ands	r5, r3
 8009c14:	9b03      	ldr	r3, [sp, #12]
 8009c16:	00ad      	lsls	r5, r5, #2
 8009c18:	211f      	movs	r1, #31
 8009c1a:	0038      	movs	r0, r7
 8009c1c:	195d      	adds	r5, r3, r5
 8009c1e:	0023      	movs	r3, r4
 8009c20:	6922      	ldr	r2, [r4, #16]
 8009c22:	3314      	adds	r3, #20
 8009c24:	0092      	lsls	r2, r2, #2
 8009c26:	4008      	ands	r0, r1
 8009c28:	4684      	mov	ip, r0
 8009c2a:	189a      	adds	r2, r3, r2
 8009c2c:	420f      	tst	r7, r1
 8009c2e:	d02a      	beq.n	8009c86 <__lshift+0xce>
 8009c30:	3101      	adds	r1, #1
 8009c32:	1a09      	subs	r1, r1, r0
 8009c34:	9105      	str	r1, [sp, #20]
 8009c36:	2100      	movs	r1, #0
 8009c38:	9503      	str	r5, [sp, #12]
 8009c3a:	4667      	mov	r7, ip
 8009c3c:	6818      	ldr	r0, [r3, #0]
 8009c3e:	40b8      	lsls	r0, r7
 8009c40:	4301      	orrs	r1, r0
 8009c42:	9803      	ldr	r0, [sp, #12]
 8009c44:	c002      	stmia	r0!, {r1}
 8009c46:	cb02      	ldmia	r3!, {r1}
 8009c48:	9003      	str	r0, [sp, #12]
 8009c4a:	9805      	ldr	r0, [sp, #20]
 8009c4c:	40c1      	lsrs	r1, r0
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d8f3      	bhi.n	8009c3a <__lshift+0x82>
 8009c52:	0020      	movs	r0, r4
 8009c54:	3015      	adds	r0, #21
 8009c56:	2304      	movs	r3, #4
 8009c58:	4282      	cmp	r2, r0
 8009c5a:	d304      	bcc.n	8009c66 <__lshift+0xae>
 8009c5c:	1b13      	subs	r3, r2, r4
 8009c5e:	3b15      	subs	r3, #21
 8009c60:	089b      	lsrs	r3, r3, #2
 8009c62:	3301      	adds	r3, #1
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	50e9      	str	r1, [r5, r3]
 8009c68:	2900      	cmp	r1, #0
 8009c6a:	d002      	beq.n	8009c72 <__lshift+0xba>
 8009c6c:	9b02      	ldr	r3, [sp, #8]
 8009c6e:	3302      	adds	r3, #2
 8009c70:	9301      	str	r3, [sp, #4]
 8009c72:	9b01      	ldr	r3, [sp, #4]
 8009c74:	9804      	ldr	r0, [sp, #16]
 8009c76:	3b01      	subs	r3, #1
 8009c78:	0021      	movs	r1, r4
 8009c7a:	6133      	str	r3, [r6, #16]
 8009c7c:	f7ff fdca 	bl	8009814 <_Bfree>
 8009c80:	0030      	movs	r0, r6
 8009c82:	b007      	add	sp, #28
 8009c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c86:	cb02      	ldmia	r3!, {r1}
 8009c88:	c502      	stmia	r5!, {r1}
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d8fb      	bhi.n	8009c86 <__lshift+0xce>
 8009c8e:	e7f0      	b.n	8009c72 <__lshift+0xba>
 8009c90:	0800b09f 	.word	0x0800b09f
 8009c94:	0800b110 	.word	0x0800b110

08009c98 <__mcmp>:
 8009c98:	6902      	ldr	r2, [r0, #16]
 8009c9a:	690b      	ldr	r3, [r1, #16]
 8009c9c:	b530      	push	{r4, r5, lr}
 8009c9e:	0004      	movs	r4, r0
 8009ca0:	1ad0      	subs	r0, r2, r3
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d10d      	bne.n	8009cc2 <__mcmp+0x2a>
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	3414      	adds	r4, #20
 8009caa:	3114      	adds	r1, #20
 8009cac:	18e2      	adds	r2, r4, r3
 8009cae:	18c9      	adds	r1, r1, r3
 8009cb0:	3a04      	subs	r2, #4
 8009cb2:	3904      	subs	r1, #4
 8009cb4:	6815      	ldr	r5, [r2, #0]
 8009cb6:	680b      	ldr	r3, [r1, #0]
 8009cb8:	429d      	cmp	r5, r3
 8009cba:	d003      	beq.n	8009cc4 <__mcmp+0x2c>
 8009cbc:	2001      	movs	r0, #1
 8009cbe:	429d      	cmp	r5, r3
 8009cc0:	d303      	bcc.n	8009cca <__mcmp+0x32>
 8009cc2:	bd30      	pop	{r4, r5, pc}
 8009cc4:	4294      	cmp	r4, r2
 8009cc6:	d3f3      	bcc.n	8009cb0 <__mcmp+0x18>
 8009cc8:	e7fb      	b.n	8009cc2 <__mcmp+0x2a>
 8009cca:	4240      	negs	r0, r0
 8009ccc:	e7f9      	b.n	8009cc2 <__mcmp+0x2a>
	...

08009cd0 <__mdiff>:
 8009cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cd2:	000e      	movs	r6, r1
 8009cd4:	0007      	movs	r7, r0
 8009cd6:	0011      	movs	r1, r2
 8009cd8:	0030      	movs	r0, r6
 8009cda:	b087      	sub	sp, #28
 8009cdc:	0014      	movs	r4, r2
 8009cde:	f7ff ffdb 	bl	8009c98 <__mcmp>
 8009ce2:	1e05      	subs	r5, r0, #0
 8009ce4:	d110      	bne.n	8009d08 <__mdiff+0x38>
 8009ce6:	0001      	movs	r1, r0
 8009ce8:	0038      	movs	r0, r7
 8009cea:	f7ff fd4f 	bl	800978c <_Balloc>
 8009cee:	1e02      	subs	r2, r0, #0
 8009cf0:	d104      	bne.n	8009cfc <__mdiff+0x2c>
 8009cf2:	4b40      	ldr	r3, [pc, #256]	; (8009df4 <__mdiff+0x124>)
 8009cf4:	4940      	ldr	r1, [pc, #256]	; (8009df8 <__mdiff+0x128>)
 8009cf6:	4841      	ldr	r0, [pc, #260]	; (8009dfc <__mdiff+0x12c>)
 8009cf8:	f000 fbba 	bl	800a470 <__assert_func>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	6145      	str	r5, [r0, #20]
 8009d00:	6103      	str	r3, [r0, #16]
 8009d02:	0010      	movs	r0, r2
 8009d04:	b007      	add	sp, #28
 8009d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d08:	2301      	movs	r3, #1
 8009d0a:	9301      	str	r3, [sp, #4]
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	db04      	blt.n	8009d1a <__mdiff+0x4a>
 8009d10:	0023      	movs	r3, r4
 8009d12:	0034      	movs	r4, r6
 8009d14:	001e      	movs	r6, r3
 8009d16:	2300      	movs	r3, #0
 8009d18:	9301      	str	r3, [sp, #4]
 8009d1a:	0038      	movs	r0, r7
 8009d1c:	6861      	ldr	r1, [r4, #4]
 8009d1e:	f7ff fd35 	bl	800978c <_Balloc>
 8009d22:	1e02      	subs	r2, r0, #0
 8009d24:	d103      	bne.n	8009d2e <__mdiff+0x5e>
 8009d26:	2190      	movs	r1, #144	; 0x90
 8009d28:	4b32      	ldr	r3, [pc, #200]	; (8009df4 <__mdiff+0x124>)
 8009d2a:	0089      	lsls	r1, r1, #2
 8009d2c:	e7e3      	b.n	8009cf6 <__mdiff+0x26>
 8009d2e:	9b01      	ldr	r3, [sp, #4]
 8009d30:	2700      	movs	r7, #0
 8009d32:	60c3      	str	r3, [r0, #12]
 8009d34:	6920      	ldr	r0, [r4, #16]
 8009d36:	3414      	adds	r4, #20
 8009d38:	9401      	str	r4, [sp, #4]
 8009d3a:	9b01      	ldr	r3, [sp, #4]
 8009d3c:	0084      	lsls	r4, r0, #2
 8009d3e:	191b      	adds	r3, r3, r4
 8009d40:	0034      	movs	r4, r6
 8009d42:	9302      	str	r3, [sp, #8]
 8009d44:	6933      	ldr	r3, [r6, #16]
 8009d46:	3414      	adds	r4, #20
 8009d48:	0099      	lsls	r1, r3, #2
 8009d4a:	1863      	adds	r3, r4, r1
 8009d4c:	9303      	str	r3, [sp, #12]
 8009d4e:	0013      	movs	r3, r2
 8009d50:	3314      	adds	r3, #20
 8009d52:	469c      	mov	ip, r3
 8009d54:	9305      	str	r3, [sp, #20]
 8009d56:	9b01      	ldr	r3, [sp, #4]
 8009d58:	9304      	str	r3, [sp, #16]
 8009d5a:	9b04      	ldr	r3, [sp, #16]
 8009d5c:	cc02      	ldmia	r4!, {r1}
 8009d5e:	cb20      	ldmia	r3!, {r5}
 8009d60:	9304      	str	r3, [sp, #16]
 8009d62:	b2ab      	uxth	r3, r5
 8009d64:	19df      	adds	r7, r3, r7
 8009d66:	b28b      	uxth	r3, r1
 8009d68:	1afb      	subs	r3, r7, r3
 8009d6a:	0c2d      	lsrs	r5, r5, #16
 8009d6c:	0c09      	lsrs	r1, r1, #16
 8009d6e:	1a69      	subs	r1, r5, r1
 8009d70:	141d      	asrs	r5, r3, #16
 8009d72:	1949      	adds	r1, r1, r5
 8009d74:	140f      	asrs	r7, r1, #16
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	0409      	lsls	r1, r1, #16
 8009d7a:	430b      	orrs	r3, r1
 8009d7c:	4661      	mov	r1, ip
 8009d7e:	c108      	stmia	r1!, {r3}
 8009d80:	9b03      	ldr	r3, [sp, #12]
 8009d82:	468c      	mov	ip, r1
 8009d84:	42a3      	cmp	r3, r4
 8009d86:	d8e8      	bhi.n	8009d5a <__mdiff+0x8a>
 8009d88:	0031      	movs	r1, r6
 8009d8a:	9c03      	ldr	r4, [sp, #12]
 8009d8c:	3115      	adds	r1, #21
 8009d8e:	2304      	movs	r3, #4
 8009d90:	428c      	cmp	r4, r1
 8009d92:	d304      	bcc.n	8009d9e <__mdiff+0xce>
 8009d94:	1ba3      	subs	r3, r4, r6
 8009d96:	3b15      	subs	r3, #21
 8009d98:	089b      	lsrs	r3, r3, #2
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	9901      	ldr	r1, [sp, #4]
 8009da0:	18cc      	adds	r4, r1, r3
 8009da2:	9905      	ldr	r1, [sp, #20]
 8009da4:	0026      	movs	r6, r4
 8009da6:	18cb      	adds	r3, r1, r3
 8009da8:	469c      	mov	ip, r3
 8009daa:	9902      	ldr	r1, [sp, #8]
 8009dac:	428e      	cmp	r6, r1
 8009dae:	d310      	bcc.n	8009dd2 <__mdiff+0x102>
 8009db0:	9e02      	ldr	r6, [sp, #8]
 8009db2:	1ee5      	subs	r5, r4, #3
 8009db4:	2100      	movs	r1, #0
 8009db6:	42ae      	cmp	r6, r5
 8009db8:	d304      	bcc.n	8009dc4 <__mdiff+0xf4>
 8009dba:	0031      	movs	r1, r6
 8009dbc:	3103      	adds	r1, #3
 8009dbe:	1b09      	subs	r1, r1, r4
 8009dc0:	0889      	lsrs	r1, r1, #2
 8009dc2:	0089      	lsls	r1, r1, #2
 8009dc4:	185b      	adds	r3, r3, r1
 8009dc6:	3b04      	subs	r3, #4
 8009dc8:	6819      	ldr	r1, [r3, #0]
 8009dca:	2900      	cmp	r1, #0
 8009dcc:	d00f      	beq.n	8009dee <__mdiff+0x11e>
 8009dce:	6110      	str	r0, [r2, #16]
 8009dd0:	e797      	b.n	8009d02 <__mdiff+0x32>
 8009dd2:	ce02      	ldmia	r6!, {r1}
 8009dd4:	b28d      	uxth	r5, r1
 8009dd6:	19ed      	adds	r5, r5, r7
 8009dd8:	0c0f      	lsrs	r7, r1, #16
 8009dda:	1429      	asrs	r1, r5, #16
 8009ddc:	1879      	adds	r1, r7, r1
 8009dde:	140f      	asrs	r7, r1, #16
 8009de0:	b2ad      	uxth	r5, r5
 8009de2:	0409      	lsls	r1, r1, #16
 8009de4:	430d      	orrs	r5, r1
 8009de6:	4661      	mov	r1, ip
 8009de8:	c120      	stmia	r1!, {r5}
 8009dea:	468c      	mov	ip, r1
 8009dec:	e7dd      	b.n	8009daa <__mdiff+0xda>
 8009dee:	3801      	subs	r0, #1
 8009df0:	e7e9      	b.n	8009dc6 <__mdiff+0xf6>
 8009df2:	46c0      	nop			; (mov r8, r8)
 8009df4:	0800b09f 	.word	0x0800b09f
 8009df8:	00000232 	.word	0x00000232
 8009dfc:	0800b110 	.word	0x0800b110

08009e00 <__d2b>:
 8009e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e02:	2101      	movs	r1, #1
 8009e04:	0014      	movs	r4, r2
 8009e06:	001e      	movs	r6, r3
 8009e08:	9f08      	ldr	r7, [sp, #32]
 8009e0a:	f7ff fcbf 	bl	800978c <_Balloc>
 8009e0e:	1e05      	subs	r5, r0, #0
 8009e10:	d105      	bne.n	8009e1e <__d2b+0x1e>
 8009e12:	0002      	movs	r2, r0
 8009e14:	4b26      	ldr	r3, [pc, #152]	; (8009eb0 <__d2b+0xb0>)
 8009e16:	4927      	ldr	r1, [pc, #156]	; (8009eb4 <__d2b+0xb4>)
 8009e18:	4827      	ldr	r0, [pc, #156]	; (8009eb8 <__d2b+0xb8>)
 8009e1a:	f000 fb29 	bl	800a470 <__assert_func>
 8009e1e:	0333      	lsls	r3, r6, #12
 8009e20:	0076      	lsls	r6, r6, #1
 8009e22:	0b1b      	lsrs	r3, r3, #12
 8009e24:	0d76      	lsrs	r6, r6, #21
 8009e26:	d124      	bne.n	8009e72 <__d2b+0x72>
 8009e28:	9301      	str	r3, [sp, #4]
 8009e2a:	2c00      	cmp	r4, #0
 8009e2c:	d027      	beq.n	8009e7e <__d2b+0x7e>
 8009e2e:	4668      	mov	r0, sp
 8009e30:	9400      	str	r4, [sp, #0]
 8009e32:	f7ff fd71 	bl	8009918 <__lo0bits>
 8009e36:	9c00      	ldr	r4, [sp, #0]
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	d01e      	beq.n	8009e7a <__d2b+0x7a>
 8009e3c:	9b01      	ldr	r3, [sp, #4]
 8009e3e:	2120      	movs	r1, #32
 8009e40:	001a      	movs	r2, r3
 8009e42:	1a09      	subs	r1, r1, r0
 8009e44:	408a      	lsls	r2, r1
 8009e46:	40c3      	lsrs	r3, r0
 8009e48:	4322      	orrs	r2, r4
 8009e4a:	616a      	str	r2, [r5, #20]
 8009e4c:	9301      	str	r3, [sp, #4]
 8009e4e:	9c01      	ldr	r4, [sp, #4]
 8009e50:	61ac      	str	r4, [r5, #24]
 8009e52:	1e63      	subs	r3, r4, #1
 8009e54:	419c      	sbcs	r4, r3
 8009e56:	3401      	adds	r4, #1
 8009e58:	612c      	str	r4, [r5, #16]
 8009e5a:	2e00      	cmp	r6, #0
 8009e5c:	d018      	beq.n	8009e90 <__d2b+0x90>
 8009e5e:	4b17      	ldr	r3, [pc, #92]	; (8009ebc <__d2b+0xbc>)
 8009e60:	18f6      	adds	r6, r6, r3
 8009e62:	2335      	movs	r3, #53	; 0x35
 8009e64:	1836      	adds	r6, r6, r0
 8009e66:	1a18      	subs	r0, r3, r0
 8009e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e6a:	603e      	str	r6, [r7, #0]
 8009e6c:	6018      	str	r0, [r3, #0]
 8009e6e:	0028      	movs	r0, r5
 8009e70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e72:	2280      	movs	r2, #128	; 0x80
 8009e74:	0352      	lsls	r2, r2, #13
 8009e76:	4313      	orrs	r3, r2
 8009e78:	e7d6      	b.n	8009e28 <__d2b+0x28>
 8009e7a:	616c      	str	r4, [r5, #20]
 8009e7c:	e7e7      	b.n	8009e4e <__d2b+0x4e>
 8009e7e:	a801      	add	r0, sp, #4
 8009e80:	f7ff fd4a 	bl	8009918 <__lo0bits>
 8009e84:	2401      	movs	r4, #1
 8009e86:	9b01      	ldr	r3, [sp, #4]
 8009e88:	612c      	str	r4, [r5, #16]
 8009e8a:	616b      	str	r3, [r5, #20]
 8009e8c:	3020      	adds	r0, #32
 8009e8e:	e7e4      	b.n	8009e5a <__d2b+0x5a>
 8009e90:	4b0b      	ldr	r3, [pc, #44]	; (8009ec0 <__d2b+0xc0>)
 8009e92:	18c0      	adds	r0, r0, r3
 8009e94:	4b0b      	ldr	r3, [pc, #44]	; (8009ec4 <__d2b+0xc4>)
 8009e96:	6038      	str	r0, [r7, #0]
 8009e98:	18e3      	adds	r3, r4, r3
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	18eb      	adds	r3, r5, r3
 8009e9e:	6958      	ldr	r0, [r3, #20]
 8009ea0:	f7ff fd20 	bl	80098e4 <__hi0bits>
 8009ea4:	0164      	lsls	r4, r4, #5
 8009ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea8:	1a24      	subs	r4, r4, r0
 8009eaa:	601c      	str	r4, [r3, #0]
 8009eac:	e7df      	b.n	8009e6e <__d2b+0x6e>
 8009eae:	46c0      	nop			; (mov r8, r8)
 8009eb0:	0800b09f 	.word	0x0800b09f
 8009eb4:	0000030a 	.word	0x0000030a
 8009eb8:	0800b110 	.word	0x0800b110
 8009ebc:	fffffbcd 	.word	0xfffffbcd
 8009ec0:	fffffbce 	.word	0xfffffbce
 8009ec4:	3fffffff 	.word	0x3fffffff

08009ec8 <_calloc_r>:
 8009ec8:	434a      	muls	r2, r1
 8009eca:	b570      	push	{r4, r5, r6, lr}
 8009ecc:	0011      	movs	r1, r2
 8009ece:	0015      	movs	r5, r2
 8009ed0:	f000 f852 	bl	8009f78 <_malloc_r>
 8009ed4:	1e04      	subs	r4, r0, #0
 8009ed6:	d003      	beq.n	8009ee0 <_calloc_r+0x18>
 8009ed8:	002a      	movs	r2, r5
 8009eda:	2100      	movs	r1, #0
 8009edc:	f7fd fd59 	bl	8007992 <memset>
 8009ee0:	0020      	movs	r0, r4
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}

08009ee4 <_free_r>:
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	0005      	movs	r5, r0
 8009ee8:	2900      	cmp	r1, #0
 8009eea:	d010      	beq.n	8009f0e <_free_r+0x2a>
 8009eec:	1f0c      	subs	r4, r1, #4
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	da00      	bge.n	8009ef6 <_free_r+0x12>
 8009ef4:	18e4      	adds	r4, r4, r3
 8009ef6:	0028      	movs	r0, r5
 8009ef8:	f000 fb44 	bl	800a584 <__malloc_lock>
 8009efc:	4a1d      	ldr	r2, [pc, #116]	; (8009f74 <_free_r+0x90>)
 8009efe:	6813      	ldr	r3, [r2, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d105      	bne.n	8009f10 <_free_r+0x2c>
 8009f04:	6063      	str	r3, [r4, #4]
 8009f06:	6014      	str	r4, [r2, #0]
 8009f08:	0028      	movs	r0, r5
 8009f0a:	f000 fb43 	bl	800a594 <__malloc_unlock>
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}
 8009f10:	42a3      	cmp	r3, r4
 8009f12:	d908      	bls.n	8009f26 <_free_r+0x42>
 8009f14:	6821      	ldr	r1, [r4, #0]
 8009f16:	1860      	adds	r0, r4, r1
 8009f18:	4283      	cmp	r3, r0
 8009f1a:	d1f3      	bne.n	8009f04 <_free_r+0x20>
 8009f1c:	6818      	ldr	r0, [r3, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	1841      	adds	r1, r0, r1
 8009f22:	6021      	str	r1, [r4, #0]
 8009f24:	e7ee      	b.n	8009f04 <_free_r+0x20>
 8009f26:	001a      	movs	r2, r3
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <_free_r+0x4e>
 8009f2e:	42a3      	cmp	r3, r4
 8009f30:	d9f9      	bls.n	8009f26 <_free_r+0x42>
 8009f32:	6811      	ldr	r1, [r2, #0]
 8009f34:	1850      	adds	r0, r2, r1
 8009f36:	42a0      	cmp	r0, r4
 8009f38:	d10b      	bne.n	8009f52 <_free_r+0x6e>
 8009f3a:	6820      	ldr	r0, [r4, #0]
 8009f3c:	1809      	adds	r1, r1, r0
 8009f3e:	1850      	adds	r0, r2, r1
 8009f40:	6011      	str	r1, [r2, #0]
 8009f42:	4283      	cmp	r3, r0
 8009f44:	d1e0      	bne.n	8009f08 <_free_r+0x24>
 8009f46:	6818      	ldr	r0, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	1841      	adds	r1, r0, r1
 8009f4c:	6011      	str	r1, [r2, #0]
 8009f4e:	6053      	str	r3, [r2, #4]
 8009f50:	e7da      	b.n	8009f08 <_free_r+0x24>
 8009f52:	42a0      	cmp	r0, r4
 8009f54:	d902      	bls.n	8009f5c <_free_r+0x78>
 8009f56:	230c      	movs	r3, #12
 8009f58:	602b      	str	r3, [r5, #0]
 8009f5a:	e7d5      	b.n	8009f08 <_free_r+0x24>
 8009f5c:	6821      	ldr	r1, [r4, #0]
 8009f5e:	1860      	adds	r0, r4, r1
 8009f60:	4283      	cmp	r3, r0
 8009f62:	d103      	bne.n	8009f6c <_free_r+0x88>
 8009f64:	6818      	ldr	r0, [r3, #0]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	1841      	adds	r1, r0, r1
 8009f6a:	6021      	str	r1, [r4, #0]
 8009f6c:	6063      	str	r3, [r4, #4]
 8009f6e:	6054      	str	r4, [r2, #4]
 8009f70:	e7ca      	b.n	8009f08 <_free_r+0x24>
 8009f72:	46c0      	nop			; (mov r8, r8)
 8009f74:	2000022c 	.word	0x2000022c

08009f78 <_malloc_r>:
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	1ccd      	adds	r5, r1, #3
 8009f7e:	439d      	bics	r5, r3
 8009f80:	3508      	adds	r5, #8
 8009f82:	0006      	movs	r6, r0
 8009f84:	2d0c      	cmp	r5, #12
 8009f86:	d21f      	bcs.n	8009fc8 <_malloc_r+0x50>
 8009f88:	250c      	movs	r5, #12
 8009f8a:	42a9      	cmp	r1, r5
 8009f8c:	d81e      	bhi.n	8009fcc <_malloc_r+0x54>
 8009f8e:	0030      	movs	r0, r6
 8009f90:	f000 faf8 	bl	800a584 <__malloc_lock>
 8009f94:	4925      	ldr	r1, [pc, #148]	; (800a02c <_malloc_r+0xb4>)
 8009f96:	680a      	ldr	r2, [r1, #0]
 8009f98:	0014      	movs	r4, r2
 8009f9a:	2c00      	cmp	r4, #0
 8009f9c:	d11a      	bne.n	8009fd4 <_malloc_r+0x5c>
 8009f9e:	4f24      	ldr	r7, [pc, #144]	; (800a030 <_malloc_r+0xb8>)
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d104      	bne.n	8009fb0 <_malloc_r+0x38>
 8009fa6:	0021      	movs	r1, r4
 8009fa8:	0030      	movs	r0, r6
 8009faa:	f000 f9ef 	bl	800a38c <_sbrk_r>
 8009fae:	6038      	str	r0, [r7, #0]
 8009fb0:	0029      	movs	r1, r5
 8009fb2:	0030      	movs	r0, r6
 8009fb4:	f000 f9ea 	bl	800a38c <_sbrk_r>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d12b      	bne.n	800a014 <_malloc_r+0x9c>
 8009fbc:	230c      	movs	r3, #12
 8009fbe:	0030      	movs	r0, r6
 8009fc0:	6033      	str	r3, [r6, #0]
 8009fc2:	f000 fae7 	bl	800a594 <__malloc_unlock>
 8009fc6:	e003      	b.n	8009fd0 <_malloc_r+0x58>
 8009fc8:	2d00      	cmp	r5, #0
 8009fca:	dade      	bge.n	8009f8a <_malloc_r+0x12>
 8009fcc:	230c      	movs	r3, #12
 8009fce:	6033      	str	r3, [r6, #0]
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	1b5b      	subs	r3, r3, r5
 8009fd8:	d419      	bmi.n	800a00e <_malloc_r+0x96>
 8009fda:	2b0b      	cmp	r3, #11
 8009fdc:	d903      	bls.n	8009fe6 <_malloc_r+0x6e>
 8009fde:	6023      	str	r3, [r4, #0]
 8009fe0:	18e4      	adds	r4, r4, r3
 8009fe2:	6025      	str	r5, [r4, #0]
 8009fe4:	e003      	b.n	8009fee <_malloc_r+0x76>
 8009fe6:	6863      	ldr	r3, [r4, #4]
 8009fe8:	42a2      	cmp	r2, r4
 8009fea:	d10e      	bne.n	800a00a <_malloc_r+0x92>
 8009fec:	600b      	str	r3, [r1, #0]
 8009fee:	0030      	movs	r0, r6
 8009ff0:	f000 fad0 	bl	800a594 <__malloc_unlock>
 8009ff4:	0020      	movs	r0, r4
 8009ff6:	2207      	movs	r2, #7
 8009ff8:	300b      	adds	r0, #11
 8009ffa:	1d23      	adds	r3, r4, #4
 8009ffc:	4390      	bics	r0, r2
 8009ffe:	1ac2      	subs	r2, r0, r3
 800a000:	4298      	cmp	r0, r3
 800a002:	d0e6      	beq.n	8009fd2 <_malloc_r+0x5a>
 800a004:	1a1b      	subs	r3, r3, r0
 800a006:	50a3      	str	r3, [r4, r2]
 800a008:	e7e3      	b.n	8009fd2 <_malloc_r+0x5a>
 800a00a:	6053      	str	r3, [r2, #4]
 800a00c:	e7ef      	b.n	8009fee <_malloc_r+0x76>
 800a00e:	0022      	movs	r2, r4
 800a010:	6864      	ldr	r4, [r4, #4]
 800a012:	e7c2      	b.n	8009f9a <_malloc_r+0x22>
 800a014:	2303      	movs	r3, #3
 800a016:	1cc4      	adds	r4, r0, #3
 800a018:	439c      	bics	r4, r3
 800a01a:	42a0      	cmp	r0, r4
 800a01c:	d0e1      	beq.n	8009fe2 <_malloc_r+0x6a>
 800a01e:	1a21      	subs	r1, r4, r0
 800a020:	0030      	movs	r0, r6
 800a022:	f000 f9b3 	bl	800a38c <_sbrk_r>
 800a026:	1c43      	adds	r3, r0, #1
 800a028:	d1db      	bne.n	8009fe2 <_malloc_r+0x6a>
 800a02a:	e7c7      	b.n	8009fbc <_malloc_r+0x44>
 800a02c:	2000022c 	.word	0x2000022c
 800a030:	20000230 	.word	0x20000230

0800a034 <__sfputc_r>:
 800a034:	6893      	ldr	r3, [r2, #8]
 800a036:	b510      	push	{r4, lr}
 800a038:	3b01      	subs	r3, #1
 800a03a:	6093      	str	r3, [r2, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	da04      	bge.n	800a04a <__sfputc_r+0x16>
 800a040:	6994      	ldr	r4, [r2, #24]
 800a042:	42a3      	cmp	r3, r4
 800a044:	db07      	blt.n	800a056 <__sfputc_r+0x22>
 800a046:	290a      	cmp	r1, #10
 800a048:	d005      	beq.n	800a056 <__sfputc_r+0x22>
 800a04a:	6813      	ldr	r3, [r2, #0]
 800a04c:	1c58      	adds	r0, r3, #1
 800a04e:	6010      	str	r0, [r2, #0]
 800a050:	7019      	strb	r1, [r3, #0]
 800a052:	0008      	movs	r0, r1
 800a054:	bd10      	pop	{r4, pc}
 800a056:	f7fe f9c9 	bl	80083ec <__swbuf_r>
 800a05a:	0001      	movs	r1, r0
 800a05c:	e7f9      	b.n	800a052 <__sfputc_r+0x1e>

0800a05e <__sfputs_r>:
 800a05e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a060:	0006      	movs	r6, r0
 800a062:	000f      	movs	r7, r1
 800a064:	0014      	movs	r4, r2
 800a066:	18d5      	adds	r5, r2, r3
 800a068:	42ac      	cmp	r4, r5
 800a06a:	d101      	bne.n	800a070 <__sfputs_r+0x12>
 800a06c:	2000      	movs	r0, #0
 800a06e:	e007      	b.n	800a080 <__sfputs_r+0x22>
 800a070:	7821      	ldrb	r1, [r4, #0]
 800a072:	003a      	movs	r2, r7
 800a074:	0030      	movs	r0, r6
 800a076:	f7ff ffdd 	bl	800a034 <__sfputc_r>
 800a07a:	3401      	adds	r4, #1
 800a07c:	1c43      	adds	r3, r0, #1
 800a07e:	d1f3      	bne.n	800a068 <__sfputs_r+0xa>
 800a080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a084 <_vfiprintf_r>:
 800a084:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a086:	b0a1      	sub	sp, #132	; 0x84
 800a088:	0006      	movs	r6, r0
 800a08a:	000c      	movs	r4, r1
 800a08c:	001f      	movs	r7, r3
 800a08e:	9203      	str	r2, [sp, #12]
 800a090:	2800      	cmp	r0, #0
 800a092:	d004      	beq.n	800a09e <_vfiprintf_r+0x1a>
 800a094:	6983      	ldr	r3, [r0, #24]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d101      	bne.n	800a09e <_vfiprintf_r+0x1a>
 800a09a:	f7ff fa4d 	bl	8009538 <__sinit>
 800a09e:	4b8e      	ldr	r3, [pc, #568]	; (800a2d8 <_vfiprintf_r+0x254>)
 800a0a0:	429c      	cmp	r4, r3
 800a0a2:	d11c      	bne.n	800a0de <_vfiprintf_r+0x5a>
 800a0a4:	6874      	ldr	r4, [r6, #4]
 800a0a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0a8:	07db      	lsls	r3, r3, #31
 800a0aa:	d405      	bmi.n	800a0b8 <_vfiprintf_r+0x34>
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	059b      	lsls	r3, r3, #22
 800a0b0:	d402      	bmi.n	800a0b8 <_vfiprintf_r+0x34>
 800a0b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0b4:	f7ff fae5 	bl	8009682 <__retarget_lock_acquire_recursive>
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	071b      	lsls	r3, r3, #28
 800a0bc:	d502      	bpl.n	800a0c4 <_vfiprintf_r+0x40>
 800a0be:	6923      	ldr	r3, [r4, #16]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d11d      	bne.n	800a100 <_vfiprintf_r+0x7c>
 800a0c4:	0021      	movs	r1, r4
 800a0c6:	0030      	movs	r0, r6
 800a0c8:	f7fe f9e6 	bl	8008498 <__swsetup_r>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d017      	beq.n	800a100 <_vfiprintf_r+0x7c>
 800a0d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0d2:	07db      	lsls	r3, r3, #31
 800a0d4:	d50d      	bpl.n	800a0f2 <_vfiprintf_r+0x6e>
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	4240      	negs	r0, r0
 800a0da:	b021      	add	sp, #132	; 0x84
 800a0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0de:	4b7f      	ldr	r3, [pc, #508]	; (800a2dc <_vfiprintf_r+0x258>)
 800a0e0:	429c      	cmp	r4, r3
 800a0e2:	d101      	bne.n	800a0e8 <_vfiprintf_r+0x64>
 800a0e4:	68b4      	ldr	r4, [r6, #8]
 800a0e6:	e7de      	b.n	800a0a6 <_vfiprintf_r+0x22>
 800a0e8:	4b7d      	ldr	r3, [pc, #500]	; (800a2e0 <_vfiprintf_r+0x25c>)
 800a0ea:	429c      	cmp	r4, r3
 800a0ec:	d1db      	bne.n	800a0a6 <_vfiprintf_r+0x22>
 800a0ee:	68f4      	ldr	r4, [r6, #12]
 800a0f0:	e7d9      	b.n	800a0a6 <_vfiprintf_r+0x22>
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	059b      	lsls	r3, r3, #22
 800a0f6:	d4ee      	bmi.n	800a0d6 <_vfiprintf_r+0x52>
 800a0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0fa:	f7ff fac3 	bl	8009684 <__retarget_lock_release_recursive>
 800a0fe:	e7ea      	b.n	800a0d6 <_vfiprintf_r+0x52>
 800a100:	2300      	movs	r3, #0
 800a102:	ad08      	add	r5, sp, #32
 800a104:	616b      	str	r3, [r5, #20]
 800a106:	3320      	adds	r3, #32
 800a108:	766b      	strb	r3, [r5, #25]
 800a10a:	3310      	adds	r3, #16
 800a10c:	76ab      	strb	r3, [r5, #26]
 800a10e:	9707      	str	r7, [sp, #28]
 800a110:	9f03      	ldr	r7, [sp, #12]
 800a112:	783b      	ldrb	r3, [r7, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <_vfiprintf_r+0x98>
 800a118:	2b25      	cmp	r3, #37	; 0x25
 800a11a:	d14e      	bne.n	800a1ba <_vfiprintf_r+0x136>
 800a11c:	9b03      	ldr	r3, [sp, #12]
 800a11e:	1afb      	subs	r3, r7, r3
 800a120:	9305      	str	r3, [sp, #20]
 800a122:	9b03      	ldr	r3, [sp, #12]
 800a124:	429f      	cmp	r7, r3
 800a126:	d00d      	beq.n	800a144 <_vfiprintf_r+0xc0>
 800a128:	9b05      	ldr	r3, [sp, #20]
 800a12a:	0021      	movs	r1, r4
 800a12c:	0030      	movs	r0, r6
 800a12e:	9a03      	ldr	r2, [sp, #12]
 800a130:	f7ff ff95 	bl	800a05e <__sfputs_r>
 800a134:	1c43      	adds	r3, r0, #1
 800a136:	d100      	bne.n	800a13a <_vfiprintf_r+0xb6>
 800a138:	e0b5      	b.n	800a2a6 <_vfiprintf_r+0x222>
 800a13a:	696a      	ldr	r2, [r5, #20]
 800a13c:	9b05      	ldr	r3, [sp, #20]
 800a13e:	4694      	mov	ip, r2
 800a140:	4463      	add	r3, ip
 800a142:	616b      	str	r3, [r5, #20]
 800a144:	783b      	ldrb	r3, [r7, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d100      	bne.n	800a14c <_vfiprintf_r+0xc8>
 800a14a:	e0ac      	b.n	800a2a6 <_vfiprintf_r+0x222>
 800a14c:	2201      	movs	r2, #1
 800a14e:	1c7b      	adds	r3, r7, #1
 800a150:	9303      	str	r3, [sp, #12]
 800a152:	2300      	movs	r3, #0
 800a154:	4252      	negs	r2, r2
 800a156:	606a      	str	r2, [r5, #4]
 800a158:	a904      	add	r1, sp, #16
 800a15a:	3254      	adds	r2, #84	; 0x54
 800a15c:	1852      	adds	r2, r2, r1
 800a15e:	602b      	str	r3, [r5, #0]
 800a160:	60eb      	str	r3, [r5, #12]
 800a162:	60ab      	str	r3, [r5, #8]
 800a164:	7013      	strb	r3, [r2, #0]
 800a166:	65ab      	str	r3, [r5, #88]	; 0x58
 800a168:	9b03      	ldr	r3, [sp, #12]
 800a16a:	2205      	movs	r2, #5
 800a16c:	7819      	ldrb	r1, [r3, #0]
 800a16e:	485d      	ldr	r0, [pc, #372]	; (800a2e4 <_vfiprintf_r+0x260>)
 800a170:	f7ff fb00 	bl	8009774 <memchr>
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	1c5f      	adds	r7, r3, #1
 800a178:	2800      	cmp	r0, #0
 800a17a:	d120      	bne.n	800a1be <_vfiprintf_r+0x13a>
 800a17c:	682a      	ldr	r2, [r5, #0]
 800a17e:	06d3      	lsls	r3, r2, #27
 800a180:	d504      	bpl.n	800a18c <_vfiprintf_r+0x108>
 800a182:	2353      	movs	r3, #83	; 0x53
 800a184:	a904      	add	r1, sp, #16
 800a186:	185b      	adds	r3, r3, r1
 800a188:	2120      	movs	r1, #32
 800a18a:	7019      	strb	r1, [r3, #0]
 800a18c:	0713      	lsls	r3, r2, #28
 800a18e:	d504      	bpl.n	800a19a <_vfiprintf_r+0x116>
 800a190:	2353      	movs	r3, #83	; 0x53
 800a192:	a904      	add	r1, sp, #16
 800a194:	185b      	adds	r3, r3, r1
 800a196:	212b      	movs	r1, #43	; 0x2b
 800a198:	7019      	strb	r1, [r3, #0]
 800a19a:	9b03      	ldr	r3, [sp, #12]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	2b2a      	cmp	r3, #42	; 0x2a
 800a1a0:	d016      	beq.n	800a1d0 <_vfiprintf_r+0x14c>
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	68eb      	ldr	r3, [r5, #12]
 800a1a6:	9f03      	ldr	r7, [sp, #12]
 800a1a8:	783a      	ldrb	r2, [r7, #0]
 800a1aa:	1c78      	adds	r0, r7, #1
 800a1ac:	3a30      	subs	r2, #48	; 0x30
 800a1ae:	4684      	mov	ip, r0
 800a1b0:	2a09      	cmp	r2, #9
 800a1b2:	d94f      	bls.n	800a254 <_vfiprintf_r+0x1d0>
 800a1b4:	2900      	cmp	r1, #0
 800a1b6:	d111      	bne.n	800a1dc <_vfiprintf_r+0x158>
 800a1b8:	e017      	b.n	800a1ea <_vfiprintf_r+0x166>
 800a1ba:	3701      	adds	r7, #1
 800a1bc:	e7a9      	b.n	800a112 <_vfiprintf_r+0x8e>
 800a1be:	4b49      	ldr	r3, [pc, #292]	; (800a2e4 <_vfiprintf_r+0x260>)
 800a1c0:	682a      	ldr	r2, [r5, #0]
 800a1c2:	1ac0      	subs	r0, r0, r3
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	4083      	lsls	r3, r0
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	602b      	str	r3, [r5, #0]
 800a1cc:	9703      	str	r7, [sp, #12]
 800a1ce:	e7cb      	b.n	800a168 <_vfiprintf_r+0xe4>
 800a1d0:	9b07      	ldr	r3, [sp, #28]
 800a1d2:	1d19      	adds	r1, r3, #4
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	9107      	str	r1, [sp, #28]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	db01      	blt.n	800a1e0 <_vfiprintf_r+0x15c>
 800a1dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1de:	e004      	b.n	800a1ea <_vfiprintf_r+0x166>
 800a1e0:	425b      	negs	r3, r3
 800a1e2:	60eb      	str	r3, [r5, #12]
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	602b      	str	r3, [r5, #0]
 800a1ea:	783b      	ldrb	r3, [r7, #0]
 800a1ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a1ee:	d10a      	bne.n	800a206 <_vfiprintf_r+0x182>
 800a1f0:	787b      	ldrb	r3, [r7, #1]
 800a1f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1f4:	d137      	bne.n	800a266 <_vfiprintf_r+0x1e2>
 800a1f6:	9b07      	ldr	r3, [sp, #28]
 800a1f8:	3702      	adds	r7, #2
 800a1fa:	1d1a      	adds	r2, r3, #4
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	9207      	str	r2, [sp, #28]
 800a200:	2b00      	cmp	r3, #0
 800a202:	db2d      	blt.n	800a260 <_vfiprintf_r+0x1dc>
 800a204:	9309      	str	r3, [sp, #36]	; 0x24
 800a206:	2203      	movs	r2, #3
 800a208:	7839      	ldrb	r1, [r7, #0]
 800a20a:	4837      	ldr	r0, [pc, #220]	; (800a2e8 <_vfiprintf_r+0x264>)
 800a20c:	f7ff fab2 	bl	8009774 <memchr>
 800a210:	2800      	cmp	r0, #0
 800a212:	d007      	beq.n	800a224 <_vfiprintf_r+0x1a0>
 800a214:	4b34      	ldr	r3, [pc, #208]	; (800a2e8 <_vfiprintf_r+0x264>)
 800a216:	682a      	ldr	r2, [r5, #0]
 800a218:	1ac0      	subs	r0, r0, r3
 800a21a:	2340      	movs	r3, #64	; 0x40
 800a21c:	4083      	lsls	r3, r0
 800a21e:	4313      	orrs	r3, r2
 800a220:	3701      	adds	r7, #1
 800a222:	602b      	str	r3, [r5, #0]
 800a224:	7839      	ldrb	r1, [r7, #0]
 800a226:	1c7b      	adds	r3, r7, #1
 800a228:	2206      	movs	r2, #6
 800a22a:	4830      	ldr	r0, [pc, #192]	; (800a2ec <_vfiprintf_r+0x268>)
 800a22c:	9303      	str	r3, [sp, #12]
 800a22e:	7629      	strb	r1, [r5, #24]
 800a230:	f7ff faa0 	bl	8009774 <memchr>
 800a234:	2800      	cmp	r0, #0
 800a236:	d045      	beq.n	800a2c4 <_vfiprintf_r+0x240>
 800a238:	4b2d      	ldr	r3, [pc, #180]	; (800a2f0 <_vfiprintf_r+0x26c>)
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d127      	bne.n	800a28e <_vfiprintf_r+0x20a>
 800a23e:	2207      	movs	r2, #7
 800a240:	9b07      	ldr	r3, [sp, #28]
 800a242:	3307      	adds	r3, #7
 800a244:	4393      	bics	r3, r2
 800a246:	3308      	adds	r3, #8
 800a248:	9307      	str	r3, [sp, #28]
 800a24a:	696b      	ldr	r3, [r5, #20]
 800a24c:	9a04      	ldr	r2, [sp, #16]
 800a24e:	189b      	adds	r3, r3, r2
 800a250:	616b      	str	r3, [r5, #20]
 800a252:	e75d      	b.n	800a110 <_vfiprintf_r+0x8c>
 800a254:	210a      	movs	r1, #10
 800a256:	434b      	muls	r3, r1
 800a258:	4667      	mov	r7, ip
 800a25a:	189b      	adds	r3, r3, r2
 800a25c:	3909      	subs	r1, #9
 800a25e:	e7a3      	b.n	800a1a8 <_vfiprintf_r+0x124>
 800a260:	2301      	movs	r3, #1
 800a262:	425b      	negs	r3, r3
 800a264:	e7ce      	b.n	800a204 <_vfiprintf_r+0x180>
 800a266:	2300      	movs	r3, #0
 800a268:	001a      	movs	r2, r3
 800a26a:	3701      	adds	r7, #1
 800a26c:	606b      	str	r3, [r5, #4]
 800a26e:	7839      	ldrb	r1, [r7, #0]
 800a270:	1c78      	adds	r0, r7, #1
 800a272:	3930      	subs	r1, #48	; 0x30
 800a274:	4684      	mov	ip, r0
 800a276:	2909      	cmp	r1, #9
 800a278:	d903      	bls.n	800a282 <_vfiprintf_r+0x1fe>
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0c3      	beq.n	800a206 <_vfiprintf_r+0x182>
 800a27e:	9209      	str	r2, [sp, #36]	; 0x24
 800a280:	e7c1      	b.n	800a206 <_vfiprintf_r+0x182>
 800a282:	230a      	movs	r3, #10
 800a284:	435a      	muls	r2, r3
 800a286:	4667      	mov	r7, ip
 800a288:	1852      	adds	r2, r2, r1
 800a28a:	3b09      	subs	r3, #9
 800a28c:	e7ef      	b.n	800a26e <_vfiprintf_r+0x1ea>
 800a28e:	ab07      	add	r3, sp, #28
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	0022      	movs	r2, r4
 800a294:	0029      	movs	r1, r5
 800a296:	0030      	movs	r0, r6
 800a298:	4b16      	ldr	r3, [pc, #88]	; (800a2f4 <_vfiprintf_r+0x270>)
 800a29a:	f7fd fc2d 	bl	8007af8 <_printf_float>
 800a29e:	9004      	str	r0, [sp, #16]
 800a2a0:	9b04      	ldr	r3, [sp, #16]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	d1d1      	bne.n	800a24a <_vfiprintf_r+0x1c6>
 800a2a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2a8:	07db      	lsls	r3, r3, #31
 800a2aa:	d405      	bmi.n	800a2b8 <_vfiprintf_r+0x234>
 800a2ac:	89a3      	ldrh	r3, [r4, #12]
 800a2ae:	059b      	lsls	r3, r3, #22
 800a2b0:	d402      	bmi.n	800a2b8 <_vfiprintf_r+0x234>
 800a2b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2b4:	f7ff f9e6 	bl	8009684 <__retarget_lock_release_recursive>
 800a2b8:	89a3      	ldrh	r3, [r4, #12]
 800a2ba:	065b      	lsls	r3, r3, #25
 800a2bc:	d500      	bpl.n	800a2c0 <_vfiprintf_r+0x23c>
 800a2be:	e70a      	b.n	800a0d6 <_vfiprintf_r+0x52>
 800a2c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a2c2:	e70a      	b.n	800a0da <_vfiprintf_r+0x56>
 800a2c4:	ab07      	add	r3, sp, #28
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	0022      	movs	r2, r4
 800a2ca:	0029      	movs	r1, r5
 800a2cc:	0030      	movs	r0, r6
 800a2ce:	4b09      	ldr	r3, [pc, #36]	; (800a2f4 <_vfiprintf_r+0x270>)
 800a2d0:	f7fd fed0 	bl	8008074 <_printf_i>
 800a2d4:	e7e3      	b.n	800a29e <_vfiprintf_r+0x21a>
 800a2d6:	46c0      	nop			; (mov r8, r8)
 800a2d8:	0800b0d0 	.word	0x0800b0d0
 800a2dc:	0800b0f0 	.word	0x0800b0f0
 800a2e0:	0800b0b0 	.word	0x0800b0b0
 800a2e4:	0800b26c 	.word	0x0800b26c
 800a2e8:	0800b272 	.word	0x0800b272
 800a2ec:	0800b276 	.word	0x0800b276
 800a2f0:	08007af9 	.word	0x08007af9
 800a2f4:	0800a05f 	.word	0x0800a05f

0800a2f8 <_putc_r>:
 800a2f8:	b570      	push	{r4, r5, r6, lr}
 800a2fa:	0006      	movs	r6, r0
 800a2fc:	000d      	movs	r5, r1
 800a2fe:	0014      	movs	r4, r2
 800a300:	2800      	cmp	r0, #0
 800a302:	d004      	beq.n	800a30e <_putc_r+0x16>
 800a304:	6983      	ldr	r3, [r0, #24]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <_putc_r+0x16>
 800a30a:	f7ff f915 	bl	8009538 <__sinit>
 800a30e:	4b1c      	ldr	r3, [pc, #112]	; (800a380 <_putc_r+0x88>)
 800a310:	429c      	cmp	r4, r3
 800a312:	d124      	bne.n	800a35e <_putc_r+0x66>
 800a314:	6874      	ldr	r4, [r6, #4]
 800a316:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a318:	07db      	lsls	r3, r3, #31
 800a31a:	d405      	bmi.n	800a328 <_putc_r+0x30>
 800a31c:	89a3      	ldrh	r3, [r4, #12]
 800a31e:	059b      	lsls	r3, r3, #22
 800a320:	d402      	bmi.n	800a328 <_putc_r+0x30>
 800a322:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a324:	f7ff f9ad 	bl	8009682 <__retarget_lock_acquire_recursive>
 800a328:	68a3      	ldr	r3, [r4, #8]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	60a3      	str	r3, [r4, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	da05      	bge.n	800a33e <_putc_r+0x46>
 800a332:	69a2      	ldr	r2, [r4, #24]
 800a334:	4293      	cmp	r3, r2
 800a336:	db1c      	blt.n	800a372 <_putc_r+0x7a>
 800a338:	b2eb      	uxtb	r3, r5
 800a33a:	2b0a      	cmp	r3, #10
 800a33c:	d019      	beq.n	800a372 <_putc_r+0x7a>
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	6022      	str	r2, [r4, #0]
 800a344:	701d      	strb	r5, [r3, #0]
 800a346:	b2ed      	uxtb	r5, r5
 800a348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a34a:	07db      	lsls	r3, r3, #31
 800a34c:	d405      	bmi.n	800a35a <_putc_r+0x62>
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	059b      	lsls	r3, r3, #22
 800a352:	d402      	bmi.n	800a35a <_putc_r+0x62>
 800a354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a356:	f7ff f995 	bl	8009684 <__retarget_lock_release_recursive>
 800a35a:	0028      	movs	r0, r5
 800a35c:	bd70      	pop	{r4, r5, r6, pc}
 800a35e:	4b09      	ldr	r3, [pc, #36]	; (800a384 <_putc_r+0x8c>)
 800a360:	429c      	cmp	r4, r3
 800a362:	d101      	bne.n	800a368 <_putc_r+0x70>
 800a364:	68b4      	ldr	r4, [r6, #8]
 800a366:	e7d6      	b.n	800a316 <_putc_r+0x1e>
 800a368:	4b07      	ldr	r3, [pc, #28]	; (800a388 <_putc_r+0x90>)
 800a36a:	429c      	cmp	r4, r3
 800a36c:	d1d3      	bne.n	800a316 <_putc_r+0x1e>
 800a36e:	68f4      	ldr	r4, [r6, #12]
 800a370:	e7d1      	b.n	800a316 <_putc_r+0x1e>
 800a372:	0029      	movs	r1, r5
 800a374:	0022      	movs	r2, r4
 800a376:	0030      	movs	r0, r6
 800a378:	f7fe f838 	bl	80083ec <__swbuf_r>
 800a37c:	0005      	movs	r5, r0
 800a37e:	e7e3      	b.n	800a348 <_putc_r+0x50>
 800a380:	0800b0d0 	.word	0x0800b0d0
 800a384:	0800b0f0 	.word	0x0800b0f0
 800a388:	0800b0b0 	.word	0x0800b0b0

0800a38c <_sbrk_r>:
 800a38c:	2300      	movs	r3, #0
 800a38e:	b570      	push	{r4, r5, r6, lr}
 800a390:	4d06      	ldr	r5, [pc, #24]	; (800a3ac <_sbrk_r+0x20>)
 800a392:	0004      	movs	r4, r0
 800a394:	0008      	movs	r0, r1
 800a396:	602b      	str	r3, [r5, #0]
 800a398:	f7fa fd0c 	bl	8004db4 <_sbrk>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d103      	bne.n	800a3a8 <_sbrk_r+0x1c>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d000      	beq.n	800a3a8 <_sbrk_r+0x1c>
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	bd70      	pop	{r4, r5, r6, pc}
 800a3aa:	46c0      	nop			; (mov r8, r8)
 800a3ac:	20000538 	.word	0x20000538

0800a3b0 <__sread>:
 800a3b0:	b570      	push	{r4, r5, r6, lr}
 800a3b2:	000c      	movs	r4, r1
 800a3b4:	250e      	movs	r5, #14
 800a3b6:	5f49      	ldrsh	r1, [r1, r5]
 800a3b8:	f000 f8f4 	bl	800a5a4 <_read_r>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	db03      	blt.n	800a3c8 <__sread+0x18>
 800a3c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a3c2:	181b      	adds	r3, r3, r0
 800a3c4:	6563      	str	r3, [r4, #84]	; 0x54
 800a3c6:	bd70      	pop	{r4, r5, r6, pc}
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	4a02      	ldr	r2, [pc, #8]	; (800a3d4 <__sread+0x24>)
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	81a3      	strh	r3, [r4, #12]
 800a3d0:	e7f9      	b.n	800a3c6 <__sread+0x16>
 800a3d2:	46c0      	nop			; (mov r8, r8)
 800a3d4:	ffffefff 	.word	0xffffefff

0800a3d8 <__swrite>:
 800a3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3da:	001f      	movs	r7, r3
 800a3dc:	898b      	ldrh	r3, [r1, #12]
 800a3de:	0005      	movs	r5, r0
 800a3e0:	000c      	movs	r4, r1
 800a3e2:	0016      	movs	r6, r2
 800a3e4:	05db      	lsls	r3, r3, #23
 800a3e6:	d505      	bpl.n	800a3f4 <__swrite+0x1c>
 800a3e8:	230e      	movs	r3, #14
 800a3ea:	5ec9      	ldrsh	r1, [r1, r3]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	f000 f8a2 	bl	800a538 <_lseek_r>
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	4a05      	ldr	r2, [pc, #20]	; (800a40c <__swrite+0x34>)
 800a3f8:	0028      	movs	r0, r5
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	81a3      	strh	r3, [r4, #12]
 800a3fe:	0032      	movs	r2, r6
 800a400:	230e      	movs	r3, #14
 800a402:	5ee1      	ldrsh	r1, [r4, r3]
 800a404:	003b      	movs	r3, r7
 800a406:	f000 f81f 	bl	800a448 <_write_r>
 800a40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a40c:	ffffefff 	.word	0xffffefff

0800a410 <__sseek>:
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	000c      	movs	r4, r1
 800a414:	250e      	movs	r5, #14
 800a416:	5f49      	ldrsh	r1, [r1, r5]
 800a418:	f000 f88e 	bl	800a538 <_lseek_r>
 800a41c:	89a3      	ldrh	r3, [r4, #12]
 800a41e:	1c42      	adds	r2, r0, #1
 800a420:	d103      	bne.n	800a42a <__sseek+0x1a>
 800a422:	4a05      	ldr	r2, [pc, #20]	; (800a438 <__sseek+0x28>)
 800a424:	4013      	ands	r3, r2
 800a426:	81a3      	strh	r3, [r4, #12]
 800a428:	bd70      	pop	{r4, r5, r6, pc}
 800a42a:	2280      	movs	r2, #128	; 0x80
 800a42c:	0152      	lsls	r2, r2, #5
 800a42e:	4313      	orrs	r3, r2
 800a430:	81a3      	strh	r3, [r4, #12]
 800a432:	6560      	str	r0, [r4, #84]	; 0x54
 800a434:	e7f8      	b.n	800a428 <__sseek+0x18>
 800a436:	46c0      	nop			; (mov r8, r8)
 800a438:	ffffefff 	.word	0xffffefff

0800a43c <__sclose>:
 800a43c:	b510      	push	{r4, lr}
 800a43e:	230e      	movs	r3, #14
 800a440:	5ec9      	ldrsh	r1, [r1, r3]
 800a442:	f000 f833 	bl	800a4ac <_close_r>
 800a446:	bd10      	pop	{r4, pc}

0800a448 <_write_r>:
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	0004      	movs	r4, r0
 800a44c:	0008      	movs	r0, r1
 800a44e:	0011      	movs	r1, r2
 800a450:	001a      	movs	r2, r3
 800a452:	2300      	movs	r3, #0
 800a454:	4d05      	ldr	r5, [pc, #20]	; (800a46c <_write_r+0x24>)
 800a456:	602b      	str	r3, [r5, #0]
 800a458:	f7f8 ffc0 	bl	80033dc <_write>
 800a45c:	1c43      	adds	r3, r0, #1
 800a45e:	d103      	bne.n	800a468 <_write_r+0x20>
 800a460:	682b      	ldr	r3, [r5, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d000      	beq.n	800a468 <_write_r+0x20>
 800a466:	6023      	str	r3, [r4, #0]
 800a468:	bd70      	pop	{r4, r5, r6, pc}
 800a46a:	46c0      	nop			; (mov r8, r8)
 800a46c:	20000538 	.word	0x20000538

0800a470 <__assert_func>:
 800a470:	b530      	push	{r4, r5, lr}
 800a472:	0014      	movs	r4, r2
 800a474:	001a      	movs	r2, r3
 800a476:	4b09      	ldr	r3, [pc, #36]	; (800a49c <__assert_func+0x2c>)
 800a478:	0005      	movs	r5, r0
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	b085      	sub	sp, #20
 800a47e:	68d8      	ldr	r0, [r3, #12]
 800a480:	4b07      	ldr	r3, [pc, #28]	; (800a4a0 <__assert_func+0x30>)
 800a482:	2c00      	cmp	r4, #0
 800a484:	d101      	bne.n	800a48a <__assert_func+0x1a>
 800a486:	4b07      	ldr	r3, [pc, #28]	; (800a4a4 <__assert_func+0x34>)
 800a488:	001c      	movs	r4, r3
 800a48a:	9301      	str	r3, [sp, #4]
 800a48c:	9100      	str	r1, [sp, #0]
 800a48e:	002b      	movs	r3, r5
 800a490:	4905      	ldr	r1, [pc, #20]	; (800a4a8 <__assert_func+0x38>)
 800a492:	9402      	str	r4, [sp, #8]
 800a494:	f000 f81c 	bl	800a4d0 <fiprintf>
 800a498:	f000 f8a5 	bl	800a5e6 <abort>
 800a49c:	20000024 	.word	0x20000024
 800a4a0:	0800b27d 	.word	0x0800b27d
 800a4a4:	0800afd3 	.word	0x0800afd3
 800a4a8:	0800b28a 	.word	0x0800b28a

0800a4ac <_close_r>:
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	b570      	push	{r4, r5, r6, lr}
 800a4b0:	4d06      	ldr	r5, [pc, #24]	; (800a4cc <_close_r+0x20>)
 800a4b2:	0004      	movs	r4, r0
 800a4b4:	0008      	movs	r0, r1
 800a4b6:	602b      	str	r3, [r5, #0]
 800a4b8:	f7fa fc70 	bl	8004d9c <_close>
 800a4bc:	1c43      	adds	r3, r0, #1
 800a4be:	d103      	bne.n	800a4c8 <_close_r+0x1c>
 800a4c0:	682b      	ldr	r3, [r5, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d000      	beq.n	800a4c8 <_close_r+0x1c>
 800a4c6:	6023      	str	r3, [r4, #0]
 800a4c8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ca:	46c0      	nop			; (mov r8, r8)
 800a4cc:	20000538 	.word	0x20000538

0800a4d0 <fiprintf>:
 800a4d0:	b40e      	push	{r1, r2, r3}
 800a4d2:	b503      	push	{r0, r1, lr}
 800a4d4:	0001      	movs	r1, r0
 800a4d6:	ab03      	add	r3, sp, #12
 800a4d8:	4804      	ldr	r0, [pc, #16]	; (800a4ec <fiprintf+0x1c>)
 800a4da:	cb04      	ldmia	r3!, {r2}
 800a4dc:	6800      	ldr	r0, [r0, #0]
 800a4de:	9301      	str	r3, [sp, #4]
 800a4e0:	f7ff fdd0 	bl	800a084 <_vfiprintf_r>
 800a4e4:	b002      	add	sp, #8
 800a4e6:	bc08      	pop	{r3}
 800a4e8:	b003      	add	sp, #12
 800a4ea:	4718      	bx	r3
 800a4ec:	20000024 	.word	0x20000024

0800a4f0 <_fstat_r>:
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	b570      	push	{r4, r5, r6, lr}
 800a4f4:	4d06      	ldr	r5, [pc, #24]	; (800a510 <_fstat_r+0x20>)
 800a4f6:	0004      	movs	r4, r0
 800a4f8:	0008      	movs	r0, r1
 800a4fa:	0011      	movs	r1, r2
 800a4fc:	602b      	str	r3, [r5, #0]
 800a4fe:	f7fa fc50 	bl	8004da2 <_fstat>
 800a502:	1c43      	adds	r3, r0, #1
 800a504:	d103      	bne.n	800a50e <_fstat_r+0x1e>
 800a506:	682b      	ldr	r3, [r5, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d000      	beq.n	800a50e <_fstat_r+0x1e>
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	bd70      	pop	{r4, r5, r6, pc}
 800a510:	20000538 	.word	0x20000538

0800a514 <_isatty_r>:
 800a514:	2300      	movs	r3, #0
 800a516:	b570      	push	{r4, r5, r6, lr}
 800a518:	4d06      	ldr	r5, [pc, #24]	; (800a534 <_isatty_r+0x20>)
 800a51a:	0004      	movs	r4, r0
 800a51c:	0008      	movs	r0, r1
 800a51e:	602b      	str	r3, [r5, #0]
 800a520:	f7fa fc44 	bl	8004dac <_isatty>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d103      	bne.n	800a530 <_isatty_r+0x1c>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d000      	beq.n	800a530 <_isatty_r+0x1c>
 800a52e:	6023      	str	r3, [r4, #0]
 800a530:	bd70      	pop	{r4, r5, r6, pc}
 800a532:	46c0      	nop			; (mov r8, r8)
 800a534:	20000538 	.word	0x20000538

0800a538 <_lseek_r>:
 800a538:	b570      	push	{r4, r5, r6, lr}
 800a53a:	0004      	movs	r4, r0
 800a53c:	0008      	movs	r0, r1
 800a53e:	0011      	movs	r1, r2
 800a540:	001a      	movs	r2, r3
 800a542:	2300      	movs	r3, #0
 800a544:	4d05      	ldr	r5, [pc, #20]	; (800a55c <_lseek_r+0x24>)
 800a546:	602b      	str	r3, [r5, #0]
 800a548:	f7fa fc32 	bl	8004db0 <_lseek>
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	d103      	bne.n	800a558 <_lseek_r+0x20>
 800a550:	682b      	ldr	r3, [r5, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d000      	beq.n	800a558 <_lseek_r+0x20>
 800a556:	6023      	str	r3, [r4, #0]
 800a558:	bd70      	pop	{r4, r5, r6, pc}
 800a55a:	46c0      	nop			; (mov r8, r8)
 800a55c:	20000538 	.word	0x20000538

0800a560 <__ascii_mbtowc>:
 800a560:	b082      	sub	sp, #8
 800a562:	2900      	cmp	r1, #0
 800a564:	d100      	bne.n	800a568 <__ascii_mbtowc+0x8>
 800a566:	a901      	add	r1, sp, #4
 800a568:	1e10      	subs	r0, r2, #0
 800a56a:	d006      	beq.n	800a57a <__ascii_mbtowc+0x1a>
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d006      	beq.n	800a57e <__ascii_mbtowc+0x1e>
 800a570:	7813      	ldrb	r3, [r2, #0]
 800a572:	600b      	str	r3, [r1, #0]
 800a574:	7810      	ldrb	r0, [r2, #0]
 800a576:	1e43      	subs	r3, r0, #1
 800a578:	4198      	sbcs	r0, r3
 800a57a:	b002      	add	sp, #8
 800a57c:	4770      	bx	lr
 800a57e:	2002      	movs	r0, #2
 800a580:	4240      	negs	r0, r0
 800a582:	e7fa      	b.n	800a57a <__ascii_mbtowc+0x1a>

0800a584 <__malloc_lock>:
 800a584:	b510      	push	{r4, lr}
 800a586:	4802      	ldr	r0, [pc, #8]	; (800a590 <__malloc_lock+0xc>)
 800a588:	f7ff f87b 	bl	8009682 <__retarget_lock_acquire_recursive>
 800a58c:	bd10      	pop	{r4, pc}
 800a58e:	46c0      	nop			; (mov r8, r8)
 800a590:	20000530 	.word	0x20000530

0800a594 <__malloc_unlock>:
 800a594:	b510      	push	{r4, lr}
 800a596:	4802      	ldr	r0, [pc, #8]	; (800a5a0 <__malloc_unlock+0xc>)
 800a598:	f7ff f874 	bl	8009684 <__retarget_lock_release_recursive>
 800a59c:	bd10      	pop	{r4, pc}
 800a59e:	46c0      	nop			; (mov r8, r8)
 800a5a0:	20000530 	.word	0x20000530

0800a5a4 <_read_r>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	0004      	movs	r4, r0
 800a5a8:	0008      	movs	r0, r1
 800a5aa:	0011      	movs	r1, r2
 800a5ac:	001a      	movs	r2, r3
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	4d05      	ldr	r5, [pc, #20]	; (800a5c8 <_read_r+0x24>)
 800a5b2:	602b      	str	r3, [r5, #0]
 800a5b4:	f7fa fbe5 	bl	8004d82 <_read>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d103      	bne.n	800a5c4 <_read_r+0x20>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d000      	beq.n	800a5c4 <_read_r+0x20>
 800a5c2:	6023      	str	r3, [r4, #0]
 800a5c4:	bd70      	pop	{r4, r5, r6, pc}
 800a5c6:	46c0      	nop			; (mov r8, r8)
 800a5c8:	20000538 	.word	0x20000538

0800a5cc <__ascii_wctomb>:
 800a5cc:	0003      	movs	r3, r0
 800a5ce:	1e08      	subs	r0, r1, #0
 800a5d0:	d005      	beq.n	800a5de <__ascii_wctomb+0x12>
 800a5d2:	2aff      	cmp	r2, #255	; 0xff
 800a5d4:	d904      	bls.n	800a5e0 <__ascii_wctomb+0x14>
 800a5d6:	228a      	movs	r2, #138	; 0x8a
 800a5d8:	2001      	movs	r0, #1
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	4240      	negs	r0, r0
 800a5de:	4770      	bx	lr
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	700a      	strb	r2, [r1, #0]
 800a5e4:	e7fb      	b.n	800a5de <__ascii_wctomb+0x12>

0800a5e6 <abort>:
 800a5e6:	2006      	movs	r0, #6
 800a5e8:	b510      	push	{r4, lr}
 800a5ea:	f000 f82d 	bl	800a648 <raise>
 800a5ee:	2001      	movs	r0, #1
 800a5f0:	f7fa fbc1 	bl	8004d76 <_exit>

0800a5f4 <_raise_r>:
 800a5f4:	b570      	push	{r4, r5, r6, lr}
 800a5f6:	0004      	movs	r4, r0
 800a5f8:	000d      	movs	r5, r1
 800a5fa:	291f      	cmp	r1, #31
 800a5fc:	d904      	bls.n	800a608 <_raise_r+0x14>
 800a5fe:	2316      	movs	r3, #22
 800a600:	6003      	str	r3, [r0, #0]
 800a602:	2001      	movs	r0, #1
 800a604:	4240      	negs	r0, r0
 800a606:	bd70      	pop	{r4, r5, r6, pc}
 800a608:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d004      	beq.n	800a618 <_raise_r+0x24>
 800a60e:	008a      	lsls	r2, r1, #2
 800a610:	189b      	adds	r3, r3, r2
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	2a00      	cmp	r2, #0
 800a616:	d108      	bne.n	800a62a <_raise_r+0x36>
 800a618:	0020      	movs	r0, r4
 800a61a:	f000 f831 	bl	800a680 <_getpid_r>
 800a61e:	002a      	movs	r2, r5
 800a620:	0001      	movs	r1, r0
 800a622:	0020      	movs	r0, r4
 800a624:	f000 f81a 	bl	800a65c <_kill_r>
 800a628:	e7ed      	b.n	800a606 <_raise_r+0x12>
 800a62a:	2000      	movs	r0, #0
 800a62c:	2a01      	cmp	r2, #1
 800a62e:	d0ea      	beq.n	800a606 <_raise_r+0x12>
 800a630:	1c51      	adds	r1, r2, #1
 800a632:	d103      	bne.n	800a63c <_raise_r+0x48>
 800a634:	2316      	movs	r3, #22
 800a636:	3001      	adds	r0, #1
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	e7e4      	b.n	800a606 <_raise_r+0x12>
 800a63c:	2400      	movs	r4, #0
 800a63e:	0028      	movs	r0, r5
 800a640:	601c      	str	r4, [r3, #0]
 800a642:	4790      	blx	r2
 800a644:	0020      	movs	r0, r4
 800a646:	e7de      	b.n	800a606 <_raise_r+0x12>

0800a648 <raise>:
 800a648:	b510      	push	{r4, lr}
 800a64a:	4b03      	ldr	r3, [pc, #12]	; (800a658 <raise+0x10>)
 800a64c:	0001      	movs	r1, r0
 800a64e:	6818      	ldr	r0, [r3, #0]
 800a650:	f7ff ffd0 	bl	800a5f4 <_raise_r>
 800a654:	bd10      	pop	{r4, pc}
 800a656:	46c0      	nop			; (mov r8, r8)
 800a658:	20000024 	.word	0x20000024

0800a65c <_kill_r>:
 800a65c:	2300      	movs	r3, #0
 800a65e:	b570      	push	{r4, r5, r6, lr}
 800a660:	4d06      	ldr	r5, [pc, #24]	; (800a67c <_kill_r+0x20>)
 800a662:	0004      	movs	r4, r0
 800a664:	0008      	movs	r0, r1
 800a666:	0011      	movs	r1, r2
 800a668:	602b      	str	r3, [r5, #0]
 800a66a:	f7fa fb7c 	bl	8004d66 <_kill>
 800a66e:	1c43      	adds	r3, r0, #1
 800a670:	d103      	bne.n	800a67a <_kill_r+0x1e>
 800a672:	682b      	ldr	r3, [r5, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d000      	beq.n	800a67a <_kill_r+0x1e>
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
 800a67c:	20000538 	.word	0x20000538

0800a680 <_getpid_r>:
 800a680:	b510      	push	{r4, lr}
 800a682:	f7fa fb6e 	bl	8004d62 <_getpid>
 800a686:	bd10      	pop	{r4, pc}

0800a688 <log>:
 800a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68a:	0004      	movs	r4, r0
 800a68c:	000d      	movs	r5, r1
 800a68e:	f000 f839 	bl	800a704 <__ieee754_log>
 800a692:	4b19      	ldr	r3, [pc, #100]	; (800a6f8 <log+0x70>)
 800a694:	0006      	movs	r6, r0
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	000f      	movs	r7, r1
 800a69a:	b25b      	sxtb	r3, r3
 800a69c:	3301      	adds	r3, #1
 800a69e:	d01d      	beq.n	800a6dc <log+0x54>
 800a6a0:	0022      	movs	r2, r4
 800a6a2:	002b      	movs	r3, r5
 800a6a4:	0020      	movs	r0, r4
 800a6a6:	0029      	movs	r1, r5
 800a6a8:	f7f8 fc76 	bl	8002f98 <__aeabi_dcmpun>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d115      	bne.n	800a6dc <log+0x54>
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	0020      	movs	r0, r4
 800a6b6:	0029      	movs	r1, r5
 800a6b8:	f7f5 fee2 	bl	8000480 <__aeabi_dcmpgt>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d10d      	bne.n	800a6dc <log+0x54>
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	0020      	movs	r0, r4
 800a6c6:	0029      	movs	r1, r5
 800a6c8:	f7f5 fec0 	bl	800044c <__aeabi_dcmpeq>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d008      	beq.n	800a6e2 <log+0x5a>
 800a6d0:	f7fd f92c 	bl	800792c <__errno>
 800a6d4:	2322      	movs	r3, #34	; 0x22
 800a6d6:	2600      	movs	r6, #0
 800a6d8:	4f08      	ldr	r7, [pc, #32]	; (800a6fc <log+0x74>)
 800a6da:	6003      	str	r3, [r0, #0]
 800a6dc:	0030      	movs	r0, r6
 800a6de:	0039      	movs	r1, r7
 800a6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6e2:	f7fd f923 	bl	800792c <__errno>
 800a6e6:	2321      	movs	r3, #33	; 0x21
 800a6e8:	6003      	str	r3, [r0, #0]
 800a6ea:	4805      	ldr	r0, [pc, #20]	; (800a700 <log+0x78>)
 800a6ec:	f000 f9ba 	bl	800aa64 <nan>
 800a6f0:	0006      	movs	r6, r0
 800a6f2:	000f      	movs	r7, r1
 800a6f4:	e7f2      	b.n	800a6dc <log+0x54>
 800a6f6:	46c0      	nop			; (mov r8, r8)
 800a6f8:	200001f4 	.word	0x200001f4
 800a6fc:	fff00000 	.word	0xfff00000
 800a700:	0800afd3 	.word	0x0800afd3

0800a704 <__ieee754_log>:
 800a704:	2280      	movs	r2, #128	; 0x80
 800a706:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a708:	000b      	movs	r3, r1
 800a70a:	b08d      	sub	sp, #52	; 0x34
 800a70c:	0352      	lsls	r2, r2, #13
 800a70e:	4291      	cmp	r1, r2
 800a710:	da22      	bge.n	800a758 <__ieee754_log+0x54>
 800a712:	004a      	lsls	r2, r1, #1
 800a714:	0852      	lsrs	r2, r2, #1
 800a716:	4302      	orrs	r2, r0
 800a718:	d107      	bne.n	800a72a <__ieee754_log+0x26>
 800a71a:	2200      	movs	r2, #0
 800a71c:	2300      	movs	r3, #0
 800a71e:	2000      	movs	r0, #0
 800a720:	49b3      	ldr	r1, [pc, #716]	; (800a9f0 <__ieee754_log+0x2ec>)
 800a722:	f7f7 fa35 	bl	8001b90 <__aeabi_ddiv>
 800a726:	b00d      	add	sp, #52	; 0x34
 800a728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a72a:	2900      	cmp	r1, #0
 800a72c:	da05      	bge.n	800a73a <__ieee754_log+0x36>
 800a72e:	0002      	movs	r2, r0
 800a730:	f7f8 f8a0 	bl	8002874 <__aeabi_dsub>
 800a734:	2200      	movs	r2, #0
 800a736:	2300      	movs	r3, #0
 800a738:	e7f3      	b.n	800a722 <__ieee754_log+0x1e>
 800a73a:	4bae      	ldr	r3, [pc, #696]	; (800a9f4 <__ieee754_log+0x2f0>)
 800a73c:	2200      	movs	r2, #0
 800a73e:	f7f7 fe2d 	bl	800239c <__aeabi_dmul>
 800a742:	2436      	movs	r4, #54	; 0x36
 800a744:	000b      	movs	r3, r1
 800a746:	4264      	negs	r4, r4
 800a748:	4aab      	ldr	r2, [pc, #684]	; (800a9f8 <__ieee754_log+0x2f4>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	dd06      	ble.n	800a75c <__ieee754_log+0x58>
 800a74e:	0002      	movs	r2, r0
 800a750:	000b      	movs	r3, r1
 800a752:	f7f6 feb3 	bl	80014bc <__aeabi_dadd>
 800a756:	e7e6      	b.n	800a726 <__ieee754_log+0x22>
 800a758:	2400      	movs	r4, #0
 800a75a:	e7f5      	b.n	800a748 <__ieee754_log+0x44>
 800a75c:	4da7      	ldr	r5, [pc, #668]	; (800a9fc <__ieee754_log+0x2f8>)
 800a75e:	151a      	asrs	r2, r3, #20
 800a760:	1952      	adds	r2, r2, r5
 800a762:	1912      	adds	r2, r2, r4
 800a764:	031b      	lsls	r3, r3, #12
 800a766:	4ca6      	ldr	r4, [pc, #664]	; (800aa00 <__ieee754_log+0x2fc>)
 800a768:	0b1b      	lsrs	r3, r3, #12
 800a76a:	9302      	str	r3, [sp, #8]
 800a76c:	191c      	adds	r4, r3, r4
 800a76e:	2380      	movs	r3, #128	; 0x80
 800a770:	035b      	lsls	r3, r3, #13
 800a772:	4023      	ands	r3, r4
 800a774:	4ca3      	ldr	r4, [pc, #652]	; (800aa04 <__ieee754_log+0x300>)
 800a776:	9d02      	ldr	r5, [sp, #8]
 800a778:	405c      	eors	r4, r3
 800a77a:	151b      	asrs	r3, r3, #20
 800a77c:	189b      	adds	r3, r3, r2
 800a77e:	4325      	orrs	r5, r4
 800a780:	2200      	movs	r2, #0
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	0029      	movs	r1, r5
 800a786:	4b9f      	ldr	r3, [pc, #636]	; (800aa04 <__ieee754_log+0x300>)
 800a788:	f7f8 f874 	bl	8002874 <__aeabi_dsub>
 800a78c:	9b02      	ldr	r3, [sp, #8]
 800a78e:	0006      	movs	r6, r0
 800a790:	3302      	adds	r3, #2
 800a792:	031b      	lsls	r3, r3, #12
 800a794:	000f      	movs	r7, r1
 800a796:	2200      	movs	r2, #0
 800a798:	0b1b      	lsrs	r3, r3, #12
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	dc64      	bgt.n	800a868 <__ieee754_log+0x164>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f7f5 fe54 	bl	800044c <__aeabi_dcmpeq>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d019      	beq.n	800a7dc <__ieee754_log+0xd8>
 800a7a8:	9b00      	ldr	r3, [sp, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d100      	bne.n	800a7b0 <__ieee754_log+0xac>
 800a7ae:	e11c      	b.n	800a9ea <__ieee754_log+0x2e6>
 800a7b0:	0018      	movs	r0, r3
 800a7b2:	f7f8 fc45 	bl	8003040 <__aeabi_i2d>
 800a7b6:	4a94      	ldr	r2, [pc, #592]	; (800aa08 <__ieee754_log+0x304>)
 800a7b8:	4b94      	ldr	r3, [pc, #592]	; (800aa0c <__ieee754_log+0x308>)
 800a7ba:	0004      	movs	r4, r0
 800a7bc:	000d      	movs	r5, r1
 800a7be:	f7f7 fded 	bl	800239c <__aeabi_dmul>
 800a7c2:	4a93      	ldr	r2, [pc, #588]	; (800aa10 <__ieee754_log+0x30c>)
 800a7c4:	0006      	movs	r6, r0
 800a7c6:	000f      	movs	r7, r1
 800a7c8:	4b92      	ldr	r3, [pc, #584]	; (800aa14 <__ieee754_log+0x310>)
 800a7ca:	0020      	movs	r0, r4
 800a7cc:	0029      	movs	r1, r5
 800a7ce:	f7f7 fde5 	bl	800239c <__aeabi_dmul>
 800a7d2:	0002      	movs	r2, r0
 800a7d4:	000b      	movs	r3, r1
 800a7d6:	0030      	movs	r0, r6
 800a7d8:	0039      	movs	r1, r7
 800a7da:	e7ba      	b.n	800a752 <__ieee754_log+0x4e>
 800a7dc:	4a8e      	ldr	r2, [pc, #568]	; (800aa18 <__ieee754_log+0x314>)
 800a7de:	4b8f      	ldr	r3, [pc, #572]	; (800aa1c <__ieee754_log+0x318>)
 800a7e0:	0030      	movs	r0, r6
 800a7e2:	0039      	movs	r1, r7
 800a7e4:	f7f7 fdda 	bl	800239c <__aeabi_dmul>
 800a7e8:	0002      	movs	r2, r0
 800a7ea:	000b      	movs	r3, r1
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	498c      	ldr	r1, [pc, #560]	; (800aa20 <__ieee754_log+0x31c>)
 800a7f0:	f7f8 f840 	bl	8002874 <__aeabi_dsub>
 800a7f4:	0032      	movs	r2, r6
 800a7f6:	0004      	movs	r4, r0
 800a7f8:	000d      	movs	r5, r1
 800a7fa:	003b      	movs	r3, r7
 800a7fc:	0030      	movs	r0, r6
 800a7fe:	0039      	movs	r1, r7
 800a800:	f7f7 fdcc 	bl	800239c <__aeabi_dmul>
 800a804:	000b      	movs	r3, r1
 800a806:	0002      	movs	r2, r0
 800a808:	0029      	movs	r1, r5
 800a80a:	0020      	movs	r0, r4
 800a80c:	f7f7 fdc6 	bl	800239c <__aeabi_dmul>
 800a810:	9b00      	ldr	r3, [sp, #0]
 800a812:	9002      	str	r0, [sp, #8]
 800a814:	9103      	str	r1, [sp, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d106      	bne.n	800a828 <__ieee754_log+0x124>
 800a81a:	0002      	movs	r2, r0
 800a81c:	000b      	movs	r3, r1
 800a81e:	0030      	movs	r0, r6
 800a820:	0039      	movs	r1, r7
 800a822:	f7f8 f827 	bl	8002874 <__aeabi_dsub>
 800a826:	e77e      	b.n	800a726 <__ieee754_log+0x22>
 800a828:	9800      	ldr	r0, [sp, #0]
 800a82a:	f7f8 fc09 	bl	8003040 <__aeabi_i2d>
 800a82e:	4a76      	ldr	r2, [pc, #472]	; (800aa08 <__ieee754_log+0x304>)
 800a830:	4b76      	ldr	r3, [pc, #472]	; (800aa0c <__ieee754_log+0x308>)
 800a832:	0004      	movs	r4, r0
 800a834:	000d      	movs	r5, r1
 800a836:	f7f7 fdb1 	bl	800239c <__aeabi_dmul>
 800a83a:	4a75      	ldr	r2, [pc, #468]	; (800aa10 <__ieee754_log+0x30c>)
 800a83c:	9000      	str	r0, [sp, #0]
 800a83e:	9101      	str	r1, [sp, #4]
 800a840:	4b74      	ldr	r3, [pc, #464]	; (800aa14 <__ieee754_log+0x310>)
 800a842:	0020      	movs	r0, r4
 800a844:	0029      	movs	r1, r5
 800a846:	f7f7 fda9 	bl	800239c <__aeabi_dmul>
 800a84a:	0002      	movs	r2, r0
 800a84c:	000b      	movs	r3, r1
 800a84e:	9802      	ldr	r0, [sp, #8]
 800a850:	9903      	ldr	r1, [sp, #12]
 800a852:	f7f8 f80f 	bl	8002874 <__aeabi_dsub>
 800a856:	0032      	movs	r2, r6
 800a858:	003b      	movs	r3, r7
 800a85a:	f7f8 f80b 	bl	8002874 <__aeabi_dsub>
 800a85e:	0002      	movs	r2, r0
 800a860:	000b      	movs	r3, r1
 800a862:	9800      	ldr	r0, [sp, #0]
 800a864:	9901      	ldr	r1, [sp, #4]
 800a866:	e7dc      	b.n	800a822 <__ieee754_log+0x11e>
 800a868:	2380      	movs	r3, #128	; 0x80
 800a86a:	05db      	lsls	r3, r3, #23
 800a86c:	f7f6 fe26 	bl	80014bc <__aeabi_dadd>
 800a870:	0002      	movs	r2, r0
 800a872:	000b      	movs	r3, r1
 800a874:	0030      	movs	r0, r6
 800a876:	0039      	movs	r1, r7
 800a878:	f7f7 f98a 	bl	8001b90 <__aeabi_ddiv>
 800a87c:	9004      	str	r0, [sp, #16]
 800a87e:	9105      	str	r1, [sp, #20]
 800a880:	9800      	ldr	r0, [sp, #0]
 800a882:	f7f8 fbdd 	bl	8003040 <__aeabi_i2d>
 800a886:	9a04      	ldr	r2, [sp, #16]
 800a888:	9b05      	ldr	r3, [sp, #20]
 800a88a:	9006      	str	r0, [sp, #24]
 800a88c:	9107      	str	r1, [sp, #28]
 800a88e:	0010      	movs	r0, r2
 800a890:	0019      	movs	r1, r3
 800a892:	f7f7 fd83 	bl	800239c <__aeabi_dmul>
 800a896:	4a63      	ldr	r2, [pc, #396]	; (800aa24 <__ieee754_log+0x320>)
 800a898:	9b02      	ldr	r3, [sp, #8]
 800a89a:	4694      	mov	ip, r2
 800a89c:	4463      	add	r3, ip
 800a89e:	0002      	movs	r2, r0
 800a8a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8a2:	000b      	movs	r3, r1
 800a8a4:	9008      	str	r0, [sp, #32]
 800a8a6:	9109      	str	r1, [sp, #36]	; 0x24
 800a8a8:	f7f7 fd78 	bl	800239c <__aeabi_dmul>
 800a8ac:	0004      	movs	r4, r0
 800a8ae:	000d      	movs	r5, r1
 800a8b0:	4a5d      	ldr	r2, [pc, #372]	; (800aa28 <__ieee754_log+0x324>)
 800a8b2:	4b5e      	ldr	r3, [pc, #376]	; (800aa2c <__ieee754_log+0x328>)
 800a8b4:	f7f7 fd72 	bl	800239c <__aeabi_dmul>
 800a8b8:	4a5d      	ldr	r2, [pc, #372]	; (800aa30 <__ieee754_log+0x32c>)
 800a8ba:	4b5e      	ldr	r3, [pc, #376]	; (800aa34 <__ieee754_log+0x330>)
 800a8bc:	f7f6 fdfe 	bl	80014bc <__aeabi_dadd>
 800a8c0:	0022      	movs	r2, r4
 800a8c2:	002b      	movs	r3, r5
 800a8c4:	f7f7 fd6a 	bl	800239c <__aeabi_dmul>
 800a8c8:	4a5b      	ldr	r2, [pc, #364]	; (800aa38 <__ieee754_log+0x334>)
 800a8ca:	4b5c      	ldr	r3, [pc, #368]	; (800aa3c <__ieee754_log+0x338>)
 800a8cc:	f7f6 fdf6 	bl	80014bc <__aeabi_dadd>
 800a8d0:	0022      	movs	r2, r4
 800a8d2:	002b      	movs	r3, r5
 800a8d4:	f7f7 fd62 	bl	800239c <__aeabi_dmul>
 800a8d8:	4a59      	ldr	r2, [pc, #356]	; (800aa40 <__ieee754_log+0x33c>)
 800a8da:	4b5a      	ldr	r3, [pc, #360]	; (800aa44 <__ieee754_log+0x340>)
 800a8dc:	f7f6 fdee 	bl	80014bc <__aeabi_dadd>
 800a8e0:	9a08      	ldr	r2, [sp, #32]
 800a8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e4:	f7f7 fd5a 	bl	800239c <__aeabi_dmul>
 800a8e8:	4a57      	ldr	r2, [pc, #348]	; (800aa48 <__ieee754_log+0x344>)
 800a8ea:	9008      	str	r0, [sp, #32]
 800a8ec:	9109      	str	r1, [sp, #36]	; 0x24
 800a8ee:	4b57      	ldr	r3, [pc, #348]	; (800aa4c <__ieee754_log+0x348>)
 800a8f0:	0020      	movs	r0, r4
 800a8f2:	0029      	movs	r1, r5
 800a8f4:	f7f7 fd52 	bl	800239c <__aeabi_dmul>
 800a8f8:	4a55      	ldr	r2, [pc, #340]	; (800aa50 <__ieee754_log+0x34c>)
 800a8fa:	4b56      	ldr	r3, [pc, #344]	; (800aa54 <__ieee754_log+0x350>)
 800a8fc:	f7f6 fdde 	bl	80014bc <__aeabi_dadd>
 800a900:	0022      	movs	r2, r4
 800a902:	002b      	movs	r3, r5
 800a904:	f7f7 fd4a 	bl	800239c <__aeabi_dmul>
 800a908:	4a53      	ldr	r2, [pc, #332]	; (800aa58 <__ieee754_log+0x354>)
 800a90a:	4b54      	ldr	r3, [pc, #336]	; (800aa5c <__ieee754_log+0x358>)
 800a90c:	f7f6 fdd6 	bl	80014bc <__aeabi_dadd>
 800a910:	0022      	movs	r2, r4
 800a912:	002b      	movs	r3, r5
 800a914:	f7f7 fd42 	bl	800239c <__aeabi_dmul>
 800a918:	0002      	movs	r2, r0
 800a91a:	000b      	movs	r3, r1
 800a91c:	9808      	ldr	r0, [sp, #32]
 800a91e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a920:	f7f6 fdcc 	bl	80014bc <__aeabi_dadd>
 800a924:	9a02      	ldr	r2, [sp, #8]
 800a926:	4b4e      	ldr	r3, [pc, #312]	; (800aa60 <__ieee754_log+0x35c>)
 800a928:	0004      	movs	r4, r0
 800a92a:	1a9b      	subs	r3, r3, r2
 800a92c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a92e:	000d      	movs	r5, r1
 800a930:	4313      	orrs	r3, r2
 800a932:	2b00      	cmp	r3, #0
 800a934:	dd34      	ble.n	800a9a0 <__ieee754_log+0x29c>
 800a936:	2200      	movs	r2, #0
 800a938:	4b39      	ldr	r3, [pc, #228]	; (800aa20 <__ieee754_log+0x31c>)
 800a93a:	0030      	movs	r0, r6
 800a93c:	0039      	movs	r1, r7
 800a93e:	f7f7 fd2d 	bl	800239c <__aeabi_dmul>
 800a942:	0032      	movs	r2, r6
 800a944:	003b      	movs	r3, r7
 800a946:	f7f7 fd29 	bl	800239c <__aeabi_dmul>
 800a94a:	0002      	movs	r2, r0
 800a94c:	000b      	movs	r3, r1
 800a94e:	9002      	str	r0, [sp, #8]
 800a950:	9103      	str	r1, [sp, #12]
 800a952:	0020      	movs	r0, r4
 800a954:	0029      	movs	r1, r5
 800a956:	f7f6 fdb1 	bl	80014bc <__aeabi_dadd>
 800a95a:	9a04      	ldr	r2, [sp, #16]
 800a95c:	9b05      	ldr	r3, [sp, #20]
 800a95e:	f7f7 fd1d 	bl	800239c <__aeabi_dmul>
 800a962:	9b00      	ldr	r3, [sp, #0]
 800a964:	0004      	movs	r4, r0
 800a966:	000d      	movs	r5, r1
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d106      	bne.n	800a97a <__ieee754_log+0x276>
 800a96c:	0002      	movs	r2, r0
 800a96e:	000b      	movs	r3, r1
 800a970:	9802      	ldr	r0, [sp, #8]
 800a972:	9903      	ldr	r1, [sp, #12]
 800a974:	f7f7 ff7e 	bl	8002874 <__aeabi_dsub>
 800a978:	e74f      	b.n	800a81a <__ieee754_log+0x116>
 800a97a:	4a23      	ldr	r2, [pc, #140]	; (800aa08 <__ieee754_log+0x304>)
 800a97c:	4b23      	ldr	r3, [pc, #140]	; (800aa0c <__ieee754_log+0x308>)
 800a97e:	9806      	ldr	r0, [sp, #24]
 800a980:	9907      	ldr	r1, [sp, #28]
 800a982:	f7f7 fd0b 	bl	800239c <__aeabi_dmul>
 800a986:	4a22      	ldr	r2, [pc, #136]	; (800aa10 <__ieee754_log+0x30c>)
 800a988:	9000      	str	r0, [sp, #0]
 800a98a:	9101      	str	r1, [sp, #4]
 800a98c:	9806      	ldr	r0, [sp, #24]
 800a98e:	9907      	ldr	r1, [sp, #28]
 800a990:	4b20      	ldr	r3, [pc, #128]	; (800aa14 <__ieee754_log+0x310>)
 800a992:	f7f7 fd03 	bl	800239c <__aeabi_dmul>
 800a996:	0022      	movs	r2, r4
 800a998:	002b      	movs	r3, r5
 800a99a:	f7f6 fd8f 	bl	80014bc <__aeabi_dadd>
 800a99e:	e754      	b.n	800a84a <__ieee754_log+0x146>
 800a9a0:	0002      	movs	r2, r0
 800a9a2:	000b      	movs	r3, r1
 800a9a4:	0030      	movs	r0, r6
 800a9a6:	0039      	movs	r1, r7
 800a9a8:	f7f7 ff64 	bl	8002874 <__aeabi_dsub>
 800a9ac:	9a04      	ldr	r2, [sp, #16]
 800a9ae:	9b05      	ldr	r3, [sp, #20]
 800a9b0:	f7f7 fcf4 	bl	800239c <__aeabi_dmul>
 800a9b4:	9b00      	ldr	r3, [sp, #0]
 800a9b6:	0004      	movs	r4, r0
 800a9b8:	000d      	movs	r5, r1
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d102      	bne.n	800a9c4 <__ieee754_log+0x2c0>
 800a9be:	0002      	movs	r2, r0
 800a9c0:	000b      	movs	r3, r1
 800a9c2:	e72c      	b.n	800a81e <__ieee754_log+0x11a>
 800a9c4:	4a10      	ldr	r2, [pc, #64]	; (800aa08 <__ieee754_log+0x304>)
 800a9c6:	4b11      	ldr	r3, [pc, #68]	; (800aa0c <__ieee754_log+0x308>)
 800a9c8:	9806      	ldr	r0, [sp, #24]
 800a9ca:	9907      	ldr	r1, [sp, #28]
 800a9cc:	f7f7 fce6 	bl	800239c <__aeabi_dmul>
 800a9d0:	4a0f      	ldr	r2, [pc, #60]	; (800aa10 <__ieee754_log+0x30c>)
 800a9d2:	9000      	str	r0, [sp, #0]
 800a9d4:	9101      	str	r1, [sp, #4]
 800a9d6:	9806      	ldr	r0, [sp, #24]
 800a9d8:	9907      	ldr	r1, [sp, #28]
 800a9da:	4b0e      	ldr	r3, [pc, #56]	; (800aa14 <__ieee754_log+0x310>)
 800a9dc:	f7f7 fcde 	bl	800239c <__aeabi_dmul>
 800a9e0:	0002      	movs	r2, r0
 800a9e2:	000b      	movs	r3, r1
 800a9e4:	0020      	movs	r0, r4
 800a9e6:	0029      	movs	r1, r5
 800a9e8:	e733      	b.n	800a852 <__ieee754_log+0x14e>
 800a9ea:	2000      	movs	r0, #0
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	e69a      	b.n	800a726 <__ieee754_log+0x22>
 800a9f0:	c3500000 	.word	0xc3500000
 800a9f4:	43500000 	.word	0x43500000
 800a9f8:	7fefffff 	.word	0x7fefffff
 800a9fc:	fffffc01 	.word	0xfffffc01
 800aa00:	00095f64 	.word	0x00095f64
 800aa04:	3ff00000 	.word	0x3ff00000
 800aa08:	fee00000 	.word	0xfee00000
 800aa0c:	3fe62e42 	.word	0x3fe62e42
 800aa10:	35793c76 	.word	0x35793c76
 800aa14:	3dea39ef 	.word	0x3dea39ef
 800aa18:	55555555 	.word	0x55555555
 800aa1c:	3fd55555 	.word	0x3fd55555
 800aa20:	3fe00000 	.word	0x3fe00000
 800aa24:	fff9eb86 	.word	0xfff9eb86
 800aa28:	df3e5244 	.word	0xdf3e5244
 800aa2c:	3fc2f112 	.word	0x3fc2f112
 800aa30:	96cb03de 	.word	0x96cb03de
 800aa34:	3fc74664 	.word	0x3fc74664
 800aa38:	94229359 	.word	0x94229359
 800aa3c:	3fd24924 	.word	0x3fd24924
 800aa40:	55555593 	.word	0x55555593
 800aa44:	3fe55555 	.word	0x3fe55555
 800aa48:	d078c69f 	.word	0xd078c69f
 800aa4c:	3fc39a09 	.word	0x3fc39a09
 800aa50:	1d8e78af 	.word	0x1d8e78af
 800aa54:	3fcc71c5 	.word	0x3fcc71c5
 800aa58:	9997fa04 	.word	0x9997fa04
 800aa5c:	3fd99999 	.word	0x3fd99999
 800aa60:	0006b851 	.word	0x0006b851

0800aa64 <nan>:
 800aa64:	2000      	movs	r0, #0
 800aa66:	4901      	ldr	r1, [pc, #4]	; (800aa6c <nan+0x8>)
 800aa68:	4770      	bx	lr
 800aa6a:	46c0      	nop			; (mov r8, r8)
 800aa6c:	7ff80000 	.word	0x7ff80000

0800aa70 <_init>:
 800aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa72:	46c0      	nop			; (mov r8, r8)
 800aa74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa76:	bc08      	pop	{r3}
 800aa78:	469e      	mov	lr, r3
 800aa7a:	4770      	bx	lr

0800aa7c <_fini>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	46c0      	nop			; (mov r8, r8)
 800aa80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa82:	bc08      	pop	{r3}
 800aa84:	469e      	mov	lr, r3
 800aa86:	4770      	bx	lr
