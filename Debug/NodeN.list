
NodeN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bbc  0800e3b0  0800e3b0  0001e3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef6c  0800ef6c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef6c  0800ef6c  0001ef6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef74  0800ef74  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef74  0800ef74  0001ef74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef78  0800ef78  0001ef78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800ef7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000204  0800f180  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  0800f180  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5f1  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ed4  00000000  00000000  0003b81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0003f6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001288  00000000  00000000  00040b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cb7  00000000  00000000  00041d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018dbb  00000000  00000000  00058a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e717  00000000  00000000  00071802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eff19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b54  00000000  00000000  000eff6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000204 	.word	0x20000204
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e394 	.word	0x0800e394

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000208 	.word	0x20000208
 8000104:	0800e394 	.word	0x0800e394

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ff3d 	bl	80022bc <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe87 	bl	8002160 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ff2f 	bl	80022bc <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 ff25 	bl	80022bc <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fea9 	bl	80021d8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe9f 	bl	80021d8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	1c08      	adds	r0, r1, #0
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fc7b 	bl	8000dac <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fbff 	bl	8000cc4 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc6d 	bl	8000dac <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc63 	bl	8000dac <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc0d 	bl	8000d14 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc03 	bl	8000d14 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	1c08      	adds	r0, r1, #0
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f846 	bl	80005dc <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	0415      	lsls	r5, r2, #16
 8000560:	0c2d      	lsrs	r5, r5, #16
 8000562:	000f      	movs	r7, r1
 8000564:	0001      	movs	r1, r0
 8000566:	002e      	movs	r6, r5
 8000568:	46c6      	mov	lr, r8
 800056a:	4684      	mov	ip, r0
 800056c:	0400      	lsls	r0, r0, #16
 800056e:	0c14      	lsrs	r4, r2, #16
 8000570:	0c00      	lsrs	r0, r0, #16
 8000572:	0c09      	lsrs	r1, r1, #16
 8000574:	4346      	muls	r6, r0
 8000576:	434d      	muls	r5, r1
 8000578:	4360      	muls	r0, r4
 800057a:	4361      	muls	r1, r4
 800057c:	1940      	adds	r0, r0, r5
 800057e:	0c34      	lsrs	r4, r6, #16
 8000580:	1824      	adds	r4, r4, r0
 8000582:	b500      	push	{lr}
 8000584:	42a5      	cmp	r5, r4
 8000586:	d903      	bls.n	8000590 <__aeabi_lmul+0x34>
 8000588:	2080      	movs	r0, #128	; 0x80
 800058a:	0240      	lsls	r0, r0, #9
 800058c:	4680      	mov	r8, r0
 800058e:	4441      	add	r1, r8
 8000590:	0c25      	lsrs	r5, r4, #16
 8000592:	186d      	adds	r5, r5, r1
 8000594:	4661      	mov	r1, ip
 8000596:	4359      	muls	r1, r3
 8000598:	437a      	muls	r2, r7
 800059a:	0430      	lsls	r0, r6, #16
 800059c:	1949      	adds	r1, r1, r5
 800059e:	0424      	lsls	r4, r4, #16
 80005a0:	0c00      	lsrs	r0, r0, #16
 80005a2:	1820      	adds	r0, r4, r0
 80005a4:	1889      	adds	r1, r1, r2
 80005a6:	bc80      	pop	{r7}
 80005a8:	46b8      	mov	r8, r7
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005ac <__aeabi_f2uiz>:
 80005ac:	219e      	movs	r1, #158	; 0x9e
 80005ae:	b510      	push	{r4, lr}
 80005b0:	05c9      	lsls	r1, r1, #23
 80005b2:	1c04      	adds	r4, r0, #0
 80005b4:	f7ff ffa8 	bl	8000508 <__aeabi_fcmpge>
 80005b8:	2800      	cmp	r0, #0
 80005ba:	d103      	bne.n	80005c4 <__aeabi_f2uiz+0x18>
 80005bc:	1c20      	adds	r0, r4, #0
 80005be:	f000 ff21 	bl	8001404 <__aeabi_f2iz>
 80005c2:	bd10      	pop	{r4, pc}
 80005c4:	219e      	movs	r1, #158	; 0x9e
 80005c6:	1c20      	adds	r0, r4, #0
 80005c8:	05c9      	lsls	r1, r1, #23
 80005ca:	f000 fd53 	bl	8001074 <__aeabi_fsub>
 80005ce:	f000 ff19 	bl	8001404 <__aeabi_f2iz>
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	061b      	lsls	r3, r3, #24
 80005d6:	469c      	mov	ip, r3
 80005d8:	4460      	add	r0, ip
 80005da:	e7f2      	b.n	80005c2 <__aeabi_f2uiz+0x16>

080005dc <__udivmoddi4>:
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	4657      	mov	r7, sl
 80005e0:	464e      	mov	r6, r9
 80005e2:	4645      	mov	r5, r8
 80005e4:	46de      	mov	lr, fp
 80005e6:	b5e0      	push	{r5, r6, r7, lr}
 80005e8:	0004      	movs	r4, r0
 80005ea:	000d      	movs	r5, r1
 80005ec:	4692      	mov	sl, r2
 80005ee:	4699      	mov	r9, r3
 80005f0:	b083      	sub	sp, #12
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d830      	bhi.n	8000658 <__udivmoddi4+0x7c>
 80005f6:	d02d      	beq.n	8000654 <__udivmoddi4+0x78>
 80005f8:	4649      	mov	r1, r9
 80005fa:	4650      	mov	r0, sl
 80005fc:	f002 fe64 	bl	80032c8 <__clzdi2>
 8000600:	0029      	movs	r1, r5
 8000602:	0006      	movs	r6, r0
 8000604:	0020      	movs	r0, r4
 8000606:	f002 fe5f 	bl	80032c8 <__clzdi2>
 800060a:	1a33      	subs	r3, r6, r0
 800060c:	4698      	mov	r8, r3
 800060e:	3b20      	subs	r3, #32
 8000610:	469b      	mov	fp, r3
 8000612:	d433      	bmi.n	800067c <__udivmoddi4+0xa0>
 8000614:	465a      	mov	r2, fp
 8000616:	4653      	mov	r3, sl
 8000618:	4093      	lsls	r3, r2
 800061a:	4642      	mov	r2, r8
 800061c:	001f      	movs	r7, r3
 800061e:	4653      	mov	r3, sl
 8000620:	4093      	lsls	r3, r2
 8000622:	001e      	movs	r6, r3
 8000624:	42af      	cmp	r7, r5
 8000626:	d83a      	bhi.n	800069e <__udivmoddi4+0xc2>
 8000628:	42af      	cmp	r7, r5
 800062a:	d100      	bne.n	800062e <__udivmoddi4+0x52>
 800062c:	e078      	b.n	8000720 <__udivmoddi4+0x144>
 800062e:	465b      	mov	r3, fp
 8000630:	1ba4      	subs	r4, r4, r6
 8000632:	41bd      	sbcs	r5, r7
 8000634:	2b00      	cmp	r3, #0
 8000636:	da00      	bge.n	800063a <__udivmoddi4+0x5e>
 8000638:	e075      	b.n	8000726 <__udivmoddi4+0x14a>
 800063a:	2200      	movs	r2, #0
 800063c:	2300      	movs	r3, #0
 800063e:	9200      	str	r2, [sp, #0]
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2301      	movs	r3, #1
 8000644:	465a      	mov	r2, fp
 8000646:	4093      	lsls	r3, r2
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2301      	movs	r3, #1
 800064c:	4642      	mov	r2, r8
 800064e:	4093      	lsls	r3, r2
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	e028      	b.n	80006a6 <__udivmoddi4+0xca>
 8000654:	4282      	cmp	r2, r0
 8000656:	d9cf      	bls.n	80005f8 <__udivmoddi4+0x1c>
 8000658:	2200      	movs	r2, #0
 800065a:	2300      	movs	r3, #0
 800065c:	9200      	str	r2, [sp, #0]
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <__udivmoddi4+0x8e>
 8000666:	601c      	str	r4, [r3, #0]
 8000668:	605d      	str	r5, [r3, #4]
 800066a:	9800      	ldr	r0, [sp, #0]
 800066c:	9901      	ldr	r1, [sp, #4]
 800066e:	b003      	add	sp, #12
 8000670:	bcf0      	pop	{r4, r5, r6, r7}
 8000672:	46bb      	mov	fp, r7
 8000674:	46b2      	mov	sl, r6
 8000676:	46a9      	mov	r9, r5
 8000678:	46a0      	mov	r8, r4
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067c:	4642      	mov	r2, r8
 800067e:	2320      	movs	r3, #32
 8000680:	1a9b      	subs	r3, r3, r2
 8000682:	4652      	mov	r2, sl
 8000684:	40da      	lsrs	r2, r3
 8000686:	4641      	mov	r1, r8
 8000688:	0013      	movs	r3, r2
 800068a:	464a      	mov	r2, r9
 800068c:	408a      	lsls	r2, r1
 800068e:	0017      	movs	r7, r2
 8000690:	4642      	mov	r2, r8
 8000692:	431f      	orrs	r7, r3
 8000694:	4653      	mov	r3, sl
 8000696:	4093      	lsls	r3, r2
 8000698:	001e      	movs	r6, r3
 800069a:	42af      	cmp	r7, r5
 800069c:	d9c4      	bls.n	8000628 <__udivmoddi4+0x4c>
 800069e:	2200      	movs	r2, #0
 80006a0:	2300      	movs	r3, #0
 80006a2:	9200      	str	r2, [sp, #0]
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	4643      	mov	r3, r8
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0d9      	beq.n	8000660 <__udivmoddi4+0x84>
 80006ac:	07fb      	lsls	r3, r7, #31
 80006ae:	0872      	lsrs	r2, r6, #1
 80006b0:	431a      	orrs	r2, r3
 80006b2:	4646      	mov	r6, r8
 80006b4:	087b      	lsrs	r3, r7, #1
 80006b6:	e00e      	b.n	80006d6 <__udivmoddi4+0xfa>
 80006b8:	42ab      	cmp	r3, r5
 80006ba:	d101      	bne.n	80006c0 <__udivmoddi4+0xe4>
 80006bc:	42a2      	cmp	r2, r4
 80006be:	d80c      	bhi.n	80006da <__udivmoddi4+0xfe>
 80006c0:	1aa4      	subs	r4, r4, r2
 80006c2:	419d      	sbcs	r5, r3
 80006c4:	2001      	movs	r0, #1
 80006c6:	1924      	adds	r4, r4, r4
 80006c8:	416d      	adcs	r5, r5
 80006ca:	2100      	movs	r1, #0
 80006cc:	3e01      	subs	r6, #1
 80006ce:	1824      	adds	r4, r4, r0
 80006d0:	414d      	adcs	r5, r1
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	d006      	beq.n	80006e4 <__udivmoddi4+0x108>
 80006d6:	42ab      	cmp	r3, r5
 80006d8:	d9ee      	bls.n	80006b8 <__udivmoddi4+0xdc>
 80006da:	3e01      	subs	r6, #1
 80006dc:	1924      	adds	r4, r4, r4
 80006de:	416d      	adcs	r5, r5
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d1f8      	bne.n	80006d6 <__udivmoddi4+0xfa>
 80006e4:	9800      	ldr	r0, [sp, #0]
 80006e6:	9901      	ldr	r1, [sp, #4]
 80006e8:	465b      	mov	r3, fp
 80006ea:	1900      	adds	r0, r0, r4
 80006ec:	4169      	adcs	r1, r5
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db24      	blt.n	800073c <__udivmoddi4+0x160>
 80006f2:	002b      	movs	r3, r5
 80006f4:	465a      	mov	r2, fp
 80006f6:	4644      	mov	r4, r8
 80006f8:	40d3      	lsrs	r3, r2
 80006fa:	002a      	movs	r2, r5
 80006fc:	40e2      	lsrs	r2, r4
 80006fe:	001c      	movs	r4, r3
 8000700:	465b      	mov	r3, fp
 8000702:	0015      	movs	r5, r2
 8000704:	2b00      	cmp	r3, #0
 8000706:	db2a      	blt.n	800075e <__udivmoddi4+0x182>
 8000708:	0026      	movs	r6, r4
 800070a:	409e      	lsls	r6, r3
 800070c:	0033      	movs	r3, r6
 800070e:	0026      	movs	r6, r4
 8000710:	4647      	mov	r7, r8
 8000712:	40be      	lsls	r6, r7
 8000714:	0032      	movs	r2, r6
 8000716:	1a80      	subs	r0, r0, r2
 8000718:	4199      	sbcs	r1, r3
 800071a:	9000      	str	r0, [sp, #0]
 800071c:	9101      	str	r1, [sp, #4]
 800071e:	e79f      	b.n	8000660 <__udivmoddi4+0x84>
 8000720:	42a3      	cmp	r3, r4
 8000722:	d8bc      	bhi.n	800069e <__udivmoddi4+0xc2>
 8000724:	e783      	b.n	800062e <__udivmoddi4+0x52>
 8000726:	4642      	mov	r2, r8
 8000728:	2320      	movs	r3, #32
 800072a:	2100      	movs	r1, #0
 800072c:	1a9b      	subs	r3, r3, r2
 800072e:	2200      	movs	r2, #0
 8000730:	9100      	str	r1, [sp, #0]
 8000732:	9201      	str	r2, [sp, #4]
 8000734:	2201      	movs	r2, #1
 8000736:	40da      	lsrs	r2, r3
 8000738:	9201      	str	r2, [sp, #4]
 800073a:	e786      	b.n	800064a <__udivmoddi4+0x6e>
 800073c:	4642      	mov	r2, r8
 800073e:	2320      	movs	r3, #32
 8000740:	1a9b      	subs	r3, r3, r2
 8000742:	002a      	movs	r2, r5
 8000744:	4646      	mov	r6, r8
 8000746:	409a      	lsls	r2, r3
 8000748:	0023      	movs	r3, r4
 800074a:	40f3      	lsrs	r3, r6
 800074c:	4644      	mov	r4, r8
 800074e:	4313      	orrs	r3, r2
 8000750:	002a      	movs	r2, r5
 8000752:	40e2      	lsrs	r2, r4
 8000754:	001c      	movs	r4, r3
 8000756:	465b      	mov	r3, fp
 8000758:	0015      	movs	r5, r2
 800075a:	2b00      	cmp	r3, #0
 800075c:	dad4      	bge.n	8000708 <__udivmoddi4+0x12c>
 800075e:	4642      	mov	r2, r8
 8000760:	002f      	movs	r7, r5
 8000762:	2320      	movs	r3, #32
 8000764:	0026      	movs	r6, r4
 8000766:	4097      	lsls	r7, r2
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	40de      	lsrs	r6, r3
 800076c:	003b      	movs	r3, r7
 800076e:	4333      	orrs	r3, r6
 8000770:	e7cd      	b.n	800070e <__udivmoddi4+0x132>
 8000772:	46c0      	nop			; (mov r8, r8)

08000774 <__aeabi_fadd>:
 8000774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000776:	4646      	mov	r6, r8
 8000778:	46d6      	mov	lr, sl
 800077a:	464f      	mov	r7, r9
 800077c:	024d      	lsls	r5, r1, #9
 800077e:	0242      	lsls	r2, r0, #9
 8000780:	b5c0      	push	{r6, r7, lr}
 8000782:	0a52      	lsrs	r2, r2, #9
 8000784:	0a6e      	lsrs	r6, r5, #9
 8000786:	0047      	lsls	r7, r0, #1
 8000788:	46b0      	mov	r8, r6
 800078a:	0e3f      	lsrs	r7, r7, #24
 800078c:	004e      	lsls	r6, r1, #1
 800078e:	0fc4      	lsrs	r4, r0, #31
 8000790:	00d0      	lsls	r0, r2, #3
 8000792:	4694      	mov	ip, r2
 8000794:	003b      	movs	r3, r7
 8000796:	4682      	mov	sl, r0
 8000798:	0e36      	lsrs	r6, r6, #24
 800079a:	0fc9      	lsrs	r1, r1, #31
 800079c:	09ad      	lsrs	r5, r5, #6
 800079e:	428c      	cmp	r4, r1
 80007a0:	d06d      	beq.n	800087e <__aeabi_fadd+0x10a>
 80007a2:	1bb8      	subs	r0, r7, r6
 80007a4:	4681      	mov	r9, r0
 80007a6:	2800      	cmp	r0, #0
 80007a8:	dd4d      	ble.n	8000846 <__aeabi_fadd+0xd2>
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fadd+0x3c>
 80007ae:	e088      	b.n	80008c2 <__aeabi_fadd+0x14e>
 80007b0:	2fff      	cmp	r7, #255	; 0xff
 80007b2:	d05a      	beq.n	800086a <__aeabi_fadd+0xf6>
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	04db      	lsls	r3, r3, #19
 80007b8:	431d      	orrs	r5, r3
 80007ba:	464b      	mov	r3, r9
 80007bc:	2201      	movs	r2, #1
 80007be:	2b1b      	cmp	r3, #27
 80007c0:	dc0a      	bgt.n	80007d8 <__aeabi_fadd+0x64>
 80007c2:	002b      	movs	r3, r5
 80007c4:	464a      	mov	r2, r9
 80007c6:	4649      	mov	r1, r9
 80007c8:	40d3      	lsrs	r3, r2
 80007ca:	2220      	movs	r2, #32
 80007cc:	1a52      	subs	r2, r2, r1
 80007ce:	4095      	lsls	r5, r2
 80007d0:	002a      	movs	r2, r5
 80007d2:	1e55      	subs	r5, r2, #1
 80007d4:	41aa      	sbcs	r2, r5
 80007d6:	431a      	orrs	r2, r3
 80007d8:	4653      	mov	r3, sl
 80007da:	1a9a      	subs	r2, r3, r2
 80007dc:	0153      	lsls	r3, r2, #5
 80007de:	d400      	bmi.n	80007e2 <__aeabi_fadd+0x6e>
 80007e0:	e0b9      	b.n	8000956 <__aeabi_fadd+0x1e2>
 80007e2:	0192      	lsls	r2, r2, #6
 80007e4:	0996      	lsrs	r6, r2, #6
 80007e6:	0030      	movs	r0, r6
 80007e8:	f002 fd50 	bl	800328c <__clzsi2>
 80007ec:	3805      	subs	r0, #5
 80007ee:	4086      	lsls	r6, r0
 80007f0:	4287      	cmp	r7, r0
 80007f2:	dd00      	ble.n	80007f6 <__aeabi_fadd+0x82>
 80007f4:	e0d4      	b.n	80009a0 <__aeabi_fadd+0x22c>
 80007f6:	0033      	movs	r3, r6
 80007f8:	1bc7      	subs	r7, r0, r7
 80007fa:	2020      	movs	r0, #32
 80007fc:	3701      	adds	r7, #1
 80007fe:	40fb      	lsrs	r3, r7
 8000800:	1bc7      	subs	r7, r0, r7
 8000802:	40be      	lsls	r6, r7
 8000804:	0032      	movs	r2, r6
 8000806:	1e56      	subs	r6, r2, #1
 8000808:	41b2      	sbcs	r2, r6
 800080a:	2700      	movs	r7, #0
 800080c:	431a      	orrs	r2, r3
 800080e:	0753      	lsls	r3, r2, #29
 8000810:	d004      	beq.n	800081c <__aeabi_fadd+0xa8>
 8000812:	230f      	movs	r3, #15
 8000814:	4013      	ands	r3, r2
 8000816:	2b04      	cmp	r3, #4
 8000818:	d000      	beq.n	800081c <__aeabi_fadd+0xa8>
 800081a:	3204      	adds	r2, #4
 800081c:	0153      	lsls	r3, r2, #5
 800081e:	d400      	bmi.n	8000822 <__aeabi_fadd+0xae>
 8000820:	e09c      	b.n	800095c <__aeabi_fadd+0x1e8>
 8000822:	1c7b      	adds	r3, r7, #1
 8000824:	2ffe      	cmp	r7, #254	; 0xfe
 8000826:	d100      	bne.n	800082a <__aeabi_fadd+0xb6>
 8000828:	e09a      	b.n	8000960 <__aeabi_fadd+0x1ec>
 800082a:	0192      	lsls	r2, r2, #6
 800082c:	0a52      	lsrs	r2, r2, #9
 800082e:	4694      	mov	ip, r2
 8000830:	b2db      	uxtb	r3, r3
 8000832:	05d8      	lsls	r0, r3, #23
 8000834:	4663      	mov	r3, ip
 8000836:	07e4      	lsls	r4, r4, #31
 8000838:	4318      	orrs	r0, r3
 800083a:	4320      	orrs	r0, r4
 800083c:	bce0      	pop	{r5, r6, r7}
 800083e:	46ba      	mov	sl, r7
 8000840:	46b1      	mov	r9, r6
 8000842:	46a8      	mov	r8, r5
 8000844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000846:	2800      	cmp	r0, #0
 8000848:	d049      	beq.n	80008de <__aeabi_fadd+0x16a>
 800084a:	1bf3      	subs	r3, r6, r7
 800084c:	2f00      	cmp	r7, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_fadd+0xde>
 8000850:	e0b6      	b.n	80009c0 <__aeabi_fadd+0x24c>
 8000852:	4652      	mov	r2, sl
 8000854:	2a00      	cmp	r2, #0
 8000856:	d060      	beq.n	800091a <__aeabi_fadd+0x1a6>
 8000858:	3b01      	subs	r3, #1
 800085a:	2b00      	cmp	r3, #0
 800085c:	d100      	bne.n	8000860 <__aeabi_fadd+0xec>
 800085e:	e0fc      	b.n	8000a5a <__aeabi_fadd+0x2e6>
 8000860:	2eff      	cmp	r6, #255	; 0xff
 8000862:	d000      	beq.n	8000866 <__aeabi_fadd+0xf2>
 8000864:	e0b4      	b.n	80009d0 <__aeabi_fadd+0x25c>
 8000866:	000c      	movs	r4, r1
 8000868:	4642      	mov	r2, r8
 800086a:	2a00      	cmp	r2, #0
 800086c:	d078      	beq.n	8000960 <__aeabi_fadd+0x1ec>
 800086e:	2080      	movs	r0, #128	; 0x80
 8000870:	03c0      	lsls	r0, r0, #15
 8000872:	4310      	orrs	r0, r2
 8000874:	0242      	lsls	r2, r0, #9
 8000876:	0a53      	lsrs	r3, r2, #9
 8000878:	469c      	mov	ip, r3
 800087a:	23ff      	movs	r3, #255	; 0xff
 800087c:	e7d9      	b.n	8000832 <__aeabi_fadd+0xbe>
 800087e:	1bb9      	subs	r1, r7, r6
 8000880:	2900      	cmp	r1, #0
 8000882:	dd71      	ble.n	8000968 <__aeabi_fadd+0x1f4>
 8000884:	2e00      	cmp	r6, #0
 8000886:	d03f      	beq.n	8000908 <__aeabi_fadd+0x194>
 8000888:	2fff      	cmp	r7, #255	; 0xff
 800088a:	d0ee      	beq.n	800086a <__aeabi_fadd+0xf6>
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	04db      	lsls	r3, r3, #19
 8000890:	431d      	orrs	r5, r3
 8000892:	2201      	movs	r2, #1
 8000894:	291b      	cmp	r1, #27
 8000896:	dc07      	bgt.n	80008a8 <__aeabi_fadd+0x134>
 8000898:	002a      	movs	r2, r5
 800089a:	2320      	movs	r3, #32
 800089c:	40ca      	lsrs	r2, r1
 800089e:	1a59      	subs	r1, r3, r1
 80008a0:	408d      	lsls	r5, r1
 80008a2:	1e6b      	subs	r3, r5, #1
 80008a4:	419d      	sbcs	r5, r3
 80008a6:	432a      	orrs	r2, r5
 80008a8:	4452      	add	r2, sl
 80008aa:	0153      	lsls	r3, r2, #5
 80008ac:	d553      	bpl.n	8000956 <__aeabi_fadd+0x1e2>
 80008ae:	3701      	adds	r7, #1
 80008b0:	2fff      	cmp	r7, #255	; 0xff
 80008b2:	d055      	beq.n	8000960 <__aeabi_fadd+0x1ec>
 80008b4:	2301      	movs	r3, #1
 80008b6:	497b      	ldr	r1, [pc, #492]	; (8000aa4 <__aeabi_fadd+0x330>)
 80008b8:	4013      	ands	r3, r2
 80008ba:	0852      	lsrs	r2, r2, #1
 80008bc:	400a      	ands	r2, r1
 80008be:	431a      	orrs	r2, r3
 80008c0:	e7a5      	b.n	800080e <__aeabi_fadd+0x9a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d02c      	beq.n	8000920 <__aeabi_fadd+0x1ac>
 80008c6:	2301      	movs	r3, #1
 80008c8:	425b      	negs	r3, r3
 80008ca:	469c      	mov	ip, r3
 80008cc:	44e1      	add	r9, ip
 80008ce:	464b      	mov	r3, r9
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fadd+0x162>
 80008d4:	e0ad      	b.n	8000a32 <__aeabi_fadd+0x2be>
 80008d6:	2fff      	cmp	r7, #255	; 0xff
 80008d8:	d000      	beq.n	80008dc <__aeabi_fadd+0x168>
 80008da:	e76e      	b.n	80007ba <__aeabi_fadd+0x46>
 80008dc:	e7c5      	b.n	800086a <__aeabi_fadd+0xf6>
 80008de:	20fe      	movs	r0, #254	; 0xfe
 80008e0:	1c7e      	adds	r6, r7, #1
 80008e2:	4230      	tst	r0, r6
 80008e4:	d160      	bne.n	80009a8 <__aeabi_fadd+0x234>
 80008e6:	2f00      	cmp	r7, #0
 80008e8:	d000      	beq.n	80008ec <__aeabi_fadd+0x178>
 80008ea:	e093      	b.n	8000a14 <__aeabi_fadd+0x2a0>
 80008ec:	4652      	mov	r2, sl
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fadd+0x180>
 80008f2:	e0b6      	b.n	8000a62 <__aeabi_fadd+0x2ee>
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d09c      	beq.n	8000832 <__aeabi_fadd+0xbe>
 80008f8:	1b52      	subs	r2, r2, r5
 80008fa:	0150      	lsls	r0, r2, #5
 80008fc:	d400      	bmi.n	8000900 <__aeabi_fadd+0x18c>
 80008fe:	e0c3      	b.n	8000a88 <__aeabi_fadd+0x314>
 8000900:	4653      	mov	r3, sl
 8000902:	000c      	movs	r4, r1
 8000904:	1aea      	subs	r2, r5, r3
 8000906:	e782      	b.n	800080e <__aeabi_fadd+0x9a>
 8000908:	2d00      	cmp	r5, #0
 800090a:	d009      	beq.n	8000920 <__aeabi_fadd+0x1ac>
 800090c:	3901      	subs	r1, #1
 800090e:	2900      	cmp	r1, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_fadd+0x1a0>
 8000912:	e08b      	b.n	8000a2c <__aeabi_fadd+0x2b8>
 8000914:	2fff      	cmp	r7, #255	; 0xff
 8000916:	d1bc      	bne.n	8000892 <__aeabi_fadd+0x11e>
 8000918:	e7a7      	b.n	800086a <__aeabi_fadd+0xf6>
 800091a:	000c      	movs	r4, r1
 800091c:	4642      	mov	r2, r8
 800091e:	0037      	movs	r7, r6
 8000920:	2fff      	cmp	r7, #255	; 0xff
 8000922:	d0a2      	beq.n	800086a <__aeabi_fadd+0xf6>
 8000924:	0252      	lsls	r2, r2, #9
 8000926:	0a53      	lsrs	r3, r2, #9
 8000928:	469c      	mov	ip, r3
 800092a:	b2fb      	uxtb	r3, r7
 800092c:	e781      	b.n	8000832 <__aeabi_fadd+0xbe>
 800092e:	21fe      	movs	r1, #254	; 0xfe
 8000930:	3701      	adds	r7, #1
 8000932:	4239      	tst	r1, r7
 8000934:	d165      	bne.n	8000a02 <__aeabi_fadd+0x28e>
 8000936:	2b00      	cmp	r3, #0
 8000938:	d17e      	bne.n	8000a38 <__aeabi_fadd+0x2c4>
 800093a:	2800      	cmp	r0, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_fadd+0x1cc>
 800093e:	e0aa      	b.n	8000a96 <__aeabi_fadd+0x322>
 8000940:	2d00      	cmp	r5, #0
 8000942:	d100      	bne.n	8000946 <__aeabi_fadd+0x1d2>
 8000944:	e775      	b.n	8000832 <__aeabi_fadd+0xbe>
 8000946:	002a      	movs	r2, r5
 8000948:	4452      	add	r2, sl
 800094a:	2700      	movs	r7, #0
 800094c:	0153      	lsls	r3, r2, #5
 800094e:	d502      	bpl.n	8000956 <__aeabi_fadd+0x1e2>
 8000950:	4b55      	ldr	r3, [pc, #340]	; (8000aa8 <__aeabi_fadd+0x334>)
 8000952:	3701      	adds	r7, #1
 8000954:	401a      	ands	r2, r3
 8000956:	0753      	lsls	r3, r2, #29
 8000958:	d000      	beq.n	800095c <__aeabi_fadd+0x1e8>
 800095a:	e75a      	b.n	8000812 <__aeabi_fadd+0x9e>
 800095c:	08d2      	lsrs	r2, r2, #3
 800095e:	e7df      	b.n	8000920 <__aeabi_fadd+0x1ac>
 8000960:	2200      	movs	r2, #0
 8000962:	23ff      	movs	r3, #255	; 0xff
 8000964:	4694      	mov	ip, r2
 8000966:	e764      	b.n	8000832 <__aeabi_fadd+0xbe>
 8000968:	2900      	cmp	r1, #0
 800096a:	d0e0      	beq.n	800092e <__aeabi_fadd+0x1ba>
 800096c:	1bf3      	subs	r3, r6, r7
 800096e:	2f00      	cmp	r7, #0
 8000970:	d03e      	beq.n	80009f0 <__aeabi_fadd+0x27c>
 8000972:	2eff      	cmp	r6, #255	; 0xff
 8000974:	d100      	bne.n	8000978 <__aeabi_fadd+0x204>
 8000976:	e777      	b.n	8000868 <__aeabi_fadd+0xf4>
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	0001      	movs	r1, r0
 800097c:	04d2      	lsls	r2, r2, #19
 800097e:	4311      	orrs	r1, r2
 8000980:	468a      	mov	sl, r1
 8000982:	2201      	movs	r2, #1
 8000984:	2b1b      	cmp	r3, #27
 8000986:	dc08      	bgt.n	800099a <__aeabi_fadd+0x226>
 8000988:	4652      	mov	r2, sl
 800098a:	2120      	movs	r1, #32
 800098c:	4650      	mov	r0, sl
 800098e:	40da      	lsrs	r2, r3
 8000990:	1acb      	subs	r3, r1, r3
 8000992:	4098      	lsls	r0, r3
 8000994:	1e43      	subs	r3, r0, #1
 8000996:	4198      	sbcs	r0, r3
 8000998:	4302      	orrs	r2, r0
 800099a:	0037      	movs	r7, r6
 800099c:	1952      	adds	r2, r2, r5
 800099e:	e784      	b.n	80008aa <__aeabi_fadd+0x136>
 80009a0:	4a41      	ldr	r2, [pc, #260]	; (8000aa8 <__aeabi_fadd+0x334>)
 80009a2:	1a3f      	subs	r7, r7, r0
 80009a4:	4032      	ands	r2, r6
 80009a6:	e732      	b.n	800080e <__aeabi_fadd+0x9a>
 80009a8:	4653      	mov	r3, sl
 80009aa:	1b5e      	subs	r6, r3, r5
 80009ac:	0173      	lsls	r3, r6, #5
 80009ae:	d42d      	bmi.n	8000a0c <__aeabi_fadd+0x298>
 80009b0:	2e00      	cmp	r6, #0
 80009b2:	d000      	beq.n	80009b6 <__aeabi_fadd+0x242>
 80009b4:	e717      	b.n	80007e6 <__aeabi_fadd+0x72>
 80009b6:	2200      	movs	r2, #0
 80009b8:	2400      	movs	r4, #0
 80009ba:	2300      	movs	r3, #0
 80009bc:	4694      	mov	ip, r2
 80009be:	e738      	b.n	8000832 <__aeabi_fadd+0xbe>
 80009c0:	2eff      	cmp	r6, #255	; 0xff
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x252>
 80009c4:	e74f      	b.n	8000866 <__aeabi_fadd+0xf2>
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	4650      	mov	r0, sl
 80009ca:	04d2      	lsls	r2, r2, #19
 80009cc:	4310      	orrs	r0, r2
 80009ce:	4682      	mov	sl, r0
 80009d0:	2201      	movs	r2, #1
 80009d2:	2b1b      	cmp	r3, #27
 80009d4:	dc08      	bgt.n	80009e8 <__aeabi_fadd+0x274>
 80009d6:	4652      	mov	r2, sl
 80009d8:	2420      	movs	r4, #32
 80009da:	4650      	mov	r0, sl
 80009dc:	40da      	lsrs	r2, r3
 80009de:	1ae3      	subs	r3, r4, r3
 80009e0:	4098      	lsls	r0, r3
 80009e2:	1e43      	subs	r3, r0, #1
 80009e4:	4198      	sbcs	r0, r3
 80009e6:	4302      	orrs	r2, r0
 80009e8:	000c      	movs	r4, r1
 80009ea:	0037      	movs	r7, r6
 80009ec:	1aaa      	subs	r2, r5, r2
 80009ee:	e6f5      	b.n	80007dc <__aeabi_fadd+0x68>
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d093      	beq.n	800091c <__aeabi_fadd+0x1a8>
 80009f4:	3b01      	subs	r3, #1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d04f      	beq.n	8000a9a <__aeabi_fadd+0x326>
 80009fa:	2eff      	cmp	r6, #255	; 0xff
 80009fc:	d1c1      	bne.n	8000982 <__aeabi_fadd+0x20e>
 80009fe:	4642      	mov	r2, r8
 8000a00:	e733      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a02:	2fff      	cmp	r7, #255	; 0xff
 8000a04:	d0ac      	beq.n	8000960 <__aeabi_fadd+0x1ec>
 8000a06:	4455      	add	r5, sl
 8000a08:	086a      	lsrs	r2, r5, #1
 8000a0a:	e7a4      	b.n	8000956 <__aeabi_fadd+0x1e2>
 8000a0c:	4653      	mov	r3, sl
 8000a0e:	000c      	movs	r4, r1
 8000a10:	1aee      	subs	r6, r5, r3
 8000a12:	e6e8      	b.n	80007e6 <__aeabi_fadd+0x72>
 8000a14:	4653      	mov	r3, sl
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d128      	bne.n	8000a6c <__aeabi_fadd+0x2f8>
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d000      	beq.n	8000a20 <__aeabi_fadd+0x2ac>
 8000a1e:	e722      	b.n	8000866 <__aeabi_fadd+0xf2>
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	03db      	lsls	r3, r3, #15
 8000a24:	469c      	mov	ip, r3
 8000a26:	2400      	movs	r4, #0
 8000a28:	23ff      	movs	r3, #255	; 0xff
 8000a2a:	e702      	b.n	8000832 <__aeabi_fadd+0xbe>
 8000a2c:	002a      	movs	r2, r5
 8000a2e:	4452      	add	r2, sl
 8000a30:	e73b      	b.n	80008aa <__aeabi_fadd+0x136>
 8000a32:	4653      	mov	r3, sl
 8000a34:	1b5a      	subs	r2, r3, r5
 8000a36:	e6d1      	b.n	80007dc <__aeabi_fadd+0x68>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_fadd+0x2ca>
 8000a3c:	e714      	b.n	8000868 <__aeabi_fadd+0xf4>
 8000a3e:	2d00      	cmp	r5, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fadd+0x2d0>
 8000a42:	e712      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	03db      	lsls	r3, r3, #15
 8000a48:	421a      	tst	r2, r3
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_fadd+0x2da>
 8000a4c:	e70d      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a4e:	4641      	mov	r1, r8
 8000a50:	4219      	tst	r1, r3
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fadd+0x2e2>
 8000a54:	e709      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a56:	4642      	mov	r2, r8
 8000a58:	e707      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0037      	movs	r7, r6
 8000a5e:	1aaa      	subs	r2, r5, r2
 8000a60:	e6bc      	b.n	80007dc <__aeabi_fadd+0x68>
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	d013      	beq.n	8000a8e <__aeabi_fadd+0x31a>
 8000a66:	000c      	movs	r4, r1
 8000a68:	46c4      	mov	ip, r8
 8000a6a:	e6e2      	b.n	8000832 <__aeabi_fadd+0xbe>
 8000a6c:	2d00      	cmp	r5, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fadd+0x2fe>
 8000a70:	e6fb      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	03db      	lsls	r3, r3, #15
 8000a76:	421a      	tst	r2, r3
 8000a78:	d100      	bne.n	8000a7c <__aeabi_fadd+0x308>
 8000a7a:	e6f6      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	4218      	tst	r0, r3
 8000a80:	d000      	beq.n	8000a84 <__aeabi_fadd+0x310>
 8000a82:	e6f2      	b.n	800086a <__aeabi_fadd+0xf6>
 8000a84:	000c      	movs	r4, r1
 8000a86:	e6ef      	b.n	8000868 <__aeabi_fadd+0xf4>
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	d000      	beq.n	8000a8e <__aeabi_fadd+0x31a>
 8000a8c:	e763      	b.n	8000956 <__aeabi_fadd+0x1e2>
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2400      	movs	r4, #0
 8000a92:	4694      	mov	ip, r2
 8000a94:	e6cd      	b.n	8000832 <__aeabi_fadd+0xbe>
 8000a96:	46c4      	mov	ip, r8
 8000a98:	e6cb      	b.n	8000832 <__aeabi_fadd+0xbe>
 8000a9a:	002a      	movs	r2, r5
 8000a9c:	0037      	movs	r7, r6
 8000a9e:	4452      	add	r2, sl
 8000aa0:	e703      	b.n	80008aa <__aeabi_fadd+0x136>
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	7dffffff 	.word	0x7dffffff
 8000aa8:	fbffffff 	.word	0xfbffffff

08000aac <__aeabi_fdiv>:
 8000aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aae:	464f      	mov	r7, r9
 8000ab0:	4646      	mov	r6, r8
 8000ab2:	46d6      	mov	lr, sl
 8000ab4:	0245      	lsls	r5, r0, #9
 8000ab6:	b5c0      	push	{r6, r7, lr}
 8000ab8:	0047      	lsls	r7, r0, #1
 8000aba:	1c0c      	adds	r4, r1, #0
 8000abc:	0a6d      	lsrs	r5, r5, #9
 8000abe:	0e3f      	lsrs	r7, r7, #24
 8000ac0:	0fc6      	lsrs	r6, r0, #31
 8000ac2:	2f00      	cmp	r7, #0
 8000ac4:	d066      	beq.n	8000b94 <__aeabi_fdiv+0xe8>
 8000ac6:	2fff      	cmp	r7, #255	; 0xff
 8000ac8:	d06c      	beq.n	8000ba4 <__aeabi_fdiv+0xf8>
 8000aca:	2300      	movs	r3, #0
 8000acc:	00ea      	lsls	r2, r5, #3
 8000ace:	2580      	movs	r5, #128	; 0x80
 8000ad0:	4699      	mov	r9, r3
 8000ad2:	469a      	mov	sl, r3
 8000ad4:	04ed      	lsls	r5, r5, #19
 8000ad6:	4315      	orrs	r5, r2
 8000ad8:	3f7f      	subs	r7, #127	; 0x7f
 8000ada:	0260      	lsls	r0, r4, #9
 8000adc:	0061      	lsls	r1, r4, #1
 8000ade:	0a43      	lsrs	r3, r0, #9
 8000ae0:	4698      	mov	r8, r3
 8000ae2:	0e09      	lsrs	r1, r1, #24
 8000ae4:	0fe4      	lsrs	r4, r4, #31
 8000ae6:	2900      	cmp	r1, #0
 8000ae8:	d048      	beq.n	8000b7c <__aeabi_fdiv+0xd0>
 8000aea:	29ff      	cmp	r1, #255	; 0xff
 8000aec:	d010      	beq.n	8000b10 <__aeabi_fdiv+0x64>
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	00d8      	lsls	r0, r3, #3
 8000af2:	04d2      	lsls	r2, r2, #19
 8000af4:	4302      	orrs	r2, r0
 8000af6:	4690      	mov	r8, r2
 8000af8:	2000      	movs	r0, #0
 8000afa:	397f      	subs	r1, #127	; 0x7f
 8000afc:	464a      	mov	r2, r9
 8000afe:	0033      	movs	r3, r6
 8000b00:	1a7f      	subs	r7, r7, r1
 8000b02:	4302      	orrs	r2, r0
 8000b04:	496c      	ldr	r1, [pc, #432]	; (8000cb8 <__aeabi_fdiv+0x20c>)
 8000b06:	0092      	lsls	r2, r2, #2
 8000b08:	588a      	ldr	r2, [r1, r2]
 8000b0a:	4063      	eors	r3, r4
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4697      	mov	pc, r2
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d16d      	bne.n	8000bf0 <__aeabi_fdiv+0x144>
 8000b14:	2002      	movs	r0, #2
 8000b16:	3fff      	subs	r7, #255	; 0xff
 8000b18:	e033      	b.n	8000b82 <__aeabi_fdiv+0xd6>
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	0026      	movs	r6, r4
 8000b20:	4645      	mov	r5, r8
 8000b22:	4682      	mov	sl, r0
 8000b24:	4653      	mov	r3, sl
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fdiv+0x80>
 8000b2a:	e07f      	b.n	8000c2c <__aeabi_fdiv+0x180>
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_fdiv+0x86>
 8000b30:	e094      	b.n	8000c5c <__aeabi_fdiv+0x1b0>
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d017      	beq.n	8000b66 <__aeabi_fdiv+0xba>
 8000b36:	0038      	movs	r0, r7
 8000b38:	307f      	adds	r0, #127	; 0x7f
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	dd5f      	ble.n	8000bfe <__aeabi_fdiv+0x152>
 8000b3e:	076b      	lsls	r3, r5, #29
 8000b40:	d004      	beq.n	8000b4c <__aeabi_fdiv+0xa0>
 8000b42:	230f      	movs	r3, #15
 8000b44:	402b      	ands	r3, r5
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d000      	beq.n	8000b4c <__aeabi_fdiv+0xa0>
 8000b4a:	3504      	adds	r5, #4
 8000b4c:	012b      	lsls	r3, r5, #4
 8000b4e:	d503      	bpl.n	8000b58 <__aeabi_fdiv+0xac>
 8000b50:	0038      	movs	r0, r7
 8000b52:	4b5a      	ldr	r3, [pc, #360]	; (8000cbc <__aeabi_fdiv+0x210>)
 8000b54:	3080      	adds	r0, #128	; 0x80
 8000b56:	401d      	ands	r5, r3
 8000b58:	28fe      	cmp	r0, #254	; 0xfe
 8000b5a:	dc67      	bgt.n	8000c2c <__aeabi_fdiv+0x180>
 8000b5c:	01ad      	lsls	r5, r5, #6
 8000b5e:	0a6d      	lsrs	r5, r5, #9
 8000b60:	b2c0      	uxtb	r0, r0
 8000b62:	e002      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000b64:	001e      	movs	r6, r3
 8000b66:	2000      	movs	r0, #0
 8000b68:	2500      	movs	r5, #0
 8000b6a:	05c0      	lsls	r0, r0, #23
 8000b6c:	4328      	orrs	r0, r5
 8000b6e:	07f6      	lsls	r6, r6, #31
 8000b70:	4330      	orrs	r0, r6
 8000b72:	bce0      	pop	{r5, r6, r7}
 8000b74:	46ba      	mov	sl, r7
 8000b76:	46b1      	mov	r9, r6
 8000b78:	46a8      	mov	r8, r5
 8000b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d12b      	bne.n	8000bd8 <__aeabi_fdiv+0x12c>
 8000b80:	2001      	movs	r0, #1
 8000b82:	464a      	mov	r2, r9
 8000b84:	0033      	movs	r3, r6
 8000b86:	494e      	ldr	r1, [pc, #312]	; (8000cc0 <__aeabi_fdiv+0x214>)
 8000b88:	4302      	orrs	r2, r0
 8000b8a:	0092      	lsls	r2, r2, #2
 8000b8c:	588a      	ldr	r2, [r1, r2]
 8000b8e:	4063      	eors	r3, r4
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	4697      	mov	pc, r2
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d113      	bne.n	8000bc0 <__aeabi_fdiv+0x114>
 8000b98:	2304      	movs	r3, #4
 8000b9a:	4699      	mov	r9, r3
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	2700      	movs	r7, #0
 8000ba0:	469a      	mov	sl, r3
 8000ba2:	e79a      	b.n	8000ada <__aeabi_fdiv+0x2e>
 8000ba4:	2d00      	cmp	r5, #0
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_fdiv+0x108>
 8000ba8:	2308      	movs	r3, #8
 8000baa:	4699      	mov	r9, r3
 8000bac:	3b06      	subs	r3, #6
 8000bae:	27ff      	movs	r7, #255	; 0xff
 8000bb0:	469a      	mov	sl, r3
 8000bb2:	e792      	b.n	8000ada <__aeabi_fdiv+0x2e>
 8000bb4:	230c      	movs	r3, #12
 8000bb6:	4699      	mov	r9, r3
 8000bb8:	3b09      	subs	r3, #9
 8000bba:	27ff      	movs	r7, #255	; 0xff
 8000bbc:	469a      	mov	sl, r3
 8000bbe:	e78c      	b.n	8000ada <__aeabi_fdiv+0x2e>
 8000bc0:	0028      	movs	r0, r5
 8000bc2:	f002 fb63 	bl	800328c <__clzsi2>
 8000bc6:	2776      	movs	r7, #118	; 0x76
 8000bc8:	1f43      	subs	r3, r0, #5
 8000bca:	409d      	lsls	r5, r3
 8000bcc:	2300      	movs	r3, #0
 8000bce:	427f      	negs	r7, r7
 8000bd0:	4699      	mov	r9, r3
 8000bd2:	469a      	mov	sl, r3
 8000bd4:	1a3f      	subs	r7, r7, r0
 8000bd6:	e780      	b.n	8000ada <__aeabi_fdiv+0x2e>
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f002 fb57 	bl	800328c <__clzsi2>
 8000bde:	4642      	mov	r2, r8
 8000be0:	1f43      	subs	r3, r0, #5
 8000be2:	2176      	movs	r1, #118	; 0x76
 8000be4:	409a      	lsls	r2, r3
 8000be6:	4249      	negs	r1, r1
 8000be8:	1a09      	subs	r1, r1, r0
 8000bea:	4690      	mov	r8, r2
 8000bec:	2000      	movs	r0, #0
 8000bee:	e785      	b.n	8000afc <__aeabi_fdiv+0x50>
 8000bf0:	21ff      	movs	r1, #255	; 0xff
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	e782      	b.n	8000afc <__aeabi_fdiv+0x50>
 8000bf6:	001e      	movs	r6, r3
 8000bf8:	20ff      	movs	r0, #255	; 0xff
 8000bfa:	2500      	movs	r5, #0
 8000bfc:	e7b5      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	1a1b      	subs	r3, r3, r0
 8000c02:	2b1b      	cmp	r3, #27
 8000c04:	dcaf      	bgt.n	8000b66 <__aeabi_fdiv+0xba>
 8000c06:	379e      	adds	r7, #158	; 0x9e
 8000c08:	0029      	movs	r1, r5
 8000c0a:	40bd      	lsls	r5, r7
 8000c0c:	40d9      	lsrs	r1, r3
 8000c0e:	1e6a      	subs	r2, r5, #1
 8000c10:	4195      	sbcs	r5, r2
 8000c12:	430d      	orrs	r5, r1
 8000c14:	076b      	lsls	r3, r5, #29
 8000c16:	d004      	beq.n	8000c22 <__aeabi_fdiv+0x176>
 8000c18:	230f      	movs	r3, #15
 8000c1a:	402b      	ands	r3, r5
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d000      	beq.n	8000c22 <__aeabi_fdiv+0x176>
 8000c20:	3504      	adds	r5, #4
 8000c22:	016b      	lsls	r3, r5, #5
 8000c24:	d544      	bpl.n	8000cb0 <__aeabi_fdiv+0x204>
 8000c26:	2001      	movs	r0, #1
 8000c28:	2500      	movs	r5, #0
 8000c2a:	e79e      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000c2c:	20ff      	movs	r0, #255	; 0xff
 8000c2e:	2500      	movs	r5, #0
 8000c30:	e79b      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000c32:	2580      	movs	r5, #128	; 0x80
 8000c34:	2600      	movs	r6, #0
 8000c36:	20ff      	movs	r0, #255	; 0xff
 8000c38:	03ed      	lsls	r5, r5, #15
 8000c3a:	e796      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4698      	mov	r8, r3
 8000c40:	2080      	movs	r0, #128	; 0x80
 8000c42:	03c0      	lsls	r0, r0, #15
 8000c44:	4205      	tst	r5, r0
 8000c46:	d009      	beq.n	8000c5c <__aeabi_fdiv+0x1b0>
 8000c48:	4643      	mov	r3, r8
 8000c4a:	4203      	tst	r3, r0
 8000c4c:	d106      	bne.n	8000c5c <__aeabi_fdiv+0x1b0>
 8000c4e:	4645      	mov	r5, r8
 8000c50:	4305      	orrs	r5, r0
 8000c52:	026d      	lsls	r5, r5, #9
 8000c54:	0026      	movs	r6, r4
 8000c56:	20ff      	movs	r0, #255	; 0xff
 8000c58:	0a6d      	lsrs	r5, r5, #9
 8000c5a:	e786      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000c5c:	2080      	movs	r0, #128	; 0x80
 8000c5e:	03c0      	lsls	r0, r0, #15
 8000c60:	4305      	orrs	r5, r0
 8000c62:	026d      	lsls	r5, r5, #9
 8000c64:	20ff      	movs	r0, #255	; 0xff
 8000c66:	0a6d      	lsrs	r5, r5, #9
 8000c68:	e77f      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000c6a:	4641      	mov	r1, r8
 8000c6c:	016a      	lsls	r2, r5, #5
 8000c6e:	0148      	lsls	r0, r1, #5
 8000c70:	4282      	cmp	r2, r0
 8000c72:	d219      	bcs.n	8000ca8 <__aeabi_fdiv+0x1fc>
 8000c74:	211b      	movs	r1, #27
 8000c76:	2500      	movs	r5, #0
 8000c78:	3f01      	subs	r7, #1
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	0014      	movs	r4, r2
 8000c7e:	006d      	lsls	r5, r5, #1
 8000c80:	0052      	lsls	r2, r2, #1
 8000c82:	2c00      	cmp	r4, #0
 8000c84:	db01      	blt.n	8000c8a <__aeabi_fdiv+0x1de>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	d801      	bhi.n	8000c8e <__aeabi_fdiv+0x1e2>
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	4335      	orrs	r5, r6
 8000c8e:	3901      	subs	r1, #1
 8000c90:	2900      	cmp	r1, #0
 8000c92:	d1f3      	bne.n	8000c7c <__aeabi_fdiv+0x1d0>
 8000c94:	1e50      	subs	r0, r2, #1
 8000c96:	4182      	sbcs	r2, r0
 8000c98:	0038      	movs	r0, r7
 8000c9a:	307f      	adds	r0, #127	; 0x7f
 8000c9c:	001e      	movs	r6, r3
 8000c9e:	4315      	orrs	r5, r2
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	dd00      	ble.n	8000ca6 <__aeabi_fdiv+0x1fa>
 8000ca4:	e74b      	b.n	8000b3e <__aeabi_fdiv+0x92>
 8000ca6:	e7aa      	b.n	8000bfe <__aeabi_fdiv+0x152>
 8000ca8:	211a      	movs	r1, #26
 8000caa:	2501      	movs	r5, #1
 8000cac:	1a12      	subs	r2, r2, r0
 8000cae:	e7e4      	b.n	8000c7a <__aeabi_fdiv+0x1ce>
 8000cb0:	01ad      	lsls	r5, r5, #6
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	0a6d      	lsrs	r5, r5, #9
 8000cb6:	e758      	b.n	8000b6a <__aeabi_fdiv+0xbe>
 8000cb8:	0800e808 	.word	0x0800e808
 8000cbc:	f7ffffff 	.word	0xf7ffffff
 8000cc0:	0800e848 	.word	0x0800e848

08000cc4 <__eqsf2>:
 8000cc4:	b570      	push	{r4, r5, r6, lr}
 8000cc6:	0042      	lsls	r2, r0, #1
 8000cc8:	024e      	lsls	r6, r1, #9
 8000cca:	004c      	lsls	r4, r1, #1
 8000ccc:	0245      	lsls	r5, r0, #9
 8000cce:	0a6d      	lsrs	r5, r5, #9
 8000cd0:	0e12      	lsrs	r2, r2, #24
 8000cd2:	0fc3      	lsrs	r3, r0, #31
 8000cd4:	0a76      	lsrs	r6, r6, #9
 8000cd6:	0e24      	lsrs	r4, r4, #24
 8000cd8:	0fc9      	lsrs	r1, r1, #31
 8000cda:	2aff      	cmp	r2, #255	; 0xff
 8000cdc:	d00f      	beq.n	8000cfe <__eqsf2+0x3a>
 8000cde:	2cff      	cmp	r4, #255	; 0xff
 8000ce0:	d011      	beq.n	8000d06 <__eqsf2+0x42>
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	42a2      	cmp	r2, r4
 8000ce6:	d000      	beq.n	8000cea <__eqsf2+0x26>
 8000ce8:	bd70      	pop	{r4, r5, r6, pc}
 8000cea:	42b5      	cmp	r5, r6
 8000cec:	d1fc      	bne.n	8000ce8 <__eqsf2+0x24>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d00d      	beq.n	8000d0e <__eqsf2+0x4a>
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	d1f8      	bne.n	8000ce8 <__eqsf2+0x24>
 8000cf6:	0028      	movs	r0, r5
 8000cf8:	1e45      	subs	r5, r0, #1
 8000cfa:	41a8      	sbcs	r0, r5
 8000cfc:	e7f4      	b.n	8000ce8 <__eqsf2+0x24>
 8000cfe:	2001      	movs	r0, #1
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d1f1      	bne.n	8000ce8 <__eqsf2+0x24>
 8000d04:	e7eb      	b.n	8000cde <__eqsf2+0x1a>
 8000d06:	2001      	movs	r0, #1
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d1ed      	bne.n	8000ce8 <__eqsf2+0x24>
 8000d0c:	e7e9      	b.n	8000ce2 <__eqsf2+0x1e>
 8000d0e:	2000      	movs	r0, #0
 8000d10:	e7ea      	b.n	8000ce8 <__eqsf2+0x24>
 8000d12:	46c0      	nop			; (mov r8, r8)

08000d14 <__gesf2>:
 8000d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d16:	0042      	lsls	r2, r0, #1
 8000d18:	0246      	lsls	r6, r0, #9
 8000d1a:	024d      	lsls	r5, r1, #9
 8000d1c:	004c      	lsls	r4, r1, #1
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e12      	lsrs	r2, r2, #24
 8000d24:	0a6d      	lsrs	r5, r5, #9
 8000d26:	0e24      	lsrs	r4, r4, #24
 8000d28:	0fc8      	lsrs	r0, r1, #31
 8000d2a:	2aff      	cmp	r2, #255	; 0xff
 8000d2c:	d01f      	beq.n	8000d6e <__gesf2+0x5a>
 8000d2e:	2cff      	cmp	r4, #255	; 0xff
 8000d30:	d010      	beq.n	8000d54 <__gesf2+0x40>
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	d11f      	bne.n	8000d76 <__gesf2+0x62>
 8000d36:	4271      	negs	r1, r6
 8000d38:	4171      	adcs	r1, r6
 8000d3a:	2c00      	cmp	r4, #0
 8000d3c:	d101      	bne.n	8000d42 <__gesf2+0x2e>
 8000d3e:	2d00      	cmp	r5, #0
 8000d40:	d01e      	beq.n	8000d80 <__gesf2+0x6c>
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d10e      	bne.n	8000d64 <__gesf2+0x50>
 8000d46:	4283      	cmp	r3, r0
 8000d48:	d01e      	beq.n	8000d88 <__gesf2+0x74>
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	1e58      	subs	r0, r3, #1
 8000d4e:	4008      	ands	r0, r1
 8000d50:	3801      	subs	r0, #1
 8000d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d54:	2d00      	cmp	r5, #0
 8000d56:	d126      	bne.n	8000da6 <__gesf2+0x92>
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	d1f4      	bne.n	8000d46 <__gesf2+0x32>
 8000d5c:	4271      	negs	r1, r6
 8000d5e:	4171      	adcs	r1, r6
 8000d60:	2900      	cmp	r1, #0
 8000d62:	d0f0      	beq.n	8000d46 <__gesf2+0x32>
 8000d64:	2800      	cmp	r0, #0
 8000d66:	d1f4      	bne.n	8000d52 <__gesf2+0x3e>
 8000d68:	2001      	movs	r0, #1
 8000d6a:	4240      	negs	r0, r0
 8000d6c:	e7f1      	b.n	8000d52 <__gesf2+0x3e>
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d119      	bne.n	8000da6 <__gesf2+0x92>
 8000d72:	2cff      	cmp	r4, #255	; 0xff
 8000d74:	d0ee      	beq.n	8000d54 <__gesf2+0x40>
 8000d76:	2c00      	cmp	r4, #0
 8000d78:	d1e5      	bne.n	8000d46 <__gesf2+0x32>
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d1e3      	bne.n	8000d46 <__gesf2+0x32>
 8000d7e:	e7e4      	b.n	8000d4a <__gesf2+0x36>
 8000d80:	2000      	movs	r0, #0
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e5      	beq.n	8000d52 <__gesf2+0x3e>
 8000d86:	e7e0      	b.n	8000d4a <__gesf2+0x36>
 8000d88:	42a2      	cmp	r2, r4
 8000d8a:	dc05      	bgt.n	8000d98 <__gesf2+0x84>
 8000d8c:	dbea      	blt.n	8000d64 <__gesf2+0x50>
 8000d8e:	42ae      	cmp	r6, r5
 8000d90:	d802      	bhi.n	8000d98 <__gesf2+0x84>
 8000d92:	d3e7      	bcc.n	8000d64 <__gesf2+0x50>
 8000d94:	2000      	movs	r0, #0
 8000d96:	e7dc      	b.n	8000d52 <__gesf2+0x3e>
 8000d98:	4241      	negs	r1, r0
 8000d9a:	4141      	adcs	r1, r0
 8000d9c:	4248      	negs	r0, r1
 8000d9e:	2102      	movs	r1, #2
 8000da0:	4008      	ands	r0, r1
 8000da2:	3801      	subs	r0, #1
 8000da4:	e7d5      	b.n	8000d52 <__gesf2+0x3e>
 8000da6:	2002      	movs	r0, #2
 8000da8:	4240      	negs	r0, r0
 8000daa:	e7d2      	b.n	8000d52 <__gesf2+0x3e>

08000dac <__lesf2>:
 8000dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dae:	0042      	lsls	r2, r0, #1
 8000db0:	0246      	lsls	r6, r0, #9
 8000db2:	024d      	lsls	r5, r1, #9
 8000db4:	004c      	lsls	r4, r1, #1
 8000db6:	0fc3      	lsrs	r3, r0, #31
 8000db8:	0a76      	lsrs	r6, r6, #9
 8000dba:	0e12      	lsrs	r2, r2, #24
 8000dbc:	0a6d      	lsrs	r5, r5, #9
 8000dbe:	0e24      	lsrs	r4, r4, #24
 8000dc0:	0fc8      	lsrs	r0, r1, #31
 8000dc2:	2aff      	cmp	r2, #255	; 0xff
 8000dc4:	d00d      	beq.n	8000de2 <__lesf2+0x36>
 8000dc6:	2cff      	cmp	r4, #255	; 0xff
 8000dc8:	d00f      	beq.n	8000dea <__lesf2+0x3e>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	d123      	bne.n	8000e16 <__lesf2+0x6a>
 8000dce:	4271      	negs	r1, r6
 8000dd0:	4171      	adcs	r1, r6
 8000dd2:	2c00      	cmp	r4, #0
 8000dd4:	d10f      	bne.n	8000df6 <__lesf2+0x4a>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d10d      	bne.n	8000df6 <__lesf2+0x4a>
 8000dda:	2000      	movs	r0, #0
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d014      	beq.n	8000e0a <__lesf2+0x5e>
 8000de0:	e00d      	b.n	8000dfe <__lesf2+0x52>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d110      	bne.n	8000e08 <__lesf2+0x5c>
 8000de6:	2cff      	cmp	r4, #255	; 0xff
 8000de8:	d115      	bne.n	8000e16 <__lesf2+0x6a>
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d10c      	bne.n	8000e08 <__lesf2+0x5c>
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	d103      	bne.n	8000dfa <__lesf2+0x4e>
 8000df2:	4271      	negs	r1, r6
 8000df4:	4171      	adcs	r1, r6
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d108      	bne.n	8000e0c <__lesf2+0x60>
 8000dfa:	4283      	cmp	r3, r0
 8000dfc:	d010      	beq.n	8000e20 <__lesf2+0x74>
 8000dfe:	2102      	movs	r1, #2
 8000e00:	1e58      	subs	r0, r3, #1
 8000e02:	4008      	ands	r0, r1
 8000e04:	3801      	subs	r0, #1
 8000e06:	e000      	b.n	8000e0a <__lesf2+0x5e>
 8000e08:	2002      	movs	r0, #2
 8000e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	d1fc      	bne.n	8000e0a <__lesf2+0x5e>
 8000e10:	2001      	movs	r0, #1
 8000e12:	4240      	negs	r0, r0
 8000e14:	e7f9      	b.n	8000e0a <__lesf2+0x5e>
 8000e16:	2c00      	cmp	r4, #0
 8000e18:	d1ef      	bne.n	8000dfa <__lesf2+0x4e>
 8000e1a:	2d00      	cmp	r5, #0
 8000e1c:	d1ed      	bne.n	8000dfa <__lesf2+0x4e>
 8000e1e:	e7ee      	b.n	8000dfe <__lesf2+0x52>
 8000e20:	42a2      	cmp	r2, r4
 8000e22:	dc05      	bgt.n	8000e30 <__lesf2+0x84>
 8000e24:	dbf2      	blt.n	8000e0c <__lesf2+0x60>
 8000e26:	42ae      	cmp	r6, r5
 8000e28:	d802      	bhi.n	8000e30 <__lesf2+0x84>
 8000e2a:	d3ef      	bcc.n	8000e0c <__lesf2+0x60>
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	e7ec      	b.n	8000e0a <__lesf2+0x5e>
 8000e30:	4241      	negs	r1, r0
 8000e32:	4141      	adcs	r1, r0
 8000e34:	4248      	negs	r0, r1
 8000e36:	2102      	movs	r1, #2
 8000e38:	4008      	ands	r0, r1
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	e7e5      	b.n	8000e0a <__lesf2+0x5e>
 8000e3e:	46c0      	nop			; (mov r8, r8)

08000e40 <__aeabi_fmul>:
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	4657      	mov	r7, sl
 8000e44:	464e      	mov	r6, r9
 8000e46:	4645      	mov	r5, r8
 8000e48:	46de      	mov	lr, fp
 8000e4a:	0244      	lsls	r4, r0, #9
 8000e4c:	b5e0      	push	{r5, r6, r7, lr}
 8000e4e:	0045      	lsls	r5, r0, #1
 8000e50:	1c0f      	adds	r7, r1, #0
 8000e52:	0a64      	lsrs	r4, r4, #9
 8000e54:	0e2d      	lsrs	r5, r5, #24
 8000e56:	0fc6      	lsrs	r6, r0, #31
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d047      	beq.n	8000eec <__aeabi_fmul+0xac>
 8000e5c:	2dff      	cmp	r5, #255	; 0xff
 8000e5e:	d04d      	beq.n	8000efc <__aeabi_fmul+0xbc>
 8000e60:	2300      	movs	r3, #0
 8000e62:	2080      	movs	r0, #128	; 0x80
 8000e64:	469a      	mov	sl, r3
 8000e66:	469b      	mov	fp, r3
 8000e68:	00e4      	lsls	r4, r4, #3
 8000e6a:	04c0      	lsls	r0, r0, #19
 8000e6c:	4304      	orrs	r4, r0
 8000e6e:	3d7f      	subs	r5, #127	; 0x7f
 8000e70:	0278      	lsls	r0, r7, #9
 8000e72:	0a43      	lsrs	r3, r0, #9
 8000e74:	4699      	mov	r9, r3
 8000e76:	007a      	lsls	r2, r7, #1
 8000e78:	0ffb      	lsrs	r3, r7, #31
 8000e7a:	4698      	mov	r8, r3
 8000e7c:	0e12      	lsrs	r2, r2, #24
 8000e7e:	464b      	mov	r3, r9
 8000e80:	d044      	beq.n	8000f0c <__aeabi_fmul+0xcc>
 8000e82:	2aff      	cmp	r2, #255	; 0xff
 8000e84:	d011      	beq.n	8000eaa <__aeabi_fmul+0x6a>
 8000e86:	00d8      	lsls	r0, r3, #3
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	04db      	lsls	r3, r3, #19
 8000e8c:	4303      	orrs	r3, r0
 8000e8e:	4699      	mov	r9, r3
 8000e90:	2000      	movs	r0, #0
 8000e92:	3a7f      	subs	r2, #127	; 0x7f
 8000e94:	18ad      	adds	r5, r5, r2
 8000e96:	4647      	mov	r7, r8
 8000e98:	4653      	mov	r3, sl
 8000e9a:	4077      	eors	r7, r6
 8000e9c:	1c69      	adds	r1, r5, #1
 8000e9e:	2b0f      	cmp	r3, #15
 8000ea0:	d83f      	bhi.n	8000f22 <__aeabi_fmul+0xe2>
 8000ea2:	4a72      	ldr	r2, [pc, #456]	; (800106c <__aeabi_fmul+0x22c>)
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	58d3      	ldr	r3, [r2, r3]
 8000ea8:	469f      	mov	pc, r3
 8000eaa:	35ff      	adds	r5, #255	; 0xff
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d000      	beq.n	8000eb2 <__aeabi_fmul+0x72>
 8000eb0:	e079      	b.n	8000fa6 <__aeabi_fmul+0x166>
 8000eb2:	4652      	mov	r2, sl
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	4692      	mov	sl, r2
 8000eba:	2002      	movs	r0, #2
 8000ebc:	e7eb      	b.n	8000e96 <__aeabi_fmul+0x56>
 8000ebe:	4647      	mov	r7, r8
 8000ec0:	464c      	mov	r4, r9
 8000ec2:	4683      	mov	fp, r0
 8000ec4:	465b      	mov	r3, fp
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d028      	beq.n	8000f1c <__aeabi_fmul+0xdc>
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fmul+0x90>
 8000ece:	e0c6      	b.n	800105e <__aeabi_fmul+0x21e>
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d14f      	bne.n	8000f74 <__aeabi_fmul+0x134>
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	05c0      	lsls	r0, r0, #23
 8000eda:	07ff      	lsls	r7, r7, #31
 8000edc:	4320      	orrs	r0, r4
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	bcf0      	pop	{r4, r5, r6, r7}
 8000ee2:	46bb      	mov	fp, r7
 8000ee4:	46b2      	mov	sl, r6
 8000ee6:	46a9      	mov	r9, r5
 8000ee8:	46a0      	mov	r8, r4
 8000eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eec:	2c00      	cmp	r4, #0
 8000eee:	d171      	bne.n	8000fd4 <__aeabi_fmul+0x194>
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	469a      	mov	sl, r3
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	2500      	movs	r5, #0
 8000ef8:	469b      	mov	fp, r3
 8000efa:	e7b9      	b.n	8000e70 <__aeabi_fmul+0x30>
 8000efc:	2c00      	cmp	r4, #0
 8000efe:	d163      	bne.n	8000fc8 <__aeabi_fmul+0x188>
 8000f00:	2308      	movs	r3, #8
 8000f02:	469a      	mov	sl, r3
 8000f04:	3b06      	subs	r3, #6
 8000f06:	25ff      	movs	r5, #255	; 0xff
 8000f08:	469b      	mov	fp, r3
 8000f0a:	e7b1      	b.n	8000e70 <__aeabi_fmul+0x30>
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d150      	bne.n	8000fb2 <__aeabi_fmul+0x172>
 8000f10:	4652      	mov	r2, sl
 8000f12:	3301      	adds	r3, #1
 8000f14:	431a      	orrs	r2, r3
 8000f16:	4692      	mov	sl, r2
 8000f18:	2001      	movs	r0, #1
 8000f1a:	e7bc      	b.n	8000e96 <__aeabi_fmul+0x56>
 8000f1c:	20ff      	movs	r0, #255	; 0xff
 8000f1e:	2400      	movs	r4, #0
 8000f20:	e7da      	b.n	8000ed8 <__aeabi_fmul+0x98>
 8000f22:	4648      	mov	r0, r9
 8000f24:	0c26      	lsrs	r6, r4, #16
 8000f26:	0424      	lsls	r4, r4, #16
 8000f28:	0c22      	lsrs	r2, r4, #16
 8000f2a:	0404      	lsls	r4, r0, #16
 8000f2c:	0c24      	lsrs	r4, r4, #16
 8000f2e:	464b      	mov	r3, r9
 8000f30:	0020      	movs	r0, r4
 8000f32:	0c1b      	lsrs	r3, r3, #16
 8000f34:	4350      	muls	r0, r2
 8000f36:	4374      	muls	r4, r6
 8000f38:	435a      	muls	r2, r3
 8000f3a:	435e      	muls	r6, r3
 8000f3c:	1912      	adds	r2, r2, r4
 8000f3e:	0c03      	lsrs	r3, r0, #16
 8000f40:	189b      	adds	r3, r3, r2
 8000f42:	429c      	cmp	r4, r3
 8000f44:	d903      	bls.n	8000f4e <__aeabi_fmul+0x10e>
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	0252      	lsls	r2, r2, #9
 8000f4a:	4694      	mov	ip, r2
 8000f4c:	4466      	add	r6, ip
 8000f4e:	0400      	lsls	r0, r0, #16
 8000f50:	041a      	lsls	r2, r3, #16
 8000f52:	0c00      	lsrs	r0, r0, #16
 8000f54:	1812      	adds	r2, r2, r0
 8000f56:	0194      	lsls	r4, r2, #6
 8000f58:	1e60      	subs	r0, r4, #1
 8000f5a:	4184      	sbcs	r4, r0
 8000f5c:	0c1b      	lsrs	r3, r3, #16
 8000f5e:	0e92      	lsrs	r2, r2, #26
 8000f60:	199b      	adds	r3, r3, r6
 8000f62:	4314      	orrs	r4, r2
 8000f64:	019b      	lsls	r3, r3, #6
 8000f66:	431c      	orrs	r4, r3
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	d572      	bpl.n	8001052 <__aeabi_fmul+0x212>
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	0863      	lsrs	r3, r4, #1
 8000f70:	4004      	ands	r4, r0
 8000f72:	431c      	orrs	r4, r3
 8000f74:	0008      	movs	r0, r1
 8000f76:	307f      	adds	r0, #127	; 0x7f
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	dd3c      	ble.n	8000ff6 <__aeabi_fmul+0x1b6>
 8000f7c:	0763      	lsls	r3, r4, #29
 8000f7e:	d004      	beq.n	8000f8a <__aeabi_fmul+0x14a>
 8000f80:	230f      	movs	r3, #15
 8000f82:	4023      	ands	r3, r4
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d000      	beq.n	8000f8a <__aeabi_fmul+0x14a>
 8000f88:	3404      	adds	r4, #4
 8000f8a:	0123      	lsls	r3, r4, #4
 8000f8c:	d503      	bpl.n	8000f96 <__aeabi_fmul+0x156>
 8000f8e:	3180      	adds	r1, #128	; 0x80
 8000f90:	0008      	movs	r0, r1
 8000f92:	4b37      	ldr	r3, [pc, #220]	; (8001070 <__aeabi_fmul+0x230>)
 8000f94:	401c      	ands	r4, r3
 8000f96:	28fe      	cmp	r0, #254	; 0xfe
 8000f98:	dcc0      	bgt.n	8000f1c <__aeabi_fmul+0xdc>
 8000f9a:	01a4      	lsls	r4, r4, #6
 8000f9c:	0a64      	lsrs	r4, r4, #9
 8000f9e:	b2c0      	uxtb	r0, r0
 8000fa0:	e79a      	b.n	8000ed8 <__aeabi_fmul+0x98>
 8000fa2:	0037      	movs	r7, r6
 8000fa4:	e78e      	b.n	8000ec4 <__aeabi_fmul+0x84>
 8000fa6:	4652      	mov	r2, sl
 8000fa8:	2303      	movs	r3, #3
 8000faa:	431a      	orrs	r2, r3
 8000fac:	4692      	mov	sl, r2
 8000fae:	2003      	movs	r0, #3
 8000fb0:	e771      	b.n	8000e96 <__aeabi_fmul+0x56>
 8000fb2:	4648      	mov	r0, r9
 8000fb4:	f002 f96a 	bl	800328c <__clzsi2>
 8000fb8:	464a      	mov	r2, r9
 8000fba:	1f43      	subs	r3, r0, #5
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	1a2d      	subs	r5, r5, r0
 8000fc0:	4691      	mov	r9, r2
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	3d76      	subs	r5, #118	; 0x76
 8000fc6:	e766      	b.n	8000e96 <__aeabi_fmul+0x56>
 8000fc8:	230c      	movs	r3, #12
 8000fca:	469a      	mov	sl, r3
 8000fcc:	3b09      	subs	r3, #9
 8000fce:	25ff      	movs	r5, #255	; 0xff
 8000fd0:	469b      	mov	fp, r3
 8000fd2:	e74d      	b.n	8000e70 <__aeabi_fmul+0x30>
 8000fd4:	0020      	movs	r0, r4
 8000fd6:	f002 f959 	bl	800328c <__clzsi2>
 8000fda:	2576      	movs	r5, #118	; 0x76
 8000fdc:	1f43      	subs	r3, r0, #5
 8000fde:	409c      	lsls	r4, r3
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	426d      	negs	r5, r5
 8000fe4:	469a      	mov	sl, r3
 8000fe6:	469b      	mov	fp, r3
 8000fe8:	1a2d      	subs	r5, r5, r0
 8000fea:	e741      	b.n	8000e70 <__aeabi_fmul+0x30>
 8000fec:	2480      	movs	r4, #128	; 0x80
 8000fee:	2700      	movs	r7, #0
 8000ff0:	20ff      	movs	r0, #255	; 0xff
 8000ff2:	03e4      	lsls	r4, r4, #15
 8000ff4:	e770      	b.n	8000ed8 <__aeabi_fmul+0x98>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	1a1b      	subs	r3, r3, r0
 8000ffa:	2b1b      	cmp	r3, #27
 8000ffc:	dd00      	ble.n	8001000 <__aeabi_fmul+0x1c0>
 8000ffe:	e769      	b.n	8000ed4 <__aeabi_fmul+0x94>
 8001000:	319e      	adds	r1, #158	; 0x9e
 8001002:	0020      	movs	r0, r4
 8001004:	408c      	lsls	r4, r1
 8001006:	40d8      	lsrs	r0, r3
 8001008:	1e63      	subs	r3, r4, #1
 800100a:	419c      	sbcs	r4, r3
 800100c:	4304      	orrs	r4, r0
 800100e:	0763      	lsls	r3, r4, #29
 8001010:	d004      	beq.n	800101c <__aeabi_fmul+0x1dc>
 8001012:	230f      	movs	r3, #15
 8001014:	4023      	ands	r3, r4
 8001016:	2b04      	cmp	r3, #4
 8001018:	d000      	beq.n	800101c <__aeabi_fmul+0x1dc>
 800101a:	3404      	adds	r4, #4
 800101c:	0163      	lsls	r3, r4, #5
 800101e:	d51a      	bpl.n	8001056 <__aeabi_fmul+0x216>
 8001020:	2001      	movs	r0, #1
 8001022:	2400      	movs	r4, #0
 8001024:	e758      	b.n	8000ed8 <__aeabi_fmul+0x98>
 8001026:	2080      	movs	r0, #128	; 0x80
 8001028:	03c0      	lsls	r0, r0, #15
 800102a:	4204      	tst	r4, r0
 800102c:	d009      	beq.n	8001042 <__aeabi_fmul+0x202>
 800102e:	464b      	mov	r3, r9
 8001030:	4203      	tst	r3, r0
 8001032:	d106      	bne.n	8001042 <__aeabi_fmul+0x202>
 8001034:	464c      	mov	r4, r9
 8001036:	4304      	orrs	r4, r0
 8001038:	0264      	lsls	r4, r4, #9
 800103a:	4647      	mov	r7, r8
 800103c:	20ff      	movs	r0, #255	; 0xff
 800103e:	0a64      	lsrs	r4, r4, #9
 8001040:	e74a      	b.n	8000ed8 <__aeabi_fmul+0x98>
 8001042:	2080      	movs	r0, #128	; 0x80
 8001044:	03c0      	lsls	r0, r0, #15
 8001046:	4304      	orrs	r4, r0
 8001048:	0264      	lsls	r4, r4, #9
 800104a:	0037      	movs	r7, r6
 800104c:	20ff      	movs	r0, #255	; 0xff
 800104e:	0a64      	lsrs	r4, r4, #9
 8001050:	e742      	b.n	8000ed8 <__aeabi_fmul+0x98>
 8001052:	0029      	movs	r1, r5
 8001054:	e78e      	b.n	8000f74 <__aeabi_fmul+0x134>
 8001056:	01a4      	lsls	r4, r4, #6
 8001058:	2000      	movs	r0, #0
 800105a:	0a64      	lsrs	r4, r4, #9
 800105c:	e73c      	b.n	8000ed8 <__aeabi_fmul+0x98>
 800105e:	2080      	movs	r0, #128	; 0x80
 8001060:	03c0      	lsls	r0, r0, #15
 8001062:	4304      	orrs	r4, r0
 8001064:	0264      	lsls	r4, r4, #9
 8001066:	20ff      	movs	r0, #255	; 0xff
 8001068:	0a64      	lsrs	r4, r4, #9
 800106a:	e735      	b.n	8000ed8 <__aeabi_fmul+0x98>
 800106c:	0800e888 	.word	0x0800e888
 8001070:	f7ffffff 	.word	0xf7ffffff

08001074 <__aeabi_fsub>:
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	4646      	mov	r6, r8
 8001078:	46d6      	mov	lr, sl
 800107a:	464f      	mov	r7, r9
 800107c:	0243      	lsls	r3, r0, #9
 800107e:	0a5b      	lsrs	r3, r3, #9
 8001080:	00da      	lsls	r2, r3, #3
 8001082:	4694      	mov	ip, r2
 8001084:	024a      	lsls	r2, r1, #9
 8001086:	b5c0      	push	{r6, r7, lr}
 8001088:	0044      	lsls	r4, r0, #1
 800108a:	0a56      	lsrs	r6, r2, #9
 800108c:	1c05      	adds	r5, r0, #0
 800108e:	46b0      	mov	r8, r6
 8001090:	0e24      	lsrs	r4, r4, #24
 8001092:	004e      	lsls	r6, r1, #1
 8001094:	0992      	lsrs	r2, r2, #6
 8001096:	001f      	movs	r7, r3
 8001098:	0020      	movs	r0, r4
 800109a:	4692      	mov	sl, r2
 800109c:	0fed      	lsrs	r5, r5, #31
 800109e:	0e36      	lsrs	r6, r6, #24
 80010a0:	0fc9      	lsrs	r1, r1, #31
 80010a2:	2eff      	cmp	r6, #255	; 0xff
 80010a4:	d100      	bne.n	80010a8 <__aeabi_fsub+0x34>
 80010a6:	e07f      	b.n	80011a8 <__aeabi_fsub+0x134>
 80010a8:	2201      	movs	r2, #1
 80010aa:	4051      	eors	r1, r2
 80010ac:	428d      	cmp	r5, r1
 80010ae:	d051      	beq.n	8001154 <__aeabi_fsub+0xe0>
 80010b0:	1ba2      	subs	r2, r4, r6
 80010b2:	4691      	mov	r9, r2
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	dc00      	bgt.n	80010ba <__aeabi_fsub+0x46>
 80010b8:	e07e      	b.n	80011b8 <__aeabi_fsub+0x144>
 80010ba:	2e00      	cmp	r6, #0
 80010bc:	d100      	bne.n	80010c0 <__aeabi_fsub+0x4c>
 80010be:	e099      	b.n	80011f4 <__aeabi_fsub+0x180>
 80010c0:	2cff      	cmp	r4, #255	; 0xff
 80010c2:	d100      	bne.n	80010c6 <__aeabi_fsub+0x52>
 80010c4:	e08c      	b.n	80011e0 <__aeabi_fsub+0x16c>
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	4652      	mov	r2, sl
 80010ca:	04db      	lsls	r3, r3, #19
 80010cc:	431a      	orrs	r2, r3
 80010ce:	4692      	mov	sl, r2
 80010d0:	464a      	mov	r2, r9
 80010d2:	2301      	movs	r3, #1
 80010d4:	2a1b      	cmp	r2, #27
 80010d6:	dc08      	bgt.n	80010ea <__aeabi_fsub+0x76>
 80010d8:	4653      	mov	r3, sl
 80010da:	2120      	movs	r1, #32
 80010dc:	40d3      	lsrs	r3, r2
 80010de:	1a89      	subs	r1, r1, r2
 80010e0:	4652      	mov	r2, sl
 80010e2:	408a      	lsls	r2, r1
 80010e4:	1e51      	subs	r1, r2, #1
 80010e6:	418a      	sbcs	r2, r1
 80010e8:	4313      	orrs	r3, r2
 80010ea:	4662      	mov	r2, ip
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	015a      	lsls	r2, r3, #5
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_fsub+0x80>
 80010f2:	e0f3      	b.n	80012dc <__aeabi_fsub+0x268>
 80010f4:	019b      	lsls	r3, r3, #6
 80010f6:	099e      	lsrs	r6, r3, #6
 80010f8:	0030      	movs	r0, r6
 80010fa:	f002 f8c7 	bl	800328c <__clzsi2>
 80010fe:	3805      	subs	r0, #5
 8001100:	4086      	lsls	r6, r0
 8001102:	4284      	cmp	r4, r0
 8001104:	dd00      	ble.n	8001108 <__aeabi_fsub+0x94>
 8001106:	e0f7      	b.n	80012f8 <__aeabi_fsub+0x284>
 8001108:	0032      	movs	r2, r6
 800110a:	1b04      	subs	r4, r0, r4
 800110c:	2020      	movs	r0, #32
 800110e:	3401      	adds	r4, #1
 8001110:	40e2      	lsrs	r2, r4
 8001112:	1b04      	subs	r4, r0, r4
 8001114:	40a6      	lsls	r6, r4
 8001116:	0033      	movs	r3, r6
 8001118:	1e5e      	subs	r6, r3, #1
 800111a:	41b3      	sbcs	r3, r6
 800111c:	2400      	movs	r4, #0
 800111e:	4313      	orrs	r3, r2
 8001120:	075a      	lsls	r2, r3, #29
 8001122:	d004      	beq.n	800112e <__aeabi_fsub+0xba>
 8001124:	220f      	movs	r2, #15
 8001126:	401a      	ands	r2, r3
 8001128:	2a04      	cmp	r2, #4
 800112a:	d000      	beq.n	800112e <__aeabi_fsub+0xba>
 800112c:	3304      	adds	r3, #4
 800112e:	015a      	lsls	r2, r3, #5
 8001130:	d400      	bmi.n	8001134 <__aeabi_fsub+0xc0>
 8001132:	e0d6      	b.n	80012e2 <__aeabi_fsub+0x26e>
 8001134:	1c62      	adds	r2, r4, #1
 8001136:	2cfe      	cmp	r4, #254	; 0xfe
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0xc8>
 800113a:	e0da      	b.n	80012f2 <__aeabi_fsub+0x27e>
 800113c:	019b      	lsls	r3, r3, #6
 800113e:	0a5f      	lsrs	r7, r3, #9
 8001140:	b2d0      	uxtb	r0, r2
 8001142:	05c0      	lsls	r0, r0, #23
 8001144:	4338      	orrs	r0, r7
 8001146:	07ed      	lsls	r5, r5, #31
 8001148:	4328      	orrs	r0, r5
 800114a:	bce0      	pop	{r5, r6, r7}
 800114c:	46ba      	mov	sl, r7
 800114e:	46b1      	mov	r9, r6
 8001150:	46a8      	mov	r8, r5
 8001152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001154:	1ba2      	subs	r2, r4, r6
 8001156:	4691      	mov	r9, r2
 8001158:	2a00      	cmp	r2, #0
 800115a:	dd63      	ble.n	8001224 <__aeabi_fsub+0x1b0>
 800115c:	2e00      	cmp	r6, #0
 800115e:	d100      	bne.n	8001162 <__aeabi_fsub+0xee>
 8001160:	e099      	b.n	8001296 <__aeabi_fsub+0x222>
 8001162:	2cff      	cmp	r4, #255	; 0xff
 8001164:	d03c      	beq.n	80011e0 <__aeabi_fsub+0x16c>
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	4652      	mov	r2, sl
 800116a:	04db      	lsls	r3, r3, #19
 800116c:	431a      	orrs	r2, r3
 800116e:	4692      	mov	sl, r2
 8001170:	464a      	mov	r2, r9
 8001172:	2301      	movs	r3, #1
 8001174:	2a1b      	cmp	r2, #27
 8001176:	dc08      	bgt.n	800118a <__aeabi_fsub+0x116>
 8001178:	4653      	mov	r3, sl
 800117a:	2120      	movs	r1, #32
 800117c:	40d3      	lsrs	r3, r2
 800117e:	1a89      	subs	r1, r1, r2
 8001180:	4652      	mov	r2, sl
 8001182:	408a      	lsls	r2, r1
 8001184:	1e51      	subs	r1, r2, #1
 8001186:	418a      	sbcs	r2, r1
 8001188:	4313      	orrs	r3, r2
 800118a:	4463      	add	r3, ip
 800118c:	015a      	lsls	r2, r3, #5
 800118e:	d400      	bmi.n	8001192 <__aeabi_fsub+0x11e>
 8001190:	e0a4      	b.n	80012dc <__aeabi_fsub+0x268>
 8001192:	3401      	adds	r4, #1
 8001194:	2cff      	cmp	r4, #255	; 0xff
 8001196:	d100      	bne.n	800119a <__aeabi_fsub+0x126>
 8001198:	e0ab      	b.n	80012f2 <__aeabi_fsub+0x27e>
 800119a:	2201      	movs	r2, #1
 800119c:	4997      	ldr	r1, [pc, #604]	; (80013fc <__aeabi_fsub+0x388>)
 800119e:	401a      	ands	r2, r3
 80011a0:	085b      	lsrs	r3, r3, #1
 80011a2:	400b      	ands	r3, r1
 80011a4:	4313      	orrs	r3, r2
 80011a6:	e7bb      	b.n	8001120 <__aeabi_fsub+0xac>
 80011a8:	2a00      	cmp	r2, #0
 80011aa:	d032      	beq.n	8001212 <__aeabi_fsub+0x19e>
 80011ac:	428d      	cmp	r5, r1
 80011ae:	d035      	beq.n	800121c <__aeabi_fsub+0x1a8>
 80011b0:	22ff      	movs	r2, #255	; 0xff
 80011b2:	4252      	negs	r2, r2
 80011b4:	4691      	mov	r9, r2
 80011b6:	44a1      	add	r9, r4
 80011b8:	464a      	mov	r2, r9
 80011ba:	2a00      	cmp	r2, #0
 80011bc:	d051      	beq.n	8001262 <__aeabi_fsub+0x1ee>
 80011be:	1b30      	subs	r0, r6, r4
 80011c0:	2c00      	cmp	r4, #0
 80011c2:	d000      	beq.n	80011c6 <__aeabi_fsub+0x152>
 80011c4:	e09c      	b.n	8001300 <__aeabi_fsub+0x28c>
 80011c6:	4663      	mov	r3, ip
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d100      	bne.n	80011ce <__aeabi_fsub+0x15a>
 80011cc:	e0df      	b.n	800138e <__aeabi_fsub+0x31a>
 80011ce:	3801      	subs	r0, #1
 80011d0:	2800      	cmp	r0, #0
 80011d2:	d100      	bne.n	80011d6 <__aeabi_fsub+0x162>
 80011d4:	e0f7      	b.n	80013c6 <__aeabi_fsub+0x352>
 80011d6:	2eff      	cmp	r6, #255	; 0xff
 80011d8:	d000      	beq.n	80011dc <__aeabi_fsub+0x168>
 80011da:	e099      	b.n	8001310 <__aeabi_fsub+0x29c>
 80011dc:	000d      	movs	r5, r1
 80011de:	4643      	mov	r3, r8
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_fsub+0x172>
 80011e4:	e085      	b.n	80012f2 <__aeabi_fsub+0x27e>
 80011e6:	2780      	movs	r7, #128	; 0x80
 80011e8:	03ff      	lsls	r7, r7, #15
 80011ea:	431f      	orrs	r7, r3
 80011ec:	027f      	lsls	r7, r7, #9
 80011ee:	20ff      	movs	r0, #255	; 0xff
 80011f0:	0a7f      	lsrs	r7, r7, #9
 80011f2:	e7a6      	b.n	8001142 <__aeabi_fsub+0xce>
 80011f4:	4652      	mov	r2, sl
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d074      	beq.n	80012e4 <__aeabi_fsub+0x270>
 80011fa:	2201      	movs	r2, #1
 80011fc:	4252      	negs	r2, r2
 80011fe:	4690      	mov	r8, r2
 8001200:	44c1      	add	r9, r8
 8001202:	464a      	mov	r2, r9
 8001204:	2a00      	cmp	r2, #0
 8001206:	d100      	bne.n	800120a <__aeabi_fsub+0x196>
 8001208:	e0c8      	b.n	800139c <__aeabi_fsub+0x328>
 800120a:	2cff      	cmp	r4, #255	; 0xff
 800120c:	d000      	beq.n	8001210 <__aeabi_fsub+0x19c>
 800120e:	e75f      	b.n	80010d0 <__aeabi_fsub+0x5c>
 8001210:	e7e6      	b.n	80011e0 <__aeabi_fsub+0x16c>
 8001212:	2201      	movs	r2, #1
 8001214:	4051      	eors	r1, r2
 8001216:	42a9      	cmp	r1, r5
 8001218:	d000      	beq.n	800121c <__aeabi_fsub+0x1a8>
 800121a:	e749      	b.n	80010b0 <__aeabi_fsub+0x3c>
 800121c:	22ff      	movs	r2, #255	; 0xff
 800121e:	4252      	negs	r2, r2
 8001220:	4691      	mov	r9, r2
 8001222:	44a1      	add	r9, r4
 8001224:	464a      	mov	r2, r9
 8001226:	2a00      	cmp	r2, #0
 8001228:	d043      	beq.n	80012b2 <__aeabi_fsub+0x23e>
 800122a:	1b31      	subs	r1, r6, r4
 800122c:	2c00      	cmp	r4, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_fsub+0x1be>
 8001230:	e08c      	b.n	800134c <__aeabi_fsub+0x2d8>
 8001232:	2eff      	cmp	r6, #255	; 0xff
 8001234:	d100      	bne.n	8001238 <__aeabi_fsub+0x1c4>
 8001236:	e092      	b.n	800135e <__aeabi_fsub+0x2ea>
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	4662      	mov	r2, ip
 800123c:	04db      	lsls	r3, r3, #19
 800123e:	431a      	orrs	r2, r3
 8001240:	4694      	mov	ip, r2
 8001242:	2301      	movs	r3, #1
 8001244:	291b      	cmp	r1, #27
 8001246:	dc09      	bgt.n	800125c <__aeabi_fsub+0x1e8>
 8001248:	2020      	movs	r0, #32
 800124a:	4663      	mov	r3, ip
 800124c:	4662      	mov	r2, ip
 800124e:	40cb      	lsrs	r3, r1
 8001250:	1a41      	subs	r1, r0, r1
 8001252:	408a      	lsls	r2, r1
 8001254:	0011      	movs	r1, r2
 8001256:	1e48      	subs	r0, r1, #1
 8001258:	4181      	sbcs	r1, r0
 800125a:	430b      	orrs	r3, r1
 800125c:	0034      	movs	r4, r6
 800125e:	4453      	add	r3, sl
 8001260:	e794      	b.n	800118c <__aeabi_fsub+0x118>
 8001262:	22fe      	movs	r2, #254	; 0xfe
 8001264:	1c66      	adds	r6, r4, #1
 8001266:	4232      	tst	r2, r6
 8001268:	d164      	bne.n	8001334 <__aeabi_fsub+0x2c0>
 800126a:	2c00      	cmp	r4, #0
 800126c:	d000      	beq.n	8001270 <__aeabi_fsub+0x1fc>
 800126e:	e082      	b.n	8001376 <__aeabi_fsub+0x302>
 8001270:	4663      	mov	r3, ip
 8001272:	2b00      	cmp	r3, #0
 8001274:	d100      	bne.n	8001278 <__aeabi_fsub+0x204>
 8001276:	e0ab      	b.n	80013d0 <__aeabi_fsub+0x35c>
 8001278:	4653      	mov	r3, sl
 800127a:	2b00      	cmp	r3, #0
 800127c:	d100      	bne.n	8001280 <__aeabi_fsub+0x20c>
 800127e:	e760      	b.n	8001142 <__aeabi_fsub+0xce>
 8001280:	4663      	mov	r3, ip
 8001282:	4652      	mov	r2, sl
 8001284:	1a9b      	subs	r3, r3, r2
 8001286:	015a      	lsls	r2, r3, #5
 8001288:	d400      	bmi.n	800128c <__aeabi_fsub+0x218>
 800128a:	e0aa      	b.n	80013e2 <__aeabi_fsub+0x36e>
 800128c:	4663      	mov	r3, ip
 800128e:	4652      	mov	r2, sl
 8001290:	000d      	movs	r5, r1
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	e744      	b.n	8001120 <__aeabi_fsub+0xac>
 8001296:	4652      	mov	r2, sl
 8001298:	2a00      	cmp	r2, #0
 800129a:	d023      	beq.n	80012e4 <__aeabi_fsub+0x270>
 800129c:	2201      	movs	r2, #1
 800129e:	4252      	negs	r2, r2
 80012a0:	4690      	mov	r8, r2
 80012a2:	44c1      	add	r9, r8
 80012a4:	464a      	mov	r2, r9
 80012a6:	2a00      	cmp	r2, #0
 80012a8:	d075      	beq.n	8001396 <__aeabi_fsub+0x322>
 80012aa:	2cff      	cmp	r4, #255	; 0xff
 80012ac:	d000      	beq.n	80012b0 <__aeabi_fsub+0x23c>
 80012ae:	e75f      	b.n	8001170 <__aeabi_fsub+0xfc>
 80012b0:	e796      	b.n	80011e0 <__aeabi_fsub+0x16c>
 80012b2:	26fe      	movs	r6, #254	; 0xfe
 80012b4:	3401      	adds	r4, #1
 80012b6:	4226      	tst	r6, r4
 80012b8:	d153      	bne.n	8001362 <__aeabi_fsub+0x2ee>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d172      	bne.n	80013a4 <__aeabi_fsub+0x330>
 80012be:	4663      	mov	r3, ip
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_fsub+0x252>
 80012c4:	e093      	b.n	80013ee <__aeabi_fsub+0x37a>
 80012c6:	4653      	mov	r3, sl
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d100      	bne.n	80012ce <__aeabi_fsub+0x25a>
 80012cc:	e739      	b.n	8001142 <__aeabi_fsub+0xce>
 80012ce:	4463      	add	r3, ip
 80012d0:	2400      	movs	r4, #0
 80012d2:	015a      	lsls	r2, r3, #5
 80012d4:	d502      	bpl.n	80012dc <__aeabi_fsub+0x268>
 80012d6:	4a4a      	ldr	r2, [pc, #296]	; (8001400 <__aeabi_fsub+0x38c>)
 80012d8:	3401      	adds	r4, #1
 80012da:	4013      	ands	r3, r2
 80012dc:	075a      	lsls	r2, r3, #29
 80012de:	d000      	beq.n	80012e2 <__aeabi_fsub+0x26e>
 80012e0:	e720      	b.n	8001124 <__aeabi_fsub+0xb0>
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	2cff      	cmp	r4, #255	; 0xff
 80012e6:	d100      	bne.n	80012ea <__aeabi_fsub+0x276>
 80012e8:	e77a      	b.n	80011e0 <__aeabi_fsub+0x16c>
 80012ea:	025b      	lsls	r3, r3, #9
 80012ec:	0a5f      	lsrs	r7, r3, #9
 80012ee:	b2e0      	uxtb	r0, r4
 80012f0:	e727      	b.n	8001142 <__aeabi_fsub+0xce>
 80012f2:	20ff      	movs	r0, #255	; 0xff
 80012f4:	2700      	movs	r7, #0
 80012f6:	e724      	b.n	8001142 <__aeabi_fsub+0xce>
 80012f8:	4b41      	ldr	r3, [pc, #260]	; (8001400 <__aeabi_fsub+0x38c>)
 80012fa:	1a24      	subs	r4, r4, r0
 80012fc:	4033      	ands	r3, r6
 80012fe:	e70f      	b.n	8001120 <__aeabi_fsub+0xac>
 8001300:	2eff      	cmp	r6, #255	; 0xff
 8001302:	d100      	bne.n	8001306 <__aeabi_fsub+0x292>
 8001304:	e76a      	b.n	80011dc <__aeabi_fsub+0x168>
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	4662      	mov	r2, ip
 800130a:	04db      	lsls	r3, r3, #19
 800130c:	431a      	orrs	r2, r3
 800130e:	4694      	mov	ip, r2
 8001310:	2301      	movs	r3, #1
 8001312:	281b      	cmp	r0, #27
 8001314:	dc09      	bgt.n	800132a <__aeabi_fsub+0x2b6>
 8001316:	2420      	movs	r4, #32
 8001318:	4663      	mov	r3, ip
 800131a:	4662      	mov	r2, ip
 800131c:	40c3      	lsrs	r3, r0
 800131e:	1a20      	subs	r0, r4, r0
 8001320:	4082      	lsls	r2, r0
 8001322:	0010      	movs	r0, r2
 8001324:	1e44      	subs	r4, r0, #1
 8001326:	41a0      	sbcs	r0, r4
 8001328:	4303      	orrs	r3, r0
 800132a:	4652      	mov	r2, sl
 800132c:	000d      	movs	r5, r1
 800132e:	0034      	movs	r4, r6
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	e6dc      	b.n	80010ee <__aeabi_fsub+0x7a>
 8001334:	4663      	mov	r3, ip
 8001336:	4652      	mov	r2, sl
 8001338:	1a9e      	subs	r6, r3, r2
 800133a:	0173      	lsls	r3, r6, #5
 800133c:	d417      	bmi.n	800136e <__aeabi_fsub+0x2fa>
 800133e:	2e00      	cmp	r6, #0
 8001340:	d000      	beq.n	8001344 <__aeabi_fsub+0x2d0>
 8001342:	e6d9      	b.n	80010f8 <__aeabi_fsub+0x84>
 8001344:	2500      	movs	r5, #0
 8001346:	2000      	movs	r0, #0
 8001348:	2700      	movs	r7, #0
 800134a:	e6fa      	b.n	8001142 <__aeabi_fsub+0xce>
 800134c:	4663      	mov	r3, ip
 800134e:	2b00      	cmp	r3, #0
 8001350:	d044      	beq.n	80013dc <__aeabi_fsub+0x368>
 8001352:	3901      	subs	r1, #1
 8001354:	2900      	cmp	r1, #0
 8001356:	d04c      	beq.n	80013f2 <__aeabi_fsub+0x37e>
 8001358:	2eff      	cmp	r6, #255	; 0xff
 800135a:	d000      	beq.n	800135e <__aeabi_fsub+0x2ea>
 800135c:	e771      	b.n	8001242 <__aeabi_fsub+0x1ce>
 800135e:	4643      	mov	r3, r8
 8001360:	e73e      	b.n	80011e0 <__aeabi_fsub+0x16c>
 8001362:	2cff      	cmp	r4, #255	; 0xff
 8001364:	d0c5      	beq.n	80012f2 <__aeabi_fsub+0x27e>
 8001366:	4652      	mov	r2, sl
 8001368:	4462      	add	r2, ip
 800136a:	0853      	lsrs	r3, r2, #1
 800136c:	e7b6      	b.n	80012dc <__aeabi_fsub+0x268>
 800136e:	4663      	mov	r3, ip
 8001370:	000d      	movs	r5, r1
 8001372:	1ad6      	subs	r6, r2, r3
 8001374:	e6c0      	b.n	80010f8 <__aeabi_fsub+0x84>
 8001376:	4662      	mov	r2, ip
 8001378:	2a00      	cmp	r2, #0
 800137a:	d116      	bne.n	80013aa <__aeabi_fsub+0x336>
 800137c:	4653      	mov	r3, sl
 800137e:	2b00      	cmp	r3, #0
 8001380:	d000      	beq.n	8001384 <__aeabi_fsub+0x310>
 8001382:	e72b      	b.n	80011dc <__aeabi_fsub+0x168>
 8001384:	2780      	movs	r7, #128	; 0x80
 8001386:	2500      	movs	r5, #0
 8001388:	20ff      	movs	r0, #255	; 0xff
 800138a:	03ff      	lsls	r7, r7, #15
 800138c:	e6d9      	b.n	8001142 <__aeabi_fsub+0xce>
 800138e:	000d      	movs	r5, r1
 8001390:	4643      	mov	r3, r8
 8001392:	0034      	movs	r4, r6
 8001394:	e7a6      	b.n	80012e4 <__aeabi_fsub+0x270>
 8001396:	4653      	mov	r3, sl
 8001398:	4463      	add	r3, ip
 800139a:	e6f7      	b.n	800118c <__aeabi_fsub+0x118>
 800139c:	4663      	mov	r3, ip
 800139e:	4652      	mov	r2, sl
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	e6a4      	b.n	80010ee <__aeabi_fsub+0x7a>
 80013a4:	4662      	mov	r2, ip
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	d0d9      	beq.n	800135e <__aeabi_fsub+0x2ea>
 80013aa:	4652      	mov	r2, sl
 80013ac:	2a00      	cmp	r2, #0
 80013ae:	d100      	bne.n	80013b2 <__aeabi_fsub+0x33e>
 80013b0:	e716      	b.n	80011e0 <__aeabi_fsub+0x16c>
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	03d2      	lsls	r2, r2, #15
 80013b6:	4213      	tst	r3, r2
 80013b8:	d100      	bne.n	80013bc <__aeabi_fsub+0x348>
 80013ba:	e711      	b.n	80011e0 <__aeabi_fsub+0x16c>
 80013bc:	4640      	mov	r0, r8
 80013be:	4210      	tst	r0, r2
 80013c0:	d000      	beq.n	80013c4 <__aeabi_fsub+0x350>
 80013c2:	e70d      	b.n	80011e0 <__aeabi_fsub+0x16c>
 80013c4:	e70a      	b.n	80011dc <__aeabi_fsub+0x168>
 80013c6:	4652      	mov	r2, sl
 80013c8:	000d      	movs	r5, r1
 80013ca:	0034      	movs	r4, r6
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	e68e      	b.n	80010ee <__aeabi_fsub+0x7a>
 80013d0:	4653      	mov	r3, sl
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d008      	beq.n	80013e8 <__aeabi_fsub+0x374>
 80013d6:	000d      	movs	r5, r1
 80013d8:	4647      	mov	r7, r8
 80013da:	e6b2      	b.n	8001142 <__aeabi_fsub+0xce>
 80013dc:	4643      	mov	r3, r8
 80013de:	0034      	movs	r4, r6
 80013e0:	e780      	b.n	80012e4 <__aeabi_fsub+0x270>
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d000      	beq.n	80013e8 <__aeabi_fsub+0x374>
 80013e6:	e779      	b.n	80012dc <__aeabi_fsub+0x268>
 80013e8:	2500      	movs	r5, #0
 80013ea:	2700      	movs	r7, #0
 80013ec:	e6a9      	b.n	8001142 <__aeabi_fsub+0xce>
 80013ee:	4647      	mov	r7, r8
 80013f0:	e6a7      	b.n	8001142 <__aeabi_fsub+0xce>
 80013f2:	4653      	mov	r3, sl
 80013f4:	0034      	movs	r4, r6
 80013f6:	4463      	add	r3, ip
 80013f8:	e6c8      	b.n	800118c <__aeabi_fsub+0x118>
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	7dffffff 	.word	0x7dffffff
 8001400:	fbffffff 	.word	0xfbffffff

08001404 <__aeabi_f2iz>:
 8001404:	0241      	lsls	r1, r0, #9
 8001406:	0042      	lsls	r2, r0, #1
 8001408:	0fc3      	lsrs	r3, r0, #31
 800140a:	0a49      	lsrs	r1, r1, #9
 800140c:	2000      	movs	r0, #0
 800140e:	0e12      	lsrs	r2, r2, #24
 8001410:	2a7e      	cmp	r2, #126	; 0x7e
 8001412:	d903      	bls.n	800141c <__aeabi_f2iz+0x18>
 8001414:	2a9d      	cmp	r2, #157	; 0x9d
 8001416:	d902      	bls.n	800141e <__aeabi_f2iz+0x1a>
 8001418:	4a09      	ldr	r2, [pc, #36]	; (8001440 <__aeabi_f2iz+0x3c>)
 800141a:	1898      	adds	r0, r3, r2
 800141c:	4770      	bx	lr
 800141e:	2080      	movs	r0, #128	; 0x80
 8001420:	0400      	lsls	r0, r0, #16
 8001422:	4301      	orrs	r1, r0
 8001424:	2a95      	cmp	r2, #149	; 0x95
 8001426:	dc07      	bgt.n	8001438 <__aeabi_f2iz+0x34>
 8001428:	2096      	movs	r0, #150	; 0x96
 800142a:	1a82      	subs	r2, r0, r2
 800142c:	40d1      	lsrs	r1, r2
 800142e:	4248      	negs	r0, r1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f3      	bne.n	800141c <__aeabi_f2iz+0x18>
 8001434:	0008      	movs	r0, r1
 8001436:	e7f1      	b.n	800141c <__aeabi_f2iz+0x18>
 8001438:	3a96      	subs	r2, #150	; 0x96
 800143a:	4091      	lsls	r1, r2
 800143c:	e7f7      	b.n	800142e <__aeabi_f2iz+0x2a>
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	7fffffff 	.word	0x7fffffff

08001444 <__aeabi_ui2f>:
 8001444:	b570      	push	{r4, r5, r6, lr}
 8001446:	1e05      	subs	r5, r0, #0
 8001448:	d00e      	beq.n	8001468 <__aeabi_ui2f+0x24>
 800144a:	f001 ff1f 	bl	800328c <__clzsi2>
 800144e:	239e      	movs	r3, #158	; 0x9e
 8001450:	0004      	movs	r4, r0
 8001452:	1a1b      	subs	r3, r3, r0
 8001454:	2b96      	cmp	r3, #150	; 0x96
 8001456:	dc0c      	bgt.n	8001472 <__aeabi_ui2f+0x2e>
 8001458:	2808      	cmp	r0, #8
 800145a:	dd01      	ble.n	8001460 <__aeabi_ui2f+0x1c>
 800145c:	3c08      	subs	r4, #8
 800145e:	40a5      	lsls	r5, r4
 8001460:	026d      	lsls	r5, r5, #9
 8001462:	0a6d      	lsrs	r5, r5, #9
 8001464:	b2d8      	uxtb	r0, r3
 8001466:	e001      	b.n	800146c <__aeabi_ui2f+0x28>
 8001468:	2000      	movs	r0, #0
 800146a:	2500      	movs	r5, #0
 800146c:	05c0      	lsls	r0, r0, #23
 800146e:	4328      	orrs	r0, r5
 8001470:	bd70      	pop	{r4, r5, r6, pc}
 8001472:	2b99      	cmp	r3, #153	; 0x99
 8001474:	dd09      	ble.n	800148a <__aeabi_ui2f+0x46>
 8001476:	0002      	movs	r2, r0
 8001478:	0029      	movs	r1, r5
 800147a:	321b      	adds	r2, #27
 800147c:	4091      	lsls	r1, r2
 800147e:	1e4a      	subs	r2, r1, #1
 8001480:	4191      	sbcs	r1, r2
 8001482:	2205      	movs	r2, #5
 8001484:	1a12      	subs	r2, r2, r0
 8001486:	40d5      	lsrs	r5, r2
 8001488:	430d      	orrs	r5, r1
 800148a:	2c05      	cmp	r4, #5
 800148c:	dd01      	ble.n	8001492 <__aeabi_ui2f+0x4e>
 800148e:	1f62      	subs	r2, r4, #5
 8001490:	4095      	lsls	r5, r2
 8001492:	0029      	movs	r1, r5
 8001494:	4e08      	ldr	r6, [pc, #32]	; (80014b8 <__aeabi_ui2f+0x74>)
 8001496:	4031      	ands	r1, r6
 8001498:	076a      	lsls	r2, r5, #29
 800149a:	d009      	beq.n	80014b0 <__aeabi_ui2f+0x6c>
 800149c:	200f      	movs	r0, #15
 800149e:	4028      	ands	r0, r5
 80014a0:	2804      	cmp	r0, #4
 80014a2:	d005      	beq.n	80014b0 <__aeabi_ui2f+0x6c>
 80014a4:	3104      	adds	r1, #4
 80014a6:	014a      	lsls	r2, r1, #5
 80014a8:	d502      	bpl.n	80014b0 <__aeabi_ui2f+0x6c>
 80014aa:	239f      	movs	r3, #159	; 0x9f
 80014ac:	4031      	ands	r1, r6
 80014ae:	1b1b      	subs	r3, r3, r4
 80014b0:	0189      	lsls	r1, r1, #6
 80014b2:	0a4d      	lsrs	r5, r1, #9
 80014b4:	b2d8      	uxtb	r0, r3
 80014b6:	e7d9      	b.n	800146c <__aeabi_ui2f+0x28>
 80014b8:	fbffffff 	.word	0xfbffffff

080014bc <__aeabi_dadd>:
 80014bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014be:	464f      	mov	r7, r9
 80014c0:	46d6      	mov	lr, sl
 80014c2:	4646      	mov	r6, r8
 80014c4:	000d      	movs	r5, r1
 80014c6:	0001      	movs	r1, r0
 80014c8:	0018      	movs	r0, r3
 80014ca:	b5c0      	push	{r6, r7, lr}
 80014cc:	0017      	movs	r7, r2
 80014ce:	032b      	lsls	r3, r5, #12
 80014d0:	0a5a      	lsrs	r2, r3, #9
 80014d2:	0f4b      	lsrs	r3, r1, #29
 80014d4:	4313      	orrs	r3, r2
 80014d6:	00ca      	lsls	r2, r1, #3
 80014d8:	4691      	mov	r9, r2
 80014da:	0302      	lsls	r2, r0, #12
 80014dc:	006e      	lsls	r6, r5, #1
 80014de:	0041      	lsls	r1, r0, #1
 80014e0:	0a52      	lsrs	r2, r2, #9
 80014e2:	0fec      	lsrs	r4, r5, #31
 80014e4:	0f7d      	lsrs	r5, r7, #29
 80014e6:	4315      	orrs	r5, r2
 80014e8:	0d76      	lsrs	r6, r6, #21
 80014ea:	0d49      	lsrs	r1, r1, #21
 80014ec:	0fc0      	lsrs	r0, r0, #31
 80014ee:	4682      	mov	sl, r0
 80014f0:	46ac      	mov	ip, r5
 80014f2:	00ff      	lsls	r7, r7, #3
 80014f4:	1a72      	subs	r2, r6, r1
 80014f6:	4284      	cmp	r4, r0
 80014f8:	d100      	bne.n	80014fc <__aeabi_dadd+0x40>
 80014fa:	e098      	b.n	800162e <__aeabi_dadd+0x172>
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	dc00      	bgt.n	8001502 <__aeabi_dadd+0x46>
 8001500:	e081      	b.n	8001606 <__aeabi_dadd+0x14a>
 8001502:	2900      	cmp	r1, #0
 8001504:	d100      	bne.n	8001508 <__aeabi_dadd+0x4c>
 8001506:	e0b6      	b.n	8001676 <__aeabi_dadd+0x1ba>
 8001508:	49c9      	ldr	r1, [pc, #804]	; (8001830 <__aeabi_dadd+0x374>)
 800150a:	428e      	cmp	r6, r1
 800150c:	d100      	bne.n	8001510 <__aeabi_dadd+0x54>
 800150e:	e172      	b.n	80017f6 <__aeabi_dadd+0x33a>
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	0028      	movs	r0, r5
 8001514:	0409      	lsls	r1, r1, #16
 8001516:	4308      	orrs	r0, r1
 8001518:	4684      	mov	ip, r0
 800151a:	2a38      	cmp	r2, #56	; 0x38
 800151c:	dd00      	ble.n	8001520 <__aeabi_dadd+0x64>
 800151e:	e15e      	b.n	80017de <__aeabi_dadd+0x322>
 8001520:	2a1f      	cmp	r2, #31
 8001522:	dd00      	ble.n	8001526 <__aeabi_dadd+0x6a>
 8001524:	e1ee      	b.n	8001904 <__aeabi_dadd+0x448>
 8001526:	2020      	movs	r0, #32
 8001528:	0039      	movs	r1, r7
 800152a:	4665      	mov	r5, ip
 800152c:	1a80      	subs	r0, r0, r2
 800152e:	4087      	lsls	r7, r0
 8001530:	40d1      	lsrs	r1, r2
 8001532:	4085      	lsls	r5, r0
 8001534:	430d      	orrs	r5, r1
 8001536:	0039      	movs	r1, r7
 8001538:	1e4f      	subs	r7, r1, #1
 800153a:	41b9      	sbcs	r1, r7
 800153c:	4667      	mov	r7, ip
 800153e:	40d7      	lsrs	r7, r2
 8001540:	4329      	orrs	r1, r5
 8001542:	1bdb      	subs	r3, r3, r7
 8001544:	464a      	mov	r2, r9
 8001546:	1a55      	subs	r5, r2, r1
 8001548:	45a9      	cmp	r9, r5
 800154a:	4189      	sbcs	r1, r1
 800154c:	4249      	negs	r1, r1
 800154e:	1a5b      	subs	r3, r3, r1
 8001550:	4698      	mov	r8, r3
 8001552:	4643      	mov	r3, r8
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	d400      	bmi.n	800155a <__aeabi_dadd+0x9e>
 8001558:	e0cc      	b.n	80016f4 <__aeabi_dadd+0x238>
 800155a:	4643      	mov	r3, r8
 800155c:	025b      	lsls	r3, r3, #9
 800155e:	0a5b      	lsrs	r3, r3, #9
 8001560:	4698      	mov	r8, r3
 8001562:	4643      	mov	r3, r8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0xae>
 8001568:	e12c      	b.n	80017c4 <__aeabi_dadd+0x308>
 800156a:	4640      	mov	r0, r8
 800156c:	f001 fe8e 	bl	800328c <__clzsi2>
 8001570:	0001      	movs	r1, r0
 8001572:	3908      	subs	r1, #8
 8001574:	2220      	movs	r2, #32
 8001576:	0028      	movs	r0, r5
 8001578:	4643      	mov	r3, r8
 800157a:	1a52      	subs	r2, r2, r1
 800157c:	408b      	lsls	r3, r1
 800157e:	40d0      	lsrs	r0, r2
 8001580:	408d      	lsls	r5, r1
 8001582:	4303      	orrs	r3, r0
 8001584:	428e      	cmp	r6, r1
 8001586:	dd00      	ble.n	800158a <__aeabi_dadd+0xce>
 8001588:	e117      	b.n	80017ba <__aeabi_dadd+0x2fe>
 800158a:	1b8e      	subs	r6, r1, r6
 800158c:	1c72      	adds	r2, r6, #1
 800158e:	2a1f      	cmp	r2, #31
 8001590:	dd00      	ble.n	8001594 <__aeabi_dadd+0xd8>
 8001592:	e1a7      	b.n	80018e4 <__aeabi_dadd+0x428>
 8001594:	2120      	movs	r1, #32
 8001596:	0018      	movs	r0, r3
 8001598:	002e      	movs	r6, r5
 800159a:	1a89      	subs	r1, r1, r2
 800159c:	408d      	lsls	r5, r1
 800159e:	4088      	lsls	r0, r1
 80015a0:	40d6      	lsrs	r6, r2
 80015a2:	40d3      	lsrs	r3, r2
 80015a4:	1e69      	subs	r1, r5, #1
 80015a6:	418d      	sbcs	r5, r1
 80015a8:	4330      	orrs	r0, r6
 80015aa:	4698      	mov	r8, r3
 80015ac:	2600      	movs	r6, #0
 80015ae:	4305      	orrs	r5, r0
 80015b0:	076b      	lsls	r3, r5, #29
 80015b2:	d009      	beq.n	80015c8 <__aeabi_dadd+0x10c>
 80015b4:	230f      	movs	r3, #15
 80015b6:	402b      	ands	r3, r5
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d005      	beq.n	80015c8 <__aeabi_dadd+0x10c>
 80015bc:	1d2b      	adds	r3, r5, #4
 80015be:	42ab      	cmp	r3, r5
 80015c0:	41ad      	sbcs	r5, r5
 80015c2:	426d      	negs	r5, r5
 80015c4:	44a8      	add	r8, r5
 80015c6:	001d      	movs	r5, r3
 80015c8:	4643      	mov	r3, r8
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	d400      	bmi.n	80015d0 <__aeabi_dadd+0x114>
 80015ce:	e094      	b.n	80016fa <__aeabi_dadd+0x23e>
 80015d0:	4b97      	ldr	r3, [pc, #604]	; (8001830 <__aeabi_dadd+0x374>)
 80015d2:	1c72      	adds	r2, r6, #1
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d100      	bne.n	80015da <__aeabi_dadd+0x11e>
 80015d8:	e09d      	b.n	8001716 <__aeabi_dadd+0x25a>
 80015da:	4641      	mov	r1, r8
 80015dc:	4b95      	ldr	r3, [pc, #596]	; (8001834 <__aeabi_dadd+0x378>)
 80015de:	08ed      	lsrs	r5, r5, #3
 80015e0:	4019      	ands	r1, r3
 80015e2:	000b      	movs	r3, r1
 80015e4:	0552      	lsls	r2, r2, #21
 80015e6:	0749      	lsls	r1, r1, #29
 80015e8:	025b      	lsls	r3, r3, #9
 80015ea:	4329      	orrs	r1, r5
 80015ec:	0b1b      	lsrs	r3, r3, #12
 80015ee:	0d52      	lsrs	r2, r2, #21
 80015f0:	0512      	lsls	r2, r2, #20
 80015f2:	4313      	orrs	r3, r2
 80015f4:	07e4      	lsls	r4, r4, #31
 80015f6:	4323      	orrs	r3, r4
 80015f8:	0008      	movs	r0, r1
 80015fa:	0019      	movs	r1, r3
 80015fc:	bce0      	pop	{r5, r6, r7}
 80015fe:	46ba      	mov	sl, r7
 8001600:	46b1      	mov	r9, r6
 8001602:	46a8      	mov	r8, r5
 8001604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001606:	2a00      	cmp	r2, #0
 8001608:	d043      	beq.n	8001692 <__aeabi_dadd+0x1d6>
 800160a:	1b8a      	subs	r2, r1, r6
 800160c:	2e00      	cmp	r6, #0
 800160e:	d000      	beq.n	8001612 <__aeabi_dadd+0x156>
 8001610:	e12a      	b.n	8001868 <__aeabi_dadd+0x3ac>
 8001612:	464c      	mov	r4, r9
 8001614:	431c      	orrs	r4, r3
 8001616:	d100      	bne.n	800161a <__aeabi_dadd+0x15e>
 8001618:	e1d1      	b.n	80019be <__aeabi_dadd+0x502>
 800161a:	1e54      	subs	r4, r2, #1
 800161c:	2a01      	cmp	r2, #1
 800161e:	d100      	bne.n	8001622 <__aeabi_dadd+0x166>
 8001620:	e21f      	b.n	8001a62 <__aeabi_dadd+0x5a6>
 8001622:	4d83      	ldr	r5, [pc, #524]	; (8001830 <__aeabi_dadd+0x374>)
 8001624:	42aa      	cmp	r2, r5
 8001626:	d100      	bne.n	800162a <__aeabi_dadd+0x16e>
 8001628:	e272      	b.n	8001b10 <__aeabi_dadd+0x654>
 800162a:	0022      	movs	r2, r4
 800162c:	e123      	b.n	8001876 <__aeabi_dadd+0x3ba>
 800162e:	2a00      	cmp	r2, #0
 8001630:	dc00      	bgt.n	8001634 <__aeabi_dadd+0x178>
 8001632:	e098      	b.n	8001766 <__aeabi_dadd+0x2aa>
 8001634:	2900      	cmp	r1, #0
 8001636:	d042      	beq.n	80016be <__aeabi_dadd+0x202>
 8001638:	497d      	ldr	r1, [pc, #500]	; (8001830 <__aeabi_dadd+0x374>)
 800163a:	428e      	cmp	r6, r1
 800163c:	d100      	bne.n	8001640 <__aeabi_dadd+0x184>
 800163e:	e0da      	b.n	80017f6 <__aeabi_dadd+0x33a>
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	0028      	movs	r0, r5
 8001644:	0409      	lsls	r1, r1, #16
 8001646:	4308      	orrs	r0, r1
 8001648:	4684      	mov	ip, r0
 800164a:	2a38      	cmp	r2, #56	; 0x38
 800164c:	dd00      	ble.n	8001650 <__aeabi_dadd+0x194>
 800164e:	e129      	b.n	80018a4 <__aeabi_dadd+0x3e8>
 8001650:	2a1f      	cmp	r2, #31
 8001652:	dc00      	bgt.n	8001656 <__aeabi_dadd+0x19a>
 8001654:	e187      	b.n	8001966 <__aeabi_dadd+0x4aa>
 8001656:	0011      	movs	r1, r2
 8001658:	4665      	mov	r5, ip
 800165a:	3920      	subs	r1, #32
 800165c:	40cd      	lsrs	r5, r1
 800165e:	2a20      	cmp	r2, #32
 8001660:	d004      	beq.n	800166c <__aeabi_dadd+0x1b0>
 8001662:	2040      	movs	r0, #64	; 0x40
 8001664:	4661      	mov	r1, ip
 8001666:	1a82      	subs	r2, r0, r2
 8001668:	4091      	lsls	r1, r2
 800166a:	430f      	orrs	r7, r1
 800166c:	0039      	movs	r1, r7
 800166e:	1e4f      	subs	r7, r1, #1
 8001670:	41b9      	sbcs	r1, r7
 8001672:	430d      	orrs	r5, r1
 8001674:	e11b      	b.n	80018ae <__aeabi_dadd+0x3f2>
 8001676:	0029      	movs	r1, r5
 8001678:	4339      	orrs	r1, r7
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x1c2>
 800167c:	e0b5      	b.n	80017ea <__aeabi_dadd+0x32e>
 800167e:	1e51      	subs	r1, r2, #1
 8001680:	2a01      	cmp	r2, #1
 8001682:	d100      	bne.n	8001686 <__aeabi_dadd+0x1ca>
 8001684:	e1ab      	b.n	80019de <__aeabi_dadd+0x522>
 8001686:	486a      	ldr	r0, [pc, #424]	; (8001830 <__aeabi_dadd+0x374>)
 8001688:	4282      	cmp	r2, r0
 800168a:	d100      	bne.n	800168e <__aeabi_dadd+0x1d2>
 800168c:	e1b2      	b.n	80019f4 <__aeabi_dadd+0x538>
 800168e:	000a      	movs	r2, r1
 8001690:	e743      	b.n	800151a <__aeabi_dadd+0x5e>
 8001692:	4969      	ldr	r1, [pc, #420]	; (8001838 <__aeabi_dadd+0x37c>)
 8001694:	1c75      	adds	r5, r6, #1
 8001696:	420d      	tst	r5, r1
 8001698:	d000      	beq.n	800169c <__aeabi_dadd+0x1e0>
 800169a:	e0cf      	b.n	800183c <__aeabi_dadd+0x380>
 800169c:	2e00      	cmp	r6, #0
 800169e:	d000      	beq.n	80016a2 <__aeabi_dadd+0x1e6>
 80016a0:	e193      	b.n	80019ca <__aeabi_dadd+0x50e>
 80016a2:	4649      	mov	r1, r9
 80016a4:	4319      	orrs	r1, r3
 80016a6:	d100      	bne.n	80016aa <__aeabi_dadd+0x1ee>
 80016a8:	e1d1      	b.n	8001a4e <__aeabi_dadd+0x592>
 80016aa:	4661      	mov	r1, ip
 80016ac:	4339      	orrs	r1, r7
 80016ae:	d000      	beq.n	80016b2 <__aeabi_dadd+0x1f6>
 80016b0:	e1e3      	b.n	8001a7a <__aeabi_dadd+0x5be>
 80016b2:	4649      	mov	r1, r9
 80016b4:	0758      	lsls	r0, r3, #29
 80016b6:	08c9      	lsrs	r1, r1, #3
 80016b8:	4301      	orrs	r1, r0
 80016ba:	08db      	lsrs	r3, r3, #3
 80016bc:	e026      	b.n	800170c <__aeabi_dadd+0x250>
 80016be:	0029      	movs	r1, r5
 80016c0:	4339      	orrs	r1, r7
 80016c2:	d100      	bne.n	80016c6 <__aeabi_dadd+0x20a>
 80016c4:	e091      	b.n	80017ea <__aeabi_dadd+0x32e>
 80016c6:	1e51      	subs	r1, r2, #1
 80016c8:	2a01      	cmp	r2, #1
 80016ca:	d005      	beq.n	80016d8 <__aeabi_dadd+0x21c>
 80016cc:	4858      	ldr	r0, [pc, #352]	; (8001830 <__aeabi_dadd+0x374>)
 80016ce:	4282      	cmp	r2, r0
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0x218>
 80016d2:	e18f      	b.n	80019f4 <__aeabi_dadd+0x538>
 80016d4:	000a      	movs	r2, r1
 80016d6:	e7b8      	b.n	800164a <__aeabi_dadd+0x18e>
 80016d8:	003d      	movs	r5, r7
 80016da:	444d      	add	r5, r9
 80016dc:	454d      	cmp	r5, r9
 80016de:	4189      	sbcs	r1, r1
 80016e0:	4463      	add	r3, ip
 80016e2:	4698      	mov	r8, r3
 80016e4:	4249      	negs	r1, r1
 80016e6:	4488      	add	r8, r1
 80016e8:	4643      	mov	r3, r8
 80016ea:	2602      	movs	r6, #2
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	d500      	bpl.n	80016f2 <__aeabi_dadd+0x236>
 80016f0:	e0eb      	b.n	80018ca <__aeabi_dadd+0x40e>
 80016f2:	3e01      	subs	r6, #1
 80016f4:	076b      	lsls	r3, r5, #29
 80016f6:	d000      	beq.n	80016fa <__aeabi_dadd+0x23e>
 80016f8:	e75c      	b.n	80015b4 <__aeabi_dadd+0xf8>
 80016fa:	4643      	mov	r3, r8
 80016fc:	08e9      	lsrs	r1, r5, #3
 80016fe:	075a      	lsls	r2, r3, #29
 8001700:	4311      	orrs	r1, r2
 8001702:	0032      	movs	r2, r6
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	484a      	ldr	r0, [pc, #296]	; (8001830 <__aeabi_dadd+0x374>)
 8001708:	4282      	cmp	r2, r0
 800170a:	d021      	beq.n	8001750 <__aeabi_dadd+0x294>
 800170c:	031b      	lsls	r3, r3, #12
 800170e:	0552      	lsls	r2, r2, #21
 8001710:	0b1b      	lsrs	r3, r3, #12
 8001712:	0d52      	lsrs	r2, r2, #21
 8001714:	e76c      	b.n	80015f0 <__aeabi_dadd+0x134>
 8001716:	2300      	movs	r3, #0
 8001718:	2100      	movs	r1, #0
 800171a:	e769      	b.n	80015f0 <__aeabi_dadd+0x134>
 800171c:	002a      	movs	r2, r5
 800171e:	433a      	orrs	r2, r7
 8001720:	d069      	beq.n	80017f6 <__aeabi_dadd+0x33a>
 8001722:	464a      	mov	r2, r9
 8001724:	0758      	lsls	r0, r3, #29
 8001726:	08d1      	lsrs	r1, r2, #3
 8001728:	08da      	lsrs	r2, r3, #3
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	031b      	lsls	r3, r3, #12
 800172e:	4308      	orrs	r0, r1
 8001730:	421a      	tst	r2, r3
 8001732:	d007      	beq.n	8001744 <__aeabi_dadd+0x288>
 8001734:	0029      	movs	r1, r5
 8001736:	08ed      	lsrs	r5, r5, #3
 8001738:	421d      	tst	r5, r3
 800173a:	d103      	bne.n	8001744 <__aeabi_dadd+0x288>
 800173c:	002a      	movs	r2, r5
 800173e:	08ff      	lsrs	r7, r7, #3
 8001740:	0748      	lsls	r0, r1, #29
 8001742:	4338      	orrs	r0, r7
 8001744:	0f43      	lsrs	r3, r0, #29
 8001746:	00c1      	lsls	r1, r0, #3
 8001748:	075b      	lsls	r3, r3, #29
 800174a:	08c9      	lsrs	r1, r1, #3
 800174c:	4319      	orrs	r1, r3
 800174e:	0013      	movs	r3, r2
 8001750:	000a      	movs	r2, r1
 8001752:	431a      	orrs	r2, r3
 8001754:	d100      	bne.n	8001758 <__aeabi_dadd+0x29c>
 8001756:	e213      	b.n	8001b80 <__aeabi_dadd+0x6c4>
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	0312      	lsls	r2, r2, #12
 800175c:	4313      	orrs	r3, r2
 800175e:	031b      	lsls	r3, r3, #12
 8001760:	4a33      	ldr	r2, [pc, #204]	; (8001830 <__aeabi_dadd+0x374>)
 8001762:	0b1b      	lsrs	r3, r3, #12
 8001764:	e744      	b.n	80015f0 <__aeabi_dadd+0x134>
 8001766:	2a00      	cmp	r2, #0
 8001768:	d04b      	beq.n	8001802 <__aeabi_dadd+0x346>
 800176a:	1b8a      	subs	r2, r1, r6
 800176c:	2e00      	cmp	r6, #0
 800176e:	d100      	bne.n	8001772 <__aeabi_dadd+0x2b6>
 8001770:	e0e7      	b.n	8001942 <__aeabi_dadd+0x486>
 8001772:	482f      	ldr	r0, [pc, #188]	; (8001830 <__aeabi_dadd+0x374>)
 8001774:	4281      	cmp	r1, r0
 8001776:	d100      	bne.n	800177a <__aeabi_dadd+0x2be>
 8001778:	e195      	b.n	8001aa6 <__aeabi_dadd+0x5ea>
 800177a:	2080      	movs	r0, #128	; 0x80
 800177c:	0400      	lsls	r0, r0, #16
 800177e:	4303      	orrs	r3, r0
 8001780:	2a38      	cmp	r2, #56	; 0x38
 8001782:	dd00      	ble.n	8001786 <__aeabi_dadd+0x2ca>
 8001784:	e143      	b.n	8001a0e <__aeabi_dadd+0x552>
 8001786:	2a1f      	cmp	r2, #31
 8001788:	dd00      	ble.n	800178c <__aeabi_dadd+0x2d0>
 800178a:	e1db      	b.n	8001b44 <__aeabi_dadd+0x688>
 800178c:	2020      	movs	r0, #32
 800178e:	001d      	movs	r5, r3
 8001790:	464e      	mov	r6, r9
 8001792:	1a80      	subs	r0, r0, r2
 8001794:	4085      	lsls	r5, r0
 8001796:	40d6      	lsrs	r6, r2
 8001798:	4335      	orrs	r5, r6
 800179a:	464e      	mov	r6, r9
 800179c:	4086      	lsls	r6, r0
 800179e:	0030      	movs	r0, r6
 80017a0:	40d3      	lsrs	r3, r2
 80017a2:	1e46      	subs	r6, r0, #1
 80017a4:	41b0      	sbcs	r0, r6
 80017a6:	449c      	add	ip, r3
 80017a8:	4305      	orrs	r5, r0
 80017aa:	19ed      	adds	r5, r5, r7
 80017ac:	42bd      	cmp	r5, r7
 80017ae:	419b      	sbcs	r3, r3
 80017b0:	425b      	negs	r3, r3
 80017b2:	4463      	add	r3, ip
 80017b4:	4698      	mov	r8, r3
 80017b6:	000e      	movs	r6, r1
 80017b8:	e07f      	b.n	80018ba <__aeabi_dadd+0x3fe>
 80017ba:	4a1e      	ldr	r2, [pc, #120]	; (8001834 <__aeabi_dadd+0x378>)
 80017bc:	1a76      	subs	r6, r6, r1
 80017be:	4013      	ands	r3, r2
 80017c0:	4698      	mov	r8, r3
 80017c2:	e6f5      	b.n	80015b0 <__aeabi_dadd+0xf4>
 80017c4:	0028      	movs	r0, r5
 80017c6:	f001 fd61 	bl	800328c <__clzsi2>
 80017ca:	0001      	movs	r1, r0
 80017cc:	3118      	adds	r1, #24
 80017ce:	291f      	cmp	r1, #31
 80017d0:	dc00      	bgt.n	80017d4 <__aeabi_dadd+0x318>
 80017d2:	e6cf      	b.n	8001574 <__aeabi_dadd+0xb8>
 80017d4:	002b      	movs	r3, r5
 80017d6:	3808      	subs	r0, #8
 80017d8:	4083      	lsls	r3, r0
 80017da:	2500      	movs	r5, #0
 80017dc:	e6d2      	b.n	8001584 <__aeabi_dadd+0xc8>
 80017de:	4662      	mov	r2, ip
 80017e0:	433a      	orrs	r2, r7
 80017e2:	0011      	movs	r1, r2
 80017e4:	1e4f      	subs	r7, r1, #1
 80017e6:	41b9      	sbcs	r1, r7
 80017e8:	e6ac      	b.n	8001544 <__aeabi_dadd+0x88>
 80017ea:	4649      	mov	r1, r9
 80017ec:	0758      	lsls	r0, r3, #29
 80017ee:	08c9      	lsrs	r1, r1, #3
 80017f0:	4301      	orrs	r1, r0
 80017f2:	08db      	lsrs	r3, r3, #3
 80017f4:	e787      	b.n	8001706 <__aeabi_dadd+0x24a>
 80017f6:	4649      	mov	r1, r9
 80017f8:	075a      	lsls	r2, r3, #29
 80017fa:	08c9      	lsrs	r1, r1, #3
 80017fc:	4311      	orrs	r1, r2
 80017fe:	08db      	lsrs	r3, r3, #3
 8001800:	e7a6      	b.n	8001750 <__aeabi_dadd+0x294>
 8001802:	490d      	ldr	r1, [pc, #52]	; (8001838 <__aeabi_dadd+0x37c>)
 8001804:	1c70      	adds	r0, r6, #1
 8001806:	4208      	tst	r0, r1
 8001808:	d000      	beq.n	800180c <__aeabi_dadd+0x350>
 800180a:	e0bb      	b.n	8001984 <__aeabi_dadd+0x4c8>
 800180c:	2e00      	cmp	r6, #0
 800180e:	d000      	beq.n	8001812 <__aeabi_dadd+0x356>
 8001810:	e114      	b.n	8001a3c <__aeabi_dadd+0x580>
 8001812:	4649      	mov	r1, r9
 8001814:	4319      	orrs	r1, r3
 8001816:	d100      	bne.n	800181a <__aeabi_dadd+0x35e>
 8001818:	e175      	b.n	8001b06 <__aeabi_dadd+0x64a>
 800181a:	0029      	movs	r1, r5
 800181c:	4339      	orrs	r1, r7
 800181e:	d000      	beq.n	8001822 <__aeabi_dadd+0x366>
 8001820:	e17e      	b.n	8001b20 <__aeabi_dadd+0x664>
 8001822:	4649      	mov	r1, r9
 8001824:	0758      	lsls	r0, r3, #29
 8001826:	08c9      	lsrs	r1, r1, #3
 8001828:	4301      	orrs	r1, r0
 800182a:	08db      	lsrs	r3, r3, #3
 800182c:	e76e      	b.n	800170c <__aeabi_dadd+0x250>
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	000007ff 	.word	0x000007ff
 8001834:	ff7fffff 	.word	0xff7fffff
 8001838:	000007fe 	.word	0x000007fe
 800183c:	4649      	mov	r1, r9
 800183e:	1bcd      	subs	r5, r1, r7
 8001840:	4661      	mov	r1, ip
 8001842:	1a58      	subs	r0, r3, r1
 8001844:	45a9      	cmp	r9, r5
 8001846:	4189      	sbcs	r1, r1
 8001848:	4249      	negs	r1, r1
 800184a:	4688      	mov	r8, r1
 800184c:	0001      	movs	r1, r0
 800184e:	4640      	mov	r0, r8
 8001850:	1a09      	subs	r1, r1, r0
 8001852:	4688      	mov	r8, r1
 8001854:	0209      	lsls	r1, r1, #8
 8001856:	d500      	bpl.n	800185a <__aeabi_dadd+0x39e>
 8001858:	e0a6      	b.n	80019a8 <__aeabi_dadd+0x4ec>
 800185a:	4641      	mov	r1, r8
 800185c:	4329      	orrs	r1, r5
 800185e:	d000      	beq.n	8001862 <__aeabi_dadd+0x3a6>
 8001860:	e67f      	b.n	8001562 <__aeabi_dadd+0xa6>
 8001862:	2300      	movs	r3, #0
 8001864:	2400      	movs	r4, #0
 8001866:	e751      	b.n	800170c <__aeabi_dadd+0x250>
 8001868:	4cc7      	ldr	r4, [pc, #796]	; (8001b88 <__aeabi_dadd+0x6cc>)
 800186a:	42a1      	cmp	r1, r4
 800186c:	d100      	bne.n	8001870 <__aeabi_dadd+0x3b4>
 800186e:	e0c7      	b.n	8001a00 <__aeabi_dadd+0x544>
 8001870:	2480      	movs	r4, #128	; 0x80
 8001872:	0424      	lsls	r4, r4, #16
 8001874:	4323      	orrs	r3, r4
 8001876:	2a38      	cmp	r2, #56	; 0x38
 8001878:	dc54      	bgt.n	8001924 <__aeabi_dadd+0x468>
 800187a:	2a1f      	cmp	r2, #31
 800187c:	dd00      	ble.n	8001880 <__aeabi_dadd+0x3c4>
 800187e:	e0cc      	b.n	8001a1a <__aeabi_dadd+0x55e>
 8001880:	2420      	movs	r4, #32
 8001882:	4648      	mov	r0, r9
 8001884:	1aa4      	subs	r4, r4, r2
 8001886:	001d      	movs	r5, r3
 8001888:	464e      	mov	r6, r9
 800188a:	40a0      	lsls	r0, r4
 800188c:	40d6      	lsrs	r6, r2
 800188e:	40a5      	lsls	r5, r4
 8001890:	0004      	movs	r4, r0
 8001892:	40d3      	lsrs	r3, r2
 8001894:	4662      	mov	r2, ip
 8001896:	4335      	orrs	r5, r6
 8001898:	1e66      	subs	r6, r4, #1
 800189a:	41b4      	sbcs	r4, r6
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	469c      	mov	ip, r3
 80018a0:	4325      	orrs	r5, r4
 80018a2:	e044      	b.n	800192e <__aeabi_dadd+0x472>
 80018a4:	4662      	mov	r2, ip
 80018a6:	433a      	orrs	r2, r7
 80018a8:	0015      	movs	r5, r2
 80018aa:	1e6f      	subs	r7, r5, #1
 80018ac:	41bd      	sbcs	r5, r7
 80018ae:	444d      	add	r5, r9
 80018b0:	454d      	cmp	r5, r9
 80018b2:	4189      	sbcs	r1, r1
 80018b4:	4249      	negs	r1, r1
 80018b6:	4688      	mov	r8, r1
 80018b8:	4498      	add	r8, r3
 80018ba:	4643      	mov	r3, r8
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dadd+0x406>
 80018c0:	e718      	b.n	80016f4 <__aeabi_dadd+0x238>
 80018c2:	4bb1      	ldr	r3, [pc, #708]	; (8001b88 <__aeabi_dadd+0x6cc>)
 80018c4:	3601      	adds	r6, #1
 80018c6:	429e      	cmp	r6, r3
 80018c8:	d049      	beq.n	800195e <__aeabi_dadd+0x4a2>
 80018ca:	4642      	mov	r2, r8
 80018cc:	4baf      	ldr	r3, [pc, #700]	; (8001b8c <__aeabi_dadd+0x6d0>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	401a      	ands	r2, r3
 80018d2:	0013      	movs	r3, r2
 80018d4:	086a      	lsrs	r2, r5, #1
 80018d6:	400d      	ands	r5, r1
 80018d8:	4315      	orrs	r5, r2
 80018da:	07d9      	lsls	r1, r3, #31
 80018dc:	085b      	lsrs	r3, r3, #1
 80018de:	4698      	mov	r8, r3
 80018e0:	430d      	orrs	r5, r1
 80018e2:	e665      	b.n	80015b0 <__aeabi_dadd+0xf4>
 80018e4:	0018      	movs	r0, r3
 80018e6:	3e1f      	subs	r6, #31
 80018e8:	40f0      	lsrs	r0, r6
 80018ea:	2a20      	cmp	r2, #32
 80018ec:	d003      	beq.n	80018f6 <__aeabi_dadd+0x43a>
 80018ee:	2140      	movs	r1, #64	; 0x40
 80018f0:	1a8a      	subs	r2, r1, r2
 80018f2:	4093      	lsls	r3, r2
 80018f4:	431d      	orrs	r5, r3
 80018f6:	1e69      	subs	r1, r5, #1
 80018f8:	418d      	sbcs	r5, r1
 80018fa:	2300      	movs	r3, #0
 80018fc:	2600      	movs	r6, #0
 80018fe:	4698      	mov	r8, r3
 8001900:	4305      	orrs	r5, r0
 8001902:	e6f7      	b.n	80016f4 <__aeabi_dadd+0x238>
 8001904:	0011      	movs	r1, r2
 8001906:	4665      	mov	r5, ip
 8001908:	3920      	subs	r1, #32
 800190a:	40cd      	lsrs	r5, r1
 800190c:	2a20      	cmp	r2, #32
 800190e:	d004      	beq.n	800191a <__aeabi_dadd+0x45e>
 8001910:	2040      	movs	r0, #64	; 0x40
 8001912:	4661      	mov	r1, ip
 8001914:	1a82      	subs	r2, r0, r2
 8001916:	4091      	lsls	r1, r2
 8001918:	430f      	orrs	r7, r1
 800191a:	0039      	movs	r1, r7
 800191c:	1e4f      	subs	r7, r1, #1
 800191e:	41b9      	sbcs	r1, r7
 8001920:	4329      	orrs	r1, r5
 8001922:	e60f      	b.n	8001544 <__aeabi_dadd+0x88>
 8001924:	464a      	mov	r2, r9
 8001926:	4313      	orrs	r3, r2
 8001928:	001d      	movs	r5, r3
 800192a:	1e6b      	subs	r3, r5, #1
 800192c:	419d      	sbcs	r5, r3
 800192e:	1b7d      	subs	r5, r7, r5
 8001930:	42af      	cmp	r7, r5
 8001932:	419b      	sbcs	r3, r3
 8001934:	4662      	mov	r2, ip
 8001936:	425b      	negs	r3, r3
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	4698      	mov	r8, r3
 800193c:	4654      	mov	r4, sl
 800193e:	000e      	movs	r6, r1
 8001940:	e607      	b.n	8001552 <__aeabi_dadd+0x96>
 8001942:	4648      	mov	r0, r9
 8001944:	4318      	orrs	r0, r3
 8001946:	d100      	bne.n	800194a <__aeabi_dadd+0x48e>
 8001948:	e0b3      	b.n	8001ab2 <__aeabi_dadd+0x5f6>
 800194a:	1e50      	subs	r0, r2, #1
 800194c:	2a01      	cmp	r2, #1
 800194e:	d100      	bne.n	8001952 <__aeabi_dadd+0x496>
 8001950:	e10d      	b.n	8001b6e <__aeabi_dadd+0x6b2>
 8001952:	4d8d      	ldr	r5, [pc, #564]	; (8001b88 <__aeabi_dadd+0x6cc>)
 8001954:	42aa      	cmp	r2, r5
 8001956:	d100      	bne.n	800195a <__aeabi_dadd+0x49e>
 8001958:	e0a5      	b.n	8001aa6 <__aeabi_dadd+0x5ea>
 800195a:	0002      	movs	r2, r0
 800195c:	e710      	b.n	8001780 <__aeabi_dadd+0x2c4>
 800195e:	0032      	movs	r2, r6
 8001960:	2300      	movs	r3, #0
 8001962:	2100      	movs	r1, #0
 8001964:	e644      	b.n	80015f0 <__aeabi_dadd+0x134>
 8001966:	2120      	movs	r1, #32
 8001968:	0038      	movs	r0, r7
 800196a:	1a89      	subs	r1, r1, r2
 800196c:	4665      	mov	r5, ip
 800196e:	408f      	lsls	r7, r1
 8001970:	408d      	lsls	r5, r1
 8001972:	40d0      	lsrs	r0, r2
 8001974:	1e79      	subs	r1, r7, #1
 8001976:	418f      	sbcs	r7, r1
 8001978:	4305      	orrs	r5, r0
 800197a:	433d      	orrs	r5, r7
 800197c:	4667      	mov	r7, ip
 800197e:	40d7      	lsrs	r7, r2
 8001980:	19db      	adds	r3, r3, r7
 8001982:	e794      	b.n	80018ae <__aeabi_dadd+0x3f2>
 8001984:	4a80      	ldr	r2, [pc, #512]	; (8001b88 <__aeabi_dadd+0x6cc>)
 8001986:	4290      	cmp	r0, r2
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x4d0>
 800198a:	e0ec      	b.n	8001b66 <__aeabi_dadd+0x6aa>
 800198c:	0039      	movs	r1, r7
 800198e:	4449      	add	r1, r9
 8001990:	4549      	cmp	r1, r9
 8001992:	4192      	sbcs	r2, r2
 8001994:	4463      	add	r3, ip
 8001996:	4252      	negs	r2, r2
 8001998:	189b      	adds	r3, r3, r2
 800199a:	07dd      	lsls	r5, r3, #31
 800199c:	0849      	lsrs	r1, r1, #1
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	4698      	mov	r8, r3
 80019a2:	0006      	movs	r6, r0
 80019a4:	430d      	orrs	r5, r1
 80019a6:	e6a5      	b.n	80016f4 <__aeabi_dadd+0x238>
 80019a8:	464a      	mov	r2, r9
 80019aa:	1abd      	subs	r5, r7, r2
 80019ac:	42af      	cmp	r7, r5
 80019ae:	4189      	sbcs	r1, r1
 80019b0:	4662      	mov	r2, ip
 80019b2:	4249      	negs	r1, r1
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	1a5b      	subs	r3, r3, r1
 80019b8:	4698      	mov	r8, r3
 80019ba:	4654      	mov	r4, sl
 80019bc:	e5d1      	b.n	8001562 <__aeabi_dadd+0xa6>
 80019be:	076c      	lsls	r4, r5, #29
 80019c0:	08f9      	lsrs	r1, r7, #3
 80019c2:	4321      	orrs	r1, r4
 80019c4:	08eb      	lsrs	r3, r5, #3
 80019c6:	0004      	movs	r4, r0
 80019c8:	e69d      	b.n	8001706 <__aeabi_dadd+0x24a>
 80019ca:	464a      	mov	r2, r9
 80019cc:	431a      	orrs	r2, r3
 80019ce:	d175      	bne.n	8001abc <__aeabi_dadd+0x600>
 80019d0:	4661      	mov	r1, ip
 80019d2:	4339      	orrs	r1, r7
 80019d4:	d114      	bne.n	8001a00 <__aeabi_dadd+0x544>
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	2400      	movs	r4, #0
 80019da:	031b      	lsls	r3, r3, #12
 80019dc:	e6bc      	b.n	8001758 <__aeabi_dadd+0x29c>
 80019de:	464a      	mov	r2, r9
 80019e0:	1bd5      	subs	r5, r2, r7
 80019e2:	45a9      	cmp	r9, r5
 80019e4:	4189      	sbcs	r1, r1
 80019e6:	4662      	mov	r2, ip
 80019e8:	4249      	negs	r1, r1
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	1a5b      	subs	r3, r3, r1
 80019ee:	4698      	mov	r8, r3
 80019f0:	2601      	movs	r6, #1
 80019f2:	e5ae      	b.n	8001552 <__aeabi_dadd+0x96>
 80019f4:	464a      	mov	r2, r9
 80019f6:	08d1      	lsrs	r1, r2, #3
 80019f8:	075a      	lsls	r2, r3, #29
 80019fa:	4311      	orrs	r1, r2
 80019fc:	08db      	lsrs	r3, r3, #3
 80019fe:	e6a7      	b.n	8001750 <__aeabi_dadd+0x294>
 8001a00:	4663      	mov	r3, ip
 8001a02:	08f9      	lsrs	r1, r7, #3
 8001a04:	075a      	lsls	r2, r3, #29
 8001a06:	4654      	mov	r4, sl
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	08db      	lsrs	r3, r3, #3
 8001a0c:	e6a0      	b.n	8001750 <__aeabi_dadd+0x294>
 8001a0e:	464a      	mov	r2, r9
 8001a10:	4313      	orrs	r3, r2
 8001a12:	001d      	movs	r5, r3
 8001a14:	1e6b      	subs	r3, r5, #1
 8001a16:	419d      	sbcs	r5, r3
 8001a18:	e6c7      	b.n	80017aa <__aeabi_dadd+0x2ee>
 8001a1a:	0014      	movs	r4, r2
 8001a1c:	001e      	movs	r6, r3
 8001a1e:	3c20      	subs	r4, #32
 8001a20:	40e6      	lsrs	r6, r4
 8001a22:	2a20      	cmp	r2, #32
 8001a24:	d005      	beq.n	8001a32 <__aeabi_dadd+0x576>
 8001a26:	2440      	movs	r4, #64	; 0x40
 8001a28:	1aa2      	subs	r2, r4, r2
 8001a2a:	4093      	lsls	r3, r2
 8001a2c:	464a      	mov	r2, r9
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	4691      	mov	r9, r2
 8001a32:	464d      	mov	r5, r9
 8001a34:	1e6b      	subs	r3, r5, #1
 8001a36:	419d      	sbcs	r5, r3
 8001a38:	4335      	orrs	r5, r6
 8001a3a:	e778      	b.n	800192e <__aeabi_dadd+0x472>
 8001a3c:	464a      	mov	r2, r9
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	d000      	beq.n	8001a44 <__aeabi_dadd+0x588>
 8001a42:	e66b      	b.n	800171c <__aeabi_dadd+0x260>
 8001a44:	076b      	lsls	r3, r5, #29
 8001a46:	08f9      	lsrs	r1, r7, #3
 8001a48:	4319      	orrs	r1, r3
 8001a4a:	08eb      	lsrs	r3, r5, #3
 8001a4c:	e680      	b.n	8001750 <__aeabi_dadd+0x294>
 8001a4e:	4661      	mov	r1, ip
 8001a50:	4339      	orrs	r1, r7
 8001a52:	d054      	beq.n	8001afe <__aeabi_dadd+0x642>
 8001a54:	4663      	mov	r3, ip
 8001a56:	08f9      	lsrs	r1, r7, #3
 8001a58:	075c      	lsls	r4, r3, #29
 8001a5a:	4321      	orrs	r1, r4
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	0004      	movs	r4, r0
 8001a60:	e654      	b.n	800170c <__aeabi_dadd+0x250>
 8001a62:	464a      	mov	r2, r9
 8001a64:	1abd      	subs	r5, r7, r2
 8001a66:	42af      	cmp	r7, r5
 8001a68:	4189      	sbcs	r1, r1
 8001a6a:	4662      	mov	r2, ip
 8001a6c:	4249      	negs	r1, r1
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	1a5b      	subs	r3, r3, r1
 8001a72:	4698      	mov	r8, r3
 8001a74:	0004      	movs	r4, r0
 8001a76:	2601      	movs	r6, #1
 8001a78:	e56b      	b.n	8001552 <__aeabi_dadd+0x96>
 8001a7a:	464a      	mov	r2, r9
 8001a7c:	1bd5      	subs	r5, r2, r7
 8001a7e:	45a9      	cmp	r9, r5
 8001a80:	4189      	sbcs	r1, r1
 8001a82:	4662      	mov	r2, ip
 8001a84:	4249      	negs	r1, r1
 8001a86:	1a9a      	subs	r2, r3, r2
 8001a88:	1a52      	subs	r2, r2, r1
 8001a8a:	4690      	mov	r8, r2
 8001a8c:	0212      	lsls	r2, r2, #8
 8001a8e:	d532      	bpl.n	8001af6 <__aeabi_dadd+0x63a>
 8001a90:	464a      	mov	r2, r9
 8001a92:	1abd      	subs	r5, r7, r2
 8001a94:	42af      	cmp	r7, r5
 8001a96:	4189      	sbcs	r1, r1
 8001a98:	4662      	mov	r2, ip
 8001a9a:	4249      	negs	r1, r1
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	1a5b      	subs	r3, r3, r1
 8001aa0:	4698      	mov	r8, r3
 8001aa2:	0004      	movs	r4, r0
 8001aa4:	e584      	b.n	80015b0 <__aeabi_dadd+0xf4>
 8001aa6:	4663      	mov	r3, ip
 8001aa8:	08f9      	lsrs	r1, r7, #3
 8001aaa:	075a      	lsls	r2, r3, #29
 8001aac:	4311      	orrs	r1, r2
 8001aae:	08db      	lsrs	r3, r3, #3
 8001ab0:	e64e      	b.n	8001750 <__aeabi_dadd+0x294>
 8001ab2:	08f9      	lsrs	r1, r7, #3
 8001ab4:	0768      	lsls	r0, r5, #29
 8001ab6:	4301      	orrs	r1, r0
 8001ab8:	08eb      	lsrs	r3, r5, #3
 8001aba:	e624      	b.n	8001706 <__aeabi_dadd+0x24a>
 8001abc:	4662      	mov	r2, ip
 8001abe:	433a      	orrs	r2, r7
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dadd+0x608>
 8001ac2:	e698      	b.n	80017f6 <__aeabi_dadd+0x33a>
 8001ac4:	464a      	mov	r2, r9
 8001ac6:	08d1      	lsrs	r1, r2, #3
 8001ac8:	075a      	lsls	r2, r3, #29
 8001aca:	4311      	orrs	r1, r2
 8001acc:	08da      	lsrs	r2, r3, #3
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	031b      	lsls	r3, r3, #12
 8001ad2:	421a      	tst	r2, r3
 8001ad4:	d008      	beq.n	8001ae8 <__aeabi_dadd+0x62c>
 8001ad6:	4660      	mov	r0, ip
 8001ad8:	08c5      	lsrs	r5, r0, #3
 8001ada:	421d      	tst	r5, r3
 8001adc:	d104      	bne.n	8001ae8 <__aeabi_dadd+0x62c>
 8001ade:	4654      	mov	r4, sl
 8001ae0:	002a      	movs	r2, r5
 8001ae2:	08f9      	lsrs	r1, r7, #3
 8001ae4:	0743      	lsls	r3, r0, #29
 8001ae6:	4319      	orrs	r1, r3
 8001ae8:	0f4b      	lsrs	r3, r1, #29
 8001aea:	00c9      	lsls	r1, r1, #3
 8001aec:	075b      	lsls	r3, r3, #29
 8001aee:	08c9      	lsrs	r1, r1, #3
 8001af0:	4319      	orrs	r1, r3
 8001af2:	0013      	movs	r3, r2
 8001af4:	e62c      	b.n	8001750 <__aeabi_dadd+0x294>
 8001af6:	4641      	mov	r1, r8
 8001af8:	4329      	orrs	r1, r5
 8001afa:	d000      	beq.n	8001afe <__aeabi_dadd+0x642>
 8001afc:	e5fa      	b.n	80016f4 <__aeabi_dadd+0x238>
 8001afe:	2300      	movs	r3, #0
 8001b00:	000a      	movs	r2, r1
 8001b02:	2400      	movs	r4, #0
 8001b04:	e602      	b.n	800170c <__aeabi_dadd+0x250>
 8001b06:	076b      	lsls	r3, r5, #29
 8001b08:	08f9      	lsrs	r1, r7, #3
 8001b0a:	4319      	orrs	r1, r3
 8001b0c:	08eb      	lsrs	r3, r5, #3
 8001b0e:	e5fd      	b.n	800170c <__aeabi_dadd+0x250>
 8001b10:	4663      	mov	r3, ip
 8001b12:	08f9      	lsrs	r1, r7, #3
 8001b14:	075b      	lsls	r3, r3, #29
 8001b16:	4319      	orrs	r1, r3
 8001b18:	4663      	mov	r3, ip
 8001b1a:	0004      	movs	r4, r0
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	e617      	b.n	8001750 <__aeabi_dadd+0x294>
 8001b20:	003d      	movs	r5, r7
 8001b22:	444d      	add	r5, r9
 8001b24:	4463      	add	r3, ip
 8001b26:	454d      	cmp	r5, r9
 8001b28:	4189      	sbcs	r1, r1
 8001b2a:	4698      	mov	r8, r3
 8001b2c:	4249      	negs	r1, r1
 8001b2e:	4488      	add	r8, r1
 8001b30:	4643      	mov	r3, r8
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	d400      	bmi.n	8001b38 <__aeabi_dadd+0x67c>
 8001b36:	e5dd      	b.n	80016f4 <__aeabi_dadd+0x238>
 8001b38:	4642      	mov	r2, r8
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <__aeabi_dadd+0x6d0>)
 8001b3c:	2601      	movs	r6, #1
 8001b3e:	401a      	ands	r2, r3
 8001b40:	4690      	mov	r8, r2
 8001b42:	e5d7      	b.n	80016f4 <__aeabi_dadd+0x238>
 8001b44:	0010      	movs	r0, r2
 8001b46:	001e      	movs	r6, r3
 8001b48:	3820      	subs	r0, #32
 8001b4a:	40c6      	lsrs	r6, r0
 8001b4c:	2a20      	cmp	r2, #32
 8001b4e:	d005      	beq.n	8001b5c <__aeabi_dadd+0x6a0>
 8001b50:	2040      	movs	r0, #64	; 0x40
 8001b52:	1a82      	subs	r2, r0, r2
 8001b54:	4093      	lsls	r3, r2
 8001b56:	464a      	mov	r2, r9
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	4691      	mov	r9, r2
 8001b5c:	464d      	mov	r5, r9
 8001b5e:	1e6b      	subs	r3, r5, #1
 8001b60:	419d      	sbcs	r5, r3
 8001b62:	4335      	orrs	r5, r6
 8001b64:	e621      	b.n	80017aa <__aeabi_dadd+0x2ee>
 8001b66:	0002      	movs	r2, r0
 8001b68:	2300      	movs	r3, #0
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	e540      	b.n	80015f0 <__aeabi_dadd+0x134>
 8001b6e:	464a      	mov	r2, r9
 8001b70:	19d5      	adds	r5, r2, r7
 8001b72:	42bd      	cmp	r5, r7
 8001b74:	4189      	sbcs	r1, r1
 8001b76:	4463      	add	r3, ip
 8001b78:	4698      	mov	r8, r3
 8001b7a:	4249      	negs	r1, r1
 8001b7c:	4488      	add	r8, r1
 8001b7e:	e5b3      	b.n	80016e8 <__aeabi_dadd+0x22c>
 8001b80:	2100      	movs	r1, #0
 8001b82:	4a01      	ldr	r2, [pc, #4]	; (8001b88 <__aeabi_dadd+0x6cc>)
 8001b84:	000b      	movs	r3, r1
 8001b86:	e533      	b.n	80015f0 <__aeabi_dadd+0x134>
 8001b88:	000007ff 	.word	0x000007ff
 8001b8c:	ff7fffff 	.word	0xff7fffff

08001b90 <__aeabi_ddiv>:
 8001b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b92:	4657      	mov	r7, sl
 8001b94:	464e      	mov	r6, r9
 8001b96:	4645      	mov	r5, r8
 8001b98:	46de      	mov	lr, fp
 8001b9a:	b5e0      	push	{r5, r6, r7, lr}
 8001b9c:	4681      	mov	r9, r0
 8001b9e:	0005      	movs	r5, r0
 8001ba0:	030c      	lsls	r4, r1, #12
 8001ba2:	0048      	lsls	r0, r1, #1
 8001ba4:	4692      	mov	sl, r2
 8001ba6:	001f      	movs	r7, r3
 8001ba8:	b085      	sub	sp, #20
 8001baa:	0b24      	lsrs	r4, r4, #12
 8001bac:	0d40      	lsrs	r0, r0, #21
 8001bae:	0fce      	lsrs	r6, r1, #31
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d059      	beq.n	8001c68 <__aeabi_ddiv+0xd8>
 8001bb4:	4b87      	ldr	r3, [pc, #540]	; (8001dd4 <__aeabi_ddiv+0x244>)
 8001bb6:	4298      	cmp	r0, r3
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_ddiv+0x2c>
 8001bba:	e098      	b.n	8001cee <__aeabi_ddiv+0x15e>
 8001bbc:	0f6b      	lsrs	r3, r5, #29
 8001bbe:	00e4      	lsls	r4, r4, #3
 8001bc0:	431c      	orrs	r4, r3
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	041b      	lsls	r3, r3, #16
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	4698      	mov	r8, r3
 8001bca:	4b83      	ldr	r3, [pc, #524]	; (8001dd8 <__aeabi_ddiv+0x248>)
 8001bcc:	00ed      	lsls	r5, r5, #3
 8001bce:	469b      	mov	fp, r3
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	4699      	mov	r9, r3
 8001bd4:	4483      	add	fp, r0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	033c      	lsls	r4, r7, #12
 8001bda:	007b      	lsls	r3, r7, #1
 8001bdc:	4650      	mov	r0, sl
 8001bde:	0b24      	lsrs	r4, r4, #12
 8001be0:	0d5b      	lsrs	r3, r3, #21
 8001be2:	0fff      	lsrs	r7, r7, #31
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d067      	beq.n	8001cb8 <__aeabi_ddiv+0x128>
 8001be8:	4a7a      	ldr	r2, [pc, #488]	; (8001dd4 <__aeabi_ddiv+0x244>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d018      	beq.n	8001c20 <__aeabi_ddiv+0x90>
 8001bee:	497a      	ldr	r1, [pc, #488]	; (8001dd8 <__aeabi_ddiv+0x248>)
 8001bf0:	0f42      	lsrs	r2, r0, #29
 8001bf2:	468c      	mov	ip, r1
 8001bf4:	00e4      	lsls	r4, r4, #3
 8001bf6:	4659      	mov	r1, fp
 8001bf8:	4314      	orrs	r4, r2
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	4463      	add	r3, ip
 8001bfe:	0412      	lsls	r2, r2, #16
 8001c00:	1acb      	subs	r3, r1, r3
 8001c02:	4314      	orrs	r4, r2
 8001c04:	469b      	mov	fp, r3
 8001c06:	00c2      	lsls	r2, r0, #3
 8001c08:	2000      	movs	r0, #0
 8001c0a:	0033      	movs	r3, r6
 8001c0c:	407b      	eors	r3, r7
 8001c0e:	469a      	mov	sl, r3
 8001c10:	464b      	mov	r3, r9
 8001c12:	2b0f      	cmp	r3, #15
 8001c14:	d900      	bls.n	8001c18 <__aeabi_ddiv+0x88>
 8001c16:	e0ef      	b.n	8001df8 <__aeabi_ddiv+0x268>
 8001c18:	4970      	ldr	r1, [pc, #448]	; (8001ddc <__aeabi_ddiv+0x24c>)
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	58cb      	ldr	r3, [r1, r3]
 8001c1e:	469f      	mov	pc, r3
 8001c20:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <__aeabi_ddiv+0x250>)
 8001c22:	4652      	mov	r2, sl
 8001c24:	469c      	mov	ip, r3
 8001c26:	4322      	orrs	r2, r4
 8001c28:	44e3      	add	fp, ip
 8001c2a:	2a00      	cmp	r2, #0
 8001c2c:	d000      	beq.n	8001c30 <__aeabi_ddiv+0xa0>
 8001c2e:	e095      	b.n	8001d5c <__aeabi_ddiv+0x1cc>
 8001c30:	4649      	mov	r1, r9
 8001c32:	2302      	movs	r3, #2
 8001c34:	4319      	orrs	r1, r3
 8001c36:	4689      	mov	r9, r1
 8001c38:	2400      	movs	r4, #0
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	e7e5      	b.n	8001c0a <__aeabi_ddiv+0x7a>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	2400      	movs	r4, #0
 8001c42:	2500      	movs	r5, #0
 8001c44:	4652      	mov	r2, sl
 8001c46:	051b      	lsls	r3, r3, #20
 8001c48:	4323      	orrs	r3, r4
 8001c4a:	07d2      	lsls	r2, r2, #31
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	0028      	movs	r0, r5
 8001c50:	0019      	movs	r1, r3
 8001c52:	b005      	add	sp, #20
 8001c54:	bcf0      	pop	{r4, r5, r6, r7}
 8001c56:	46bb      	mov	fp, r7
 8001c58:	46b2      	mov	sl, r6
 8001c5a:	46a9      	mov	r9, r5
 8001c5c:	46a0      	mov	r8, r4
 8001c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c60:	2400      	movs	r4, #0
 8001c62:	2500      	movs	r5, #0
 8001c64:	4b5b      	ldr	r3, [pc, #364]	; (8001dd4 <__aeabi_ddiv+0x244>)
 8001c66:	e7ed      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8001c68:	464b      	mov	r3, r9
 8001c6a:	4323      	orrs	r3, r4
 8001c6c:	4698      	mov	r8, r3
 8001c6e:	d100      	bne.n	8001c72 <__aeabi_ddiv+0xe2>
 8001c70:	e089      	b.n	8001d86 <__aeabi_ddiv+0x1f6>
 8001c72:	2c00      	cmp	r4, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_ddiv+0xe8>
 8001c76:	e1e0      	b.n	800203a <__aeabi_ddiv+0x4aa>
 8001c78:	0020      	movs	r0, r4
 8001c7a:	f001 fb07 	bl	800328c <__clzsi2>
 8001c7e:	0001      	movs	r1, r0
 8001c80:	0002      	movs	r2, r0
 8001c82:	390b      	subs	r1, #11
 8001c84:	231d      	movs	r3, #29
 8001c86:	1a5b      	subs	r3, r3, r1
 8001c88:	4649      	mov	r1, r9
 8001c8a:	0010      	movs	r0, r2
 8001c8c:	40d9      	lsrs	r1, r3
 8001c8e:	3808      	subs	r0, #8
 8001c90:	4084      	lsls	r4, r0
 8001c92:	000b      	movs	r3, r1
 8001c94:	464d      	mov	r5, r9
 8001c96:	4323      	orrs	r3, r4
 8001c98:	4698      	mov	r8, r3
 8001c9a:	4085      	lsls	r5, r0
 8001c9c:	4851      	ldr	r0, [pc, #324]	; (8001de4 <__aeabi_ddiv+0x254>)
 8001c9e:	033c      	lsls	r4, r7, #12
 8001ca0:	1a83      	subs	r3, r0, r2
 8001ca2:	469b      	mov	fp, r3
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4699      	mov	r9, r3
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	007b      	lsls	r3, r7, #1
 8001cac:	4650      	mov	r0, sl
 8001cae:	0b24      	lsrs	r4, r4, #12
 8001cb0:	0d5b      	lsrs	r3, r3, #21
 8001cb2:	0fff      	lsrs	r7, r7, #31
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d197      	bne.n	8001be8 <__aeabi_ddiv+0x58>
 8001cb8:	4652      	mov	r2, sl
 8001cba:	4322      	orrs	r2, r4
 8001cbc:	d055      	beq.n	8001d6a <__aeabi_ddiv+0x1da>
 8001cbe:	2c00      	cmp	r4, #0
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_ddiv+0x134>
 8001cc2:	e1ca      	b.n	800205a <__aeabi_ddiv+0x4ca>
 8001cc4:	0020      	movs	r0, r4
 8001cc6:	f001 fae1 	bl	800328c <__clzsi2>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	3a0b      	subs	r2, #11
 8001cce:	231d      	movs	r3, #29
 8001cd0:	0001      	movs	r1, r0
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	4652      	mov	r2, sl
 8001cd6:	3908      	subs	r1, #8
 8001cd8:	40da      	lsrs	r2, r3
 8001cda:	408c      	lsls	r4, r1
 8001cdc:	4314      	orrs	r4, r2
 8001cde:	4652      	mov	r2, sl
 8001ce0:	408a      	lsls	r2, r1
 8001ce2:	4b41      	ldr	r3, [pc, #260]	; (8001de8 <__aeabi_ddiv+0x258>)
 8001ce4:	4458      	add	r0, fp
 8001ce6:	469b      	mov	fp, r3
 8001ce8:	4483      	add	fp, r0
 8001cea:	2000      	movs	r0, #0
 8001cec:	e78d      	b.n	8001c0a <__aeabi_ddiv+0x7a>
 8001cee:	464b      	mov	r3, r9
 8001cf0:	4323      	orrs	r3, r4
 8001cf2:	4698      	mov	r8, r3
 8001cf4:	d140      	bne.n	8001d78 <__aeabi_ddiv+0x1e8>
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	4699      	mov	r9, r3
 8001cfa:	3b06      	subs	r3, #6
 8001cfc:	2500      	movs	r5, #0
 8001cfe:	4683      	mov	fp, r0
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	e769      	b.n	8001bd8 <__aeabi_ddiv+0x48>
 8001d04:	46b2      	mov	sl, r6
 8001d06:	9b00      	ldr	r3, [sp, #0]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d0a9      	beq.n	8001c60 <__aeabi_ddiv+0xd0>
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_ddiv+0x182>
 8001d10:	e211      	b.n	8002136 <__aeabi_ddiv+0x5a6>
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d093      	beq.n	8001c3e <__aeabi_ddiv+0xae>
 8001d16:	4a35      	ldr	r2, [pc, #212]	; (8001dec <__aeabi_ddiv+0x25c>)
 8001d18:	445a      	add	r2, fp
 8001d1a:	2a00      	cmp	r2, #0
 8001d1c:	dc00      	bgt.n	8001d20 <__aeabi_ddiv+0x190>
 8001d1e:	e13c      	b.n	8001f9a <__aeabi_ddiv+0x40a>
 8001d20:	076b      	lsls	r3, r5, #29
 8001d22:	d000      	beq.n	8001d26 <__aeabi_ddiv+0x196>
 8001d24:	e1a7      	b.n	8002076 <__aeabi_ddiv+0x4e6>
 8001d26:	08ed      	lsrs	r5, r5, #3
 8001d28:	4643      	mov	r3, r8
 8001d2a:	01db      	lsls	r3, r3, #7
 8001d2c:	d506      	bpl.n	8001d3c <__aeabi_ddiv+0x1ac>
 8001d2e:	4642      	mov	r2, r8
 8001d30:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <__aeabi_ddiv+0x260>)
 8001d32:	401a      	ands	r2, r3
 8001d34:	4690      	mov	r8, r2
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	00d2      	lsls	r2, r2, #3
 8001d3a:	445a      	add	r2, fp
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <__aeabi_ddiv+0x264>)
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dc8e      	bgt.n	8001c60 <__aeabi_ddiv+0xd0>
 8001d42:	4643      	mov	r3, r8
 8001d44:	0552      	lsls	r2, r2, #21
 8001d46:	0758      	lsls	r0, r3, #29
 8001d48:	025c      	lsls	r4, r3, #9
 8001d4a:	4305      	orrs	r5, r0
 8001d4c:	0b24      	lsrs	r4, r4, #12
 8001d4e:	0d53      	lsrs	r3, r2, #21
 8001d50:	e778      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8001d52:	46ba      	mov	sl, r7
 8001d54:	46a0      	mov	r8, r4
 8001d56:	0015      	movs	r5, r2
 8001d58:	9000      	str	r0, [sp, #0]
 8001d5a:	e7d4      	b.n	8001d06 <__aeabi_ddiv+0x176>
 8001d5c:	464a      	mov	r2, r9
 8001d5e:	2303      	movs	r3, #3
 8001d60:	431a      	orrs	r2, r3
 8001d62:	4691      	mov	r9, r2
 8001d64:	2003      	movs	r0, #3
 8001d66:	4652      	mov	r2, sl
 8001d68:	e74f      	b.n	8001c0a <__aeabi_ddiv+0x7a>
 8001d6a:	4649      	mov	r1, r9
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	4319      	orrs	r1, r3
 8001d70:	4689      	mov	r9, r1
 8001d72:	2400      	movs	r4, #0
 8001d74:	2001      	movs	r0, #1
 8001d76:	e748      	b.n	8001c0a <__aeabi_ddiv+0x7a>
 8001d78:	230c      	movs	r3, #12
 8001d7a:	4699      	mov	r9, r3
 8001d7c:	3b09      	subs	r3, #9
 8001d7e:	46a0      	mov	r8, r4
 8001d80:	4683      	mov	fp, r0
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	e728      	b.n	8001bd8 <__aeabi_ddiv+0x48>
 8001d86:	2304      	movs	r3, #4
 8001d88:	4699      	mov	r9, r3
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	469b      	mov	fp, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	2500      	movs	r5, #0
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	e720      	b.n	8001bd8 <__aeabi_ddiv+0x48>
 8001d96:	2300      	movs	r3, #0
 8001d98:	2480      	movs	r4, #128	; 0x80
 8001d9a:	469a      	mov	sl, r3
 8001d9c:	2500      	movs	r5, #0
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <__aeabi_ddiv+0x244>)
 8001da0:	0324      	lsls	r4, r4, #12
 8001da2:	e74f      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	4641      	mov	r1, r8
 8001da8:	031b      	lsls	r3, r3, #12
 8001daa:	4219      	tst	r1, r3
 8001dac:	d008      	beq.n	8001dc0 <__aeabi_ddiv+0x230>
 8001dae:	421c      	tst	r4, r3
 8001db0:	d106      	bne.n	8001dc0 <__aeabi_ddiv+0x230>
 8001db2:	431c      	orrs	r4, r3
 8001db4:	0324      	lsls	r4, r4, #12
 8001db6:	46ba      	mov	sl, r7
 8001db8:	0015      	movs	r5, r2
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <__aeabi_ddiv+0x244>)
 8001dbc:	0b24      	lsrs	r4, r4, #12
 8001dbe:	e741      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8001dc0:	2480      	movs	r4, #128	; 0x80
 8001dc2:	4643      	mov	r3, r8
 8001dc4:	0324      	lsls	r4, r4, #12
 8001dc6:	431c      	orrs	r4, r3
 8001dc8:	0324      	lsls	r4, r4, #12
 8001dca:	46b2      	mov	sl, r6
 8001dcc:	4b01      	ldr	r3, [pc, #4]	; (8001dd4 <__aeabi_ddiv+0x244>)
 8001dce:	0b24      	lsrs	r4, r4, #12
 8001dd0:	e738      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	000007ff 	.word	0x000007ff
 8001dd8:	fffffc01 	.word	0xfffffc01
 8001ddc:	0800e8c8 	.word	0x0800e8c8
 8001de0:	fffff801 	.word	0xfffff801
 8001de4:	fffffc0d 	.word	0xfffffc0d
 8001de8:	000003f3 	.word	0x000003f3
 8001dec:	000003ff 	.word	0x000003ff
 8001df0:	feffffff 	.word	0xfeffffff
 8001df4:	000007fe 	.word	0x000007fe
 8001df8:	4544      	cmp	r4, r8
 8001dfa:	d200      	bcs.n	8001dfe <__aeabi_ddiv+0x26e>
 8001dfc:	e116      	b.n	800202c <__aeabi_ddiv+0x49c>
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_ddiv+0x272>
 8001e00:	e111      	b.n	8002026 <__aeabi_ddiv+0x496>
 8001e02:	2301      	movs	r3, #1
 8001e04:	425b      	negs	r3, r3
 8001e06:	469c      	mov	ip, r3
 8001e08:	002e      	movs	r6, r5
 8001e0a:	4640      	mov	r0, r8
 8001e0c:	2500      	movs	r5, #0
 8001e0e:	44e3      	add	fp, ip
 8001e10:	0223      	lsls	r3, r4, #8
 8001e12:	0e14      	lsrs	r4, r2, #24
 8001e14:	431c      	orrs	r4, r3
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	4699      	mov	r9, r3
 8001e1a:	0423      	lsls	r3, r4, #16
 8001e1c:	0c1f      	lsrs	r7, r3, #16
 8001e1e:	0212      	lsls	r2, r2, #8
 8001e20:	4649      	mov	r1, r9
 8001e22:	9200      	str	r2, [sp, #0]
 8001e24:	9701      	str	r7, [sp, #4]
 8001e26:	f7fe fa11 	bl	800024c <__aeabi_uidivmod>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	437a      	muls	r2, r7
 8001e2e:	040b      	lsls	r3, r1, #16
 8001e30:	0c31      	lsrs	r1, r6, #16
 8001e32:	4680      	mov	r8, r0
 8001e34:	4319      	orrs	r1, r3
 8001e36:	428a      	cmp	r2, r1
 8001e38:	d90b      	bls.n	8001e52 <__aeabi_ddiv+0x2c2>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	425b      	negs	r3, r3
 8001e3e:	469c      	mov	ip, r3
 8001e40:	1909      	adds	r1, r1, r4
 8001e42:	44e0      	add	r8, ip
 8001e44:	428c      	cmp	r4, r1
 8001e46:	d804      	bhi.n	8001e52 <__aeabi_ddiv+0x2c2>
 8001e48:	428a      	cmp	r2, r1
 8001e4a:	d902      	bls.n	8001e52 <__aeabi_ddiv+0x2c2>
 8001e4c:	1e83      	subs	r3, r0, #2
 8001e4e:	4698      	mov	r8, r3
 8001e50:	1909      	adds	r1, r1, r4
 8001e52:	1a88      	subs	r0, r1, r2
 8001e54:	4649      	mov	r1, r9
 8001e56:	f7fe f9f9 	bl	800024c <__aeabi_uidivmod>
 8001e5a:	0409      	lsls	r1, r1, #16
 8001e5c:	468c      	mov	ip, r1
 8001e5e:	0431      	lsls	r1, r6, #16
 8001e60:	4666      	mov	r6, ip
 8001e62:	9a01      	ldr	r2, [sp, #4]
 8001e64:	0c09      	lsrs	r1, r1, #16
 8001e66:	4342      	muls	r2, r0
 8001e68:	0003      	movs	r3, r0
 8001e6a:	4331      	orrs	r1, r6
 8001e6c:	428a      	cmp	r2, r1
 8001e6e:	d904      	bls.n	8001e7a <__aeabi_ddiv+0x2ea>
 8001e70:	1909      	adds	r1, r1, r4
 8001e72:	3b01      	subs	r3, #1
 8001e74:	428c      	cmp	r4, r1
 8001e76:	d800      	bhi.n	8001e7a <__aeabi_ddiv+0x2ea>
 8001e78:	e111      	b.n	800209e <__aeabi_ddiv+0x50e>
 8001e7a:	1a89      	subs	r1, r1, r2
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	9e00      	ldr	r6, [sp, #0]
 8001e80:	0412      	lsls	r2, r2, #16
 8001e82:	431a      	orrs	r2, r3
 8001e84:	0c33      	lsrs	r3, r6, #16
 8001e86:	001f      	movs	r7, r3
 8001e88:	0c10      	lsrs	r0, r2, #16
 8001e8a:	4690      	mov	r8, r2
 8001e8c:	9302      	str	r3, [sp, #8]
 8001e8e:	0413      	lsls	r3, r2, #16
 8001e90:	0432      	lsls	r2, r6, #16
 8001e92:	0c16      	lsrs	r6, r2, #16
 8001e94:	0032      	movs	r2, r6
 8001e96:	0c1b      	lsrs	r3, r3, #16
 8001e98:	435a      	muls	r2, r3
 8001e9a:	9603      	str	r6, [sp, #12]
 8001e9c:	437b      	muls	r3, r7
 8001e9e:	4346      	muls	r6, r0
 8001ea0:	4378      	muls	r0, r7
 8001ea2:	0c17      	lsrs	r7, r2, #16
 8001ea4:	46bc      	mov	ip, r7
 8001ea6:	199b      	adds	r3, r3, r6
 8001ea8:	4463      	add	r3, ip
 8001eaa:	429e      	cmp	r6, r3
 8001eac:	d903      	bls.n	8001eb6 <__aeabi_ddiv+0x326>
 8001eae:	2680      	movs	r6, #128	; 0x80
 8001eb0:	0276      	lsls	r6, r6, #9
 8001eb2:	46b4      	mov	ip, r6
 8001eb4:	4460      	add	r0, ip
 8001eb6:	0c1e      	lsrs	r6, r3, #16
 8001eb8:	1830      	adds	r0, r6, r0
 8001eba:	0416      	lsls	r6, r2, #16
 8001ebc:	041b      	lsls	r3, r3, #16
 8001ebe:	0c36      	lsrs	r6, r6, #16
 8001ec0:	199e      	adds	r6, r3, r6
 8001ec2:	4281      	cmp	r1, r0
 8001ec4:	d200      	bcs.n	8001ec8 <__aeabi_ddiv+0x338>
 8001ec6:	e09c      	b.n	8002002 <__aeabi_ddiv+0x472>
 8001ec8:	d100      	bne.n	8001ecc <__aeabi_ddiv+0x33c>
 8001eca:	e097      	b.n	8001ffc <__aeabi_ddiv+0x46c>
 8001ecc:	1bae      	subs	r6, r5, r6
 8001ece:	1a09      	subs	r1, r1, r0
 8001ed0:	42b5      	cmp	r5, r6
 8001ed2:	4180      	sbcs	r0, r0
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	1a08      	subs	r0, r1, r0
 8001ed8:	4284      	cmp	r4, r0
 8001eda:	d100      	bne.n	8001ede <__aeabi_ddiv+0x34e>
 8001edc:	e111      	b.n	8002102 <__aeabi_ddiv+0x572>
 8001ede:	4649      	mov	r1, r9
 8001ee0:	f7fe f9b4 	bl	800024c <__aeabi_uidivmod>
 8001ee4:	9a01      	ldr	r2, [sp, #4]
 8001ee6:	040b      	lsls	r3, r1, #16
 8001ee8:	4342      	muls	r2, r0
 8001eea:	0c31      	lsrs	r1, r6, #16
 8001eec:	0005      	movs	r5, r0
 8001eee:	4319      	orrs	r1, r3
 8001ef0:	428a      	cmp	r2, r1
 8001ef2:	d907      	bls.n	8001f04 <__aeabi_ddiv+0x374>
 8001ef4:	1909      	adds	r1, r1, r4
 8001ef6:	3d01      	subs	r5, #1
 8001ef8:	428c      	cmp	r4, r1
 8001efa:	d803      	bhi.n	8001f04 <__aeabi_ddiv+0x374>
 8001efc:	428a      	cmp	r2, r1
 8001efe:	d901      	bls.n	8001f04 <__aeabi_ddiv+0x374>
 8001f00:	1e85      	subs	r5, r0, #2
 8001f02:	1909      	adds	r1, r1, r4
 8001f04:	1a88      	subs	r0, r1, r2
 8001f06:	4649      	mov	r1, r9
 8001f08:	f7fe f9a0 	bl	800024c <__aeabi_uidivmod>
 8001f0c:	0409      	lsls	r1, r1, #16
 8001f0e:	468c      	mov	ip, r1
 8001f10:	0431      	lsls	r1, r6, #16
 8001f12:	4666      	mov	r6, ip
 8001f14:	9a01      	ldr	r2, [sp, #4]
 8001f16:	0c09      	lsrs	r1, r1, #16
 8001f18:	4342      	muls	r2, r0
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	4331      	orrs	r1, r6
 8001f1e:	428a      	cmp	r2, r1
 8001f20:	d907      	bls.n	8001f32 <__aeabi_ddiv+0x3a2>
 8001f22:	1909      	adds	r1, r1, r4
 8001f24:	3b01      	subs	r3, #1
 8001f26:	428c      	cmp	r4, r1
 8001f28:	d803      	bhi.n	8001f32 <__aeabi_ddiv+0x3a2>
 8001f2a:	428a      	cmp	r2, r1
 8001f2c:	d901      	bls.n	8001f32 <__aeabi_ddiv+0x3a2>
 8001f2e:	1e83      	subs	r3, r0, #2
 8001f30:	1909      	adds	r1, r1, r4
 8001f32:	9e03      	ldr	r6, [sp, #12]
 8001f34:	1a89      	subs	r1, r1, r2
 8001f36:	0032      	movs	r2, r6
 8001f38:	042d      	lsls	r5, r5, #16
 8001f3a:	431d      	orrs	r5, r3
 8001f3c:	9f02      	ldr	r7, [sp, #8]
 8001f3e:	042b      	lsls	r3, r5, #16
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	435a      	muls	r2, r3
 8001f44:	437b      	muls	r3, r7
 8001f46:	469c      	mov	ip, r3
 8001f48:	0c28      	lsrs	r0, r5, #16
 8001f4a:	4346      	muls	r6, r0
 8001f4c:	0c13      	lsrs	r3, r2, #16
 8001f4e:	44b4      	add	ip, r6
 8001f50:	4463      	add	r3, ip
 8001f52:	4378      	muls	r0, r7
 8001f54:	429e      	cmp	r6, r3
 8001f56:	d903      	bls.n	8001f60 <__aeabi_ddiv+0x3d0>
 8001f58:	2680      	movs	r6, #128	; 0x80
 8001f5a:	0276      	lsls	r6, r6, #9
 8001f5c:	46b4      	mov	ip, r6
 8001f5e:	4460      	add	r0, ip
 8001f60:	0c1e      	lsrs	r6, r3, #16
 8001f62:	0412      	lsls	r2, r2, #16
 8001f64:	041b      	lsls	r3, r3, #16
 8001f66:	0c12      	lsrs	r2, r2, #16
 8001f68:	1830      	adds	r0, r6, r0
 8001f6a:	189b      	adds	r3, r3, r2
 8001f6c:	4281      	cmp	r1, r0
 8001f6e:	d306      	bcc.n	8001f7e <__aeabi_ddiv+0x3ee>
 8001f70:	d002      	beq.n	8001f78 <__aeabi_ddiv+0x3e8>
 8001f72:	2301      	movs	r3, #1
 8001f74:	431d      	orrs	r5, r3
 8001f76:	e6ce      	b.n	8001d16 <__aeabi_ddiv+0x186>
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_ddiv+0x3ee>
 8001f7c:	e6cb      	b.n	8001d16 <__aeabi_ddiv+0x186>
 8001f7e:	1861      	adds	r1, r4, r1
 8001f80:	1e6e      	subs	r6, r5, #1
 8001f82:	42a1      	cmp	r1, r4
 8001f84:	d200      	bcs.n	8001f88 <__aeabi_ddiv+0x3f8>
 8001f86:	e0a4      	b.n	80020d2 <__aeabi_ddiv+0x542>
 8001f88:	4281      	cmp	r1, r0
 8001f8a:	d200      	bcs.n	8001f8e <__aeabi_ddiv+0x3fe>
 8001f8c:	e0c9      	b.n	8002122 <__aeabi_ddiv+0x592>
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_ddiv+0x402>
 8001f90:	e0d9      	b.n	8002146 <__aeabi_ddiv+0x5b6>
 8001f92:	0035      	movs	r5, r6
 8001f94:	e7ed      	b.n	8001f72 <__aeabi_ddiv+0x3e2>
 8001f96:	2501      	movs	r5, #1
 8001f98:	426d      	negs	r5, r5
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	1a89      	subs	r1, r1, r2
 8001f9e:	2938      	cmp	r1, #56	; 0x38
 8001fa0:	dd00      	ble.n	8001fa4 <__aeabi_ddiv+0x414>
 8001fa2:	e64c      	b.n	8001c3e <__aeabi_ddiv+0xae>
 8001fa4:	291f      	cmp	r1, #31
 8001fa6:	dc00      	bgt.n	8001faa <__aeabi_ddiv+0x41a>
 8001fa8:	e07f      	b.n	80020aa <__aeabi_ddiv+0x51a>
 8001faa:	231f      	movs	r3, #31
 8001fac:	425b      	negs	r3, r3
 8001fae:	1a9a      	subs	r2, r3, r2
 8001fb0:	4643      	mov	r3, r8
 8001fb2:	40d3      	lsrs	r3, r2
 8001fb4:	2920      	cmp	r1, #32
 8001fb6:	d004      	beq.n	8001fc2 <__aeabi_ddiv+0x432>
 8001fb8:	4644      	mov	r4, r8
 8001fba:	4a65      	ldr	r2, [pc, #404]	; (8002150 <__aeabi_ddiv+0x5c0>)
 8001fbc:	445a      	add	r2, fp
 8001fbe:	4094      	lsls	r4, r2
 8001fc0:	4325      	orrs	r5, r4
 8001fc2:	1e6a      	subs	r2, r5, #1
 8001fc4:	4195      	sbcs	r5, r2
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	432b      	orrs	r3, r5
 8001fca:	0015      	movs	r5, r2
 8001fcc:	2400      	movs	r4, #0
 8001fce:	401d      	ands	r5, r3
 8001fd0:	421a      	tst	r2, r3
 8001fd2:	d100      	bne.n	8001fd6 <__aeabi_ddiv+0x446>
 8001fd4:	e0a1      	b.n	800211a <__aeabi_ddiv+0x58a>
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	2400      	movs	r4, #0
 8001fda:	401a      	ands	r2, r3
 8001fdc:	2a04      	cmp	r2, #4
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_ddiv+0x452>
 8001fe0:	e098      	b.n	8002114 <__aeabi_ddiv+0x584>
 8001fe2:	1d1a      	adds	r2, r3, #4
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	419b      	sbcs	r3, r3
 8001fe8:	425b      	negs	r3, r3
 8001fea:	18e4      	adds	r4, r4, r3
 8001fec:	0013      	movs	r3, r2
 8001fee:	0222      	lsls	r2, r4, #8
 8001ff0:	d400      	bmi.n	8001ff4 <__aeabi_ddiv+0x464>
 8001ff2:	e08f      	b.n	8002114 <__aeabi_ddiv+0x584>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	2400      	movs	r4, #0
 8001ff8:	2500      	movs	r5, #0
 8001ffa:	e623      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8001ffc:	42b5      	cmp	r5, r6
 8001ffe:	d300      	bcc.n	8002002 <__aeabi_ddiv+0x472>
 8002000:	e764      	b.n	8001ecc <__aeabi_ddiv+0x33c>
 8002002:	4643      	mov	r3, r8
 8002004:	1e5a      	subs	r2, r3, #1
 8002006:	9b00      	ldr	r3, [sp, #0]
 8002008:	469c      	mov	ip, r3
 800200a:	4465      	add	r5, ip
 800200c:	001f      	movs	r7, r3
 800200e:	429d      	cmp	r5, r3
 8002010:	419b      	sbcs	r3, r3
 8002012:	425b      	negs	r3, r3
 8002014:	191b      	adds	r3, r3, r4
 8002016:	18c9      	adds	r1, r1, r3
 8002018:	428c      	cmp	r4, r1
 800201a:	d23a      	bcs.n	8002092 <__aeabi_ddiv+0x502>
 800201c:	4288      	cmp	r0, r1
 800201e:	d863      	bhi.n	80020e8 <__aeabi_ddiv+0x558>
 8002020:	d060      	beq.n	80020e4 <__aeabi_ddiv+0x554>
 8002022:	4690      	mov	r8, r2
 8002024:	e752      	b.n	8001ecc <__aeabi_ddiv+0x33c>
 8002026:	42aa      	cmp	r2, r5
 8002028:	d900      	bls.n	800202c <__aeabi_ddiv+0x49c>
 800202a:	e6ea      	b.n	8001e02 <__aeabi_ddiv+0x272>
 800202c:	4643      	mov	r3, r8
 800202e:	07de      	lsls	r6, r3, #31
 8002030:	0858      	lsrs	r0, r3, #1
 8002032:	086b      	lsrs	r3, r5, #1
 8002034:	431e      	orrs	r6, r3
 8002036:	07ed      	lsls	r5, r5, #31
 8002038:	e6ea      	b.n	8001e10 <__aeabi_ddiv+0x280>
 800203a:	4648      	mov	r0, r9
 800203c:	f001 f926 	bl	800328c <__clzsi2>
 8002040:	0001      	movs	r1, r0
 8002042:	0002      	movs	r2, r0
 8002044:	3115      	adds	r1, #21
 8002046:	3220      	adds	r2, #32
 8002048:	291c      	cmp	r1, #28
 800204a:	dc00      	bgt.n	800204e <__aeabi_ddiv+0x4be>
 800204c:	e61a      	b.n	8001c84 <__aeabi_ddiv+0xf4>
 800204e:	464b      	mov	r3, r9
 8002050:	3808      	subs	r0, #8
 8002052:	4083      	lsls	r3, r0
 8002054:	2500      	movs	r5, #0
 8002056:	4698      	mov	r8, r3
 8002058:	e620      	b.n	8001c9c <__aeabi_ddiv+0x10c>
 800205a:	f001 f917 	bl	800328c <__clzsi2>
 800205e:	0003      	movs	r3, r0
 8002060:	001a      	movs	r2, r3
 8002062:	3215      	adds	r2, #21
 8002064:	3020      	adds	r0, #32
 8002066:	2a1c      	cmp	r2, #28
 8002068:	dc00      	bgt.n	800206c <__aeabi_ddiv+0x4dc>
 800206a:	e630      	b.n	8001cce <__aeabi_ddiv+0x13e>
 800206c:	4654      	mov	r4, sl
 800206e:	3b08      	subs	r3, #8
 8002070:	2200      	movs	r2, #0
 8002072:	409c      	lsls	r4, r3
 8002074:	e635      	b.n	8001ce2 <__aeabi_ddiv+0x152>
 8002076:	230f      	movs	r3, #15
 8002078:	402b      	ands	r3, r5
 800207a:	2b04      	cmp	r3, #4
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x4f0>
 800207e:	e652      	b.n	8001d26 <__aeabi_ddiv+0x196>
 8002080:	2305      	movs	r3, #5
 8002082:	425b      	negs	r3, r3
 8002084:	42ab      	cmp	r3, r5
 8002086:	419b      	sbcs	r3, r3
 8002088:	3504      	adds	r5, #4
 800208a:	425b      	negs	r3, r3
 800208c:	08ed      	lsrs	r5, r5, #3
 800208e:	4498      	add	r8, r3
 8002090:	e64a      	b.n	8001d28 <__aeabi_ddiv+0x198>
 8002092:	428c      	cmp	r4, r1
 8002094:	d1c5      	bne.n	8002022 <__aeabi_ddiv+0x492>
 8002096:	42af      	cmp	r7, r5
 8002098:	d9c0      	bls.n	800201c <__aeabi_ddiv+0x48c>
 800209a:	4690      	mov	r8, r2
 800209c:	e716      	b.n	8001ecc <__aeabi_ddiv+0x33c>
 800209e:	428a      	cmp	r2, r1
 80020a0:	d800      	bhi.n	80020a4 <__aeabi_ddiv+0x514>
 80020a2:	e6ea      	b.n	8001e7a <__aeabi_ddiv+0x2ea>
 80020a4:	1e83      	subs	r3, r0, #2
 80020a6:	1909      	adds	r1, r1, r4
 80020a8:	e6e7      	b.n	8001e7a <__aeabi_ddiv+0x2ea>
 80020aa:	4a2a      	ldr	r2, [pc, #168]	; (8002154 <__aeabi_ddiv+0x5c4>)
 80020ac:	0028      	movs	r0, r5
 80020ae:	445a      	add	r2, fp
 80020b0:	4643      	mov	r3, r8
 80020b2:	4095      	lsls	r5, r2
 80020b4:	4093      	lsls	r3, r2
 80020b6:	40c8      	lsrs	r0, r1
 80020b8:	1e6a      	subs	r2, r5, #1
 80020ba:	4195      	sbcs	r5, r2
 80020bc:	4644      	mov	r4, r8
 80020be:	4303      	orrs	r3, r0
 80020c0:	432b      	orrs	r3, r5
 80020c2:	40cc      	lsrs	r4, r1
 80020c4:	075a      	lsls	r2, r3, #29
 80020c6:	d092      	beq.n	8001fee <__aeabi_ddiv+0x45e>
 80020c8:	220f      	movs	r2, #15
 80020ca:	401a      	ands	r2, r3
 80020cc:	2a04      	cmp	r2, #4
 80020ce:	d188      	bne.n	8001fe2 <__aeabi_ddiv+0x452>
 80020d0:	e78d      	b.n	8001fee <__aeabi_ddiv+0x45e>
 80020d2:	0035      	movs	r5, r6
 80020d4:	4281      	cmp	r1, r0
 80020d6:	d000      	beq.n	80020da <__aeabi_ddiv+0x54a>
 80020d8:	e74b      	b.n	8001f72 <__aeabi_ddiv+0x3e2>
 80020da:	9a00      	ldr	r2, [sp, #0]
 80020dc:	4293      	cmp	r3, r2
 80020de:	d000      	beq.n	80020e2 <__aeabi_ddiv+0x552>
 80020e0:	e747      	b.n	8001f72 <__aeabi_ddiv+0x3e2>
 80020e2:	e618      	b.n	8001d16 <__aeabi_ddiv+0x186>
 80020e4:	42ae      	cmp	r6, r5
 80020e6:	d99c      	bls.n	8002022 <__aeabi_ddiv+0x492>
 80020e8:	2302      	movs	r3, #2
 80020ea:	425b      	negs	r3, r3
 80020ec:	469c      	mov	ip, r3
 80020ee:	9b00      	ldr	r3, [sp, #0]
 80020f0:	44e0      	add	r8, ip
 80020f2:	469c      	mov	ip, r3
 80020f4:	4465      	add	r5, ip
 80020f6:	429d      	cmp	r5, r3
 80020f8:	419b      	sbcs	r3, r3
 80020fa:	425b      	negs	r3, r3
 80020fc:	191b      	adds	r3, r3, r4
 80020fe:	18c9      	adds	r1, r1, r3
 8002100:	e6e4      	b.n	8001ecc <__aeabi_ddiv+0x33c>
 8002102:	4a15      	ldr	r2, [pc, #84]	; (8002158 <__aeabi_ddiv+0x5c8>)
 8002104:	445a      	add	r2, fp
 8002106:	2a00      	cmp	r2, #0
 8002108:	dc00      	bgt.n	800210c <__aeabi_ddiv+0x57c>
 800210a:	e744      	b.n	8001f96 <__aeabi_ddiv+0x406>
 800210c:	2301      	movs	r3, #1
 800210e:	2500      	movs	r5, #0
 8002110:	4498      	add	r8, r3
 8002112:	e609      	b.n	8001d28 <__aeabi_ddiv+0x198>
 8002114:	0765      	lsls	r5, r4, #29
 8002116:	0264      	lsls	r4, r4, #9
 8002118:	0b24      	lsrs	r4, r4, #12
 800211a:	08db      	lsrs	r3, r3, #3
 800211c:	431d      	orrs	r5, r3
 800211e:	2300      	movs	r3, #0
 8002120:	e590      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8002122:	9e00      	ldr	r6, [sp, #0]
 8002124:	3d02      	subs	r5, #2
 8002126:	0072      	lsls	r2, r6, #1
 8002128:	42b2      	cmp	r2, r6
 800212a:	41bf      	sbcs	r7, r7
 800212c:	427f      	negs	r7, r7
 800212e:	193c      	adds	r4, r7, r4
 8002130:	1909      	adds	r1, r1, r4
 8002132:	9200      	str	r2, [sp, #0]
 8002134:	e7ce      	b.n	80020d4 <__aeabi_ddiv+0x544>
 8002136:	2480      	movs	r4, #128	; 0x80
 8002138:	4643      	mov	r3, r8
 800213a:	0324      	lsls	r4, r4, #12
 800213c:	431c      	orrs	r4, r3
 800213e:	0324      	lsls	r4, r4, #12
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <__aeabi_ddiv+0x5cc>)
 8002142:	0b24      	lsrs	r4, r4, #12
 8002144:	e57e      	b.n	8001c44 <__aeabi_ddiv+0xb4>
 8002146:	9a00      	ldr	r2, [sp, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d3ea      	bcc.n	8002122 <__aeabi_ddiv+0x592>
 800214c:	0035      	movs	r5, r6
 800214e:	e7c4      	b.n	80020da <__aeabi_ddiv+0x54a>
 8002150:	0000043e 	.word	0x0000043e
 8002154:	0000041e 	.word	0x0000041e
 8002158:	000003ff 	.word	0x000003ff
 800215c:	000007ff 	.word	0x000007ff

08002160 <__eqdf2>:
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002162:	464f      	mov	r7, r9
 8002164:	4646      	mov	r6, r8
 8002166:	46d6      	mov	lr, sl
 8002168:	4694      	mov	ip, r2
 800216a:	4691      	mov	r9, r2
 800216c:	031a      	lsls	r2, r3, #12
 800216e:	0b12      	lsrs	r2, r2, #12
 8002170:	4d18      	ldr	r5, [pc, #96]	; (80021d4 <__eqdf2+0x74>)
 8002172:	b5c0      	push	{r6, r7, lr}
 8002174:	004c      	lsls	r4, r1, #1
 8002176:	030f      	lsls	r7, r1, #12
 8002178:	4692      	mov	sl, r2
 800217a:	005a      	lsls	r2, r3, #1
 800217c:	0006      	movs	r6, r0
 800217e:	4680      	mov	r8, r0
 8002180:	0b3f      	lsrs	r7, r7, #12
 8002182:	2001      	movs	r0, #1
 8002184:	0d64      	lsrs	r4, r4, #21
 8002186:	0fc9      	lsrs	r1, r1, #31
 8002188:	0d52      	lsrs	r2, r2, #21
 800218a:	0fdb      	lsrs	r3, r3, #31
 800218c:	42ac      	cmp	r4, r5
 800218e:	d00a      	beq.n	80021a6 <__eqdf2+0x46>
 8002190:	42aa      	cmp	r2, r5
 8002192:	d003      	beq.n	800219c <__eqdf2+0x3c>
 8002194:	4294      	cmp	r4, r2
 8002196:	d101      	bne.n	800219c <__eqdf2+0x3c>
 8002198:	4557      	cmp	r7, sl
 800219a:	d00d      	beq.n	80021b8 <__eqdf2+0x58>
 800219c:	bce0      	pop	{r5, r6, r7}
 800219e:	46ba      	mov	sl, r7
 80021a0:	46b1      	mov	r9, r6
 80021a2:	46a8      	mov	r8, r5
 80021a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a6:	003d      	movs	r5, r7
 80021a8:	4335      	orrs	r5, r6
 80021aa:	d1f7      	bne.n	800219c <__eqdf2+0x3c>
 80021ac:	42a2      	cmp	r2, r4
 80021ae:	d1f5      	bne.n	800219c <__eqdf2+0x3c>
 80021b0:	4652      	mov	r2, sl
 80021b2:	4665      	mov	r5, ip
 80021b4:	432a      	orrs	r2, r5
 80021b6:	d1f1      	bne.n	800219c <__eqdf2+0x3c>
 80021b8:	2001      	movs	r0, #1
 80021ba:	45c8      	cmp	r8, r9
 80021bc:	d1ee      	bne.n	800219c <__eqdf2+0x3c>
 80021be:	4299      	cmp	r1, r3
 80021c0:	d006      	beq.n	80021d0 <__eqdf2+0x70>
 80021c2:	2c00      	cmp	r4, #0
 80021c4:	d1ea      	bne.n	800219c <__eqdf2+0x3c>
 80021c6:	433e      	orrs	r6, r7
 80021c8:	0030      	movs	r0, r6
 80021ca:	1e46      	subs	r6, r0, #1
 80021cc:	41b0      	sbcs	r0, r6
 80021ce:	e7e5      	b.n	800219c <__eqdf2+0x3c>
 80021d0:	2000      	movs	r0, #0
 80021d2:	e7e3      	b.n	800219c <__eqdf2+0x3c>
 80021d4:	000007ff 	.word	0x000007ff

080021d8 <__gedf2>:
 80021d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021da:	464e      	mov	r6, r9
 80021dc:	4645      	mov	r5, r8
 80021de:	4657      	mov	r7, sl
 80021e0:	46de      	mov	lr, fp
 80021e2:	0004      	movs	r4, r0
 80021e4:	0018      	movs	r0, r3
 80021e6:	b5e0      	push	{r5, r6, r7, lr}
 80021e8:	0016      	movs	r6, r2
 80021ea:	031b      	lsls	r3, r3, #12
 80021ec:	0b1b      	lsrs	r3, r3, #12
 80021ee:	4d32      	ldr	r5, [pc, #200]	; (80022b8 <__gedf2+0xe0>)
 80021f0:	030f      	lsls	r7, r1, #12
 80021f2:	004a      	lsls	r2, r1, #1
 80021f4:	4699      	mov	r9, r3
 80021f6:	0043      	lsls	r3, r0, #1
 80021f8:	46a4      	mov	ip, r4
 80021fa:	46b0      	mov	r8, r6
 80021fc:	0b3f      	lsrs	r7, r7, #12
 80021fe:	0d52      	lsrs	r2, r2, #21
 8002200:	0fc9      	lsrs	r1, r1, #31
 8002202:	0d5b      	lsrs	r3, r3, #21
 8002204:	0fc0      	lsrs	r0, r0, #31
 8002206:	42aa      	cmp	r2, r5
 8002208:	d029      	beq.n	800225e <__gedf2+0x86>
 800220a:	42ab      	cmp	r3, r5
 800220c:	d018      	beq.n	8002240 <__gedf2+0x68>
 800220e:	2a00      	cmp	r2, #0
 8002210:	d12a      	bne.n	8002268 <__gedf2+0x90>
 8002212:	433c      	orrs	r4, r7
 8002214:	46a3      	mov	fp, r4
 8002216:	4265      	negs	r5, r4
 8002218:	4165      	adcs	r5, r4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <__gedf2+0x4c>
 800221e:	464c      	mov	r4, r9
 8002220:	4326      	orrs	r6, r4
 8002222:	d027      	beq.n	8002274 <__gedf2+0x9c>
 8002224:	2d00      	cmp	r5, #0
 8002226:	d115      	bne.n	8002254 <__gedf2+0x7c>
 8002228:	4281      	cmp	r1, r0
 800222a:	d028      	beq.n	800227e <__gedf2+0xa6>
 800222c:	2002      	movs	r0, #2
 800222e:	3901      	subs	r1, #1
 8002230:	4008      	ands	r0, r1
 8002232:	3801      	subs	r0, #1
 8002234:	bcf0      	pop	{r4, r5, r6, r7}
 8002236:	46bb      	mov	fp, r7
 8002238:	46b2      	mov	sl, r6
 800223a:	46a9      	mov	r9, r5
 800223c:	46a0      	mov	r8, r4
 800223e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002240:	464d      	mov	r5, r9
 8002242:	432e      	orrs	r6, r5
 8002244:	d12f      	bne.n	80022a6 <__gedf2+0xce>
 8002246:	2a00      	cmp	r2, #0
 8002248:	d1ee      	bne.n	8002228 <__gedf2+0x50>
 800224a:	433c      	orrs	r4, r7
 800224c:	4265      	negs	r5, r4
 800224e:	4165      	adcs	r5, r4
 8002250:	2d00      	cmp	r5, #0
 8002252:	d0e9      	beq.n	8002228 <__gedf2+0x50>
 8002254:	2800      	cmp	r0, #0
 8002256:	d1ed      	bne.n	8002234 <__gedf2+0x5c>
 8002258:	2001      	movs	r0, #1
 800225a:	4240      	negs	r0, r0
 800225c:	e7ea      	b.n	8002234 <__gedf2+0x5c>
 800225e:	003d      	movs	r5, r7
 8002260:	4325      	orrs	r5, r4
 8002262:	d120      	bne.n	80022a6 <__gedf2+0xce>
 8002264:	4293      	cmp	r3, r2
 8002266:	d0eb      	beq.n	8002240 <__gedf2+0x68>
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1dd      	bne.n	8002228 <__gedf2+0x50>
 800226c:	464c      	mov	r4, r9
 800226e:	4326      	orrs	r6, r4
 8002270:	d1da      	bne.n	8002228 <__gedf2+0x50>
 8002272:	e7db      	b.n	800222c <__gedf2+0x54>
 8002274:	465b      	mov	r3, fp
 8002276:	2000      	movs	r0, #0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0db      	beq.n	8002234 <__gedf2+0x5c>
 800227c:	e7d6      	b.n	800222c <__gedf2+0x54>
 800227e:	429a      	cmp	r2, r3
 8002280:	dc0a      	bgt.n	8002298 <__gedf2+0xc0>
 8002282:	dbe7      	blt.n	8002254 <__gedf2+0x7c>
 8002284:	454f      	cmp	r7, r9
 8002286:	d8d1      	bhi.n	800222c <__gedf2+0x54>
 8002288:	d010      	beq.n	80022ac <__gedf2+0xd4>
 800228a:	2000      	movs	r0, #0
 800228c:	454f      	cmp	r7, r9
 800228e:	d2d1      	bcs.n	8002234 <__gedf2+0x5c>
 8002290:	2900      	cmp	r1, #0
 8002292:	d0e1      	beq.n	8002258 <__gedf2+0x80>
 8002294:	0008      	movs	r0, r1
 8002296:	e7cd      	b.n	8002234 <__gedf2+0x5c>
 8002298:	4243      	negs	r3, r0
 800229a:	4158      	adcs	r0, r3
 800229c:	2302      	movs	r3, #2
 800229e:	4240      	negs	r0, r0
 80022a0:	4018      	ands	r0, r3
 80022a2:	3801      	subs	r0, #1
 80022a4:	e7c6      	b.n	8002234 <__gedf2+0x5c>
 80022a6:	2002      	movs	r0, #2
 80022a8:	4240      	negs	r0, r0
 80022aa:	e7c3      	b.n	8002234 <__gedf2+0x5c>
 80022ac:	45c4      	cmp	ip, r8
 80022ae:	d8bd      	bhi.n	800222c <__gedf2+0x54>
 80022b0:	2000      	movs	r0, #0
 80022b2:	45c4      	cmp	ip, r8
 80022b4:	d2be      	bcs.n	8002234 <__gedf2+0x5c>
 80022b6:	e7eb      	b.n	8002290 <__gedf2+0xb8>
 80022b8:	000007ff 	.word	0x000007ff

080022bc <__ledf2>:
 80022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022be:	464e      	mov	r6, r9
 80022c0:	4645      	mov	r5, r8
 80022c2:	4657      	mov	r7, sl
 80022c4:	46de      	mov	lr, fp
 80022c6:	0004      	movs	r4, r0
 80022c8:	0018      	movs	r0, r3
 80022ca:	b5e0      	push	{r5, r6, r7, lr}
 80022cc:	0016      	movs	r6, r2
 80022ce:	031b      	lsls	r3, r3, #12
 80022d0:	0b1b      	lsrs	r3, r3, #12
 80022d2:	4d31      	ldr	r5, [pc, #196]	; (8002398 <__ledf2+0xdc>)
 80022d4:	030f      	lsls	r7, r1, #12
 80022d6:	004a      	lsls	r2, r1, #1
 80022d8:	4699      	mov	r9, r3
 80022da:	0043      	lsls	r3, r0, #1
 80022dc:	46a4      	mov	ip, r4
 80022de:	46b0      	mov	r8, r6
 80022e0:	0b3f      	lsrs	r7, r7, #12
 80022e2:	0d52      	lsrs	r2, r2, #21
 80022e4:	0fc9      	lsrs	r1, r1, #31
 80022e6:	0d5b      	lsrs	r3, r3, #21
 80022e8:	0fc0      	lsrs	r0, r0, #31
 80022ea:	42aa      	cmp	r2, r5
 80022ec:	d011      	beq.n	8002312 <__ledf2+0x56>
 80022ee:	42ab      	cmp	r3, r5
 80022f0:	d014      	beq.n	800231c <__ledf2+0x60>
 80022f2:	2a00      	cmp	r2, #0
 80022f4:	d12f      	bne.n	8002356 <__ledf2+0x9a>
 80022f6:	433c      	orrs	r4, r7
 80022f8:	46a3      	mov	fp, r4
 80022fa:	4265      	negs	r5, r4
 80022fc:	4165      	adcs	r5, r4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d114      	bne.n	800232c <__ledf2+0x70>
 8002302:	464c      	mov	r4, r9
 8002304:	4326      	orrs	r6, r4
 8002306:	d111      	bne.n	800232c <__ledf2+0x70>
 8002308:	465b      	mov	r3, fp
 800230a:	2000      	movs	r0, #0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d017      	beq.n	8002340 <__ledf2+0x84>
 8002310:	e010      	b.n	8002334 <__ledf2+0x78>
 8002312:	003d      	movs	r5, r7
 8002314:	4325      	orrs	r5, r4
 8002316:	d112      	bne.n	800233e <__ledf2+0x82>
 8002318:	4293      	cmp	r3, r2
 800231a:	d11c      	bne.n	8002356 <__ledf2+0x9a>
 800231c:	464d      	mov	r5, r9
 800231e:	432e      	orrs	r6, r5
 8002320:	d10d      	bne.n	800233e <__ledf2+0x82>
 8002322:	2a00      	cmp	r2, #0
 8002324:	d104      	bne.n	8002330 <__ledf2+0x74>
 8002326:	433c      	orrs	r4, r7
 8002328:	4265      	negs	r5, r4
 800232a:	4165      	adcs	r5, r4
 800232c:	2d00      	cmp	r5, #0
 800232e:	d10d      	bne.n	800234c <__ledf2+0x90>
 8002330:	4281      	cmp	r1, r0
 8002332:	d016      	beq.n	8002362 <__ledf2+0xa6>
 8002334:	2002      	movs	r0, #2
 8002336:	3901      	subs	r1, #1
 8002338:	4008      	ands	r0, r1
 800233a:	3801      	subs	r0, #1
 800233c:	e000      	b.n	8002340 <__ledf2+0x84>
 800233e:	2002      	movs	r0, #2
 8002340:	bcf0      	pop	{r4, r5, r6, r7}
 8002342:	46bb      	mov	fp, r7
 8002344:	46b2      	mov	sl, r6
 8002346:	46a9      	mov	r9, r5
 8002348:	46a0      	mov	r8, r4
 800234a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234c:	2800      	cmp	r0, #0
 800234e:	d1f7      	bne.n	8002340 <__ledf2+0x84>
 8002350:	2001      	movs	r0, #1
 8002352:	4240      	negs	r0, r0
 8002354:	e7f4      	b.n	8002340 <__ledf2+0x84>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1ea      	bne.n	8002330 <__ledf2+0x74>
 800235a:	464c      	mov	r4, r9
 800235c:	4326      	orrs	r6, r4
 800235e:	d1e7      	bne.n	8002330 <__ledf2+0x74>
 8002360:	e7e8      	b.n	8002334 <__ledf2+0x78>
 8002362:	429a      	cmp	r2, r3
 8002364:	dd06      	ble.n	8002374 <__ledf2+0xb8>
 8002366:	4243      	negs	r3, r0
 8002368:	4158      	adcs	r0, r3
 800236a:	2302      	movs	r3, #2
 800236c:	4240      	negs	r0, r0
 800236e:	4018      	ands	r0, r3
 8002370:	3801      	subs	r0, #1
 8002372:	e7e5      	b.n	8002340 <__ledf2+0x84>
 8002374:	429a      	cmp	r2, r3
 8002376:	dbe9      	blt.n	800234c <__ledf2+0x90>
 8002378:	454f      	cmp	r7, r9
 800237a:	d8db      	bhi.n	8002334 <__ledf2+0x78>
 800237c:	d006      	beq.n	800238c <__ledf2+0xd0>
 800237e:	2000      	movs	r0, #0
 8002380:	454f      	cmp	r7, r9
 8002382:	d2dd      	bcs.n	8002340 <__ledf2+0x84>
 8002384:	2900      	cmp	r1, #0
 8002386:	d0e3      	beq.n	8002350 <__ledf2+0x94>
 8002388:	0008      	movs	r0, r1
 800238a:	e7d9      	b.n	8002340 <__ledf2+0x84>
 800238c:	45c4      	cmp	ip, r8
 800238e:	d8d1      	bhi.n	8002334 <__ledf2+0x78>
 8002390:	2000      	movs	r0, #0
 8002392:	45c4      	cmp	ip, r8
 8002394:	d2d4      	bcs.n	8002340 <__ledf2+0x84>
 8002396:	e7f5      	b.n	8002384 <__ledf2+0xc8>
 8002398:	000007ff 	.word	0x000007ff

0800239c <__aeabi_dmul>:
 800239c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239e:	4657      	mov	r7, sl
 80023a0:	464e      	mov	r6, r9
 80023a2:	4645      	mov	r5, r8
 80023a4:	46de      	mov	lr, fp
 80023a6:	b5e0      	push	{r5, r6, r7, lr}
 80023a8:	4698      	mov	r8, r3
 80023aa:	030c      	lsls	r4, r1, #12
 80023ac:	004b      	lsls	r3, r1, #1
 80023ae:	0006      	movs	r6, r0
 80023b0:	4692      	mov	sl, r2
 80023b2:	b087      	sub	sp, #28
 80023b4:	0b24      	lsrs	r4, r4, #12
 80023b6:	0d5b      	lsrs	r3, r3, #21
 80023b8:	0fcf      	lsrs	r7, r1, #31
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d06c      	beq.n	8002498 <__aeabi_dmul+0xfc>
 80023be:	4add      	ldr	r2, [pc, #884]	; (8002734 <__aeabi_dmul+0x398>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d100      	bne.n	80023c6 <__aeabi_dmul+0x2a>
 80023c4:	e086      	b.n	80024d4 <__aeabi_dmul+0x138>
 80023c6:	0f42      	lsrs	r2, r0, #29
 80023c8:	00e4      	lsls	r4, r4, #3
 80023ca:	4314      	orrs	r4, r2
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	0412      	lsls	r2, r2, #16
 80023d0:	4314      	orrs	r4, r2
 80023d2:	4ad9      	ldr	r2, [pc, #868]	; (8002738 <__aeabi_dmul+0x39c>)
 80023d4:	00c5      	lsls	r5, r0, #3
 80023d6:	4694      	mov	ip, r2
 80023d8:	4463      	add	r3, ip
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2300      	movs	r3, #0
 80023de:	4699      	mov	r9, r3
 80023e0:	469b      	mov	fp, r3
 80023e2:	4643      	mov	r3, r8
 80023e4:	4642      	mov	r2, r8
 80023e6:	031e      	lsls	r6, r3, #12
 80023e8:	0fd2      	lsrs	r2, r2, #31
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4650      	mov	r0, sl
 80023ee:	4690      	mov	r8, r2
 80023f0:	0b36      	lsrs	r6, r6, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	d100      	bne.n	80023f8 <__aeabi_dmul+0x5c>
 80023f6:	e078      	b.n	80024ea <__aeabi_dmul+0x14e>
 80023f8:	4ace      	ldr	r2, [pc, #824]	; (8002734 <__aeabi_dmul+0x398>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01d      	beq.n	800243a <__aeabi_dmul+0x9e>
 80023fe:	49ce      	ldr	r1, [pc, #824]	; (8002738 <__aeabi_dmul+0x39c>)
 8002400:	0f42      	lsrs	r2, r0, #29
 8002402:	468c      	mov	ip, r1
 8002404:	9900      	ldr	r1, [sp, #0]
 8002406:	4463      	add	r3, ip
 8002408:	00f6      	lsls	r6, r6, #3
 800240a:	468c      	mov	ip, r1
 800240c:	4316      	orrs	r6, r2
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	449c      	add	ip, r3
 8002412:	0412      	lsls	r2, r2, #16
 8002414:	4663      	mov	r3, ip
 8002416:	4316      	orrs	r6, r2
 8002418:	00c2      	lsls	r2, r0, #3
 800241a:	2000      	movs	r0, #0
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	9900      	ldr	r1, [sp, #0]
 8002420:	4643      	mov	r3, r8
 8002422:	3101      	adds	r1, #1
 8002424:	468c      	mov	ip, r1
 8002426:	4649      	mov	r1, r9
 8002428:	407b      	eors	r3, r7
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	290f      	cmp	r1, #15
 800242e:	d900      	bls.n	8002432 <__aeabi_dmul+0x96>
 8002430:	e07e      	b.n	8002530 <__aeabi_dmul+0x194>
 8002432:	4bc2      	ldr	r3, [pc, #776]	; (800273c <__aeabi_dmul+0x3a0>)
 8002434:	0089      	lsls	r1, r1, #2
 8002436:	5859      	ldr	r1, [r3, r1]
 8002438:	468f      	mov	pc, r1
 800243a:	4652      	mov	r2, sl
 800243c:	9b00      	ldr	r3, [sp, #0]
 800243e:	4332      	orrs	r2, r6
 8002440:	d000      	beq.n	8002444 <__aeabi_dmul+0xa8>
 8002442:	e156      	b.n	80026f2 <__aeabi_dmul+0x356>
 8002444:	49bb      	ldr	r1, [pc, #748]	; (8002734 <__aeabi_dmul+0x398>)
 8002446:	2600      	movs	r6, #0
 8002448:	468c      	mov	ip, r1
 800244a:	4463      	add	r3, ip
 800244c:	4649      	mov	r1, r9
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2302      	movs	r3, #2
 8002452:	4319      	orrs	r1, r3
 8002454:	4689      	mov	r9, r1
 8002456:	2002      	movs	r0, #2
 8002458:	e7e1      	b.n	800241e <__aeabi_dmul+0x82>
 800245a:	4643      	mov	r3, r8
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	0034      	movs	r4, r6
 8002460:	0015      	movs	r5, r2
 8002462:	4683      	mov	fp, r0
 8002464:	465b      	mov	r3, fp
 8002466:	2b02      	cmp	r3, #2
 8002468:	d05e      	beq.n	8002528 <__aeabi_dmul+0x18c>
 800246a:	2b03      	cmp	r3, #3
 800246c:	d100      	bne.n	8002470 <__aeabi_dmul+0xd4>
 800246e:	e1f3      	b.n	8002858 <__aeabi_dmul+0x4bc>
 8002470:	2b01      	cmp	r3, #1
 8002472:	d000      	beq.n	8002476 <__aeabi_dmul+0xda>
 8002474:	e118      	b.n	80026a8 <__aeabi_dmul+0x30c>
 8002476:	2200      	movs	r2, #0
 8002478:	2400      	movs	r4, #0
 800247a:	2500      	movs	r5, #0
 800247c:	9b01      	ldr	r3, [sp, #4]
 800247e:	0512      	lsls	r2, r2, #20
 8002480:	4322      	orrs	r2, r4
 8002482:	07db      	lsls	r3, r3, #31
 8002484:	431a      	orrs	r2, r3
 8002486:	0028      	movs	r0, r5
 8002488:	0011      	movs	r1, r2
 800248a:	b007      	add	sp, #28
 800248c:	bcf0      	pop	{r4, r5, r6, r7}
 800248e:	46bb      	mov	fp, r7
 8002490:	46b2      	mov	sl, r6
 8002492:	46a9      	mov	r9, r5
 8002494:	46a0      	mov	r8, r4
 8002496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002498:	0025      	movs	r5, r4
 800249a:	4305      	orrs	r5, r0
 800249c:	d100      	bne.n	80024a0 <__aeabi_dmul+0x104>
 800249e:	e141      	b.n	8002724 <__aeabi_dmul+0x388>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d100      	bne.n	80024a6 <__aeabi_dmul+0x10a>
 80024a4:	e1ad      	b.n	8002802 <__aeabi_dmul+0x466>
 80024a6:	0020      	movs	r0, r4
 80024a8:	f000 fef0 	bl	800328c <__clzsi2>
 80024ac:	0001      	movs	r1, r0
 80024ae:	0002      	movs	r2, r0
 80024b0:	390b      	subs	r1, #11
 80024b2:	231d      	movs	r3, #29
 80024b4:	0010      	movs	r0, r2
 80024b6:	1a5b      	subs	r3, r3, r1
 80024b8:	0031      	movs	r1, r6
 80024ba:	0035      	movs	r5, r6
 80024bc:	3808      	subs	r0, #8
 80024be:	4084      	lsls	r4, r0
 80024c0:	40d9      	lsrs	r1, r3
 80024c2:	4085      	lsls	r5, r0
 80024c4:	430c      	orrs	r4, r1
 80024c6:	489e      	ldr	r0, [pc, #632]	; (8002740 <__aeabi_dmul+0x3a4>)
 80024c8:	1a83      	subs	r3, r0, r2
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2300      	movs	r3, #0
 80024ce:	4699      	mov	r9, r3
 80024d0:	469b      	mov	fp, r3
 80024d2:	e786      	b.n	80023e2 <__aeabi_dmul+0x46>
 80024d4:	0005      	movs	r5, r0
 80024d6:	4325      	orrs	r5, r4
 80024d8:	d000      	beq.n	80024dc <__aeabi_dmul+0x140>
 80024da:	e11c      	b.n	8002716 <__aeabi_dmul+0x37a>
 80024dc:	2208      	movs	r2, #8
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2302      	movs	r3, #2
 80024e2:	2400      	movs	r4, #0
 80024e4:	4691      	mov	r9, r2
 80024e6:	469b      	mov	fp, r3
 80024e8:	e77b      	b.n	80023e2 <__aeabi_dmul+0x46>
 80024ea:	4652      	mov	r2, sl
 80024ec:	4332      	orrs	r2, r6
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dmul+0x156>
 80024f0:	e10a      	b.n	8002708 <__aeabi_dmul+0x36c>
 80024f2:	2e00      	cmp	r6, #0
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dmul+0x15c>
 80024f6:	e176      	b.n	80027e6 <__aeabi_dmul+0x44a>
 80024f8:	0030      	movs	r0, r6
 80024fa:	f000 fec7 	bl	800328c <__clzsi2>
 80024fe:	0002      	movs	r2, r0
 8002500:	3a0b      	subs	r2, #11
 8002502:	231d      	movs	r3, #29
 8002504:	0001      	movs	r1, r0
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	4652      	mov	r2, sl
 800250a:	3908      	subs	r1, #8
 800250c:	40da      	lsrs	r2, r3
 800250e:	408e      	lsls	r6, r1
 8002510:	4316      	orrs	r6, r2
 8002512:	4652      	mov	r2, sl
 8002514:	408a      	lsls	r2, r1
 8002516:	9b00      	ldr	r3, [sp, #0]
 8002518:	4989      	ldr	r1, [pc, #548]	; (8002740 <__aeabi_dmul+0x3a4>)
 800251a:	1a18      	subs	r0, r3, r0
 800251c:	0003      	movs	r3, r0
 800251e:	468c      	mov	ip, r1
 8002520:	4463      	add	r3, ip
 8002522:	2000      	movs	r0, #0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	e77a      	b.n	800241e <__aeabi_dmul+0x82>
 8002528:	2400      	movs	r4, #0
 800252a:	2500      	movs	r5, #0
 800252c:	4a81      	ldr	r2, [pc, #516]	; (8002734 <__aeabi_dmul+0x398>)
 800252e:	e7a5      	b.n	800247c <__aeabi_dmul+0xe0>
 8002530:	0c2f      	lsrs	r7, r5, #16
 8002532:	042d      	lsls	r5, r5, #16
 8002534:	0c2d      	lsrs	r5, r5, #16
 8002536:	002b      	movs	r3, r5
 8002538:	0c11      	lsrs	r1, r2, #16
 800253a:	0412      	lsls	r2, r2, #16
 800253c:	0c12      	lsrs	r2, r2, #16
 800253e:	4353      	muls	r3, r2
 8002540:	4698      	mov	r8, r3
 8002542:	0013      	movs	r3, r2
 8002544:	0028      	movs	r0, r5
 8002546:	437b      	muls	r3, r7
 8002548:	4699      	mov	r9, r3
 800254a:	4348      	muls	r0, r1
 800254c:	4448      	add	r0, r9
 800254e:	4683      	mov	fp, r0
 8002550:	4640      	mov	r0, r8
 8002552:	000b      	movs	r3, r1
 8002554:	0c00      	lsrs	r0, r0, #16
 8002556:	4682      	mov	sl, r0
 8002558:	4658      	mov	r0, fp
 800255a:	437b      	muls	r3, r7
 800255c:	4450      	add	r0, sl
 800255e:	9302      	str	r3, [sp, #8]
 8002560:	4581      	cmp	r9, r0
 8002562:	d906      	bls.n	8002572 <__aeabi_dmul+0x1d6>
 8002564:	469a      	mov	sl, r3
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	025b      	lsls	r3, r3, #9
 800256a:	4699      	mov	r9, r3
 800256c:	44ca      	add	sl, r9
 800256e:	4653      	mov	r3, sl
 8002570:	9302      	str	r3, [sp, #8]
 8002572:	0c03      	lsrs	r3, r0, #16
 8002574:	469b      	mov	fp, r3
 8002576:	4643      	mov	r3, r8
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	0400      	lsls	r0, r0, #16
 800257c:	0c1b      	lsrs	r3, r3, #16
 800257e:	4698      	mov	r8, r3
 8002580:	0003      	movs	r3, r0
 8002582:	4443      	add	r3, r8
 8002584:	9304      	str	r3, [sp, #16]
 8002586:	0c33      	lsrs	r3, r6, #16
 8002588:	4699      	mov	r9, r3
 800258a:	002b      	movs	r3, r5
 800258c:	0436      	lsls	r6, r6, #16
 800258e:	0c36      	lsrs	r6, r6, #16
 8002590:	4373      	muls	r3, r6
 8002592:	4698      	mov	r8, r3
 8002594:	0033      	movs	r3, r6
 8002596:	437b      	muls	r3, r7
 8002598:	469a      	mov	sl, r3
 800259a:	464b      	mov	r3, r9
 800259c:	435d      	muls	r5, r3
 800259e:	435f      	muls	r7, r3
 80025a0:	4643      	mov	r3, r8
 80025a2:	4455      	add	r5, sl
 80025a4:	0c18      	lsrs	r0, r3, #16
 80025a6:	1940      	adds	r0, r0, r5
 80025a8:	4582      	cmp	sl, r0
 80025aa:	d903      	bls.n	80025b4 <__aeabi_dmul+0x218>
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	025b      	lsls	r3, r3, #9
 80025b0:	469a      	mov	sl, r3
 80025b2:	4457      	add	r7, sl
 80025b4:	0c05      	lsrs	r5, r0, #16
 80025b6:	19eb      	adds	r3, r5, r7
 80025b8:	9305      	str	r3, [sp, #20]
 80025ba:	4643      	mov	r3, r8
 80025bc:	041d      	lsls	r5, r3, #16
 80025be:	0c2d      	lsrs	r5, r5, #16
 80025c0:	0400      	lsls	r0, r0, #16
 80025c2:	1940      	adds	r0, r0, r5
 80025c4:	0c25      	lsrs	r5, r4, #16
 80025c6:	0424      	lsls	r4, r4, #16
 80025c8:	0c24      	lsrs	r4, r4, #16
 80025ca:	0027      	movs	r7, r4
 80025cc:	4357      	muls	r7, r2
 80025ce:	436a      	muls	r2, r5
 80025d0:	4690      	mov	r8, r2
 80025d2:	002a      	movs	r2, r5
 80025d4:	0c3b      	lsrs	r3, r7, #16
 80025d6:	469a      	mov	sl, r3
 80025d8:	434a      	muls	r2, r1
 80025da:	4361      	muls	r1, r4
 80025dc:	4441      	add	r1, r8
 80025de:	4451      	add	r1, sl
 80025e0:	4483      	add	fp, r0
 80025e2:	4588      	cmp	r8, r1
 80025e4:	d903      	bls.n	80025ee <__aeabi_dmul+0x252>
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	025b      	lsls	r3, r3, #9
 80025ea:	4698      	mov	r8, r3
 80025ec:	4442      	add	r2, r8
 80025ee:	043f      	lsls	r7, r7, #16
 80025f0:	0c0b      	lsrs	r3, r1, #16
 80025f2:	0c3f      	lsrs	r7, r7, #16
 80025f4:	0409      	lsls	r1, r1, #16
 80025f6:	19c9      	adds	r1, r1, r7
 80025f8:	0027      	movs	r7, r4
 80025fa:	4698      	mov	r8, r3
 80025fc:	464b      	mov	r3, r9
 80025fe:	4377      	muls	r7, r6
 8002600:	435c      	muls	r4, r3
 8002602:	436e      	muls	r6, r5
 8002604:	435d      	muls	r5, r3
 8002606:	0c3b      	lsrs	r3, r7, #16
 8002608:	4699      	mov	r9, r3
 800260a:	19a4      	adds	r4, r4, r6
 800260c:	444c      	add	r4, r9
 800260e:	4442      	add	r2, r8
 8002610:	9503      	str	r5, [sp, #12]
 8002612:	42a6      	cmp	r6, r4
 8002614:	d904      	bls.n	8002620 <__aeabi_dmul+0x284>
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	025b      	lsls	r3, r3, #9
 800261a:	4698      	mov	r8, r3
 800261c:	4445      	add	r5, r8
 800261e:	9503      	str	r5, [sp, #12]
 8002620:	9b02      	ldr	r3, [sp, #8]
 8002622:	043f      	lsls	r7, r7, #16
 8002624:	445b      	add	r3, fp
 8002626:	001e      	movs	r6, r3
 8002628:	4283      	cmp	r3, r0
 800262a:	4180      	sbcs	r0, r0
 800262c:	0423      	lsls	r3, r4, #16
 800262e:	4698      	mov	r8, r3
 8002630:	9b05      	ldr	r3, [sp, #20]
 8002632:	0c3f      	lsrs	r7, r7, #16
 8002634:	4447      	add	r7, r8
 8002636:	4698      	mov	r8, r3
 8002638:	1876      	adds	r6, r6, r1
 800263a:	428e      	cmp	r6, r1
 800263c:	4189      	sbcs	r1, r1
 800263e:	4447      	add	r7, r8
 8002640:	4240      	negs	r0, r0
 8002642:	183d      	adds	r5, r7, r0
 8002644:	46a8      	mov	r8, r5
 8002646:	4693      	mov	fp, r2
 8002648:	4249      	negs	r1, r1
 800264a:	468a      	mov	sl, r1
 800264c:	44c3      	add	fp, r8
 800264e:	429f      	cmp	r7, r3
 8002650:	41bf      	sbcs	r7, r7
 8002652:	4580      	cmp	r8, r0
 8002654:	4180      	sbcs	r0, r0
 8002656:	9b03      	ldr	r3, [sp, #12]
 8002658:	44da      	add	sl, fp
 800265a:	4698      	mov	r8, r3
 800265c:	4653      	mov	r3, sl
 800265e:	4240      	negs	r0, r0
 8002660:	427f      	negs	r7, r7
 8002662:	4307      	orrs	r7, r0
 8002664:	0c24      	lsrs	r4, r4, #16
 8002666:	4593      	cmp	fp, r2
 8002668:	4192      	sbcs	r2, r2
 800266a:	458a      	cmp	sl, r1
 800266c:	4189      	sbcs	r1, r1
 800266e:	193f      	adds	r7, r7, r4
 8002670:	0ddc      	lsrs	r4, r3, #23
 8002672:	9b04      	ldr	r3, [sp, #16]
 8002674:	0275      	lsls	r5, r6, #9
 8002676:	431d      	orrs	r5, r3
 8002678:	1e68      	subs	r0, r5, #1
 800267a:	4185      	sbcs	r5, r0
 800267c:	4653      	mov	r3, sl
 800267e:	4252      	negs	r2, r2
 8002680:	4249      	negs	r1, r1
 8002682:	430a      	orrs	r2, r1
 8002684:	18bf      	adds	r7, r7, r2
 8002686:	4447      	add	r7, r8
 8002688:	0df6      	lsrs	r6, r6, #23
 800268a:	027f      	lsls	r7, r7, #9
 800268c:	4335      	orrs	r5, r6
 800268e:	025a      	lsls	r2, r3, #9
 8002690:	433c      	orrs	r4, r7
 8002692:	4315      	orrs	r5, r2
 8002694:	01fb      	lsls	r3, r7, #7
 8002696:	d400      	bmi.n	800269a <__aeabi_dmul+0x2fe>
 8002698:	e0c1      	b.n	800281e <__aeabi_dmul+0x482>
 800269a:	2101      	movs	r1, #1
 800269c:	086a      	lsrs	r2, r5, #1
 800269e:	400d      	ands	r5, r1
 80026a0:	4315      	orrs	r5, r2
 80026a2:	07e2      	lsls	r2, r4, #31
 80026a4:	4315      	orrs	r5, r2
 80026a6:	0864      	lsrs	r4, r4, #1
 80026a8:	4926      	ldr	r1, [pc, #152]	; (8002744 <__aeabi_dmul+0x3a8>)
 80026aa:	4461      	add	r1, ip
 80026ac:	2900      	cmp	r1, #0
 80026ae:	dd56      	ble.n	800275e <__aeabi_dmul+0x3c2>
 80026b0:	076b      	lsls	r3, r5, #29
 80026b2:	d009      	beq.n	80026c8 <__aeabi_dmul+0x32c>
 80026b4:	220f      	movs	r2, #15
 80026b6:	402a      	ands	r2, r5
 80026b8:	2a04      	cmp	r2, #4
 80026ba:	d005      	beq.n	80026c8 <__aeabi_dmul+0x32c>
 80026bc:	1d2a      	adds	r2, r5, #4
 80026be:	42aa      	cmp	r2, r5
 80026c0:	41ad      	sbcs	r5, r5
 80026c2:	426d      	negs	r5, r5
 80026c4:	1964      	adds	r4, r4, r5
 80026c6:	0015      	movs	r5, r2
 80026c8:	01e3      	lsls	r3, r4, #7
 80026ca:	d504      	bpl.n	80026d6 <__aeabi_dmul+0x33a>
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <__aeabi_dmul+0x3ac>)
 80026d0:	00c9      	lsls	r1, r1, #3
 80026d2:	4014      	ands	r4, r2
 80026d4:	4461      	add	r1, ip
 80026d6:	4a1d      	ldr	r2, [pc, #116]	; (800274c <__aeabi_dmul+0x3b0>)
 80026d8:	4291      	cmp	r1, r2
 80026da:	dd00      	ble.n	80026de <__aeabi_dmul+0x342>
 80026dc:	e724      	b.n	8002528 <__aeabi_dmul+0x18c>
 80026de:	0762      	lsls	r2, r4, #29
 80026e0:	08ed      	lsrs	r5, r5, #3
 80026e2:	0264      	lsls	r4, r4, #9
 80026e4:	0549      	lsls	r1, r1, #21
 80026e6:	4315      	orrs	r5, r2
 80026e8:	0b24      	lsrs	r4, r4, #12
 80026ea:	0d4a      	lsrs	r2, r1, #21
 80026ec:	e6c6      	b.n	800247c <__aeabi_dmul+0xe0>
 80026ee:	9701      	str	r7, [sp, #4]
 80026f0:	e6b8      	b.n	8002464 <__aeabi_dmul+0xc8>
 80026f2:	4a10      	ldr	r2, [pc, #64]	; (8002734 <__aeabi_dmul+0x398>)
 80026f4:	2003      	movs	r0, #3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	464a      	mov	r2, r9
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2303      	movs	r3, #3
 8002700:	431a      	orrs	r2, r3
 8002702:	4691      	mov	r9, r2
 8002704:	4652      	mov	r2, sl
 8002706:	e68a      	b.n	800241e <__aeabi_dmul+0x82>
 8002708:	4649      	mov	r1, r9
 800270a:	2301      	movs	r3, #1
 800270c:	4319      	orrs	r1, r3
 800270e:	4689      	mov	r9, r1
 8002710:	2600      	movs	r6, #0
 8002712:	2001      	movs	r0, #1
 8002714:	e683      	b.n	800241e <__aeabi_dmul+0x82>
 8002716:	220c      	movs	r2, #12
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2303      	movs	r3, #3
 800271c:	0005      	movs	r5, r0
 800271e:	4691      	mov	r9, r2
 8002720:	469b      	mov	fp, r3
 8002722:	e65e      	b.n	80023e2 <__aeabi_dmul+0x46>
 8002724:	2304      	movs	r3, #4
 8002726:	4699      	mov	r9, r3
 8002728:	2300      	movs	r3, #0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	2400      	movs	r4, #0
 8002730:	469b      	mov	fp, r3
 8002732:	e656      	b.n	80023e2 <__aeabi_dmul+0x46>
 8002734:	000007ff 	.word	0x000007ff
 8002738:	fffffc01 	.word	0xfffffc01
 800273c:	0800e908 	.word	0x0800e908
 8002740:	fffffc0d 	.word	0xfffffc0d
 8002744:	000003ff 	.word	0x000003ff
 8002748:	feffffff 	.word	0xfeffffff
 800274c:	000007fe 	.word	0x000007fe
 8002750:	2300      	movs	r3, #0
 8002752:	2480      	movs	r4, #128	; 0x80
 8002754:	2500      	movs	r5, #0
 8002756:	4a44      	ldr	r2, [pc, #272]	; (8002868 <__aeabi_dmul+0x4cc>)
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	0324      	lsls	r4, r4, #12
 800275c:	e68e      	b.n	800247c <__aeabi_dmul+0xe0>
 800275e:	2001      	movs	r0, #1
 8002760:	1a40      	subs	r0, r0, r1
 8002762:	2838      	cmp	r0, #56	; 0x38
 8002764:	dd00      	ble.n	8002768 <__aeabi_dmul+0x3cc>
 8002766:	e686      	b.n	8002476 <__aeabi_dmul+0xda>
 8002768:	281f      	cmp	r0, #31
 800276a:	dd5b      	ble.n	8002824 <__aeabi_dmul+0x488>
 800276c:	221f      	movs	r2, #31
 800276e:	0023      	movs	r3, r4
 8002770:	4252      	negs	r2, r2
 8002772:	1a51      	subs	r1, r2, r1
 8002774:	40cb      	lsrs	r3, r1
 8002776:	0019      	movs	r1, r3
 8002778:	2820      	cmp	r0, #32
 800277a:	d003      	beq.n	8002784 <__aeabi_dmul+0x3e8>
 800277c:	4a3b      	ldr	r2, [pc, #236]	; (800286c <__aeabi_dmul+0x4d0>)
 800277e:	4462      	add	r2, ip
 8002780:	4094      	lsls	r4, r2
 8002782:	4325      	orrs	r5, r4
 8002784:	1e6a      	subs	r2, r5, #1
 8002786:	4195      	sbcs	r5, r2
 8002788:	002a      	movs	r2, r5
 800278a:	430a      	orrs	r2, r1
 800278c:	2107      	movs	r1, #7
 800278e:	000d      	movs	r5, r1
 8002790:	2400      	movs	r4, #0
 8002792:	4015      	ands	r5, r2
 8002794:	4211      	tst	r1, r2
 8002796:	d05b      	beq.n	8002850 <__aeabi_dmul+0x4b4>
 8002798:	210f      	movs	r1, #15
 800279a:	2400      	movs	r4, #0
 800279c:	4011      	ands	r1, r2
 800279e:	2904      	cmp	r1, #4
 80027a0:	d053      	beq.n	800284a <__aeabi_dmul+0x4ae>
 80027a2:	1d11      	adds	r1, r2, #4
 80027a4:	4291      	cmp	r1, r2
 80027a6:	4192      	sbcs	r2, r2
 80027a8:	4252      	negs	r2, r2
 80027aa:	18a4      	adds	r4, r4, r2
 80027ac:	000a      	movs	r2, r1
 80027ae:	0223      	lsls	r3, r4, #8
 80027b0:	d54b      	bpl.n	800284a <__aeabi_dmul+0x4ae>
 80027b2:	2201      	movs	r2, #1
 80027b4:	2400      	movs	r4, #0
 80027b6:	2500      	movs	r5, #0
 80027b8:	e660      	b.n	800247c <__aeabi_dmul+0xe0>
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	031b      	lsls	r3, r3, #12
 80027be:	421c      	tst	r4, r3
 80027c0:	d009      	beq.n	80027d6 <__aeabi_dmul+0x43a>
 80027c2:	421e      	tst	r6, r3
 80027c4:	d107      	bne.n	80027d6 <__aeabi_dmul+0x43a>
 80027c6:	4333      	orrs	r3, r6
 80027c8:	031c      	lsls	r4, r3, #12
 80027ca:	4643      	mov	r3, r8
 80027cc:	0015      	movs	r5, r2
 80027ce:	0b24      	lsrs	r4, r4, #12
 80027d0:	4a25      	ldr	r2, [pc, #148]	; (8002868 <__aeabi_dmul+0x4cc>)
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	e652      	b.n	800247c <__aeabi_dmul+0xe0>
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	0312      	lsls	r2, r2, #12
 80027da:	4314      	orrs	r4, r2
 80027dc:	0324      	lsls	r4, r4, #12
 80027de:	4a22      	ldr	r2, [pc, #136]	; (8002868 <__aeabi_dmul+0x4cc>)
 80027e0:	0b24      	lsrs	r4, r4, #12
 80027e2:	9701      	str	r7, [sp, #4]
 80027e4:	e64a      	b.n	800247c <__aeabi_dmul+0xe0>
 80027e6:	f000 fd51 	bl	800328c <__clzsi2>
 80027ea:	0003      	movs	r3, r0
 80027ec:	001a      	movs	r2, r3
 80027ee:	3215      	adds	r2, #21
 80027f0:	3020      	adds	r0, #32
 80027f2:	2a1c      	cmp	r2, #28
 80027f4:	dc00      	bgt.n	80027f8 <__aeabi_dmul+0x45c>
 80027f6:	e684      	b.n	8002502 <__aeabi_dmul+0x166>
 80027f8:	4656      	mov	r6, sl
 80027fa:	3b08      	subs	r3, #8
 80027fc:	2200      	movs	r2, #0
 80027fe:	409e      	lsls	r6, r3
 8002800:	e689      	b.n	8002516 <__aeabi_dmul+0x17a>
 8002802:	f000 fd43 	bl	800328c <__clzsi2>
 8002806:	0001      	movs	r1, r0
 8002808:	0002      	movs	r2, r0
 800280a:	3115      	adds	r1, #21
 800280c:	3220      	adds	r2, #32
 800280e:	291c      	cmp	r1, #28
 8002810:	dc00      	bgt.n	8002814 <__aeabi_dmul+0x478>
 8002812:	e64e      	b.n	80024b2 <__aeabi_dmul+0x116>
 8002814:	0034      	movs	r4, r6
 8002816:	3808      	subs	r0, #8
 8002818:	2500      	movs	r5, #0
 800281a:	4084      	lsls	r4, r0
 800281c:	e653      	b.n	80024c6 <__aeabi_dmul+0x12a>
 800281e:	9b00      	ldr	r3, [sp, #0]
 8002820:	469c      	mov	ip, r3
 8002822:	e741      	b.n	80026a8 <__aeabi_dmul+0x30c>
 8002824:	4912      	ldr	r1, [pc, #72]	; (8002870 <__aeabi_dmul+0x4d4>)
 8002826:	0022      	movs	r2, r4
 8002828:	4461      	add	r1, ip
 800282a:	002e      	movs	r6, r5
 800282c:	408d      	lsls	r5, r1
 800282e:	408a      	lsls	r2, r1
 8002830:	40c6      	lsrs	r6, r0
 8002832:	1e69      	subs	r1, r5, #1
 8002834:	418d      	sbcs	r5, r1
 8002836:	4332      	orrs	r2, r6
 8002838:	432a      	orrs	r2, r5
 800283a:	40c4      	lsrs	r4, r0
 800283c:	0753      	lsls	r3, r2, #29
 800283e:	d0b6      	beq.n	80027ae <__aeabi_dmul+0x412>
 8002840:	210f      	movs	r1, #15
 8002842:	4011      	ands	r1, r2
 8002844:	2904      	cmp	r1, #4
 8002846:	d1ac      	bne.n	80027a2 <__aeabi_dmul+0x406>
 8002848:	e7b1      	b.n	80027ae <__aeabi_dmul+0x412>
 800284a:	0765      	lsls	r5, r4, #29
 800284c:	0264      	lsls	r4, r4, #9
 800284e:	0b24      	lsrs	r4, r4, #12
 8002850:	08d2      	lsrs	r2, r2, #3
 8002852:	4315      	orrs	r5, r2
 8002854:	2200      	movs	r2, #0
 8002856:	e611      	b.n	800247c <__aeabi_dmul+0xe0>
 8002858:	2280      	movs	r2, #128	; 0x80
 800285a:	0312      	lsls	r2, r2, #12
 800285c:	4314      	orrs	r4, r2
 800285e:	0324      	lsls	r4, r4, #12
 8002860:	4a01      	ldr	r2, [pc, #4]	; (8002868 <__aeabi_dmul+0x4cc>)
 8002862:	0b24      	lsrs	r4, r4, #12
 8002864:	e60a      	b.n	800247c <__aeabi_dmul+0xe0>
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	000007ff 	.word	0x000007ff
 800286c:	0000043e 	.word	0x0000043e
 8002870:	0000041e 	.word	0x0000041e

08002874 <__aeabi_dsub>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	4657      	mov	r7, sl
 8002878:	464e      	mov	r6, r9
 800287a:	4645      	mov	r5, r8
 800287c:	46de      	mov	lr, fp
 800287e:	0004      	movs	r4, r0
 8002880:	b5e0      	push	{r5, r6, r7, lr}
 8002882:	001f      	movs	r7, r3
 8002884:	0010      	movs	r0, r2
 8002886:	030b      	lsls	r3, r1, #12
 8002888:	0f62      	lsrs	r2, r4, #29
 800288a:	004e      	lsls	r6, r1, #1
 800288c:	0fcd      	lsrs	r5, r1, #31
 800288e:	0a5b      	lsrs	r3, r3, #9
 8002890:	0339      	lsls	r1, r7, #12
 8002892:	4313      	orrs	r3, r2
 8002894:	0a49      	lsrs	r1, r1, #9
 8002896:	00e2      	lsls	r2, r4, #3
 8002898:	0f44      	lsrs	r4, r0, #29
 800289a:	4321      	orrs	r1, r4
 800289c:	4cc2      	ldr	r4, [pc, #776]	; (8002ba8 <__aeabi_dsub+0x334>)
 800289e:	4691      	mov	r9, r2
 80028a0:	4692      	mov	sl, r2
 80028a2:	00c0      	lsls	r0, r0, #3
 80028a4:	007a      	lsls	r2, r7, #1
 80028a6:	4680      	mov	r8, r0
 80028a8:	0d76      	lsrs	r6, r6, #21
 80028aa:	0d52      	lsrs	r2, r2, #21
 80028ac:	0fff      	lsrs	r7, r7, #31
 80028ae:	42a2      	cmp	r2, r4
 80028b0:	d100      	bne.n	80028b4 <__aeabi_dsub+0x40>
 80028b2:	e0b4      	b.n	8002a1e <__aeabi_dsub+0x1aa>
 80028b4:	2401      	movs	r4, #1
 80028b6:	4067      	eors	r7, r4
 80028b8:	46bb      	mov	fp, r7
 80028ba:	42bd      	cmp	r5, r7
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x4c>
 80028be:	e088      	b.n	80029d2 <__aeabi_dsub+0x15e>
 80028c0:	1ab4      	subs	r4, r6, r2
 80028c2:	46a4      	mov	ip, r4
 80028c4:	2c00      	cmp	r4, #0
 80028c6:	dc00      	bgt.n	80028ca <__aeabi_dsub+0x56>
 80028c8:	e0b2      	b.n	8002a30 <__aeabi_dsub+0x1bc>
 80028ca:	2a00      	cmp	r2, #0
 80028cc:	d100      	bne.n	80028d0 <__aeabi_dsub+0x5c>
 80028ce:	e0c5      	b.n	8002a5c <__aeabi_dsub+0x1e8>
 80028d0:	4ab5      	ldr	r2, [pc, #724]	; (8002ba8 <__aeabi_dsub+0x334>)
 80028d2:	4296      	cmp	r6, r2
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x64>
 80028d6:	e28b      	b.n	8002df0 <__aeabi_dsub+0x57c>
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	0412      	lsls	r2, r2, #16
 80028dc:	4311      	orrs	r1, r2
 80028de:	4662      	mov	r2, ip
 80028e0:	2a38      	cmp	r2, #56	; 0x38
 80028e2:	dd00      	ble.n	80028e6 <__aeabi_dsub+0x72>
 80028e4:	e1a1      	b.n	8002c2a <__aeabi_dsub+0x3b6>
 80028e6:	2a1f      	cmp	r2, #31
 80028e8:	dd00      	ble.n	80028ec <__aeabi_dsub+0x78>
 80028ea:	e216      	b.n	8002d1a <__aeabi_dsub+0x4a6>
 80028ec:	2720      	movs	r7, #32
 80028ee:	000c      	movs	r4, r1
 80028f0:	1abf      	subs	r7, r7, r2
 80028f2:	40bc      	lsls	r4, r7
 80028f4:	0002      	movs	r2, r0
 80028f6:	46a0      	mov	r8, r4
 80028f8:	4664      	mov	r4, ip
 80028fa:	40b8      	lsls	r0, r7
 80028fc:	40e2      	lsrs	r2, r4
 80028fe:	4644      	mov	r4, r8
 8002900:	4314      	orrs	r4, r2
 8002902:	0002      	movs	r2, r0
 8002904:	1e50      	subs	r0, r2, #1
 8002906:	4182      	sbcs	r2, r0
 8002908:	4660      	mov	r0, ip
 800290a:	40c1      	lsrs	r1, r0
 800290c:	4322      	orrs	r2, r4
 800290e:	1a5b      	subs	r3, r3, r1
 8002910:	4649      	mov	r1, r9
 8002912:	1a8c      	subs	r4, r1, r2
 8002914:	45a1      	cmp	r9, r4
 8002916:	4192      	sbcs	r2, r2
 8002918:	4252      	negs	r2, r2
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	4698      	mov	r8, r3
 800291e:	4643      	mov	r3, r8
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	d400      	bmi.n	8002926 <__aeabi_dsub+0xb2>
 8002924:	e117      	b.n	8002b56 <__aeabi_dsub+0x2e2>
 8002926:	4643      	mov	r3, r8
 8002928:	025b      	lsls	r3, r3, #9
 800292a:	0a5b      	lsrs	r3, r3, #9
 800292c:	4698      	mov	r8, r3
 800292e:	4643      	mov	r3, r8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d100      	bne.n	8002936 <__aeabi_dsub+0xc2>
 8002934:	e16c      	b.n	8002c10 <__aeabi_dsub+0x39c>
 8002936:	4640      	mov	r0, r8
 8002938:	f000 fca8 	bl	800328c <__clzsi2>
 800293c:	0002      	movs	r2, r0
 800293e:	3a08      	subs	r2, #8
 8002940:	2120      	movs	r1, #32
 8002942:	0020      	movs	r0, r4
 8002944:	4643      	mov	r3, r8
 8002946:	1a89      	subs	r1, r1, r2
 8002948:	4093      	lsls	r3, r2
 800294a:	40c8      	lsrs	r0, r1
 800294c:	4094      	lsls	r4, r2
 800294e:	4303      	orrs	r3, r0
 8002950:	4296      	cmp	r6, r2
 8002952:	dd00      	ble.n	8002956 <__aeabi_dsub+0xe2>
 8002954:	e157      	b.n	8002c06 <__aeabi_dsub+0x392>
 8002956:	1b96      	subs	r6, r2, r6
 8002958:	1c71      	adds	r1, r6, #1
 800295a:	291f      	cmp	r1, #31
 800295c:	dd00      	ble.n	8002960 <__aeabi_dsub+0xec>
 800295e:	e1cb      	b.n	8002cf8 <__aeabi_dsub+0x484>
 8002960:	2220      	movs	r2, #32
 8002962:	0018      	movs	r0, r3
 8002964:	0026      	movs	r6, r4
 8002966:	1a52      	subs	r2, r2, r1
 8002968:	4094      	lsls	r4, r2
 800296a:	4090      	lsls	r0, r2
 800296c:	40ce      	lsrs	r6, r1
 800296e:	40cb      	lsrs	r3, r1
 8002970:	1e62      	subs	r2, r4, #1
 8002972:	4194      	sbcs	r4, r2
 8002974:	4330      	orrs	r0, r6
 8002976:	4698      	mov	r8, r3
 8002978:	2600      	movs	r6, #0
 800297a:	4304      	orrs	r4, r0
 800297c:	0763      	lsls	r3, r4, #29
 800297e:	d009      	beq.n	8002994 <__aeabi_dsub+0x120>
 8002980:	230f      	movs	r3, #15
 8002982:	4023      	ands	r3, r4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d005      	beq.n	8002994 <__aeabi_dsub+0x120>
 8002988:	1d23      	adds	r3, r4, #4
 800298a:	42a3      	cmp	r3, r4
 800298c:	41a4      	sbcs	r4, r4
 800298e:	4264      	negs	r4, r4
 8002990:	44a0      	add	r8, r4
 8002992:	001c      	movs	r4, r3
 8002994:	4643      	mov	r3, r8
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	d400      	bmi.n	800299c <__aeabi_dsub+0x128>
 800299a:	e0df      	b.n	8002b5c <__aeabi_dsub+0x2e8>
 800299c:	4b82      	ldr	r3, [pc, #520]	; (8002ba8 <__aeabi_dsub+0x334>)
 800299e:	3601      	adds	r6, #1
 80029a0:	429e      	cmp	r6, r3
 80029a2:	d100      	bne.n	80029a6 <__aeabi_dsub+0x132>
 80029a4:	e0fb      	b.n	8002b9e <__aeabi_dsub+0x32a>
 80029a6:	4642      	mov	r2, r8
 80029a8:	4b80      	ldr	r3, [pc, #512]	; (8002bac <__aeabi_dsub+0x338>)
 80029aa:	08e4      	lsrs	r4, r4, #3
 80029ac:	401a      	ands	r2, r3
 80029ae:	0013      	movs	r3, r2
 80029b0:	0571      	lsls	r1, r6, #21
 80029b2:	0752      	lsls	r2, r2, #29
 80029b4:	025b      	lsls	r3, r3, #9
 80029b6:	4322      	orrs	r2, r4
 80029b8:	0b1b      	lsrs	r3, r3, #12
 80029ba:	0d49      	lsrs	r1, r1, #21
 80029bc:	0509      	lsls	r1, r1, #20
 80029be:	07ed      	lsls	r5, r5, #31
 80029c0:	4319      	orrs	r1, r3
 80029c2:	4329      	orrs	r1, r5
 80029c4:	0010      	movs	r0, r2
 80029c6:	bcf0      	pop	{r4, r5, r6, r7}
 80029c8:	46bb      	mov	fp, r7
 80029ca:	46b2      	mov	sl, r6
 80029cc:	46a9      	mov	r9, r5
 80029ce:	46a0      	mov	r8, r4
 80029d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029d2:	1ab4      	subs	r4, r6, r2
 80029d4:	46a4      	mov	ip, r4
 80029d6:	2c00      	cmp	r4, #0
 80029d8:	dd58      	ble.n	8002a8c <__aeabi_dsub+0x218>
 80029da:	2a00      	cmp	r2, #0
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x16c>
 80029de:	e09e      	b.n	8002b1e <__aeabi_dsub+0x2aa>
 80029e0:	4a71      	ldr	r2, [pc, #452]	; (8002ba8 <__aeabi_dsub+0x334>)
 80029e2:	4296      	cmp	r6, r2
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x174>
 80029e6:	e13b      	b.n	8002c60 <__aeabi_dsub+0x3ec>
 80029e8:	2280      	movs	r2, #128	; 0x80
 80029ea:	0412      	lsls	r2, r2, #16
 80029ec:	4311      	orrs	r1, r2
 80029ee:	4662      	mov	r2, ip
 80029f0:	2a38      	cmp	r2, #56	; 0x38
 80029f2:	dd00      	ble.n	80029f6 <__aeabi_dsub+0x182>
 80029f4:	e0c1      	b.n	8002b7a <__aeabi_dsub+0x306>
 80029f6:	2a1f      	cmp	r2, #31
 80029f8:	dc00      	bgt.n	80029fc <__aeabi_dsub+0x188>
 80029fa:	e1bb      	b.n	8002d74 <__aeabi_dsub+0x500>
 80029fc:	000c      	movs	r4, r1
 80029fe:	3a20      	subs	r2, #32
 8002a00:	40d4      	lsrs	r4, r2
 8002a02:	0022      	movs	r2, r4
 8002a04:	4664      	mov	r4, ip
 8002a06:	2c20      	cmp	r4, #32
 8002a08:	d004      	beq.n	8002a14 <__aeabi_dsub+0x1a0>
 8002a0a:	2740      	movs	r7, #64	; 0x40
 8002a0c:	1b3f      	subs	r7, r7, r4
 8002a0e:	40b9      	lsls	r1, r7
 8002a10:	4308      	orrs	r0, r1
 8002a12:	4680      	mov	r8, r0
 8002a14:	4644      	mov	r4, r8
 8002a16:	1e61      	subs	r1, r4, #1
 8002a18:	418c      	sbcs	r4, r1
 8002a1a:	4314      	orrs	r4, r2
 8002a1c:	e0b1      	b.n	8002b82 <__aeabi_dsub+0x30e>
 8002a1e:	000c      	movs	r4, r1
 8002a20:	4304      	orrs	r4, r0
 8002a22:	d02a      	beq.n	8002a7a <__aeabi_dsub+0x206>
 8002a24:	46bb      	mov	fp, r7
 8002a26:	42bd      	cmp	r5, r7
 8002a28:	d02d      	beq.n	8002a86 <__aeabi_dsub+0x212>
 8002a2a:	4c61      	ldr	r4, [pc, #388]	; (8002bb0 <__aeabi_dsub+0x33c>)
 8002a2c:	46a4      	mov	ip, r4
 8002a2e:	44b4      	add	ip, r6
 8002a30:	4664      	mov	r4, ip
 8002a32:	2c00      	cmp	r4, #0
 8002a34:	d05c      	beq.n	8002af0 <__aeabi_dsub+0x27c>
 8002a36:	1b94      	subs	r4, r2, r6
 8002a38:	46a4      	mov	ip, r4
 8002a3a:	2e00      	cmp	r6, #0
 8002a3c:	d000      	beq.n	8002a40 <__aeabi_dsub+0x1cc>
 8002a3e:	e115      	b.n	8002c6c <__aeabi_dsub+0x3f8>
 8002a40:	464d      	mov	r5, r9
 8002a42:	431d      	orrs	r5, r3
 8002a44:	d100      	bne.n	8002a48 <__aeabi_dsub+0x1d4>
 8002a46:	e1c3      	b.n	8002dd0 <__aeabi_dsub+0x55c>
 8002a48:	1e65      	subs	r5, r4, #1
 8002a4a:	2c01      	cmp	r4, #1
 8002a4c:	d100      	bne.n	8002a50 <__aeabi_dsub+0x1dc>
 8002a4e:	e20c      	b.n	8002e6a <__aeabi_dsub+0x5f6>
 8002a50:	4e55      	ldr	r6, [pc, #340]	; (8002ba8 <__aeabi_dsub+0x334>)
 8002a52:	42b4      	cmp	r4, r6
 8002a54:	d100      	bne.n	8002a58 <__aeabi_dsub+0x1e4>
 8002a56:	e1f8      	b.n	8002e4a <__aeabi_dsub+0x5d6>
 8002a58:	46ac      	mov	ip, r5
 8002a5a:	e10e      	b.n	8002c7a <__aeabi_dsub+0x406>
 8002a5c:	000a      	movs	r2, r1
 8002a5e:	4302      	orrs	r2, r0
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x1f0>
 8002a62:	e136      	b.n	8002cd2 <__aeabi_dsub+0x45e>
 8002a64:	0022      	movs	r2, r4
 8002a66:	3a01      	subs	r2, #1
 8002a68:	2c01      	cmp	r4, #1
 8002a6a:	d100      	bne.n	8002a6e <__aeabi_dsub+0x1fa>
 8002a6c:	e1c6      	b.n	8002dfc <__aeabi_dsub+0x588>
 8002a6e:	4c4e      	ldr	r4, [pc, #312]	; (8002ba8 <__aeabi_dsub+0x334>)
 8002a70:	45a4      	cmp	ip, r4
 8002a72:	d100      	bne.n	8002a76 <__aeabi_dsub+0x202>
 8002a74:	e0f4      	b.n	8002c60 <__aeabi_dsub+0x3ec>
 8002a76:	4694      	mov	ip, r2
 8002a78:	e731      	b.n	80028de <__aeabi_dsub+0x6a>
 8002a7a:	2401      	movs	r4, #1
 8002a7c:	4067      	eors	r7, r4
 8002a7e:	46bb      	mov	fp, r7
 8002a80:	42bd      	cmp	r5, r7
 8002a82:	d000      	beq.n	8002a86 <__aeabi_dsub+0x212>
 8002a84:	e71c      	b.n	80028c0 <__aeabi_dsub+0x4c>
 8002a86:	4c4a      	ldr	r4, [pc, #296]	; (8002bb0 <__aeabi_dsub+0x33c>)
 8002a88:	46a4      	mov	ip, r4
 8002a8a:	44b4      	add	ip, r6
 8002a8c:	4664      	mov	r4, ip
 8002a8e:	2c00      	cmp	r4, #0
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x220>
 8002a92:	e0cf      	b.n	8002c34 <__aeabi_dsub+0x3c0>
 8002a94:	1b94      	subs	r4, r2, r6
 8002a96:	46a4      	mov	ip, r4
 8002a98:	2e00      	cmp	r6, #0
 8002a9a:	d100      	bne.n	8002a9e <__aeabi_dsub+0x22a>
 8002a9c:	e15c      	b.n	8002d58 <__aeabi_dsub+0x4e4>
 8002a9e:	4e42      	ldr	r6, [pc, #264]	; (8002ba8 <__aeabi_dsub+0x334>)
 8002aa0:	42b2      	cmp	r2, r6
 8002aa2:	d100      	bne.n	8002aa6 <__aeabi_dsub+0x232>
 8002aa4:	e1ec      	b.n	8002e80 <__aeabi_dsub+0x60c>
 8002aa6:	2680      	movs	r6, #128	; 0x80
 8002aa8:	0436      	lsls	r6, r6, #16
 8002aaa:	4333      	orrs	r3, r6
 8002aac:	4664      	mov	r4, ip
 8002aae:	2c38      	cmp	r4, #56	; 0x38
 8002ab0:	dd00      	ble.n	8002ab4 <__aeabi_dsub+0x240>
 8002ab2:	e1b3      	b.n	8002e1c <__aeabi_dsub+0x5a8>
 8002ab4:	2c1f      	cmp	r4, #31
 8002ab6:	dd00      	ble.n	8002aba <__aeabi_dsub+0x246>
 8002ab8:	e238      	b.n	8002f2c <__aeabi_dsub+0x6b8>
 8002aba:	2620      	movs	r6, #32
 8002abc:	1b36      	subs	r6, r6, r4
 8002abe:	001c      	movs	r4, r3
 8002ac0:	40b4      	lsls	r4, r6
 8002ac2:	464f      	mov	r7, r9
 8002ac4:	46a0      	mov	r8, r4
 8002ac6:	4664      	mov	r4, ip
 8002ac8:	40e7      	lsrs	r7, r4
 8002aca:	4644      	mov	r4, r8
 8002acc:	433c      	orrs	r4, r7
 8002ace:	464f      	mov	r7, r9
 8002ad0:	40b7      	lsls	r7, r6
 8002ad2:	003e      	movs	r6, r7
 8002ad4:	1e77      	subs	r7, r6, #1
 8002ad6:	41be      	sbcs	r6, r7
 8002ad8:	4334      	orrs	r4, r6
 8002ada:	4666      	mov	r6, ip
 8002adc:	40f3      	lsrs	r3, r6
 8002ade:	18c9      	adds	r1, r1, r3
 8002ae0:	1824      	adds	r4, r4, r0
 8002ae2:	4284      	cmp	r4, r0
 8002ae4:	419b      	sbcs	r3, r3
 8002ae6:	425b      	negs	r3, r3
 8002ae8:	4698      	mov	r8, r3
 8002aea:	0016      	movs	r6, r2
 8002aec:	4488      	add	r8, r1
 8002aee:	e04e      	b.n	8002b8e <__aeabi_dsub+0x31a>
 8002af0:	4a30      	ldr	r2, [pc, #192]	; (8002bb4 <__aeabi_dsub+0x340>)
 8002af2:	1c74      	adds	r4, r6, #1
 8002af4:	4214      	tst	r4, r2
 8002af6:	d000      	beq.n	8002afa <__aeabi_dsub+0x286>
 8002af8:	e0d6      	b.n	8002ca8 <__aeabi_dsub+0x434>
 8002afa:	464a      	mov	r2, r9
 8002afc:	431a      	orrs	r2, r3
 8002afe:	2e00      	cmp	r6, #0
 8002b00:	d000      	beq.n	8002b04 <__aeabi_dsub+0x290>
 8002b02:	e15b      	b.n	8002dbc <__aeabi_dsub+0x548>
 8002b04:	2a00      	cmp	r2, #0
 8002b06:	d100      	bne.n	8002b0a <__aeabi_dsub+0x296>
 8002b08:	e1a5      	b.n	8002e56 <__aeabi_dsub+0x5e2>
 8002b0a:	000a      	movs	r2, r1
 8002b0c:	4302      	orrs	r2, r0
 8002b0e:	d000      	beq.n	8002b12 <__aeabi_dsub+0x29e>
 8002b10:	e1bb      	b.n	8002e8a <__aeabi_dsub+0x616>
 8002b12:	464a      	mov	r2, r9
 8002b14:	0759      	lsls	r1, r3, #29
 8002b16:	08d2      	lsrs	r2, r2, #3
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	08db      	lsrs	r3, r3, #3
 8002b1c:	e027      	b.n	8002b6e <__aeabi_dsub+0x2fa>
 8002b1e:	000a      	movs	r2, r1
 8002b20:	4302      	orrs	r2, r0
 8002b22:	d100      	bne.n	8002b26 <__aeabi_dsub+0x2b2>
 8002b24:	e174      	b.n	8002e10 <__aeabi_dsub+0x59c>
 8002b26:	0022      	movs	r2, r4
 8002b28:	3a01      	subs	r2, #1
 8002b2a:	2c01      	cmp	r4, #1
 8002b2c:	d005      	beq.n	8002b3a <__aeabi_dsub+0x2c6>
 8002b2e:	4c1e      	ldr	r4, [pc, #120]	; (8002ba8 <__aeabi_dsub+0x334>)
 8002b30:	45a4      	cmp	ip, r4
 8002b32:	d100      	bne.n	8002b36 <__aeabi_dsub+0x2c2>
 8002b34:	e094      	b.n	8002c60 <__aeabi_dsub+0x3ec>
 8002b36:	4694      	mov	ip, r2
 8002b38:	e759      	b.n	80029ee <__aeabi_dsub+0x17a>
 8002b3a:	4448      	add	r0, r9
 8002b3c:	4548      	cmp	r0, r9
 8002b3e:	4192      	sbcs	r2, r2
 8002b40:	185b      	adds	r3, r3, r1
 8002b42:	4698      	mov	r8, r3
 8002b44:	0004      	movs	r4, r0
 8002b46:	4252      	negs	r2, r2
 8002b48:	4490      	add	r8, r2
 8002b4a:	4643      	mov	r3, r8
 8002b4c:	2602      	movs	r6, #2
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	d500      	bpl.n	8002b54 <__aeabi_dsub+0x2e0>
 8002b52:	e0c4      	b.n	8002cde <__aeabi_dsub+0x46a>
 8002b54:	3e01      	subs	r6, #1
 8002b56:	0763      	lsls	r3, r4, #29
 8002b58:	d000      	beq.n	8002b5c <__aeabi_dsub+0x2e8>
 8002b5a:	e711      	b.n	8002980 <__aeabi_dsub+0x10c>
 8002b5c:	4643      	mov	r3, r8
 8002b5e:	46b4      	mov	ip, r6
 8002b60:	0759      	lsls	r1, r3, #29
 8002b62:	08e2      	lsrs	r2, r4, #3
 8002b64:	430a      	orrs	r2, r1
 8002b66:	08db      	lsrs	r3, r3, #3
 8002b68:	490f      	ldr	r1, [pc, #60]	; (8002ba8 <__aeabi_dsub+0x334>)
 8002b6a:	458c      	cmp	ip, r1
 8002b6c:	d040      	beq.n	8002bf0 <__aeabi_dsub+0x37c>
 8002b6e:	4661      	mov	r1, ip
 8002b70:	031b      	lsls	r3, r3, #12
 8002b72:	0549      	lsls	r1, r1, #21
 8002b74:	0b1b      	lsrs	r3, r3, #12
 8002b76:	0d49      	lsrs	r1, r1, #21
 8002b78:	e720      	b.n	80029bc <__aeabi_dsub+0x148>
 8002b7a:	4301      	orrs	r1, r0
 8002b7c:	000c      	movs	r4, r1
 8002b7e:	1e61      	subs	r1, r4, #1
 8002b80:	418c      	sbcs	r4, r1
 8002b82:	444c      	add	r4, r9
 8002b84:	454c      	cmp	r4, r9
 8002b86:	4192      	sbcs	r2, r2
 8002b88:	4252      	negs	r2, r2
 8002b8a:	4690      	mov	r8, r2
 8002b8c:	4498      	add	r8, r3
 8002b8e:	4643      	mov	r3, r8
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	d5e0      	bpl.n	8002b56 <__aeabi_dsub+0x2e2>
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <__aeabi_dsub+0x334>)
 8002b96:	3601      	adds	r6, #1
 8002b98:	429e      	cmp	r6, r3
 8002b9a:	d000      	beq.n	8002b9e <__aeabi_dsub+0x32a>
 8002b9c:	e09f      	b.n	8002cde <__aeabi_dsub+0x46a>
 8002b9e:	0031      	movs	r1, r6
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	e70a      	b.n	80029bc <__aeabi_dsub+0x148>
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	000007ff 	.word	0x000007ff
 8002bac:	ff7fffff 	.word	0xff7fffff
 8002bb0:	fffff801 	.word	0xfffff801
 8002bb4:	000007fe 	.word	0x000007fe
 8002bb8:	2a00      	cmp	r2, #0
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x34a>
 8002bbc:	e160      	b.n	8002e80 <__aeabi_dsub+0x60c>
 8002bbe:	000a      	movs	r2, r1
 8002bc0:	4302      	orrs	r2, r0
 8002bc2:	d04d      	beq.n	8002c60 <__aeabi_dsub+0x3ec>
 8002bc4:	464a      	mov	r2, r9
 8002bc6:	075c      	lsls	r4, r3, #29
 8002bc8:	08d2      	lsrs	r2, r2, #3
 8002bca:	4322      	orrs	r2, r4
 8002bcc:	2480      	movs	r4, #128	; 0x80
 8002bce:	08db      	lsrs	r3, r3, #3
 8002bd0:	0324      	lsls	r4, r4, #12
 8002bd2:	4223      	tst	r3, r4
 8002bd4:	d007      	beq.n	8002be6 <__aeabi_dsub+0x372>
 8002bd6:	08ce      	lsrs	r6, r1, #3
 8002bd8:	4226      	tst	r6, r4
 8002bda:	d104      	bne.n	8002be6 <__aeabi_dsub+0x372>
 8002bdc:	465d      	mov	r5, fp
 8002bde:	0033      	movs	r3, r6
 8002be0:	08c2      	lsrs	r2, r0, #3
 8002be2:	0749      	lsls	r1, r1, #29
 8002be4:	430a      	orrs	r2, r1
 8002be6:	0f51      	lsrs	r1, r2, #29
 8002be8:	00d2      	lsls	r2, r2, #3
 8002bea:	08d2      	lsrs	r2, r2, #3
 8002bec:	0749      	lsls	r1, r1, #29
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	0011      	movs	r1, r2
 8002bf2:	4319      	orrs	r1, r3
 8002bf4:	d100      	bne.n	8002bf8 <__aeabi_dsub+0x384>
 8002bf6:	e1c8      	b.n	8002f8a <__aeabi_dsub+0x716>
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	0309      	lsls	r1, r1, #12
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	031b      	lsls	r3, r3, #12
 8002c00:	49d5      	ldr	r1, [pc, #852]	; (8002f58 <__aeabi_dsub+0x6e4>)
 8002c02:	0b1b      	lsrs	r3, r3, #12
 8002c04:	e6da      	b.n	80029bc <__aeabi_dsub+0x148>
 8002c06:	49d5      	ldr	r1, [pc, #852]	; (8002f5c <__aeabi_dsub+0x6e8>)
 8002c08:	1ab6      	subs	r6, r6, r2
 8002c0a:	400b      	ands	r3, r1
 8002c0c:	4698      	mov	r8, r3
 8002c0e:	e6b5      	b.n	800297c <__aeabi_dsub+0x108>
 8002c10:	0020      	movs	r0, r4
 8002c12:	f000 fb3b 	bl	800328c <__clzsi2>
 8002c16:	0002      	movs	r2, r0
 8002c18:	3218      	adds	r2, #24
 8002c1a:	2a1f      	cmp	r2, #31
 8002c1c:	dc00      	bgt.n	8002c20 <__aeabi_dsub+0x3ac>
 8002c1e:	e68f      	b.n	8002940 <__aeabi_dsub+0xcc>
 8002c20:	0023      	movs	r3, r4
 8002c22:	3808      	subs	r0, #8
 8002c24:	4083      	lsls	r3, r0
 8002c26:	2400      	movs	r4, #0
 8002c28:	e692      	b.n	8002950 <__aeabi_dsub+0xdc>
 8002c2a:	4308      	orrs	r0, r1
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	1e50      	subs	r0, r2, #1
 8002c30:	4182      	sbcs	r2, r0
 8002c32:	e66d      	b.n	8002910 <__aeabi_dsub+0x9c>
 8002c34:	4cca      	ldr	r4, [pc, #808]	; (8002f60 <__aeabi_dsub+0x6ec>)
 8002c36:	1c72      	adds	r2, r6, #1
 8002c38:	4222      	tst	r2, r4
 8002c3a:	d000      	beq.n	8002c3e <__aeabi_dsub+0x3ca>
 8002c3c:	e0ad      	b.n	8002d9a <__aeabi_dsub+0x526>
 8002c3e:	464a      	mov	r2, r9
 8002c40:	431a      	orrs	r2, r3
 8002c42:	2e00      	cmp	r6, #0
 8002c44:	d1b8      	bne.n	8002bb8 <__aeabi_dsub+0x344>
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x3d8>
 8002c4a:	e158      	b.n	8002efe <__aeabi_dsub+0x68a>
 8002c4c:	000a      	movs	r2, r1
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	d000      	beq.n	8002c54 <__aeabi_dsub+0x3e0>
 8002c52:	e159      	b.n	8002f08 <__aeabi_dsub+0x694>
 8002c54:	464a      	mov	r2, r9
 8002c56:	0759      	lsls	r1, r3, #29
 8002c58:	08d2      	lsrs	r2, r2, #3
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	08db      	lsrs	r3, r3, #3
 8002c5e:	e786      	b.n	8002b6e <__aeabi_dsub+0x2fa>
 8002c60:	464a      	mov	r2, r9
 8002c62:	0759      	lsls	r1, r3, #29
 8002c64:	08d2      	lsrs	r2, r2, #3
 8002c66:	430a      	orrs	r2, r1
 8002c68:	08db      	lsrs	r3, r3, #3
 8002c6a:	e7c1      	b.n	8002bf0 <__aeabi_dsub+0x37c>
 8002c6c:	4dba      	ldr	r5, [pc, #744]	; (8002f58 <__aeabi_dsub+0x6e4>)
 8002c6e:	42aa      	cmp	r2, r5
 8002c70:	d100      	bne.n	8002c74 <__aeabi_dsub+0x400>
 8002c72:	e11e      	b.n	8002eb2 <__aeabi_dsub+0x63e>
 8002c74:	2580      	movs	r5, #128	; 0x80
 8002c76:	042d      	lsls	r5, r5, #16
 8002c78:	432b      	orrs	r3, r5
 8002c7a:	4664      	mov	r4, ip
 8002c7c:	2c38      	cmp	r4, #56	; 0x38
 8002c7e:	dc5d      	bgt.n	8002d3c <__aeabi_dsub+0x4c8>
 8002c80:	2c1f      	cmp	r4, #31
 8002c82:	dd00      	ble.n	8002c86 <__aeabi_dsub+0x412>
 8002c84:	e0d0      	b.n	8002e28 <__aeabi_dsub+0x5b4>
 8002c86:	2520      	movs	r5, #32
 8002c88:	4667      	mov	r7, ip
 8002c8a:	1b2d      	subs	r5, r5, r4
 8002c8c:	464e      	mov	r6, r9
 8002c8e:	001c      	movs	r4, r3
 8002c90:	40fe      	lsrs	r6, r7
 8002c92:	40ac      	lsls	r4, r5
 8002c94:	4334      	orrs	r4, r6
 8002c96:	464e      	mov	r6, r9
 8002c98:	40ae      	lsls	r6, r5
 8002c9a:	0035      	movs	r5, r6
 8002c9c:	40fb      	lsrs	r3, r7
 8002c9e:	1e6e      	subs	r6, r5, #1
 8002ca0:	41b5      	sbcs	r5, r6
 8002ca2:	1ac9      	subs	r1, r1, r3
 8002ca4:	432c      	orrs	r4, r5
 8002ca6:	e04e      	b.n	8002d46 <__aeabi_dsub+0x4d2>
 8002ca8:	464a      	mov	r2, r9
 8002caa:	1a14      	subs	r4, r2, r0
 8002cac:	45a1      	cmp	r9, r4
 8002cae:	4192      	sbcs	r2, r2
 8002cb0:	4252      	negs	r2, r2
 8002cb2:	4690      	mov	r8, r2
 8002cb4:	1a5f      	subs	r7, r3, r1
 8002cb6:	003a      	movs	r2, r7
 8002cb8:	4647      	mov	r7, r8
 8002cba:	1bd2      	subs	r2, r2, r7
 8002cbc:	4690      	mov	r8, r2
 8002cbe:	0212      	lsls	r2, r2, #8
 8002cc0:	d500      	bpl.n	8002cc4 <__aeabi_dsub+0x450>
 8002cc2:	e08b      	b.n	8002ddc <__aeabi_dsub+0x568>
 8002cc4:	4642      	mov	r2, r8
 8002cc6:	4322      	orrs	r2, r4
 8002cc8:	d000      	beq.n	8002ccc <__aeabi_dsub+0x458>
 8002cca:	e630      	b.n	800292e <__aeabi_dsub+0xba>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	2500      	movs	r5, #0
 8002cd0:	e74d      	b.n	8002b6e <__aeabi_dsub+0x2fa>
 8002cd2:	464a      	mov	r2, r9
 8002cd4:	0759      	lsls	r1, r3, #29
 8002cd6:	08d2      	lsrs	r2, r2, #3
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	08db      	lsrs	r3, r3, #3
 8002cdc:	e744      	b.n	8002b68 <__aeabi_dsub+0x2f4>
 8002cde:	4642      	mov	r2, r8
 8002ce0:	4b9e      	ldr	r3, [pc, #632]	; (8002f5c <__aeabi_dsub+0x6e8>)
 8002ce2:	0861      	lsrs	r1, r4, #1
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	0013      	movs	r3, r2
 8002ce8:	2201      	movs	r2, #1
 8002cea:	4014      	ands	r4, r2
 8002cec:	430c      	orrs	r4, r1
 8002cee:	07da      	lsls	r2, r3, #31
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	4698      	mov	r8, r3
 8002cf4:	4314      	orrs	r4, r2
 8002cf6:	e641      	b.n	800297c <__aeabi_dsub+0x108>
 8002cf8:	001a      	movs	r2, r3
 8002cfa:	3e1f      	subs	r6, #31
 8002cfc:	40f2      	lsrs	r2, r6
 8002cfe:	0016      	movs	r6, r2
 8002d00:	2920      	cmp	r1, #32
 8002d02:	d003      	beq.n	8002d0c <__aeabi_dsub+0x498>
 8002d04:	2240      	movs	r2, #64	; 0x40
 8002d06:	1a51      	subs	r1, r2, r1
 8002d08:	408b      	lsls	r3, r1
 8002d0a:	431c      	orrs	r4, r3
 8002d0c:	1e62      	subs	r2, r4, #1
 8002d0e:	4194      	sbcs	r4, r2
 8002d10:	2300      	movs	r3, #0
 8002d12:	4334      	orrs	r4, r6
 8002d14:	4698      	mov	r8, r3
 8002d16:	2600      	movs	r6, #0
 8002d18:	e71d      	b.n	8002b56 <__aeabi_dsub+0x2e2>
 8002d1a:	000c      	movs	r4, r1
 8002d1c:	3a20      	subs	r2, #32
 8002d1e:	40d4      	lsrs	r4, r2
 8002d20:	0022      	movs	r2, r4
 8002d22:	4664      	mov	r4, ip
 8002d24:	2c20      	cmp	r4, #32
 8002d26:	d004      	beq.n	8002d32 <__aeabi_dsub+0x4be>
 8002d28:	2740      	movs	r7, #64	; 0x40
 8002d2a:	1b3f      	subs	r7, r7, r4
 8002d2c:	40b9      	lsls	r1, r7
 8002d2e:	4308      	orrs	r0, r1
 8002d30:	4680      	mov	r8, r0
 8002d32:	4644      	mov	r4, r8
 8002d34:	1e61      	subs	r1, r4, #1
 8002d36:	418c      	sbcs	r4, r1
 8002d38:	4322      	orrs	r2, r4
 8002d3a:	e5e9      	b.n	8002910 <__aeabi_dsub+0x9c>
 8002d3c:	464c      	mov	r4, r9
 8002d3e:	4323      	orrs	r3, r4
 8002d40:	001c      	movs	r4, r3
 8002d42:	1e63      	subs	r3, r4, #1
 8002d44:	419c      	sbcs	r4, r3
 8002d46:	1b04      	subs	r4, r0, r4
 8002d48:	42a0      	cmp	r0, r4
 8002d4a:	419b      	sbcs	r3, r3
 8002d4c:	425b      	negs	r3, r3
 8002d4e:	1acb      	subs	r3, r1, r3
 8002d50:	4698      	mov	r8, r3
 8002d52:	465d      	mov	r5, fp
 8002d54:	0016      	movs	r6, r2
 8002d56:	e5e2      	b.n	800291e <__aeabi_dsub+0xaa>
 8002d58:	464e      	mov	r6, r9
 8002d5a:	431e      	orrs	r6, r3
 8002d5c:	d100      	bne.n	8002d60 <__aeabi_dsub+0x4ec>
 8002d5e:	e0ae      	b.n	8002ebe <__aeabi_dsub+0x64a>
 8002d60:	1e66      	subs	r6, r4, #1
 8002d62:	2c01      	cmp	r4, #1
 8002d64:	d100      	bne.n	8002d68 <__aeabi_dsub+0x4f4>
 8002d66:	e0fd      	b.n	8002f64 <__aeabi_dsub+0x6f0>
 8002d68:	4f7b      	ldr	r7, [pc, #492]	; (8002f58 <__aeabi_dsub+0x6e4>)
 8002d6a:	42bc      	cmp	r4, r7
 8002d6c:	d100      	bne.n	8002d70 <__aeabi_dsub+0x4fc>
 8002d6e:	e107      	b.n	8002f80 <__aeabi_dsub+0x70c>
 8002d70:	46b4      	mov	ip, r6
 8002d72:	e69b      	b.n	8002aac <__aeabi_dsub+0x238>
 8002d74:	4664      	mov	r4, ip
 8002d76:	2220      	movs	r2, #32
 8002d78:	1b12      	subs	r2, r2, r4
 8002d7a:	000c      	movs	r4, r1
 8002d7c:	4094      	lsls	r4, r2
 8002d7e:	0007      	movs	r7, r0
 8002d80:	4090      	lsls	r0, r2
 8002d82:	46a0      	mov	r8, r4
 8002d84:	4664      	mov	r4, ip
 8002d86:	1e42      	subs	r2, r0, #1
 8002d88:	4190      	sbcs	r0, r2
 8002d8a:	4662      	mov	r2, ip
 8002d8c:	40e7      	lsrs	r7, r4
 8002d8e:	4644      	mov	r4, r8
 8002d90:	40d1      	lsrs	r1, r2
 8002d92:	433c      	orrs	r4, r7
 8002d94:	4304      	orrs	r4, r0
 8002d96:	185b      	adds	r3, r3, r1
 8002d98:	e6f3      	b.n	8002b82 <__aeabi_dsub+0x30e>
 8002d9a:	4c6f      	ldr	r4, [pc, #444]	; (8002f58 <__aeabi_dsub+0x6e4>)
 8002d9c:	42a2      	cmp	r2, r4
 8002d9e:	d100      	bne.n	8002da2 <__aeabi_dsub+0x52e>
 8002da0:	e0d5      	b.n	8002f4e <__aeabi_dsub+0x6da>
 8002da2:	4448      	add	r0, r9
 8002da4:	185b      	adds	r3, r3, r1
 8002da6:	4548      	cmp	r0, r9
 8002da8:	4189      	sbcs	r1, r1
 8002daa:	4249      	negs	r1, r1
 8002dac:	185b      	adds	r3, r3, r1
 8002dae:	07dc      	lsls	r4, r3, #31
 8002db0:	0840      	lsrs	r0, r0, #1
 8002db2:	085b      	lsrs	r3, r3, #1
 8002db4:	4698      	mov	r8, r3
 8002db6:	0016      	movs	r6, r2
 8002db8:	4304      	orrs	r4, r0
 8002dba:	e6cc      	b.n	8002b56 <__aeabi_dsub+0x2e2>
 8002dbc:	2a00      	cmp	r2, #0
 8002dbe:	d000      	beq.n	8002dc2 <__aeabi_dsub+0x54e>
 8002dc0:	e082      	b.n	8002ec8 <__aeabi_dsub+0x654>
 8002dc2:	000a      	movs	r2, r1
 8002dc4:	4302      	orrs	r2, r0
 8002dc6:	d140      	bne.n	8002e4a <__aeabi_dsub+0x5d6>
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	2500      	movs	r5, #0
 8002dcc:	031b      	lsls	r3, r3, #12
 8002dce:	e713      	b.n	8002bf8 <__aeabi_dsub+0x384>
 8002dd0:	074b      	lsls	r3, r1, #29
 8002dd2:	08c2      	lsrs	r2, r0, #3
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	465d      	mov	r5, fp
 8002dd8:	08cb      	lsrs	r3, r1, #3
 8002dda:	e6c5      	b.n	8002b68 <__aeabi_dsub+0x2f4>
 8002ddc:	464a      	mov	r2, r9
 8002dde:	1a84      	subs	r4, r0, r2
 8002de0:	42a0      	cmp	r0, r4
 8002de2:	4192      	sbcs	r2, r2
 8002de4:	1acb      	subs	r3, r1, r3
 8002de6:	4252      	negs	r2, r2
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	4698      	mov	r8, r3
 8002dec:	465d      	mov	r5, fp
 8002dee:	e59e      	b.n	800292e <__aeabi_dsub+0xba>
 8002df0:	464a      	mov	r2, r9
 8002df2:	0759      	lsls	r1, r3, #29
 8002df4:	08d2      	lsrs	r2, r2, #3
 8002df6:	430a      	orrs	r2, r1
 8002df8:	08db      	lsrs	r3, r3, #3
 8002dfa:	e6f9      	b.n	8002bf0 <__aeabi_dsub+0x37c>
 8002dfc:	464a      	mov	r2, r9
 8002dfe:	1a14      	subs	r4, r2, r0
 8002e00:	45a1      	cmp	r9, r4
 8002e02:	4192      	sbcs	r2, r2
 8002e04:	1a5b      	subs	r3, r3, r1
 8002e06:	4252      	negs	r2, r2
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	4698      	mov	r8, r3
 8002e0c:	2601      	movs	r6, #1
 8002e0e:	e586      	b.n	800291e <__aeabi_dsub+0xaa>
 8002e10:	464a      	mov	r2, r9
 8002e12:	0759      	lsls	r1, r3, #29
 8002e14:	08d2      	lsrs	r2, r2, #3
 8002e16:	430a      	orrs	r2, r1
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	e6a5      	b.n	8002b68 <__aeabi_dsub+0x2f4>
 8002e1c:	464c      	mov	r4, r9
 8002e1e:	4323      	orrs	r3, r4
 8002e20:	001c      	movs	r4, r3
 8002e22:	1e63      	subs	r3, r4, #1
 8002e24:	419c      	sbcs	r4, r3
 8002e26:	e65b      	b.n	8002ae0 <__aeabi_dsub+0x26c>
 8002e28:	4665      	mov	r5, ip
 8002e2a:	001e      	movs	r6, r3
 8002e2c:	3d20      	subs	r5, #32
 8002e2e:	40ee      	lsrs	r6, r5
 8002e30:	2c20      	cmp	r4, #32
 8002e32:	d005      	beq.n	8002e40 <__aeabi_dsub+0x5cc>
 8002e34:	2540      	movs	r5, #64	; 0x40
 8002e36:	1b2d      	subs	r5, r5, r4
 8002e38:	40ab      	lsls	r3, r5
 8002e3a:	464c      	mov	r4, r9
 8002e3c:	431c      	orrs	r4, r3
 8002e3e:	46a2      	mov	sl, r4
 8002e40:	4654      	mov	r4, sl
 8002e42:	1e63      	subs	r3, r4, #1
 8002e44:	419c      	sbcs	r4, r3
 8002e46:	4334      	orrs	r4, r6
 8002e48:	e77d      	b.n	8002d46 <__aeabi_dsub+0x4d2>
 8002e4a:	074b      	lsls	r3, r1, #29
 8002e4c:	08c2      	lsrs	r2, r0, #3
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	465d      	mov	r5, fp
 8002e52:	08cb      	lsrs	r3, r1, #3
 8002e54:	e6cc      	b.n	8002bf0 <__aeabi_dsub+0x37c>
 8002e56:	000a      	movs	r2, r1
 8002e58:	4302      	orrs	r2, r0
 8002e5a:	d100      	bne.n	8002e5e <__aeabi_dsub+0x5ea>
 8002e5c:	e736      	b.n	8002ccc <__aeabi_dsub+0x458>
 8002e5e:	074b      	lsls	r3, r1, #29
 8002e60:	08c2      	lsrs	r2, r0, #3
 8002e62:	431a      	orrs	r2, r3
 8002e64:	465d      	mov	r5, fp
 8002e66:	08cb      	lsrs	r3, r1, #3
 8002e68:	e681      	b.n	8002b6e <__aeabi_dsub+0x2fa>
 8002e6a:	464a      	mov	r2, r9
 8002e6c:	1a84      	subs	r4, r0, r2
 8002e6e:	42a0      	cmp	r0, r4
 8002e70:	4192      	sbcs	r2, r2
 8002e72:	1acb      	subs	r3, r1, r3
 8002e74:	4252      	negs	r2, r2
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	4698      	mov	r8, r3
 8002e7a:	465d      	mov	r5, fp
 8002e7c:	2601      	movs	r6, #1
 8002e7e:	e54e      	b.n	800291e <__aeabi_dsub+0xaa>
 8002e80:	074b      	lsls	r3, r1, #29
 8002e82:	08c2      	lsrs	r2, r0, #3
 8002e84:	431a      	orrs	r2, r3
 8002e86:	08cb      	lsrs	r3, r1, #3
 8002e88:	e6b2      	b.n	8002bf0 <__aeabi_dsub+0x37c>
 8002e8a:	464a      	mov	r2, r9
 8002e8c:	1a14      	subs	r4, r2, r0
 8002e8e:	45a1      	cmp	r9, r4
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	1a5f      	subs	r7, r3, r1
 8002e94:	4252      	negs	r2, r2
 8002e96:	1aba      	subs	r2, r7, r2
 8002e98:	4690      	mov	r8, r2
 8002e9a:	0212      	lsls	r2, r2, #8
 8002e9c:	d56b      	bpl.n	8002f76 <__aeabi_dsub+0x702>
 8002e9e:	464a      	mov	r2, r9
 8002ea0:	1a84      	subs	r4, r0, r2
 8002ea2:	42a0      	cmp	r0, r4
 8002ea4:	4192      	sbcs	r2, r2
 8002ea6:	1acb      	subs	r3, r1, r3
 8002ea8:	4252      	negs	r2, r2
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	4698      	mov	r8, r3
 8002eae:	465d      	mov	r5, fp
 8002eb0:	e564      	b.n	800297c <__aeabi_dsub+0x108>
 8002eb2:	074b      	lsls	r3, r1, #29
 8002eb4:	08c2      	lsrs	r2, r0, #3
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	465d      	mov	r5, fp
 8002eba:	08cb      	lsrs	r3, r1, #3
 8002ebc:	e698      	b.n	8002bf0 <__aeabi_dsub+0x37c>
 8002ebe:	074b      	lsls	r3, r1, #29
 8002ec0:	08c2      	lsrs	r2, r0, #3
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	08cb      	lsrs	r3, r1, #3
 8002ec6:	e64f      	b.n	8002b68 <__aeabi_dsub+0x2f4>
 8002ec8:	000a      	movs	r2, r1
 8002eca:	4302      	orrs	r2, r0
 8002ecc:	d090      	beq.n	8002df0 <__aeabi_dsub+0x57c>
 8002ece:	464a      	mov	r2, r9
 8002ed0:	075c      	lsls	r4, r3, #29
 8002ed2:	08d2      	lsrs	r2, r2, #3
 8002ed4:	4314      	orrs	r4, r2
 8002ed6:	2280      	movs	r2, #128	; 0x80
 8002ed8:	08db      	lsrs	r3, r3, #3
 8002eda:	0312      	lsls	r2, r2, #12
 8002edc:	4213      	tst	r3, r2
 8002ede:	d008      	beq.n	8002ef2 <__aeabi_dsub+0x67e>
 8002ee0:	08ce      	lsrs	r6, r1, #3
 8002ee2:	4216      	tst	r6, r2
 8002ee4:	d105      	bne.n	8002ef2 <__aeabi_dsub+0x67e>
 8002ee6:	08c0      	lsrs	r0, r0, #3
 8002ee8:	0749      	lsls	r1, r1, #29
 8002eea:	4308      	orrs	r0, r1
 8002eec:	0004      	movs	r4, r0
 8002eee:	465d      	mov	r5, fp
 8002ef0:	0033      	movs	r3, r6
 8002ef2:	0f61      	lsrs	r1, r4, #29
 8002ef4:	00e2      	lsls	r2, r4, #3
 8002ef6:	0749      	lsls	r1, r1, #29
 8002ef8:	08d2      	lsrs	r2, r2, #3
 8002efa:	430a      	orrs	r2, r1
 8002efc:	e678      	b.n	8002bf0 <__aeabi_dsub+0x37c>
 8002efe:	074b      	lsls	r3, r1, #29
 8002f00:	08c2      	lsrs	r2, r0, #3
 8002f02:	431a      	orrs	r2, r3
 8002f04:	08cb      	lsrs	r3, r1, #3
 8002f06:	e632      	b.n	8002b6e <__aeabi_dsub+0x2fa>
 8002f08:	4448      	add	r0, r9
 8002f0a:	185b      	adds	r3, r3, r1
 8002f0c:	4548      	cmp	r0, r9
 8002f0e:	4192      	sbcs	r2, r2
 8002f10:	4698      	mov	r8, r3
 8002f12:	4252      	negs	r2, r2
 8002f14:	4490      	add	r8, r2
 8002f16:	4643      	mov	r3, r8
 8002f18:	0004      	movs	r4, r0
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	d400      	bmi.n	8002f20 <__aeabi_dsub+0x6ac>
 8002f1e:	e61a      	b.n	8002b56 <__aeabi_dsub+0x2e2>
 8002f20:	4642      	mov	r2, r8
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <__aeabi_dsub+0x6e8>)
 8002f24:	2601      	movs	r6, #1
 8002f26:	401a      	ands	r2, r3
 8002f28:	4690      	mov	r8, r2
 8002f2a:	e614      	b.n	8002b56 <__aeabi_dsub+0x2e2>
 8002f2c:	4666      	mov	r6, ip
 8002f2e:	001f      	movs	r7, r3
 8002f30:	3e20      	subs	r6, #32
 8002f32:	40f7      	lsrs	r7, r6
 8002f34:	2c20      	cmp	r4, #32
 8002f36:	d005      	beq.n	8002f44 <__aeabi_dsub+0x6d0>
 8002f38:	2640      	movs	r6, #64	; 0x40
 8002f3a:	1b36      	subs	r6, r6, r4
 8002f3c:	40b3      	lsls	r3, r6
 8002f3e:	464c      	mov	r4, r9
 8002f40:	431c      	orrs	r4, r3
 8002f42:	46a2      	mov	sl, r4
 8002f44:	4654      	mov	r4, sl
 8002f46:	1e63      	subs	r3, r4, #1
 8002f48:	419c      	sbcs	r4, r3
 8002f4a:	433c      	orrs	r4, r7
 8002f4c:	e5c8      	b.n	8002ae0 <__aeabi_dsub+0x26c>
 8002f4e:	0011      	movs	r1, r2
 8002f50:	2300      	movs	r3, #0
 8002f52:	2200      	movs	r2, #0
 8002f54:	e532      	b.n	80029bc <__aeabi_dsub+0x148>
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	000007ff 	.word	0x000007ff
 8002f5c:	ff7fffff 	.word	0xff7fffff
 8002f60:	000007fe 	.word	0x000007fe
 8002f64:	464a      	mov	r2, r9
 8002f66:	1814      	adds	r4, r2, r0
 8002f68:	4284      	cmp	r4, r0
 8002f6a:	4192      	sbcs	r2, r2
 8002f6c:	185b      	adds	r3, r3, r1
 8002f6e:	4698      	mov	r8, r3
 8002f70:	4252      	negs	r2, r2
 8002f72:	4490      	add	r8, r2
 8002f74:	e5e9      	b.n	8002b4a <__aeabi_dsub+0x2d6>
 8002f76:	4642      	mov	r2, r8
 8002f78:	4322      	orrs	r2, r4
 8002f7a:	d100      	bne.n	8002f7e <__aeabi_dsub+0x70a>
 8002f7c:	e6a6      	b.n	8002ccc <__aeabi_dsub+0x458>
 8002f7e:	e5ea      	b.n	8002b56 <__aeabi_dsub+0x2e2>
 8002f80:	074b      	lsls	r3, r1, #29
 8002f82:	08c2      	lsrs	r2, r0, #3
 8002f84:	431a      	orrs	r2, r3
 8002f86:	08cb      	lsrs	r3, r1, #3
 8002f88:	e632      	b.n	8002bf0 <__aeabi_dsub+0x37c>
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	4901      	ldr	r1, [pc, #4]	; (8002f94 <__aeabi_dsub+0x720>)
 8002f8e:	0013      	movs	r3, r2
 8002f90:	e514      	b.n	80029bc <__aeabi_dsub+0x148>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	000007ff 	.word	0x000007ff

08002f98 <__aeabi_dcmpun>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	0005      	movs	r5, r0
 8002f9c:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <__aeabi_dcmpun+0x38>)
 8002f9e:	030c      	lsls	r4, r1, #12
 8002fa0:	0016      	movs	r6, r2
 8002fa2:	0049      	lsls	r1, r1, #1
 8002fa4:	031a      	lsls	r2, r3, #12
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	0b24      	lsrs	r4, r4, #12
 8002faa:	0d49      	lsrs	r1, r1, #21
 8002fac:	0b12      	lsrs	r2, r2, #12
 8002fae:	0d5b      	lsrs	r3, r3, #21
 8002fb0:	4281      	cmp	r1, r0
 8002fb2:	d008      	beq.n	8002fc6 <__aeabi_dcmpun+0x2e>
 8002fb4:	4906      	ldr	r1, [pc, #24]	; (8002fd0 <__aeabi_dcmpun+0x38>)
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	428b      	cmp	r3, r1
 8002fba:	d103      	bne.n	8002fc4 <__aeabi_dcmpun+0x2c>
 8002fbc:	4332      	orrs	r2, r6
 8002fbe:	0010      	movs	r0, r2
 8002fc0:	1e42      	subs	r2, r0, #1
 8002fc2:	4190      	sbcs	r0, r2
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	432c      	orrs	r4, r5
 8002fca:	d1fb      	bne.n	8002fc4 <__aeabi_dcmpun+0x2c>
 8002fcc:	e7f2      	b.n	8002fb4 <__aeabi_dcmpun+0x1c>
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	000007ff 	.word	0x000007ff

08002fd4 <__aeabi_d2iz>:
 8002fd4:	000a      	movs	r2, r1
 8002fd6:	b530      	push	{r4, r5, lr}
 8002fd8:	4c13      	ldr	r4, [pc, #76]	; (8003028 <__aeabi_d2iz+0x54>)
 8002fda:	0053      	lsls	r3, r2, #1
 8002fdc:	0309      	lsls	r1, r1, #12
 8002fde:	0005      	movs	r5, r0
 8002fe0:	0b09      	lsrs	r1, r1, #12
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	0d5b      	lsrs	r3, r3, #21
 8002fe6:	0fd2      	lsrs	r2, r2, #31
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	dd04      	ble.n	8002ff6 <__aeabi_d2iz+0x22>
 8002fec:	480f      	ldr	r0, [pc, #60]	; (800302c <__aeabi_d2iz+0x58>)
 8002fee:	4283      	cmp	r3, r0
 8002ff0:	dd02      	ble.n	8002ff8 <__aeabi_d2iz+0x24>
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <__aeabi_d2iz+0x5c>)
 8002ff4:	18d0      	adds	r0, r2, r3
 8002ff6:	bd30      	pop	{r4, r5, pc}
 8002ff8:	2080      	movs	r0, #128	; 0x80
 8002ffa:	0340      	lsls	r0, r0, #13
 8002ffc:	4301      	orrs	r1, r0
 8002ffe:	480d      	ldr	r0, [pc, #52]	; (8003034 <__aeabi_d2iz+0x60>)
 8003000:	1ac0      	subs	r0, r0, r3
 8003002:	281f      	cmp	r0, #31
 8003004:	dd08      	ble.n	8003018 <__aeabi_d2iz+0x44>
 8003006:	480c      	ldr	r0, [pc, #48]	; (8003038 <__aeabi_d2iz+0x64>)
 8003008:	1ac3      	subs	r3, r0, r3
 800300a:	40d9      	lsrs	r1, r3
 800300c:	000b      	movs	r3, r1
 800300e:	4258      	negs	r0, r3
 8003010:	2a00      	cmp	r2, #0
 8003012:	d1f0      	bne.n	8002ff6 <__aeabi_d2iz+0x22>
 8003014:	0018      	movs	r0, r3
 8003016:	e7ee      	b.n	8002ff6 <__aeabi_d2iz+0x22>
 8003018:	4c08      	ldr	r4, [pc, #32]	; (800303c <__aeabi_d2iz+0x68>)
 800301a:	40c5      	lsrs	r5, r0
 800301c:	46a4      	mov	ip, r4
 800301e:	4463      	add	r3, ip
 8003020:	4099      	lsls	r1, r3
 8003022:	000b      	movs	r3, r1
 8003024:	432b      	orrs	r3, r5
 8003026:	e7f2      	b.n	800300e <__aeabi_d2iz+0x3a>
 8003028:	000003fe 	.word	0x000003fe
 800302c:	0000041d 	.word	0x0000041d
 8003030:	7fffffff 	.word	0x7fffffff
 8003034:	00000433 	.word	0x00000433
 8003038:	00000413 	.word	0x00000413
 800303c:	fffffbed 	.word	0xfffffbed

08003040 <__aeabi_i2d>:
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	2800      	cmp	r0, #0
 8003044:	d016      	beq.n	8003074 <__aeabi_i2d+0x34>
 8003046:	17c3      	asrs	r3, r0, #31
 8003048:	18c5      	adds	r5, r0, r3
 800304a:	405d      	eors	r5, r3
 800304c:	0fc4      	lsrs	r4, r0, #31
 800304e:	0028      	movs	r0, r5
 8003050:	f000 f91c 	bl	800328c <__clzsi2>
 8003054:	4a11      	ldr	r2, [pc, #68]	; (800309c <__aeabi_i2d+0x5c>)
 8003056:	1a12      	subs	r2, r2, r0
 8003058:	280a      	cmp	r0, #10
 800305a:	dc16      	bgt.n	800308a <__aeabi_i2d+0x4a>
 800305c:	0003      	movs	r3, r0
 800305e:	002e      	movs	r6, r5
 8003060:	3315      	adds	r3, #21
 8003062:	409e      	lsls	r6, r3
 8003064:	230b      	movs	r3, #11
 8003066:	1a18      	subs	r0, r3, r0
 8003068:	40c5      	lsrs	r5, r0
 800306a:	0553      	lsls	r3, r2, #21
 800306c:	032d      	lsls	r5, r5, #12
 800306e:	0b2d      	lsrs	r5, r5, #12
 8003070:	0d5b      	lsrs	r3, r3, #21
 8003072:	e003      	b.n	800307c <__aeabi_i2d+0x3c>
 8003074:	2400      	movs	r4, #0
 8003076:	2300      	movs	r3, #0
 8003078:	2500      	movs	r5, #0
 800307a:	2600      	movs	r6, #0
 800307c:	051b      	lsls	r3, r3, #20
 800307e:	432b      	orrs	r3, r5
 8003080:	07e4      	lsls	r4, r4, #31
 8003082:	4323      	orrs	r3, r4
 8003084:	0030      	movs	r0, r6
 8003086:	0019      	movs	r1, r3
 8003088:	bd70      	pop	{r4, r5, r6, pc}
 800308a:	380b      	subs	r0, #11
 800308c:	4085      	lsls	r5, r0
 800308e:	0553      	lsls	r3, r2, #21
 8003090:	032d      	lsls	r5, r5, #12
 8003092:	2600      	movs	r6, #0
 8003094:	0b2d      	lsrs	r5, r5, #12
 8003096:	0d5b      	lsrs	r3, r3, #21
 8003098:	e7f0      	b.n	800307c <__aeabi_i2d+0x3c>
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	0000041e 	.word	0x0000041e

080030a0 <__aeabi_ui2d>:
 80030a0:	b510      	push	{r4, lr}
 80030a2:	1e04      	subs	r4, r0, #0
 80030a4:	d010      	beq.n	80030c8 <__aeabi_ui2d+0x28>
 80030a6:	f000 f8f1 	bl	800328c <__clzsi2>
 80030aa:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <__aeabi_ui2d+0x48>)
 80030ac:	1a1b      	subs	r3, r3, r0
 80030ae:	280a      	cmp	r0, #10
 80030b0:	dc11      	bgt.n	80030d6 <__aeabi_ui2d+0x36>
 80030b2:	220b      	movs	r2, #11
 80030b4:	0021      	movs	r1, r4
 80030b6:	1a12      	subs	r2, r2, r0
 80030b8:	40d1      	lsrs	r1, r2
 80030ba:	3015      	adds	r0, #21
 80030bc:	030a      	lsls	r2, r1, #12
 80030be:	055b      	lsls	r3, r3, #21
 80030c0:	4084      	lsls	r4, r0
 80030c2:	0b12      	lsrs	r2, r2, #12
 80030c4:	0d5b      	lsrs	r3, r3, #21
 80030c6:	e001      	b.n	80030cc <__aeabi_ui2d+0x2c>
 80030c8:	2300      	movs	r3, #0
 80030ca:	2200      	movs	r2, #0
 80030cc:	051b      	lsls	r3, r3, #20
 80030ce:	4313      	orrs	r3, r2
 80030d0:	0020      	movs	r0, r4
 80030d2:	0019      	movs	r1, r3
 80030d4:	bd10      	pop	{r4, pc}
 80030d6:	0022      	movs	r2, r4
 80030d8:	380b      	subs	r0, #11
 80030da:	4082      	lsls	r2, r0
 80030dc:	055b      	lsls	r3, r3, #21
 80030de:	0312      	lsls	r2, r2, #12
 80030e0:	2400      	movs	r4, #0
 80030e2:	0b12      	lsrs	r2, r2, #12
 80030e4:	0d5b      	lsrs	r3, r3, #21
 80030e6:	e7f1      	b.n	80030cc <__aeabi_ui2d+0x2c>
 80030e8:	0000041e 	.word	0x0000041e

080030ec <__aeabi_f2d>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	0043      	lsls	r3, r0, #1
 80030f0:	0246      	lsls	r6, r0, #9
 80030f2:	0fc4      	lsrs	r4, r0, #31
 80030f4:	20fe      	movs	r0, #254	; 0xfe
 80030f6:	0e1b      	lsrs	r3, r3, #24
 80030f8:	1c59      	adds	r1, r3, #1
 80030fa:	0a75      	lsrs	r5, r6, #9
 80030fc:	4208      	tst	r0, r1
 80030fe:	d00c      	beq.n	800311a <__aeabi_f2d+0x2e>
 8003100:	22e0      	movs	r2, #224	; 0xe0
 8003102:	0092      	lsls	r2, r2, #2
 8003104:	4694      	mov	ip, r2
 8003106:	076d      	lsls	r5, r5, #29
 8003108:	0b36      	lsrs	r6, r6, #12
 800310a:	4463      	add	r3, ip
 800310c:	051b      	lsls	r3, r3, #20
 800310e:	4333      	orrs	r3, r6
 8003110:	07e4      	lsls	r4, r4, #31
 8003112:	4323      	orrs	r3, r4
 8003114:	0028      	movs	r0, r5
 8003116:	0019      	movs	r1, r3
 8003118:	bd70      	pop	{r4, r5, r6, pc}
 800311a:	2b00      	cmp	r3, #0
 800311c:	d114      	bne.n	8003148 <__aeabi_f2d+0x5c>
 800311e:	2d00      	cmp	r5, #0
 8003120:	d01b      	beq.n	800315a <__aeabi_f2d+0x6e>
 8003122:	0028      	movs	r0, r5
 8003124:	f000 f8b2 	bl	800328c <__clzsi2>
 8003128:	280a      	cmp	r0, #10
 800312a:	dc1c      	bgt.n	8003166 <__aeabi_f2d+0x7a>
 800312c:	230b      	movs	r3, #11
 800312e:	002a      	movs	r2, r5
 8003130:	1a1b      	subs	r3, r3, r0
 8003132:	40da      	lsrs	r2, r3
 8003134:	0003      	movs	r3, r0
 8003136:	3315      	adds	r3, #21
 8003138:	409d      	lsls	r5, r3
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <__aeabi_f2d+0x88>)
 800313c:	0312      	lsls	r2, r2, #12
 800313e:	1a1b      	subs	r3, r3, r0
 8003140:	055b      	lsls	r3, r3, #21
 8003142:	0b16      	lsrs	r6, r2, #12
 8003144:	0d5b      	lsrs	r3, r3, #21
 8003146:	e7e1      	b.n	800310c <__aeabi_f2d+0x20>
 8003148:	2d00      	cmp	r5, #0
 800314a:	d009      	beq.n	8003160 <__aeabi_f2d+0x74>
 800314c:	0b32      	lsrs	r2, r6, #12
 800314e:	2680      	movs	r6, #128	; 0x80
 8003150:	0336      	lsls	r6, r6, #12
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <__aeabi_f2d+0x8c>)
 8003154:	076d      	lsls	r5, r5, #29
 8003156:	4316      	orrs	r6, r2
 8003158:	e7d8      	b.n	800310c <__aeabi_f2d+0x20>
 800315a:	2300      	movs	r3, #0
 800315c:	2600      	movs	r6, #0
 800315e:	e7d5      	b.n	800310c <__aeabi_f2d+0x20>
 8003160:	2600      	movs	r6, #0
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <__aeabi_f2d+0x8c>)
 8003164:	e7d2      	b.n	800310c <__aeabi_f2d+0x20>
 8003166:	0003      	movs	r3, r0
 8003168:	002a      	movs	r2, r5
 800316a:	3b0b      	subs	r3, #11
 800316c:	409a      	lsls	r2, r3
 800316e:	2500      	movs	r5, #0
 8003170:	e7e3      	b.n	800313a <__aeabi_f2d+0x4e>
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	00000389 	.word	0x00000389
 8003178:	000007ff 	.word	0x000007ff

0800317c <__aeabi_d2f>:
 800317c:	0002      	movs	r2, r0
 800317e:	004b      	lsls	r3, r1, #1
 8003180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003182:	0308      	lsls	r0, r1, #12
 8003184:	0d5b      	lsrs	r3, r3, #21
 8003186:	4e3d      	ldr	r6, [pc, #244]	; (800327c <__aeabi_d2f+0x100>)
 8003188:	0fcc      	lsrs	r4, r1, #31
 800318a:	0a40      	lsrs	r0, r0, #9
 800318c:	0f51      	lsrs	r1, r2, #29
 800318e:	1c5f      	adds	r7, r3, #1
 8003190:	4308      	orrs	r0, r1
 8003192:	00d5      	lsls	r5, r2, #3
 8003194:	4237      	tst	r7, r6
 8003196:	d00a      	beq.n	80031ae <__aeabi_d2f+0x32>
 8003198:	4939      	ldr	r1, [pc, #228]	; (8003280 <__aeabi_d2f+0x104>)
 800319a:	185e      	adds	r6, r3, r1
 800319c:	2efe      	cmp	r6, #254	; 0xfe
 800319e:	dd16      	ble.n	80031ce <__aeabi_d2f+0x52>
 80031a0:	23ff      	movs	r3, #255	; 0xff
 80031a2:	2100      	movs	r1, #0
 80031a4:	05db      	lsls	r3, r3, #23
 80031a6:	430b      	orrs	r3, r1
 80031a8:	07e0      	lsls	r0, r4, #31
 80031aa:	4318      	orrs	r0, r3
 80031ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <__aeabi_d2f+0x44>
 80031b2:	4328      	orrs	r0, r5
 80031b4:	d027      	beq.n	8003206 <__aeabi_d2f+0x8a>
 80031b6:	2105      	movs	r1, #5
 80031b8:	0189      	lsls	r1, r1, #6
 80031ba:	0a49      	lsrs	r1, r1, #9
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e7f1      	b.n	80031a4 <__aeabi_d2f+0x28>
 80031c0:	4305      	orrs	r5, r0
 80031c2:	d0ed      	beq.n	80031a0 <__aeabi_d2f+0x24>
 80031c4:	2180      	movs	r1, #128	; 0x80
 80031c6:	03c9      	lsls	r1, r1, #15
 80031c8:	23ff      	movs	r3, #255	; 0xff
 80031ca:	4301      	orrs	r1, r0
 80031cc:	e7ea      	b.n	80031a4 <__aeabi_d2f+0x28>
 80031ce:	2e00      	cmp	r6, #0
 80031d0:	dd1c      	ble.n	800320c <__aeabi_d2f+0x90>
 80031d2:	0192      	lsls	r2, r2, #6
 80031d4:	0011      	movs	r1, r2
 80031d6:	1e4a      	subs	r2, r1, #1
 80031d8:	4191      	sbcs	r1, r2
 80031da:	00c0      	lsls	r0, r0, #3
 80031dc:	0f6d      	lsrs	r5, r5, #29
 80031de:	4301      	orrs	r1, r0
 80031e0:	4329      	orrs	r1, r5
 80031e2:	074b      	lsls	r3, r1, #29
 80031e4:	d048      	beq.n	8003278 <__aeabi_d2f+0xfc>
 80031e6:	230f      	movs	r3, #15
 80031e8:	400b      	ands	r3, r1
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d000      	beq.n	80031f0 <__aeabi_d2f+0x74>
 80031ee:	3104      	adds	r1, #4
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	04db      	lsls	r3, r3, #19
 80031f4:	400b      	ands	r3, r1
 80031f6:	d03f      	beq.n	8003278 <__aeabi_d2f+0xfc>
 80031f8:	1c72      	adds	r2, r6, #1
 80031fa:	2efe      	cmp	r6, #254	; 0xfe
 80031fc:	d0d0      	beq.n	80031a0 <__aeabi_d2f+0x24>
 80031fe:	0189      	lsls	r1, r1, #6
 8003200:	0a49      	lsrs	r1, r1, #9
 8003202:	b2d3      	uxtb	r3, r2
 8003204:	e7ce      	b.n	80031a4 <__aeabi_d2f+0x28>
 8003206:	2300      	movs	r3, #0
 8003208:	2100      	movs	r1, #0
 800320a:	e7cb      	b.n	80031a4 <__aeabi_d2f+0x28>
 800320c:	0032      	movs	r2, r6
 800320e:	3217      	adds	r2, #23
 8003210:	db22      	blt.n	8003258 <__aeabi_d2f+0xdc>
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	221e      	movs	r2, #30
 8003216:	0409      	lsls	r1, r1, #16
 8003218:	4308      	orrs	r0, r1
 800321a:	1b92      	subs	r2, r2, r6
 800321c:	2a1f      	cmp	r2, #31
 800321e:	dd1d      	ble.n	800325c <__aeabi_d2f+0xe0>
 8003220:	2102      	movs	r1, #2
 8003222:	4249      	negs	r1, r1
 8003224:	1b8e      	subs	r6, r1, r6
 8003226:	0001      	movs	r1, r0
 8003228:	40f1      	lsrs	r1, r6
 800322a:	000e      	movs	r6, r1
 800322c:	2a20      	cmp	r2, #32
 800322e:	d004      	beq.n	800323a <__aeabi_d2f+0xbe>
 8003230:	4a14      	ldr	r2, [pc, #80]	; (8003284 <__aeabi_d2f+0x108>)
 8003232:	4694      	mov	ip, r2
 8003234:	4463      	add	r3, ip
 8003236:	4098      	lsls	r0, r3
 8003238:	4305      	orrs	r5, r0
 800323a:	0029      	movs	r1, r5
 800323c:	1e4d      	subs	r5, r1, #1
 800323e:	41a9      	sbcs	r1, r5
 8003240:	4331      	orrs	r1, r6
 8003242:	2600      	movs	r6, #0
 8003244:	074b      	lsls	r3, r1, #29
 8003246:	d1ce      	bne.n	80031e6 <__aeabi_d2f+0x6a>
 8003248:	2080      	movs	r0, #128	; 0x80
 800324a:	000b      	movs	r3, r1
 800324c:	04c0      	lsls	r0, r0, #19
 800324e:	2201      	movs	r2, #1
 8003250:	4003      	ands	r3, r0
 8003252:	4201      	tst	r1, r0
 8003254:	d1d3      	bne.n	80031fe <__aeabi_d2f+0x82>
 8003256:	e7af      	b.n	80031b8 <__aeabi_d2f+0x3c>
 8003258:	2300      	movs	r3, #0
 800325a:	e7ac      	b.n	80031b6 <__aeabi_d2f+0x3a>
 800325c:	490a      	ldr	r1, [pc, #40]	; (8003288 <__aeabi_d2f+0x10c>)
 800325e:	468c      	mov	ip, r1
 8003260:	0029      	movs	r1, r5
 8003262:	4463      	add	r3, ip
 8003264:	40d1      	lsrs	r1, r2
 8003266:	409d      	lsls	r5, r3
 8003268:	000a      	movs	r2, r1
 800326a:	0029      	movs	r1, r5
 800326c:	4098      	lsls	r0, r3
 800326e:	1e4d      	subs	r5, r1, #1
 8003270:	41a9      	sbcs	r1, r5
 8003272:	4301      	orrs	r1, r0
 8003274:	4311      	orrs	r1, r2
 8003276:	e7e4      	b.n	8003242 <__aeabi_d2f+0xc6>
 8003278:	0033      	movs	r3, r6
 800327a:	e79d      	b.n	80031b8 <__aeabi_d2f+0x3c>
 800327c:	000007fe 	.word	0x000007fe
 8003280:	fffffc80 	.word	0xfffffc80
 8003284:	fffffca2 	.word	0xfffffca2
 8003288:	fffffc82 	.word	0xfffffc82

0800328c <__clzsi2>:
 800328c:	211c      	movs	r1, #28
 800328e:	2301      	movs	r3, #1
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	4298      	cmp	r0, r3
 8003294:	d301      	bcc.n	800329a <__clzsi2+0xe>
 8003296:	0c00      	lsrs	r0, r0, #16
 8003298:	3910      	subs	r1, #16
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	4298      	cmp	r0, r3
 800329e:	d301      	bcc.n	80032a4 <__clzsi2+0x18>
 80032a0:	0a00      	lsrs	r0, r0, #8
 80032a2:	3908      	subs	r1, #8
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	4298      	cmp	r0, r3
 80032a8:	d301      	bcc.n	80032ae <__clzsi2+0x22>
 80032aa:	0900      	lsrs	r0, r0, #4
 80032ac:	3904      	subs	r1, #4
 80032ae:	a202      	add	r2, pc, #8	; (adr r2, 80032b8 <__clzsi2+0x2c>)
 80032b0:	5c10      	ldrb	r0, [r2, r0]
 80032b2:	1840      	adds	r0, r0, r1
 80032b4:	4770      	bx	lr
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	02020304 	.word	0x02020304
 80032bc:	01010101 	.word	0x01010101
	...

080032c8 <__clzdi2>:
 80032c8:	b510      	push	{r4, lr}
 80032ca:	2900      	cmp	r1, #0
 80032cc:	d103      	bne.n	80032d6 <__clzdi2+0xe>
 80032ce:	f7ff ffdd 	bl	800328c <__clzsi2>
 80032d2:	3020      	adds	r0, #32
 80032d4:	e002      	b.n	80032dc <__clzdi2+0x14>
 80032d6:	1c08      	adds	r0, r1, #0
 80032d8:	f7ff ffd8 	bl	800328c <__clzsi2>
 80032dc:	bd10      	pop	{r4, pc}
 80032de:	46c0      	nop			; (mov r8, r8)

080032e0 <pow10_>:
	while(pos<255 && str[pos]!=sym)
		pos++;
	return pos;
}
uint32_t pow10_(uint8_t value)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	0002      	movs	r2, r0
 80032e8:	1dfb      	adds	r3, r7, #7
 80032ea:	701a      	strb	r2, [r3, #0]
  if (value>0)
 80032ec:	1dfb      	adds	r3, r7, #7
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00c      	beq.n	800330e <pow10_+0x2e>
  	return 10*pow10_(value-1);
 80032f4:	1dfb      	adds	r3, r7, #7
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7ff ffef 	bl	80032e0 <pow10_>
 8003302:	0002      	movs	r2, r0
 8003304:	0013      	movs	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	189b      	adds	r3, r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	e000      	b.n	8003310 <pow10_+0x30>
  else
  	return 1;
 800330e:	2301      	movs	r3, #1
}
 8003310:	0018      	movs	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	b002      	add	sp, #8
 8003316:	bd80      	pop	{r7, pc}

08003318 <pow16>:

uint32_t pow16(uint8_t value)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	0002      	movs	r2, r0
 8003320:	1dfb      	adds	r3, r7, #7
 8003322:	701a      	strb	r2, [r3, #0]
	return 1<<(value*4);
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	2201      	movs	r2, #1
 800332c:	409a      	lsls	r2, r3
 800332e:	0013      	movs	r3, r2
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b002      	add	sp, #8
 8003336:	bd80      	pop	{r7, pc}

08003338 <DecToInt>:
sprintf(resString,"%li.%d",leftPart,rightPart);
return resString;
}

uint32_t DecToInt(uint8_t * string, uint8_t len)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	000a      	movs	r2, r1
 8003342:	1cfb      	adds	r3, r7, #3
 8003344:	701a      	strb	r2, [r3, #0]
	uint32_t value=0;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
	uint8_t i=0;
 800334a:	210b      	movs	r1, #11
 800334c:	187b      	adds	r3, r7, r1
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
	for(i=0;i<len;i++)
 8003352:	187b      	adds	r3, r7, r1
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
 8003358:	e031      	b.n	80033be <DecToInt+0x86>
	if (string[i]>='0' && string[i]<='9')
 800335a:	210b      	movs	r1, #11
 800335c:	187b      	adds	r3, r7, r1
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	18d3      	adds	r3, r2, r3
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b2f      	cmp	r3, #47	; 0x2f
 8003368:	d91e      	bls.n	80033a8 <DecToInt+0x70>
 800336a:	187b      	adds	r3, r7, r1
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	18d3      	adds	r3, r2, r3
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b39      	cmp	r3, #57	; 0x39
 8003376:	d817      	bhi.n	80033a8 <DecToInt+0x70>
	value+=(string[i]-'0')*pow10_(len-i-1);
 8003378:	187b      	adds	r3, r7, r1
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	18d3      	adds	r3, r2, r3
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	3b30      	subs	r3, #48	; 0x30
 8003384:	001c      	movs	r4, r3
 8003386:	1cfa      	adds	r2, r7, #3
 8003388:	187b      	adds	r3, r7, r1
 800338a:	7812      	ldrb	r2, [r2, #0]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	0018      	movs	r0, r3
 8003398:	f7ff ffa2 	bl	80032e0 <pow10_>
 800339c:	0003      	movs	r3, r0
 800339e:	4363      	muls	r3, r4
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	18d3      	adds	r3, r2, r3
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	e004      	b.n	80033b2 <DecToInt+0x7a>
	else
	{
		Error_Handler();
 80033a8:	f001 fe5a 	bl	8005060 <Error_Handler>
		return 0xFFFFFFFF;
 80033ac:	2301      	movs	r3, #1
 80033ae:	425b      	negs	r3, r3
 80033b0:	e00d      	b.n	80033ce <DecToInt+0x96>
	for(i=0;i<len;i++)
 80033b2:	210b      	movs	r1, #11
 80033b4:	187b      	adds	r3, r7, r1
 80033b6:	781a      	ldrb	r2, [r3, #0]
 80033b8:	187b      	adds	r3, r7, r1
 80033ba:	3201      	adds	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	230b      	movs	r3, #11
 80033c0:	18fa      	adds	r2, r7, r3
 80033c2:	1cfb      	adds	r3, r7, #3
 80033c4:	7812      	ldrb	r2, [r2, #0]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d3c6      	bcc.n	800335a <DecToInt+0x22>
	}
	return value;
 80033cc:	68fb      	ldr	r3, [r7, #12]
}
 80033ce:	0018      	movs	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b005      	add	sp, #20
 80033d4:	bd90      	pop	{r4, r7, pc}
	...

080033d8 <HexToInt>:

uint32_t HexToInt(uint8_t * string, uint8_t len)
{
 80033d8:	b590      	push	{r4, r7, lr}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	000a      	movs	r2, r1
 80033e2:	1cfb      	adds	r3, r7, #3
 80033e4:	701a      	strb	r2, [r3, #0]
	uint32_t value=0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
	uint32_t tmp=0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
	uint8_t i=0;
 80033ee:	210f      	movs	r1, #15
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]

	for(i=0;i<len;i++)
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	e059      	b.n	80034b2 <HexToInt+0xda>
	{
		switch (string[i])
 80033fe:	230f      	movs	r3, #15
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	18d3      	adds	r3, r2, r3
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	3b30      	subs	r3, #48	; 0x30
 800340c:	2b36      	cmp	r3, #54	; 0x36
 800340e:	d834      	bhi.n	800347a <HexToInt+0xa2>
 8003410:	009a      	lsls	r2, r3, #2
 8003412:	4b2e      	ldr	r3, [pc, #184]	; (80034cc <HexToInt+0xf4>)
 8003414:	18d3      	adds	r3, r2, r3
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	469f      	mov	pc, r3
		{
		case '0': tmp=0; break;
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	e031      	b.n	8003484 <HexToInt+0xac>
		case '1': tmp=1; break;
 8003420:	2301      	movs	r3, #1
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	e02e      	b.n	8003484 <HexToInt+0xac>
		case '2': tmp=2; break;
 8003426:	2302      	movs	r3, #2
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	e02b      	b.n	8003484 <HexToInt+0xac>
		case '3': tmp=3; break;
 800342c:	2303      	movs	r3, #3
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	e028      	b.n	8003484 <HexToInt+0xac>
		case '4': tmp=4; break;
 8003432:	2304      	movs	r3, #4
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	e025      	b.n	8003484 <HexToInt+0xac>
		case '5': tmp=5; break;
 8003438:	2305      	movs	r3, #5
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	e022      	b.n	8003484 <HexToInt+0xac>
		case '6': tmp=6; break;
 800343e:	2306      	movs	r3, #6
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	e01f      	b.n	8003484 <HexToInt+0xac>
		case '7': tmp=7; break;
 8003444:	2307      	movs	r3, #7
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	e01c      	b.n	8003484 <HexToInt+0xac>
		case '8': tmp=8; break;
 800344a:	2308      	movs	r3, #8
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	e019      	b.n	8003484 <HexToInt+0xac>
		case '9': tmp=9; break;
 8003450:	2309      	movs	r3, #9
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e016      	b.n	8003484 <HexToInt+0xac>
		case 'A':
		case 'a': tmp=10; break;
 8003456:	230a      	movs	r3, #10
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e013      	b.n	8003484 <HexToInt+0xac>
		case 'B':
		case 'b': tmp=11; break;
 800345c:	230b      	movs	r3, #11
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	e010      	b.n	8003484 <HexToInt+0xac>
		case 'C':
		case 'c': tmp=12; break;
 8003462:	230c      	movs	r3, #12
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	e00d      	b.n	8003484 <HexToInt+0xac>
		case 'D':
		case 'd': tmp=13; break;
 8003468:	230d      	movs	r3, #13
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e00a      	b.n	8003484 <HexToInt+0xac>
		case 'E':
		case 'e': tmp=14; break;
 800346e:	230e      	movs	r3, #14
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	e007      	b.n	8003484 <HexToInt+0xac>
		case 'F':
		case 'f': tmp=15; break;
 8003474:	230f      	movs	r3, #15
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e004      	b.n	8003484 <HexToInt+0xac>
		default:
			Error_Handler();
 800347a:	f001 fdf1 	bl	8005060 <Error_Handler>
			return 0xFFFFFFFF;
 800347e:	2301      	movs	r3, #1
 8003480:	425b      	negs	r3, r3
 8003482:	e01e      	b.n	80034c2 <HexToInt+0xea>
		}
		value+=tmp*pow16(len-i-1);
 8003484:	1cfa      	adds	r2, r7, #3
 8003486:	240f      	movs	r4, #15
 8003488:	193b      	adds	r3, r7, r4
 800348a:	7812      	ldrb	r2, [r2, #0]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	0018      	movs	r0, r3
 8003498:	f7ff ff3e 	bl	8003318 <pow16>
 800349c:	0002      	movs	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4353      	muls	r3, r2
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	18d3      	adds	r3, r2, r3
 80034a6:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 80034a8:	193b      	adds	r3, r7, r4
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	193b      	adds	r3, r7, r4
 80034ae:	3201      	adds	r2, #1
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	230f      	movs	r3, #15
 80034b4:	18fa      	adds	r2, r7, r3
 80034b6:	1cfb      	adds	r3, r7, #3
 80034b8:	7812      	ldrb	r2, [r2, #0]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d39e      	bcc.n	80033fe <HexToInt+0x26>
	}
	return value;
 80034c0:	697b      	ldr	r3, [r7, #20]
}
 80034c2:	0018      	movs	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b007      	add	sp, #28
 80034c8:	bd90      	pop	{r4, r7, pc}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	0800e948 	.word	0x0800e948

080034d0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int fd, char *ptr, int len) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000L);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	b29a      	uxth	r2, r3
 80034e0:	23fa      	movs	r3, #250	; 0xfa
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	4804      	ldr	r0, [pc, #16]	; (80034f8 <_write+0x28>)
 80034e8:	f006 fba4 	bl	8009c34 <HAL_UART_Transmit>
	return len;
 80034ec:	687b      	ldr	r3, [r7, #4]
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b004      	add	sp, #16
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	20000348 	.word	0x20000348

080034fc <debugLogTime>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 1000);
	return ch;
}

void debugLogTime(char *string) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	if (settings.debugLevel) {
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <debugLogTime+0x6c>)
 8003506:	7e1b      	ldrb	r3, [r3, #24]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d029      	beq.n	8003560 <debugLogTime+0x64>
		uint32_t time = RTC->TR;
 800350c:	4b17      	ldr	r3, [pc, #92]	; (800356c <debugLogTime+0x70>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
		printf("\n");
 8003512:	200a      	movs	r0, #10
 8003514:	f008 fb6c 	bl	800bbf0 <putchar>
		printf("%08lu", HAL_GetTick());
 8003518:	f002 ffb0 	bl	800647c <HAL_GetTick>
 800351c:	0002      	movs	r2, r0
 800351e:	4b14      	ldr	r3, [pc, #80]	; (8003570 <debugLogTime+0x74>)
 8003520:	0011      	movs	r1, r2
 8003522:	0018      	movs	r0, r3
 8003524:	f008 fb4a 	bl	800bbbc <iprintf>
		printf(" %02x:%02x:%02x ", (uint16_t) (time >> 16) & 0xFF, (uint16_t) (time >> 8) & 0xFF, (uint16_t) time & 0xFF);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	0c1b      	lsrs	r3, r3, #16
 800352c:	b29b      	uxth	r3, r3
 800352e:	001a      	movs	r2, r3
 8003530:	23ff      	movs	r3, #255	; 0xff
 8003532:	401a      	ands	r2, r3
 8003534:	0011      	movs	r1, r2
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	b29b      	uxth	r3, r3
 800353c:	001a      	movs	r2, r3
 800353e:	23ff      	movs	r3, #255	; 0xff
 8003540:	401a      	ands	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	b29b      	uxth	r3, r3
 8003546:	0018      	movs	r0, r3
 8003548:	23ff      	movs	r3, #255	; 0xff
 800354a:	4003      	ands	r3, r0
 800354c:	4809      	ldr	r0, [pc, #36]	; (8003574 <debugLogTime+0x78>)
 800354e:	f008 fb35 	bl	800bbbc <iprintf>
		printf(string);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	0018      	movs	r0, r3
 8003556:	f008 fb31 	bl	800bbbc <iprintf>
		printf("\n");
 800355a:	200a      	movs	r0, #10
 800355c:	f008 fb48 	bl	800bbf0 <putchar>
	}
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b004      	add	sp, #16
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000234 	.word	0x20000234
 800356c:	40002800 	.word	0x40002800
 8003570:	0800e3d8 	.word	0x0800e3d8
 8003574:	0800e3e0 	.word	0x0800e3e0

08003578 <debugLog>:

void debugLog(char *string) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	if (settings.debugLevel) {
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <debugLog+0x28>)
 8003582:	7e1b      	ldrb	r3, [r3, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d006      	beq.n	8003596 <debugLog+0x1e>
		printf(string);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f008 fb16 	bl	800bbbc <iprintf>
		printf("\n");
 8003590:	200a      	movs	r0, #10
 8003592:	f008 fb2d 	bl	800bbf0 <putchar>
	}
}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	46bd      	mov	sp, r7
 800359a:	b002      	add	sp, #8
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	20000234 	.word	0x20000234

080035a4 <debugLogInt>:

void debugLogInt(char *format, int n) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
	if (settings.debugLevel) {
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <debugLogInt+0x2c>)
 80035b0:	7e1b      	ldrb	r3, [r3, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <debugLogInt+0x24>
		printf(format, n);
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	0011      	movs	r1, r2
 80035bc:	0018      	movs	r0, r3
 80035be:	f008 fafd 	bl	800bbbc <iprintf>
		printf("\n");
 80035c2:	200a      	movs	r0, #10
 80035c4:	f008 fb14 	bl	800bbf0 <putchar>
	}
}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b002      	add	sp, #8
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000234 	.word	0x20000234

080035d4 <debugLogString>:

void debugLogString(char *format, char *string) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
	if (settings.debugLevel) {
 80035de:	4b08      	ldr	r3, [pc, #32]	; (8003600 <debugLogString+0x2c>)
 80035e0:	7e1b      	ldrb	r3, [r3, #24]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <debugLogString+0x24>
		printf(format, string);
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	0011      	movs	r1, r2
 80035ec:	0018      	movs	r0, r3
 80035ee:	f008 fae5 	bl	800bbbc <iprintf>
		printf("\n");
 80035f2:	200a      	movs	r0, #10
 80035f4:	f008 fafc 	bl	800bbf0 <putchar>
	}
}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b002      	add	sp, #8
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000234 	.word	0x20000234

08003604 <getVoltage>:
 * @brief Gets voltage level of MCU Vdd pin
 * Calculates MCU Vdd voltage by internal reference
 * @param None
 * @retval  Volage
 */
float getVoltage() {
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
	uint16_t adc[2];
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc, 2);
 800360a:	1d39      	adds	r1, r7, #4
 800360c:	4b15      	ldr	r3, [pc, #84]	; (8003664 <getVoltage+0x60>)
 800360e:	2202      	movs	r2, #2
 8003610:	0018      	movs	r0, r3
 8003612:	f003 f8e3 	bl	80067dc <HAL_ADC_Start_DMA>
	HAL_Delay(5);
 8003616:	2005      	movs	r0, #5
 8003618:	f002 ff3a 	bl	8006490 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc, 2);
 800361c:	1d39      	adds	r1, r7, #4
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <getVoltage+0x60>)
 8003620:	2202      	movs	r2, #2
 8003622:	0018      	movs	r0, r3
 8003624:	f003 f8da 	bl	80067dc <HAL_ADC_Start_DMA>
	HAL_Delay(2);
 8003628:	2002      	movs	r0, #2
 800362a:	f002 ff31 	bl	8006490 <HAL_Delay>
	return 3.0f * (float) VREF_CAL_VALUE / (float) adc[1];
 800362e:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <getVoltage+0x64>)
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	0018      	movs	r0, r3
 8003634:	f7fd ff06 	bl	8001444 <__aeabi_ui2f>
 8003638:	1c03      	adds	r3, r0, #0
 800363a:	490c      	ldr	r1, [pc, #48]	; (800366c <getVoltage+0x68>)
 800363c:	1c18      	adds	r0, r3, #0
 800363e:	f7fd fbff 	bl	8000e40 <__aeabi_fmul>
 8003642:	1c03      	adds	r3, r0, #0
 8003644:	1c1c      	adds	r4, r3, #0
 8003646:	1d3b      	adds	r3, r7, #4
 8003648:	885b      	ldrh	r3, [r3, #2]
 800364a:	0018      	movs	r0, r3
 800364c:	f7fd fefa 	bl	8001444 <__aeabi_ui2f>
 8003650:	1c03      	adds	r3, r0, #0
 8003652:	1c19      	adds	r1, r3, #0
 8003654:	1c20      	adds	r0, r4, #0
 8003656:	f7fd fa29 	bl	8000aac <__aeabi_fdiv>
 800365a:	1c03      	adds	r3, r0, #0
}
 800365c:	1c18      	adds	r0, r3, #0
 800365e:	46bd      	mov	sp, r7
 8003660:	b003      	add	sp, #12
 8003662:	bd90      	pop	{r4, r7, pc}
 8003664:	200004f4 	.word	0x200004f4
 8003668:	1ff80078 	.word	0x1ff80078
 800366c:	40400000 	.word	0x40400000

08003670 <getTemperature>:
 * @brief Gets Temperature of Node
 * Can be calculated through NTC thermistor or TI IC
 * @param None
 * @retval  Temperature in Celsius
 */
float getTemperature() {
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
	uint16_t adc;
	float Rt = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
	float tKelvin = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
	float tCelsius = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
#ifdef USE_NTC
	HAL_GPIO_WritePin(TempPower_GPIO_Port, TempPower_Pin, 1);
 8003682:	23a0      	movs	r3, #160	; 0xa0
 8003684:	05db      	lsls	r3, r3, #23
 8003686:	2201      	movs	r2, #1
 8003688:	2102      	movs	r1, #2
 800368a:	0018      	movs	r0, r3
 800368c:	f004 f9c5 	bl	8007a1a <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) &adc, 1);
 8003690:	1cb9      	adds	r1, r7, #2
 8003692:	4b3e      	ldr	r3, [pc, #248]	; (800378c <getTemperature+0x11c>)
 8003694:	2201      	movs	r2, #1
 8003696:	0018      	movs	r0, r3
 8003698:	f003 f8a0 	bl	80067dc <HAL_ADC_Start_DMA>
	HAL_Delay(5);
 800369c:	2005      	movs	r0, #5
 800369e:	f002 fef7 	bl	8006490 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) &adc, 1);
 80036a2:	1cb9      	adds	r1, r7, #2
 80036a4:	4b39      	ldr	r3, [pc, #228]	; (800378c <getTemperature+0x11c>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	0018      	movs	r0, r3
 80036aa:	f003 f897 	bl	80067dc <HAL_ADC_Start_DMA>
	HAL_Delay(2);
 80036ae:	2002      	movs	r0, #2
 80036b0:	f002 feee 	bl	8006490 <HAL_Delay>
	Rt = R_BALANCE * (4096.0 / (float) adc - 1.0F);
 80036b4:	1cbb      	adds	r3, r7, #2
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f7fd fec3 	bl	8001444 <__aeabi_ui2f>
 80036be:	1c03      	adds	r3, r0, #0
 80036c0:	1c18      	adds	r0, r3, #0
 80036c2:	f7ff fd13 	bl	80030ec <__aeabi_f2d>
 80036c6:	0002      	movs	r2, r0
 80036c8:	000b      	movs	r3, r1
 80036ca:	2000      	movs	r0, #0
 80036cc:	4930      	ldr	r1, [pc, #192]	; (8003790 <getTemperature+0x120>)
 80036ce:	f7fe fa5f 	bl	8001b90 <__aeabi_ddiv>
 80036d2:	0002      	movs	r2, r0
 80036d4:	000b      	movs	r3, r1
 80036d6:	0010      	movs	r0, r2
 80036d8:	0019      	movs	r1, r3
 80036da:	2200      	movs	r2, #0
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <getTemperature+0x124>)
 80036de:	f7ff f8c9 	bl	8002874 <__aeabi_dsub>
 80036e2:	0002      	movs	r2, r0
 80036e4:	000b      	movs	r3, r1
 80036e6:	0010      	movs	r0, r2
 80036e8:	0019      	movs	r1, r3
 80036ea:	2200      	movs	r2, #0
 80036ec:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <getTemperature+0x128>)
 80036ee:	f7fe fe55 	bl	800239c <__aeabi_dmul>
 80036f2:	0002      	movs	r2, r0
 80036f4:	000b      	movs	r3, r1
 80036f6:	0010      	movs	r0, r2
 80036f8:	0019      	movs	r1, r3
 80036fa:	f7ff fd3f 	bl	800317c <__aeabi_d2f>
 80036fe:	1c03      	adds	r3, r0, #0
 8003700:	60fb      	str	r3, [r7, #12]
	tKelvin = (BETA * HOME_TEMP) / (BETA + (HOME_TEMP * log(Rt / R_THERMISTOR_DEFAULT)));
 8003702:	4926      	ldr	r1, [pc, #152]	; (800379c <getTemperature+0x12c>)
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7fd f9d1 	bl	8000aac <__aeabi_fdiv>
 800370a:	1c03      	adds	r3, r0, #0
 800370c:	1c18      	adds	r0, r3, #0
 800370e:	f7ff fced 	bl	80030ec <__aeabi_f2d>
 8003712:	0002      	movs	r2, r0
 8003714:	000b      	movs	r3, r1
 8003716:	0010      	movs	r0, r2
 8003718:	0019      	movs	r1, r3
 800371a:	f00a fc47 	bl	800dfac <log>
 800371e:	22c0      	movs	r2, #192	; 0xc0
 8003720:	05d2      	lsls	r2, r2, #23
 8003722:	4b1f      	ldr	r3, [pc, #124]	; (80037a0 <getTemperature+0x130>)
 8003724:	f7fe fe3a 	bl	800239c <__aeabi_dmul>
 8003728:	0002      	movs	r2, r0
 800372a:	000b      	movs	r3, r1
 800372c:	0010      	movs	r0, r2
 800372e:	0019      	movs	r1, r3
 8003730:	2200      	movs	r2, #0
 8003732:	4b1c      	ldr	r3, [pc, #112]	; (80037a4 <getTemperature+0x134>)
 8003734:	f7fd fec2 	bl	80014bc <__aeabi_dadd>
 8003738:	0002      	movs	r2, r0
 800373a:	000b      	movs	r3, r1
 800373c:	2080      	movs	r0, #128	; 0x80
 800373e:	0600      	lsls	r0, r0, #24
 8003740:	4919      	ldr	r1, [pc, #100]	; (80037a8 <getTemperature+0x138>)
 8003742:	f7fe fa25 	bl	8001b90 <__aeabi_ddiv>
 8003746:	0002      	movs	r2, r0
 8003748:	000b      	movs	r3, r1
 800374a:	0010      	movs	r0, r2
 800374c:	0019      	movs	r1, r3
 800374e:	f7ff fd15 	bl	800317c <__aeabi_d2f>
 8003752:	1c03      	adds	r3, r0, #0
 8003754:	60bb      	str	r3, [r7, #8]

	tCelsius = tKelvin - 273.15;
 8003756:	68b8      	ldr	r0, [r7, #8]
 8003758:	f7ff fcc8 	bl	80030ec <__aeabi_f2d>
 800375c:	4a13      	ldr	r2, [pc, #76]	; (80037ac <getTemperature+0x13c>)
 800375e:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <getTemperature+0x140>)
 8003760:	f7ff f888 	bl	8002874 <__aeabi_dsub>
 8003764:	0002      	movs	r2, r0
 8003766:	000b      	movs	r3, r1
 8003768:	0010      	movs	r0, r2
 800376a:	0019      	movs	r1, r3
 800376c:	f7ff fd06 	bl	800317c <__aeabi_d2f>
 8003770:	1c03      	adds	r3, r0, #0
 8003772:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(TempPower_GPIO_Port, TempPower_Pin, 0);
 8003774:	23a0      	movs	r3, #160	; 0xa0
 8003776:	05db      	lsls	r3, r3, #23
 8003778:	2200      	movs	r2, #0
 800377a:	2102      	movs	r1, #2
 800377c:	0018      	movs	r0, r3
 800377e:	f004 f94c 	bl	8007a1a <HAL_GPIO_WritePin>
#endif
	return tCelsius;
 8003782:	687b      	ldr	r3, [r7, #4]
}
 8003784:	1c18      	adds	r0, r3, #0
 8003786:	46bd      	mov	sp, r7
 8003788:	b004      	add	sp, #16
 800378a:	bd80      	pop	{r7, pc}
 800378c:	200004f4 	.word	0x200004f4
 8003790:	40b00000 	.word	0x40b00000
 8003794:	3ff00000 	.word	0x3ff00000
 8003798:	40c38800 	.word	0x40c38800
 800379c:	461c4000 	.word	0x461c4000
 80037a0:	4072a266 	.word	0x4072a266
 80037a4:	40aedc00 	.word	0x40aedc00
 80037a8:	4131f85c 	.word	0x4131f85c
 80037ac:	66666666 	.word	0x66666666
 80037b0:	40711266 	.word	0x40711266

080037b4 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	debugLogTime("RTC Interrupt");
 80037bc:	4b07      	ldr	r3, [pc, #28]	; (80037dc <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 80037be:	0018      	movs	r0, r3
 80037c0:	f7ff fe9c 	bl	80034fc <debugLogTime>
	lpTimWdCnt = 0;
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]
	flag.rtcAlarm = 1;
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RTCEx_WakeUpTimerEventCallback+0x30>)
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	2101      	movs	r1, #1
 80037d0:	430a      	orrs	r2, r1
 80037d2:	701a      	strb	r2, [r3, #0]
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b002      	add	sp, #8
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	0800e3f4 	.word	0x0800e3f4
 80037e0:	20000224 	.word	0x20000224
 80037e4:	20000220 	.word	0x20000220

080037e8 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	if (lpTimWdCnt > (settings.workInterval * 2) / WATCHDOG_INTERVAL) {
 80037f0:	4b16      	ldr	r3, [pc, #88]	; (800384c <HAL_LPTIM_AutoReloadMatchCallback+0x64>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	001c      	movs	r4, r3
 80037f6:	4b16      	ldr	r3, [pc, #88]	; (8003850 <HAL_LPTIM_AutoReloadMatchCallback+0x68>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	2178      	movs	r1, #120	; 0x78
 80037fe:	0018      	movs	r0, r3
 8003800:	f7fc fc9e 	bl	8000140 <__udivsi3>
 8003804:	0003      	movs	r3, r0
 8003806:	429c      	cmp	r4, r3
 8003808:	d90a      	bls.n	8003820 <HAL_LPTIM_AutoReloadMatchCallback+0x38>
		debugLogTime("###LP WatchDog activated! Reset MCU!");
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_LPTIM_AutoReloadMatchCallback+0x6c>)
 800380c:	0018      	movs	r0, r3
 800380e:	f7ff fe75 	bl	80034fc <debugLogTime>
		SCB->AIRCR |= SCB_AIRCR_SYSRESETREQ_Msk;
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <HAL_LPTIM_AutoReloadMatchCallback+0x70>)
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <HAL_LPTIM_AutoReloadMatchCallback+0x70>)
 8003818:	2104      	movs	r1, #4
 800381a:	430a      	orrs	r2, r1
 800381c:	60da      	str	r2, [r3, #12]
	} else {
		debugLogTime("LP Interrupt");
		debugLogInt("LP Watchdog cnt is %d", ++lpTimWdCnt);
	}
}
 800381e:	e011      	b.n	8003844 <HAL_LPTIM_AutoReloadMatchCallback+0x5c>
		debugLogTime("LP Interrupt");
 8003820:	4b0e      	ldr	r3, [pc, #56]	; (800385c <HAL_LPTIM_AutoReloadMatchCallback+0x74>)
 8003822:	0018      	movs	r0, r3
 8003824:	f7ff fe6a 	bl	80034fc <debugLogTime>
		debugLogInt("LP Watchdog cnt is %d", ++lpTimWdCnt);
 8003828:	4b08      	ldr	r3, [pc, #32]	; (800384c <HAL_LPTIM_AutoReloadMatchCallback+0x64>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	b2da      	uxtb	r2, r3
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_LPTIM_AutoReloadMatchCallback+0x64>)
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_LPTIM_AutoReloadMatchCallback+0x64>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	001a      	movs	r2, r3
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_LPTIM_AutoReloadMatchCallback+0x78>)
 800383c:	0011      	movs	r1, r2
 800383e:	0018      	movs	r0, r3
 8003840:	f7ff feb0 	bl	80035a4 <debugLogInt>
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	b003      	add	sp, #12
 800384a:	bd90      	pop	{r4, r7, pc}
 800384c:	20000224 	.word	0x20000224
 8003850:	20000234 	.word	0x20000234
 8003854:	0800e404 	.word	0x0800e404
 8003858:	e000ed00 	.word	0xe000ed00
 800385c:	0800e42c 	.word	0x0800e42c
 8003860:	0800e43c 	.word	0x0800e43c

08003864 <initiateSettings>:
/**
 * @brief Initialises radio handler structure
 * @param None
 * @retval  None
 */
void initiateSettings() {
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
	myRadio.sf = settings.sf;
 8003868:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <initiateSettings+0x5c>)
 800386a:	7b1a      	ldrb	r2, [r3, #12]
 800386c:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <initiateSettings+0x60>)
 800386e:	715a      	strb	r2, [r3, #5]
	myRadio.bw = settings.bw;
 8003870:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <initiateSettings+0x5c>)
 8003872:	7b5a      	ldrb	r2, [r3, #13]
 8003874:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <initiateSettings+0x60>)
 8003876:	719a      	strb	r2, [r3, #6]
	myRadio.cr = settings.cr;
 8003878:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <initiateSettings+0x5c>)
 800387a:	7ada      	ldrb	r2, [r3, #11]
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <initiateSettings+0x60>)
 800387e:	71da      	strb	r2, [r3, #7]
	myRadio.syncWord = settings.sw;
 8003880:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <initiateSettings+0x5c>)
 8003882:	7b9a      	ldrb	r2, [r3, #14]
 8003884:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <initiateSettings+0x60>)
 8003886:	739a      	strb	r2, [r3, #14]
	myRadio.frequency = settings.realFrequency / 61.035f;
 8003888:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <initiateSettings+0x5c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	0018      	movs	r0, r3
 800388e:	f7fd fdd9 	bl	8001444 <__aeabi_ui2f>
 8003892:	1c03      	adds	r3, r0, #0
 8003894:	490c      	ldr	r1, [pc, #48]	; (80038c8 <initiateSettings+0x64>)
 8003896:	1c18      	adds	r0, r3, #0
 8003898:	f7fd f908 	bl	8000aac <__aeabi_fdiv>
 800389c:	1c03      	adds	r3, r0, #0
 800389e:	1c18      	adds	r0, r3, #0
 80038a0:	f7fc fe84 	bl	80005ac <__aeabi_f2uiz>
 80038a4:	0002      	movs	r2, r0
 80038a6:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <initiateSettings+0x60>)
 80038a8:	601a      	str	r2, [r3, #0]
	myRadio.power = settings.power;
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <initiateSettings+0x5c>)
 80038ac:	7bda      	ldrb	r2, [r3, #15]
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <initiateSettings+0x60>)
 80038b0:	711a      	strb	r2, [r3, #4]
	myRadio.preamble = settings.preamble;
 80038b2:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <initiateSettings+0x5c>)
 80038b4:	891a      	ldrh	r2, [r3, #8]
 80038b6:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <initiateSettings+0x60>)
 80038b8:	819a      	strh	r2, [r3, #12]
}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000234 	.word	0x20000234
 80038c4:	20000278 	.word	0x20000278
 80038c8:	427423d7 	.word	0x427423d7

080038cc <defaultSettings>:
/**
 * @brief Initializes default node settings
 * @param None
 * @retval None
 */
void defaultSettings() {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
	settings.nodeNum = 0;
 80038d0:	4b15      	ldr	r3, [pc, #84]	; (8003928 <defaultSettings+0x5c>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	729a      	strb	r2, [r3, #10]
	settings.workInterval = 600;
 80038d6:	4b14      	ldr	r3, [pc, #80]	; (8003928 <defaultSettings+0x5c>)
 80038d8:	2296      	movs	r2, #150	; 0x96
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	605a      	str	r2, [r3, #4]
	settings.voltageTreshold = 2.0f;
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <defaultSettings+0x5c>)
 80038e0:	2280      	movs	r2, #128	; 0x80
 80038e2:	05d2      	lsls	r2, r2, #23
 80038e4:	615a      	str	r2, [r3, #20]
	settings.bw = SX127X_LORA_BW_125KHZ;
 80038e6:	4b10      	ldr	r3, [pc, #64]	; (8003928 <defaultSettings+0x5c>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	735a      	strb	r2, [r3, #13]
	settings.cr = SX127X_CR_4_8;
 80038ec:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <defaultSettings+0x5c>)
 80038ee:	2204      	movs	r2, #4
 80038f0:	72da      	strb	r2, [r3, #11]
	settings.sf = SX127X_LORA_SF_12;
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <defaultSettings+0x5c>)
 80038f4:	220c      	movs	r2, #12
 80038f6:	731a      	strb	r2, [r3, #12]
	settings.sw = 0x1;
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <defaultSettings+0x5c>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	739a      	strb	r2, [r3, #14]
	settings.power = SX127X_POWER_20DBM;
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <defaultSettings+0x5c>)
 8003900:	2214      	movs	r2, #20
 8003902:	73da      	strb	r2, [r3, #15]
	settings.realFrequency = DEF_FREQUENCY;
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <defaultSettings+0x5c>)
 8003906:	4a09      	ldr	r2, [pc, #36]	; (800392c <defaultSettings+0x60>)
 8003908:	601a      	str	r2, [r3, #0]
	settings.preamble = 5;
 800390a:	4b07      	ldr	r3, [pc, #28]	; (8003928 <defaultSettings+0x5c>)
 800390c:	2205      	movs	r2, #5
 800390e:	811a      	strh	r2, [r3, #8]
	settings.useLed = true;
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <defaultSettings+0x5c>)
 8003912:	2201      	movs	r2, #1
 8003914:	741a      	strb	r2, [r3, #16]
	settings.debugLevel = 0;
 8003916:	4b04      	ldr	r3, [pc, #16]	; (8003928 <defaultSettings+0x5c>)
 8003918:	2200      	movs	r2, #0
 800391a:	761a      	strb	r2, [r3, #24]
	initiateSettings();
 800391c:	f7ff ffa2 	bl	8003864 <initiateSettings>
}
 8003920:	46c0      	nop			; (mov r8, r8)
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	20000234 	.word	0x20000234
 800392c:	33c8d600 	.word	0x33c8d600

08003930 <tryEeprom>:
 * @brief Tries to initialize node from data stored in EEPROM
 * if data exist and valid
 * @param None
 * @retval HAL status
 */
HAL_StatusTypeDef tryEeprom() {
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
	nodeSettings_t *eepromSettings = (nodeSettings_t*) FLASH_EEPROM_BASE;
 8003936:	4b34      	ldr	r3, [pc, #208]	; (8003a08 <tryEeprom+0xd8>)
 8003938:	607b      	str	r3, [r7, #4]
	if (eepromSettings->realFrequency > MIN_FREQUENCY && eepromSettings->realFrequency < MAX_FREQUENCY && eepromSettings->bw < 10
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a33      	ldr	r2, [pc, #204]	; (8003a0c <tryEeprom+0xdc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d800      	bhi.n	8003946 <tryEeprom+0x16>
 8003944:	e05b      	b.n	80039fe <tryEeprom+0xce>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a31      	ldr	r2, [pc, #196]	; (8003a10 <tryEeprom+0xe0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d856      	bhi.n	80039fe <tryEeprom+0xce>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	7b5b      	ldrb	r3, [r3, #13]
 8003954:	2b09      	cmp	r3, #9
 8003956:	d852      	bhi.n	80039fe <tryEeprom+0xce>
			&& eepromSettings->cr < 5 && eepromSettings->cr > 0 && eepromSettings->sf > 6 && eepromSettings->sf < 13 && eepromSettings->power > 9
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	7adb      	ldrb	r3, [r3, #11]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d84e      	bhi.n	80039fe <tryEeprom+0xce>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	7adb      	ldrb	r3, [r3, #11]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d04a      	beq.n	80039fe <tryEeprom+0xce>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	7b1b      	ldrb	r3, [r3, #12]
 800396c:	2b06      	cmp	r3, #6
 800396e:	d946      	bls.n	80039fe <tryEeprom+0xce>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	7b1b      	ldrb	r3, [r3, #12]
 8003974:	2b0c      	cmp	r3, #12
 8003976:	d842      	bhi.n	80039fe <tryEeprom+0xce>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7bdb      	ldrb	r3, [r3, #15]
 800397c:	2b09      	cmp	r3, #9
 800397e:	d93e      	bls.n	80039fe <tryEeprom+0xce>
			&& eepromSettings->power < 21 && eepromSettings->sw != 0x34 && eepromSettings->voltageTreshold >= 1.7f
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	7bdb      	ldrb	r3, [r3, #15]
 8003984:	2b14      	cmp	r3, #20
 8003986:	d83a      	bhi.n	80039fe <tryEeprom+0xce>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	7b9b      	ldrb	r3, [r3, #14]
 800398c:	2b34      	cmp	r3, #52	; 0x34
 800398e:	d036      	beq.n	80039fe <tryEeprom+0xce>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	491f      	ldr	r1, [pc, #124]	; (8003a14 <tryEeprom+0xe4>)
 8003996:	1c18      	adds	r0, r3, #0
 8003998:	f7fc fdb6 	bl	8000508 <__aeabi_fcmpge>
 800399c:	1e03      	subs	r3, r0, #0
 800399e:	d02e      	beq.n	80039fe <tryEeprom+0xce>
			&& eepromSettings->voltageTreshold <= 3.0f && eepromSettings->workInterval >= MIN_WORK_INTERVAL
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	491c      	ldr	r1, [pc, #112]	; (8003a18 <tryEeprom+0xe8>)
 80039a6:	1c18      	adds	r0, r3, #0
 80039a8:	f7fc fd9a 	bl	80004e0 <__aeabi_fcmple>
 80039ac:	1e03      	subs	r3, r0, #0
 80039ae:	d026      	beq.n	80039fe <tryEeprom+0xce>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b3b      	cmp	r3, #59	; 0x3b
 80039b6:	d922      	bls.n	80039fe <tryEeprom+0xce>
			&& eepromSettings->workInterval <= MAX_WORK_INTERVAL && eepromSettings->preamble > 1 && eepromSettings->voltageTreshold >= 1.8f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a17      	ldr	r2, [pc, #92]	; (8003a1c <tryEeprom+0xec>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d81d      	bhi.n	80039fe <tryEeprom+0xce>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	891b      	ldrh	r3, [r3, #8]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d919      	bls.n	80039fe <tryEeprom+0xce>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	4914      	ldr	r1, [pc, #80]	; (8003a20 <tryEeprom+0xf0>)
 80039d0:	1c18      	adds	r0, r3, #0
 80039d2:	f7fc fd99 	bl	8000508 <__aeabi_fcmpge>
 80039d6:	1e03      	subs	r3, r0, #0
 80039d8:	d011      	beq.n	80039fe <tryEeprom+0xce>
			&& eepromSettings->voltageTreshold <= 3.1f) {
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4911      	ldr	r1, [pc, #68]	; (8003a24 <tryEeprom+0xf4>)
 80039e0:	1c18      	adds	r0, r3, #0
 80039e2:	f7fc fd7d 	bl	80004e0 <__aeabi_fcmple>
 80039e6:	1e03      	subs	r3, r0, #0
 80039e8:	d009      	beq.n	80039fe <tryEeprom+0xce>
		memcpy((uint8_t*) &settings, (uint8_t*) eepromSettings, sizeof(settings));
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <tryEeprom+0xf8>)
 80039ee:	221c      	movs	r2, #28
 80039f0:	0018      	movs	r0, r3
 80039f2:	f007 fc57 	bl	800b2a4 <memcpy>
		initiateSettings();
 80039f6:	f7ff ff35 	bl	8003864 <initiateSettings>
		return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e000      	b.n	8003a00 <tryEeprom+0xd0>
	}
	return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b002      	add	sp, #8
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	08080000 	.word	0x08080000
 8003a0c:	0839b680 	.word	0x0839b680
 8003a10:	3b8b87bf 	.word	0x3b8b87bf
 8003a14:	3fd9999a 	.word	0x3fd9999a
 8003a18:	40400000 	.word	0x40400000
 8003a1c:	0000a8c0 	.word	0x0000a8c0
 8003a20:	3fe66666 	.word	0x3fe66666
 8003a24:	40466666 	.word	0x40466666
 8003a28:	20000234 	.word	0x20000234

08003a2c <saveSettings>:
 * @brief Saves settings from RAM to EEPROM
 * Saves settings by copying var settings to EEPROM
 * @param None
 * @retval None
 */
void saveSettings(nodeSettings_t *settingsPtr) {
 8003a2c:	b590      	push	{r4, r7, lr}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint32_t *ptr = (uint32_t*) settingsPtr;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_DATAEEPROM_Unlock();
 8003a38:	f003 fdc8 	bl	80075cc <HAL_FLASHEx_DATAEEPROM_Unlock>
	for (i = 0; i < (sizeof(*settingsPtr) + 3) / 4; i++)
 8003a3c:	230f      	movs	r3, #15
 8003a3e:	18fb      	adds	r3, r7, r3
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
 8003a44:	e014      	b.n	8003a70 <saveSettings+0x44>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
		FLASH_EEPROM_BASE + i * 4, *ptr++);
 8003a46:	240f      	movs	r4, #15
 8003a48:	193b      	adds	r3, r7, r4
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <saveSettings+0x5c>)
 8003a4e:	4694      	mov	ip, r2
 8003a50:	4463      	add	r3, ip
 8003a52:	009b      	lsls	r3, r3, #2
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
 8003a54:	0019      	movs	r1, r3
		FLASH_EEPROM_BASE + i * 4, *ptr++);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	1d1a      	adds	r2, r3, #4
 8003a5a:	60ba      	str	r2, [r7, #8]
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	001a      	movs	r2, r3
 8003a60:	2002      	movs	r0, #2
 8003a62:	f003 fdef 	bl	8007644 <HAL_FLASHEx_DATAEEPROM_Program>
	for (i = 0; i < (sizeof(*settingsPtr) + 3) / 4; i++)
 8003a66:	193b      	adds	r3, r7, r4
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	193b      	adds	r3, r7, r4
 8003a6c:	3201      	adds	r2, #1
 8003a6e:	701a      	strb	r2, [r3, #0]
 8003a70:	230f      	movs	r3, #15
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b06      	cmp	r3, #6
 8003a78:	d9e5      	bls.n	8003a46 <saveSettings+0x1a>
	HAL_FLASHEx_DATAEEPROM_Lock();
 8003a7a:	f003 fdd5 	bl	8007628 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b005      	add	sp, #20
 8003a84:	bd90      	pop	{r4, r7, pc}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	02020000 	.word	0x02020000

08003a8c <setWakeup>:

void setWakeup(uint16_t delay) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	0002      	movs	r2, r0
 8003a94:	1dbb      	adds	r3, r7, #6
 8003a96:	801a      	strh	r2, [r3, #0]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, recomendedDelay,
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <setWakeup+0x34>)
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	0019      	movs	r1, r3
 8003a9e:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <setWakeup+0x38>)
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f005 fafc 	bl	80090a0 <HAL_RTCEx_SetWakeUpTimer_IT>
	RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
	debugLogInt("Setting WakeUp timer to %d seconds", delay);
 8003aa8:	1dbb      	adds	r3, r7, #6
 8003aaa:	881a      	ldrh	r2, [r3, #0]
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <setWakeup+0x3c>)
 8003aae:	0011      	movs	r1, r2
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f7ff fd77 	bl	80035a4 <debugLogInt>
}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b002      	add	sp, #8
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	20000014 	.word	0x20000014
 8003ac4:	200003fc 	.word	0x200003fc
 8003ac8:	0800e454 	.word	0x0800e454

08003acc <sleep>:
 * Switches radio module into sleep mode
 * Switches MCU to Stop mode
 * @param None
 * @retval None
 */
void sleep() {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin | ORANGE_Pin, LED_OFF);
 8003ad0:	23c0      	movs	r3, #192	; 0xc0
 8003ad2:	019b      	lsls	r3, r3, #6
 8003ad4:	480b      	ldr	r0, [pc, #44]	; (8003b04 <sleep+0x38>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	0019      	movs	r1, r3
 8003ada:	f003 ff9e 	bl	8007a1a <HAL_GPIO_WritePin>
	SX127X_sleep(&myRadio);
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <sleep+0x3c>)
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f001 ff75 	bl	80059d0 <SX127X_sleep>
	HAL_DBGMCU_DisableDBGStopMode();
 8003ae6:	f002 fcf7 	bl	80064d8 <HAL_DBGMCU_DisableDBGStopMode>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <sleep+0x40>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <sleep+0x40>)
 8003af0:	2104      	movs	r1, #4
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003af6:	2101      	movs	r1, #1
 8003af8:	2001      	movs	r0, #1
 8003afa:	f004 fab3 	bl	8008064 <HAL_PWR_EnterSTOPMode>

}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	50000400 	.word	0x50000400
 8003b08:	20000278 	.word	0x20000278
 8003b0c:	40007000 	.word	0x40007000

08003b10 <sendStatus>:
/**
 * @Sends current status of Node to Base station
 * @param None
 * @retval None
 */
void sendStatus(nodeStatus_t *status, nodeSettings_t *settingsPtr) {
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]

	txMes->adr = settings.nodeNum;
 8003b1a:	4b52      	ldr	r3, [pc, #328]	; (8003c64 <sendStatus+0x154>)
 8003b1c:	7a9a      	ldrb	r2, [r3, #10]
 8003b1e:	4b52      	ldr	r3, [pc, #328]	; (8003c68 <sendStatus+0x158>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	1c11      	adds	r1, r2, #0
 8003b24:	221f      	movs	r2, #31
 8003b26:	400a      	ands	r2, r1
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	00d0      	lsls	r0, r2, #3
 8003b2c:	781a      	ldrb	r2, [r3, #0]
 8003b2e:	2107      	movs	r1, #7
 8003b30:	400a      	ands	r2, r1
 8003b32:	1c11      	adds	r1, r2, #0
 8003b34:	1c02      	adds	r2, r0, #0
 8003b36:	430a      	orrs	r2, r1
 8003b38:	701a      	strb	r2, [r3, #0]
	txMes->uplink = 1;
 8003b3a:	4b4b      	ldr	r3, [pc, #300]	; (8003c68 <sendStatus+0x158>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	781a      	ldrb	r2, [r3, #0]
 8003b40:	2101      	movs	r1, #1
 8003b42:	430a      	orrs	r2, r1
 8003b44:	701a      	strb	r2, [r3, #0]
	txMes->disarm = status->disarmed;
 8003b46:	4b48      	ldr	r3, [pc, #288]	; (8003c68 <sendStatus+0x158>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	2101      	movs	r1, #1
 8003b50:	400a      	ands	r2, r1
 8003b52:	0010      	movs	r0, r2
 8003b54:	785a      	ldrb	r2, [r3, #1]
 8003b56:	2101      	movs	r1, #1
 8003b58:	438a      	bics	r2, r1
 8003b5a:	1c11      	adds	r1, r2, #0
 8003b5c:	1c02      	adds	r2, r0, #0
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	705a      	strb	r2, [r3, #1]
	txMes->message = MSG_UP_ACKNOWLEDGE;
 8003b62:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <sendStatus+0x158>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	781a      	ldrb	r2, [r3, #0]
 8003b68:	2106      	movs	r1, #6
 8003b6a:	438a      	bics	r2, r1
 8003b6c:	701a      	strb	r2, [r3, #0]
	txMes->opened = status->opened || status->unconfirmedOpening;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	785b      	ldrb	r3, [r3, #1]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d103      	bne.n	8003b7e <sendStatus+0x6e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	79db      	ldrb	r3, [r3, #7]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <sendStatus+0x72>
 8003b7e:	2201      	movs	r2, #1
 8003b80:	e000      	b.n	8003b84 <sendStatus+0x74>
 8003b82:	2200      	movs	r2, #0
 8003b84:	4b38      	ldr	r3, [pc, #224]	; (8003c68 <sendStatus+0x158>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	1c11      	adds	r1, r2, #0
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	2101      	movs	r1, #1
 8003b92:	400a      	ands	r2, r1
 8003b94:	1890      	adds	r0, r2, r2
 8003b96:	785a      	ldrb	r2, [r3, #1]
 8003b98:	2102      	movs	r1, #2
 8003b9a:	438a      	bics	r2, r1
 8003b9c:	1c11      	adds	r1, r2, #0
 8003b9e:	1c02      	adds	r2, r0, #0
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	705a      	strb	r2, [r3, #1]
	txMes->powered = status->powered;
 8003ba4:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <sendStatus+0x158>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	7912      	ldrb	r2, [r2, #4]
 8003bac:	2101      	movs	r1, #1
 8003bae:	400a      	ands	r2, r1
 8003bb0:	0090      	lsls	r0, r2, #2
 8003bb2:	785a      	ldrb	r2, [r3, #1]
 8003bb4:	2104      	movs	r1, #4
 8003bb6:	438a      	bics	r2, r1
 8003bb8:	1c11      	adds	r1, r2, #0
 8003bba:	1c02      	adds	r2, r0, #0
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	705a      	strb	r2, [r3, #1]
	txMes->codedTemperature = getTemperature() * 2.0F + 80;
 8003bc0:	f7ff fd56 	bl	8003670 <getTemperature>
 8003bc4:	1c03      	adds	r3, r0, #0
 8003bc6:	1c19      	adds	r1, r3, #0
 8003bc8:	1c18      	adds	r0, r3, #0
 8003bca:	f7fc fdd3 	bl	8000774 <__aeabi_fadd>
 8003bce:	1c03      	adds	r3, r0, #0
 8003bd0:	4926      	ldr	r1, [pc, #152]	; (8003c6c <sendStatus+0x15c>)
 8003bd2:	1c18      	adds	r0, r3, #0
 8003bd4:	f7fc fdce 	bl	8000774 <__aeabi_fadd>
 8003bd8:	1c03      	adds	r3, r0, #0
 8003bda:	1c1a      	adds	r2, r3, #0
 8003bdc:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <sendStatus+0x158>)
 8003bde:	681c      	ldr	r4, [r3, #0]
 8003be0:	1c10      	adds	r0, r2, #0
 8003be2:	f7fc fce3 	bl	80005ac <__aeabi_f2uiz>
 8003be6:	0003      	movs	r3, r0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	70a3      	strb	r3, [r4, #2]
	txMes->codedVoltage = ((int) (getVoltage() * 10)) - 19;
 8003bec:	f7ff fd0a 	bl	8003604 <getVoltage>
 8003bf0:	1c03      	adds	r3, r0, #0
 8003bf2:	491f      	ldr	r1, [pc, #124]	; (8003c70 <sendStatus+0x160>)
 8003bf4:	1c18      	adds	r0, r3, #0
 8003bf6:	f7fd f923 	bl	8000e40 <__aeabi_fmul>
 8003bfa:	1c03      	adds	r3, r0, #0
 8003bfc:	1c18      	adds	r0, r3, #0
 8003bfe:	f7fd fc01 	bl	8001404 <__aeabi_f2iz>
 8003c02:	0003      	movs	r3, r0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	3b13      	subs	r3, #19
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	4b17      	ldr	r3, [pc, #92]	; (8003c68 <sendStatus+0x158>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	1c11      	adds	r1, r2, #0
 8003c10:	221f      	movs	r2, #31
 8003c12:	400a      	ands	r2, r1
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	00d0      	lsls	r0, r2, #3
 8003c18:	785a      	ldrb	r2, [r3, #1]
 8003c1a:	2107      	movs	r1, #7
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	1c11      	adds	r1, r2, #0
 8003c20:	1c02      	adds	r2, r0, #0
 8003c22:	430a      	orrs	r2, r1
 8003c24:	705a      	strb	r2, [r3, #1]
	status->openedToConfirm = status->opened || status->unconfirmedOpening;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	785b      	ldrb	r3, [r3, #1]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d103      	bne.n	8003c36 <sendStatus+0x126>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	79db      	ldrb	r3, [r3, #7]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <sendStatus+0x12a>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <sendStatus+0x12c>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	1c1a      	adds	r2, r3, #0
 8003c3e:	2301      	movs	r3, #1
 8003c40:	4013      	ands	r3, r2
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	70da      	strb	r2, [r3, #3]
	status->poweredToConfirm = status->powered;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	791a      	ldrb	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	719a      	strb	r2, [r3, #6]
	SX127X_transmitAsync(&myRadio, sizeof(uplinkMessage_t));
 8003c50:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <sendStatus+0x164>)
 8003c52:	2103      	movs	r1, #3
 8003c54:	0018      	movs	r0, r3
 8003c56:	f001 fffd 	bl	8005c54 <SX127X_transmitAsync>

}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b003      	add	sp, #12
 8003c60:	bd90      	pop	{r4, r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	20000234 	.word	0x20000234
 8003c68:	20000020 	.word	0x20000020
 8003c6c:	42a00000 	.word	0x42a00000
 8003c70:	41200000 	.word	0x41200000
 8003c74:	20000278 	.word	0x20000278

08003c78 <deinitGpio>:
/**
 * @brief Turns of user pins to decrease power consumption
 * @param None
 * @retval None
 */
void deinitGpio() {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003c7e:	1d3b      	adds	r3, r7, #4
 8003c80:	0018      	movs	r0, r3
 8003c82:	2314      	movs	r3, #20
 8003c84:	001a      	movs	r2, r3
 8003c86:	2100      	movs	r1, #0
 8003c88:	f007 fb15 	bl	800b2b6 <memset>

	GPIO_InitStruct.Pin = USER1_Pin | USER2_Pin;
 8003c8c:	1d3b      	adds	r3, r7, #4
 8003c8e:	22c0      	movs	r2, #192	; 0xc0
 8003c90:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c92:	1d3b      	adds	r3, r7, #4
 8003c94:	2203      	movs	r2, #3
 8003c96:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(USER1_GPIO_Port, &GPIO_InitStruct);
 8003c9e:	1d3b      	adds	r3, r7, #4
 8003ca0:	4a04      	ldr	r2, [pc, #16]	; (8003cb4 <deinitGpio+0x3c>)
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	0010      	movs	r0, r2
 8003ca6:	f003 fd25 	bl	80076f4 <HAL_GPIO_Init>
}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b006      	add	sp, #24
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	50000400 	.word	0x50000400

08003cb8 <RadioInit>:
 * @brief Configures Radio module, tries to load custom settings from EEPROM
 * if there is no valid data in EEPROM than loads default settings
 * @param None
 * @retval None
 */
void RadioInit() {
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af02      	add	r7, sp, #8
	SX127X_dio_t nss;
	SX127X_dio_t reset;

	SX127X_defaultConfig(&myRadio);
 8003cbe:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <RadioInit+0x68>)
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f001 fe13 	bl	80058ec <SX127X_defaultConfig>
	defaultSettings();
 8003cc6:	f7ff fe01 	bl	80038cc <defaultSettings>
	tryEeprom();
 8003cca:	f7ff fe31 	bl	8003930 <tryEeprom>
	nss.pin = NSS_Pin;
 8003cce:	2108      	movs	r1, #8
 8003cd0:	187b      	adds	r3, r7, r1
 8003cd2:	2210      	movs	r2, #16
 8003cd4:	601a      	str	r2, [r3, #0]
	nss.port = NSS_GPIO_Port;
 8003cd6:	187b      	adds	r3, r7, r1
 8003cd8:	22a0      	movs	r2, #160	; 0xa0
 8003cda:	05d2      	lsls	r2, r2, #23
 8003cdc:	605a      	str	r2, [r3, #4]
	reset.pin = RESET_Pin;
 8003cde:	003b      	movs	r3, r7
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	601a      	str	r2, [r3, #0]
	reset.port = RESET_GPIO_Port;
 8003ce4:	003b      	movs	r3, r7
 8003ce6:	22a0      	movs	r2, #160	; 0xa0
 8003ce8:	05d2      	lsls	r2, r2, #23
 8003cea:	605a      	str	r2, [r3, #4]
	SX127X_PortConfig(&myRadio, reset, nss, &hspi1);
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	003a      	movs	r2, r7
 8003cf0:	4c0b      	ldr	r4, [pc, #44]	; (8003d20 <RadioInit+0x68>)
 8003cf2:	490c      	ldr	r1, [pc, #48]	; (8003d24 <RadioInit+0x6c>)
 8003cf4:	9101      	str	r1, [sp, #4]
 8003cf6:	4669      	mov	r1, sp
 8003cf8:	6858      	ldr	r0, [r3, #4]
 8003cfa:	6008      	str	r0, [r1, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6811      	ldr	r1, [r2, #0]
 8003d00:	6852      	ldr	r2, [r2, #4]
 8003d02:	0020      	movs	r0, r4
 8003d04:	f001 fe1e 	bl	8005944 <SX127X_PortConfig>
	SX127X_init(&myRadio);
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <RadioInit+0x68>)
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f002 f8b8 	bl	8005e80 <SX127X_init>
	SX127X_config(&myRadio);
 8003d10:	4b03      	ldr	r3, [pc, #12]	; (8003d20 <RadioInit+0x68>)
 8003d12:	0018      	movs	r0, r3
 8003d14:	f001 fd0c 	bl	8005730 <SX127X_config>
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b005      	add	sp, #20
 8003d1e:	bd90      	pop	{r4, r7, pc}
 8003d20:	20000278 	.word	0x20000278
 8003d24:	20000434 	.word	0x20000434

08003d28 <ReceivingTest>:
 * Red Led means module hears LoRa signal
 * Green Led means message received (with valid CRC)
 * @param None
 * @retval None
 */
void ReceivingTest() {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
	uint32_t recTime = 0x80000000;
 8003d2e:	2380      	movs	r3, #128	; 0x80
 8003d30:	061b      	lsls	r3, r3, #24
 8003d32:	60fb      	str	r3, [r7, #12]
	uint32_t recTime1 = 0x80000000;
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	061b      	lsls	r3, r3, #24
 8003d38:	60bb      	str	r3, [r7, #8]
	uint32_t recTime2 = 0x80000000;
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	061b      	lsls	r3, r3, #24
 8003d3e:	607b      	str	r3, [r7, #4]
	bool repeaterMode = false;
 8003d40:	1cfb      	adds	r3, r7, #3
 8003d42:	2200      	movs	r2, #0
 8003d44:	701a      	strb	r2, [r3, #0]
	debugLogTime("Receiving test activated");
 8003d46:	4b5d      	ldr	r3, [pc, #372]	; (8003ebc <ReceivingTest+0x194>)
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f7ff fbd7 	bl	80034fc <debugLogTime>
	while (1) {

		SX127X_Routine(&myRadio);
 8003d4e:	4b5c      	ldr	r3, [pc, #368]	; (8003ec0 <ReceivingTest+0x198>)
 8003d50:	0018      	movs	r0, r3
 8003d52:	f001 ff9f 	bl	8005c94 <SX127X_Routine>
		if (myRadio.readBytes > 0) {
 8003d56:	4b5a      	ldr	r3, [pc, #360]	; (8003ec0 <ReceivingTest+0x198>)
 8003d58:	225d      	movs	r2, #93	; 0x5d
 8003d5a:	5c9b      	ldrb	r3, [r3, r2]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d02b      	beq.n	8003db8 <ReceivingTest+0x90>
			if (myRadio.badCrc == 0) {
 8003d60:	4b57      	ldr	r3, [pc, #348]	; (8003ec0 <ReceivingTest+0x198>)
 8003d62:	2260      	movs	r2, #96	; 0x60
 8003d64:	5c9b      	ldrb	r3, [r3, r2]
 8003d66:	2201      	movs	r2, #1
 8003d68:	4053      	eors	r3, r2
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01f      	beq.n	8003db0 <ReceivingTest+0x88>
				if (myRadio.rxBuf[0] == 255 && myRadio.rxBuf[1] == 255) {
 8003d70:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <ReceivingTest+0x198>)
 8003d72:	7f5b      	ldrb	r3, [r3, #29]
 8003d74:	2bff      	cmp	r3, #255	; 0xff
 8003d76:	d117      	bne.n	8003da8 <ReceivingTest+0x80>
 8003d78:	4b51      	ldr	r3, [pc, #324]	; (8003ec0 <ReceivingTest+0x198>)
 8003d7a:	7f9b      	ldrb	r3, [r3, #30]
 8003d7c:	2bff      	cmp	r3, #255	; 0xff
 8003d7e:	d113      	bne.n	8003da8 <ReceivingTest+0x80>
					repeaterMode = true;
 8003d80:	1cfb      	adds	r3, r7, #3
 8003d82:	2201      	movs	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]
					if (myRadio.rxBuf[2] == 1)
 8003d86:	4b4e      	ldr	r3, [pc, #312]	; (8003ec0 <ReceivingTest+0x198>)
 8003d88:	7fdb      	ldrb	r3, [r3, #31]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d103      	bne.n	8003d96 <ReceivingTest+0x6e>
						recTime1 = HAL_GetTick();
 8003d8e:	f002 fb75 	bl	800647c <HAL_GetTick>
 8003d92:	0003      	movs	r3, r0
 8003d94:	60bb      	str	r3, [r7, #8]
					if (myRadio.rxBuf[2] == 2)
 8003d96:	4b4a      	ldr	r3, [pc, #296]	; (8003ec0 <ReceivingTest+0x198>)
 8003d98:	7fdb      	ldrb	r3, [r3, #31]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d108      	bne.n	8003db0 <ReceivingTest+0x88>
						recTime2 = HAL_GetTick();
 8003d9e:	f002 fb6d 	bl	800647c <HAL_GetTick>
 8003da2:	0003      	movs	r3, r0
 8003da4:	607b      	str	r3, [r7, #4]
					if (myRadio.rxBuf[2] == 2)
 8003da6:	e003      	b.n	8003db0 <ReceivingTest+0x88>
				} else {
					recTime = HAL_GetTick();
 8003da8:	f002 fb68 	bl	800647c <HAL_GetTick>
 8003dac:	0003      	movs	r3, r0
 8003dae:	60fb      	str	r3, [r7, #12]
				}

			}

			myRadio.readBytes = 0;
 8003db0:	4b43      	ldr	r3, [pc, #268]	; (8003ec0 <ReceivingTest+0x198>)
 8003db2:	225d      	movs	r2, #93	; 0x5d
 8003db4:	2100      	movs	r1, #0
 8003db6:	5499      	strb	r1, [r3, r2]
		}
		if (repeaterMode) {
 8003db8:	1cfb      	adds	r3, r7, #3
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d051      	beq.n	8003e64 <ReceivingTest+0x13c>
			if (myRadio.signalDetected) {
 8003dc0:	4b3f      	ldr	r3, [pc, #252]	; (8003ec0 <ReceivingTest+0x198>)
 8003dc2:	7f1b      	ldrb	r3, [r3, #28]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00e      	beq.n	8003de6 <ReceivingTest+0xbe>
				HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	015b      	lsls	r3, r3, #5
 8003dcc:	483d      	ldr	r0, [pc, #244]	; (8003ec4 <ReceivingTest+0x19c>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	f003 fe22 	bl	8007a1a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BLUE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	483a      	ldr	r0, [pc, #232]	; (8003ec4 <ReceivingTest+0x19c>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	0019      	movs	r1, r3
 8003de0:	f003 fe1b 	bl	8007a1a <HAL_GPIO_WritePin>
 8003de4:	e00d      	b.n	8003e02 <ReceivingTest+0xda>
			} else {
				HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	015b      	lsls	r3, r3, #5
 8003dea:	4836      	ldr	r0, [pc, #216]	; (8003ec4 <ReceivingTest+0x19c>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	0019      	movs	r1, r3
 8003df0:	f003 fe13 	bl	8007a1a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BLUE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	019b      	lsls	r3, r3, #6
 8003df8:	4832      	ldr	r0, [pc, #200]	; (8003ec4 <ReceivingTest+0x19c>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	f003 fe0c 	bl	8007a1a <HAL_GPIO_WritePin>
			}

			if (HAL_GetTick() - recTime1 < 300)
 8003e02:	f002 fb3b 	bl	800647c <HAL_GetTick>
 8003e06:	0002      	movs	r2, r0
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	1ad2      	subs	r2, r2, r3
 8003e0c:	2396      	movs	r3, #150	; 0x96
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d207      	bcs.n	8003e24 <ReceivingTest+0xfc>
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	019b      	lsls	r3, r3, #6
 8003e18:	482a      	ldr	r0, [pc, #168]	; (8003ec4 <ReceivingTest+0x19c>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	f003 fdfc 	bl	8007a1a <HAL_GPIO_WritePin>
 8003e22:	e006      	b.n	8003e32 <ReceivingTest+0x10a>
			else
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	019b      	lsls	r3, r3, #6
 8003e28:	4826      	ldr	r0, [pc, #152]	; (8003ec4 <ReceivingTest+0x19c>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	0019      	movs	r1, r3
 8003e2e:	f003 fdf4 	bl	8007a1a <HAL_GPIO_WritePin>
			if (HAL_GetTick() - recTime2 < 300)
 8003e32:	f002 fb23 	bl	800647c <HAL_GetTick>
 8003e36:	0002      	movs	r2, r0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	1ad2      	subs	r2, r2, r3
 8003e3c:	2396      	movs	r3, #150	; 0x96
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d207      	bcs.n	8003e54 <ReceivingTest+0x12c>
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, BLUE_Pin, LED_ON);
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	015b      	lsls	r3, r3, #5
 8003e48:	481e      	ldr	r0, [pc, #120]	; (8003ec4 <ReceivingTest+0x19c>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	f003 fde4 	bl	8007a1a <HAL_GPIO_WritePin>
 8003e52:	e77c      	b.n	8003d4e <ReceivingTest+0x26>
			else
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	015b      	lsls	r3, r3, #5
 8003e58:	481a      	ldr	r0, [pc, #104]	; (8003ec4 <ReceivingTest+0x19c>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	f003 fddc 	bl	8007a1a <HAL_GPIO_WritePin>
 8003e62:	e774      	b.n	8003d4e <ReceivingTest+0x26>
		} else {
			if (myRadio.signalDetected)
 8003e64:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <ReceivingTest+0x198>)
 8003e66:	7f1b      	ldrb	r3, [r3, #28]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <ReceivingTest+0x154>
				HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	015b      	lsls	r3, r3, #5
 8003e70:	4814      	ldr	r0, [pc, #80]	; (8003ec4 <ReceivingTest+0x19c>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	0019      	movs	r1, r3
 8003e76:	f003 fdd0 	bl	8007a1a <HAL_GPIO_WritePin>
 8003e7a:	e006      	b.n	8003e8a <ReceivingTest+0x162>
			else
				HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	015b      	lsls	r3, r3, #5
 8003e80:	4810      	ldr	r0, [pc, #64]	; (8003ec4 <ReceivingTest+0x19c>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	0019      	movs	r1, r3
 8003e86:	f003 fdc8 	bl	8007a1a <HAL_GPIO_WritePin>
			if (HAL_GetTick() - recTime < 300)
 8003e8a:	f002 faf7 	bl	800647c <HAL_GetTick>
 8003e8e:	0002      	movs	r2, r0
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1ad2      	subs	r2, r2, r3
 8003e94:	2396      	movs	r3, #150	; 0x96
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d207      	bcs.n	8003eac <ReceivingTest+0x184>
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	019b      	lsls	r3, r3, #6
 8003ea0:	4808      	ldr	r0, [pc, #32]	; (8003ec4 <ReceivingTest+0x19c>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	0019      	movs	r1, r3
 8003ea6:	f003 fdb8 	bl	8007a1a <HAL_GPIO_WritePin>
 8003eaa:	e750      	b.n	8003d4e <ReceivingTest+0x26>
			else
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	019b      	lsls	r3, r3, #6
 8003eb0:	4804      	ldr	r0, [pc, #16]	; (8003ec4 <ReceivingTest+0x19c>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	f003 fdb0 	bl	8007a1a <HAL_GPIO_WritePin>
		SX127X_Routine(&myRadio);
 8003eba:	e748      	b.n	8003d4e <ReceivingTest+0x26>
 8003ebc:	0800e478 	.word	0x0800e478
 8003ec0:	20000278 	.word	0x20000278
 8003ec4:	50000400 	.word	0x50000400

08003ec8 <PingTest>:
 * Green light means valid response from Base station
 * Red light means transmission in progress
 * @param None
 * @retval None
 */
void PingTest() {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0

	debugLogTime("Ping test activated");
 8003ecc:	4b2c      	ldr	r3, [pc, #176]	; (8003f80 <PingTest+0xb8>)
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f7ff fb14 	bl	80034fc <debugLogTime>
	while (1) {
		static uint32_t lastTrans;
		static uint32_t recTime;

		SX127X_Routine(&myRadio);
 8003ed4:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <PingTest+0xbc>)
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f001 fedc 	bl	8005c94 <SX127X_Routine>

		if (myRadio.readBytes > 0) {
 8003edc:	4b29      	ldr	r3, [pc, #164]	; (8003f84 <PingTest+0xbc>)
 8003ede:	225d      	movs	r2, #93	; 0x5d
 8003ee0:	5c9b      	ldrb	r3, [r3, r2]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d010      	beq.n	8003f08 <PingTest+0x40>
			if (myRadio.badCrc == 0)
 8003ee6:	4b27      	ldr	r3, [pc, #156]	; (8003f84 <PingTest+0xbc>)
 8003ee8:	2260      	movs	r2, #96	; 0x60
 8003eea:	5c9b      	ldrb	r3, [r3, r2]
 8003eec:	2201      	movs	r2, #1
 8003eee:	4053      	eors	r3, r2
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d004      	beq.n	8003f00 <PingTest+0x38>
				recTime = HAL_GetTick();
 8003ef6:	f002 fac1 	bl	800647c <HAL_GetTick>
 8003efa:	0002      	movs	r2, r0
 8003efc:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <PingTest+0xc0>)
 8003efe:	601a      	str	r2, [r3, #0]
			myRadio.readBytes = 0;
 8003f00:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <PingTest+0xbc>)
 8003f02:	225d      	movs	r2, #93	; 0x5d
 8003f04:	2100      	movs	r1, #0
 8003f06:	5499      	strb	r1, [r3, r2]
		}

		if (HAL_GetTick() - lastTrans > 2000) {
 8003f08:	f002 fab8 	bl	800647c <HAL_GetTick>
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	; (8003f8c <PingTest+0xc4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	1ad2      	subs	r2, r2, r3
 8003f14:	23fa      	movs	r3, #250	; 0xfa
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d904      	bls.n	8003f26 <PingTest+0x5e>
			lastTrans = HAL_GetTick();
 8003f1c:	f002 faae 	bl	800647c <HAL_GetTick>
 8003f20:	0002      	movs	r2, r0
 8003f22:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <PingTest+0xc4>)
 8003f24:	601a      	str	r2, [r3, #0]
		}
		if (HAL_GetTick() - recTime < 300)
 8003f26:	f002 faa9 	bl	800647c <HAL_GetTick>
 8003f2a:	0002      	movs	r2, r0
 8003f2c:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <PingTest+0xc0>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	1ad2      	subs	r2, r2, r3
 8003f32:	2396      	movs	r3, #150	; 0x96
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d207      	bcs.n	8003f4a <PingTest+0x82>
			HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	019b      	lsls	r3, r3, #6
 8003f3e:	4814      	ldr	r0, [pc, #80]	; (8003f90 <PingTest+0xc8>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	0019      	movs	r1, r3
 8003f44:	f003 fd69 	bl	8007a1a <HAL_GPIO_WritePin>
 8003f48:	e006      	b.n	8003f58 <PingTest+0x90>
		else
			HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003f4a:	2380      	movs	r3, #128	; 0x80
 8003f4c:	019b      	lsls	r3, r3, #6
 8003f4e:	4810      	ldr	r0, [pc, #64]	; (8003f90 <PingTest+0xc8>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	0019      	movs	r1, r3
 8003f54:	f003 fd61 	bl	8007a1a <HAL_GPIO_WritePin>

		if (myRadio.status == TX)
 8003f58:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <PingTest+0xbc>)
 8003f5a:	7c1b      	ldrb	r3, [r3, #16]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d107      	bne.n	8003f70 <PingTest+0xa8>
			HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 8003f60:	2380      	movs	r3, #128	; 0x80
 8003f62:	015b      	lsls	r3, r3, #5
 8003f64:	480a      	ldr	r0, [pc, #40]	; (8003f90 <PingTest+0xc8>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	0019      	movs	r1, r3
 8003f6a:	f003 fd56 	bl	8007a1a <HAL_GPIO_WritePin>
 8003f6e:	e7b1      	b.n	8003ed4 <PingTest+0xc>
		else
			HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	015b      	lsls	r3, r3, #5
 8003f74:	4806      	ldr	r0, [pc, #24]	; (8003f90 <PingTest+0xc8>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	0019      	movs	r1, r3
 8003f7a:	f003 fd4e 	bl	8007a1a <HAL_GPIO_WritePin>
	while (1) {
 8003f7e:	e7a9      	b.n	8003ed4 <PingTest+0xc>
 8003f80:	0800e494 	.word	0x0800e494
 8003f84:	20000278 	.word	0x20000278
 8003f88:	20000260 	.word	0x20000260
 8003f8c:	20000264 	.word	0x20000264
 8003f90:	50000400 	.word	0x50000400

08003f94 <ledRoutine>:
	}
}

void ledRoutine(SX127X_t *module) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	static uint32_t lastBlink = 0;
	if (module->signalDetected && settings.useLed)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	7f1b      	ldrb	r3, [r3, #28]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <ledRoutine+0x28>
 8003fa4:	4b27      	ldr	r3, [pc, #156]	; (8004044 <ledRoutine+0xb0>)
 8003fa6:	7c1b      	ldrb	r3, [r3, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <ledRoutine+0x28>
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003fac:	2380      	movs	r3, #128	; 0x80
 8003fae:	019b      	lsls	r3, r3, #6
 8003fb0:	4825      	ldr	r0, [pc, #148]	; (8004048 <ledRoutine+0xb4>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	0019      	movs	r1, r3
 8003fb6:	f003 fd30 	bl	8007a1a <HAL_GPIO_WritePin>
 8003fba:	e006      	b.n	8003fca <ledRoutine+0x36>
	else
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	019b      	lsls	r3, r3, #6
 8003fc0:	4821      	ldr	r0, [pc, #132]	; (8004048 <ledRoutine+0xb4>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	0019      	movs	r1, r3
 8003fc6:	f003 fd28 	bl	8007a1a <HAL_GPIO_WritePin>

	if (module->status == TX && settings.useLed)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	7c1b      	ldrb	r3, [r3, #16]
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d10b      	bne.n	8003fea <ledRoutine+0x56>
 8003fd2:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <ledRoutine+0xb0>)
 8003fd4:	7c1b      	ldrb	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <ledRoutine+0x56>
		HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 8003fda:	2380      	movs	r3, #128	; 0x80
 8003fdc:	015b      	lsls	r3, r3, #5
 8003fde:	481a      	ldr	r0, [pc, #104]	; (8004048 <ledRoutine+0xb4>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	f003 fd19 	bl	8007a1a <HAL_GPIO_WritePin>
 8003fe8:	e006      	b.n	8003ff8 <ledRoutine+0x64>
	else
		HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003fea:	2380      	movs	r3, #128	; 0x80
 8003fec:	015b      	lsls	r3, r3, #5
 8003fee:	4816      	ldr	r0, [pc, #88]	; (8004048 <ledRoutine+0xb4>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	0019      	movs	r1, r3
 8003ff4:	f003 fd11 	bl	8007a1a <HAL_GPIO_WritePin>

	if (HAL_GetTick() - lastBlink > 5000) {
 8003ff8:	f002 fa40 	bl	800647c <HAL_GetTick>
 8003ffc:	0002      	movs	r2, r0
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <ledRoutine+0xb8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	4a12      	ldr	r2, [pc, #72]	; (8004050 <ledRoutine+0xbc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d904      	bls.n	8004014 <ledRoutine+0x80>
		lastBlink = HAL_GetTick();
 800400a:	f002 fa37 	bl	800647c <HAL_GetTick>
 800400e:	0002      	movs	r2, r0
 8004010:	4b0e      	ldr	r3, [pc, #56]	; (800404c <ledRoutine+0xb8>)
 8004012:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GetTick() - lastBlink < 50 && settings.useLed) {
 8004014:	f002 fa32 	bl	800647c <HAL_GetTick>
 8004018:	0002      	movs	r2, r0
 800401a:	4b0c      	ldr	r3, [pc, #48]	; (800404c <ledRoutine+0xb8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b31      	cmp	r3, #49	; 0x31
 8004022:	d80a      	bhi.n	800403a <ledRoutine+0xa6>
 8004024:	4b07      	ldr	r3, [pc, #28]	; (8004044 <ledRoutine+0xb0>)
 8004026:	7c1b      	ldrb	r3, [r3, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d006      	beq.n	800403a <ledRoutine+0xa6>
		HAL_GPIO_WritePin(BLUE_GPIO_Port, ORANGE_Pin | BLUE_Pin, LED_ON);
 800402c:	23c0      	movs	r3, #192	; 0xc0
 800402e:	019b      	lsls	r3, r3, #6
 8004030:	4805      	ldr	r0, [pc, #20]	; (8004048 <ledRoutine+0xb4>)
 8004032:	2201      	movs	r2, #1
 8004034:	0019      	movs	r1, r3
 8004036:	f003 fcf0 	bl	8007a1a <HAL_GPIO_WritePin>
	}

}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b002      	add	sp, #8
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	20000234 	.word	0x20000234
 8004048:	50000400 	.word	0x50000400
 800404c:	20000268 	.word	0x20000268
 8004050:	00001388 	.word	0x00001388

08004054 <printInfo>:

void printInfo(nodeStatus_t *status, uint32_t tm, uint32_t miss) {
 8004054:	b590      	push	{r4, r7, lr}
 8004056:	b089      	sub	sp, #36	; 0x24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
#ifdef DEBUG
	uint32_t time = RTC->TR;
 8004060:	4b75      	ldr	r3, [pc, #468]	; (8004238 <printInfo+0x1e4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	61fb      	str	r3, [r7, #28]
	uint32_t date = RTC->DR;
 8004066:	4b74      	ldr	r3, [pc, #464]	; (8004238 <printInfo+0x1e4>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	61bb      	str	r3, [r7, #24]
	uint32_t tick = HAL_GetTick();
 800406c:	f002 fa06 	bl	800647c <HAL_GetTick>
 8004070:	0003      	movs	r3, r0
 8004072:	617b      	str	r3, [r7, #20]
	printf("Status requested\n");
 8004074:	4b71      	ldr	r3, [pc, #452]	; (800423c <printInfo+0x1e8>)
 8004076:	0018      	movs	r0, r3
 8004078:	f007 fe40 	bl	800bcfc <puts>
	printf("SysTick: %10lu\n", tick);
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4b70      	ldr	r3, [pc, #448]	; (8004240 <printInfo+0x1ec>)
 8004080:	0011      	movs	r1, r2
 8004082:	0018      	movs	r0, r3
 8004084:	f007 fd9a 	bl	800bbbc <iprintf>
	printf("System time: %02x:%02x:%02x\n", (uint16_t) (time >> 16) & 0xFF, (uint16_t) (time >> 8) & 0xFF, (uint16_t) time & 0xFF);
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	0c1b      	lsrs	r3, r3, #16
 800408c:	b29b      	uxth	r3, r3
 800408e:	001a      	movs	r2, r3
 8004090:	23ff      	movs	r3, #255	; 0xff
 8004092:	401a      	ands	r2, r3
 8004094:	0011      	movs	r1, r2
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	b29b      	uxth	r3, r3
 800409c:	001a      	movs	r2, r3
 800409e:	23ff      	movs	r3, #255	; 0xff
 80040a0:	401a      	ands	r2, r3
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	0018      	movs	r0, r3
 80040a8:	23ff      	movs	r3, #255	; 0xff
 80040aa:	4003      	ands	r3, r0
 80040ac:	4865      	ldr	r0, [pc, #404]	; (8004244 <printInfo+0x1f0>)
 80040ae:	f007 fd85 	bl	800bbbc <iprintf>
	printf("System date: %x.%02x.%x\n", (uint16_t) date & 0xFF, (uint16_t) (date >> 8) & 0x1F, ((uint16_t) (date >> 16) & 0xFF) + 0x2000);
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	001a      	movs	r2, r3
 80040b8:	23ff      	movs	r3, #255	; 0xff
 80040ba:	401a      	ands	r2, r3
 80040bc:	0011      	movs	r1, r2
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	001a      	movs	r2, r3
 80040c6:	231f      	movs	r3, #31
 80040c8:	401a      	ands	r2, r3
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	0018      	movs	r0, r3
 80040d2:	23ff      	movs	r3, #255	; 0xff
 80040d4:	4003      	ands	r3, r0
 80040d6:	2080      	movs	r0, #128	; 0x80
 80040d8:	0180      	lsls	r0, r0, #6
 80040da:	4684      	mov	ip, r0
 80040dc:	4463      	add	r3, ip
 80040de:	485a      	ldr	r0, [pc, #360]	; (8004248 <printInfo+0x1f4>)
 80040e0:	f007 fd6c 	bl	800bbbc <iprintf>
	printf("Voltage: %d.%02d V\n", (int) getVoltage(), ((int) (getVoltage() * 100) % 100));
 80040e4:	f7ff fa8e 	bl	8003604 <getVoltage>
 80040e8:	1c03      	adds	r3, r0, #0
 80040ea:	1c18      	adds	r0, r3, #0
 80040ec:	f7fd f98a 	bl	8001404 <__aeabi_f2iz>
 80040f0:	0004      	movs	r4, r0
 80040f2:	f7ff fa87 	bl	8003604 <getVoltage>
 80040f6:	1c03      	adds	r3, r0, #0
 80040f8:	4954      	ldr	r1, [pc, #336]	; (800424c <printInfo+0x1f8>)
 80040fa:	1c18      	adds	r0, r3, #0
 80040fc:	f7fc fea0 	bl	8000e40 <__aeabi_fmul>
 8004100:	1c03      	adds	r3, r0, #0
 8004102:	1c18      	adds	r0, r3, #0
 8004104:	f7fd f97e 	bl	8001404 <__aeabi_f2iz>
 8004108:	0003      	movs	r3, r0
 800410a:	2164      	movs	r1, #100	; 0x64
 800410c:	0018      	movs	r0, r3
 800410e:	f7fc f987 	bl	8000420 <__aeabi_idivmod>
 8004112:	000b      	movs	r3, r1
 8004114:	001a      	movs	r2, r3
 8004116:	4b4e      	ldr	r3, [pc, #312]	; (8004250 <printInfo+0x1fc>)
 8004118:	0021      	movs	r1, r4
 800411a:	0018      	movs	r0, r3
 800411c:	f007 fd4e 	bl	800bbbc <iprintf>
	printf("Temp: %d.%01d C\n", (int) getTemperature(), ((int) (getTemperature() * 10) % 10));
 8004120:	f7ff faa6 	bl	8003670 <getTemperature>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7fd f96c 	bl	8001404 <__aeabi_f2iz>
 800412c:	0004      	movs	r4, r0
 800412e:	f7ff fa9f 	bl	8003670 <getTemperature>
 8004132:	1c03      	adds	r3, r0, #0
 8004134:	4947      	ldr	r1, [pc, #284]	; (8004254 <printInfo+0x200>)
 8004136:	1c18      	adds	r0, r3, #0
 8004138:	f7fc fe82 	bl	8000e40 <__aeabi_fmul>
 800413c:	1c03      	adds	r3, r0, #0
 800413e:	1c18      	adds	r0, r3, #0
 8004140:	f7fd f960 	bl	8001404 <__aeabi_f2iz>
 8004144:	0003      	movs	r3, r0
 8004146:	210a      	movs	r1, #10
 8004148:	0018      	movs	r0, r3
 800414a:	f7fc f969 	bl	8000420 <__aeabi_idivmod>
 800414e:	000b      	movs	r3, r1
 8004150:	001a      	movs	r2, r3
 8004152:	4b41      	ldr	r3, [pc, #260]	; (8004258 <printInfo+0x204>)
 8004154:	0021      	movs	r1, r4
 8004156:	0018      	movs	r0, r3
 8004158:	f007 fd30 	bl	800bbbc <iprintf>
	printf("Powered: %s\n", status->powered ? "Yes" : "No");
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	791b      	ldrb	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <printInfo+0x114>
 8004164:	4b3d      	ldr	r3, [pc, #244]	; (800425c <printInfo+0x208>)
 8004166:	e000      	b.n	800416a <printInfo+0x116>
 8004168:	4b3d      	ldr	r3, [pc, #244]	; (8004260 <printInfo+0x20c>)
 800416a:	4a3e      	ldr	r2, [pc, #248]	; (8004264 <printInfo+0x210>)
 800416c:	0019      	movs	r1, r3
 800416e:	0010      	movs	r0, r2
 8004170:	f007 fd24 	bl	800bbbc <iprintf>
	printf("Powered to confirm: %s\n", status->poweredToConfirm ? "Yes" : "No");
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	799b      	ldrb	r3, [r3, #6]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <printInfo+0x12c>
 800417c:	4b37      	ldr	r3, [pc, #220]	; (800425c <printInfo+0x208>)
 800417e:	e000      	b.n	8004182 <printInfo+0x12e>
 8004180:	4b37      	ldr	r3, [pc, #220]	; (8004260 <printInfo+0x20c>)
 8004182:	4a39      	ldr	r2, [pc, #228]	; (8004268 <printInfo+0x214>)
 8004184:	0019      	movs	r1, r3
 8004186:	0010      	movs	r0, r2
 8004188:	f007 fd18 	bl	800bbbc <iprintf>
	printf("Disarmed: %s\n", status->disarmed ? "Yes" : "No");
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <printInfo+0x144>
 8004194:	4b31      	ldr	r3, [pc, #196]	; (800425c <printInfo+0x208>)
 8004196:	e000      	b.n	800419a <printInfo+0x146>
 8004198:	4b31      	ldr	r3, [pc, #196]	; (8004260 <printInfo+0x20c>)
 800419a:	4a34      	ldr	r2, [pc, #208]	; (800426c <printInfo+0x218>)
 800419c:	0019      	movs	r1, r3
 800419e:	0010      	movs	r0, r2
 80041a0:	f007 fd0c 	bl	800bbbc <iprintf>
	printf("Door opened: %s\n", status->opened ? "Yes" : "No");
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	785b      	ldrb	r3, [r3, #1]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <printInfo+0x15c>
 80041ac:	4b2b      	ldr	r3, [pc, #172]	; (800425c <printInfo+0x208>)
 80041ae:	e000      	b.n	80041b2 <printInfo+0x15e>
 80041b0:	4b2b      	ldr	r3, [pc, #172]	; (8004260 <printInfo+0x20c>)
 80041b2:	4a2f      	ldr	r2, [pc, #188]	; (8004270 <printInfo+0x21c>)
 80041b4:	0019      	movs	r1, r3
 80041b6:	0010      	movs	r0, r2
 80041b8:	f007 fd00 	bl	800bbbc <iprintf>
	printf("Opened to confirm: %s\n", status->openedToConfirm ? "Yes" : "No");
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	78db      	ldrb	r3, [r3, #3]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <printInfo+0x174>
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <printInfo+0x208>)
 80041c6:	e000      	b.n	80041ca <printInfo+0x176>
 80041c8:	4b25      	ldr	r3, [pc, #148]	; (8004260 <printInfo+0x20c>)
 80041ca:	4a2a      	ldr	r2, [pc, #168]	; (8004274 <printInfo+0x220>)
 80041cc:	0019      	movs	r1, r3
 80041ce:	0010      	movs	r0, r2
 80041d0:	f007 fcf4 	bl	800bbbc <iprintf>
	printf("Unconfirmed opening: %s\n", status->unconfirmedOpening ? "Yes" : "No");
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	79db      	ldrb	r3, [r3, #7]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <printInfo+0x18c>
 80041dc:	4b1f      	ldr	r3, [pc, #124]	; (800425c <printInfo+0x208>)
 80041de:	e000      	b.n	80041e2 <printInfo+0x18e>
 80041e0:	4b1f      	ldr	r3, [pc, #124]	; (8004260 <printInfo+0x20c>)
 80041e2:	4a25      	ldr	r2, [pc, #148]	; (8004278 <printInfo+0x224>)
 80041e4:	0019      	movs	r1, r3
 80041e6:	0010      	movs	r0, r2
 80041e8:	f007 fce8 	bl	800bbbc <iprintf>
	printf("Radio status: %s\n", statuses[myRadio.status]);
 80041ec:	4b23      	ldr	r3, [pc, #140]	; (800427c <printInfo+0x228>)
 80041ee:	7c1b      	ldrb	r3, [r3, #16]
 80041f0:	001a      	movs	r2, r3
 80041f2:	4b23      	ldr	r3, [pc, #140]	; (8004280 <printInfo+0x22c>)
 80041f4:	0092      	lsls	r2, r2, #2
 80041f6:	58d2      	ldr	r2, [r2, r3]
 80041f8:	4b22      	ldr	r3, [pc, #136]	; (8004284 <printInfo+0x230>)
 80041fa:	0011      	movs	r1, r2
 80041fc:	0018      	movs	r0, r3
 80041fe:	f007 fcdd 	bl	800bbbc <iprintf>
	printf("Message count: %lu\n", tm);
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	4b20      	ldr	r3, [pc, #128]	; (8004288 <printInfo+0x234>)
 8004206:	0011      	movs	r1, r2
 8004208:	0018      	movs	r0, r3
 800420a:	f007 fcd7 	bl	800bbbc <iprintf>
	printf("Without acknowledge: %lu\n", miss);
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	4b1e      	ldr	r3, [pc, #120]	; (800428c <printInfo+0x238>)
 8004212:	0011      	movs	r1, r2
 8004214:	0018      	movs	r0, r3
 8004216:	f007 fcd1 	bl	800bbbc <iprintf>
	printf("Displayed in : %lu ms\n", HAL_GetTick() - tick);
 800421a:	f002 f92f 	bl	800647c <HAL_GetTick>
 800421e:	0002      	movs	r2, r0
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1ad2      	subs	r2, r2, r3
 8004224:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <printInfo+0x23c>)
 8004226:	0011      	movs	r1, r2
 8004228:	0018      	movs	r0, r3
 800422a:	f007 fcc7 	bl	800bbbc <iprintf>
#endif
}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	46bd      	mov	sp, r7
 8004232:	b009      	add	sp, #36	; 0x24
 8004234:	bd90      	pop	{r4, r7, pc}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	40002800 	.word	0x40002800
 800423c:	0800e4a8 	.word	0x0800e4a8
 8004240:	0800e4bc 	.word	0x0800e4bc
 8004244:	0800e4cc 	.word	0x0800e4cc
 8004248:	0800e4ec 	.word	0x0800e4ec
 800424c:	42c80000 	.word	0x42c80000
 8004250:	0800e508 	.word	0x0800e508
 8004254:	41200000 	.word	0x41200000
 8004258:	0800e51c 	.word	0x0800e51c
 800425c:	0800e530 	.word	0x0800e530
 8004260:	0800e534 	.word	0x0800e534
 8004264:	0800e538 	.word	0x0800e538
 8004268:	0800e548 	.word	0x0800e548
 800426c:	0800e560 	.word	0x0800e560
 8004270:	0800e570 	.word	0x0800e570
 8004274:	0800e584 	.word	0x0800e584
 8004278:	0800e59c 	.word	0x0800e59c
 800427c:	20000278 	.word	0x20000278
 8004280:	20000000 	.word	0x20000000
 8004284:	0800e5b8 	.word	0x0800e5b8
 8004288:	0800e5cc 	.word	0x0800e5cc
 800428c:	0800e5e0 	.word	0x0800e5e0
 8004290:	0800e5fc 	.word	0x0800e5fc

08004294 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004294:	b590      	push	{r4, r7, lr}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800429a:	f002 f889 	bl	80063b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800429e:	f000 fbd7 	bl	8004a50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80042a2:	f000 fddb 	bl	8004e5c <MX_GPIO_Init>
	MX_DMA_Init();
 80042a6:	f000 fdb3 	bl	8004e10 <MX_DMA_Init>
	MX_RTC_Init();
 80042aa:	f000 fcf3 	bl	8004c94 <MX_RTC_Init>
	MX_SPI1_Init();
 80042ae:	f000 fd25 	bl	8004cfc <MX_SPI1_Init>
	MX_USART1_UART_Init();
 80042b2:	f000 fd5b 	bl	8004d6c <MX_USART1_UART_Init>
	MX_ADC_Init();
 80042b6:	f000 fc4f 	bl	8004b58 <MX_ADC_Init>
	MX_LPTIM1_Init();
 80042ba:	f000 fcc1 	bl	8004c40 <MX_LPTIM1_Init>
	MX_WWDG_Init();
 80042be:	f000 fd85 	bl	8004dcc <MX_WWDG_Init>
	/* USER CODE BEGIN 2 */

	initUart(&huart1, &hdma_usart1_rx, &myRadio);
 80042c2:	4ade      	ldr	r2, [pc, #888]	; (800463c <main+0x3a8>)
 80042c4:	49de      	ldr	r1, [pc, #888]	; (8004640 <main+0x3ac>)
 80042c6:	4bdf      	ldr	r3, [pc, #892]	; (8004644 <main+0x3b0>)
 80042c8:	0018      	movs	r0, r3
 80042ca:	f001 fea1 	bl	8006010 <initUart>
	HAL_LPTIM_Counter_Start_IT(&hlptim1, 256 * WATCHDOG_INTERVAL);
 80042ce:	23f0      	movs	r3, #240	; 0xf0
 80042d0:	01da      	lsls	r2, r3, #7
 80042d2:	4bdd      	ldr	r3, [pc, #884]	; (8004648 <main+0x3b4>)
 80042d4:	0011      	movs	r1, r2
 80042d6:	0018      	movs	r0, r3
 80042d8:	f003 fc6e 	bl	8007bb8 <HAL_LPTIM_Counter_Start_IT>
	printf("<ANv%lx>\n", SOFTWARE_REVISION);
 80042dc:	4adb      	ldr	r2, [pc, #876]	; (800464c <main+0x3b8>)
 80042de:	4bdc      	ldr	r3, [pc, #880]	; (8004650 <main+0x3bc>)
 80042e0:	0011      	movs	r1, r2
 80042e2:	0018      	movs	r0, r3
 80042e4:	f007 fc6a 	bl	800bbbc <iprintf>
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk | DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk;
 80042e8:	4bda      	ldr	r3, [pc, #872]	; (8004654 <main+0x3c0>)
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	4bd9      	ldr	r3, [pc, #868]	; (8004654 <main+0x3c0>)
 80042ee:	21c0      	movs	r1, #192	; 0xc0
 80042f0:	0149      	lsls	r1, r1, #5
 80042f2:	430a      	orrs	r2, r1
 80042f4:	609a      	str	r2, [r3, #8]

	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80042f6:	4bd8      	ldr	r3, [pc, #864]	; (8004658 <main+0x3c4>)
 80042f8:	2100      	movs	r1, #0
 80042fa:	0018      	movs	r0, r3
 80042fc:	f002 fc9a 	bl	8006c34 <HAL_ADCEx_Calibration_Start>
	RadioInit();
 8004300:	f7ff fcda 	bl	8003cb8 <RadioInit>
	recomendedDelay = settings.workInterval;
 8004304:	4bd5      	ldr	r3, [pc, #852]	; (800465c <main+0x3c8>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	b29a      	uxth	r2, r3
 800430a:	4bd5      	ldr	r3, [pc, #852]	; (8004660 <main+0x3cc>)
 800430c:	801a      	strh	r2, [r3, #0]

	flag.rtcAlarm = 1;
 800430e:	4bd5      	ldr	r3, [pc, #852]	; (8004664 <main+0x3d0>)
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	2101      	movs	r1, #1
 8004314:	430a      	orrs	r2, r1
 8004316:	701a      	strb	r2, [r3, #0]
	status.poweredConfirmed = HAL_GPIO_ReadPin(extPower_GPIO_Port,
 8004318:	2380      	movs	r3, #128	; 0x80
 800431a:	005a      	lsls	r2, r3, #1
 800431c:	23a0      	movs	r3, #160	; 0xa0
 800431e:	05db      	lsls	r3, r3, #23
 8004320:	0011      	movs	r1, r2
 8004322:	0018      	movs	r0, r3
 8004324:	f003 fb5c 	bl	80079e0 <HAL_GPIO_ReadPin>
 8004328:	0003      	movs	r3, r0
 800432a:	1e5a      	subs	r2, r3, #1
 800432c:	4193      	sbcs	r3, r2
 800432e:	b2da      	uxtb	r2, r3
 8004330:	4bcd      	ldr	r3, [pc, #820]	; (8004668 <main+0x3d4>)
 8004332:	715a      	strb	r2, [r3, #5]
	extPower_Pin);
	status.openedConfirmed = HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);
 8004334:	23a0      	movs	r3, #160	; 0xa0
 8004336:	05db      	lsls	r3, r3, #23
 8004338:	2101      	movs	r1, #1
 800433a:	0018      	movs	r0, r3
 800433c:	f003 fb50 	bl	80079e0 <HAL_GPIO_ReadPin>
 8004340:	0003      	movs	r3, r0
 8004342:	1e5a      	subs	r2, r3, #1
 8004344:	4193      	sbcs	r3, r2
 8004346:	b2da      	uxtb	r2, r3
 8004348:	4bc7      	ldr	r3, [pc, #796]	; (8004668 <main+0x3d4>)
 800434a:	709a      	strb	r2, [r3, #2]
	HAL_DBGMCU_DisableDBGStopMode();
 800434c:	f002 f8c4 	bl	80064d8 <HAL_DBGMCU_DisableDBGStopMode>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	// PIN MAP: 0-1
	//Receiving test
	if (HAL_GPIO_ReadPin(USER2_GPIO_Port, USER2_Pin) == USER2_ACTIVE && HAL_GPIO_ReadPin(USER1_GPIO_Port, USER1_Pin) != USER1_ACTIVE) {
 8004350:	4bc6      	ldr	r3, [pc, #792]	; (800466c <main+0x3d8>)
 8004352:	2180      	movs	r1, #128	; 0x80
 8004354:	0018      	movs	r0, r3
 8004356:	f003 fb43 	bl	80079e0 <HAL_GPIO_ReadPin>
 800435a:	1e03      	subs	r3, r0, #0
 800435c:	d108      	bne.n	8004370 <main+0xdc>
 800435e:	4bc3      	ldr	r3, [pc, #780]	; (800466c <main+0x3d8>)
 8004360:	2140      	movs	r1, #64	; 0x40
 8004362:	0018      	movs	r0, r3
 8004364:	f003 fb3c 	bl	80079e0 <HAL_GPIO_ReadPin>
 8004368:	1e03      	subs	r3, r0, #0
 800436a:	d001      	beq.n	8004370 <main+0xdc>
		ReceivingTest();
 800436c:	f7ff fcdc 	bl	8003d28 <ReceivingTest>
	}
	//PIN MAP 1-0
	//Ping Test
	if (HAL_GPIO_ReadPin(USER2_GPIO_Port, USER2_Pin) != USER1_ACTIVE && HAL_GPIO_ReadPin(USER1_GPIO_Port, USER1_Pin) == USER1_ACTIVE) {
 8004370:	4bbe      	ldr	r3, [pc, #760]	; (800466c <main+0x3d8>)
 8004372:	2180      	movs	r1, #128	; 0x80
 8004374:	0018      	movs	r0, r3
 8004376:	f003 fb33 	bl	80079e0 <HAL_GPIO_ReadPin>
 800437a:	1e03      	subs	r3, r0, #0
 800437c:	d008      	beq.n	8004390 <main+0xfc>
 800437e:	4bbb      	ldr	r3, [pc, #748]	; (800466c <main+0x3d8>)
 8004380:	2140      	movs	r1, #64	; 0x40
 8004382:	0018      	movs	r0, r3
 8004384:	f003 fb2c 	bl	80079e0 <HAL_GPIO_ReadPin>
 8004388:	1e03      	subs	r3, r0, #0
 800438a:	d101      	bne.n	8004390 <main+0xfc>
		PingTest();
 800438c:	f7ff fd9c 	bl	8003ec8 <PingTest>
	}

	//PIN MAP 1-1 - Don't sleep
	if (HAL_GPIO_ReadPin(USER2_GPIO_Port, USER2_Pin) == USER2_ACTIVE && HAL_GPIO_ReadPin(USER1_GPIO_Port, USER1_Pin) == USER1_ACTIVE)
 8004390:	4bb6      	ldr	r3, [pc, #728]	; (800466c <main+0x3d8>)
 8004392:	2180      	movs	r1, #128	; 0x80
 8004394:	0018      	movs	r0, r3
 8004396:	f003 fb23 	bl	80079e0 <HAL_GPIO_ReadPin>
 800439a:	1e03      	subs	r3, r0, #0
 800439c:	d109      	bne.n	80043b2 <main+0x11e>
 800439e:	4bb3      	ldr	r3, [pc, #716]	; (800466c <main+0x3d8>)
 80043a0:	2140      	movs	r1, #64	; 0x40
 80043a2:	0018      	movs	r0, r3
 80043a4:	f003 fb1c 	bl	80079e0 <HAL_GPIO_ReadPin>
 80043a8:	1e03      	subs	r3, r0, #0
 80043aa:	d102      	bne.n	80043b2 <main+0x11e>
		dontSleep = true;
 80043ac:	4bb0      	ldr	r3, [pc, #704]	; (8004670 <main+0x3dc>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	701a      	strb	r2, [r3, #0]

	deinitGpio();
 80043b2:	f7ff fc61 	bl	8003c78 <deinitGpio>
	flag.rtcAlarm = 1;
 80043b6:	4bab      	ldr	r3, [pc, #684]	; (8004664 <main+0x3d0>)
 80043b8:	781a      	ldrb	r2, [r3, #0]
 80043ba:	2101      	movs	r1, #1
 80043bc:	430a      	orrs	r2, r1
 80043be:	701a      	strb	r2, [r3, #0]

	while (1) {
		HAL_WWDG_Refresh(&hwwdg);
 80043c0:	4bac      	ldr	r3, [pc, #688]	; (8004674 <main+0x3e0>)
 80043c2:	0018      	movs	r0, r3
 80043c4:	f006 ff36 	bl	800b234 <HAL_WWDG_Refresh>
		temp = getTemperature();
 80043c8:	f7ff f952 	bl	8003670 <getTemperature>
 80043cc:	1c02      	adds	r2, r0, #0
 80043ce:	4baa      	ldr	r3, [pc, #680]	; (8004678 <main+0x3e4>)
 80043d0:	601a      	str	r2, [r3, #0]
		if (status.powered != HAL_GPIO_ReadPin(extPower_GPIO_Port, extPower_Pin)) {
 80043d2:	4ba5      	ldr	r3, [pc, #660]	; (8004668 <main+0x3d4>)
 80043d4:	791b      	ldrb	r3, [r3, #4]
 80043d6:	001c      	movs	r4, r3
 80043d8:	2380      	movs	r3, #128	; 0x80
 80043da:	005a      	lsls	r2, r3, #1
 80043dc:	23a0      	movs	r3, #160	; 0xa0
 80043de:	05db      	lsls	r3, r3, #23
 80043e0:	0011      	movs	r1, r2
 80043e2:	0018      	movs	r0, r3
 80043e4:	f003 fafc 	bl	80079e0 <HAL_GPIO_ReadPin>
 80043e8:	0003      	movs	r3, r0
 80043ea:	429c      	cmp	r4, r3
 80043ec:	d012      	beq.n	8004414 <main+0x180>
			poweredChangeMoment = HAL_GetTick();
 80043ee:	f002 f845 	bl	800647c <HAL_GetTick>
 80043f2:	0002      	movs	r2, r0
 80043f4:	4ba1      	ldr	r3, [pc, #644]	; (800467c <main+0x3e8>)
 80043f6:	601a      	str	r2, [r3, #0]
			status.powered = HAL_GPIO_ReadPin(extPower_GPIO_Port, extPower_Pin);
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	005a      	lsls	r2, r3, #1
 80043fc:	23a0      	movs	r3, #160	; 0xa0
 80043fe:	05db      	lsls	r3, r3, #23
 8004400:	0011      	movs	r1, r2
 8004402:	0018      	movs	r0, r3
 8004404:	f003 faec 	bl	80079e0 <HAL_GPIO_ReadPin>
 8004408:	0003      	movs	r3, r0
 800440a:	1e5a      	subs	r2, r3, #1
 800440c:	4193      	sbcs	r3, r2
 800440e:	b2da      	uxtb	r2, r3
 8004410:	4b95      	ldr	r3, [pc, #596]	; (8004668 <main+0x3d4>)
 8004412:	711a      	strb	r2, [r3, #4]
		}

		if (flag.statusRequested) {
 8004414:	4b93      	ldr	r3, [pc, #588]	; (8004664 <main+0x3d0>)
 8004416:	785b      	ldrb	r3, [r3, #1]
 8004418:	2204      	movs	r2, #4
 800441a:	4013      	ands	r3, r2
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <main+0x1a8>

			flag.statusRequested = 0;
 8004422:	4b90      	ldr	r3, [pc, #576]	; (8004664 <main+0x3d0>)
 8004424:	785a      	ldrb	r2, [r3, #1]
 8004426:	2104      	movs	r1, #4
 8004428:	438a      	bics	r2, r1
 800442a:	705a      	strb	r2, [r3, #1]

			printInfo(&status, totalMessages, acknowledgeMiss);
 800442c:	4b94      	ldr	r3, [pc, #592]	; (8004680 <main+0x3ec>)
 800442e:	6819      	ldr	r1, [r3, #0]
 8004430:	4b94      	ldr	r3, [pc, #592]	; (8004684 <main+0x3f0>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4b8c      	ldr	r3, [pc, #560]	; (8004668 <main+0x3d4>)
 8004436:	0018      	movs	r0, r3
 8004438:	f7ff fe0c 	bl	8004054 <printInfo>
		}

		if (flag.rtcAlarm) {
 800443c:	4b89      	ldr	r3, [pc, #548]	; (8004664 <main+0x3d0>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2201      	movs	r2, #1
 8004442:	4013      	ands	r3, r2
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d015      	beq.n	8004476 <main+0x1e2>
			flag.rtcAlarm = 0;
 800444a:	4b86      	ldr	r3, [pc, #536]	; (8004664 <main+0x3d0>)
 800444c:	781a      	ldrb	r2, [r3, #0]
 800444e:	2101      	movs	r1, #1
 8004450:	438a      	bics	r2, r1
 8004452:	701a      	strb	r2, [r3, #0]
			if (status.disarmed == 0 || status.powered == 0)
 8004454:	4b84      	ldr	r3, [pc, #528]	; (8004668 <main+0x3d4>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2201      	movs	r2, #1
 800445a:	4053      	eors	r3, r2
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <main+0x1dc>
 8004462:	4b81      	ldr	r3, [pc, #516]	; (8004668 <main+0x3d4>)
 8004464:	791b      	ldrb	r3, [r3, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	4053      	eors	r3, r2
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <main+0x1e2>
				triesToSend = MAX_RETRIES;
 8004470:	4b85      	ldr	r3, [pc, #532]	; (8004688 <main+0x3f4>)
 8004472:	2207      	movs	r2, #7
 8004474:	701a      	strb	r2, [r3, #0]

		}

		if (flag.saveSettings) {
 8004476:	4b7b      	ldr	r3, [pc, #492]	; (8004664 <main+0x3d0>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2210      	movs	r2, #16
 800447c:	4013      	ands	r3, r2
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d010      	beq.n	80044a6 <main+0x212>
			flag.saveSettings = 0;
 8004484:	4b77      	ldr	r3, [pc, #476]	; (8004664 <main+0x3d0>)
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	2110      	movs	r1, #16
 800448a:	438a      	bics	r2, r1
 800448c:	701a      	strb	r2, [r3, #0]

			debugLogTime("Saving settings to EEPROM");
 800448e:	4b7f      	ldr	r3, [pc, #508]	; (800468c <main+0x3f8>)
 8004490:	0018      	movs	r0, r3
 8004492:	f7ff f833 	bl	80034fc <debugLogTime>
			initiateSettings(&settings);
 8004496:	4b71      	ldr	r3, [pc, #452]	; (800465c <main+0x3c8>)
 8004498:	0018      	movs	r0, r3
 800449a:	f7ff f9e3 	bl	8003864 <initiateSettings>
			saveSettings(&settings);
 800449e:	4b6f      	ldr	r3, [pc, #444]	; (800465c <main+0x3c8>)
 80044a0:	0018      	movs	r0, r3
 80044a2:	f7ff fac3 	bl	8003a2c <saveSettings>
		}

		if ((status.openedConfirmed != status.opened
 80044a6:	4b70      	ldr	r3, [pc, #448]	; (8004668 <main+0x3d4>)
 80044a8:	789a      	ldrb	r2, [r3, #2]
 80044aa:	4b6f      	ldr	r3, [pc, #444]	; (8004668 <main+0x3d4>)
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d11a      	bne.n	80044e8 <main+0x254>
				|| (status.poweredConfirmed != status.powered && HAL_GetTick() - poweredChangeMoment > settings.nodeNum * 1500) || triesToSend > 0
 80044b2:	4b6d      	ldr	r3, [pc, #436]	; (8004668 <main+0x3d4>)
 80044b4:	795a      	ldrb	r2, [r3, #5]
 80044b6:	4b6c      	ldr	r3, [pc, #432]	; (8004668 <main+0x3d4>)
 80044b8:	791b      	ldrb	r3, [r3, #4]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d00c      	beq.n	80044d8 <main+0x244>
 80044be:	f001 ffdd 	bl	800647c <HAL_GetTick>
 80044c2:	0002      	movs	r2, r0
 80044c4:	4b6d      	ldr	r3, [pc, #436]	; (800467c <main+0x3e8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	4a64      	ldr	r2, [pc, #400]	; (800465c <main+0x3c8>)
 80044cc:	7a92      	ldrb	r2, [r2, #10]
 80044ce:	0011      	movs	r1, r2
 80044d0:	4a6f      	ldr	r2, [pc, #444]	; (8004690 <main+0x3fc>)
 80044d2:	434a      	muls	r2, r1
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d807      	bhi.n	80044e8 <main+0x254>
 80044d8:	4b6b      	ldr	r3, [pc, #428]	; (8004688 <main+0x3f4>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d103      	bne.n	80044e8 <main+0x254>
				|| status.unconfirmedOpening) && !wfa && !status.disarmed && HAL_GetTick() - myRadio.lastSignalTick > 10 + settings.nodeNum * 20
 80044e0:	4b61      	ldr	r3, [pc, #388]	; (8004668 <main+0x3d4>)
 80044e2:	79db      	ldrb	r3, [r3, #7]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d056      	beq.n	8004596 <main+0x302>
 80044e8:	4b6a      	ldr	r3, [pc, #424]	; (8004694 <main+0x400>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2201      	movs	r2, #1
 80044ee:	4053      	eors	r3, r2
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d04f      	beq.n	8004596 <main+0x302>
 80044f6:	4b5c      	ldr	r3, [pc, #368]	; (8004668 <main+0x3d4>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2201      	movs	r2, #1
 80044fc:	4053      	eors	r3, r2
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d048      	beq.n	8004596 <main+0x302>
 8004504:	f001 ffba 	bl	800647c <HAL_GetTick>
 8004508:	0002      	movs	r2, r0
 800450a:	4b4c      	ldr	r3, [pc, #304]	; (800463c <main+0x3a8>)
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	1ad2      	subs	r2, r2, r3
 8004510:	4b52      	ldr	r3, [pc, #328]	; (800465c <main+0x3c8>)
 8004512:	7a9b      	ldrb	r3, [r3, #10]
 8004514:	0019      	movs	r1, r3
 8004516:	000b      	movs	r3, r1
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	185b      	adds	r3, r3, r1
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	330a      	adds	r3, #10
 8004520:	429a      	cmp	r2, r3
 8004522:	d938      	bls.n	8004596 <main+0x302>
				&& myRadio.status != TX) {
 8004524:	4b45      	ldr	r3, [pc, #276]	; (800463c <main+0x3a8>)
 8004526:	7c1b      	ldrb	r3, [r3, #16]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d034      	beq.n	8004596 <main+0x302>
			if (status.opened)
 800452c:	4b4e      	ldr	r3, [pc, #312]	; (8004668 <main+0x3d4>)
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <main+0x2a6>
				status.unconfirmedOpening = true;
 8004534:	4b4c      	ldr	r3, [pc, #304]	; (8004668 <main+0x3d4>)
 8004536:	2201      	movs	r2, #1
 8004538:	71da      	strb	r2, [r3, #7]
			if (triesToSend)
 800453a:	4b53      	ldr	r3, [pc, #332]	; (8004688 <main+0x3f4>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <main+0x2ba>
				triesToSend--;
 8004542:	4b51      	ldr	r3, [pc, #324]	; (8004688 <main+0x3f4>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	3b01      	subs	r3, #1
 8004548:	b2da      	uxtb	r2, r3
 800454a:	4b4f      	ldr	r3, [pc, #316]	; (8004688 <main+0x3f4>)
 800454c:	701a      	strb	r2, [r3, #0]

			debugLogTime("Sending status");
 800454e:	4b52      	ldr	r3, [pc, #328]	; (8004698 <main+0x404>)
 8004550:	0018      	movs	r0, r3
 8004552:	f7fe ffd3 	bl	80034fc <debugLogTime>
			debugLogInt("%d tries left", triesToSend);
 8004556:	4b4c      	ldr	r3, [pc, #304]	; (8004688 <main+0x3f4>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	001a      	movs	r2, r3
 800455c:	4b4f      	ldr	r3, [pc, #316]	; (800469c <main+0x408>)
 800455e:	0011      	movs	r1, r2
 8004560:	0018      	movs	r0, r3
 8004562:	f7ff f81f 	bl	80035a4 <debugLogInt>

			totalMessages++;
 8004566:	4b46      	ldr	r3, [pc, #280]	; (8004680 <main+0x3ec>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	4b44      	ldr	r3, [pc, #272]	; (8004680 <main+0x3ec>)
 800456e:	601a      	str	r2, [r3, #0]
			lastTransTime = HAL_GetTick();
 8004570:	f001 ff84 	bl	800647c <HAL_GetTick>
 8004574:	0002      	movs	r2, r0
 8004576:	4b4a      	ldr	r3, [pc, #296]	; (80046a0 <main+0x40c>)
 8004578:	601a      	str	r2, [r3, #0]
			sendStatus(&status, &settings);
 800457a:	4a38      	ldr	r2, [pc, #224]	; (800465c <main+0x3c8>)
 800457c:	4b3a      	ldr	r3, [pc, #232]	; (8004668 <main+0x3d4>)
 800457e:	0011      	movs	r1, r2
 8004580:	0018      	movs	r0, r3
 8004582:	f7ff fac5 	bl	8003b10 <sendStatus>
			wfa = true;
 8004586:	4b43      	ldr	r3, [pc, #268]	; (8004694 <main+0x400>)
 8004588:	2201      	movs	r2, #1
 800458a:	701a      	strb	r2, [r3, #0]
			setWakeup(recomendedDelay);
 800458c:	4b34      	ldr	r3, [pc, #208]	; (8004660 <main+0x3cc>)
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	0018      	movs	r0, r3
 8004592:	f7ff fa7b 	bl	8003a8c <setWakeup>
		}

		//Got no acknowledge
		if (wfa && HAL_GetTick() - lastTransTime > interval) {
 8004596:	4b3f      	ldr	r3, [pc, #252]	; (8004694 <main+0x400>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d03f      	beq.n	800461e <main+0x38a>
 800459e:	f001 ff6d 	bl	800647c <HAL_GetTick>
 80045a2:	0002      	movs	r2, r0
 80045a4:	4b3e      	ldr	r3, [pc, #248]	; (80046a0 <main+0x40c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	1ad2      	subs	r2, r2, r3
 80045aa:	4b3e      	ldr	r3, [pc, #248]	; (80046a4 <main+0x410>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d935      	bls.n	800461e <main+0x38a>
			acknowledgeMiss++;
 80045b2:	4b34      	ldr	r3, [pc, #208]	; (8004684 <main+0x3f0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	4b32      	ldr	r3, [pc, #200]	; (8004684 <main+0x3f0>)
 80045ba:	601a      	str	r2, [r3, #0]
			uint32_t maxInterval = settings.workInterval * 1000 / 3;
 80045bc:	4b27      	ldr	r3, [pc, #156]	; (800465c <main+0x3c8>)
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	0013      	movs	r3, r2
 80045c2:	015b      	lsls	r3, r3, #5
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	189b      	adds	r3, r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	2103      	movs	r1, #3
 80045ce:	0018      	movs	r0, r3
 80045d0:	f7fb fdb6 	bl	8000140 <__udivsi3>
 80045d4:	0003      	movs	r3, r0
 80045d6:	607b      	str	r3, [r7, #4]
			debugLogTime("Got no acknowledge!");
 80045d8:	4b33      	ldr	r3, [pc, #204]	; (80046a8 <main+0x414>)
 80045da:	0018      	movs	r0, r3
 80045dc:	f7fe ff8e 	bl	80034fc <debugLogTime>
			wfa = false;
 80045e0:	4b2c      	ldr	r3, [pc, #176]	; (8004694 <main+0x400>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	701a      	strb	r2, [r3, #0]
			interval += INTERVAL_STEP + settings.nodeNum * 300;
 80045e6:	4b1d      	ldr	r3, [pc, #116]	; (800465c <main+0x3c8>)
 80045e8:	7a9b      	ldrb	r3, [r3, #10]
 80045ea:	001a      	movs	r2, r3
 80045ec:	0013      	movs	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	189b      	adds	r3, r3, r2
 80045f2:	011a      	lsls	r2, r3, #4
 80045f4:	1ad2      	subs	r2, r2, r3
 80045f6:	0093      	lsls	r3, r2, #2
 80045f8:	001a      	movs	r2, r3
 80045fa:	0013      	movs	r3, r2
 80045fc:	001a      	movs	r2, r3
 80045fe:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <main+0x410>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	18d3      	adds	r3, r2, r3
 8004604:	22fa      	movs	r2, #250	; 0xfa
 8004606:	0092      	lsls	r2, r2, #2
 8004608:	189a      	adds	r2, r3, r2
 800460a:	4b26      	ldr	r3, [pc, #152]	; (80046a4 <main+0x410>)
 800460c:	601a      	str	r2, [r3, #0]
			interval = (interval > maxInterval) ? maxInterval : interval;
 800460e:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <main+0x410>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4293      	cmp	r3, r2
 8004616:	d900      	bls.n	800461a <main+0x386>
 8004618:	0013      	movs	r3, r2
 800461a:	4a22      	ldr	r2, [pc, #136]	; (80046a4 <main+0x410>)
 800461c:	6013      	str	r3, [r2, #0]
		}

		if (flag.uartRx) {
 800461e:	4b11      	ldr	r3, [pc, #68]	; (8004664 <main+0x3d0>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2208      	movs	r2, #8
 8004624:	4013      	ands	r3, r2
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d041      	beq.n	80046b0 <main+0x41c>
			flag.uartRx = 0;
 800462c:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <main+0x3d0>)
 800462e:	781a      	ldrb	r2, [r3, #0]
 8004630:	2108      	movs	r1, #8
 8004632:	438a      	bics	r2, r1
 8004634:	701a      	strb	r2, [r3, #0]

			uartReceiveHandler(&settings);
 8004636:	4b09      	ldr	r3, [pc, #36]	; (800465c <main+0x3c8>)
 8004638:	0018      	movs	r0, r3
 800463a:	e037      	b.n	80046ac <main+0x418>
 800463c:	20000278 	.word	0x20000278
 8004640:	20000300 	.word	0x20000300
 8004644:	20000348 	.word	0x20000348
 8004648:	200003cc 	.word	0x200003cc
 800464c:	27112021 	.word	0x27112021
 8004650:	0800e614 	.word	0x0800e614
 8004654:	40015800 	.word	0x40015800
 8004658:	200004f4 	.word	0x200004f4
 800465c:	20000234 	.word	0x20000234
 8004660:	20000014 	.word	0x20000014
 8004664:	20000220 	.word	0x20000220
 8004668:	2000022c 	.word	0x2000022c
 800466c:	50000400 	.word	0x50000400
 8004670:	20000255 	.word	0x20000255
 8004674:	20000420 	.word	0x20000420
 8004678:	200002fc 	.word	0x200002fc
 800467c:	20000228 	.word	0x20000228
 8004680:	20000258 	.word	0x20000258
 8004684:	2000025c 	.word	0x2000025c
 8004688:	20000254 	.word	0x20000254
 800468c:	0800e620 	.word	0x0800e620
 8004690:	000005dc 	.word	0x000005dc
 8004694:	20000256 	.word	0x20000256
 8004698:	0800e63c 	.word	0x0800e63c
 800469c:	0800e64c 	.word	0x0800e64c
 80046a0:	20000250 	.word	0x20000250
 80046a4:	2000001c 	.word	0x2000001c
 80046a8:	0800e65c 	.word	0x0800e65c
 80046ac:	f001 fcfc 	bl	80060a8 <uartReceiveHandler>
		}

		if (flag.readConfig) {
 80046b0:	4bcd      	ldr	r3, [pc, #820]	; (80049e8 <main+0x754>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2220      	movs	r2, #32
 80046b6:	4013      	ands	r3, r2
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <main+0x43c>
			flag.readConfig = 0;
 80046be:	4bca      	ldr	r3, [pc, #808]	; (80049e8 <main+0x754>)
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	2120      	movs	r1, #32
 80046c4:	438a      	bics	r2, r1
 80046c6:	701a      	strb	r2, [r3, #0]

			sendConfig(&settings);
 80046c8:	4bc8      	ldr	r3, [pc, #800]	; (80049ec <main+0x758>)
 80046ca:	0018      	movs	r0, r3
 80046cc:	f001 fdd2 	bl	8006274 <sendConfig>
		}

		if (myRadio.readBytes > 0) {
 80046d0:	4bc7      	ldr	r3, [pc, #796]	; (80049f0 <main+0x75c>)
 80046d2:	225d      	movs	r2, #93	; 0x5d
 80046d4:	5c9b      	ldrb	r3, [r3, r2]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d100      	bne.n	80046dc <main+0x448>
 80046da:	e120      	b.n	800491e <main+0x68a>
			debugLogTime("Got message...");
 80046dc:	4bc5      	ldr	r3, [pc, #788]	; (80049f4 <main+0x760>)
 80046de:	0018      	movs	r0, r3
 80046e0:	f7fe ff0c 	bl	80034fc <debugLogTime>
			if (myRadio.badCrc == 1) {
 80046e4:	4bc2      	ldr	r3, [pc, #776]	; (80049f0 <main+0x75c>)
 80046e6:	2260      	movs	r2, #96	; 0x60
 80046e8:	5c9b      	ldrb	r3, [r3, r2]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <main+0x46c>
				debugLog("Bad CRC!");
 80046ee:	4bc2      	ldr	r3, [pc, #776]	; (80049f8 <main+0x764>)
 80046f0:	0018      	movs	r0, r3
 80046f2:	f7fe ff41 	bl	8003578 <debugLog>
				myRadio.readBytes = 0;
 80046f6:	4bbe      	ldr	r3, [pc, #760]	; (80049f0 <main+0x75c>)
 80046f8:	225d      	movs	r2, #93	; 0x5d
 80046fa:	2100      	movs	r1, #0
 80046fc:	5499      	strb	r1, [r3, r2]
 80046fe:	e10a      	b.n	8004916 <main+0x682>
			} else if (rxMes->uplink == 0 && rxMes->adr == settings.nodeNum) {
 8004700:	4bbe      	ldr	r3, [pc, #760]	; (80049fc <main+0x768>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2201      	movs	r2, #1
 8004708:	4013      	ands	r3, r2
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d000      	beq.n	8004712 <main+0x47e>
 8004710:	e0cd      	b.n	80048ae <main+0x61a>
 8004712:	4bba      	ldr	r3, [pc, #744]	; (80049fc <main+0x768>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	061b      	lsls	r3, r3, #24
 800471a:	0edb      	lsrs	r3, r3, #27
 800471c:	b2db      	uxtb	r3, r3
 800471e:	001a      	movs	r2, r3
 8004720:	4bb2      	ldr	r3, [pc, #712]	; (80049ec <main+0x758>)
 8004722:	7a9b      	ldrb	r3, [r3, #10]
 8004724:	429a      	cmp	r2, r3
 8004726:	d000      	beq.n	800472a <main+0x496>
 8004728:	e0c1      	b.n	80048ae <main+0x61a>
				if (status.disarmed != rxMes->disarm)
 800472a:	4bb5      	ldr	r3, [pc, #724]	; (8004a00 <main+0x76c>)
 800472c:	781a      	ldrb	r2, [r3, #0]
 800472e:	4bb3      	ldr	r3, [pc, #716]	; (80049fc <main+0x768>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	785b      	ldrb	r3, [r3, #1]
 8004734:	07db      	lsls	r3, r3, #31
 8004736:	0fdb      	lsrs	r3, r3, #31
 8004738:	b2db      	uxtb	r3, r3
 800473a:	429a      	cmp	r2, r3
 800473c:	d00f      	beq.n	800475e <main+0x4ca>
					debugLogString("Disarmed changed to %s", rxMes->disarm ? "Yes" : "No");
 800473e:	4baf      	ldr	r3, [pc, #700]	; (80049fc <main+0x768>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2201      	movs	r2, #1
 8004746:	4013      	ands	r3, r2
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <main+0x4be>
 800474e:	4bad      	ldr	r3, [pc, #692]	; (8004a04 <main+0x770>)
 8004750:	e000      	b.n	8004754 <main+0x4c0>
 8004752:	4bad      	ldr	r3, [pc, #692]	; (8004a08 <main+0x774>)
 8004754:	4aad      	ldr	r2, [pc, #692]	; (8004a0c <main+0x778>)
 8004756:	0019      	movs	r1, r3
 8004758:	0010      	movs	r0, r2
 800475a:	f7fe ff3b 	bl	80035d4 <debugLogString>

				status.disarmed = rxMes->disarm;
 800475e:	4ba7      	ldr	r3, [pc, #668]	; (80049fc <main+0x768>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	07db      	lsls	r3, r3, #31
 8004766:	0fdb      	lsrs	r3, r3, #31
 8004768:	b2db      	uxtb	r3, r3
 800476a:	1e5a      	subs	r2, r3, #1
 800476c:	4193      	sbcs	r3, r2
 800476e:	b2da      	uxtb	r2, r3
 8004770:	4ba3      	ldr	r3, [pc, #652]	; (8004a00 <main+0x76c>)
 8004772:	701a      	strb	r2, [r3, #0]
				if (rxMes->codedDelayMSB || rxMes->codedDelayLSB) {
 8004774:	4ba1      	ldr	r3, [pc, #644]	; (80049fc <main+0x768>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	2201      	movs	r2, #1
 800477c:	4393      	bics	r3, r2
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d104      	bne.n	800478e <main+0x4fa>
 8004784:	4b9d      	ldr	r3, [pc, #628]	; (80049fc <main+0x768>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	789b      	ldrb	r3, [r3, #2]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d031      	beq.n	80047f2 <main+0x55e>

					recomendedDelay = rxMes->codedDelayLSB + (rxMes->codedDelayMSB << 8);
 800478e:	4b9b      	ldr	r3, [pc, #620]	; (80049fc <main+0x768>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	789b      	ldrb	r3, [r3, #2]
 8004794:	b29a      	uxth	r2, r3
 8004796:	4b99      	ldr	r3, [pc, #612]	; (80049fc <main+0x768>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	0e5b      	lsrs	r3, r3, #25
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	18d3      	adds	r3, r2, r3
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	4b98      	ldr	r3, [pc, #608]	; (8004a10 <main+0x77c>)
 80047ae:	801a      	strh	r2, [r3, #0]
					if (recomendedDelay > 2 * settings.workInterval) {
 80047b0:	4b97      	ldr	r3, [pc, #604]	; (8004a10 <main+0x77c>)
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	001a      	movs	r2, r3
 80047b6:	4b8d      	ldr	r3, [pc, #564]	; (80049ec <main+0x758>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	429a      	cmp	r2, r3
 80047be:	d90f      	bls.n	80047e0 <main+0x54c>
						debugLogInt("###Recommended delay is too high(%u), returning to 2x work Interval", recomendedDelay);
 80047c0:	4b93      	ldr	r3, [pc, #588]	; (8004a10 <main+0x77c>)
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	001a      	movs	r2, r3
 80047c6:	4b93      	ldr	r3, [pc, #588]	; (8004a14 <main+0x780>)
 80047c8:	0011      	movs	r1, r2
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7fe feea 	bl	80035a4 <debugLogInt>
						recomendedDelay = 2 * settings.workInterval;
 80047d0:	4b86      	ldr	r3, [pc, #536]	; (80049ec <main+0x758>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	18db      	adds	r3, r3, r3
 80047d8:	b29a      	uxth	r2, r3
 80047da:	4b8d      	ldr	r3, [pc, #564]	; (8004a10 <main+0x77c>)
 80047dc:	801a      	strh	r2, [r3, #0]
					if (recomendedDelay > 2 * settings.workInterval) {
 80047de:	e016      	b.n	800480e <main+0x57a>
					} else
						debugLogInt("Recommended delay set to %u", recomendedDelay);
 80047e0:	4b8b      	ldr	r3, [pc, #556]	; (8004a10 <main+0x77c>)
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	001a      	movs	r2, r3
 80047e6:	4b8c      	ldr	r3, [pc, #560]	; (8004a18 <main+0x784>)
 80047e8:	0011      	movs	r1, r2
 80047ea:	0018      	movs	r0, r3
 80047ec:	f7fe feda 	bl	80035a4 <debugLogInt>
					if (recomendedDelay > 2 * settings.workInterval) {
 80047f0:	e00d      	b.n	800480e <main+0x57a>
				} else {
					debugLogInt("Recommended returned to %u", (uint16_t) settings.workInterval);
 80047f2:	4b7e      	ldr	r3, [pc, #504]	; (80049ec <main+0x758>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	001a      	movs	r2, r3
 80047fa:	4b88      	ldr	r3, [pc, #544]	; (8004a1c <main+0x788>)
 80047fc:	0011      	movs	r1, r2
 80047fe:	0018      	movs	r0, r3
 8004800:	f7fe fed0 	bl	80035a4 <debugLogInt>
					recomendedDelay = settings.workInterval;
 8004804:	4b79      	ldr	r3, [pc, #484]	; (80049ec <main+0x758>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	b29a      	uxth	r2, r3
 800480a:	4b81      	ldr	r3, [pc, #516]	; (8004a10 <main+0x77c>)
 800480c:	801a      	strh	r2, [r3, #0]
				}
				setWakeup(recomendedDelay);
 800480e:	4b80      	ldr	r3, [pc, #512]	; (8004a10 <main+0x77c>)
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	0018      	movs	r0, r3
 8004814:	f7ff f93a 	bl	8003a8c <setWakeup>
				if (rxMes->message == MSG_DOWN_REQUEST) //Request current status
 8004818:	4b78      	ldr	r3, [pc, #480]	; (80049fc <main+0x768>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2206      	movs	r2, #6
 8004820:	4013      	ands	r3, r2
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d11c      	bne.n	8004862 <main+0x5ce>
				{
					debugLog("Status requested...sending");
 8004828:	4b7d      	ldr	r3, [pc, #500]	; (8004a20 <main+0x78c>)
 800482a:	0018      	movs	r0, r3
 800482c:	f7fe fea4 	bl	8003578 <debugLog>
					totalMessages++;
 8004830:	4b7c      	ldr	r3, [pc, #496]	; (8004a24 <main+0x790>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	4b7b      	ldr	r3, [pc, #492]	; (8004a24 <main+0x790>)
 8004838:	601a      	str	r2, [r3, #0]
					lastTransTime = HAL_GetTick();
 800483a:	f001 fe1f 	bl	800647c <HAL_GetTick>
 800483e:	0002      	movs	r2, r0
 8004840:	4b79      	ldr	r3, [pc, #484]	; (8004a28 <main+0x794>)
 8004842:	601a      	str	r2, [r3, #0]
					sendStatus(&status, &settings);
 8004844:	4a69      	ldr	r2, [pc, #420]	; (80049ec <main+0x758>)
 8004846:	4b6e      	ldr	r3, [pc, #440]	; (8004a00 <main+0x76c>)
 8004848:	0011      	movs	r1, r2
 800484a:	0018      	movs	r0, r3
 800484c:	f7ff f960 	bl	8003b10 <sendStatus>
					wfa = true;
 8004850:	4b76      	ldr	r3, [pc, #472]	; (8004a2c <main+0x798>)
 8004852:	2201      	movs	r2, #1
 8004854:	701a      	strb	r2, [r3, #0]
					setWakeup(recomendedDelay);
 8004856:	4b6e      	ldr	r3, [pc, #440]	; (8004a10 <main+0x77c>)
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	0018      	movs	r0, r3
 800485c:	f7ff f916 	bl	8003a8c <setWakeup>
				if (rxMes->message == MSG_DOWN_REQUEST) //Request current status
 8004860:	e058      	b.n	8004914 <main+0x680>
				}

				else if (rxMes->message == MSG_DOWN_ACKNOWLEDGE) {
 8004862:	4b66      	ldr	r3, [pc, #408]	; (80049fc <main+0x768>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2206      	movs	r2, #6
 800486a:	4013      	ands	r3, r2
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d150      	bne.n	8004914 <main+0x680>
					debugLog("Acknowledge received");
 8004872:	4b6f      	ldr	r3, [pc, #444]	; (8004a30 <main+0x79c>)
 8004874:	0018      	movs	r0, r3
 8004876:	f7fe fe7f 	bl	8003578 <debugLog>
					if (status.openedToConfirm == 1)
 800487a:	4b61      	ldr	r3, [pc, #388]	; (8004a00 <main+0x76c>)
 800487c:	78db      	ldrb	r3, [r3, #3]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <main+0x5f4>
						status.unconfirmedOpening = 0;
 8004882:	4b5f      	ldr	r3, [pc, #380]	; (8004a00 <main+0x76c>)
 8004884:	2200      	movs	r2, #0
 8004886:	71da      	strb	r2, [r3, #7]
					status.openedConfirmed = status.openedToConfirm;
 8004888:	4b5d      	ldr	r3, [pc, #372]	; (8004a00 <main+0x76c>)
 800488a:	78da      	ldrb	r2, [r3, #3]
 800488c:	4b5c      	ldr	r3, [pc, #368]	; (8004a00 <main+0x76c>)
 800488e:	709a      	strb	r2, [r3, #2]
					status.poweredConfirmed = status.poweredToConfirm;
 8004890:	4b5b      	ldr	r3, [pc, #364]	; (8004a00 <main+0x76c>)
 8004892:	799a      	ldrb	r2, [r3, #6]
 8004894:	4b5a      	ldr	r3, [pc, #360]	; (8004a00 <main+0x76c>)
 8004896:	715a      	strb	r2, [r3, #5]
					wfa = false;
 8004898:	4b64      	ldr	r3, [pc, #400]	; (8004a2c <main+0x798>)
 800489a:	2200      	movs	r2, #0
 800489c:	701a      	strb	r2, [r3, #0]
					interval = DEFAULT_INTERVAL;
 800489e:	4b65      	ldr	r3, [pc, #404]	; (8004a34 <main+0x7a0>)
 80048a0:	22fa      	movs	r2, #250	; 0xfa
 80048a2:	00d2      	lsls	r2, r2, #3
 80048a4:	601a      	str	r2, [r3, #0]
					triesToSend = 0;
 80048a6:	4b64      	ldr	r3, [pc, #400]	; (8004a38 <main+0x7a4>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
				if (rxMes->message == MSG_DOWN_REQUEST) //Request current status
 80048ac:	e032      	b.n	8004914 <main+0x680>

				}
			} else {

				if (rxMes->uplink == 0) {
 80048ae:	4b53      	ldr	r3, [pc, #332]	; (80049fc <main+0x768>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2201      	movs	r2, #1
 80048b6:	4013      	ands	r3, r2
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d11d      	bne.n	80048fa <main+0x666>
					debugLogInt("It's for %d", rxMes->adr);
 80048be:	4b4f      	ldr	r3, [pc, #316]	; (80049fc <main+0x768>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	061b      	lsls	r3, r3, #24
 80048c6:	0edb      	lsrs	r3, r3, #27
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	001a      	movs	r2, r3
 80048cc:	4b5b      	ldr	r3, [pc, #364]	; (8004a3c <main+0x7a8>)
 80048ce:	0011      	movs	r1, r2
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7fe fe67 	bl	80035a4 <debugLogInt>
					debugLogInt("Delay for him: %d", rxMes->codedDelayLSB + (rxMes->codedDelayMSB << 8));
 80048d6:	4b49      	ldr	r3, [pc, #292]	; (80049fc <main+0x768>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	789b      	ldrb	r3, [r3, #2]
 80048dc:	001a      	movs	r2, r3
 80048de:	4b47      	ldr	r3, [pc, #284]	; (80049fc <main+0x768>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	785b      	ldrb	r3, [r3, #1]
 80048e4:	061b      	lsls	r3, r3, #24
 80048e6:	0e5b      	lsrs	r3, r3, #25
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	18d2      	adds	r2, r2, r3
 80048ee:	4b54      	ldr	r3, [pc, #336]	; (8004a40 <main+0x7ac>)
 80048f0:	0011      	movs	r1, r2
 80048f2:	0018      	movs	r0, r3
 80048f4:	f7fe fe56 	bl	80035a4 <debugLogInt>
 80048f8:	e00d      	b.n	8004916 <main+0x682>
				} else {
					debugLogInt("It's from %d", rxMes->adr);
 80048fa:	4b40      	ldr	r3, [pc, #256]	; (80049fc <main+0x768>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	0edb      	lsrs	r3, r3, #27
 8004904:	b2db      	uxtb	r3, r3
 8004906:	001a      	movs	r2, r3
 8004908:	4b4e      	ldr	r3, [pc, #312]	; (8004a44 <main+0x7b0>)
 800490a:	0011      	movs	r1, r2
 800490c:	0018      	movs	r0, r3
 800490e:	f7fe fe49 	bl	80035a4 <debugLogInt>
 8004912:	e000      	b.n	8004916 <main+0x682>
				if (rxMes->message == MSG_DOWN_REQUEST) //Request current status
 8004914:	46c0      	nop			; (mov r8, r8)
				}
			}
			myRadio.readBytes = 0;
 8004916:	4b36      	ldr	r3, [pc, #216]	; (80049f0 <main+0x75c>)
 8004918:	225d      	movs	r2, #93	; 0x5d
 800491a:	2100      	movs	r1, #0
 800491c:	5499      	strb	r1, [r3, r2]
		}

		SX127X_Routine(&myRadio);
 800491e:	4b34      	ldr	r3, [pc, #208]	; (80049f0 <main+0x75c>)
 8004920:	0018      	movs	r0, r3
 8004922:	f001 f9b7 	bl	8005c94 <SX127X_Routine>

		ledRoutine(&myRadio);
 8004926:	4b32      	ldr	r3, [pc, #200]	; (80049f0 <main+0x75c>)
 8004928:	0018      	movs	r0, r3
 800492a:	f7ff fb33 	bl	8003f94 <ledRoutine>

		status.opened = HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin) || status.unconfirmedOpening;
 800492e:	23a0      	movs	r3, #160	; 0xa0
 8004930:	05db      	lsls	r3, r3, #23
 8004932:	2101      	movs	r1, #1
 8004934:	0018      	movs	r0, r3
 8004936:	f003 f853 	bl	80079e0 <HAL_GPIO_ReadPin>
 800493a:	1e03      	subs	r3, r0, #0
 800493c:	d103      	bne.n	8004946 <main+0x6b2>
 800493e:	4b30      	ldr	r3, [pc, #192]	; (8004a00 <main+0x76c>)
 8004940:	79db      	ldrb	r3, [r3, #7]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <main+0x6b6>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <main+0x6b8>
 800494a:	2300      	movs	r3, #0
 800494c:	1c1a      	adds	r2, r3, #0
 800494e:	2301      	movs	r3, #1
 8004950:	4013      	ands	r3, r2
 8004952:	b2da      	uxtb	r2, r3
 8004954:	4b2a      	ldr	r3, [pc, #168]	; (8004a00 <main+0x76c>)
 8004956:	705a      	strb	r2, [r3, #1]
		status.powered = HAL_GPIO_ReadPin(extPower_GPIO_Port, extPower_Pin);
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	005a      	lsls	r2, r3, #1
 800495c:	23a0      	movs	r3, #160	; 0xa0
 800495e:	05db      	lsls	r3, r3, #23
 8004960:	0011      	movs	r1, r2
 8004962:	0018      	movs	r0, r3
 8004964:	f003 f83c 	bl	80079e0 <HAL_GPIO_ReadPin>
 8004968:	0003      	movs	r3, r0
 800496a:	1e5a      	subs	r2, r3, #1
 800496c:	4193      	sbcs	r3, r2
 800496e:	b2da      	uxtb	r2, r3
 8004970:	4b23      	ldr	r3, [pc, #140]	; (8004a00 <main+0x76c>)
 8004972:	711a      	strb	r2, [r3, #4]
		if (!status.powered && !wfa && !myRadio.TXrequest && status.powered == status.poweredConfirmed && status.opened == status.openedConfirmed
 8004974:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <main+0x76c>)
 8004976:	791b      	ldrb	r3, [r3, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	4053      	eors	r3, r2
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d100      	bne.n	8004984 <main+0x6f0>
 8004982:	e51d      	b.n	80043c0 <main+0x12c>
 8004984:	4b29      	ldr	r3, [pc, #164]	; (8004a2c <main+0x798>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2201      	movs	r2, #1
 800498a:	4053      	eors	r3, r2
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d100      	bne.n	8004994 <main+0x700>
 8004992:	e515      	b.n	80043c0 <main+0x12c>
 8004994:	4b16      	ldr	r3, [pc, #88]	; (80049f0 <main+0x75c>)
 8004996:	7c5b      	ldrb	r3, [r3, #17]
 8004998:	2201      	movs	r2, #1
 800499a:	4053      	eors	r3, r2
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d100      	bne.n	80049a4 <main+0x710>
 80049a2:	e50d      	b.n	80043c0 <main+0x12c>
 80049a4:	4b16      	ldr	r3, [pc, #88]	; (8004a00 <main+0x76c>)
 80049a6:	791a      	ldrb	r2, [r3, #4]
 80049a8:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <main+0x76c>)
 80049aa:	795b      	ldrb	r3, [r3, #5]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d000      	beq.n	80049b2 <main+0x71e>
 80049b0:	e506      	b.n	80043c0 <main+0x12c>
 80049b2:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <main+0x76c>)
 80049b4:	785a      	ldrb	r2, [r3, #1]
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <main+0x76c>)
 80049b8:	789b      	ldrb	r3, [r3, #2]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d000      	beq.n	80049c0 <main+0x72c>
 80049be:	e4ff      	b.n	80043c0 <main+0x12c>
				&& !dontSleep && triesToSend < 1) {
 80049c0:	4b21      	ldr	r3, [pc, #132]	; (8004a48 <main+0x7b4>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2201      	movs	r2, #1
 80049c6:	4053      	eors	r3, r2
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d100      	bne.n	80049d0 <main+0x73c>
 80049ce:	e4f7      	b.n	80043c0 <main+0x12c>
 80049d0:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <main+0x7a4>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d000      	beq.n	80049da <main+0x746>
 80049d8:	e4f2      	b.n	80043c0 <main+0x12c>
			debugLogTime("Sleep...");
 80049da:	4b1c      	ldr	r3, [pc, #112]	; (8004a4c <main+0x7b8>)
 80049dc:	0018      	movs	r0, r3
 80049de:	f7fe fd8d 	bl	80034fc <debugLogTime>
			sleep();
 80049e2:	f7ff f873 	bl	8003acc <sleep>
		HAL_WWDG_Refresh(&hwwdg);
 80049e6:	e4eb      	b.n	80043c0 <main+0x12c>
 80049e8:	20000220 	.word	0x20000220
 80049ec:	20000234 	.word	0x20000234
 80049f0:	20000278 	.word	0x20000278
 80049f4:	0800e670 	.word	0x0800e670
 80049f8:	0800e680 	.word	0x0800e680
 80049fc:	20000018 	.word	0x20000018
 8004a00:	2000022c 	.word	0x2000022c
 8004a04:	0800e530 	.word	0x0800e530
 8004a08:	0800e534 	.word	0x0800e534
 8004a0c:	0800e68c 	.word	0x0800e68c
 8004a10:	20000014 	.word	0x20000014
 8004a14:	0800e6a4 	.word	0x0800e6a4
 8004a18:	0800e6e8 	.word	0x0800e6e8
 8004a1c:	0800e704 	.word	0x0800e704
 8004a20:	0800e720 	.word	0x0800e720
 8004a24:	20000258 	.word	0x20000258
 8004a28:	20000250 	.word	0x20000250
 8004a2c:	20000256 	.word	0x20000256
 8004a30:	0800e73c 	.word	0x0800e73c
 8004a34:	2000001c 	.word	0x2000001c
 8004a38:	20000254 	.word	0x20000254
 8004a3c:	0800e754 	.word	0x0800e754
 8004a40:	0800e760 	.word	0x0800e760
 8004a44:	0800e774 	.word	0x0800e774
 8004a48:	20000255 	.word	0x20000255
 8004a4c:	0800e784 	.word	0x0800e784

08004a50 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b09b      	sub	sp, #108	; 0x6c
 8004a54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004a56:	2434      	movs	r4, #52	; 0x34
 8004a58:	193b      	adds	r3, r7, r4
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	2334      	movs	r3, #52	; 0x34
 8004a5e:	001a      	movs	r2, r3
 8004a60:	2100      	movs	r1, #0
 8004a62:	f006 fc28 	bl	800b2b6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004a66:	2320      	movs	r3, #32
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	2314      	movs	r3, #20
 8004a6e:	001a      	movs	r2, r3
 8004a70:	2100      	movs	r1, #0
 8004a72:	f006 fc20 	bl	800b2b6 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	0018      	movs	r0, r3
 8004a7a:	231c      	movs	r3, #28
 8004a7c:	001a      	movs	r2, r3
 8004a7e:	2100      	movs	r1, #0
 8004a80:	f006 fc19 	bl	800b2b6 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a84:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <SystemClock_Config+0xfc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a31      	ldr	r2, [pc, #196]	; (8004b50 <SystemClock_Config+0x100>)
 8004a8a:	401a      	ands	r2, r3
 8004a8c:	4b2f      	ldr	r3, [pc, #188]	; (8004b4c <SystemClock_Config+0xfc>)
 8004a8e:	2180      	movs	r1, #128	; 0x80
 8004a90:	0109      	lsls	r1, r1, #4
 8004a92:	430a      	orrs	r2, r1
 8004a94:	601a      	str	r2, [r3, #0]
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8004a96:	f003 fad7 	bl	8008048 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8004a9a:	4b2e      	ldr	r3, [pc, #184]	; (8004b54 <SystemClock_Config+0x104>)
 8004a9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a9e:	4b2d      	ldr	r3, [pc, #180]	; (8004b54 <SystemClock_Config+0x104>)
 8004aa0:	21c0      	movs	r1, #192	; 0xc0
 8004aa2:	0149      	lsls	r1, r1, #5
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	651a      	str	r2, [r3, #80]	; 0x50
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8004aa8:	193b      	adds	r3, r7, r4
 8004aaa:	2214      	movs	r2, #20
 8004aac:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004aae:	193b      	adds	r3, r7, r4
 8004ab0:	2280      	movs	r2, #128	; 0x80
 8004ab2:	0052      	lsls	r2, r2, #1
 8004ab4:	609a      	str	r2, [r3, #8]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004ab6:	0021      	movs	r1, r4
 8004ab8:	187b      	adds	r3, r7, r1
 8004aba:	2201      	movs	r2, #1
 8004abc:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8004abe:	187b      	adds	r3, r7, r1
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8004ac4:	187b      	adds	r3, r7, r1
 8004ac6:	22a0      	movs	r2, #160	; 0xa0
 8004ac8:	0212      	lsls	r2, r2, #8
 8004aca:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004acc:	187b      	adds	r3, r7, r1
 8004ace:	2200      	movs	r2, #0
 8004ad0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004ad2:	187b      	adds	r3, r7, r1
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f003 fb21 	bl	800811c <HAL_RCC_OscConfig>
 8004ada:	1e03      	subs	r3, r0, #0
 8004adc:	d001      	beq.n	8004ae2 <SystemClock_Config+0x92>
		Error_Handler();
 8004ade:	f000 fabf 	bl	8005060 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ae2:	2120      	movs	r1, #32
 8004ae4:	187b      	adds	r3, r7, r1
 8004ae6:	220f      	movs	r2, #15
 8004ae8:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8004aea:	187b      	adds	r3, r7, r1
 8004aec:	2200      	movs	r2, #0
 8004aee:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004af0:	187b      	adds	r3, r7, r1
 8004af2:	2200      	movs	r2, #0
 8004af4:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004af6:	187b      	adds	r3, r7, r1
 8004af8:	2200      	movs	r2, #0
 8004afa:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004afc:	187b      	adds	r3, r7, r1
 8004afe:	2200      	movs	r2, #0
 8004b00:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8004b02:	187b      	adds	r3, r7, r1
 8004b04:	2100      	movs	r1, #0
 8004b06:	0018      	movs	r0, r3
 8004b08:	f003 fe72 	bl	80087f0 <HAL_RCC_ClockConfig>
 8004b0c:	1e03      	subs	r3, r0, #0
 8004b0e:	d001      	beq.n	8004b14 <SystemClock_Config+0xc4>
		Error_Handler();
 8004b10:	f000 faa6 	bl	8005060 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_LPTIM1;
 8004b14:	1d3b      	adds	r3, r7, #4
 8004b16:	22a1      	movs	r2, #161	; 0xa1
 8004b18:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004b1a:	1d3b      	adds	r3, r7, #4
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	609a      	str	r2, [r3, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004b20:	1d3b      	adds	r3, r7, #4
 8004b22:	2280      	movs	r2, #128	; 0x80
 8004b24:	0252      	lsls	r2, r2, #9
 8004b26:	605a      	str	r2, [r3, #4]
	PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8004b28:	1d3b      	adds	r3, r7, #4
 8004b2a:	22c0      	movs	r2, #192	; 0xc0
 8004b2c:	0312      	lsls	r2, r2, #12
 8004b2e:	619a      	str	r2, [r3, #24]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8004b30:	1d3b      	adds	r3, r7, #4
 8004b32:	0018      	movs	r0, r3
 8004b34:	f004 f880 	bl	8008c38 <HAL_RCCEx_PeriphCLKConfig>
 8004b38:	1e03      	subs	r3, r0, #0
 8004b3a:	d001      	beq.n	8004b40 <SystemClock_Config+0xf0>
		Error_Handler();
 8004b3c:	f000 fa90 	bl	8005060 <Error_Handler>
	}
	/** Enables the Clock Security System
	 */
	HAL_RCCEx_EnableLSECSS();
 8004b40:	f004 f9b0 	bl	8008ea4 <HAL_RCCEx_EnableLSECSS>
}
 8004b44:	46c0      	nop			; (mov r8, r8)
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b01b      	add	sp, #108	; 0x6c
 8004b4a:	bd90      	pop	{r4, r7, pc}
 8004b4c:	40007000 	.word	0x40007000
 8004b50:	ffffe7ff 	.word	0xffffe7ff
 8004b54:	40021000 	.word	0x40021000

08004b58 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004b5e:	003b      	movs	r3, r7
 8004b60:	0018      	movs	r0, r3
 8004b62:	2308      	movs	r3, #8
 8004b64:	001a      	movs	r2, r3
 8004b66:	2100      	movs	r1, #0
 8004b68:	f006 fba5 	bl	800b2b6 <memset>
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8004b6c:	4b30      	ldr	r3, [pc, #192]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004b6e:	4a31      	ldr	r2, [pc, #196]	; (8004c34 <MX_ADC_Init+0xdc>)
 8004b70:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 8004b72:	4b2f      	ldr	r3, [pc, #188]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004b78:	4b2d      	ldr	r3, [pc, #180]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004b7a:	22c0      	movs	r2, #192	; 0xc0
 8004b7c:	0612      	lsls	r2, r2, #24
 8004b7e:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004b80:	4b2b      	ldr	r3, [pc, #172]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8004b86:	4b2a      	ldr	r3, [pc, #168]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004b88:	2207      	movs	r2, #7
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004b8c:	4b28      	ldr	r3, [pc, #160]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b92:	4b27      	ldr	r3, [pc, #156]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 8004b98:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8004ba0:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004ba2:	2221      	movs	r2, #33	; 0x21
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004ba8:	4b21      	ldr	r3, [pc, #132]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004bae:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004bb0:	22c2      	movs	r2, #194	; 0xc2
 8004bb2:	32ff      	adds	r2, #255	; 0xff
 8004bb4:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004bb8:	222c      	movs	r2, #44	; 0x2c
 8004bba:	2100      	movs	r1, #0
 8004bbc:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004bbe:	4b1c      	ldr	r3, [pc, #112]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004bc4:	4b1a      	ldr	r3, [pc, #104]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 8004bca:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = ENABLE;
 8004bd0:	4b17      	ldr	r3, [pc, #92]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004bd6:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8004bdc:	4b14      	ldr	r3, [pc, #80]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004bde:	0018      	movs	r0, r3
 8004be0:	f001 fc88 	bl	80064f4 <HAL_ADC_Init>
 8004be4:	1e03      	subs	r3, r0, #0
 8004be6:	d001      	beq.n	8004bec <MX_ADC_Init+0x94>
		Error_Handler();
 8004be8:	f000 fa3a 	bl	8005060 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8004bec:	003b      	movs	r3, r7
 8004bee:	4a12      	ldr	r2, [pc, #72]	; (8004c38 <MX_ADC_Init+0xe0>)
 8004bf0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004bf2:	003b      	movs	r3, r7
 8004bf4:	2280      	movs	r2, #128	; 0x80
 8004bf6:	0152      	lsls	r2, r2, #5
 8004bf8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004bfa:	003a      	movs	r2, r7
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004bfe:	0011      	movs	r1, r2
 8004c00:	0018      	movs	r0, r3
 8004c02:	f001 fe85 	bl	8006910 <HAL_ADC_ConfigChannel>
 8004c06:	1e03      	subs	r3, r0, #0
 8004c08:	d001      	beq.n	8004c0e <MX_ADC_Init+0xb6>
		Error_Handler();
 8004c0a:	f000 fa29 	bl	8005060 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004c0e:	003b      	movs	r3, r7
 8004c10:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <MX_ADC_Init+0xe4>)
 8004c12:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004c14:	003a      	movs	r2, r7
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <MX_ADC_Init+0xd8>)
 8004c18:	0011      	movs	r1, r2
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f001 fe78 	bl	8006910 <HAL_ADC_ConfigChannel>
 8004c20:	1e03      	subs	r3, r0, #0
 8004c22:	d001      	beq.n	8004c28 <MX_ADC_Init+0xd0>
		Error_Handler();
 8004c24:	f000 fa1c 	bl	8005060 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8004c28:	46c0      	nop			; (mov r8, r8)
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b002      	add	sp, #8
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	200004f4 	.word	0x200004f4
 8004c34:	40012400 	.word	0x40012400
 8004c38:	08000004 	.word	0x08000004
 8004c3c:	44020000 	.word	0x44020000

08004c40 <MX_LPTIM1_Init>:
/**
 * @brief LPTIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPTIM1_Init(void) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
	/* USER CODE END LPTIM1_Init 0 */

	/* USER CODE BEGIN LPTIM1_Init 1 */

	/* USER CODE END LPTIM1_Init 1 */
	hlptim1.Instance = LPTIM1;
 8004c44:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <MX_LPTIM1_Init+0x48>)
 8004c46:	4a11      	ldr	r2, [pc, #68]	; (8004c8c <MX_LPTIM1_Init+0x4c>)
 8004c48:	601a      	str	r2, [r3, #0]
	hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8004c4a:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <MX_LPTIM1_Init+0x48>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	605a      	str	r2, [r3, #4]
	hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8004c50:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <MX_LPTIM1_Init+0x48>)
 8004c52:	22e0      	movs	r2, #224	; 0xe0
 8004c54:	0112      	lsls	r2, r2, #4
 8004c56:	609a      	str	r2, [r3, #8]
	hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <MX_LPTIM1_Init+0x48>)
 8004c5a:	4a0d      	ldr	r2, [pc, #52]	; (8004c90 <MX_LPTIM1_Init+0x50>)
 8004c5c:	615a      	str	r2, [r3, #20]
	hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <MX_LPTIM1_Init+0x48>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	621a      	str	r2, [r3, #32]
	hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8004c64:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <MX_LPTIM1_Init+0x48>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	625a      	str	r2, [r3, #36]	; 0x24
	hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8004c6a:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <MX_LPTIM1_Init+0x48>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_LPTIM_Init(&hlptim1) != HAL_OK) {
 8004c70:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <MX_LPTIM1_Init+0x48>)
 8004c72:	0018      	movs	r0, r3
 8004c74:	f002 ff14 	bl	8007aa0 <HAL_LPTIM_Init>
 8004c78:	1e03      	subs	r3, r0, #0
 8004c7a:	d001      	beq.n	8004c80 <MX_LPTIM1_Init+0x40>
		Error_Handler();
 8004c7c:	f000 f9f0 	bl	8005060 <Error_Handler>
	}
	/* USER CODE BEGIN LPTIM1_Init 2 */

	/* USER CODE END LPTIM1_Init 2 */

}
 8004c80:	46c0      	nop			; (mov r8, r8)
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	200003cc 	.word	0x200003cc
 8004c8c:	40007c00 	.word	0x40007c00
 8004c90:	0000ffff 	.word	0x0000ffff

08004c94 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8004c98:	4b16      	ldr	r3, [pc, #88]	; (8004cf4 <MX_RTC_Init+0x60>)
 8004c9a:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <MX_RTC_Init+0x64>)
 8004c9c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004c9e:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <MX_RTC_Init+0x60>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8004ca4:	4b13      	ldr	r3, [pc, #76]	; (8004cf4 <MX_RTC_Init+0x60>)
 8004ca6:	227f      	movs	r2, #127	; 0x7f
 8004ca8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <MX_RTC_Init+0x60>)
 8004cac:	22ff      	movs	r2, #255	; 0xff
 8004cae:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004cb0:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <MX_RTC_Init+0x60>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004cb6:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <MX_RTC_Init+0x60>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <MX_RTC_Init+0x60>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <MX_RTC_Init+0x60>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <MX_RTC_Init+0x60>)
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f004 f8f8 	bl	8008ec0 <HAL_RTC_Init>
 8004cd0:	1e03      	subs	r3, r0, #0
 8004cd2:	d001      	beq.n	8004cd8 <MX_RTC_Init+0x44>
		Error_Handler();
 8004cd4:	f000 f9c4 	bl	8005060 <Error_Handler>
	}
	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK) {
 8004cd8:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <MX_RTC_Init+0x60>)
 8004cda:	2204      	movs	r2, #4
 8004cdc:	213c      	movs	r1, #60	; 0x3c
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f004 f9de 	bl	80090a0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004ce4:	1e03      	subs	r3, r0, #0
 8004ce6:	d001      	beq.n	8004cec <MX_RTC_Init+0x58>
		Error_Handler();
 8004ce8:	f000 f9ba 	bl	8005060 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8004cec:	46c0      	nop			; (mov r8, r8)
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	200003fc 	.word	0x200003fc
 8004cf8:	40002800 	.word	0x40002800

08004cfc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004d00:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <MX_SPI1_Init+0x68>)
 8004d02:	4a19      	ldr	r2, [pc, #100]	; (8004d68 <MX_SPI1_Init+0x6c>)
 8004d04:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8004d06:	4b17      	ldr	r3, [pc, #92]	; (8004d64 <MX_SPI1_Init+0x68>)
 8004d08:	2282      	movs	r2, #130	; 0x82
 8004d0a:	0052      	lsls	r2, r2, #1
 8004d0c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004d0e:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <MX_SPI1_Init+0x68>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <MX_SPI1_Init+0x68>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <MX_SPI1_Init+0x68>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d20:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <MX_SPI1_Init+0x68>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8004d26:	4b0f      	ldr	r3, [pc, #60]	; (8004d64 <MX_SPI1_Init+0x68>)
 8004d28:	2280      	movs	r2, #128	; 0x80
 8004d2a:	0092      	lsls	r2, r2, #2
 8004d2c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <MX_SPI1_Init+0x68>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <MX_SPI1_Init+0x68>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d3a:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <MX_SPI1_Init+0x68>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d40:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <MX_SPI1_Init+0x68>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8004d46:	4b07      	ldr	r3, [pc, #28]	; (8004d64 <MX_SPI1_Init+0x68>)
 8004d48:	2207      	movs	r2, #7
 8004d4a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <MX_SPI1_Init+0x68>)
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f004 fa96 	bl	8009280 <HAL_SPI_Init>
 8004d54:	1e03      	subs	r3, r0, #0
 8004d56:	d001      	beq.n	8004d5c <MX_SPI1_Init+0x60>
		Error_Handler();
 8004d58:	f000 f982 	bl	8005060 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8004d5c:	46c0      	nop			; (mov r8, r8)
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	20000434 	.word	0x20000434
 8004d68:	40013000 	.word	0x40013000

08004d6c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8004d70:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <MX_USART1_UART_Init+0x58>)
 8004d72:	4a15      	ldr	r2, [pc, #84]	; (8004dc8 <MX_USART1_UART_Init+0x5c>)
 8004d74:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <MX_USART1_UART_Init+0x58>)
 8004d78:	2296      	movs	r2, #150	; 0x96
 8004d7a:	0192      	lsls	r2, r2, #6
 8004d7c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d7e:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <MX_USART1_UART_Init+0x58>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004d84:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <MX_USART1_UART_Init+0x58>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004d8a:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <MX_USART1_UART_Init+0x58>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004d90:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <MX_USART1_UART_Init+0x58>)
 8004d92:	220c      	movs	r2, #12
 8004d94:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <MX_USART1_UART_Init+0x58>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <MX_USART1_UART_Init+0x58>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004da2:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <MX_USART1_UART_Init+0x58>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004da8:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <MX_USART1_UART_Init+0x58>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <MX_USART1_UART_Init+0x58>)
 8004db0:	0018      	movs	r0, r3
 8004db2:	f004 feeb 	bl	8009b8c <HAL_UART_Init>
 8004db6:	1e03      	subs	r3, r0, #0
 8004db8:	d001      	beq.n	8004dbe <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8004dba:	f000 f951 	bl	8005060 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	20000348 	.word	0x20000348
 8004dc8:	40013800 	.word	0x40013800

08004dcc <MX_WWDG_Init>:
/**
 * @brief WWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_WWDG_Init(void) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
	/* USER CODE END WWDG_Init 0 */

	/* USER CODE BEGIN WWDG_Init 1 */

	/* USER CODE END WWDG_Init 1 */
	hwwdg.Instance = WWDG;
 8004dd0:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <MX_WWDG_Init+0x3c>)
 8004dd2:	4a0e      	ldr	r2, [pc, #56]	; (8004e0c <MX_WWDG_Init+0x40>)
 8004dd4:	601a      	str	r2, [r3, #0]
	hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <MX_WWDG_Init+0x3c>)
 8004dd8:	22c0      	movs	r2, #192	; 0xc0
 8004dda:	0052      	lsls	r2, r2, #1
 8004ddc:	605a      	str	r2, [r3, #4]
	hwwdg.Init.Window = 127;
 8004dde:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <MX_WWDG_Init+0x3c>)
 8004de0:	227f      	movs	r2, #127	; 0x7f
 8004de2:	609a      	str	r2, [r3, #8]
	hwwdg.Init.Counter = 127;
 8004de4:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <MX_WWDG_Init+0x3c>)
 8004de6:	227f      	movs	r2, #127	; 0x7f
 8004de8:	60da      	str	r2, [r3, #12]
	hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <MX_WWDG_Init+0x3c>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	611a      	str	r2, [r3, #16]
	if (HAL_WWDG_Init(&hwwdg) != HAL_OK) {
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <MX_WWDG_Init+0x3c>)
 8004df2:	0018      	movs	r0, r3
 8004df4:	f006 f9f9 	bl	800b1ea <HAL_WWDG_Init>
 8004df8:	1e03      	subs	r3, r0, #0
 8004dfa:	d001      	beq.n	8004e00 <MX_WWDG_Init+0x34>
		Error_Handler();
 8004dfc:	f000 f930 	bl	8005060 <Error_Handler>
	}
	/* USER CODE BEGIN WWDG_Init 2 */

	/* USER CODE END WWDG_Init 2 */

}
 8004e00:	46c0      	nop			; (mov r8, r8)
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	20000420 	.word	0x20000420
 8004e0c:	40002c00 	.word	0x40002c00

08004e10 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004e16:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <MX_DMA_Init+0x48>)
 8004e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <MX_DMA_Init+0x48>)
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	631a      	str	r2, [r3, #48]	; 0x30
 8004e22:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <MX_DMA_Init+0x48>)
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	2201      	movs	r2, #1
 8004e28:	4013      	ands	r3, r2
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2100      	movs	r1, #0
 8004e32:	2009      	movs	r0, #9
 8004e34:	f002 f848 	bl	8006ec8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004e38:	2009      	movs	r0, #9
 8004e3a:	f002 f85a 	bl	8006ef2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004e3e:	2200      	movs	r2, #0
 8004e40:	2100      	movs	r1, #0
 8004e42:	200a      	movs	r0, #10
 8004e44:	f002 f840 	bl	8006ec8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004e48:	200a      	movs	r0, #10
 8004e4a:	f002 f852 	bl	8006ef2 <HAL_NVIC_EnableIRQ>

}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	46bd      	mov	sp, r7
 8004e52:	b002      	add	sp, #8
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	40021000 	.word	0x40021000

08004e5c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b08b      	sub	sp, #44	; 0x2c
 8004e60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004e62:	2414      	movs	r4, #20
 8004e64:	193b      	adds	r3, r7, r4
 8004e66:	0018      	movs	r0, r3
 8004e68:	2314      	movs	r3, #20
 8004e6a:	001a      	movs	r2, r3
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	f006 fa22 	bl	800b2b6 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004e72:	4b76      	ldr	r3, [pc, #472]	; (800504c <MX_GPIO_Init+0x1f0>)
 8004e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e76:	4b75      	ldr	r3, [pc, #468]	; (800504c <MX_GPIO_Init+0x1f0>)
 8004e78:	2104      	movs	r1, #4
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e7e:	4b73      	ldr	r3, [pc, #460]	; (800504c <MX_GPIO_Init+0x1f0>)
 8004e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e82:	2204      	movs	r2, #4
 8004e84:	4013      	ands	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004e8a:	4b70      	ldr	r3, [pc, #448]	; (800504c <MX_GPIO_Init+0x1f0>)
 8004e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8e:	4b6f      	ldr	r3, [pc, #444]	; (800504c <MX_GPIO_Init+0x1f0>)
 8004e90:	2180      	movs	r1, #128	; 0x80
 8004e92:	430a      	orrs	r2, r1
 8004e94:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e96:	4b6d      	ldr	r3, [pc, #436]	; (800504c <MX_GPIO_Init+0x1f0>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	2280      	movs	r2, #128	; 0x80
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004ea2:	4b6a      	ldr	r3, [pc, #424]	; (800504c <MX_GPIO_Init+0x1f0>)
 8004ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea6:	4b69      	ldr	r3, [pc, #420]	; (800504c <MX_GPIO_Init+0x1f0>)
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	62da      	str	r2, [r3, #44]	; 0x2c
 8004eae:	4b67      	ldr	r3, [pc, #412]	; (800504c <MX_GPIO_Init+0x1f0>)
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004eba:	4b64      	ldr	r3, [pc, #400]	; (800504c <MX_GPIO_Init+0x1f0>)
 8004ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebe:	4b63      	ldr	r3, [pc, #396]	; (800504c <MX_GPIO_Init+0x1f0>)
 8004ec0:	2102      	movs	r1, #2
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ec6:	4b61      	ldr	r3, [pc, #388]	; (800504c <MX_GPIO_Init+0x1f0>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	2202      	movs	r2, #2
 8004ecc:	4013      	ands	r3, r2
 8004ece:	607b      	str	r3, [r7, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, TempPower_Pin | RESET_Pin | NSS_Pin, GPIO_PIN_RESET);
 8004ed2:	23a0      	movs	r3, #160	; 0xa0
 8004ed4:	05db      	lsls	r3, r3, #23
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	211a      	movs	r1, #26
 8004eda:	0018      	movs	r0, r3
 8004edc:	f002 fd9d 	bl	8007a1a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, BLUE_Pin | ORANGE_Pin, GPIO_PIN_RESET);
 8004ee0:	23c0      	movs	r3, #192	; 0xc0
 8004ee2:	019b      	lsls	r3, r3, #6
 8004ee4:	485a      	ldr	r0, [pc, #360]	; (8005050 <MX_GPIO_Init+0x1f4>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	0019      	movs	r1, r3
 8004eea:	f002 fd96 	bl	8007a1a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004eee:	193b      	adds	r3, r7, r4
 8004ef0:	2280      	movs	r2, #128	; 0x80
 8004ef2:	0192      	lsls	r2, r2, #6
 8004ef4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ef6:	193b      	adds	r3, r7, r4
 8004ef8:	2203      	movs	r2, #3
 8004efa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efc:	193b      	adds	r3, r7, r4
 8004efe:	2200      	movs	r2, #0
 8004f00:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f02:	193b      	adds	r3, r7, r4
 8004f04:	4a53      	ldr	r2, [pc, #332]	; (8005054 <MX_GPIO_Init+0x1f8>)
 8004f06:	0019      	movs	r1, r3
 8004f08:	0010      	movs	r0, r2
 8004f0a:	f002 fbf3 	bl	80076f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PH0 PH1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004f0e:	193b      	adds	r3, r7, r4
 8004f10:	2203      	movs	r2, #3
 8004f12:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f14:	193b      	adds	r3, r7, r4
 8004f16:	2203      	movs	r2, #3
 8004f18:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1a:	193b      	adds	r3, r7, r4
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004f20:	193b      	adds	r3, r7, r4
 8004f22:	4a4d      	ldr	r2, [pc, #308]	; (8005058 <MX_GPIO_Init+0x1fc>)
 8004f24:	0019      	movs	r1, r3
 8004f26:	0010      	movs	r0, r2
 8004f28:	f002 fbe4 	bl	80076f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : D1_Pin extPower_Pin */
	GPIO_InitStruct.Pin = D1_Pin | extPower_Pin;
 8004f2c:	193b      	adds	r3, r7, r4
 8004f2e:	2202      	movs	r2, #2
 8004f30:	32ff      	adds	r2, #255	; 0xff
 8004f32:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004f34:	193b      	adds	r3, r7, r4
 8004f36:	22c4      	movs	r2, #196	; 0xc4
 8004f38:	0392      	lsls	r2, r2, #14
 8004f3a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f3c:	193b      	adds	r3, r7, r4
 8004f3e:	2202      	movs	r2, #2
 8004f40:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f42:	193a      	adds	r2, r7, r4
 8004f44:	23a0      	movs	r3, #160	; 0xa0
 8004f46:	05db      	lsls	r3, r3, #23
 8004f48:	0011      	movs	r1, r2
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f002 fbd2 	bl	80076f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : TempPower_Pin */
	GPIO_InitStruct.Pin = TempPower_Pin;
 8004f50:	193b      	adds	r3, r7, r4
 8004f52:	2202      	movs	r2, #2
 8004f54:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f56:	193b      	adds	r3, r7, r4
 8004f58:	2201      	movs	r2, #1
 8004f5a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5c:	193b      	adds	r3, r7, r4
 8004f5e:	2200      	movs	r2, #0
 8004f60:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f62:	193b      	adds	r3, r7, r4
 8004f64:	2200      	movs	r2, #0
 8004f66:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(TempPower_GPIO_Port, &GPIO_InitStruct);
 8004f68:	193a      	adds	r2, r7, r4
 8004f6a:	23a0      	movs	r3, #160	; 0xa0
 8004f6c:	05db      	lsls	r3, r3, #23
 8004f6e:	0011      	movs	r1, r2
 8004f70:	0018      	movs	r0, r3
 8004f72:	f002 fbbf 	bl	80076f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RESET_Pin NSS_Pin */
	GPIO_InitStruct.Pin = RESET_Pin | NSS_Pin;
 8004f76:	193b      	adds	r3, r7, r4
 8004f78:	2218      	movs	r2, #24
 8004f7a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f7c:	193b      	adds	r3, r7, r4
 8004f7e:	2201      	movs	r2, #1
 8004f80:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f82:	193b      	adds	r3, r7, r4
 8004f84:	2200      	movs	r2, #0
 8004f86:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f88:	193b      	adds	r3, r7, r4
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f8e:	193a      	adds	r2, r7, r4
 8004f90:	23a0      	movs	r3, #160	; 0xa0
 8004f92:	05db      	lsls	r3, r3, #23
 8004f94:	0011      	movs	r1, r2
 8004f96:	0018      	movs	r0, r3
 8004f98:	f002 fbac 	bl	80076f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB10
	 PB11 PB14 PB15 PB3
	 PB4 PB5 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_3 | GPIO_PIN_4
 8004f9c:	193b      	adds	r3, r7, r4
 8004f9e:	4a2f      	ldr	r2, [pc, #188]	; (800505c <MX_GPIO_Init+0x200>)
 8004fa0:	601a      	str	r2, [r3, #0]
			| GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fa2:	193b      	adds	r3, r7, r4
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa8:	193b      	adds	r3, r7, r4
 8004faa:	2200      	movs	r2, #0
 8004fac:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fae:	193b      	adds	r3, r7, r4
 8004fb0:	4a27      	ldr	r2, [pc, #156]	; (8005050 <MX_GPIO_Init+0x1f4>)
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	0010      	movs	r0, r2
 8004fb6:	f002 fb9d 	bl	80076f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BLUE_Pin ORANGE_Pin */
	GPIO_InitStruct.Pin = BLUE_Pin | ORANGE_Pin;
 8004fba:	0021      	movs	r1, r4
 8004fbc:	187b      	adds	r3, r7, r1
 8004fbe:	22c0      	movs	r2, #192	; 0xc0
 8004fc0:	0192      	lsls	r2, r2, #6
 8004fc2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fc4:	000c      	movs	r4, r1
 8004fc6:	193b      	adds	r3, r7, r4
 8004fc8:	2201      	movs	r2, #1
 8004fca:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fcc:	193b      	adds	r3, r7, r4
 8004fce:	2200      	movs	r2, #0
 8004fd0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd2:	193b      	adds	r3, r7, r4
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd8:	193b      	adds	r3, r7, r4
 8004fda:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <MX_GPIO_Init+0x1f4>)
 8004fdc:	0019      	movs	r1, r3
 8004fde:	0010      	movs	r0, r2
 8004fe0:	f002 fb88 	bl	80076f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA11 PA12 PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 8004fe4:	193b      	adds	r3, r7, r4
 8004fe6:	2298      	movs	r2, #152	; 0x98
 8004fe8:	0212      	lsls	r2, r2, #8
 8004fea:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fec:	193b      	adds	r3, r7, r4
 8004fee:	2203      	movs	r2, #3
 8004ff0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff2:	193b      	adds	r3, r7, r4
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff8:	193a      	adds	r2, r7, r4
 8004ffa:	23a0      	movs	r3, #160	; 0xa0
 8004ffc:	05db      	lsls	r3, r3, #23
 8004ffe:	0011      	movs	r1, r2
 8005000:	0018      	movs	r0, r3
 8005002:	f002 fb77 	bl	80076f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : USER1_Pin USER2_Pin */
	GPIO_InitStruct.Pin = USER1_Pin | USER2_Pin;
 8005006:	193b      	adds	r3, r7, r4
 8005008:	22c0      	movs	r2, #192	; 0xc0
 800500a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800500c:	193b      	adds	r3, r7, r4
 800500e:	2200      	movs	r2, #0
 8005010:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005012:	193b      	adds	r3, r7, r4
 8005014:	2201      	movs	r2, #1
 8005016:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005018:	193b      	adds	r3, r7, r4
 800501a:	4a0d      	ldr	r2, [pc, #52]	; (8005050 <MX_GPIO_Init+0x1f4>)
 800501c:	0019      	movs	r1, r3
 800501e:	0010      	movs	r0, r2
 8005020:	f002 fb68 	bl	80076f4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8005024:	2200      	movs	r2, #0
 8005026:	2101      	movs	r1, #1
 8005028:	2005      	movs	r0, #5
 800502a:	f001 ff4d 	bl	8006ec8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800502e:	2005      	movs	r0, #5
 8005030:	f001 ff5f 	bl	8006ef2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8005034:	2200      	movs	r2, #0
 8005036:	2101      	movs	r1, #1
 8005038:	2007      	movs	r0, #7
 800503a:	f001 ff45 	bl	8006ec8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800503e:	2007      	movs	r0, #7
 8005040:	f001 ff57 	bl	8006ef2 <HAL_NVIC_EnableIRQ>

}
 8005044:	46c0      	nop			; (mov r8, r8)
 8005046:	46bd      	mov	sp, r7
 8005048:	b00b      	add	sp, #44	; 0x2c
 800504a:	bd90      	pop	{r4, r7, pc}
 800504c:	40021000 	.word	0x40021000
 8005050:	50000400 	.word	0x50000400
 8005054:	50000800 	.word	0x50000800
 8005058:	50001c00 	.word	0x50001c00
 800505c:	0000cf3f 	.word	0x0000cf3f

08005060 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	debugLog("Error!");
 8005064:	4b03      	ldr	r3, [pc, #12]	; (8005074 <Error_Handler+0x14>)
 8005066:	0018      	movs	r0, r3
 8005068:	f7fe fa86 	bl	8003578 <debugLog>
	/* USER CODE END Error_Handler_Debug */
}
 800506c:	46c0      	nop			; (mov r8, r8)
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	0800e790 	.word	0x0800e790

08005078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800507c:	4b07      	ldr	r3, [pc, #28]	; (800509c <HAL_MspInit+0x24>)
 800507e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005080:	4b06      	ldr	r3, [pc, #24]	; (800509c <HAL_MspInit+0x24>)
 8005082:	2101      	movs	r1, #1
 8005084:	430a      	orrs	r2, r1
 8005086:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8005088:	4b04      	ldr	r3, [pc, #16]	; (800509c <HAL_MspInit+0x24>)
 800508a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800508c:	4b03      	ldr	r3, [pc, #12]	; (800509c <HAL_MspInit+0x24>)
 800508e:	2180      	movs	r1, #128	; 0x80
 8005090:	0549      	lsls	r1, r1, #21
 8005092:	430a      	orrs	r2, r1
 8005094:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40021000 	.word	0x40021000

080050a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80050a0:	b590      	push	{r4, r7, lr}
 80050a2:	b089      	sub	sp, #36	; 0x24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a8:	240c      	movs	r4, #12
 80050aa:	193b      	adds	r3, r7, r4
 80050ac:	0018      	movs	r0, r3
 80050ae:	2314      	movs	r3, #20
 80050b0:	001a      	movs	r2, r3
 80050b2:	2100      	movs	r1, #0
 80050b4:	f006 f8ff 	bl	800b2b6 <memset>
  if(hadc->Instance==ADC1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a2a      	ldr	r2, [pc, #168]	; (8005168 <HAL_ADC_MspInit+0xc8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d14d      	bne.n	800515e <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80050c2:	4b2a      	ldr	r3, [pc, #168]	; (800516c <HAL_ADC_MspInit+0xcc>)
 80050c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c6:	4b29      	ldr	r3, [pc, #164]	; (800516c <HAL_ADC_MspInit+0xcc>)
 80050c8:	2180      	movs	r1, #128	; 0x80
 80050ca:	0089      	lsls	r1, r1, #2
 80050cc:	430a      	orrs	r2, r1
 80050ce:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d0:	4b26      	ldr	r3, [pc, #152]	; (800516c <HAL_ADC_MspInit+0xcc>)
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	4b25      	ldr	r3, [pc, #148]	; (800516c <HAL_ADC_MspInit+0xcc>)
 80050d6:	2101      	movs	r1, #1
 80050d8:	430a      	orrs	r2, r1
 80050da:	62da      	str	r2, [r3, #44]	; 0x2c
 80050dc:	4b23      	ldr	r3, [pc, #140]	; (800516c <HAL_ADC_MspInit+0xcc>)
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	2201      	movs	r2, #1
 80050e2:	4013      	ands	r3, r2
 80050e4:	60bb      	str	r3, [r7, #8]
 80050e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = TempSensor_Pin;
 80050e8:	193b      	adds	r3, r7, r4
 80050ea:	2204      	movs	r2, #4
 80050ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ee:	193b      	adds	r3, r7, r4
 80050f0:	2203      	movs	r2, #3
 80050f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f4:	193b      	adds	r3, r7, r4
 80050f6:	2200      	movs	r2, #0
 80050f8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(TempSensor_GPIO_Port, &GPIO_InitStruct);
 80050fa:	193a      	adds	r2, r7, r4
 80050fc:	23a0      	movs	r3, #160	; 0xa0
 80050fe:	05db      	lsls	r3, r3, #23
 8005100:	0011      	movs	r1, r2
 8005102:	0018      	movs	r0, r3
 8005104:	f002 faf6 	bl	80076f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8005108:	4b19      	ldr	r3, [pc, #100]	; (8005170 <HAL_ADC_MspInit+0xd0>)
 800510a:	4a1a      	ldr	r2, [pc, #104]	; (8005174 <HAL_ADC_MspInit+0xd4>)
 800510c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800510e:	4b18      	ldr	r3, [pc, #96]	; (8005170 <HAL_ADC_MspInit+0xd0>)
 8005110:	2200      	movs	r2, #0
 8005112:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005114:	4b16      	ldr	r3, [pc, #88]	; (8005170 <HAL_ADC_MspInit+0xd0>)
 8005116:	2200      	movs	r2, #0
 8005118:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800511a:	4b15      	ldr	r3, [pc, #84]	; (8005170 <HAL_ADC_MspInit+0xd0>)
 800511c:	2200      	movs	r2, #0
 800511e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8005120:	4b13      	ldr	r3, [pc, #76]	; (8005170 <HAL_ADC_MspInit+0xd0>)
 8005122:	2280      	movs	r2, #128	; 0x80
 8005124:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005126:	4b12      	ldr	r3, [pc, #72]	; (8005170 <HAL_ADC_MspInit+0xd0>)
 8005128:	2280      	movs	r2, #128	; 0x80
 800512a:	0052      	lsls	r2, r2, #1
 800512c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800512e:	4b10      	ldr	r3, [pc, #64]	; (8005170 <HAL_ADC_MspInit+0xd0>)
 8005130:	2280      	movs	r2, #128	; 0x80
 8005132:	00d2      	lsls	r2, r2, #3
 8005134:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8005136:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <HAL_ADC_MspInit+0xd0>)
 8005138:	2200      	movs	r2, #0
 800513a:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800513c:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <HAL_ADC_MspInit+0xd0>)
 800513e:	2200      	movs	r2, #0
 8005140:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005142:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_ADC_MspInit+0xd0>)
 8005144:	0018      	movs	r0, r3
 8005146:	f001 fef1 	bl	8006f2c <HAL_DMA_Init>
 800514a:	1e03      	subs	r3, r0, #0
 800514c:	d001      	beq.n	8005152 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800514e:	f7ff ff87 	bl	8005060 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a06      	ldr	r2, [pc, #24]	; (8005170 <HAL_ADC_MspInit+0xd0>)
 8005156:	64da      	str	r2, [r3, #76]	; 0x4c
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_ADC_MspInit+0xd0>)
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	46bd      	mov	sp, r7
 8005162:	b009      	add	sp, #36	; 0x24
 8005164:	bd90      	pop	{r4, r7, pc}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	40012400 	.word	0x40012400
 800516c:	40021000 	.word	0x40021000
 8005170:	2000048c 	.word	0x2000048c
 8005174:	40020008 	.word	0x40020008

08005178 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a0a      	ldr	r2, [pc, #40]	; (80051b0 <HAL_LPTIM_MspInit+0x38>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d10e      	bne.n	80051a8 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800518a:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <HAL_LPTIM_MspInit+0x3c>)
 800518c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <HAL_LPTIM_MspInit+0x3c>)
 8005190:	2180      	movs	r1, #128	; 0x80
 8005192:	0609      	lsls	r1, r1, #24
 8005194:	430a      	orrs	r2, r1
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);
 8005198:	2200      	movs	r2, #0
 800519a:	2101      	movs	r1, #1
 800519c:	200d      	movs	r0, #13
 800519e:	f001 fe93 	bl	8006ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80051a2:	200d      	movs	r0, #13
 80051a4:	f001 fea5 	bl	8006ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80051a8:	46c0      	nop			; (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	b002      	add	sp, #8
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40007c00 	.word	0x40007c00
 80051b4:	40021000 	.word	0x40021000

080051b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a0a      	ldr	r2, [pc, #40]	; (80051f0 <HAL_RTC_MspInit+0x38>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d10e      	bne.n	80051e8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80051ca:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <HAL_RTC_MspInit+0x3c>)
 80051cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051ce:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_RTC_MspInit+0x3c>)
 80051d0:	2180      	movs	r1, #128	; 0x80
 80051d2:	02c9      	lsls	r1, r1, #11
 80051d4:	430a      	orrs	r2, r1
 80051d6:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80051d8:	2200      	movs	r2, #0
 80051da:	2100      	movs	r1, #0
 80051dc:	2002      	movs	r0, #2
 80051de:	f001 fe73 	bl	8006ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80051e2:	2002      	movs	r0, #2
 80051e4:	f001 fe85 	bl	8006ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b002      	add	sp, #8
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40002800 	.word	0x40002800
 80051f4:	40021000 	.word	0x40021000

080051f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b089      	sub	sp, #36	; 0x24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005200:	240c      	movs	r4, #12
 8005202:	193b      	adds	r3, r7, r4
 8005204:	0018      	movs	r0, r3
 8005206:	2314      	movs	r3, #20
 8005208:	001a      	movs	r2, r3
 800520a:	2100      	movs	r1, #0
 800520c:	f006 f853 	bl	800b2b6 <memset>
  if(hspi->Instance==SPI1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a18      	ldr	r2, [pc, #96]	; (8005278 <HAL_SPI_MspInit+0x80>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d129      	bne.n	800526e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800521a:	4b18      	ldr	r3, [pc, #96]	; (800527c <HAL_SPI_MspInit+0x84>)
 800521c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800521e:	4b17      	ldr	r3, [pc, #92]	; (800527c <HAL_SPI_MspInit+0x84>)
 8005220:	2180      	movs	r1, #128	; 0x80
 8005222:	0149      	lsls	r1, r1, #5
 8005224:	430a      	orrs	r2, r1
 8005226:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005228:	4b14      	ldr	r3, [pc, #80]	; (800527c <HAL_SPI_MspInit+0x84>)
 800522a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522c:	4b13      	ldr	r3, [pc, #76]	; (800527c <HAL_SPI_MspInit+0x84>)
 800522e:	2101      	movs	r1, #1
 8005230:	430a      	orrs	r2, r1
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c
 8005234:	4b11      	ldr	r3, [pc, #68]	; (800527c <HAL_SPI_MspInit+0x84>)
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	2201      	movs	r2, #1
 800523a:	4013      	ands	r3, r2
 800523c:	60bb      	str	r3, [r7, #8]
 800523e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005240:	0021      	movs	r1, r4
 8005242:	187b      	adds	r3, r7, r1
 8005244:	22e0      	movs	r2, #224	; 0xe0
 8005246:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005248:	187b      	adds	r3, r7, r1
 800524a:	2202      	movs	r2, #2
 800524c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524e:	187b      	adds	r3, r7, r1
 8005250:	2200      	movs	r2, #0
 8005252:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005254:	187b      	adds	r3, r7, r1
 8005256:	2203      	movs	r2, #3
 8005258:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800525a:	187b      	adds	r3, r7, r1
 800525c:	2200      	movs	r2, #0
 800525e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005260:	187a      	adds	r2, r7, r1
 8005262:	23a0      	movs	r3, #160	; 0xa0
 8005264:	05db      	lsls	r3, r3, #23
 8005266:	0011      	movs	r1, r2
 8005268:	0018      	movs	r0, r3
 800526a:	f002 fa43 	bl	80076f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	46bd      	mov	sp, r7
 8005272:	b009      	add	sp, #36	; 0x24
 8005274:	bd90      	pop	{r4, r7, pc}
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	40013000 	.word	0x40013000
 800527c:	40021000 	.word	0x40021000

08005280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b089      	sub	sp, #36	; 0x24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005288:	240c      	movs	r4, #12
 800528a:	193b      	adds	r3, r7, r4
 800528c:	0018      	movs	r0, r3
 800528e:	2314      	movs	r3, #20
 8005290:	001a      	movs	r2, r3
 8005292:	2100      	movs	r1, #0
 8005294:	f006 f80f 	bl	800b2b6 <memset>
  if(huart->Instance==USART1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a31      	ldr	r2, [pc, #196]	; (8005364 <HAL_UART_MspInit+0xe4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d15b      	bne.n	800535a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80052a2:	4b31      	ldr	r3, [pc, #196]	; (8005368 <HAL_UART_MspInit+0xe8>)
 80052a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052a6:	4b30      	ldr	r3, [pc, #192]	; (8005368 <HAL_UART_MspInit+0xe8>)
 80052a8:	2180      	movs	r1, #128	; 0x80
 80052aa:	01c9      	lsls	r1, r1, #7
 80052ac:	430a      	orrs	r2, r1
 80052ae:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052b0:	4b2d      	ldr	r3, [pc, #180]	; (8005368 <HAL_UART_MspInit+0xe8>)
 80052b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b4:	4b2c      	ldr	r3, [pc, #176]	; (8005368 <HAL_UART_MspInit+0xe8>)
 80052b6:	2101      	movs	r1, #1
 80052b8:	430a      	orrs	r2, r1
 80052ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80052bc:	4b2a      	ldr	r3, [pc, #168]	; (8005368 <HAL_UART_MspInit+0xe8>)
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	2201      	movs	r2, #1
 80052c2:	4013      	ands	r3, r2
 80052c4:	60bb      	str	r3, [r7, #8]
 80052c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80052c8:	193b      	adds	r3, r7, r4
 80052ca:	22c0      	movs	r2, #192	; 0xc0
 80052cc:	00d2      	lsls	r2, r2, #3
 80052ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d0:	0021      	movs	r1, r4
 80052d2:	187b      	adds	r3, r7, r1
 80052d4:	2202      	movs	r2, #2
 80052d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d8:	187b      	adds	r3, r7, r1
 80052da:	2200      	movs	r2, #0
 80052dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052de:	187b      	adds	r3, r7, r1
 80052e0:	2203      	movs	r2, #3
 80052e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80052e4:	187b      	adds	r3, r7, r1
 80052e6:	2204      	movs	r2, #4
 80052e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ea:	187a      	adds	r2, r7, r1
 80052ec:	23a0      	movs	r3, #160	; 0xa0
 80052ee:	05db      	lsls	r3, r3, #23
 80052f0:	0011      	movs	r1, r2
 80052f2:	0018      	movs	r0, r3
 80052f4:	f002 f9fe 	bl	80076f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80052f8:	4b1c      	ldr	r3, [pc, #112]	; (800536c <HAL_UART_MspInit+0xec>)
 80052fa:	4a1d      	ldr	r2, [pc, #116]	; (8005370 <HAL_UART_MspInit+0xf0>)
 80052fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 80052fe:	4b1b      	ldr	r3, [pc, #108]	; (800536c <HAL_UART_MspInit+0xec>)
 8005300:	2203      	movs	r2, #3
 8005302:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005304:	4b19      	ldr	r3, [pc, #100]	; (800536c <HAL_UART_MspInit+0xec>)
 8005306:	2200      	movs	r2, #0
 8005308:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800530a:	4b18      	ldr	r3, [pc, #96]	; (800536c <HAL_UART_MspInit+0xec>)
 800530c:	2200      	movs	r2, #0
 800530e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005310:	4b16      	ldr	r3, [pc, #88]	; (800536c <HAL_UART_MspInit+0xec>)
 8005312:	2280      	movs	r2, #128	; 0x80
 8005314:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005316:	4b15      	ldr	r3, [pc, #84]	; (800536c <HAL_UART_MspInit+0xec>)
 8005318:	2200      	movs	r2, #0
 800531a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800531c:	4b13      	ldr	r3, [pc, #76]	; (800536c <HAL_UART_MspInit+0xec>)
 800531e:	2200      	movs	r2, #0
 8005320:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005322:	4b12      	ldr	r3, [pc, #72]	; (800536c <HAL_UART_MspInit+0xec>)
 8005324:	2220      	movs	r2, #32
 8005326:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005328:	4b10      	ldr	r3, [pc, #64]	; (800536c <HAL_UART_MspInit+0xec>)
 800532a:	2200      	movs	r2, #0
 800532c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800532e:	4b0f      	ldr	r3, [pc, #60]	; (800536c <HAL_UART_MspInit+0xec>)
 8005330:	0018      	movs	r0, r3
 8005332:	f001 fdfb 	bl	8006f2c <HAL_DMA_Init>
 8005336:	1e03      	subs	r3, r0, #0
 8005338:	d001      	beq.n	800533e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 800533a:	f7ff fe91 	bl	8005060 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a0a      	ldr	r2, [pc, #40]	; (800536c <HAL_UART_MspInit+0xec>)
 8005342:	671a      	str	r2, [r3, #112]	; 0x70
 8005344:	4b09      	ldr	r3, [pc, #36]	; (800536c <HAL_UART_MspInit+0xec>)
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800534a:	2200      	movs	r2, #0
 800534c:	2101      	movs	r1, #1
 800534e:	201b      	movs	r0, #27
 8005350:	f001 fdba 	bl	8006ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005354:	201b      	movs	r0, #27
 8005356:	f001 fdcc 	bl	8006ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	46bd      	mov	sp, r7
 800535e:	b009      	add	sp, #36	; 0x24
 8005360:	bd90      	pop	{r4, r7, pc}
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	40013800 	.word	0x40013800
 8005368:	40021000 	.word	0x40021000
 800536c:	20000300 	.word	0x20000300
 8005370:	40020030 	.word	0x40020030

08005374 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a06      	ldr	r2, [pc, #24]	; (800539c <HAL_WWDG_MspInit+0x28>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d106      	bne.n	8005394 <HAL_WWDG_MspInit+0x20>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <HAL_WWDG_MspInit+0x2c>)
 8005388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <HAL_WWDG_MspInit+0x2c>)
 800538c:	2180      	movs	r1, #128	; 0x80
 800538e:	0109      	lsls	r1, r1, #4
 8005390:	430a      	orrs	r2, r1
 8005392:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8005394:	46c0      	nop			; (mov r8, r8)
 8005396:	46bd      	mov	sp, r7
 8005398:	b002      	add	sp, #8
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40002c00 	.word	0x40002c00
 80053a0:	40021000 	.word	0x40021000

080053a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80053a8:	e7fe      	b.n	80053a8 <NMI_Handler+0x4>

080053aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053ae:	e7fe      	b.n	80053ae <HardFault_Handler+0x4>

080053b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80053b4:	46c0      	nop			; (mov r8, r8)
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053c8:	f001 f846 	bl	8006458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053cc:	46c0      	nop			; (mov r8, r8)
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80053d8:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <RTC_IRQHandler+0x14>)
 80053da:	0018      	movs	r0, r3
 80053dc:	f003 ff26 	bl	800922c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80053e0:	46c0      	nop			; (mov r8, r8)
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	200003fc 	.word	0x200003fc

080053ec <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D1_Pin);
 80053f0:	2001      	movs	r0, #1
 80053f2:	f002 fb2f 	bl	8007a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(extPower_Pin);
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	0018      	movs	r0, r3
 8005406:	f002 fb25 	bl	8007a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8005414:	4b03      	ldr	r3, [pc, #12]	; (8005424 <DMA1_Channel1_IRQHandler+0x14>)
 8005416:	0018      	movs	r0, r3
 8005418:	f001 feed 	bl	80071f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800541c:	46c0      	nop			; (mov r8, r8)
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	2000048c 	.word	0x2000048c

08005428 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800542c:	4b03      	ldr	r3, [pc, #12]	; (800543c <DMA1_Channel2_3_IRQHandler+0x14>)
 800542e:	0018      	movs	r0, r3
 8005430:	f001 fee1 	bl	80071f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005434:	46c0      	nop			; (mov r8, r8)
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	20000300 	.word	0x20000300

08005440 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8005444:	4b03      	ldr	r3, [pc, #12]	; (8005454 <LPTIM1_IRQHandler+0x14>)
 8005446:	0018      	movs	r0, r3
 8005448:	f002 fc2c 	bl	8007ca4 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800544c:	46c0      	nop			; (mov r8, r8)
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	200003cc 	.word	0x200003cc

08005458 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800545c:	4b03      	ldr	r3, [pc, #12]	; (800546c <USART1_IRQHandler+0x14>)
 800545e:	0018      	movs	r0, r3
 8005460:	f004 fcf8 	bl	8009e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005464:	46c0      	nop			; (mov r8, r8)
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	20000348 	.word	0x20000348

08005470 <SX127X_SetNSS>:
 */
#include "main.h"

#ifndef USE_LL
__weak void SX127X_SetNSS(SX127X_t *module, GPIO_PinState state)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	000a      	movs	r2, r1
 800547a:	1cfb      	adds	r3, r7, #3
 800547c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(module->nss.port, module->nss.pin, state);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005486:	b299      	uxth	r1, r3
 8005488:	1cfb      	adds	r3, r7, #3
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	001a      	movs	r2, r3
 800548e:	f002 fac4 	bl	8007a1a <HAL_GPIO_WritePin>
}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	46bd      	mov	sp, r7
 8005496:	b002      	add	sp, #8
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <SX127X_Reset>:

__weak void SX127X_Reset(SX127X_t *module)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
	SX127X_SetNSS(module, 1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2101      	movs	r1, #1
 80054a8:	0018      	movs	r0, r3
 80054aa:	f7ff ffe1 	bl	8005470 <SX127X_SetNSS>
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_RESET);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2200      	movs	r2, #0
 80054ba:	0019      	movs	r1, r3
 80054bc:	f002 faad 	bl	8007a1a <HAL_GPIO_WritePin>

	SX127X_delayMicro(1000);
 80054c0:	23fa      	movs	r3, #250	; 0xfa
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 fcbd 	bl	8005e44 <SX127X_delayMicro>

	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2201      	movs	r2, #1
 80054d6:	0019      	movs	r1, r3
 80054d8:	f002 fa9f 	bl	8007a1a <HAL_GPIO_WritePin>

	SX127X_delayMicro(6000);
 80054dc:	4b03      	ldr	r3, [pc, #12]	; (80054ec <SX127X_Reset+0x50>)
 80054de:	0018      	movs	r0, r3
 80054e0:	f000 fcb0 	bl	8005e44 <SX127X_delayMicro>
}
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b002      	add	sp, #8
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	00001770 	.word	0x00001770

080054f0 <SX127X_SPICommand>:

__weak void SX127X_SPICommand(SX127X_t *module, uint8_t cmd)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	000a      	movs	r2, r1
 80054fa:	1cfb      	adds	r3, r7, #3
 80054fc:	701a      	strb	r2, [r3, #0]
	SX127X_SetNSS(module, 0);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2100      	movs	r1, #0
 8005502:	0018      	movs	r0, r3
 8005504:	f7ff ffb4 	bl	8005470 <SX127X_SetNSS>
	HAL_SPI_Transmit(module->spi, &cmd, 1, 1000);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800550c:	23fa      	movs	r3, #250	; 0xfa
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	1cf9      	adds	r1, r7, #3
 8005512:	2201      	movs	r2, #1
 8005514:	f003 ff48 	bl	80093a8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->spi) != HAL_SPI_STATE_READY)
 8005518:	46c0      	nop			; (mov r8, r8)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800551e:	0018      	movs	r0, r3
 8005520:	f004 fa53 	bl	80099ca <HAL_SPI_GetState>
 8005524:	0003      	movs	r3, r0
 8005526:	2b01      	cmp	r3, #1
 8005528:	d1f7      	bne.n	800551a <SX127X_SPICommand+0x2a>
		;
}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	46c0      	nop			; (mov r8, r8)
 800552e:	46bd      	mov	sp, r7
 8005530:	b002      	add	sp, #8
 8005532:	bd80      	pop	{r7, pc}

08005534 <SX127X_SPIReadByte>:

__weak uint8_t SX127X_SPIReadByte(SX127X_t *module)
{
 8005534:	b5b0      	push	{r4, r5, r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af02      	add	r7, sp, #8
 800553a:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 800553c:	250f      	movs	r5, #15
 800553e:	197b      	adds	r3, r7, r5
 8005540:	2200      	movs	r2, #0
 8005542:	701a      	strb	r2, [r3, #0]
	uint8_t rxByte = 0x00;
 8005544:	240e      	movs	r4, #14
 8005546:	193b      	adds	r3, r7, r4
 8005548:	2200      	movs	r2, #0
 800554a:	701a      	strb	r2, [r3, #0]

	SX127X_SetNSS(module, 0);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2100      	movs	r1, #0
 8005550:	0018      	movs	r0, r3
 8005552:	f7ff ff8d 	bl	8005470 <SX127X_SetNSS>
	HAL_SPI_TransmitReceive(module->spi, &txByte, &rxByte, 1, 1000);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800555a:	193a      	adds	r2, r7, r4
 800555c:	1979      	adds	r1, r7, r5
 800555e:	23fa      	movs	r3, #250	; 0xfa
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	2301      	movs	r3, #1
 8005566:	f004 f875 	bl	8009654 <HAL_SPI_TransmitReceive>
	return rxByte;
 800556a:	193b      	adds	r3, r7, r4
 800556c:	781b      	ldrb	r3, [r3, #0]
}
 800556e:	0018      	movs	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	b004      	add	sp, #16
 8005574:	bdb0      	pop	{r4, r5, r7, pc}

08005576 <SX127X_SPIRead>:
//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX127X_SPIRead(SX127X_t *module, uint8_t addr)
{
 8005576:	b5b0      	push	{r4, r5, r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	000a      	movs	r2, r1
 8005580:	1cfb      	adds	r3, r7, #3
 8005582:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	SX127X_SPICommand(module, addr);
 8005584:	1cfb      	adds	r3, r7, #3
 8005586:	781a      	ldrb	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	0011      	movs	r1, r2
 800558c:	0018      	movs	r0, r3
 800558e:	f7ff ffaf 	bl	80054f0 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 8005592:	250f      	movs	r5, #15
 8005594:	197c      	adds	r4, r7, r5
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	0018      	movs	r0, r3
 800559a:	f7ff ffcb 	bl	8005534 <SX127X_SPIReadByte>
 800559e:	0003      	movs	r3, r0
 80055a0:	7023      	strb	r3, [r4, #0]
	SX127X_SetNSS(module, 1);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2101      	movs	r1, #1
 80055a6:	0018      	movs	r0, r3
 80055a8:	f7ff ff62 	bl	8005470 <SX127X_SetNSS>
	return tmp;
 80055ac:	197b      	adds	r3, r7, r5
 80055ae:	781b      	ldrb	r3, [r3, #0]
}
 80055b0:	0018      	movs	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b004      	add	sp, #16
 80055b6:	bdb0      	pop	{r4, r5, r7, pc}

080055b8 <SX127X_SPIWrite>:

void SX127X_SPIWrite(SX127X_t *module, uint8_t addr, uint8_t cmd)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	0008      	movs	r0, r1
 80055c2:	0011      	movs	r1, r2
 80055c4:	1cfb      	adds	r3, r7, #3
 80055c6:	1c02      	adds	r2, r0, #0
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	1cbb      	adds	r3, r7, #2
 80055cc:	1c0a      	adds	r2, r1, #0
 80055ce:	701a      	strb	r2, [r3, #0]
	SX127X_SetNSS(module, 0);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2100      	movs	r1, #0
 80055d4:	0018      	movs	r0, r3
 80055d6:	f7ff ff4b 	bl	8005470 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 80055da:	1cfb      	adds	r3, r7, #3
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2280      	movs	r2, #128	; 0x80
 80055e0:	4252      	negs	r2, r2
 80055e2:	4313      	orrs	r3, r2
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	0011      	movs	r1, r2
 80055ea:	0018      	movs	r0, r3
 80055ec:	f7ff ff80 	bl	80054f0 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 80055f0:	1cbb      	adds	r3, r7, #2
 80055f2:	781a      	ldrb	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	0011      	movs	r1, r2
 80055f8:	0018      	movs	r0, r3
 80055fa:	f7ff ff79 	bl	80054f0 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2101      	movs	r1, #1
 8005602:	0018      	movs	r0, r3
 8005604:	f7ff ff34 	bl	8005470 <SX127X_SetNSS>
}
 8005608:	46c0      	nop			; (mov r8, r8)
 800560a:	46bd      	mov	sp, r7
 800560c:	b002      	add	sp, #8
 800560e:	bd80      	pop	{r7, pc}

08005610 <SX127X_SPIBurstRead>:

void SX127X_SPIBurstRead(SX127X_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length)
{
 8005610:	b5b0      	push	{r4, r5, r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	0008      	movs	r0, r1
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	0019      	movs	r1, r3
 800561e:	240b      	movs	r4, #11
 8005620:	193b      	adds	r3, r7, r4
 8005622:	1c02      	adds	r2, r0, #0
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	200a      	movs	r0, #10
 8005628:	183b      	adds	r3, r7, r0
 800562a:	1c0a      	adds	r2, r1, #0
 800562c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	if (length <= 1)
 800562e:	183b      	adds	r3, r7, r0
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d92e      	bls.n	8005694 <SX127X_SPIBurstRead+0x84>
		return;
	else
	{
		SX127X_SetNSS(module, 0);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2100      	movs	r1, #0
 800563a:	0018      	movs	r0, r3
 800563c:	f7ff ff18 	bl	8005470 <SX127X_SetNSS>
		SX127X_SPICommand(module, addr);
 8005640:	193b      	adds	r3, r7, r4
 8005642:	781a      	ldrb	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	0011      	movs	r1, r2
 8005648:	0018      	movs	r0, r3
 800564a:	f7ff ff51 	bl	80054f0 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 800564e:	2317      	movs	r3, #23
 8005650:	18fb      	adds	r3, r7, r3
 8005652:	2200      	movs	r2, #0
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	e00f      	b.n	8005678 <SX127X_SPIBurstRead+0x68>
		{
			*(rxBuf + i) = SX127X_SPIReadByte(module);
 8005658:	2517      	movs	r5, #23
 800565a:	197b      	adds	r3, r7, r5
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	18d4      	adds	r4, r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	0018      	movs	r0, r3
 8005666:	f7ff ff65 	bl	8005534 <SX127X_SPIReadByte>
 800566a:	0003      	movs	r3, r0
 800566c:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++)
 800566e:	197b      	adds	r3, r7, r5
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	197b      	adds	r3, r7, r5
 8005674:	3201      	adds	r2, #1
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	2317      	movs	r3, #23
 800567a:	18fa      	adds	r2, r7, r3
 800567c:	230a      	movs	r3, #10
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	7812      	ldrb	r2, [r2, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d3e7      	bcc.n	8005658 <SX127X_SPIBurstRead+0x48>
		}
		SX127X_SetNSS(module, 1);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2101      	movs	r1, #1
 800568c:	0018      	movs	r0, r3
 800568e:	f7ff feef 	bl	8005470 <SX127X_SetNSS>
 8005692:	e000      	b.n	8005696 <SX127X_SPIBurstRead+0x86>
		return;
 8005694:	46c0      	nop			; (mov r8, r8)
	}
}
 8005696:	46bd      	mov	sp, r7
 8005698:	b006      	add	sp, #24
 800569a:	bdb0      	pop	{r4, r5, r7, pc}

0800569c <SX127X_SPIBurstWrite>:

void SX127X_SPIBurstWrite(SX127X_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length)
{
 800569c:	b590      	push	{r4, r7, lr}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	0008      	movs	r0, r1
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	0019      	movs	r1, r3
 80056aa:	240b      	movs	r4, #11
 80056ac:	193b      	adds	r3, r7, r4
 80056ae:	1c02      	adds	r2, r0, #0
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	200a      	movs	r0, #10
 80056b4:	183b      	adds	r3, r7, r0
 80056b6:	1c0a      	adds	r2, r1, #0
 80056b8:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	if (length <= 1)
 80056ba:	183b      	adds	r3, r7, r0
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d932      	bls.n	8005728 <SX127X_SPIBurstWrite+0x8c>
		return;
	else
	{
		SX127X_SetNSS(module, 0);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2100      	movs	r1, #0
 80056c6:	0018      	movs	r0, r3
 80056c8:	f7ff fed2 	bl	8005470 <SX127X_SetNSS>
		SX127X_SPICommand(module, addr | 0x80);
 80056cc:	193b      	adds	r3, r7, r4
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2280      	movs	r2, #128	; 0x80
 80056d2:	4252      	negs	r2, r2
 80056d4:	4313      	orrs	r3, r2
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	0011      	movs	r1, r2
 80056dc:	0018      	movs	r0, r3
 80056de:	f7ff ff07 	bl	80054f0 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 80056e2:	2317      	movs	r3, #23
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	2200      	movs	r2, #0
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	e00f      	b.n	800570c <SX127X_SPIBurstWrite+0x70>
		{
			SX127X_SPICommand(module, *(txBuf + i));
 80056ec:	2417      	movs	r4, #23
 80056ee:	193b      	adds	r3, r7, r4
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	18d3      	adds	r3, r2, r3
 80056f6:	781a      	ldrb	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	0011      	movs	r1, r2
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7ff fef7 	bl	80054f0 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 8005702:	193b      	adds	r3, r7, r4
 8005704:	781a      	ldrb	r2, [r3, #0]
 8005706:	193b      	adds	r3, r7, r4
 8005708:	3201      	adds	r2, #1
 800570a:	701a      	strb	r2, [r3, #0]
 800570c:	2317      	movs	r3, #23
 800570e:	18fa      	adds	r2, r7, r3
 8005710:	230a      	movs	r3, #10
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	7812      	ldrb	r2, [r2, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d3e7      	bcc.n	80056ec <SX127X_SPIBurstWrite+0x50>
		}
		SX127X_SetNSS(module, 1);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2101      	movs	r1, #1
 8005720:	0018      	movs	r0, r3
 8005722:	f7ff fea5 	bl	8005470 <SX127X_SetNSS>
 8005726:	e000      	b.n	800572a <SX127X_SPIBurstWrite+0x8e>
		return;
 8005728:	46c0      	nop			; (mov r8, r8)
	}
}
 800572a:	46bd      	mov	sp, r7
 800572c:	b007      	add	sp, #28
 800572e:	bd90      	pop	{r4, r7, pc}

08005730 <SX127X_config>:

void SX127X_config(SX127X_t *module)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	SX127X_sleep(module); //Change modem mode Must in Sleep mode
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	0018      	movs	r0, r3
 800573c:	f000 f948 	bl	80059d0 <SX127X_sleep>

	SX127X_SPIWrite(module, LR_RegFrMsb, (module->frequency >> 16) & 0xFF);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	0c1b      	lsrs	r3, r3, #16
 8005746:	b2da      	uxtb	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2106      	movs	r1, #6
 800574c:	0018      	movs	r0, r3
 800574e:	f7ff ff33 	bl	80055b8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegFrMid, (module->frequency >> 8) & 0xFF);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	0a1b      	lsrs	r3, r3, #8
 8005758:	b2da      	uxtb	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2107      	movs	r1, #7
 800575e:	0018      	movs	r0, r3
 8005760:	f7ff ff2a 	bl	80055b8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegFrLsb, (module->frequency) & 0xFF);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	b2da      	uxtb	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2108      	movs	r1, #8
 800576e:	0018      	movs	r0, r3
 8005770:	f7ff ff22 	bl	80055b8 <SX127X_SPIWrite>

	//setting base parameter
	SX127X_SPIWrite(module, LR_RegPaConfig, 0xF0 | (module->power - 5)); //Setting output power parameter
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	791b      	ldrb	r3, [r3, #4]
 8005778:	3b05      	subs	r3, #5
 800577a:	b2db      	uxtb	r3, r3
 800577c:	b25b      	sxtb	r3, r3
 800577e:	2210      	movs	r2, #16
 8005780:	4252      	negs	r2, r2
 8005782:	4313      	orrs	r3, r2
 8005784:	b25b      	sxtb	r3, r3
 8005786:	b2da      	uxtb	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2109      	movs	r1, #9
 800578c:	0018      	movs	r0, r3
 800578e:	f7ff ff13 	bl	80055b8 <SX127X_SPIWrite>

	SX127X_SPIWrite(module, LR_RegOcp, 0x32);	//OCP to 150 mA
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2232      	movs	r2, #50	; 0x32
 8005796:	210b      	movs	r1, #11
 8005798:	0018      	movs	r0, r3
 800579a:	f7ff ff0d 	bl	80055b8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegLna, 0x23);	//LNA to full gain
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2223      	movs	r2, #35	; 0x23
 80057a2:	210c      	movs	r1, #12
 80057a4:	0018      	movs	r0, r3
 80057a6:	f7ff ff07 	bl	80055b8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	799b      	ldrb	r3, [r3, #6]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	b2da      	uxtb	r2, r3
			(module->cr << 1)) +         //Coding rate
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	79db      	ldrb	r3, [r3, #7]
 80057b6:	18db      	adds	r3, r3, r3
 80057b8:	b2db      	uxtb	r3, r3
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 80057ba:	18d3      	adds	r3, r2, r3
 80057bc:	b2da      	uxtb	r2, r3
			(module->implicitHeader & 1)); //Implicit header flag
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	7a9b      	ldrb	r3, [r3, #10]
 80057c2:	2101      	movs	r1, #1
 80057c4:	400b      	ands	r3, r1
 80057c6:	b2db      	uxtb	r3, r3
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 80057c8:	18d3      	adds	r3, r2, r3
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	211d      	movs	r1, #29
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7ff fef1 	bl	80055b8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	795b      	ldrb	r3, [r3, #5]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	b2da      	uxtb	r2, r3
			(module->crcEnable << 2) +     //CRC enable flag
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	7a5b      	ldrb	r3, [r3, #9]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	b2db      	uxtb	r3, r3
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 80057e6:	18d3      	adds	r3, r2, r3
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	3303      	adds	r3, #3
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	211e      	movs	r1, #30
 80057f2:	0018      	movs	r0, r3
 80057f4:	f7ff fee0 	bl	80055b8 <SX127X_SPIWrite>
			0x3));                       //RX Time-Out MSB (always max)

	SX127X_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RX symb Timeout = 0x3FF(Max)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	22ff      	movs	r2, #255	; 0xff
 80057fc:	211f      	movs	r1, #31
 80057fe:	0018      	movs	r0, r3
 8005800:	f7ff feda 	bl	80055b8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPreambleMsb, (module->preamble >> 8) & 0xFF); //RegPreambleMsb
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	899b      	ldrh	r3, [r3, #12]
 8005808:	0a1b      	lsrs	r3, r3, #8
 800580a:	b29b      	uxth	r3, r3
 800580c:	b2da      	uxtb	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2120      	movs	r1, #32
 8005812:	0018      	movs	r0, r3
 8005814:	f7ff fed0 	bl	80055b8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPreambleLsb, module->preamble & 0xFF); //RegPreambleLsb
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	899b      	ldrh	r3, [r3, #12]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2121      	movs	r1, #33	; 0x21
 8005822:	0018      	movs	r0, r3
 8005824:	f7ff fec8 	bl	80055b8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //Payload lenght
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	7a1a      	ldrb	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2122      	movs	r1, #34	; 0x22
 8005830:	0018      	movs	r0, r3
 8005832:	f7ff fec1 	bl	80055b8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegSyncWord, module->syncWord);  //Sync word
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	7b9a      	ldrb	r2, [r3, #14]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2139      	movs	r1, #57	; 0x39
 800583e:	0018      	movs	r0, r3
 8005840:	f7ff feba 	bl	80055b8 <SX127X_SPIWrite>
	module->readBytes = 0;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	225d      	movs	r2, #93	; 0x5d
 8005848:	2100      	movs	r1, #0
 800584a:	5499      	strb	r1, [r3, r2]

	/*** Sensitivity correction for 500kHz BW (see Errata) ***/
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2142      	movs	r1, #66	; 0x42
 8005850:	0018      	movs	r0, r3
 8005852:	f7ff fe90 	bl	8005576 <SX127X_SPIRead>
 8005856:	0003      	movs	r3, r0
 8005858:	0019      	movs	r1, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2278      	movs	r2, #120	; 0x78
 800585e:	5499      	strb	r1, [r3, r2]
	if (module->bw == SX127X_LORA_BW_500KHZ && module->revision == 0x12)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	799b      	ldrb	r3, [r3, #6]
 8005864:	2b09      	cmp	r3, #9
 8005866:	d130      	bne.n	80058ca <SX127X_config+0x19a>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2278      	movs	r2, #120	; 0x78
 800586c:	5c9b      	ldrb	r3, [r3, r2]
 800586e:	2b12      	cmp	r3, #18
 8005870:	d12b      	bne.n	80058ca <SX127X_config+0x19a>
	{
		if (module->frequency > SX127X_FREQ_820MHZ
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a19      	ldr	r2, [pc, #100]	; (80058dc <SX127X_config+0x1ac>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d910      	bls.n	800589e <SX127X_config+0x16e>
				&& module->frequency < SX127X_FREQ_1020MHZ)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a17      	ldr	r2, [pc, #92]	; (80058e0 <SX127X_config+0x1b0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d80b      	bhi.n	800589e <SX127X_config+0x16e>
		{
			SX127X_SPIWrite(module, 0x36, 0x2);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2202      	movs	r2, #2
 800588a:	2136      	movs	r1, #54	; 0x36
 800588c:	0018      	movs	r0, r3
 800588e:	f7ff fe93 	bl	80055b8 <SX127X_SPIWrite>
			SX127X_SPIWrite(module, 0x3A, 0x64);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2264      	movs	r2, #100	; 0x64
 8005896:	213a      	movs	r1, #58	; 0x3a
 8005898:	0018      	movs	r0, r3
 800589a:	f7ff fe8d 	bl	80055b8 <SX127X_SPIWrite>

		}
		if (module->frequency > SX127X_FREQ_410MHZ
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a10      	ldr	r2, [pc, #64]	; (80058e4 <SX127X_config+0x1b4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d910      	bls.n	80058ca <SX127X_config+0x19a>
				&& module->frequency < SX127X_FREQ_525MHZ)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a0e      	ldr	r2, [pc, #56]	; (80058e8 <SX127X_config+0x1b8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d80b      	bhi.n	80058ca <SX127X_config+0x19a>
		{
			SX127X_SPIWrite(module, 0x36, 0x3);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2203      	movs	r2, #3
 80058b6:	2136      	movs	r1, #54	; 0x36
 80058b8:	0018      	movs	r0, r3
 80058ba:	f7ff fe7d 	bl	80055b8 <SX127X_SPIWrite>
			SX127X_SPIWrite(module, 0x3A, 0x7F);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	227f      	movs	r2, #127	; 0x7f
 80058c2:	213a      	movs	r1, #58	; 0x3a
 80058c4:	0018      	movs	r0, r3
 80058c6:	f7ff fe77 	bl	80055b8 <SX127X_SPIWrite>

		}

	}
	SX127X_standby(module); //Entry standby mode
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	0018      	movs	r0, r3
 80058ce:	f000 f85f 	bl	8005990 <SX127X_standby>
}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b002      	add	sp, #8
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	00cd0022 	.word	0x00cd0022
 80058e0:	00ff0029 	.word	0x00ff0029
 80058e4:	00668011 	.word	0x00668011
 80058e8:	00834015 	.word	0x00834015

080058ec <SX127X_defaultConfig>:

void SX127X_defaultConfig(SX127X_t *module)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	module->bw = SX127X_LORA_BW_125KHZ;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2207      	movs	r2, #7
 80058f8:	719a      	strb	r2, [r3, #6]
	module->cr = SX127X_CR_4_8;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2204      	movs	r2, #4
 80058fe:	71da      	strb	r2, [r3, #7]
	module->crcEnable = 1;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	725a      	strb	r2, [r3, #9]
	module->frequency = SX127X_FREQ_DEFAULT;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a0d      	ldr	r2, [pc, #52]	; (8005940 <SX127X_defaultConfig+0x54>)
 800590a:	601a      	str	r2, [r3, #0]
	module->implicitHeader = 1;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	729a      	strb	r2, [r3, #10]
	module->len = 3;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2203      	movs	r2, #3
 8005916:	721a      	strb	r2, [r3, #8]
	module->power = SX127X_POWER_20DBM;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2214      	movs	r2, #20
 800591c:	711a      	strb	r2, [r3, #4]
	module->preamble = 5;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2205      	movs	r2, #5
 8005922:	819a      	strh	r2, [r3, #12]
	module->sf = SX127X_LORA_SF_12;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	220c      	movs	r2, #12
 8005928:	715a      	strb	r2, [r3, #5]
	module->syncWord = 0x1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	739a      	strb	r2, [r3, #14]
	module->alwaysRX = 1;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	73da      	strb	r2, [r3, #15]
}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	46bd      	mov	sp, r7
 800593a:	b002      	add	sp, #8
 800593c:	bd80      	pop	{r7, pc}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	00d94024 	.word	0x00d94024

08005944 <SX127X_PortConfig>:

void SX127X_PortConfig(SX127X_t *module, SX127X_dio_t reset, SX127X_dio_t nss,
		SPI_HandleTypeDef *hspi)
{
 8005944:	b082      	sub	sp, #8
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	1d38      	adds	r0, r7, #4
 8005950:	6001      	str	r1, [r0, #0]
 8005952:	6042      	str	r2, [r0, #4]
 8005954:	2204      	movs	r2, #4
 8005956:	2118      	movs	r1, #24
 8005958:	468c      	mov	ip, r1
 800595a:	44bc      	add	ip, r7
 800595c:	4462      	add	r2, ip
 800595e:	6013      	str	r3, [r2, #0]
	module->reset = reset;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	1d3a      	adds	r2, r7, #4
 8005964:	3364      	adds	r3, #100	; 0x64
 8005966:	ca03      	ldmia	r2!, {r0, r1}
 8005968:	c303      	stmia	r3!, {r0, r1}
	module->nss = nss;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2204      	movs	r2, #4
 800596e:	2118      	movs	r1, #24
 8005970:	468c      	mov	ip, r1
 8005972:	44bc      	add	ip, r7
 8005974:	4462      	add	r2, ip
 8005976:	336c      	adds	r3, #108	; 0x6c
 8005978:	ca03      	ldmia	r2!, {r0, r1}
 800597a:	c303      	stmia	r3!, {r0, r1}
	module->spi = hspi;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005980:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	46bd      	mov	sp, r7
 8005986:	b004      	add	sp, #16
 8005988:	bc80      	pop	{r7}
 800598a:	bc08      	pop	{r3}
 800598c:	b002      	add	sp, #8
 800598e:	4718      	bx	r3

08005990 <SX127X_standby>:

void SX127X_standby(SX127X_t *module)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a0b      	ldr	r2, [pc, #44]	; (80059cc <SX127X_standby+0x3c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d806      	bhi.n	80059b0 <SX127X_standby+0x20>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x89);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2289      	movs	r2, #137	; 0x89
 80059a6:	2101      	movs	r1, #1
 80059a8:	0018      	movs	r0, r3
 80059aa:	f7ff fe05 	bl	80055b8 <SX127X_SPIWrite>
 80059ae:	e005      	b.n	80059bc <SX127X_standby+0x2c>
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x81);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2281      	movs	r2, #129	; 0x81
 80059b4:	2101      	movs	r1, #1
 80059b6:	0018      	movs	r0, r3
 80059b8:	f7ff fdfe 	bl	80055b8 <SX127X_SPIWrite>
	module->status = STANDBY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	741a      	strb	r2, [r3, #16]
}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b002      	add	sp, #8
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	00834015 	.word	0x00834015

080059d0 <SX127X_sleep>:

void SX127X_sleep(SX127X_t *module)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	if (module->frequency < SX127X_FREQ_525MHZ)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a0b      	ldr	r2, [pc, #44]	; (8005a0c <SX127X_sleep+0x3c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d806      	bhi.n	80059f0 <SX127X_sleep+0x20>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x88);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2288      	movs	r2, #136	; 0x88
 80059e6:	2101      	movs	r1, #1
 80059e8:	0018      	movs	r0, r3
 80059ea:	f7ff fde5 	bl	80055b8 <SX127X_SPIWrite>
 80059ee:	e005      	b.n	80059fc <SX127X_sleep+0x2c>
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x80);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2280      	movs	r2, #128	; 0x80
 80059f4:	2101      	movs	r1, #1
 80059f6:	0018      	movs	r0, r3
 80059f8:	f7ff fdde 	bl	80055b8 <SX127X_SPIWrite>
	module->status = SLEEP;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	741a      	strb	r2, [r3, #16]
}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	46bd      	mov	sp, r7
 8005a06:	b002      	add	sp, #8
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	00834015 	.word	0x00834015

08005a10 <SX127X_clearIrq>:

void SX127X_clearIrq(SX127X_t *module)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	SX127X_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	22ff      	movs	r2, #255	; 0xff
 8005a1c:	2112      	movs	r1, #18
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f7ff fdca 	bl	80055b8 <SX127X_SPIWrite>
}
 8005a24:	46c0      	nop			; (mov r8, r8)
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b002      	add	sp, #8
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <SX127X_startRx>:

int SX127X_startRx(SX127X_t *module, uint32_t timeout)
{
 8005a2c:	b5b0      	push	{r4, r5, r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
	uint8_t addr;
	SX127X_config(module);		//Setting base parameter
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f7ff fe79 	bl	8005730 <SX127X_config>
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2284      	movs	r2, #132	; 0x84
 8005a42:	214d      	movs	r1, #77	; 0x4d
 8005a44:	0018      	movs	r0, r3
 8005a46:	f7ff fdb7 	bl	80055b8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00);	//No FHSS
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2124      	movs	r1, #36	; 0x24
 8005a50:	0018      	movs	r0, r3
 8005a52:	f7ff fdb1 	bl	80055b8 <SX127X_SPIWrite>
	SX127X_clearIrq(module);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f7ff ffd9 	bl	8005a10 <SX127X_clearIrq>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	7a1a      	ldrb	r2, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2122      	movs	r1, #34	; 0x22
 8005a66:	0018      	movs	r0, r3
 8005a68:	f7ff fda6 	bl	80055b8 <SX127X_SPIWrite>
	addr = SX127X_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8005a6c:	250f      	movs	r5, #15
 8005a6e:	197c      	adds	r4, r7, r5
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	210f      	movs	r1, #15
 8005a74:	0018      	movs	r0, r3
 8005a76:	f7ff fd7e 	bl	8005576 <SX127X_SPIRead>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	7023      	strb	r3, [r4, #0]
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8005a7e:	197b      	adds	r3, r7, r5
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	210d      	movs	r1, #13
 8005a86:	0018      	movs	r0, r3
 8005a88:	f7ff fd96 	bl	80055b8 <SX127X_SPIWrite>
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1f      	ldr	r2, [pc, #124]	; (8005b10 <SX127X_startRx+0xe4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d806      	bhi.n	8005aa4 <SX127X_startRx+0x78>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8d);	//Cont RX Mode & LF
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	228d      	movs	r2, #141	; 0x8d
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	f7ff fd8b 	bl	80055b8 <SX127X_SPIWrite>
 8005aa2:	e005      	b.n	8005ab0 <SX127X_startRx+0x84>
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x85);	    //Cont RX Mode & HF
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2285      	movs	r2, #133	; 0x85
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f7ff fd84 	bl	80055b8 <SX127X_SPIWrite>
	module->readBytes = 0;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	225d      	movs	r2, #93	; 0x5d
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	5499      	strb	r1, [r3, r2]

	while (1)
	{
		uint8_t status = SX127X_SPIRead(module, LR_RegModemStat);
 8005ab8:	250e      	movs	r5, #14
 8005aba:	197c      	adds	r4, r7, r5
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2118      	movs	r1, #24
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f7ff fd58 	bl	8005576 <SX127X_SPIRead>
 8005ac6:	0003      	movs	r3, r0
 8005ac8:	7023      	strb	r3, [r4, #0]
		if (status & 0x04)
 8005aca:	197b      	adds	r3, r7, r5
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2204      	movs	r2, #4
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d004      	beq.n	8005ade <SX127X_startRx+0xb2>
		{	//Rx-on going RegModemStat
			module->status = RX;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	741a      	strb	r2, [r3, #16]
			return 1;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e013      	b.n	8005b06 <SX127X_startRx+0xda>
		}

		if (--timeout == 0)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <SX127X_startRx+0xd2>
		{
			SX127X_Reset(module);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	0018      	movs	r0, r3
 8005aee:	f7ff fcd5 	bl	800549c <SX127X_Reset>
			SX127X_config(module);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	0018      	movs	r0, r3
 8005af6:	f7ff fe1b 	bl	8005730 <SX127X_config>
			return 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e003      	b.n	8005b06 <SX127X_startRx+0xda>
		}

		HAL_Delay(1);
 8005afe:	2001      	movs	r0, #1
 8005b00:	f000 fcc6 	bl	8006490 <HAL_Delay>
	{
 8005b04:	e7d8      	b.n	8005ab8 <SX127X_startRx+0x8c>
	}
}
 8005b06:	0018      	movs	r0, r3
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	b004      	add	sp, #16
 8005b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	00834015 	.word	0x00834015

08005b14 <SX127X_receive>:

uint8_t SX127X_receive(SX127X_t *module)
{
 8005b14:	b5b0      	push	{r4, r5, r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;
	memset(module->rxBuf, 0x00, SX127X_MAX_PACKET);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	331d      	adds	r3, #29
 8005b20:	2220      	movs	r2, #32
 8005b22:	2100      	movs	r1, #0
 8005b24:	0018      	movs	r0, r3
 8005b26:	f005 fbc6 	bl	800b2b6 <memset>

	addr = SX127X_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8005b2a:	250e      	movs	r5, #14
 8005b2c:	197c      	adds	r4, r7, r5
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2110      	movs	r1, #16
 8005b32:	0018      	movs	r0, r3
 8005b34:	f7ff fd1f 	bl	8005576 <SX127X_SPIRead>
 8005b38:	0003      	movs	r3, r0
 8005b3a:	7023      	strb	r3, [r4, #0]
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8005b3c:	197b      	adds	r3, r7, r5
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	210d      	movs	r1, #13
 8005b44:	0018      	movs	r0, r3
 8005b46:	f7ff fd37 	bl	80055b8 <SX127X_SPIWrite>
	if (module->sf == SX127X_LORA_SF_6)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	795b      	ldrb	r3, [r3, #5]
 8005b4e:	2b06      	cmp	r3, #6
 8005b50:	d105      	bne.n	8005b5e <SX127X_receive+0x4a>
		packet_size = module->len;
 8005b52:	230f      	movs	r3, #15
 8005b54:	18fb      	adds	r3, r7, r3
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	7a12      	ldrb	r2, [r2, #8]
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	e008      	b.n	8005b70 <SX127X_receive+0x5c>
	else
		packet_size = SX127X_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8005b5e:	230f      	movs	r3, #15
 8005b60:	18fc      	adds	r4, r7, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2113      	movs	r1, #19
 8005b66:	0018      	movs	r0, r3
 8005b68:	f7ff fd05 	bl	8005576 <SX127X_SPIRead>
 8005b6c:	0003      	movs	r3, r0
 8005b6e:	7023      	strb	r3, [r4, #0]
	SX127X_SPIBurstRead(module, 0x00, module->rxBuf, packet_size);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	331d      	adds	r3, #29
 8005b74:	001a      	movs	r2, r3
 8005b76:	240f      	movs	r4, #15
 8005b78:	193b      	adds	r3, r7, r4
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	2100      	movs	r1, #0
 8005b80:	f7ff fd46 	bl	8005610 <SX127X_SPIBurstRead>
	module->readBytes = packet_size;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	193a      	adds	r2, r7, r4
 8005b88:	215d      	movs	r1, #93	; 0x5d
 8005b8a:	7812      	ldrb	r2, [r2, #0]
 8005b8c:	545a      	strb	r2, [r3, r1]
	return module->readBytes;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	225d      	movs	r2, #93	; 0x5d
 8005b92:	5c9b      	ldrb	r3, [r3, r2]
}
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b004      	add	sp, #16
 8005b9a:	bdb0      	pop	{r4, r5, r7, pc}

08005b9c <SX127X_startTransmission>:

void SX127X_startTransmission(SX127X_t *module)
{
 8005b9c:	b5b0      	push	{r4, r5, r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	SX127X_config(module); //setting base parameter
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	f7ff fdc2 	bl	8005730 <SX127X_config>
	module->status = TX;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2203      	movs	r2, #3
 8005bb0:	741a      	strb	r2, [r3, #16]
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2287      	movs	r2, #135	; 0x87
 8005bb6:	214d      	movs	r1, #77	; 0x4d
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f7ff fcfd 	bl	80055b8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2124      	movs	r1, #36	; 0x24
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f7ff fcf7 	bl	80055b8 <SX127X_SPIWrite>
	SX127X_clearIrq(module);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f7ff ff1f 	bl	8005a10 <SX127X_clearIrq>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //RegPayloadLength 21byte
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	7a1a      	ldrb	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2122      	movs	r1, #34	; 0x22
 8005bda:	0018      	movs	r0, r3
 8005bdc:	f7ff fcec 	bl	80055b8 <SX127X_SPIWrite>
	addr = SX127X_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8005be0:	250f      	movs	r5, #15
 8005be2:	197c      	adds	r4, r7, r5
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	210e      	movs	r1, #14
 8005be8:	0018      	movs	r0, r3
 8005bea:	f7ff fcc4 	bl	8005576 <SX127X_SPIRead>
 8005bee:	0003      	movs	r3, r0
 8005bf0:	7023      	strb	r3, [r4, #0]
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8005bf2:	197b      	adds	r3, r7, r5
 8005bf4:	781a      	ldrb	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	210d      	movs	r1, #13
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f7ff fcdc 	bl	80055b8 <SX127X_SPIWrite>
	SX127X_SPIBurstWrite(module, 0x00, module->txBuf, module->len);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	333d      	adds	r3, #61	; 0x3d
 8005c04:	001a      	movs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	7a1b      	ldrb	r3, [r3, #8]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	f7ff fd45 	bl	800569c <SX127X_SPIBurstWrite>
	module->lastTransTick = HAL_GetTick();
 8005c12:	f000 fc33 	bl	800647c <HAL_GetTick>
 8005c16:	0002      	movs	r2, r0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	615a      	str	r2, [r3, #20]
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a0b      	ldr	r2, [pc, #44]	; (8005c50 <SX127X_startTransmission+0xb4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d806      	bhi.n	8005c34 <SX127X_startTransmission+0x98>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode LF
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	228b      	movs	r2, #139	; 0x8b
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7ff fcc3 	bl	80055b8 <SX127X_SPIWrite>
 8005c32:	e005      	b.n	8005c40 <SX127X_startTransmission+0xa4>
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x83);	//Tx Mode HF
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2283      	movs	r2, #131	; 0x83
 8005c38:	2101      	movs	r1, #1
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f7ff fcbc 	bl	80055b8 <SX127X_SPIWrite>
	module->TXrequest = 0;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	745a      	strb	r2, [r3, #17]

}
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	b004      	add	sp, #16
 8005c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	00834015 	.word	0x00834015

08005c54 <SX127X_transmitAsync>:

HAL_StatusTypeDef SX127X_transmitAsync(SX127X_t *module, uint8_t lenght)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	000a      	movs	r2, r1
 8005c5e:	1cfb      	adds	r3, r7, #3
 8005c60:	701a      	strb	r2, [r3, #0]
	if (module->TXrequest == 0 && module->status != TX)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	7c5b      	ldrb	r3, [r3, #17]
 8005c66:	2201      	movs	r2, #1
 8005c68:	4053      	eors	r3, r2
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00c      	beq.n	8005c8a <SX127X_transmitAsync+0x36>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	7c1b      	ldrb	r3, [r3, #16]
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d008      	beq.n	8005c8a <SX127X_transmitAsync+0x36>
	{
		module->len = lenght;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	1cfa      	adds	r2, r7, #3
 8005c7c:	7812      	ldrb	r2, [r2, #0]
 8005c7e:	721a      	strb	r2, [r3, #8]
		module->TXrequest = 1;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	745a      	strb	r2, [r3, #17]

		return HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e000      	b.n	8005c8c <SX127X_transmitAsync+0x38>
	}
	else
		return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
}
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	b002      	add	sp, #8
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <SX127X_Routine>:

void SX127X_Routine(SX127X_t *module)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]

	SX127X_readStatus(module);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f000 f894 	bl	8005dcc <SX127X_readStatus>
	SX127X_readIrq(module);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f000 f8ba 	bl	8005e20 <SX127X_readIrq>

	if (module->status == UNINITIALISED)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	7c1b      	ldrb	r3, [r3, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d107      	bne.n	8005cc4 <SX127X_Routine+0x30>
	{
		SX127X_Reset(module);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f7ff fbf0 	bl	800549c <SX127X_Reset>
		SX127X_config(module);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	f7ff fd36 	bl	8005730 <SX127X_config>
	}

	if ((module->status == SLEEP || module->status == STANDBY)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	7c1b      	ldrb	r3, [r3, #16]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d003      	beq.n	8005cd4 <SX127X_Routine+0x40>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	7c1b      	ldrb	r3, [r3, #16]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d10a      	bne.n	8005cea <SX127X_Routine+0x56>
			&& module->alwaysRX)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	7bdb      	ldrb	r3, [r3, #15]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d006      	beq.n	8005cea <SX127X_Routine+0x56>
		SX127X_startRx(module, 1000);
 8005cdc:	23fa      	movs	r3, #250	; 0xfa
 8005cde:	009a      	lsls	r2, r3, #2
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	0011      	movs	r1, r2
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f7ff fea1 	bl	8005a2c <SX127X_startRx>

	if (module->TXrequest && (module->modemStatus & MODEM_STATUS_SIG_DET) == 0)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	7c5b      	ldrb	r3, [r3, #17]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <SX127X_Routine+0x74>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	225f      	movs	r2, #95	; 0x5f
 8005cf6:	5c9b      	ldrb	r3, [r3, r2]
 8005cf8:	001a      	movs	r2, r3
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d103      	bne.n	8005d08 <SX127X_Routine+0x74>
		SX127X_startTransmission(module);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	0018      	movs	r0, r3
 8005d04:	f7ff ff4a 	bl	8005b9c <SX127X_startTransmission>

	SX127X_readIrq(module);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f000 f888 	bl	8005e20 <SX127X_readIrq>
	if (module->irq & IRQ_TX_DONE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	225e      	movs	r2, #94	; 0x5e
 8005d14:	5c9b      	ldrb	r3, [r3, r2]
 8005d16:	001a      	movs	r2, r3
 8005d18:	2308      	movs	r3, #8
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	d008      	beq.n	8005d30 <SX127X_Routine+0x9c>
	{
		SX127X_clearIrq(module);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	0018      	movs	r0, r3
 8005d22:	f7ff fe75 	bl	8005a10 <SX127X_clearIrq>
		SX127X_startRx(module, 100);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2164      	movs	r1, #100	; 0x64
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	f7ff fe7e 	bl	8005a2c <SX127X_startRx>
	}

	if (module->irq & IRQ_RX_DONE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	225e      	movs	r2, #94	; 0x5e
 8005d34:	5c9b      	ldrb	r3, [r3, r2]
 8005d36:	001a      	movs	r2, r3
 8005d38:	2340      	movs	r3, #64	; 0x40
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d013      	beq.n	8005d66 <SX127X_Routine+0xd2>
	{
		module->badCrc = (module->irq & IRQ_CRC_ERROR) >> 5;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	225e      	movs	r2, #94	; 0x5e
 8005d42:	5c9b      	ldrb	r3, [r3, r2]
 8005d44:	115b      	asrs	r3, r3, #5
 8005d46:	2201      	movs	r2, #1
 8005d48:	4013      	ands	r3, r2
 8005d4a:	1e5a      	subs	r2, r3, #1
 8005d4c:	4193      	sbcs	r3, r2
 8005d4e:	b2d9      	uxtb	r1, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2260      	movs	r2, #96	; 0x60
 8005d54:	5499      	strb	r1, [r3, r2]
		SX127X_receive(module);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f7ff fedb 	bl	8005b14 <SX127X_receive>
		SX127X_clearIrq(module);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	0018      	movs	r0, r3
 8005d62:	f7ff fe55 	bl	8005a10 <SX127X_clearIrq>
	}

	if (((SX127X_SPIRead(module, 0x1D)) != (module->bw << 4 | module->cr << 1 | module->implicitHeader))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	211d      	movs	r1, #29
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f7ff fc03 	bl	8005576 <SX127X_SPIRead>
 8005d70:	0003      	movs	r3, r0
 8005d72:	0019      	movs	r1, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	799b      	ldrb	r3, [r3, #6]
 8005d78:	011a      	lsls	r2, r3, #4
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	79db      	ldrb	r3, [r3, #7]
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	4313      	orrs	r3, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	7a92      	ldrb	r2, [r2, #10]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	4299      	cmp	r1, r3
 8005d8a:	d108      	bne.n	8005d9e <SX127X_Routine+0x10a>
			|| (HAL_GetTick() - module->watchdogTick > 120000)) //Watchdog
 8005d8c:	f000 fb76 	bl	800647c <HAL_GetTick>
 8005d90:	0002      	movs	r2, r0
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	4a0b      	ldr	r2, [pc, #44]	; (8005dc8 <SX127X_Routine+0x134>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d90f      	bls.n	8005dbe <SX127X_Routine+0x12a>
	{
		module->wdCounter++;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2280      	movs	r2, #128	; 0x80
 8005da2:	5a9b      	ldrh	r3, [r3, r2]
 8005da4:	3301      	adds	r3, #1
 8005da6:	b299      	uxth	r1, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2280      	movs	r2, #128	; 0x80
 8005dac:	5299      	strh	r1, [r3, r2]
		module->watchdogTick = HAL_GetTick();
 8005dae:	f000 fb65 	bl	800647c <HAL_GetTick>
 8005db2:	0002      	movs	r2, r0
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	67da      	str	r2, [r3, #124]	; 0x7c
		module->status = UNINITIALISED;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	741a      	strb	r2, [r3, #16]
	}
}
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b002      	add	sp, #8
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	0001d4c0 	.word	0x0001d4c0

08005dcc <SX127X_readStatus>:
	else
		return -ret;
}

void SX127X_readStatus(SX127X_t *module)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	module->modemStatus = SX127X_SPIRead(module, LR_RegModemStat);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2118      	movs	r1, #24
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f7ff fbcc 	bl	8005576 <SX127X_SPIRead>
 8005dde:	0003      	movs	r3, r0
 8005de0:	0019      	movs	r1, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	225f      	movs	r2, #95	; 0x5f
 8005de6:	5499      	strb	r1, [r3, r2]
	if (module->modemStatus & MODEM_STATUS_SIG_DET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	225f      	movs	r2, #95	; 0x5f
 8005dec:	5c9b      	ldrb	r3, [r3, r2]
 8005dee:	001a      	movs	r2, r3
 8005df0:	2301      	movs	r3, #1
 8005df2:	4013      	ands	r3, r2
 8005df4:	d00d      	beq.n	8005e12 <SX127X_readStatus+0x46>
	{
		module->signalDetected = true;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	771a      	strb	r2, [r3, #28]
		module->lastSignalTick = HAL_GetTick();
 8005dfc:	f000 fb3e 	bl	800647c <HAL_GetTick>
 8005e00:	0002      	movs	r2, r0
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	619a      	str	r2, [r3, #24]
		module->watchdogTick = HAL_GetTick();
 8005e06:	f000 fb39 	bl	800647c <HAL_GetTick>
 8005e0a:	0002      	movs	r2, r0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	67da      	str	r2, [r3, #124]	; 0x7c
	}
	else
		module->signalDetected = false;
}
 8005e10:	e002      	b.n	8005e18 <SX127X_readStatus+0x4c>
		module->signalDetected = false;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	771a      	strb	r2, [r3, #28]
}
 8005e18:	46c0      	nop			; (mov r8, r8)
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b002      	add	sp, #8
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <SX127X_readIrq>:

void SX127X_readIrq(SX127X_t *module)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
	module->irq = SX127X_SPIRead(module, LR_RegIrqFlags);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2112      	movs	r1, #18
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f7ff fba2 	bl	8005576 <SX127X_SPIRead>
 8005e32:	0003      	movs	r3, r0
 8005e34:	0019      	movs	r1, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	225e      	movs	r2, #94	; 0x5e
 8005e3a:	5499      	strb	r1, [r3, r2]
}
 8005e3c:	46c0      	nop			; (mov r8, r8)
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b002      	add	sp, #8
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <SX127X_delayMicro>:

void SX127X_delayMicro(uint32_t micros)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 5;
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <SX127X_delayMicro+0x34>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	490a      	ldr	r1, [pc, #40]	; (8005e7c <SX127X_delayMicro+0x38>)
 8005e52:	0018      	movs	r0, r3
 8005e54:	f7fa f974 	bl	8000140 <__udivsi3>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	001a      	movs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4353      	muls	r3, r2
 8005e60:	607b      	str	r3, [r7, #4]
	while (micros--)
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	1e5a      	subs	r2, r3, #1
 8005e68:	607a      	str	r2, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1fa      	bne.n	8005e64 <SX127X_delayMicro+0x20>
		;
}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	46c0      	nop			; (mov r8, r8)
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b002      	add	sp, #8
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20000024 	.word	0x20000024
 8005e7c:	004c4b40 	.word	0x004c4b40

08005e80 <SX127X_init>:
{
	return SX127X_SPIRead(module, LR_RegWideBandRSSI);
}

void SX127X_init(SX127X_t *module)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	SX127X_Reset(module);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f7ff fb06 	bl	800549c <SX127X_Reset>
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2142      	movs	r1, #66	; 0x42
 8005e94:	0018      	movs	r0, r3
 8005e96:	f7ff fb6e 	bl	8005576 <SX127X_SPIRead>
 8005e9a:	0003      	movs	r3, r0
 8005e9c:	0019      	movs	r1, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2278      	movs	r2, #120	; 0x78
 8005ea2:	5499      	strb	r1, [r3, r2]
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2142      	movs	r1, #66	; 0x42
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f7ff fb64 	bl	8005576 <SX127X_SPIRead>
 8005eae:	0003      	movs	r3, r0
 8005eb0:	0019      	movs	r1, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2278      	movs	r2, #120	; 0x78
 8005eb6:	5499      	strb	r1, [r3, r2]
}
 8005eb8:	46c0      	nop			; (mov r8, r8)
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b002      	add	sp, #8
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
	return 1;
 8005ec4:	2301      	movs	r3, #1
}
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <_kill>:

int _kill(int pid, int sig)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005ed6:	f005 f9bb 	bl	800b250 <__errno>
 8005eda:	0003      	movs	r3, r0
 8005edc:	2216      	movs	r2, #22
 8005ede:	601a      	str	r2, [r3, #0]
	return -1;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	425b      	negs	r3, r3
}
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	b002      	add	sp, #8
 8005eea:	bd80      	pop	{r7, pc}

08005eec <_exit>:

void _exit (int status)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	425a      	negs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	0011      	movs	r1, r2
 8005efc:	0018      	movs	r0, r3
 8005efe:	f7ff ffe5 	bl	8005ecc <_kill>
	while (1) {}		/* Make sure we hang here */
 8005f02:	e7fe      	b.n	8005f02 <_exit+0x16>

08005f04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f10:	2300      	movs	r3, #0
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	e00a      	b.n	8005f2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005f16:	e000      	b.n	8005f1a <_read+0x16>
 8005f18:	bf00      	nop
 8005f1a:	0001      	movs	r1, r0
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	60ba      	str	r2, [r7, #8]
 8005f22:	b2ca      	uxtb	r2, r1
 8005f24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	dbf0      	blt.n	8005f16 <_read+0x12>
	}

return len;
 8005f34:	687b      	ldr	r3, [r7, #4]
}
 8005f36:	0018      	movs	r0, r3
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	b006      	add	sp, #24
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <_close>:
	}
	return len;
}

int _close(int file)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
	return -1;
 8005f46:	2301      	movs	r3, #1
 8005f48:	425b      	negs	r3, r3
}
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	b002      	add	sp, #8
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b082      	sub	sp, #8
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2280      	movs	r2, #128	; 0x80
 8005f60:	0192      	lsls	r2, r2, #6
 8005f62:	605a      	str	r2, [r3, #4]
	return 0;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b002      	add	sp, #8
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <_isatty>:

int _isatty(int file)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
	return 1;
 8005f76:	2301      	movs	r3, #1
}
 8005f78:	0018      	movs	r0, r3
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	b002      	add	sp, #8
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
	return 0;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	0018      	movs	r0, r3
 8005f90:	46bd      	mov	sp, r7
 8005f92:	b004      	add	sp, #16
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005fa0:	4a14      	ldr	r2, [pc, #80]	; (8005ff4 <_sbrk+0x5c>)
 8005fa2:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <_sbrk+0x60>)
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005fac:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <_sbrk+0x64>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005fb4:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <_sbrk+0x64>)
 8005fb6:	4a12      	ldr	r2, [pc, #72]	; (8006000 <_sbrk+0x68>)
 8005fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005fba:	4b10      	ldr	r3, [pc, #64]	; (8005ffc <_sbrk+0x64>)
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	18d3      	adds	r3, r2, r3
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d207      	bcs.n	8005fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005fc8:	f005 f942 	bl	800b250 <__errno>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	220c      	movs	r2, #12
 8005fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	425b      	negs	r3, r3
 8005fd6:	e009      	b.n	8005fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005fd8:	4b08      	ldr	r3, [pc, #32]	; (8005ffc <_sbrk+0x64>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005fde:	4b07      	ldr	r3, [pc, #28]	; (8005ffc <_sbrk+0x64>)
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	18d2      	adds	r2, r2, r3
 8005fe6:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <_sbrk+0x64>)
 8005fe8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005fea:	68fb      	ldr	r3, [r7, #12]
}
 8005fec:	0018      	movs	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b006      	add	sp, #24
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	20002000 	.word	0x20002000
 8005ff8:	00000400 	.word	0x00000400
 8005ffc:	2000026c 	.word	0x2000026c
 8006000:	200005a8 	.word	0x200005a8

08006004 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006008:	46c0      	nop			; (mov r8, r8)
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <initUart>:
uint8_t uartPos;
uint8_t len;
uint8_t data;

void initUart(UART_HandleTypeDef* huart, DMA_HandleTypeDef* hdma, SX127X_t* myRadioHandler)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive_DMA(huart, &data, 1);
 800601c:	4906      	ldr	r1, [pc, #24]	; (8006038 <initUart+0x28>)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2201      	movs	r2, #1
 8006022:	0018      	movs	r0, r3
 8006024:	f003 feae 	bl	8009d84 <HAL_UART_Receive_DMA>
	hdma->XferCpltCallback = readByte;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4a04      	ldr	r2, [pc, #16]	; (800603c <initUart+0x2c>)
 800602c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	46bd      	mov	sp, r7
 8006032:	b004      	add	sp, #16
 8006034:	bd80      	pop	{r7, pc}
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	20000551 	.word	0x20000551
 800603c:	08006041 	.word	0x08006041

08006040 <readByte>:

void readByte (UART_HandleTypeDef* huart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	if (data == '<')
 8006048:	4b12      	ldr	r3, [pc, #72]	; (8006094 <readByte+0x54>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b3c      	cmp	r3, #60	; 0x3c
 800604e:	d103      	bne.n	8006058 <readByte+0x18>
		uartPos = 0;
 8006050:	4b11      	ldr	r3, [pc, #68]	; (8006098 <readByte+0x58>)
 8006052:	2200      	movs	r2, #0
 8006054:	701a      	strb	r2, [r3, #0]
			len = uartPos;
			flag.uartRx = 1;
		}
	else
		uartRx[uartPos++] = data;
}
 8006056:	e018      	b.n	800608a <readByte+0x4a>
	else if (data == '>')
 8006058:	4b0e      	ldr	r3, [pc, #56]	; (8006094 <readByte+0x54>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b3e      	cmp	r3, #62	; 0x3e
 800605e:	d109      	bne.n	8006074 <readByte+0x34>
			len = uartPos;
 8006060:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <readByte+0x58>)
 8006062:	781a      	ldrb	r2, [r3, #0]
 8006064:	4b0d      	ldr	r3, [pc, #52]	; (800609c <readByte+0x5c>)
 8006066:	701a      	strb	r2, [r3, #0]
			flag.uartRx = 1;
 8006068:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <readByte+0x60>)
 800606a:	781a      	ldrb	r2, [r3, #0]
 800606c:	2108      	movs	r1, #8
 800606e:	430a      	orrs	r2, r1
 8006070:	701a      	strb	r2, [r3, #0]
}
 8006072:	e00a      	b.n	800608a <readByte+0x4a>
		uartRx[uartPos++] = data;
 8006074:	4b08      	ldr	r3, [pc, #32]	; (8006098 <readByte+0x58>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	b2d1      	uxtb	r1, r2
 800607c:	4a06      	ldr	r2, [pc, #24]	; (8006098 <readByte+0x58>)
 800607e:	7011      	strb	r1, [r2, #0]
 8006080:	001a      	movs	r2, r3
 8006082:	4b04      	ldr	r3, [pc, #16]	; (8006094 <readByte+0x54>)
 8006084:	7819      	ldrb	r1, [r3, #0]
 8006086:	4b07      	ldr	r3, [pc, #28]	; (80060a4 <readByte+0x64>)
 8006088:	5499      	strb	r1, [r3, r2]
}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	46bd      	mov	sp, r7
 800608e:	b002      	add	sp, #8
 8006090:	bd80      	pop	{r7, pc}
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	20000551 	.word	0x20000551
 8006098:	20000550 	.word	0x20000550
 800609c:	20000574 	.word	0x20000574
 80060a0:	20000220 	.word	0x20000220
 80060a4:	20000554 	.word	0x20000554

080060a8 <uartReceiveHandler>:

void uartReceiveHandler (nodeSettings_t* settingsPtr)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]

	uint8_t l = len - 1;
 80060b0:	4b68      	ldr	r3, [pc, #416]	; (8006254 <uartReceiveHandler+0x1ac>)
 80060b2:	781a      	ldrb	r2, [r3, #0]
 80060b4:	2317      	movs	r3, #23
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	3a01      	subs	r2, #1
 80060ba:	701a      	strb	r2, [r3, #0]
	uint8_t *ptr = uartRx + 1;
 80060bc:	4b66      	ldr	r3, [pc, #408]	; (8006258 <uartReceiveHandler+0x1b0>)
 80060be:	613b      	str	r3, [r7, #16]
	uint32_t tmp;

	switch (uartRx[0])
 80060c0:	4b66      	ldr	r3, [pc, #408]	; (800625c <uartReceiveHandler+0x1b4>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	3b31      	subs	r3, #49	; 0x31
 80060c6:	2b3d      	cmp	r3, #61	; 0x3d
 80060c8:	d900      	bls.n	80060cc <uartReceiveHandler+0x24>
 80060ca:	e0b8      	b.n	800623e <uartReceiveHandler+0x196>
 80060cc:	009a      	lsls	r2, r3, #2
 80060ce:	4b64      	ldr	r3, [pc, #400]	; (8006260 <uartReceiveHandler+0x1b8>)
 80060d0:	18d3      	adds	r3, r2, r3
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	469f      	mov	pc, r3
	{
		case UART_FREQUENCY:
			tmp = DecToInt (ptr, l);
 80060d6:	2317      	movs	r3, #23
 80060d8:	18fb      	adds	r3, r7, r3
 80060da:	781a      	ldrb	r2, [r3, #0]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	0011      	movs	r1, r2
 80060e0:	0018      	movs	r0, r3
 80060e2:	f7fd f929 	bl	8003338 <DecToInt>
 80060e6:	0003      	movs	r3, r0
 80060e8:	60fb      	str	r3, [r7, #12]
			settingsPtr->realFrequency = tmp;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	601a      	str	r2, [r3, #0]
			break;
 80060f0:	e0ac      	b.n	800624c <uartReceiveHandler+0x1a4>

		case UART_SF:
			tmp = DecToInt (ptr, l);
 80060f2:	2317      	movs	r3, #23
 80060f4:	18fb      	adds	r3, r7, r3
 80060f6:	781a      	ldrb	r2, [r3, #0]
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	0011      	movs	r1, r2
 80060fc:	0018      	movs	r0, r3
 80060fe:	f7fd f91b 	bl	8003338 <DecToInt>
 8006102:	0003      	movs	r3, r0
 8006104:	60fb      	str	r3, [r7, #12]
			settingsPtr->sf = tmp;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	b2da      	uxtb	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	731a      	strb	r2, [r3, #12]
			break;
 800610e:	e09d      	b.n	800624c <uartReceiveHandler+0x1a4>

		case UART_BW:
			tmp = DecToInt (ptr, l);
 8006110:	2317      	movs	r3, #23
 8006112:	18fb      	adds	r3, r7, r3
 8006114:	781a      	ldrb	r2, [r3, #0]
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	0011      	movs	r1, r2
 800611a:	0018      	movs	r0, r3
 800611c:	f7fd f90c 	bl	8003338 <DecToInt>
 8006120:	0003      	movs	r3, r0
 8006122:	60fb      	str	r3, [r7, #12]
			settingsPtr->bw = tmp;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	735a      	strb	r2, [r3, #13]
			break;
 800612c:	e08e      	b.n	800624c <uartReceiveHandler+0x1a4>

		case UART_SYNCWORD:
			tmp = HexToInt (ptr, l);
 800612e:	2317      	movs	r3, #23
 8006130:	18fb      	adds	r3, r7, r3
 8006132:	781a      	ldrb	r2, [r3, #0]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	0011      	movs	r1, r2
 8006138:	0018      	movs	r0, r3
 800613a:	f7fd f94d 	bl	80033d8 <HexToInt>
 800613e:	0003      	movs	r3, r0
 8006140:	60fb      	str	r3, [r7, #12]
			settingsPtr->sw = tmp;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	b2da      	uxtb	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	739a      	strb	r2, [r3, #14]
			break;
 800614a:	e07f      	b.n	800624c <uartReceiveHandler+0x1a4>

		case UART_PREAMBLE:
			tmp = DecToInt (ptr, l);
 800614c:	2317      	movs	r3, #23
 800614e:	18fb      	adds	r3, r7, r3
 8006150:	781a      	ldrb	r2, [r3, #0]
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	0011      	movs	r1, r2
 8006156:	0018      	movs	r0, r3
 8006158:	f7fd f8ee 	bl	8003338 <DecToInt>
 800615c:	0003      	movs	r3, r0
 800615e:	60fb      	str	r3, [r7, #12]
			settingsPtr->preamble = tmp;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	b29a      	uxth	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	811a      	strh	r2, [r3, #8]
			break;
 8006168:	e070      	b.n	800624c <uartReceiveHandler+0x1a4>

		case UART_CR:
			tmp = DecToInt (ptr, l);
 800616a:	2317      	movs	r3, #23
 800616c:	18fb      	adds	r3, r7, r3
 800616e:	781a      	ldrb	r2, [r3, #0]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	0011      	movs	r1, r2
 8006174:	0018      	movs	r0, r3
 8006176:	f7fd f8df 	bl	8003338 <DecToInt>
 800617a:	0003      	movs	r3, r0
 800617c:	60fb      	str	r3, [r7, #12]
			settingsPtr->cr = tmp;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	b2da      	uxtb	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	72da      	strb	r2, [r3, #11]
			break;
 8006186:	e061      	b.n	800624c <uartReceiveHandler+0x1a4>

		case UART_POWER:
			tmp = DecToInt (ptr, l);
 8006188:	2317      	movs	r3, #23
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	781a      	ldrb	r2, [r3, #0]
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	0011      	movs	r1, r2
 8006192:	0018      	movs	r0, r3
 8006194:	f7fd f8d0 	bl	8003338 <DecToInt>
 8006198:	0003      	movs	r3, r0
 800619a:	60fb      	str	r3, [r7, #12]
			settingsPtr->power = tmp;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	73da      	strb	r2, [r3, #15]
			break;
 80061a4:	e052      	b.n	800624c <uartReceiveHandler+0x1a4>

		case UART_NODENUM:
			settingsPtr->nodeNum = DecToInt (ptr, l);
 80061a6:	2317      	movs	r3, #23
 80061a8:	18fb      	adds	r3, r7, r3
 80061aa:	781a      	ldrb	r2, [r3, #0]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	0011      	movs	r1, r2
 80061b0:	0018      	movs	r0, r3
 80061b2:	f7fd f8c1 	bl	8003338 <DecToInt>
 80061b6:	0003      	movs	r3, r0
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	729a      	strb	r2, [r3, #10]
			break;
 80061be:	e045      	b.n	800624c <uartReceiveHandler+0x1a4>

		case UART_WORKING_INTERVAL:
			settingsPtr->workInterval = DecToInt (ptr, l);
 80061c0:	2317      	movs	r3, #23
 80061c2:	18fb      	adds	r3, r7, r3
 80061c4:	781a      	ldrb	r2, [r3, #0]
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	0011      	movs	r1, r2
 80061ca:	0018      	movs	r0, r3
 80061cc:	f7fd f8b4 	bl	8003338 <DecToInt>
 80061d0:	0002      	movs	r2, r0
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	605a      	str	r2, [r3, #4]
			break;
 80061d6:	e039      	b.n	800624c <uartReceiveHandler+0x1a4>

		case UART_USELED:
			settingsPtr->useLed = DecToInt (ptr, l);
 80061d8:	2317      	movs	r3, #23
 80061da:	18fb      	adds	r3, r7, r3
 80061dc:	781a      	ldrb	r2, [r3, #0]
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	0011      	movs	r1, r2
 80061e2:	0018      	movs	r0, r3
 80061e4:	f7fd f8a8 	bl	8003338 <DecToInt>
 80061e8:	0003      	movs	r3, r0
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	741a      	strb	r2, [r3, #16]
			break;
 80061f0:	e02c      	b.n	800624c <uartReceiveHandler+0x1a4>

		case UART_SAVE:
			flag.saveSettings = 1;
 80061f2:	4b1c      	ldr	r3, [pc, #112]	; (8006264 <uartReceiveHandler+0x1bc>)
 80061f4:	781a      	ldrb	r2, [r3, #0]
 80061f6:	2110      	movs	r1, #16
 80061f8:	430a      	orrs	r2, r1
 80061fa:	701a      	strb	r2, [r3, #0]
			break;
 80061fc:	e026      	b.n	800624c <uartReceiveHandler+0x1a4>

		case UART_READ:
			flag.readConfig = 1;
 80061fe:	4b19      	ldr	r3, [pc, #100]	; (8006264 <uartReceiveHandler+0x1bc>)
 8006200:	781a      	ldrb	r2, [r3, #0]
 8006202:	2120      	movs	r1, #32
 8006204:	430a      	orrs	r2, r1
 8006206:	701a      	strb	r2, [r3, #0]
			break;
 8006208:	e020      	b.n	800624c <uartReceiveHandler+0x1a4>

		case UART_CALL:
			printf ("<ANv%lx>\n", SOFTWARE_REVISION);
 800620a:	4a17      	ldr	r2, [pc, #92]	; (8006268 <uartReceiveHandler+0x1c0>)
 800620c:	4b17      	ldr	r3, [pc, #92]	; (800626c <uartReceiveHandler+0x1c4>)
 800620e:	0011      	movs	r1, r2
 8006210:	0018      	movs	r0, r3
 8006212:	f005 fcd3 	bl	800bbbc <iprintf>
			break;
 8006216:	e019      	b.n	800624c <uartReceiveHandler+0x1a4>

		case UART_STATUS:
			flag.statusRequested = 1;
 8006218:	4b12      	ldr	r3, [pc, #72]	; (8006264 <uartReceiveHandler+0x1bc>)
 800621a:	785a      	ldrb	r2, [r3, #1]
 800621c:	2104      	movs	r1, #4
 800621e:	430a      	orrs	r2, r1
 8006220:	705a      	strb	r2, [r3, #1]
			break;
 8006222:	e013      	b.n	800624c <uartReceiveHandler+0x1a4>

		case UART_DEBUG:
			settingsPtr->debugLevel = DecToInt(ptr, l);
 8006224:	2317      	movs	r3, #23
 8006226:	18fb      	adds	r3, r7, r3
 8006228:	781a      	ldrb	r2, [r3, #0]
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	0011      	movs	r1, r2
 800622e:	0018      	movs	r0, r3
 8006230:	f7fd f882 	bl	8003338 <DecToInt>
 8006234:	0003      	movs	r3, r0
 8006236:	b2da      	uxtb	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	761a      	strb	r2, [r3, #24]
			break;
 800623c:	e006      	b.n	800624c <uartReceiveHandler+0x1a4>

		default:
			printf ("Bad format!");
 800623e:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <uartReceiveHandler+0x1c8>)
 8006240:	0018      	movs	r0, r3
 8006242:	f005 fcbb 	bl	800bbbc <iprintf>
			Error_Handler ();
 8006246:	f7fe ff0b 	bl	8005060 <Error_Handler>
			break;
 800624a:	46c0      	nop			; (mov r8, r8)

	}

}
 800624c:	46c0      	nop			; (mov r8, r8)
 800624e:	46bd      	mov	sp, r7
 8006250:	b006      	add	sp, #24
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20000574 	.word	0x20000574
 8006258:	20000555 	.word	0x20000555
 800625c:	20000554 	.word	0x20000554
 8006260:	0800ea48 	.word	0x0800ea48
 8006264:	20000220 	.word	0x20000220
 8006268:	27112021 	.word	0x27112021
 800626c:	0800e798 	.word	0x0800e798
 8006270:	0800e7a4 	.word	0x0800e7a4

08006274 <sendConfig>:

void sendConfig (nodeSettings_t* settingsPtr)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
	printf ("<1%lu>\n", settingsPtr->realFrequency);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	4b2b      	ldr	r3, [pc, #172]	; (8006330 <sendConfig+0xbc>)
 8006282:	0011      	movs	r1, r2
 8006284:	0018      	movs	r0, r3
 8006286:	f005 fc99 	bl	800bbbc <iprintf>
	printf ("<2%u>\n", settingsPtr->sf);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	7b1b      	ldrb	r3, [r3, #12]
 800628e:	001a      	movs	r2, r3
 8006290:	4b28      	ldr	r3, [pc, #160]	; (8006334 <sendConfig+0xc0>)
 8006292:	0011      	movs	r1, r2
 8006294:	0018      	movs	r0, r3
 8006296:	f005 fc91 	bl	800bbbc <iprintf>
	printf ("<3%u>\n", settingsPtr->bw);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	7b5b      	ldrb	r3, [r3, #13]
 800629e:	001a      	movs	r2, r3
 80062a0:	4b25      	ldr	r3, [pc, #148]	; (8006338 <sendConfig+0xc4>)
 80062a2:	0011      	movs	r1, r2
 80062a4:	0018      	movs	r0, r3
 80062a6:	f005 fc89 	bl	800bbbc <iprintf>
	printf ("<4%X>\n", settingsPtr->sw);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	7b9b      	ldrb	r3, [r3, #14]
 80062ae:	001a      	movs	r2, r3
 80062b0:	4b22      	ldr	r3, [pc, #136]	; (800633c <sendConfig+0xc8>)
 80062b2:	0011      	movs	r1, r2
 80062b4:	0018      	movs	r0, r3
 80062b6:	f005 fc81 	bl	800bbbc <iprintf>
	printf ("<5%u>\n", settingsPtr->power);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	7bdb      	ldrb	r3, [r3, #15]
 80062be:	001a      	movs	r2, r3
 80062c0:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <sendConfig+0xcc>)
 80062c2:	0011      	movs	r1, r2
 80062c4:	0018      	movs	r0, r3
 80062c6:	f005 fc79 	bl	800bbbc <iprintf>
	printf ("<8%u>\n", settingsPtr->preamble);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	891b      	ldrh	r3, [r3, #8]
 80062ce:	001a      	movs	r2, r3
 80062d0:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <sendConfig+0xd0>)
 80062d2:	0011      	movs	r1, r2
 80062d4:	0018      	movs	r0, r3
 80062d6:	f005 fc71 	bl	800bbbc <iprintf>
	printf ("<9%u>\n", settingsPtr->cr);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	7adb      	ldrb	r3, [r3, #11]
 80062de:	001a      	movs	r2, r3
 80062e0:	4b19      	ldr	r3, [pc, #100]	; (8006348 <sendConfig+0xd4>)
 80062e2:	0011      	movs	r1, r2
 80062e4:	0018      	movs	r0, r3
 80062e6:	f005 fc69 	bl	800bbbc <iprintf>
	printf ("<n%u>\n", settingsPtr->nodeNum);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	7a9b      	ldrb	r3, [r3, #10]
 80062ee:	001a      	movs	r2, r3
 80062f0:	4b16      	ldr	r3, [pc, #88]	; (800634c <sendConfig+0xd8>)
 80062f2:	0011      	movs	r1, r2
 80062f4:	0018      	movs	r0, r3
 80062f6:	f005 fc61 	bl	800bbbc <iprintf>
	printf ("<i%lu>\n", settingsPtr->workInterval);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	4b14      	ldr	r3, [pc, #80]	; (8006350 <sendConfig+0xdc>)
 8006300:	0011      	movs	r1, r2
 8006302:	0018      	movs	r0, r3
 8006304:	f005 fc5a 	bl	800bbbc <iprintf>
	printf ("<L%u>\n", settingsPtr->useLed);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	7c1b      	ldrb	r3, [r3, #16]
 800630c:	001a      	movs	r2, r3
 800630e:	4b11      	ldr	r3, [pc, #68]	; (8006354 <sendConfig+0xe0>)
 8006310:	0011      	movs	r1, r2
 8006312:	0018      	movs	r0, r3
 8006314:	f005 fc52 	bl	800bbbc <iprintf>
	printf ("<d%u>\n", settingsPtr->debugLevel);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	7e1b      	ldrb	r3, [r3, #24]
 800631c:	001a      	movs	r2, r3
 800631e:	4b0e      	ldr	r3, [pc, #56]	; (8006358 <sendConfig+0xe4>)
 8006320:	0011      	movs	r1, r2
 8006322:	0018      	movs	r0, r3
 8006324:	f005 fc4a 	bl	800bbbc <iprintf>
}
 8006328:	46c0      	nop			; (mov r8, r8)
 800632a:	46bd      	mov	sp, r7
 800632c:	b002      	add	sp, #8
 800632e:	bd80      	pop	{r7, pc}
 8006330:	0800e7b0 	.word	0x0800e7b0
 8006334:	0800e7b8 	.word	0x0800e7b8
 8006338:	0800e7c0 	.word	0x0800e7c0
 800633c:	0800e7c8 	.word	0x0800e7c8
 8006340:	0800e7d0 	.word	0x0800e7d0
 8006344:	0800e7d8 	.word	0x0800e7d8
 8006348:	0800e7e0 	.word	0x0800e7e0
 800634c:	0800e7e8 	.word	0x0800e7e8
 8006350:	0800e7f0 	.word	0x0800e7f0
 8006354:	0800e7f8 	.word	0x0800e7f8
 8006358:	0800e800 	.word	0x0800e800

0800635c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800635c:	480d      	ldr	r0, [pc, #52]	; (8006394 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800635e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006360:	480d      	ldr	r0, [pc, #52]	; (8006398 <LoopForever+0x6>)
  ldr r1, =_edata
 8006362:	490e      	ldr	r1, [pc, #56]	; (800639c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006364:	4a0e      	ldr	r2, [pc, #56]	; (80063a0 <LoopForever+0xe>)
  movs r3, #0
 8006366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006368:	e002      	b.n	8006370 <LoopCopyDataInit>

0800636a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800636a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800636c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800636e:	3304      	adds	r3, #4

08006370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006374:	d3f9      	bcc.n	800636a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006376:	4a0b      	ldr	r2, [pc, #44]	; (80063a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006378:	4c0b      	ldr	r4, [pc, #44]	; (80063a8 <LoopForever+0x16>)
  movs r3, #0
 800637a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800637c:	e001      	b.n	8006382 <LoopFillZerobss>

0800637e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800637e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006380:	3204      	adds	r2, #4

08006382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006384:	d3fb      	bcc.n	800637e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006386:	f7ff fe3d 	bl	8006004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800638a:	f004 ff67 	bl	800b25c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800638e:	f7fd ff81 	bl	8004294 <main>

08006392 <LoopForever>:

LoopForever:
    b LoopForever
 8006392:	e7fe      	b.n	8006392 <LoopForever>
   ldr   r0, =_estack
 8006394:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8006398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800639c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80063a0:	0800ef7c 	.word	0x0800ef7c
  ldr r2, =_sbss
 80063a4:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80063a8:	200005a4 	.word	0x200005a4

080063ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80063ac:	e7fe      	b.n	80063ac <ADC1_COMP_IRQHandler>
	...

080063b0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80063b6:	1dfb      	adds	r3, r7, #7
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <HAL_Init+0x3c>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <HAL_Init+0x3c>)
 80063c2:	2140      	movs	r1, #64	; 0x40
 80063c4:	430a      	orrs	r2, r1
 80063c6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80063c8:	2000      	movs	r0, #0
 80063ca:	f000 f811 	bl	80063f0 <HAL_InitTick>
 80063ce:	1e03      	subs	r3, r0, #0
 80063d0:	d003      	beq.n	80063da <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80063d2:	1dfb      	adds	r3, r7, #7
 80063d4:	2201      	movs	r2, #1
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	e001      	b.n	80063de <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80063da:	f7fe fe4d 	bl	8005078 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80063de:	1dfb      	adds	r3, r7, #7
 80063e0:	781b      	ldrb	r3, [r3, #0]
}
 80063e2:	0018      	movs	r0, r3
 80063e4:	46bd      	mov	sp, r7
 80063e6:	b002      	add	sp, #8
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	40022000 	.word	0x40022000

080063f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063f0:	b590      	push	{r4, r7, lr}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80063f8:	4b14      	ldr	r3, [pc, #80]	; (800644c <HAL_InitTick+0x5c>)
 80063fa:	681c      	ldr	r4, [r3, #0]
 80063fc:	4b14      	ldr	r3, [pc, #80]	; (8006450 <HAL_InitTick+0x60>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	0019      	movs	r1, r3
 8006402:	23fa      	movs	r3, #250	; 0xfa
 8006404:	0098      	lsls	r0, r3, #2
 8006406:	f7f9 fe9b 	bl	8000140 <__udivsi3>
 800640a:	0003      	movs	r3, r0
 800640c:	0019      	movs	r1, r3
 800640e:	0020      	movs	r0, r4
 8006410:	f7f9 fe96 	bl	8000140 <__udivsi3>
 8006414:	0003      	movs	r3, r0
 8006416:	0018      	movs	r0, r3
 8006418:	f000 fd7b 	bl	8006f12 <HAL_SYSTICK_Config>
 800641c:	1e03      	subs	r3, r0, #0
 800641e:	d001      	beq.n	8006424 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e00f      	b.n	8006444 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b03      	cmp	r3, #3
 8006428:	d80b      	bhi.n	8006442 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	2301      	movs	r3, #1
 800642e:	425b      	negs	r3, r3
 8006430:	2200      	movs	r2, #0
 8006432:	0018      	movs	r0, r3
 8006434:	f000 fd48 	bl	8006ec8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006438:	4b06      	ldr	r3, [pc, #24]	; (8006454 <HAL_InitTick+0x64>)
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	e000      	b.n	8006444 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
}
 8006444:	0018      	movs	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	b003      	add	sp, #12
 800644a:	bd90      	pop	{r4, r7, pc}
 800644c:	20000024 	.word	0x20000024
 8006450:	2000002c 	.word	0x2000002c
 8006454:	20000028 	.word	0x20000028

08006458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800645c:	4b05      	ldr	r3, [pc, #20]	; (8006474 <HAL_IncTick+0x1c>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	001a      	movs	r2, r3
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <HAL_IncTick+0x20>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	18d2      	adds	r2, r2, r3
 8006468:	4b03      	ldr	r3, [pc, #12]	; (8006478 <HAL_IncTick+0x20>)
 800646a:	601a      	str	r2, [r3, #0]
}
 800646c:	46c0      	nop			; (mov r8, r8)
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	2000002c 	.word	0x2000002c
 8006478:	20000578 	.word	0x20000578

0800647c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  return uwTick;
 8006480:	4b02      	ldr	r3, [pc, #8]	; (800648c <HAL_GetTick+0x10>)
 8006482:	681b      	ldr	r3, [r3, #0]
}
 8006484:	0018      	movs	r0, r3
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	20000578 	.word	0x20000578

08006490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006498:	f7ff fff0 	bl	800647c <HAL_GetTick>
 800649c:	0003      	movs	r3, r0
 800649e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3301      	adds	r3, #1
 80064a8:	d005      	beq.n	80064b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80064aa:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <HAL_Delay+0x44>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	001a      	movs	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	189b      	adds	r3, r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	f7ff ffe0 	bl	800647c <HAL_GetTick>
 80064bc:	0002      	movs	r2, r0
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d8f7      	bhi.n	80064b8 <HAL_Delay+0x28>
  {
  }
}
 80064c8:	46c0      	nop			; (mov r8, r8)
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	46bd      	mov	sp, r7
 80064ce:	b004      	add	sp, #16
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	2000002c 	.word	0x2000002c

080064d8 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80064dc:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	4b03      	ldr	r3, [pc, #12]	; (80064f0 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 80064e2:	2102      	movs	r1, #2
 80064e4:	438a      	bics	r2, r1
 80064e6:	605a      	str	r2, [r3, #4]
}
 80064e8:	46c0      	nop			; (mov r8, r8)
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	40015800 	.word	0x40015800

080064f4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e159      	b.n	80067ba <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2250      	movs	r2, #80	; 0x50
 8006518:	2100      	movs	r1, #0
 800651a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	0018      	movs	r0, r3
 8006520:	f7fe fdbe 	bl	80050a0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006528:	2210      	movs	r2, #16
 800652a:	4013      	ands	r3, r2
 800652c:	2b10      	cmp	r3, #16
 800652e:	d005      	beq.n	800653c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2204      	movs	r2, #4
 8006538:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800653a:	d00b      	beq.n	8006554 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006540:	2210      	movs	r2, #16
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2250      	movs	r2, #80	; 0x50
 800654c:	2100      	movs	r1, #0
 800654e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e132      	b.n	80067ba <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006558:	4a9a      	ldr	r2, [pc, #616]	; (80067c4 <HAL_ADC_Init+0x2d0>)
 800655a:	4013      	ands	r3, r2
 800655c:	2202      	movs	r2, #2
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	2203      	movs	r2, #3
 800656c:	4013      	ands	r3, r2
 800656e:	2b01      	cmp	r3, #1
 8006570:	d108      	bne.n	8006584 <HAL_ADC_Init+0x90>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2201      	movs	r2, #1
 800657a:	4013      	ands	r3, r2
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_ADC_Init+0x90>
 8006580:	2301      	movs	r3, #1
 8006582:	e000      	b.n	8006586 <HAL_ADC_Init+0x92>
 8006584:	2300      	movs	r3, #0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d149      	bne.n	800661e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	23c0      	movs	r3, #192	; 0xc0
 8006590:	061b      	lsls	r3, r3, #24
 8006592:	429a      	cmp	r2, r3
 8006594:	d00b      	beq.n	80065ae <HAL_ADC_Init+0xba>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	2380      	movs	r3, #128	; 0x80
 800659c:	05db      	lsls	r3, r3, #23
 800659e:	429a      	cmp	r2, r3
 80065a0:	d005      	beq.n	80065ae <HAL_ADC_Init+0xba>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	2380      	movs	r3, #128	; 0x80
 80065a8:	061b      	lsls	r3, r3, #24
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d111      	bne.n	80065d2 <HAL_ADC_Init+0xde>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	0092      	lsls	r2, r2, #2
 80065ba:	0892      	lsrs	r2, r2, #2
 80065bc:	611a      	str	r2, [r3, #16]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6919      	ldr	r1, [r3, #16]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	611a      	str	r2, [r3, #16]
 80065d0:	e014      	b.n	80065fc <HAL_ADC_Init+0x108>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	0092      	lsls	r2, r2, #2
 80065de:	0892      	lsrs	r2, r2, #2
 80065e0:	611a      	str	r2, [r3, #16]
 80065e2:	4b79      	ldr	r3, [pc, #484]	; (80067c8 <HAL_ADC_Init+0x2d4>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4b78      	ldr	r3, [pc, #480]	; (80067c8 <HAL_ADC_Init+0x2d4>)
 80065e8:	4978      	ldr	r1, [pc, #480]	; (80067cc <HAL_ADC_Init+0x2d8>)
 80065ea:	400a      	ands	r2, r1
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	4b76      	ldr	r3, [pc, #472]	; (80067c8 <HAL_ADC_Init+0x2d4>)
 80065f0:	6819      	ldr	r1, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	4b74      	ldr	r3, [pc, #464]	; (80067c8 <HAL_ADC_Init+0x2d4>)
 80065f8:	430a      	orrs	r2, r1
 80065fa:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2118      	movs	r1, #24
 8006608:	438a      	bics	r2, r1
 800660a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68d9      	ldr	r1, [r3, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800661e:	4b6a      	ldr	r3, [pc, #424]	; (80067c8 <HAL_ADC_Init+0x2d4>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	4b69      	ldr	r3, [pc, #420]	; (80067c8 <HAL_ADC_Init+0x2d4>)
 8006624:	496a      	ldr	r1, [pc, #424]	; (80067d0 <HAL_ADC_Init+0x2dc>)
 8006626:	400a      	ands	r2, r1
 8006628:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800662a:	4b67      	ldr	r3, [pc, #412]	; (80067c8 <HAL_ADC_Init+0x2d4>)
 800662c:	6819      	ldr	r1, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006632:	065a      	lsls	r2, r3, #25
 8006634:	4b64      	ldr	r3, [pc, #400]	; (80067c8 <HAL_ADC_Init+0x2d4>)
 8006636:	430a      	orrs	r2, r1
 8006638:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	2380      	movs	r3, #128	; 0x80
 8006642:	055b      	lsls	r3, r3, #21
 8006644:	4013      	ands	r3, r2
 8006646:	d108      	bne.n	800665a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2180      	movs	r1, #128	; 0x80
 8006654:	0549      	lsls	r1, r1, #21
 8006656:	430a      	orrs	r2, r1
 8006658:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	495b      	ldr	r1, [pc, #364]	; (80067d4 <HAL_ADC_Init+0x2e0>)
 8006666:	400a      	ands	r2, r1
 8006668:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68d9      	ldr	r1, [r3, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b02      	cmp	r3, #2
 800667a:	d101      	bne.n	8006680 <HAL_ADC_Init+0x18c>
 800667c:	2304      	movs	r3, #4
 800667e:	e000      	b.n	8006682 <HAL_ADC_Init+0x18e>
 8006680:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006682:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2020      	movs	r0, #32
 8006688:	5c1b      	ldrb	r3, [r3, r0]
 800668a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800668c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	202c      	movs	r0, #44	; 0x2c
 8006692:	5c1b      	ldrb	r3, [r3, r0]
 8006694:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006696:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800669c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80066a4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80066ac:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ba:	23c2      	movs	r3, #194	; 0xc2
 80066bc:	33ff      	adds	r3, #255	; 0xff
 80066be:	429a      	cmp	r2, r3
 80066c0:	d00b      	beq.n	80066da <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68d9      	ldr	r1, [r3, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80066d0:	431a      	orrs	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2221      	movs	r2, #33	; 0x21
 80066de:	5c9b      	ldrb	r3, [r3, r2]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d11a      	bne.n	800671a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	5c9b      	ldrb	r3, [r3, r2]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2180      	movs	r1, #128	; 0x80
 80066fa:	0249      	lsls	r1, r1, #9
 80066fc:	430a      	orrs	r2, r1
 80066fe:	60da      	str	r2, [r3, #12]
 8006700:	e00b      	b.n	800671a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	2220      	movs	r2, #32
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006712:	2201      	movs	r2, #1
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671e:	2b01      	cmp	r3, #1
 8006720:	d11f      	bne.n	8006762 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	492a      	ldr	r1, [pc, #168]	; (80067d8 <HAL_ADC_Init+0x2e4>)
 800672e:	400a      	ands	r2, r1
 8006730:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6919      	ldr	r1, [r3, #16]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006740:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8006746:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2101      	movs	r1, #1
 800675c:	430a      	orrs	r2, r1
 800675e:	611a      	str	r2, [r3, #16]
 8006760:	e00e      	b.n	8006780 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	2201      	movs	r2, #1
 800676a:	4013      	ands	r3, r2
 800676c:	2b01      	cmp	r3, #1
 800676e:	d107      	bne.n	8006780 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691a      	ldr	r2, [r3, #16]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2101      	movs	r1, #1
 800677c:	438a      	bics	r2, r1
 800677e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2107      	movs	r1, #7
 800678c:	438a      	bics	r2, r1
 800678e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6959      	ldr	r1, [r3, #20]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ac:	2203      	movs	r2, #3
 80067ae:	4393      	bics	r3, r2
 80067b0:	2201      	movs	r2, #1
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	0018      	movs	r0, r3
 80067bc:	46bd      	mov	sp, r7
 80067be:	b002      	add	sp, #8
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	fffffefd 	.word	0xfffffefd
 80067c8:	40012708 	.word	0x40012708
 80067cc:	ffc3ffff 	.word	0xffc3ffff
 80067d0:	fdffffff 	.word	0xfdffffff
 80067d4:	fffe0219 	.word	0xfffe0219
 80067d8:	fffffc03 	.word	0xfffffc03

080067dc <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80067dc:	b590      	push	{r4, r7, lr}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067e8:	2317      	movs	r3, #23
 80067ea:	18fb      	adds	r3, r7, r3
 80067ec:	2200      	movs	r2, #0
 80067ee:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2204      	movs	r2, #4
 80067f8:	4013      	ands	r3, r2
 80067fa:	d15e      	bne.n	80068ba <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2250      	movs	r2, #80	; 0x50
 8006800:	5c9b      	ldrb	r3, [r3, r2]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HAL_ADC_Start_DMA+0x2e>
 8006806:	2302      	movs	r3, #2
 8006808:	e05e      	b.n	80068c8 <HAL_ADC_Start_DMA+0xec>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2250      	movs	r2, #80	; 0x50
 800680e:	2101      	movs	r1, #1
 8006810:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2101      	movs	r1, #1
 800681e:	430a      	orrs	r2, r1
 8006820:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d007      	beq.n	800683a <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800682a:	2317      	movs	r3, #23
 800682c:	18fc      	adds	r4, r7, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	0018      	movs	r0, r3
 8006832:	f000 f8f3 	bl	8006a1c <ADC_Enable>
 8006836:	0003      	movs	r3, r0
 8006838:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800683a:	2317      	movs	r3, #23
 800683c:	18fb      	adds	r3, r7, r3
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d13e      	bne.n	80068c2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006848:	4a21      	ldr	r2, [pc, #132]	; (80068d0 <HAL_ADC_Start_DMA+0xf4>)
 800684a:	4013      	ands	r3, r2
 800684c:	2280      	movs	r2, #128	; 0x80
 800684e:	0052      	lsls	r2, r2, #1
 8006850:	431a      	orrs	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2250      	movs	r2, #80	; 0x50
 8006860:	2100      	movs	r1, #0
 8006862:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006868:	4a1a      	ldr	r2, [pc, #104]	; (80068d4 <HAL_ADC_Start_DMA+0xf8>)
 800686a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006870:	4a19      	ldr	r2, [pc, #100]	; (80068d8 <HAL_ADC_Start_DMA+0xfc>)
 8006872:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006878:	4a18      	ldr	r2, [pc, #96]	; (80068dc <HAL_ADC_Start_DMA+0x100>)
 800687a:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	221c      	movs	r2, #28
 8006882:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2110      	movs	r1, #16
 8006890:	430a      	orrs	r2, r1
 8006892:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3340      	adds	r3, #64	; 0x40
 800689e:	0019      	movs	r1, r3
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f000 fbba 	bl	800701c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2104      	movs	r1, #4
 80068b4:	430a      	orrs	r2, r1
 80068b6:	609a      	str	r2, [r3, #8]
 80068b8:	e003      	b.n	80068c2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80068ba:	2317      	movs	r3, #23
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	2202      	movs	r2, #2
 80068c0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80068c2:	2317      	movs	r3, #23
 80068c4:	18fb      	adds	r3, r7, r3
 80068c6:	781b      	ldrb	r3, [r3, #0]
}
 80068c8:	0018      	movs	r0, r3
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b007      	add	sp, #28
 80068ce:	bd90      	pop	{r4, r7, pc}
 80068d0:	fffff0fe 	.word	0xfffff0fe
 80068d4:	08006aed 	.word	0x08006aed
 80068d8:	08006ba1 	.word	0x08006ba1
 80068dc:	08006bbf 	.word	0x08006bbf

080068e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80068e8:	46c0      	nop			; (mov r8, r8)
 80068ea:	46bd      	mov	sp, r7
 80068ec:	b002      	add	sp, #8
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80068f8:	46c0      	nop			; (mov r8, r8)
 80068fa:	46bd      	mov	sp, r7
 80068fc:	b002      	add	sp, #8
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006908:	46c0      	nop			; (mov r8, r8)
 800690a:	46bd      	mov	sp, r7
 800690c:	b002      	add	sp, #8
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2250      	movs	r2, #80	; 0x50
 800691e:	5c9b      	ldrb	r3, [r3, r2]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_ADC_ConfigChannel+0x18>
 8006924:	2302      	movs	r3, #2
 8006926:	e06c      	b.n	8006a02 <HAL_ADC_ConfigChannel+0xf2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2250      	movs	r2, #80	; 0x50
 800692c:	2101      	movs	r1, #1
 800692e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2204      	movs	r2, #4
 8006938:	4013      	ands	r3, r2
 800693a:	d00b      	beq.n	8006954 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006940:	2220      	movs	r2, #32
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2250      	movs	r2, #80	; 0x50
 800694c:	2100      	movs	r1, #0
 800694e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e056      	b.n	8006a02 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	4a2c      	ldr	r2, [pc, #176]	; (8006a0c <HAL_ADC_ConfigChannel+0xfc>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d028      	beq.n	80069b0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	035b      	lsls	r3, r3, #13
 800696a:	0b5a      	lsrs	r2, r3, #13
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	2380      	movs	r3, #128	; 0x80
 800697a:	02db      	lsls	r3, r3, #11
 800697c:	4013      	ands	r3, r2
 800697e:	d009      	beq.n	8006994 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006980:	4b23      	ldr	r3, [pc, #140]	; (8006a10 <HAL_ADC_ConfigChannel+0x100>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	4b22      	ldr	r3, [pc, #136]	; (8006a10 <HAL_ADC_ConfigChannel+0x100>)
 8006986:	2180      	movs	r1, #128	; 0x80
 8006988:	0409      	lsls	r1, r1, #16
 800698a:	430a      	orrs	r2, r1
 800698c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800698e:	200a      	movs	r0, #10
 8006990:	f000 f930 	bl	8006bf4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	2380      	movs	r3, #128	; 0x80
 800699a:	029b      	lsls	r3, r3, #10
 800699c:	4013      	ands	r3, r2
 800699e:	d02b      	beq.n	80069f8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80069a0:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <HAL_ADC_ConfigChannel+0x100>)
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	4b1a      	ldr	r3, [pc, #104]	; (8006a10 <HAL_ADC_ConfigChannel+0x100>)
 80069a6:	2180      	movs	r1, #128	; 0x80
 80069a8:	03c9      	lsls	r1, r1, #15
 80069aa:	430a      	orrs	r2, r1
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e023      	b.n	80069f8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	035b      	lsls	r3, r3, #13
 80069bc:	0b5b      	lsrs	r3, r3, #13
 80069be:	43d9      	mvns	r1, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	400a      	ands	r2, r1
 80069c6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	2380      	movs	r3, #128	; 0x80
 80069ce:	02db      	lsls	r3, r3, #11
 80069d0:	4013      	ands	r3, r2
 80069d2:	d005      	beq.n	80069e0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80069d4:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <HAL_ADC_ConfigChannel+0x100>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <HAL_ADC_ConfigChannel+0x100>)
 80069da:	490e      	ldr	r1, [pc, #56]	; (8006a14 <HAL_ADC_ConfigChannel+0x104>)
 80069dc:	400a      	ands	r2, r1
 80069de:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	2380      	movs	r3, #128	; 0x80
 80069e6:	029b      	lsls	r3, r3, #10
 80069e8:	4013      	ands	r3, r2
 80069ea:	d005      	beq.n	80069f8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80069ec:	4b08      	ldr	r3, [pc, #32]	; (8006a10 <HAL_ADC_ConfigChannel+0x100>)
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <HAL_ADC_ConfigChannel+0x100>)
 80069f2:	4909      	ldr	r1, [pc, #36]	; (8006a18 <HAL_ADC_ConfigChannel+0x108>)
 80069f4:	400a      	ands	r2, r1
 80069f6:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2250      	movs	r2, #80	; 0x50
 80069fc:	2100      	movs	r1, #0
 80069fe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	0018      	movs	r0, r3
 8006a04:	46bd      	mov	sp, r7
 8006a06:	b002      	add	sp, #8
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	00001001 	.word	0x00001001
 8006a10:	40012708 	.word	0x40012708
 8006a14:	ff7fffff 	.word	0xff7fffff
 8006a18:	ffbfffff 	.word	0xffbfffff

08006a1c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2203      	movs	r2, #3
 8006a30:	4013      	ands	r3, r2
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d108      	bne.n	8006a48 <ADC_Enable+0x2c>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	4013      	ands	r3, r2
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <ADC_Enable+0x2c>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <ADC_Enable+0x2e>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d146      	bne.n	8006adc <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	4a24      	ldr	r2, [pc, #144]	; (8006ae8 <ADC_Enable+0xcc>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	d00d      	beq.n	8006a76 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5e:	2210      	movs	r2, #16
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e033      	b.n	8006ade <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2101      	movs	r1, #1
 8006a82:	430a      	orrs	r2, r1
 8006a84:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006a86:	2001      	movs	r0, #1
 8006a88:	f000 f8b4 	bl	8006bf4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006a8c:	f7ff fcf6 	bl	800647c <HAL_GetTick>
 8006a90:	0003      	movs	r3, r0
 8006a92:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006a94:	e01b      	b.n	8006ace <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a96:	f7ff fcf1 	bl	800647c <HAL_GetTick>
 8006a9a:	0002      	movs	r2, r0
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b0a      	cmp	r3, #10
 8006aa2:	d914      	bls.n	8006ace <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d00d      	beq.n	8006ace <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab6:	2210      	movs	r2, #16
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e007      	b.n	8006ade <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d1dc      	bne.n	8006a96 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	0018      	movs	r0, r3
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b004      	add	sp, #16
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	80000017 	.word	0x80000017

08006aec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	2250      	movs	r2, #80	; 0x50
 8006b00:	4013      	ands	r3, r2
 8006b02:	d141      	bne.n	8006b88 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b08:	2280      	movs	r2, #128	; 0x80
 8006b0a:	0092      	lsls	r2, r2, #2
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	23c0      	movs	r3, #192	; 0xc0
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	d12e      	bne.n	8006b7e <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2220      	movs	r2, #32
 8006b24:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d129      	bne.n	8006b7e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2208      	movs	r2, #8
 8006b32:	4013      	ands	r3, r2
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d122      	bne.n	8006b7e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2204      	movs	r2, #4
 8006b40:	4013      	ands	r3, r2
 8006b42:	d110      	bne.n	8006b66 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	210c      	movs	r1, #12
 8006b50:	438a      	bics	r2, r1
 8006b52:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b58:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <ADC_DMAConvCplt+0xb0>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	655a      	str	r2, [r3, #84]	; 0x54
 8006b64:	e00b      	b.n	8006b7e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b76:	2201      	movs	r2, #1
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	0018      	movs	r0, r3
 8006b82:	f7ff fead 	bl	80068e0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006b86:	e005      	b.n	8006b94 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	0010      	movs	r0, r2
 8006b92:	4798      	blx	r3
}
 8006b94:	46c0      	nop			; (mov r8, r8)
 8006b96:	46bd      	mov	sp, r7
 8006b98:	b004      	add	sp, #16
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	fffffefe 	.word	0xfffffefe

08006ba0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f7ff fe9d 	bl	80068f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	b004      	add	sp, #16
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd0:	2240      	movs	r2, #64	; 0x40
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bdc:	2204      	movs	r2, #4
 8006bde:	431a      	orrs	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	0018      	movs	r0, r3
 8006be8:	f7ff fe8a 	bl	8006900 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bec:	46c0      	nop			; (mov r8, r8)
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	b004      	add	sp, #16
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006bfc:	4b0b      	ldr	r3, [pc, #44]	; (8006c2c <ADC_DelayMicroSecond+0x38>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	490b      	ldr	r1, [pc, #44]	; (8006c30 <ADC_DelayMicroSecond+0x3c>)
 8006c02:	0018      	movs	r0, r3
 8006c04:	f7f9 fa9c 	bl	8000140 <__udivsi3>
 8006c08:	0003      	movs	r3, r0
 8006c0a:	001a      	movs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4353      	muls	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8006c12:	e002      	b.n	8006c1a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1f9      	bne.n	8006c14 <ADC_DelayMicroSecond+0x20>
  } 
}
 8006c20:	46c0      	nop			; (mov r8, r8)
 8006c22:	46c0      	nop			; (mov r8, r8)
 8006c24:	46bd      	mov	sp, r7
 8006c26:	b004      	add	sp, #16
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	20000024 	.word	0x20000024
 8006c30:	000f4240 	.word	0x000f4240

08006c34 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c3e:	2317      	movs	r3, #23
 8006c40:	18fb      	adds	r3, r7, r3
 8006c42:	2200      	movs	r2, #0
 8006c44:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2250      	movs	r2, #80	; 0x50
 8006c52:	5c9b      	ldrb	r3, [r3, r2]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_ADCEx_Calibration_Start+0x28>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e083      	b.n	8006d64 <HAL_ADCEx_Calibration_Start+0x130>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2250      	movs	r2, #80	; 0x50
 8006c60:	2101      	movs	r1, #1
 8006c62:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d108      	bne.n	8006c84 <HAL_ADCEx_Calibration_Start+0x50>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d101      	bne.n	8006c84 <HAL_ADCEx_Calibration_Start+0x50>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e000      	b.n	8006c86 <HAL_ADCEx_Calibration_Start+0x52>
 8006c84:	2300      	movs	r3, #0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d15b      	bne.n	8006d42 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8e:	4a37      	ldr	r2, [pc, #220]	; (8006d6c <HAL_ADCEx_Calibration_Start+0x138>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	2202      	movs	r2, #2
 8006c94:	431a      	orrs	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	2203      	movs	r2, #3
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2103      	movs	r1, #3
 8006cb2:	438a      	bics	r2, r1
 8006cb4:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2180      	movs	r1, #128	; 0x80
 8006cc2:	0609      	lsls	r1, r1, #24
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006cc8:	f7ff fbd8 	bl	800647c <HAL_GetTick>
 8006ccc:	0003      	movs	r3, r0
 8006cce:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006cd0:	e01d      	b.n	8006d0e <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006cd2:	f7ff fbd3 	bl	800647c <HAL_GetTick>
 8006cd6:	0002      	movs	r2, r0
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b0a      	cmp	r3, #10
 8006cde:	d916      	bls.n	8006d0e <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	0fdb      	lsrs	r3, r3, #31
 8006ce8:	07da      	lsls	r2, r3, #31
 8006cea:	2380      	movs	r3, #128	; 0x80
 8006cec:	061b      	lsls	r3, r3, #24
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d10d      	bne.n	8006d0e <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf6:	2212      	movs	r2, #18
 8006cf8:	4393      	bics	r3, r2
 8006cfa:	2210      	movs	r2, #16
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2250      	movs	r2, #80	; 0x50
 8006d06:	2100      	movs	r1, #0
 8006d08:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e02a      	b.n	8006d64 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	0fdb      	lsrs	r3, r3, #31
 8006d16:	07da      	lsls	r2, r3, #31
 8006d18:	2380      	movs	r3, #128	; 0x80
 8006d1a:	061b      	lsls	r3, r3, #24
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d0d8      	beq.n	8006cd2 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68d9      	ldr	r1, [r3, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d34:	2203      	movs	r2, #3
 8006d36:	4393      	bics	r3, r2
 8006d38:	2201      	movs	r2, #1
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	655a      	str	r2, [r3, #84]	; 0x54
 8006d40:	e009      	b.n	8006d56 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d46:	2220      	movs	r2, #32
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8006d4e:	2317      	movs	r3, #23
 8006d50:	18fb      	adds	r3, r7, r3
 8006d52:	2201      	movs	r2, #1
 8006d54:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2250      	movs	r2, #80	; 0x50
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006d5e:	2317      	movs	r3, #23
 8006d60:	18fb      	adds	r3, r7, r3
 8006d62:	781b      	ldrb	r3, [r3, #0]
}
 8006d64:	0018      	movs	r0, r3
 8006d66:	46bd      	mov	sp, r7
 8006d68:	b006      	add	sp, #24
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	fffffefd 	.word	0xfffffefd

08006d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	0002      	movs	r2, r0
 8006d78:	1dfb      	adds	r3, r7, #7
 8006d7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006d7c:	1dfb      	adds	r3, r7, #7
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b7f      	cmp	r3, #127	; 0x7f
 8006d82:	d809      	bhi.n	8006d98 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d84:	1dfb      	adds	r3, r7, #7
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	001a      	movs	r2, r3
 8006d8a:	231f      	movs	r3, #31
 8006d8c:	401a      	ands	r2, r3
 8006d8e:	4b04      	ldr	r3, [pc, #16]	; (8006da0 <__NVIC_EnableIRQ+0x30>)
 8006d90:	2101      	movs	r1, #1
 8006d92:	4091      	lsls	r1, r2
 8006d94:	000a      	movs	r2, r1
 8006d96:	601a      	str	r2, [r3, #0]
  }
}
 8006d98:	46c0      	nop			; (mov r8, r8)
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	b002      	add	sp, #8
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	e000e100 	.word	0xe000e100

08006da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006da4:	b590      	push	{r4, r7, lr}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	0002      	movs	r2, r0
 8006dac:	6039      	str	r1, [r7, #0]
 8006dae:	1dfb      	adds	r3, r7, #7
 8006db0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006db2:	1dfb      	adds	r3, r7, #7
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b7f      	cmp	r3, #127	; 0x7f
 8006db8:	d828      	bhi.n	8006e0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006dba:	4a2f      	ldr	r2, [pc, #188]	; (8006e78 <__NVIC_SetPriority+0xd4>)
 8006dbc:	1dfb      	adds	r3, r7, #7
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	b25b      	sxtb	r3, r3
 8006dc2:	089b      	lsrs	r3, r3, #2
 8006dc4:	33c0      	adds	r3, #192	; 0xc0
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	589b      	ldr	r3, [r3, r2]
 8006dca:	1dfa      	adds	r2, r7, #7
 8006dcc:	7812      	ldrb	r2, [r2, #0]
 8006dce:	0011      	movs	r1, r2
 8006dd0:	2203      	movs	r2, #3
 8006dd2:	400a      	ands	r2, r1
 8006dd4:	00d2      	lsls	r2, r2, #3
 8006dd6:	21ff      	movs	r1, #255	; 0xff
 8006dd8:	4091      	lsls	r1, r2
 8006dda:	000a      	movs	r2, r1
 8006ddc:	43d2      	mvns	r2, r2
 8006dde:	401a      	ands	r2, r3
 8006de0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	019b      	lsls	r3, r3, #6
 8006de6:	22ff      	movs	r2, #255	; 0xff
 8006de8:	401a      	ands	r2, r3
 8006dea:	1dfb      	adds	r3, r7, #7
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	0018      	movs	r0, r3
 8006df0:	2303      	movs	r3, #3
 8006df2:	4003      	ands	r3, r0
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006df8:	481f      	ldr	r0, [pc, #124]	; (8006e78 <__NVIC_SetPriority+0xd4>)
 8006dfa:	1dfb      	adds	r3, r7, #7
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	b25b      	sxtb	r3, r3
 8006e00:	089b      	lsrs	r3, r3, #2
 8006e02:	430a      	orrs	r2, r1
 8006e04:	33c0      	adds	r3, #192	; 0xc0
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006e0a:	e031      	b.n	8006e70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e0c:	4a1b      	ldr	r2, [pc, #108]	; (8006e7c <__NVIC_SetPriority+0xd8>)
 8006e0e:	1dfb      	adds	r3, r7, #7
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	0019      	movs	r1, r3
 8006e14:	230f      	movs	r3, #15
 8006e16:	400b      	ands	r3, r1
 8006e18:	3b08      	subs	r3, #8
 8006e1a:	089b      	lsrs	r3, r3, #2
 8006e1c:	3306      	adds	r3, #6
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	18d3      	adds	r3, r2, r3
 8006e22:	3304      	adds	r3, #4
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	1dfa      	adds	r2, r7, #7
 8006e28:	7812      	ldrb	r2, [r2, #0]
 8006e2a:	0011      	movs	r1, r2
 8006e2c:	2203      	movs	r2, #3
 8006e2e:	400a      	ands	r2, r1
 8006e30:	00d2      	lsls	r2, r2, #3
 8006e32:	21ff      	movs	r1, #255	; 0xff
 8006e34:	4091      	lsls	r1, r2
 8006e36:	000a      	movs	r2, r1
 8006e38:	43d2      	mvns	r2, r2
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	019b      	lsls	r3, r3, #6
 8006e42:	22ff      	movs	r2, #255	; 0xff
 8006e44:	401a      	ands	r2, r3
 8006e46:	1dfb      	adds	r3, r7, #7
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	4003      	ands	r3, r0
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e54:	4809      	ldr	r0, [pc, #36]	; (8006e7c <__NVIC_SetPriority+0xd8>)
 8006e56:	1dfb      	adds	r3, r7, #7
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	001c      	movs	r4, r3
 8006e5c:	230f      	movs	r3, #15
 8006e5e:	4023      	ands	r3, r4
 8006e60:	3b08      	subs	r3, #8
 8006e62:	089b      	lsrs	r3, r3, #2
 8006e64:	430a      	orrs	r2, r1
 8006e66:	3306      	adds	r3, #6
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	18c3      	adds	r3, r0, r3
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	601a      	str	r2, [r3, #0]
}
 8006e70:	46c0      	nop			; (mov r8, r8)
 8006e72:	46bd      	mov	sp, r7
 8006e74:	b003      	add	sp, #12
 8006e76:	bd90      	pop	{r4, r7, pc}
 8006e78:	e000e100 	.word	0xe000e100
 8006e7c:	e000ed00 	.word	0xe000ed00

08006e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	1e5a      	subs	r2, r3, #1
 8006e8c:	2380      	movs	r3, #128	; 0x80
 8006e8e:	045b      	lsls	r3, r3, #17
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d301      	bcc.n	8006e98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e94:	2301      	movs	r3, #1
 8006e96:	e010      	b.n	8006eba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <SysTick_Config+0x44>)
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	3a01      	subs	r2, #1
 8006e9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	425b      	negs	r3, r3
 8006ea4:	2103      	movs	r1, #3
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7ff ff7c 	bl	8006da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006eac:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <SysTick_Config+0x44>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006eb2:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <SysTick_Config+0x44>)
 8006eb4:	2207      	movs	r2, #7
 8006eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	0018      	movs	r0, r3
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	b002      	add	sp, #8
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	46c0      	nop			; (mov r8, r8)
 8006ec4:	e000e010 	.word	0xe000e010

08006ec8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60b9      	str	r1, [r7, #8]
 8006ed0:	607a      	str	r2, [r7, #4]
 8006ed2:	210f      	movs	r1, #15
 8006ed4:	187b      	adds	r3, r7, r1
 8006ed6:	1c02      	adds	r2, r0, #0
 8006ed8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	187b      	adds	r3, r7, r1
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b25b      	sxtb	r3, r3
 8006ee2:	0011      	movs	r1, r2
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f7ff ff5d 	bl	8006da4 <__NVIC_SetPriority>
}
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	46bd      	mov	sp, r7
 8006eee:	b004      	add	sp, #16
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	0002      	movs	r2, r0
 8006efa:	1dfb      	adds	r3, r7, #7
 8006efc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006efe:	1dfb      	adds	r3, r7, #7
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	b25b      	sxtb	r3, r3
 8006f04:	0018      	movs	r0, r3
 8006f06:	f7ff ff33 	bl	8006d70 <__NVIC_EnableIRQ>
}
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	b002      	add	sp, #8
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b082      	sub	sp, #8
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f7ff ffaf 	bl	8006e80 <SysTick_Config>
 8006f22:	0003      	movs	r3, r0
}
 8006f24:	0018      	movs	r0, r3
 8006f26:	46bd      	mov	sp, r7
 8006f28:	b002      	add	sp, #8
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e061      	b.n	8007002 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a32      	ldr	r2, [pc, #200]	; (800700c <HAL_DMA_Init+0xe0>)
 8006f44:	4694      	mov	ip, r2
 8006f46:	4463      	add	r3, ip
 8006f48:	2114      	movs	r1, #20
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	f7f9 f8f8 	bl	8000140 <__udivsi3>
 8006f50:	0003      	movs	r3, r0
 8006f52:	009a      	lsls	r2, r3, #2
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a2d      	ldr	r2, [pc, #180]	; (8007010 <HAL_DMA_Init+0xe4>)
 8006f5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2225      	movs	r2, #37	; 0x25
 8006f62:	2102      	movs	r1, #2
 8006f64:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4a28      	ldr	r2, [pc, #160]	; (8007014 <HAL_DMA_Init+0xe8>)
 8006f72:	4013      	ands	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	2380      	movs	r3, #128	; 0x80
 8006fb2:	01db      	lsls	r3, r3, #7
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d018      	beq.n	8006fea <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006fb8:	4b17      	ldr	r3, [pc, #92]	; (8007018 <HAL_DMA_Init+0xec>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc0:	211c      	movs	r1, #28
 8006fc2:	400b      	ands	r3, r1
 8006fc4:	210f      	movs	r1, #15
 8006fc6:	4099      	lsls	r1, r3
 8006fc8:	000b      	movs	r3, r1
 8006fca:	43d9      	mvns	r1, r3
 8006fcc:	4b12      	ldr	r3, [pc, #72]	; (8007018 <HAL_DMA_Init+0xec>)
 8006fce:	400a      	ands	r2, r1
 8006fd0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006fd2:	4b11      	ldr	r3, [pc, #68]	; (8007018 <HAL_DMA_Init+0xec>)
 8006fd4:	6819      	ldr	r1, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fde:	201c      	movs	r0, #28
 8006fe0:	4003      	ands	r3, r0
 8006fe2:	409a      	lsls	r2, r3
 8006fe4:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <HAL_DMA_Init+0xec>)
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2225      	movs	r2, #37	; 0x25
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2224      	movs	r2, #36	; 0x24
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	0018      	movs	r0, r3
 8007004:	46bd      	mov	sp, r7
 8007006:	b004      	add	sp, #16
 8007008:	bd80      	pop	{r7, pc}
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	bffdfff8 	.word	0xbffdfff8
 8007010:	40020000 	.word	0x40020000
 8007014:	ffff800f 	.word	0xffff800f
 8007018:	400200a8 	.word	0x400200a8

0800701c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800702a:	2317      	movs	r3, #23
 800702c:	18fb      	adds	r3, r7, r3
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2224      	movs	r2, #36	; 0x24
 8007036:	5c9b      	ldrb	r3, [r3, r2]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d101      	bne.n	8007040 <HAL_DMA_Start_IT+0x24>
 800703c:	2302      	movs	r3, #2
 800703e:	e04f      	b.n	80070e0 <HAL_DMA_Start_IT+0xc4>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2224      	movs	r2, #36	; 0x24
 8007044:	2101      	movs	r1, #1
 8007046:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2225      	movs	r2, #37	; 0x25
 800704c:	5c9b      	ldrb	r3, [r3, r2]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b01      	cmp	r3, #1
 8007052:	d13a      	bne.n	80070ca <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2225      	movs	r2, #37	; 0x25
 8007058:	2102      	movs	r1, #2
 800705a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2101      	movs	r1, #1
 800706e:	438a      	bics	r2, r1
 8007070:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	68b9      	ldr	r1, [r7, #8]
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 f96a 	bl	8007352 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	2b00      	cmp	r3, #0
 8007084:	d008      	beq.n	8007098 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	210e      	movs	r1, #14
 8007092:	430a      	orrs	r2, r1
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	e00f      	b.n	80070b8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2104      	movs	r1, #4
 80070a4:	438a      	bics	r2, r1
 80070a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	210a      	movs	r1, #10
 80070b4:	430a      	orrs	r2, r1
 80070b6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2101      	movs	r1, #1
 80070c4:	430a      	orrs	r2, r1
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	e007      	b.n	80070da <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2224      	movs	r2, #36	; 0x24
 80070ce:	2100      	movs	r1, #0
 80070d0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80070d2:	2317      	movs	r3, #23
 80070d4:	18fb      	adds	r3, r7, r3
 80070d6:	2202      	movs	r2, #2
 80070d8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80070da:	2317      	movs	r3, #23
 80070dc:	18fb      	adds	r3, r7, r3
 80070de:	781b      	ldrb	r3, [r3, #0]
}
 80070e0:	0018      	movs	r0, r3
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b006      	add	sp, #24
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070f0:	230f      	movs	r3, #15
 80070f2:	18fb      	adds	r3, r7, r3
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2225      	movs	r2, #37	; 0x25
 80070fc:	5c9b      	ldrb	r3, [r3, r2]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d008      	beq.n	8007116 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2204      	movs	r2, #4
 8007108:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2224      	movs	r2, #36	; 0x24
 800710e:	2100      	movs	r1, #0
 8007110:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e024      	b.n	8007160 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	210e      	movs	r1, #14
 8007122:	438a      	bics	r2, r1
 8007124:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2101      	movs	r1, #1
 8007132:	438a      	bics	r2, r1
 8007134:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713a:	221c      	movs	r2, #28
 800713c:	401a      	ands	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007142:	2101      	movs	r1, #1
 8007144:	4091      	lsls	r1, r2
 8007146:	000a      	movs	r2, r1
 8007148:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2225      	movs	r2, #37	; 0x25
 800714e:	2101      	movs	r1, #1
 8007150:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2224      	movs	r2, #36	; 0x24
 8007156:	2100      	movs	r1, #0
 8007158:	5499      	strb	r1, [r3, r2]

    return status;
 800715a:	230f      	movs	r3, #15
 800715c:	18fb      	adds	r3, r7, r3
 800715e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007160:	0018      	movs	r0, r3
 8007162:	46bd      	mov	sp, r7
 8007164:	b004      	add	sp, #16
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007170:	210f      	movs	r1, #15
 8007172:	187b      	adds	r3, r7, r1
 8007174:	2200      	movs	r2, #0
 8007176:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2225      	movs	r2, #37	; 0x25
 800717c:	5c9b      	ldrb	r3, [r3, r2]
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d006      	beq.n	8007192 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2204      	movs	r2, #4
 8007188:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800718a:	187b      	adds	r3, r7, r1
 800718c:	2201      	movs	r2, #1
 800718e:	701a      	strb	r2, [r3, #0]
 8007190:	e02a      	b.n	80071e8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	210e      	movs	r1, #14
 800719e:	438a      	bics	r2, r1
 80071a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2101      	movs	r1, #1
 80071ae:	438a      	bics	r2, r1
 80071b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b6:	221c      	movs	r2, #28
 80071b8:	401a      	ands	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	2101      	movs	r1, #1
 80071c0:	4091      	lsls	r1, r2
 80071c2:	000a      	movs	r2, r1
 80071c4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2225      	movs	r2, #37	; 0x25
 80071ca:	2101      	movs	r1, #1
 80071cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2224      	movs	r2, #36	; 0x24
 80071d2:	2100      	movs	r1, #0
 80071d4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d004      	beq.n	80071e8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	0010      	movs	r0, r2
 80071e6:	4798      	blx	r3
    }
  }
  return status;
 80071e8:	230f      	movs	r3, #15
 80071ea:	18fb      	adds	r3, r7, r3
 80071ec:	781b      	ldrb	r3, [r3, #0]
}
 80071ee:	0018      	movs	r0, r3
 80071f0:	46bd      	mov	sp, r7
 80071f2:	b004      	add	sp, #16
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	221c      	movs	r2, #28
 8007214:	4013      	ands	r3, r2
 8007216:	2204      	movs	r2, #4
 8007218:	409a      	lsls	r2, r3
 800721a:	0013      	movs	r3, r2
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4013      	ands	r3, r2
 8007220:	d026      	beq.n	8007270 <HAL_DMA_IRQHandler+0x7a>
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2204      	movs	r2, #4
 8007226:	4013      	ands	r3, r2
 8007228:	d022      	beq.n	8007270 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2220      	movs	r2, #32
 8007232:	4013      	ands	r3, r2
 8007234:	d107      	bne.n	8007246 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2104      	movs	r1, #4
 8007242:	438a      	bics	r2, r1
 8007244:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724a:	221c      	movs	r2, #28
 800724c:	401a      	ands	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	2104      	movs	r1, #4
 8007254:	4091      	lsls	r1, r2
 8007256:	000a      	movs	r2, r1
 8007258:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725e:	2b00      	cmp	r3, #0
 8007260:	d100      	bne.n	8007264 <HAL_DMA_IRQHandler+0x6e>
 8007262:	e071      	b.n	8007348 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	0010      	movs	r0, r2
 800726c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800726e:	e06b      	b.n	8007348 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007274:	221c      	movs	r2, #28
 8007276:	4013      	ands	r3, r2
 8007278:	2202      	movs	r2, #2
 800727a:	409a      	lsls	r2, r3
 800727c:	0013      	movs	r3, r2
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	4013      	ands	r3, r2
 8007282:	d02d      	beq.n	80072e0 <HAL_DMA_IRQHandler+0xea>
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2202      	movs	r2, #2
 8007288:	4013      	ands	r3, r2
 800728a:	d029      	beq.n	80072e0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2220      	movs	r2, #32
 8007294:	4013      	ands	r3, r2
 8007296:	d10b      	bne.n	80072b0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	210a      	movs	r1, #10
 80072a4:	438a      	bics	r2, r1
 80072a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2225      	movs	r2, #37	; 0x25
 80072ac:	2101      	movs	r1, #1
 80072ae:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b4:	221c      	movs	r2, #28
 80072b6:	401a      	ands	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	2102      	movs	r1, #2
 80072be:	4091      	lsls	r1, r2
 80072c0:	000a      	movs	r2, r1
 80072c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2224      	movs	r2, #36	; 0x24
 80072c8:	2100      	movs	r1, #0
 80072ca:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d039      	beq.n	8007348 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	0010      	movs	r0, r2
 80072dc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80072de:	e033      	b.n	8007348 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e4:	221c      	movs	r2, #28
 80072e6:	4013      	ands	r3, r2
 80072e8:	2208      	movs	r2, #8
 80072ea:	409a      	lsls	r2, r3
 80072ec:	0013      	movs	r3, r2
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4013      	ands	r3, r2
 80072f2:	d02a      	beq.n	800734a <HAL_DMA_IRQHandler+0x154>
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2208      	movs	r2, #8
 80072f8:	4013      	ands	r3, r2
 80072fa:	d026      	beq.n	800734a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	210e      	movs	r1, #14
 8007308:	438a      	bics	r2, r1
 800730a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007310:	221c      	movs	r2, #28
 8007312:	401a      	ands	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	2101      	movs	r1, #1
 800731a:	4091      	lsls	r1, r2
 800731c:	000a      	movs	r2, r1
 800731e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2225      	movs	r2, #37	; 0x25
 800732a:	2101      	movs	r1, #1
 800732c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2224      	movs	r2, #36	; 0x24
 8007332:	2100      	movs	r1, #0
 8007334:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733a:	2b00      	cmp	r3, #0
 800733c:	d005      	beq.n	800734a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	0010      	movs	r0, r2
 8007346:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007348:	46c0      	nop			; (mov r8, r8)
 800734a:	46c0      	nop			; (mov r8, r8)
}
 800734c:	46bd      	mov	sp, r7
 800734e:	b004      	add	sp, #16
 8007350:	bd80      	pop	{r7, pc}

08007352 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007364:	221c      	movs	r2, #28
 8007366:	401a      	ands	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	2101      	movs	r1, #1
 800736e:	4091      	lsls	r1, r2
 8007370:	000a      	movs	r2, r1
 8007372:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	2b10      	cmp	r3, #16
 8007382:	d108      	bne.n	8007396 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007394:	e007      	b.n	80073a6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	60da      	str	r2, [r3, #12]
}
 80073a6:	46c0      	nop			; (mov r8, r8)
 80073a8:	46bd      	mov	sp, r7
 80073aa:	b004      	add	sp, #16
 80073ac:	bd80      	pop	{r7, pc}
	...

080073b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80073b8:	f7ff f860 	bl	800647c <HAL_GetTick>
 80073bc:	0003      	movs	r3, r0
 80073be:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80073c0:	e00f      	b.n	80073e2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3301      	adds	r3, #1
 80073c6:	d00c      	beq.n	80073e2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d007      	beq.n	80073de <FLASH_WaitForLastOperation+0x2e>
 80073ce:	f7ff f855 	bl	800647c <HAL_GetTick>
 80073d2:	0002      	movs	r2, r0
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d201      	bcs.n	80073e2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e052      	b.n	8007488 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80073e2:	4b2b      	ldr	r3, [pc, #172]	; (8007490 <FLASH_WaitForLastOperation+0xe0>)
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	2201      	movs	r2, #1
 80073e8:	4013      	ands	r3, r2
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d0e9      	beq.n	80073c2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80073ee:	4b28      	ldr	r3, [pc, #160]	; (8007490 <FLASH_WaitForLastOperation+0xe0>)
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	2202      	movs	r2, #2
 80073f4:	4013      	ands	r3, r2
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d102      	bne.n	8007400 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80073fa:	4b25      	ldr	r3, [pc, #148]	; (8007490 <FLASH_WaitForLastOperation+0xe0>)
 80073fc:	2202      	movs	r2, #2
 80073fe:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8007400:	4b23      	ldr	r3, [pc, #140]	; (8007490 <FLASH_WaitForLastOperation+0xe0>)
 8007402:	699a      	ldr	r2, [r3, #24]
 8007404:	2380      	movs	r3, #128	; 0x80
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	401a      	ands	r2, r3
 800740a:	2380      	movs	r3, #128	; 0x80
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	429a      	cmp	r2, r3
 8007410:	d035      	beq.n	800747e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8007412:	4b1f      	ldr	r3, [pc, #124]	; (8007490 <FLASH_WaitForLastOperation+0xe0>)
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	2380      	movs	r3, #128	; 0x80
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800741c:	2380      	movs	r3, #128	; 0x80
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	429a      	cmp	r2, r3
 8007422:	d02c      	beq.n	800747e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8007424:	4b1a      	ldr	r3, [pc, #104]	; (8007490 <FLASH_WaitForLastOperation+0xe0>)
 8007426:	699a      	ldr	r2, [r3, #24]
 8007428:	2380      	movs	r3, #128	; 0x80
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800742e:	2380      	movs	r3, #128	; 0x80
 8007430:	00db      	lsls	r3, r3, #3
 8007432:	429a      	cmp	r2, r3
 8007434:	d023      	beq.n	800747e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8007436:	4b16      	ldr	r3, [pc, #88]	; (8007490 <FLASH_WaitForLastOperation+0xe0>)
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	2380      	movs	r3, #128	; 0x80
 800743c:	011b      	lsls	r3, r3, #4
 800743e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8007440:	2380      	movs	r3, #128	; 0x80
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	429a      	cmp	r2, r3
 8007446:	d01a      	beq.n	800747e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8007448:	4b11      	ldr	r3, [pc, #68]	; (8007490 <FLASH_WaitForLastOperation+0xe0>)
 800744a:	699a      	ldr	r2, [r3, #24]
 800744c:	2380      	movs	r3, #128	; 0x80
 800744e:	019b      	lsls	r3, r3, #6
 8007450:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8007452:	2380      	movs	r3, #128	; 0x80
 8007454:	019b      	lsls	r3, r3, #6
 8007456:	429a      	cmp	r2, r3
 8007458:	d011      	beq.n	800747e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800745a:	4b0d      	ldr	r3, [pc, #52]	; (8007490 <FLASH_WaitForLastOperation+0xe0>)
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	2380      	movs	r3, #128	; 0x80
 8007460:	029b      	lsls	r3, r3, #10
 8007462:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8007464:	2380      	movs	r3, #128	; 0x80
 8007466:	029b      	lsls	r3, r3, #10
 8007468:	429a      	cmp	r2, r3
 800746a:	d008      	beq.n	800747e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800746c:	4b08      	ldr	r3, [pc, #32]	; (8007490 <FLASH_WaitForLastOperation+0xe0>)
 800746e:	699a      	ldr	r2, [r3, #24]
 8007470:	2380      	movs	r3, #128	; 0x80
 8007472:	025b      	lsls	r3, r3, #9
 8007474:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8007476:	2380      	movs	r3, #128	; 0x80
 8007478:	025b      	lsls	r3, r3, #9
 800747a:	429a      	cmp	r2, r3
 800747c:	d103      	bne.n	8007486 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800747e:	f000 f809 	bl	8007494 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e000      	b.n	8007488 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	0018      	movs	r0, r3
 800748a:	46bd      	mov	sp, r7
 800748c:	b004      	add	sp, #16
 800748e:	bd80      	pop	{r7, pc}
 8007490:	40022000 	.word	0x40022000

08007494 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800749e:	4b49      	ldr	r3, [pc, #292]	; (80075c4 <FLASH_SetErrorCode+0x130>)
 80074a0:	699a      	ldr	r2, [r3, #24]
 80074a2:	2380      	movs	r3, #128	; 0x80
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	401a      	ands	r2, r3
 80074a8:	2380      	movs	r3, #128	; 0x80
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d10a      	bne.n	80074c6 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80074b0:	4b45      	ldr	r3, [pc, #276]	; (80075c8 <FLASH_SetErrorCode+0x134>)
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	2202      	movs	r2, #2
 80074b6:	431a      	orrs	r2, r3
 80074b8:	4b43      	ldr	r3, [pc, #268]	; (80075c8 <FLASH_SetErrorCode+0x134>)
 80074ba:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2280      	movs	r2, #128	; 0x80
 80074c0:	0052      	lsls	r2, r2, #1
 80074c2:	4313      	orrs	r3, r2
 80074c4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80074c6:	4b3f      	ldr	r3, [pc, #252]	; (80075c4 <FLASH_SetErrorCode+0x130>)
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	2380      	movs	r3, #128	; 0x80
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	401a      	ands	r2, r3
 80074d0:	2380      	movs	r3, #128	; 0x80
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d10a      	bne.n	80074ee <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80074d8:	4b3b      	ldr	r3, [pc, #236]	; (80075c8 <FLASH_SetErrorCode+0x134>)
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	2201      	movs	r2, #1
 80074de:	431a      	orrs	r2, r3
 80074e0:	4b39      	ldr	r3, [pc, #228]	; (80075c8 <FLASH_SetErrorCode+0x134>)
 80074e2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2280      	movs	r2, #128	; 0x80
 80074e8:	0092      	lsls	r2, r2, #2
 80074ea:	4313      	orrs	r3, r2
 80074ec:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80074ee:	4b35      	ldr	r3, [pc, #212]	; (80075c4 <FLASH_SetErrorCode+0x130>)
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	2380      	movs	r3, #128	; 0x80
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	401a      	ands	r2, r3
 80074f8:	2380      	movs	r3, #128	; 0x80
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d10a      	bne.n	8007516 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8007500:	4b31      	ldr	r3, [pc, #196]	; (80075c8 <FLASH_SetErrorCode+0x134>)
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	2208      	movs	r2, #8
 8007506:	431a      	orrs	r2, r3
 8007508:	4b2f      	ldr	r3, [pc, #188]	; (80075c8 <FLASH_SetErrorCode+0x134>)
 800750a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2280      	movs	r2, #128	; 0x80
 8007510:	00d2      	lsls	r2, r2, #3
 8007512:	4313      	orrs	r3, r2
 8007514:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007516:	4b2b      	ldr	r3, [pc, #172]	; (80075c4 <FLASH_SetErrorCode+0x130>)
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	2380      	movs	r3, #128	; 0x80
 800751c:	011b      	lsls	r3, r3, #4
 800751e:	401a      	ands	r2, r3
 8007520:	2380      	movs	r3, #128	; 0x80
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	429a      	cmp	r2, r3
 8007526:	d10a      	bne.n	800753e <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8007528:	4b27      	ldr	r3, [pc, #156]	; (80075c8 <FLASH_SetErrorCode+0x134>)
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	2204      	movs	r2, #4
 800752e:	431a      	orrs	r2, r3
 8007530:	4b25      	ldr	r3, [pc, #148]	; (80075c8 <FLASH_SetErrorCode+0x134>)
 8007532:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2280      	movs	r2, #128	; 0x80
 8007538:	0112      	lsls	r2, r2, #4
 800753a:	4313      	orrs	r3, r2
 800753c:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800753e:	4b21      	ldr	r3, [pc, #132]	; (80075c4 <FLASH_SetErrorCode+0x130>)
 8007540:	699a      	ldr	r2, [r3, #24]
 8007542:	2380      	movs	r3, #128	; 0x80
 8007544:	019b      	lsls	r3, r3, #6
 8007546:	401a      	ands	r2, r3
 8007548:	2380      	movs	r3, #128	; 0x80
 800754a:	019b      	lsls	r3, r3, #6
 800754c:	429a      	cmp	r2, r3
 800754e:	d10a      	bne.n	8007566 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007550:	4b1d      	ldr	r3, [pc, #116]	; (80075c8 <FLASH_SetErrorCode+0x134>)
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	2210      	movs	r2, #16
 8007556:	431a      	orrs	r2, r3
 8007558:	4b1b      	ldr	r3, [pc, #108]	; (80075c8 <FLASH_SetErrorCode+0x134>)
 800755a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2280      	movs	r2, #128	; 0x80
 8007560:	0192      	lsls	r2, r2, #6
 8007562:	4313      	orrs	r3, r2
 8007564:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8007566:	4b17      	ldr	r3, [pc, #92]	; (80075c4 <FLASH_SetErrorCode+0x130>)
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	2380      	movs	r3, #128	; 0x80
 800756c:	029b      	lsls	r3, r3, #10
 800756e:	401a      	ands	r2, r3
 8007570:	2380      	movs	r3, #128	; 0x80
 8007572:	029b      	lsls	r3, r3, #10
 8007574:	429a      	cmp	r2, r3
 8007576:	d109      	bne.n	800758c <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8007578:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <FLASH_SetErrorCode+0x134>)
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	2220      	movs	r2, #32
 800757e:	431a      	orrs	r2, r3
 8007580:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <FLASH_SetErrorCode+0x134>)
 8007582:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	4313      	orrs	r3, r2
 800758a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800758c:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <FLASH_SetErrorCode+0x130>)
 800758e:	699a      	ldr	r2, [r3, #24]
 8007590:	2380      	movs	r3, #128	; 0x80
 8007592:	025b      	lsls	r3, r3, #9
 8007594:	401a      	ands	r2, r3
 8007596:	2380      	movs	r3, #128	; 0x80
 8007598:	025b      	lsls	r3, r3, #9
 800759a:	429a      	cmp	r2, r3
 800759c:	d10a      	bne.n	80075b4 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800759e:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <FLASH_SetErrorCode+0x134>)
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	2240      	movs	r2, #64	; 0x40
 80075a4:	431a      	orrs	r2, r3
 80075a6:	4b08      	ldr	r3, [pc, #32]	; (80075c8 <FLASH_SetErrorCode+0x134>)
 80075a8:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2280      	movs	r2, #128	; 0x80
 80075ae:	0252      	lsls	r2, r2, #9
 80075b0:	4313      	orrs	r3, r2
 80075b2:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80075b4:	4b03      	ldr	r3, [pc, #12]	; (80075c4 <FLASH_SetErrorCode+0x130>)
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	619a      	str	r2, [r3, #24]
}  
 80075ba:	46c0      	nop			; (mov r8, r8)
 80075bc:	46bd      	mov	sp, r7
 80075be:	b002      	add	sp, #8
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	46c0      	nop			; (mov r8, r8)
 80075c4:	40022000 	.word	0x40022000
 80075c8:	2000057c 	.word	0x2000057c

080075cc <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80075d2:	4b12      	ldr	r3, [pc, #72]	; (800761c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	4013      	ands	r3, r2
 80075da:	d019      	beq.n	8007610 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075dc:	f3ef 8310 	mrs	r3, PRIMASK
 80075e0:	607b      	str	r3, [r7, #4]
  return(result);
 80075e2:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80075e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80075e6:	b672      	cpsid	i
}
 80075e8:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80075ea:	4b0c      	ldr	r3, [pc, #48]	; (800761c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80075ec:	4a0c      	ldr	r2, [pc, #48]	; (8007620 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80075ee:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80075f0:	4b0a      	ldr	r3, [pc, #40]	; (800761c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80075f2:	4a0c      	ldr	r2, [pc, #48]	; (8007624 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 80075f4:	60da      	str	r2, [r3, #12]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f383 8810 	msr	PRIMASK, r3
}
 8007600:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8007602:	4b06      	ldr	r3, [pc, #24]	; (800761c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	4013      	ands	r3, r2
 800760a:	d001      	beq.n	8007610 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e000      	b.n	8007612 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8007610:	2300      	movs	r3, #0
}
 8007612:	0018      	movs	r0, r3
 8007614:	46bd      	mov	sp, r7
 8007616:	b004      	add	sp, #16
 8007618:	bd80      	pop	{r7, pc}
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	40022000 	.word	0x40022000
 8007620:	89abcdef 	.word	0x89abcdef
 8007624:	02030405 	.word	0x02030405

08007628 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800762c:	4b04      	ldr	r3, [pc, #16]	; (8007640 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	4b03      	ldr	r3, [pc, #12]	; (8007640 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8007632:	2101      	movs	r1, #1
 8007634:	430a      	orrs	r2, r1
 8007636:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	0018      	movs	r0, r3
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40022000 	.word	0x40022000

08007644 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8007644:	b5b0      	push	{r4, r5, r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007650:	2317      	movs	r3, #23
 8007652:	18fb      	adds	r3, r7, r3
 8007654:	2201      	movs	r2, #1
 8007656:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007658:	4b24      	ldr	r3, [pc, #144]	; (80076ec <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800765a:	7c1b      	ldrb	r3, [r3, #16]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8007660:	2302      	movs	r3, #2
 8007662:	e03e      	b.n	80076e2 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8007664:	4b21      	ldr	r3, [pc, #132]	; (80076ec <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8007666:	2201      	movs	r2, #1
 8007668:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800766a:	2517      	movs	r5, #23
 800766c:	197c      	adds	r4, r7, r5
 800766e:	4b20      	ldr	r3, [pc, #128]	; (80076f0 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8007670:	0018      	movs	r0, r3
 8007672:	f7ff fe9d 	bl	80073b0 <FLASH_WaitForLastOperation>
 8007676:	0003      	movs	r3, r0
 8007678:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800767a:	197b      	adds	r3, r7, r5
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d129      	bne.n	80076d6 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007682:	4b1a      	ldr	r3, [pc, #104]	; (80076ec <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8007684:	2200      	movs	r2, #0
 8007686:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b02      	cmp	r3, #2
 800768c:	d103      	bne.n	8007696 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	e013      	b.n	80076be <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d104      	bne.n	80076a6 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	b292      	uxth	r2, r2
 80076a2:	801a      	strh	r2, [r3, #0]
 80076a4:	e00b      	b.n	80076be <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d104      	bne.n	80076b6 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	b2d2      	uxtb	r2, r2
 80076b2:	701a      	strb	r2, [r3, #0]
 80076b4:	e003      	b.n	80076be <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 80076b6:	2317      	movs	r3, #23
 80076b8:	18fb      	adds	r3, r7, r3
 80076ba:	2201      	movs	r2, #1
 80076bc:	701a      	strb	r2, [r3, #0]
    }

    if (status != HAL_OK)
 80076be:	2217      	movs	r2, #23
 80076c0:	18bb      	adds	r3, r7, r2
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d006      	beq.n	80076d6 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80076c8:	18bc      	adds	r4, r7, r2
 80076ca:	4b09      	ldr	r3, [pc, #36]	; (80076f0 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80076cc:	0018      	movs	r0, r3
 80076ce:	f7ff fe6f 	bl	80073b0 <FLASH_WaitForLastOperation>
 80076d2:	0003      	movs	r3, r0
 80076d4:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80076d6:	4b05      	ldr	r3, [pc, #20]	; (80076ec <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80076d8:	2200      	movs	r2, #0
 80076da:	741a      	strb	r2, [r3, #16]

  return status;
 80076dc:	2317      	movs	r3, #23
 80076de:	18fb      	adds	r3, r7, r3
 80076e0:	781b      	ldrb	r3, [r3, #0]
}
 80076e2:	0018      	movs	r0, r3
 80076e4:	46bd      	mov	sp, r7
 80076e6:	b006      	add	sp, #24
 80076e8:	bdb0      	pop	{r4, r5, r7, pc}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	2000057c 	.word	0x2000057c
 80076f0:	0000c350 	.word	0x0000c350

080076f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80076fe:	2300      	movs	r3, #0
 8007700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8007706:	2300      	movs	r3, #0
 8007708:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800770a:	e14f      	b.n	80079ac <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2101      	movs	r1, #1
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	4091      	lsls	r1, r2
 8007716:	000a      	movs	r2, r1
 8007718:	4013      	ands	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d100      	bne.n	8007724 <HAL_GPIO_Init+0x30>
 8007722:	e140      	b.n	80079a6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	2203      	movs	r2, #3
 800772a:	4013      	ands	r3, r2
 800772c:	2b01      	cmp	r3, #1
 800772e:	d005      	beq.n	800773c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2203      	movs	r2, #3
 8007736:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007738:	2b02      	cmp	r3, #2
 800773a:	d130      	bne.n	800779e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	2203      	movs	r2, #3
 8007748:	409a      	lsls	r2, r3
 800774a:	0013      	movs	r3, r2
 800774c:	43da      	mvns	r2, r3
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	4013      	ands	r3, r2
 8007752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	005b      	lsls	r3, r3, #1
 800775c:	409a      	lsls	r2, r3
 800775e:	0013      	movs	r3, r2
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4313      	orrs	r3, r2
 8007764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007772:	2201      	movs	r2, #1
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	409a      	lsls	r2, r3
 8007778:	0013      	movs	r3, r2
 800777a:	43da      	mvns	r2, r3
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	4013      	ands	r3, r2
 8007780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	091b      	lsrs	r3, r3, #4
 8007788:	2201      	movs	r2, #1
 800778a:	401a      	ands	r2, r3
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	409a      	lsls	r2, r3
 8007790:	0013      	movs	r3, r2
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	2203      	movs	r2, #3
 80077a4:	4013      	ands	r3, r2
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d017      	beq.n	80077da <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	2203      	movs	r2, #3
 80077b6:	409a      	lsls	r2, r3
 80077b8:	0013      	movs	r3, r2
 80077ba:	43da      	mvns	r2, r3
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	4013      	ands	r3, r2
 80077c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	409a      	lsls	r2, r3
 80077cc:	0013      	movs	r3, r2
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	2203      	movs	r2, #3
 80077e0:	4013      	ands	r3, r2
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d123      	bne.n	800782e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	08da      	lsrs	r2, r3, #3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3208      	adds	r2, #8
 80077ee:	0092      	lsls	r2, r2, #2
 80077f0:	58d3      	ldr	r3, [r2, r3]
 80077f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2207      	movs	r2, #7
 80077f8:	4013      	ands	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	220f      	movs	r2, #15
 80077fe:	409a      	lsls	r2, r3
 8007800:	0013      	movs	r3, r2
 8007802:	43da      	mvns	r2, r3
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	4013      	ands	r3, r2
 8007808:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	691a      	ldr	r2, [r3, #16]
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2107      	movs	r1, #7
 8007812:	400b      	ands	r3, r1
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	409a      	lsls	r2, r3
 8007818:	0013      	movs	r3, r2
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	08da      	lsrs	r2, r3, #3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3208      	adds	r2, #8
 8007828:	0092      	lsls	r2, r2, #2
 800782a:	6939      	ldr	r1, [r7, #16]
 800782c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	2203      	movs	r2, #3
 800783a:	409a      	lsls	r2, r3
 800783c:	0013      	movs	r3, r2
 800783e:	43da      	mvns	r2, r3
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	4013      	ands	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2203      	movs	r2, #3
 800784c:	401a      	ands	r2, r3
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	409a      	lsls	r2, r3
 8007854:	0013      	movs	r3, r2
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4313      	orrs	r3, r2
 800785a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	23c0      	movs	r3, #192	; 0xc0
 8007868:	029b      	lsls	r3, r3, #10
 800786a:	4013      	ands	r3, r2
 800786c:	d100      	bne.n	8007870 <HAL_GPIO_Init+0x17c>
 800786e:	e09a      	b.n	80079a6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007870:	4b54      	ldr	r3, [pc, #336]	; (80079c4 <HAL_GPIO_Init+0x2d0>)
 8007872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007874:	4b53      	ldr	r3, [pc, #332]	; (80079c4 <HAL_GPIO_Init+0x2d0>)
 8007876:	2101      	movs	r1, #1
 8007878:	430a      	orrs	r2, r1
 800787a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800787c:	4a52      	ldr	r2, [pc, #328]	; (80079c8 <HAL_GPIO_Init+0x2d4>)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	089b      	lsrs	r3, r3, #2
 8007882:	3302      	adds	r3, #2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	589b      	ldr	r3, [r3, r2]
 8007888:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2203      	movs	r2, #3
 800788e:	4013      	ands	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	220f      	movs	r2, #15
 8007894:	409a      	lsls	r2, r3
 8007896:	0013      	movs	r3, r2
 8007898:	43da      	mvns	r2, r3
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	4013      	ands	r3, r2
 800789e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	23a0      	movs	r3, #160	; 0xa0
 80078a4:	05db      	lsls	r3, r3, #23
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d019      	beq.n	80078de <HAL_GPIO_Init+0x1ea>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a47      	ldr	r2, [pc, #284]	; (80079cc <HAL_GPIO_Init+0x2d8>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d013      	beq.n	80078da <HAL_GPIO_Init+0x1e6>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a46      	ldr	r2, [pc, #280]	; (80079d0 <HAL_GPIO_Init+0x2dc>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00d      	beq.n	80078d6 <HAL_GPIO_Init+0x1e2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a45      	ldr	r2, [pc, #276]	; (80079d4 <HAL_GPIO_Init+0x2e0>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d007      	beq.n	80078d2 <HAL_GPIO_Init+0x1de>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a44      	ldr	r2, [pc, #272]	; (80079d8 <HAL_GPIO_Init+0x2e4>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d101      	bne.n	80078ce <HAL_GPIO_Init+0x1da>
 80078ca:	2305      	movs	r3, #5
 80078cc:	e008      	b.n	80078e0 <HAL_GPIO_Init+0x1ec>
 80078ce:	2306      	movs	r3, #6
 80078d0:	e006      	b.n	80078e0 <HAL_GPIO_Init+0x1ec>
 80078d2:	2303      	movs	r3, #3
 80078d4:	e004      	b.n	80078e0 <HAL_GPIO_Init+0x1ec>
 80078d6:	2302      	movs	r3, #2
 80078d8:	e002      	b.n	80078e0 <HAL_GPIO_Init+0x1ec>
 80078da:	2301      	movs	r3, #1
 80078dc:	e000      	b.n	80078e0 <HAL_GPIO_Init+0x1ec>
 80078de:	2300      	movs	r3, #0
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	2103      	movs	r1, #3
 80078e4:	400a      	ands	r2, r1
 80078e6:	0092      	lsls	r2, r2, #2
 80078e8:	4093      	lsls	r3, r2
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078f0:	4935      	ldr	r1, [pc, #212]	; (80079c8 <HAL_GPIO_Init+0x2d4>)
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	089b      	lsrs	r3, r3, #2
 80078f6:	3302      	adds	r3, #2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80078fe:	4b37      	ldr	r3, [pc, #220]	; (80079dc <HAL_GPIO_Init+0x2e8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	43da      	mvns	r2, r3
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	4013      	ands	r3, r2
 800790c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	2380      	movs	r3, #128	; 0x80
 8007914:	025b      	lsls	r3, r3, #9
 8007916:	4013      	ands	r3, r2
 8007918:	d003      	beq.n	8007922 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4313      	orrs	r3, r2
 8007920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007922:	4b2e      	ldr	r3, [pc, #184]	; (80079dc <HAL_GPIO_Init+0x2e8>)
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007928:	4b2c      	ldr	r3, [pc, #176]	; (80079dc <HAL_GPIO_Init+0x2e8>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	43da      	mvns	r2, r3
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	4013      	ands	r3, r2
 8007936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	2380      	movs	r3, #128	; 0x80
 800793e:	029b      	lsls	r3, r3, #10
 8007940:	4013      	ands	r3, r2
 8007942:	d003      	beq.n	800794c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4313      	orrs	r3, r2
 800794a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800794c:	4b23      	ldr	r3, [pc, #140]	; (80079dc <HAL_GPIO_Init+0x2e8>)
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007952:	4b22      	ldr	r3, [pc, #136]	; (80079dc <HAL_GPIO_Init+0x2e8>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	43da      	mvns	r2, r3
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	4013      	ands	r3, r2
 8007960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	2380      	movs	r3, #128	; 0x80
 8007968:	035b      	lsls	r3, r3, #13
 800796a:	4013      	ands	r3, r2
 800796c:	d003      	beq.n	8007976 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007976:	4b19      	ldr	r3, [pc, #100]	; (80079dc <HAL_GPIO_Init+0x2e8>)
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800797c:	4b17      	ldr	r3, [pc, #92]	; (80079dc <HAL_GPIO_Init+0x2e8>)
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	43da      	mvns	r2, r3
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	4013      	ands	r3, r2
 800798a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	2380      	movs	r3, #128	; 0x80
 8007992:	039b      	lsls	r3, r3, #14
 8007994:	4013      	ands	r3, r2
 8007996:	d003      	beq.n	80079a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4313      	orrs	r3, r2
 800799e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80079a0:	4b0e      	ldr	r3, [pc, #56]	; (80079dc <HAL_GPIO_Init+0x2e8>)
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	3301      	adds	r3, #1
 80079aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	40da      	lsrs	r2, r3
 80079b4:	1e13      	subs	r3, r2, #0
 80079b6:	d000      	beq.n	80079ba <HAL_GPIO_Init+0x2c6>
 80079b8:	e6a8      	b.n	800770c <HAL_GPIO_Init+0x18>
  }
}
 80079ba:	46c0      	nop			; (mov r8, r8)
 80079bc:	46c0      	nop			; (mov r8, r8)
 80079be:	46bd      	mov	sp, r7
 80079c0:	b006      	add	sp, #24
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	40021000 	.word	0x40021000
 80079c8:	40010000 	.word	0x40010000
 80079cc:	50000400 	.word	0x50000400
 80079d0:	50000800 	.word	0x50000800
 80079d4:	50000c00 	.word	0x50000c00
 80079d8:	50001c00 	.word	0x50001c00
 80079dc:	40010400 	.word	0x40010400

080079e0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	000a      	movs	r2, r1
 80079ea:	1cbb      	adds	r3, r7, #2
 80079ec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	1cba      	adds	r2, r7, #2
 80079f4:	8812      	ldrh	r2, [r2, #0]
 80079f6:	4013      	ands	r3, r2
 80079f8:	d004      	beq.n	8007a04 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80079fa:	230f      	movs	r3, #15
 80079fc:	18fb      	adds	r3, r7, r3
 80079fe:	2201      	movs	r2, #1
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	e003      	b.n	8007a0c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a04:	230f      	movs	r3, #15
 8007a06:	18fb      	adds	r3, r7, r3
 8007a08:	2200      	movs	r2, #0
 8007a0a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007a0c:	230f      	movs	r3, #15
 8007a0e:	18fb      	adds	r3, r7, r3
 8007a10:	781b      	ldrb	r3, [r3, #0]
}
 8007a12:	0018      	movs	r0, r3
 8007a14:	46bd      	mov	sp, r7
 8007a16:	b004      	add	sp, #16
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	0008      	movs	r0, r1
 8007a24:	0011      	movs	r1, r2
 8007a26:	1cbb      	adds	r3, r7, #2
 8007a28:	1c02      	adds	r2, r0, #0
 8007a2a:	801a      	strh	r2, [r3, #0]
 8007a2c:	1c7b      	adds	r3, r7, #1
 8007a2e:	1c0a      	adds	r2, r1, #0
 8007a30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a32:	1c7b      	adds	r3, r7, #1
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d004      	beq.n	8007a44 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a3a:	1cbb      	adds	r3, r7, #2
 8007a3c:	881a      	ldrh	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007a42:	e003      	b.n	8007a4c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007a44:	1cbb      	adds	r3, r7, #2
 8007a46:	881a      	ldrh	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007a4c:	46c0      	nop			; (mov r8, r8)
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b002      	add	sp, #8
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	0002      	movs	r2, r0
 8007a5c:	1dbb      	adds	r3, r7, #6
 8007a5e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007a60:	4b09      	ldr	r3, [pc, #36]	; (8007a88 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	1dba      	adds	r2, r7, #6
 8007a66:	8812      	ldrh	r2, [r2, #0]
 8007a68:	4013      	ands	r3, r2
 8007a6a:	d008      	beq.n	8007a7e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007a6c:	4b06      	ldr	r3, [pc, #24]	; (8007a88 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007a6e:	1dba      	adds	r2, r7, #6
 8007a70:	8812      	ldrh	r2, [r2, #0]
 8007a72:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007a74:	1dbb      	adds	r3, r7, #6
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f000 f807 	bl	8007a8c <HAL_GPIO_EXTI_Callback>
  }
}
 8007a7e:	46c0      	nop			; (mov r8, r8)
 8007a80:	46bd      	mov	sp, r7
 8007a82:	b002      	add	sp, #8
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	46c0      	nop			; (mov r8, r8)
 8007a88:	40010400 	.word	0x40010400

08007a8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	0002      	movs	r2, r0
 8007a94:	1dbb      	adds	r3, r7, #6
 8007a96:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007a98:	46c0      	nop			; (mov r8, r8)
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	b002      	add	sp, #8
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e078      	b.n	8007ba4 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	222e      	movs	r2, #46	; 0x2e
 8007ab6:	5c9b      	ldrb	r3, [r3, r2]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d107      	bne.n	8007ace <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	222d      	movs	r2, #45	; 0x2d
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	0018      	movs	r0, r3
 8007aca:	f7fd fb55 	bl	8005178 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	222e      	movs	r2, #46	; 0x2e
 8007ad2:	2102      	movs	r1, #2
 8007ad4:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d005      	beq.n	8007af2 <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aea:	2380      	movs	r3, #128	; 0x80
 8007aec:	041b      	lsls	r3, r3, #16
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d103      	bne.n	8007afa <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	221e      	movs	r2, #30
 8007af6:	4393      	bics	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	4a2b      	ldr	r2, [pc, #172]	; (8007bac <HAL_LPTIM_Init+0x10c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d003      	beq.n	8007b0c <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4a2a      	ldr	r2, [pc, #168]	; (8007bb0 <HAL_LPTIM_Init+0x110>)
 8007b08:	4013      	ands	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4a29      	ldr	r2, [pc, #164]	; (8007bb4 <HAL_LPTIM_Init+0x114>)
 8007b10:	4013      	ands	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007b1c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007b22:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007b28:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8007b2e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d107      	bne.n	8007b4e <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007b46:	4313      	orrs	r3, r2
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d005      	beq.n	8007b62 <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b5a:	2380      	movs	r3, #128	; 0x80
 8007b5c:	041b      	lsls	r3, r3, #16
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d107      	bne.n	8007b72 <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	4a0d      	ldr	r2, [pc, #52]	; (8007bac <HAL_LPTIM_Init+0x10c>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d00a      	beq.n	8007b92 <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007b84:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007b8a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	222e      	movs	r2, #46	; 0x2e
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	b004      	add	sp, #16
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	0000ffff 	.word	0x0000ffff
 8007bb0:	ffff1f3f 	.word	0xffff1f3f
 8007bb4:	ff19f1fe 	.word	0xff19f1fe

08007bb8 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	222e      	movs	r2, #46	; 0x2e
 8007bc6:	2102      	movs	r1, #2
 8007bc8:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007bca:	4b34      	ldr	r3, [pc, #208]	; (8007c9c <HAL_LPTIM_Counter_Start_IT+0xe4>)
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	4b33      	ldr	r3, [pc, #204]	; (8007c9c <HAL_LPTIM_Counter_Start_IT+0xe4>)
 8007bd0:	2180      	movs	r1, #128	; 0x80
 8007bd2:	0589      	lsls	r1, r1, #22
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d00d      	beq.n	8007bfc <HAL_LPTIM_Counter_Start_IT+0x44>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be4:	2380      	movs	r3, #128	; 0x80
 8007be6:	041b      	lsls	r3, r3, #16
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d107      	bne.n	8007bfc <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	492a      	ldr	r1, [pc, #168]	; (8007ca0 <HAL_LPTIM_Counter_Start_IT+0xe8>)
 8007bf8:	400a      	ands	r2, r1
 8007bfa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691a      	ldr	r2, [r3, #16]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2101      	movs	r1, #1
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2210      	movs	r2, #16
 8007c12:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2110      	movs	r1, #16
 8007c20:	0018      	movs	r0, r3
 8007c22:	f000 f91d 	bl	8007e60 <LPTIM_WaitForFlag>
 8007c26:	0003      	movs	r3, r0
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d101      	bne.n	8007c30 <HAL_LPTIM_Counter_Start_IT+0x78>
  {
    return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e031      	b.n	8007c94 <HAL_LPTIM_Counter_Start_IT+0xdc>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	0018      	movs	r0, r3
 8007c34:	f000 f94c 	bl	8007ed0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	0018      	movs	r0, r3
 8007c3c:	f000 f904 	bl	8007e48 <HAL_LPTIM_GetState>
 8007c40:	0003      	movs	r3, r0
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d101      	bne.n	8007c4a <HAL_LPTIM_Counter_Start_IT+0x92>
  {
    return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e024      	b.n	8007c94 <HAL_LPTIM_Counter_Start_IT+0xdc>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2110      	movs	r1, #16
 8007c56:	430a      	orrs	r2, r1
 8007c58:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2102      	movs	r1, #2
 8007c66:	430a      	orrs	r2, r1
 8007c68:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	691a      	ldr	r2, [r3, #16]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2101      	movs	r1, #1
 8007c76:	430a      	orrs	r2, r1
 8007c78:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	691a      	ldr	r2, [r3, #16]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2104      	movs	r1, #4
 8007c86:	430a      	orrs	r2, r1
 8007c88:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	222e      	movs	r2, #46	; 0x2e
 8007c8e:	2101      	movs	r1, #1
 8007c90:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	0018      	movs	r0, r3
 8007c96:	46bd      	mov	sp, r7
 8007c98:	b002      	add	sp, #8
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	40010400 	.word	0x40010400
 8007ca0:	fffff1ff 	.word	0xfffff1ff

08007ca4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d10e      	bne.n	8007cd8 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d107      	bne.n	8007cd8 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	f000 f888 	bl	8007de8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d10e      	bne.n	8007d04 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	2202      	movs	r2, #2
 8007cee:	4013      	ands	r3, r2
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d107      	bne.n	8007d04 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	0018      	movs	r0, r3
 8007d00:	f7fb fd72 	bl	80037e8 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2204      	movs	r2, #4
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	2b04      	cmp	r3, #4
 8007d10:	d10e      	bne.n	8007d30 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	2204      	movs	r2, #4
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	2b04      	cmp	r3, #4
 8007d1e:	d107      	bne.n	8007d30 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2204      	movs	r2, #4
 8007d26:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	f000 f864 	bl	8007df8 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2208      	movs	r2, #8
 8007d38:	4013      	ands	r3, r2
 8007d3a:	2b08      	cmp	r3, #8
 8007d3c:	d10e      	bne.n	8007d5c <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	2208      	movs	r2, #8
 8007d46:	4013      	ands	r3, r2
 8007d48:	2b08      	cmp	r3, #8
 8007d4a:	d107      	bne.n	8007d5c <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2208      	movs	r2, #8
 8007d52:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	0018      	movs	r0, r3
 8007d58:	f000 f856 	bl	8007e08 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2210      	movs	r2, #16
 8007d64:	4013      	ands	r3, r2
 8007d66:	2b10      	cmp	r3, #16
 8007d68:	d10e      	bne.n	8007d88 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	2210      	movs	r2, #16
 8007d72:	4013      	ands	r3, r2
 8007d74:	2b10      	cmp	r3, #16
 8007d76:	d107      	bne.n	8007d88 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2210      	movs	r2, #16
 8007d7e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	0018      	movs	r0, r3
 8007d84:	f000 f848 	bl	8007e18 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	4013      	ands	r3, r2
 8007d92:	2b20      	cmp	r3, #32
 8007d94:	d10e      	bne.n	8007db4 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	4013      	ands	r3, r2
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	d107      	bne.n	8007db4 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2220      	movs	r2, #32
 8007daa:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	0018      	movs	r0, r3
 8007db0:	f000 f83a 	bl	8007e28 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2240      	movs	r2, #64	; 0x40
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	2b40      	cmp	r3, #64	; 0x40
 8007dc0:	d10e      	bne.n	8007de0 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	2240      	movs	r2, #64	; 0x40
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b40      	cmp	r3, #64	; 0x40
 8007dce:	d107      	bne.n	8007de0 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2240      	movs	r2, #64	; 0x40
 8007dd6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	0018      	movs	r0, r3
 8007ddc:	f000 f82c 	bl	8007e38 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007de0:	46c0      	nop			; (mov r8, r8)
 8007de2:	46bd      	mov	sp, r7
 8007de4:	b002      	add	sp, #8
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8007df0:	46c0      	nop			; (mov r8, r8)
 8007df2:	46bd      	mov	sp, r7
 8007df4:	b002      	add	sp, #8
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8007e00:	46c0      	nop			; (mov r8, r8)
 8007e02:	46bd      	mov	sp, r7
 8007e04:	b002      	add	sp, #8
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8007e10:	46c0      	nop			; (mov r8, r8)
 8007e12:	46bd      	mov	sp, r7
 8007e14:	b002      	add	sp, #8
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8007e20:	46c0      	nop			; (mov r8, r8)
 8007e22:	46bd      	mov	sp, r7
 8007e24:	b002      	add	sp, #8
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8007e30:	46c0      	nop			; (mov r8, r8)
 8007e32:	46bd      	mov	sp, r7
 8007e34:	b002      	add	sp, #8
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8007e40:	46c0      	nop			; (mov r8, r8)
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b002      	add	sp, #8
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	222e      	movs	r2, #46	; 0x2e
 8007e54:	5c9b      	ldrb	r3, [r3, r2]
 8007e56:	b2db      	uxtb	r3, r3
}
 8007e58:	0018      	movs	r0, r3
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	b002      	add	sp, #8
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8007e6a:	230f      	movs	r3, #15
 8007e6c:	18fb      	adds	r3, r7, r3
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8007e72:	4b15      	ldr	r3, [pc, #84]	; (8007ec8 <LPTIM_WaitForFlag+0x68>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4915      	ldr	r1, [pc, #84]	; (8007ecc <LPTIM_WaitForFlag+0x6c>)
 8007e78:	0018      	movs	r0, r3
 8007e7a:	f7f8 f961 	bl	8000140 <__udivsi3>
 8007e7e:	0003      	movs	r3, r0
 8007e80:	001a      	movs	r2, r3
 8007e82:	0013      	movs	r3, r2
 8007e84:	015b      	lsls	r3, r3, #5
 8007e86:	1a9b      	subs	r3, r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	189b      	adds	r3, r3, r2
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d103      	bne.n	8007ea4 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8007e9c:	230f      	movs	r3, #15
 8007e9e:	18fb      	adds	r3, r7, r3
 8007ea0:	2203      	movs	r2, #3
 8007ea2:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	4013      	ands	r3, r2
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d002      	beq.n	8007eba <LPTIM_WaitForFlag+0x5a>
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1ea      	bne.n	8007e90 <LPTIM_WaitForFlag+0x30>

  return result;
 8007eba:	230f      	movs	r3, #15
 8007ebc:	18fb      	adds	r3, r7, r3
 8007ebe:	781b      	ldrb	r3, [r3, #0]
}
 8007ec0:	0018      	movs	r0, r3
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	b004      	add	sp, #16
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	20000024 	.word	0x20000024
 8007ecc:	00004e20 	.word	0x00004e20

08007ed0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b088      	sub	sp, #32
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007edc:	b672      	cpsid	i
}
 8007ede:	46c0      	nop			; (mov r8, r8)

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	001a      	movs	r2, r3
 8007ee6:	4b55      	ldr	r3, [pc, #340]	; (800803c <LPTIM_Disable+0x16c>)
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d106      	bne.n	8007efa <LPTIM_Disable+0x2a>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007eec:	4b54      	ldr	r3, [pc, #336]	; (8008040 <LPTIM_Disable+0x170>)
 8007eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ef0:	23c0      	movs	r3, #192	; 0xc0
 8007ef2:	031b      	lsls	r3, r3, #12
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	61fb      	str	r3, [r7, #28]
      break;
 8007ef8:	e000      	b.n	8007efc <LPTIM_Disable+0x2c>
    default:
      break;
 8007efa:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	001a      	movs	r2, r3
 8007f22:	4b46      	ldr	r3, [pc, #280]	; (800803c <LPTIM_Disable+0x16c>)
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d10d      	bne.n	8007f44 <LPTIM_Disable+0x74>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8007f28:	4b45      	ldr	r3, [pc, #276]	; (8008040 <LPTIM_Disable+0x170>)
 8007f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f2c:	4b44      	ldr	r3, [pc, #272]	; (8008040 <LPTIM_Disable+0x170>)
 8007f2e:	2180      	movs	r1, #128	; 0x80
 8007f30:	0609      	lsls	r1, r1, #24
 8007f32:	430a      	orrs	r2, r1
 8007f34:	629a      	str	r2, [r3, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8007f36:	4b42      	ldr	r3, [pc, #264]	; (8008040 <LPTIM_Disable+0x170>)
 8007f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f3a:	4b41      	ldr	r3, [pc, #260]	; (8008040 <LPTIM_Disable+0x170>)
 8007f3c:	0052      	lsls	r2, r2, #1
 8007f3e:	0852      	lsrs	r2, r2, #1
 8007f40:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8007f42:	e000      	b.n	8007f46 <LPTIM_Disable+0x76>
    default:
      break;
 8007f44:	46c0      	nop			; (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d102      	bne.n	8007f52 <LPTIM_Disable+0x82>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d05b      	beq.n	800800a <LPTIM_Disable+0x13a>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	001a      	movs	r2, r3
 8007f58:	4b38      	ldr	r3, [pc, #224]	; (800803c <LPTIM_Disable+0x16c>)
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d106      	bne.n	8007f6c <LPTIM_Disable+0x9c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8007f5e:	4b38      	ldr	r3, [pc, #224]	; (8008040 <LPTIM_Disable+0x170>)
 8007f60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f62:	4b37      	ldr	r3, [pc, #220]	; (8008040 <LPTIM_Disable+0x170>)
 8007f64:	4937      	ldr	r1, [pc, #220]	; (8008044 <LPTIM_Disable+0x174>)
 8007f66:	400a      	ands	r2, r1
 8007f68:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007f6a:	e000      	b.n	8007f6e <LPTIM_Disable+0x9e>
      default:
        break;
 8007f6c:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d01b      	beq.n	8007fac <LPTIM_Disable+0xdc>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691a      	ldr	r2, [r3, #16]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2101      	movs	r1, #1
 8007f80:	430a      	orrs	r2, r1
 8007f82:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2108      	movs	r1, #8
 8007f90:	0018      	movs	r0, r3
 8007f92:	f7ff ff65 	bl	8007e60 <LPTIM_WaitForFlag>
 8007f96:	0003      	movs	r3, r0
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d103      	bne.n	8007fa4 <LPTIM_Disable+0xd4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	222e      	movs	r2, #46	; 0x2e
 8007fa0:	2103      	movs	r1, #3
 8007fa2:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2208      	movs	r2, #8
 8007faa:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d01b      	beq.n	8007fea <LPTIM_Disable+0x11a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	691a      	ldr	r2, [r3, #16]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2110      	movs	r1, #16
 8007fce:	0018      	movs	r0, r3
 8007fd0:	f7ff ff46 	bl	8007e60 <LPTIM_WaitForFlag>
 8007fd4:	0003      	movs	r3, r0
 8007fd6:	2b03      	cmp	r3, #3
 8007fd8:	d103      	bne.n	8007fe2 <LPTIM_Disable+0x112>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	222e      	movs	r2, #46	; 0x2e
 8007fde:	2103      	movs	r1, #3
 8007fe0:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2210      	movs	r2, #16
 8007fe8:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	001a      	movs	r2, r3
 8007ff0:	4b12      	ldr	r3, [pc, #72]	; (800803c <LPTIM_Disable+0x16c>)
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d10b      	bne.n	800800e <LPTIM_Disable+0x13e>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8007ff6:	4b12      	ldr	r3, [pc, #72]	; (8008040 <LPTIM_Disable+0x170>)
 8007ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ffa:	4a12      	ldr	r2, [pc, #72]	; (8008044 <LPTIM_Disable+0x174>)
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	0019      	movs	r1, r3
 8008000:	4b0f      	ldr	r3, [pc, #60]	; (8008040 <LPTIM_Disable+0x170>)
 8008002:	69fa      	ldr	r2, [r7, #28]
 8008004:	430a      	orrs	r2, r1
 8008006:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008008:	e002      	b.n	8008010 <LPTIM_Disable+0x140>
      default:
        break;
    }
  }
 800800a:	46c0      	nop			; (mov r8, r8)
 800800c:	e000      	b.n	8008010 <LPTIM_Disable+0x140>
        break;
 800800e:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	691a      	ldr	r2, [r3, #16]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2101      	movs	r1, #1
 800801c:	438a      	bics	r2, r1
 800801e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8008030:	b662      	cpsie	i
}
 8008032:	46c0      	nop			; (mov r8, r8)

  __enable_irq();
}
 8008034:	46c0      	nop			; (mov r8, r8)
 8008036:	46bd      	mov	sp, r7
 8008038:	b008      	add	sp, #32
 800803a:	bd80      	pop	{r7, pc}
 800803c:	40007c00 	.word	0x40007c00
 8008040:	40021000 	.word	0x40021000
 8008044:	fff3ffff 	.word	0xfff3ffff

08008048 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800804c:	4b04      	ldr	r3, [pc, #16]	; (8008060 <HAL_PWR_EnableBkUpAccess+0x18>)
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	4b03      	ldr	r3, [pc, #12]	; (8008060 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008052:	2180      	movs	r1, #128	; 0x80
 8008054:	0049      	lsls	r1, r1, #1
 8008056:	430a      	orrs	r2, r1
 8008058:	601a      	str	r2, [r3, #0]
}
 800805a:	46c0      	nop			; (mov r8, r8)
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	40007000 	.word	0x40007000

08008064 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	000a      	movs	r2, r1
 800806e:	1cfb      	adds	r3, r7, #3
 8008070:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8008076:	4b25      	ldr	r3, [pc, #148]	; (800810c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	2380      	movs	r3, #128	; 0x80
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4013      	ands	r3, r2
 8008080:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8008082:	4b23      	ldr	r3, [pc, #140]	; (8008110 <HAL_PWR_EnterSTOPMode+0xac>)
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	2201      	movs	r2, #1
 8008088:	4013      	ands	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d008      	beq.n	80080a4 <HAL_PWR_EnterSTOPMode+0x40>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d005      	beq.n	80080a4 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008098:	4b1c      	ldr	r3, [pc, #112]	; (800810c <HAL_PWR_EnterSTOPMode+0xa8>)
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	4b1b      	ldr	r3, [pc, #108]	; (800810c <HAL_PWR_EnterSTOPMode+0xa8>)
 800809e:	491d      	ldr	r1, [pc, #116]	; (8008114 <HAL_PWR_EnterSTOPMode+0xb0>)
 80080a0:	400a      	ands	r2, r1
 80080a2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80080a4:	4b19      	ldr	r3, [pc, #100]	; (800810c <HAL_PWR_EnterSTOPMode+0xa8>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2203      	movs	r2, #3
 80080ae:	4393      	bics	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80080ba:	4b14      	ldr	r3, [pc, #80]	; (800810c <HAL_PWR_EnterSTOPMode+0xa8>)
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80080c0:	4b15      	ldr	r3, [pc, #84]	; (8008118 <HAL_PWR_EnterSTOPMode+0xb4>)
 80080c2:	691a      	ldr	r2, [r3, #16]
 80080c4:	4b14      	ldr	r3, [pc, #80]	; (8008118 <HAL_PWR_EnterSTOPMode+0xb4>)
 80080c6:	2104      	movs	r1, #4
 80080c8:	430a      	orrs	r2, r1
 80080ca:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80080cc:	1cfb      	adds	r3, r7, #3
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80080d4:	bf30      	wfi
 80080d6:	e002      	b.n	80080de <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80080d8:	bf40      	sev
    __WFE();
 80080da:	bf20      	wfe
    __WFE();
 80080dc:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80080de:	4b0e      	ldr	r3, [pc, #56]	; (8008118 <HAL_PWR_EnterSTOPMode+0xb4>)
 80080e0:	691a      	ldr	r2, [r3, #16]
 80080e2:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <HAL_PWR_EnterSTOPMode+0xb4>)
 80080e4:	2104      	movs	r1, #4
 80080e6:	438a      	bics	r2, r1
 80080e8:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d009      	beq.n	8008104 <HAL_PWR_EnterSTOPMode+0xa0>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d006      	beq.n	8008104 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80080f6:	4b05      	ldr	r3, [pc, #20]	; (800810c <HAL_PWR_EnterSTOPMode+0xa8>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4b04      	ldr	r3, [pc, #16]	; (800810c <HAL_PWR_EnterSTOPMode+0xa8>)
 80080fc:	2180      	movs	r1, #128	; 0x80
 80080fe:	0089      	lsls	r1, r1, #2
 8008100:	430a      	orrs	r2, r1
 8008102:	601a      	str	r2, [r3, #0]
  }
}
 8008104:	46c0      	nop			; (mov r8, r8)
 8008106:	46bd      	mov	sp, r7
 8008108:	b006      	add	sp, #24
 800810a:	bd80      	pop	{r7, pc}
 800810c:	40007000 	.word	0x40007000
 8008110:	40010000 	.word	0x40010000
 8008114:	fffffdff 	.word	0xfffffdff
 8008118:	e000ed00 	.word	0xe000ed00

0800811c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800811c:	b5b0      	push	{r4, r5, r7, lr}
 800811e:	b08a      	sub	sp, #40	; 0x28
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d102      	bne.n	8008130 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	f000 fb5a 	bl	80087e4 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008130:	4bce      	ldr	r3, [pc, #824]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	220c      	movs	r2, #12
 8008136:	4013      	ands	r3, r2
 8008138:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800813a:	4bcc      	ldr	r3, [pc, #816]	; (800846c <HAL_RCC_OscConfig+0x350>)
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	2380      	movs	r3, #128	; 0x80
 8008140:	025b      	lsls	r3, r3, #9
 8008142:	4013      	ands	r3, r2
 8008144:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2201      	movs	r2, #1
 800814c:	4013      	ands	r3, r2
 800814e:	d100      	bne.n	8008152 <HAL_RCC_OscConfig+0x36>
 8008150:	e07c      	b.n	800824c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	2b08      	cmp	r3, #8
 8008156:	d007      	beq.n	8008168 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	2b0c      	cmp	r3, #12
 800815c:	d111      	bne.n	8008182 <HAL_RCC_OscConfig+0x66>
 800815e:	69fa      	ldr	r2, [r7, #28]
 8008160:	2380      	movs	r3, #128	; 0x80
 8008162:	025b      	lsls	r3, r3, #9
 8008164:	429a      	cmp	r2, r3
 8008166:	d10c      	bne.n	8008182 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008168:	4bc0      	ldr	r3, [pc, #768]	; (800846c <HAL_RCC_OscConfig+0x350>)
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	2380      	movs	r3, #128	; 0x80
 800816e:	029b      	lsls	r3, r3, #10
 8008170:	4013      	ands	r3, r2
 8008172:	d100      	bne.n	8008176 <HAL_RCC_OscConfig+0x5a>
 8008174:	e069      	b.n	800824a <HAL_RCC_OscConfig+0x12e>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d165      	bne.n	800824a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e330      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	2380      	movs	r3, #128	; 0x80
 8008188:	025b      	lsls	r3, r3, #9
 800818a:	429a      	cmp	r2, r3
 800818c:	d107      	bne.n	800819e <HAL_RCC_OscConfig+0x82>
 800818e:	4bb7      	ldr	r3, [pc, #732]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	4bb6      	ldr	r3, [pc, #728]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008194:	2180      	movs	r1, #128	; 0x80
 8008196:	0249      	lsls	r1, r1, #9
 8008198:	430a      	orrs	r2, r1
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	e027      	b.n	80081ee <HAL_RCC_OscConfig+0xd2>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	23a0      	movs	r3, #160	; 0xa0
 80081a4:	02db      	lsls	r3, r3, #11
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d10e      	bne.n	80081c8 <HAL_RCC_OscConfig+0xac>
 80081aa:	4bb0      	ldr	r3, [pc, #704]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	4baf      	ldr	r3, [pc, #700]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80081b0:	2180      	movs	r1, #128	; 0x80
 80081b2:	02c9      	lsls	r1, r1, #11
 80081b4:	430a      	orrs	r2, r1
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	4bac      	ldr	r3, [pc, #688]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	4bab      	ldr	r3, [pc, #684]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80081be:	2180      	movs	r1, #128	; 0x80
 80081c0:	0249      	lsls	r1, r1, #9
 80081c2:	430a      	orrs	r2, r1
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	e012      	b.n	80081ee <HAL_RCC_OscConfig+0xd2>
 80081c8:	4ba8      	ldr	r3, [pc, #672]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	4ba7      	ldr	r3, [pc, #668]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80081ce:	49a8      	ldr	r1, [pc, #672]	; (8008470 <HAL_RCC_OscConfig+0x354>)
 80081d0:	400a      	ands	r2, r1
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	4ba5      	ldr	r3, [pc, #660]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	2380      	movs	r3, #128	; 0x80
 80081da:	025b      	lsls	r3, r3, #9
 80081dc:	4013      	ands	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4ba2      	ldr	r3, [pc, #648]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	4ba1      	ldr	r3, [pc, #644]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80081e8:	49a2      	ldr	r1, [pc, #648]	; (8008474 <HAL_RCC_OscConfig+0x358>)
 80081ea:	400a      	ands	r2, r1
 80081ec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d014      	beq.n	8008220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081f6:	f7fe f941 	bl	800647c <HAL_GetTick>
 80081fa:	0003      	movs	r3, r0
 80081fc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008200:	f7fe f93c 	bl	800647c <HAL_GetTick>
 8008204:	0002      	movs	r2, r0
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b64      	cmp	r3, #100	; 0x64
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e2e8      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008212:	4b96      	ldr	r3, [pc, #600]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	2380      	movs	r3, #128	; 0x80
 8008218:	029b      	lsls	r3, r3, #10
 800821a:	4013      	ands	r3, r2
 800821c:	d0f0      	beq.n	8008200 <HAL_RCC_OscConfig+0xe4>
 800821e:	e015      	b.n	800824c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008220:	f7fe f92c 	bl	800647c <HAL_GetTick>
 8008224:	0003      	movs	r3, r0
 8008226:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008228:	e008      	b.n	800823c <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800822a:	f7fe f927 	bl	800647c <HAL_GetTick>
 800822e:	0002      	movs	r2, r0
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	2b64      	cmp	r3, #100	; 0x64
 8008236:	d901      	bls.n	800823c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e2d3      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800823c:	4b8b      	ldr	r3, [pc, #556]	; (800846c <HAL_RCC_OscConfig+0x350>)
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	2380      	movs	r3, #128	; 0x80
 8008242:	029b      	lsls	r3, r3, #10
 8008244:	4013      	ands	r3, r2
 8008246:	d1f0      	bne.n	800822a <HAL_RCC_OscConfig+0x10e>
 8008248:	e000      	b.n	800824c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800824a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2202      	movs	r2, #2
 8008252:	4013      	ands	r3, r2
 8008254:	d100      	bne.n	8008258 <HAL_RCC_OscConfig+0x13c>
 8008256:	e08b      	b.n	8008370 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	2b04      	cmp	r3, #4
 8008262:	d005      	beq.n	8008270 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	2b0c      	cmp	r3, #12
 8008268:	d13e      	bne.n	80082e8 <HAL_RCC_OscConfig+0x1cc>
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d13b      	bne.n	80082e8 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8008270:	4b7e      	ldr	r3, [pc, #504]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2204      	movs	r2, #4
 8008276:	4013      	ands	r3, r2
 8008278:	d004      	beq.n	8008284 <HAL_RCC_OscConfig+0x168>
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e2af      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008284:	4b79      	ldr	r3, [pc, #484]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	4a7b      	ldr	r2, [pc, #492]	; (8008478 <HAL_RCC_OscConfig+0x35c>)
 800828a:	4013      	ands	r3, r2
 800828c:	0019      	movs	r1, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	021a      	lsls	r2, r3, #8
 8008294:	4b75      	ldr	r3, [pc, #468]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008296:	430a      	orrs	r2, r1
 8008298:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800829a:	4b74      	ldr	r3, [pc, #464]	; (800846c <HAL_RCC_OscConfig+0x350>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2209      	movs	r2, #9
 80082a0:	4393      	bics	r3, r2
 80082a2:	0019      	movs	r1, r3
 80082a4:	4b71      	ldr	r3, [pc, #452]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80082ac:	f000 fbe8 	bl	8008a80 <HAL_RCC_GetSysClockFreq>
 80082b0:	0001      	movs	r1, r0
 80082b2:	4b6e      	ldr	r3, [pc, #440]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	091b      	lsrs	r3, r3, #4
 80082b8:	220f      	movs	r2, #15
 80082ba:	4013      	ands	r3, r2
 80082bc:	4a6f      	ldr	r2, [pc, #444]	; (800847c <HAL_RCC_OscConfig+0x360>)
 80082be:	5cd3      	ldrb	r3, [r2, r3]
 80082c0:	000a      	movs	r2, r1
 80082c2:	40da      	lsrs	r2, r3
 80082c4:	4b6e      	ldr	r3, [pc, #440]	; (8008480 <HAL_RCC_OscConfig+0x364>)
 80082c6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80082c8:	4b6e      	ldr	r3, [pc, #440]	; (8008484 <HAL_RCC_OscConfig+0x368>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2513      	movs	r5, #19
 80082ce:	197c      	adds	r4, r7, r5
 80082d0:	0018      	movs	r0, r3
 80082d2:	f7fe f88d 	bl	80063f0 <HAL_InitTick>
 80082d6:	0003      	movs	r3, r0
 80082d8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80082da:	197b      	adds	r3, r7, r5
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d046      	beq.n	8008370 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 80082e2:	197b      	adds	r3, r7, r5
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	e27d      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d027      	beq.n	800833e <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80082ee:	4b5f      	ldr	r3, [pc, #380]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2209      	movs	r2, #9
 80082f4:	4393      	bics	r3, r2
 80082f6:	0019      	movs	r1, r3
 80082f8:	4b5c      	ldr	r3, [pc, #368]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008300:	f7fe f8bc 	bl	800647c <HAL_GetTick>
 8008304:	0003      	movs	r3, r0
 8008306:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008308:	e008      	b.n	800831c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800830a:	f7fe f8b7 	bl	800647c <HAL_GetTick>
 800830e:	0002      	movs	r2, r0
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	2b02      	cmp	r3, #2
 8008316:	d901      	bls.n	800831c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e263      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800831c:	4b53      	ldr	r3, [pc, #332]	; (800846c <HAL_RCC_OscConfig+0x350>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2204      	movs	r2, #4
 8008322:	4013      	ands	r3, r2
 8008324:	d0f1      	beq.n	800830a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008326:	4b51      	ldr	r3, [pc, #324]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	4a53      	ldr	r2, [pc, #332]	; (8008478 <HAL_RCC_OscConfig+0x35c>)
 800832c:	4013      	ands	r3, r2
 800832e:	0019      	movs	r1, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	021a      	lsls	r2, r3, #8
 8008336:	4b4d      	ldr	r3, [pc, #308]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008338:	430a      	orrs	r2, r1
 800833a:	605a      	str	r2, [r3, #4]
 800833c:	e018      	b.n	8008370 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800833e:	4b4b      	ldr	r3, [pc, #300]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	4b4a      	ldr	r3, [pc, #296]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008344:	2101      	movs	r1, #1
 8008346:	438a      	bics	r2, r1
 8008348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800834a:	f7fe f897 	bl	800647c <HAL_GetTick>
 800834e:	0003      	movs	r3, r0
 8008350:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008352:	e008      	b.n	8008366 <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008354:	f7fe f892 	bl	800647c <HAL_GetTick>
 8008358:	0002      	movs	r2, r0
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	2b02      	cmp	r3, #2
 8008360:	d901      	bls.n	8008366 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e23e      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008366:	4b41      	ldr	r3, [pc, #260]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2204      	movs	r2, #4
 800836c:	4013      	ands	r3, r2
 800836e:	d1f1      	bne.n	8008354 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2210      	movs	r2, #16
 8008376:	4013      	ands	r3, r2
 8008378:	d100      	bne.n	800837c <HAL_RCC_OscConfig+0x260>
 800837a:	e0a1      	b.n	80084c0 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d140      	bne.n	8008404 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008382:	4b3a      	ldr	r3, [pc, #232]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	2380      	movs	r3, #128	; 0x80
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4013      	ands	r3, r2
 800838c:	d005      	beq.n	800839a <HAL_RCC_OscConfig+0x27e>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e224      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800839a:	4b34      	ldr	r3, [pc, #208]	; (800846c <HAL_RCC_OscConfig+0x350>)
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	4a3a      	ldr	r2, [pc, #232]	; (8008488 <HAL_RCC_OscConfig+0x36c>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	0019      	movs	r1, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a1a      	ldr	r2, [r3, #32]
 80083a8:	4b30      	ldr	r3, [pc, #192]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80083aa:	430a      	orrs	r2, r1
 80083ac:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80083ae:	4b2f      	ldr	r3, [pc, #188]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	021b      	lsls	r3, r3, #8
 80083b4:	0a19      	lsrs	r1, r3, #8
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	061a      	lsls	r2, r3, #24
 80083bc:	4b2b      	ldr	r3, [pc, #172]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80083be:	430a      	orrs	r2, r1
 80083c0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	0b5b      	lsrs	r3, r3, #13
 80083c8:	3301      	adds	r3, #1
 80083ca:	2280      	movs	r2, #128	; 0x80
 80083cc:	0212      	lsls	r2, r2, #8
 80083ce:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80083d0:	4b26      	ldr	r3, [pc, #152]	; (800846c <HAL_RCC_OscConfig+0x350>)
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	091b      	lsrs	r3, r3, #4
 80083d6:	210f      	movs	r1, #15
 80083d8:	400b      	ands	r3, r1
 80083da:	4928      	ldr	r1, [pc, #160]	; (800847c <HAL_RCC_OscConfig+0x360>)
 80083dc:	5ccb      	ldrb	r3, [r1, r3]
 80083de:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80083e0:	4b27      	ldr	r3, [pc, #156]	; (8008480 <HAL_RCC_OscConfig+0x364>)
 80083e2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80083e4:	4b27      	ldr	r3, [pc, #156]	; (8008484 <HAL_RCC_OscConfig+0x368>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2513      	movs	r5, #19
 80083ea:	197c      	adds	r4, r7, r5
 80083ec:	0018      	movs	r0, r3
 80083ee:	f7fd ffff 	bl	80063f0 <HAL_InitTick>
 80083f2:	0003      	movs	r3, r0
 80083f4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80083f6:	197b      	adds	r3, r7, r5
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d060      	beq.n	80084c0 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 80083fe:	197b      	adds	r3, r7, r5
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	e1ef      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d03f      	beq.n	800848c <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800840c:	4b17      	ldr	r3, [pc, #92]	; (800846c <HAL_RCC_OscConfig+0x350>)
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	4b16      	ldr	r3, [pc, #88]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008412:	2180      	movs	r1, #128	; 0x80
 8008414:	0049      	lsls	r1, r1, #1
 8008416:	430a      	orrs	r2, r1
 8008418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800841a:	f7fe f82f 	bl	800647c <HAL_GetTick>
 800841e:	0003      	movs	r3, r0
 8008420:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008422:	e008      	b.n	8008436 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008424:	f7fe f82a 	bl	800647c <HAL_GetTick>
 8008428:	0002      	movs	r2, r0
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e1d6      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008436:	4b0d      	ldr	r3, [pc, #52]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	2380      	movs	r3, #128	; 0x80
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4013      	ands	r3, r2
 8008440:	d0f0      	beq.n	8008424 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008442:	4b0a      	ldr	r3, [pc, #40]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	4a10      	ldr	r2, [pc, #64]	; (8008488 <HAL_RCC_OscConfig+0x36c>)
 8008448:	4013      	ands	r3, r2
 800844a:	0019      	movs	r1, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a1a      	ldr	r2, [r3, #32]
 8008450:	4b06      	ldr	r3, [pc, #24]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008452:	430a      	orrs	r2, r1
 8008454:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008456:	4b05      	ldr	r3, [pc, #20]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	0a19      	lsrs	r1, r3, #8
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	061a      	lsls	r2, r3, #24
 8008464:	4b01      	ldr	r3, [pc, #4]	; (800846c <HAL_RCC_OscConfig+0x350>)
 8008466:	430a      	orrs	r2, r1
 8008468:	605a      	str	r2, [r3, #4]
 800846a:	e029      	b.n	80084c0 <HAL_RCC_OscConfig+0x3a4>
 800846c:	40021000 	.word	0x40021000
 8008470:	fffeffff 	.word	0xfffeffff
 8008474:	fffbffff 	.word	0xfffbffff
 8008478:	ffffe0ff 	.word	0xffffe0ff
 800847c:	0800ea24 	.word	0x0800ea24
 8008480:	20000024 	.word	0x20000024
 8008484:	20000028 	.word	0x20000028
 8008488:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800848c:	4bbe      	ldr	r3, [pc, #760]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	4bbd      	ldr	r3, [pc, #756]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 8008492:	49be      	ldr	r1, [pc, #760]	; (800878c <HAL_RCC_OscConfig+0x670>)
 8008494:	400a      	ands	r2, r1
 8008496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008498:	f7fd fff0 	bl	800647c <HAL_GetTick>
 800849c:	0003      	movs	r3, r0
 800849e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80084a0:	e008      	b.n	80084b4 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80084a2:	f7fd ffeb 	bl	800647c <HAL_GetTick>
 80084a6:	0002      	movs	r2, r0
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d901      	bls.n	80084b4 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e197      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80084b4:	4bb4      	ldr	r3, [pc, #720]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	2380      	movs	r3, #128	; 0x80
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4013      	ands	r3, r2
 80084be:	d1f0      	bne.n	80084a2 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2208      	movs	r2, #8
 80084c6:	4013      	ands	r3, r2
 80084c8:	d036      	beq.n	8008538 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d019      	beq.n	8008506 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084d2:	4bad      	ldr	r3, [pc, #692]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80084d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084d6:	4bac      	ldr	r3, [pc, #688]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80084d8:	2101      	movs	r1, #1
 80084da:	430a      	orrs	r2, r1
 80084dc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084de:	f7fd ffcd 	bl	800647c <HAL_GetTick>
 80084e2:	0003      	movs	r3, r0
 80084e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084e6:	e008      	b.n	80084fa <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084e8:	f7fd ffc8 	bl	800647c <HAL_GetTick>
 80084ec:	0002      	movs	r2, r0
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e174      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084fa:	4ba3      	ldr	r3, [pc, #652]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80084fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fe:	2202      	movs	r2, #2
 8008500:	4013      	ands	r3, r2
 8008502:	d0f1      	beq.n	80084e8 <HAL_RCC_OscConfig+0x3cc>
 8008504:	e018      	b.n	8008538 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008506:	4ba0      	ldr	r3, [pc, #640]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 8008508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800850a:	4b9f      	ldr	r3, [pc, #636]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 800850c:	2101      	movs	r1, #1
 800850e:	438a      	bics	r2, r1
 8008510:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008512:	f7fd ffb3 	bl	800647c <HAL_GetTick>
 8008516:	0003      	movs	r3, r0
 8008518:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800851a:	e008      	b.n	800852e <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800851c:	f7fd ffae 	bl	800647c <HAL_GetTick>
 8008520:	0002      	movs	r2, r0
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	2b02      	cmp	r3, #2
 8008528:	d901      	bls.n	800852e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e15a      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800852e:	4b96      	ldr	r3, [pc, #600]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 8008530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008532:	2202      	movs	r2, #2
 8008534:	4013      	ands	r3, r2
 8008536:	d1f1      	bne.n	800851c <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2204      	movs	r2, #4
 800853e:	4013      	ands	r3, r2
 8008540:	d100      	bne.n	8008544 <HAL_RCC_OscConfig+0x428>
 8008542:	e0ae      	b.n	80086a2 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008544:	2027      	movs	r0, #39	; 0x27
 8008546:	183b      	adds	r3, r7, r0
 8008548:	2200      	movs	r2, #0
 800854a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800854c:	4b8e      	ldr	r3, [pc, #568]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 800854e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008550:	2380      	movs	r3, #128	; 0x80
 8008552:	055b      	lsls	r3, r3, #21
 8008554:	4013      	ands	r3, r2
 8008556:	d109      	bne.n	800856c <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008558:	4b8b      	ldr	r3, [pc, #556]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 800855a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800855c:	4b8a      	ldr	r3, [pc, #552]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 800855e:	2180      	movs	r1, #128	; 0x80
 8008560:	0549      	lsls	r1, r1, #21
 8008562:	430a      	orrs	r2, r1
 8008564:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008566:	183b      	adds	r3, r7, r0
 8008568:	2201      	movs	r2, #1
 800856a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800856c:	4b88      	ldr	r3, [pc, #544]	; (8008790 <HAL_RCC_OscConfig+0x674>)
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	2380      	movs	r3, #128	; 0x80
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	4013      	ands	r3, r2
 8008576:	d11a      	bne.n	80085ae <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008578:	4b85      	ldr	r3, [pc, #532]	; (8008790 <HAL_RCC_OscConfig+0x674>)
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	4b84      	ldr	r3, [pc, #528]	; (8008790 <HAL_RCC_OscConfig+0x674>)
 800857e:	2180      	movs	r1, #128	; 0x80
 8008580:	0049      	lsls	r1, r1, #1
 8008582:	430a      	orrs	r2, r1
 8008584:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008586:	f7fd ff79 	bl	800647c <HAL_GetTick>
 800858a:	0003      	movs	r3, r0
 800858c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800858e:	e008      	b.n	80085a2 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008590:	f7fd ff74 	bl	800647c <HAL_GetTick>
 8008594:	0002      	movs	r2, r0
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	2b64      	cmp	r3, #100	; 0x64
 800859c:	d901      	bls.n	80085a2 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e120      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085a2:	4b7b      	ldr	r3, [pc, #492]	; (8008790 <HAL_RCC_OscConfig+0x674>)
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	2380      	movs	r3, #128	; 0x80
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	4013      	ands	r3, r2
 80085ac:	d0f0      	beq.n	8008590 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	689a      	ldr	r2, [r3, #8]
 80085b2:	2380      	movs	r3, #128	; 0x80
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d107      	bne.n	80085ca <HAL_RCC_OscConfig+0x4ae>
 80085ba:	4b73      	ldr	r3, [pc, #460]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80085bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085be:	4b72      	ldr	r3, [pc, #456]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80085c0:	2180      	movs	r1, #128	; 0x80
 80085c2:	0049      	lsls	r1, r1, #1
 80085c4:	430a      	orrs	r2, r1
 80085c6:	651a      	str	r2, [r3, #80]	; 0x50
 80085c8:	e031      	b.n	800862e <HAL_RCC_OscConfig+0x512>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10c      	bne.n	80085ec <HAL_RCC_OscConfig+0x4d0>
 80085d2:	4b6d      	ldr	r3, [pc, #436]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80085d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085d6:	4b6c      	ldr	r3, [pc, #432]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80085d8:	496c      	ldr	r1, [pc, #432]	; (800878c <HAL_RCC_OscConfig+0x670>)
 80085da:	400a      	ands	r2, r1
 80085dc:	651a      	str	r2, [r3, #80]	; 0x50
 80085de:	4b6a      	ldr	r3, [pc, #424]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80085e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085e2:	4b69      	ldr	r3, [pc, #420]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80085e4:	496b      	ldr	r1, [pc, #428]	; (8008794 <HAL_RCC_OscConfig+0x678>)
 80085e6:	400a      	ands	r2, r1
 80085e8:	651a      	str	r2, [r3, #80]	; 0x50
 80085ea:	e020      	b.n	800862e <HAL_RCC_OscConfig+0x512>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	689a      	ldr	r2, [r3, #8]
 80085f0:	23a0      	movs	r3, #160	; 0xa0
 80085f2:	00db      	lsls	r3, r3, #3
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d10e      	bne.n	8008616 <HAL_RCC_OscConfig+0x4fa>
 80085f8:	4b63      	ldr	r3, [pc, #396]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80085fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085fc:	4b62      	ldr	r3, [pc, #392]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80085fe:	2180      	movs	r1, #128	; 0x80
 8008600:	00c9      	lsls	r1, r1, #3
 8008602:	430a      	orrs	r2, r1
 8008604:	651a      	str	r2, [r3, #80]	; 0x50
 8008606:	4b60      	ldr	r3, [pc, #384]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 8008608:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800860a:	4b5f      	ldr	r3, [pc, #380]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 800860c:	2180      	movs	r1, #128	; 0x80
 800860e:	0049      	lsls	r1, r1, #1
 8008610:	430a      	orrs	r2, r1
 8008612:	651a      	str	r2, [r3, #80]	; 0x50
 8008614:	e00b      	b.n	800862e <HAL_RCC_OscConfig+0x512>
 8008616:	4b5c      	ldr	r3, [pc, #368]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 8008618:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800861a:	4b5b      	ldr	r3, [pc, #364]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 800861c:	495b      	ldr	r1, [pc, #364]	; (800878c <HAL_RCC_OscConfig+0x670>)
 800861e:	400a      	ands	r2, r1
 8008620:	651a      	str	r2, [r3, #80]	; 0x50
 8008622:	4b59      	ldr	r3, [pc, #356]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 8008624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008626:	4b58      	ldr	r3, [pc, #352]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 8008628:	495a      	ldr	r1, [pc, #360]	; (8008794 <HAL_RCC_OscConfig+0x678>)
 800862a:	400a      	ands	r2, r1
 800862c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d015      	beq.n	8008662 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008636:	f7fd ff21 	bl	800647c <HAL_GetTick>
 800863a:	0003      	movs	r3, r0
 800863c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800863e:	e009      	b.n	8008654 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008640:	f7fd ff1c 	bl	800647c <HAL_GetTick>
 8008644:	0002      	movs	r2, r0
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	4a53      	ldr	r2, [pc, #332]	; (8008798 <HAL_RCC_OscConfig+0x67c>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d901      	bls.n	8008654 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e0c7      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008654:	4b4c      	ldr	r3, [pc, #304]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 8008656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008658:	2380      	movs	r3, #128	; 0x80
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4013      	ands	r3, r2
 800865e:	d0ef      	beq.n	8008640 <HAL_RCC_OscConfig+0x524>
 8008660:	e014      	b.n	800868c <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008662:	f7fd ff0b 	bl	800647c <HAL_GetTick>
 8008666:	0003      	movs	r3, r0
 8008668:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800866a:	e009      	b.n	8008680 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800866c:	f7fd ff06 	bl	800647c <HAL_GetTick>
 8008670:	0002      	movs	r2, r0
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	4a48      	ldr	r2, [pc, #288]	; (8008798 <HAL_RCC_OscConfig+0x67c>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d901      	bls.n	8008680 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e0b1      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008680:	4b41      	ldr	r3, [pc, #260]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 8008682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008684:	2380      	movs	r3, #128	; 0x80
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4013      	ands	r3, r2
 800868a:	d1ef      	bne.n	800866c <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800868c:	2327      	movs	r3, #39	; 0x27
 800868e:	18fb      	adds	r3, r7, r3
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d105      	bne.n	80086a2 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008696:	4b3c      	ldr	r3, [pc, #240]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 8008698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800869a:	4b3b      	ldr	r3, [pc, #236]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 800869c:	493f      	ldr	r1, [pc, #252]	; (800879c <HAL_RCC_OscConfig+0x680>)
 800869e:	400a      	ands	r2, r1
 80086a0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d100      	bne.n	80086ac <HAL_RCC_OscConfig+0x590>
 80086aa:	e09a      	b.n	80087e2 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	2b0c      	cmp	r3, #12
 80086b0:	d064      	beq.n	800877c <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d145      	bne.n	8008746 <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086ba:	4b33      	ldr	r3, [pc, #204]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	4b32      	ldr	r3, [pc, #200]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80086c0:	4937      	ldr	r1, [pc, #220]	; (80087a0 <HAL_RCC_OscConfig+0x684>)
 80086c2:	400a      	ands	r2, r1
 80086c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086c6:	f7fd fed9 	bl	800647c <HAL_GetTick>
 80086ca:	0003      	movs	r3, r0
 80086cc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80086ce:	e008      	b.n	80086e2 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086d0:	f7fd fed4 	bl	800647c <HAL_GetTick>
 80086d4:	0002      	movs	r2, r0
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d901      	bls.n	80086e2 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e080      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80086e2:	4b29      	ldr	r3, [pc, #164]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	2380      	movs	r3, #128	; 0x80
 80086e8:	049b      	lsls	r3, r3, #18
 80086ea:	4013      	ands	r3, r2
 80086ec:	d1f0      	bne.n	80086d0 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086ee:	4b26      	ldr	r3, [pc, #152]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	4a2c      	ldr	r2, [pc, #176]	; (80087a4 <HAL_RCC_OscConfig+0x688>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	0019      	movs	r1, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008700:	431a      	orrs	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008706:	431a      	orrs	r2, r3
 8008708:	4b1f      	ldr	r3, [pc, #124]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 800870a:	430a      	orrs	r2, r1
 800870c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800870e:	4b1e      	ldr	r3, [pc, #120]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	4b1d      	ldr	r3, [pc, #116]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 8008714:	2180      	movs	r1, #128	; 0x80
 8008716:	0449      	lsls	r1, r1, #17
 8008718:	430a      	orrs	r2, r1
 800871a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800871c:	f7fd feae 	bl	800647c <HAL_GetTick>
 8008720:	0003      	movs	r3, r0
 8008722:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008724:	e008      	b.n	8008738 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008726:	f7fd fea9 	bl	800647c <HAL_GetTick>
 800872a:	0002      	movs	r2, r0
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d901      	bls.n	8008738 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e055      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008738:	4b13      	ldr	r3, [pc, #76]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	2380      	movs	r3, #128	; 0x80
 800873e:	049b      	lsls	r3, r3, #18
 8008740:	4013      	ands	r3, r2
 8008742:	d0f0      	beq.n	8008726 <HAL_RCC_OscConfig+0x60a>
 8008744:	e04d      	b.n	80087e2 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008746:	4b10      	ldr	r3, [pc, #64]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	4b0f      	ldr	r3, [pc, #60]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 800874c:	4914      	ldr	r1, [pc, #80]	; (80087a0 <HAL_RCC_OscConfig+0x684>)
 800874e:	400a      	ands	r2, r1
 8008750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008752:	f7fd fe93 	bl	800647c <HAL_GetTick>
 8008756:	0003      	movs	r3, r0
 8008758:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800875a:	e008      	b.n	800876e <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800875c:	f7fd fe8e 	bl	800647c <HAL_GetTick>
 8008760:	0002      	movs	r2, r0
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	2b02      	cmp	r3, #2
 8008768:	d901      	bls.n	800876e <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	e03a      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800876e:	4b06      	ldr	r3, [pc, #24]	; (8008788 <HAL_RCC_OscConfig+0x66c>)
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	2380      	movs	r3, #128	; 0x80
 8008774:	049b      	lsls	r3, r3, #18
 8008776:	4013      	ands	r3, r2
 8008778:	d1f0      	bne.n	800875c <HAL_RCC_OscConfig+0x640>
 800877a:	e032      	b.n	80087e2 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	2b01      	cmp	r3, #1
 8008782:	d111      	bne.n	80087a8 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e02d      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
 8008788:	40021000 	.word	0x40021000
 800878c:	fffffeff 	.word	0xfffffeff
 8008790:	40007000 	.word	0x40007000
 8008794:	fffffbff 	.word	0xfffffbff
 8008798:	00001388 	.word	0x00001388
 800879c:	efffffff 	.word	0xefffffff
 80087a0:	feffffff 	.word	0xfeffffff
 80087a4:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80087a8:	4b10      	ldr	r3, [pc, #64]	; (80087ec <HAL_RCC_OscConfig+0x6d0>)
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087ae:	69fa      	ldr	r2, [r7, #28]
 80087b0:	2380      	movs	r3, #128	; 0x80
 80087b2:	025b      	lsls	r3, r3, #9
 80087b4:	401a      	ands	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d10f      	bne.n	80087de <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80087be:	69fa      	ldr	r2, [r7, #28]
 80087c0:	23f0      	movs	r3, #240	; 0xf0
 80087c2:	039b      	lsls	r3, r3, #14
 80087c4:	401a      	ands	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d107      	bne.n	80087de <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	23c0      	movs	r3, #192	; 0xc0
 80087d2:	041b      	lsls	r3, r3, #16
 80087d4:	401a      	ands	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80087da:	429a      	cmp	r2, r3
 80087dc:	d001      	beq.n	80087e2 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e000      	b.n	80087e4 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	0018      	movs	r0, r3
 80087e6:	46bd      	mov	sp, r7
 80087e8:	b00a      	add	sp, #40	; 0x28
 80087ea:	bdb0      	pop	{r4, r5, r7, pc}
 80087ec:	40021000 	.word	0x40021000

080087f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087f0:	b5b0      	push	{r4, r5, r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e128      	b.n	8008a56 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008804:	4b96      	ldr	r3, [pc, #600]	; (8008a60 <HAL_RCC_ClockConfig+0x270>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2201      	movs	r2, #1
 800880a:	4013      	ands	r3, r2
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d91e      	bls.n	8008850 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008812:	4b93      	ldr	r3, [pc, #588]	; (8008a60 <HAL_RCC_ClockConfig+0x270>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2201      	movs	r2, #1
 8008818:	4393      	bics	r3, r2
 800881a:	0019      	movs	r1, r3
 800881c:	4b90      	ldr	r3, [pc, #576]	; (8008a60 <HAL_RCC_ClockConfig+0x270>)
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	430a      	orrs	r2, r1
 8008822:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008824:	f7fd fe2a 	bl	800647c <HAL_GetTick>
 8008828:	0003      	movs	r3, r0
 800882a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800882c:	e009      	b.n	8008842 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800882e:	f7fd fe25 	bl	800647c <HAL_GetTick>
 8008832:	0002      	movs	r2, r0
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	4a8a      	ldr	r2, [pc, #552]	; (8008a64 <HAL_RCC_ClockConfig+0x274>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d901      	bls.n	8008842 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e109      	b.n	8008a56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008842:	4b87      	ldr	r3, [pc, #540]	; (8008a60 <HAL_RCC_ClockConfig+0x270>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2201      	movs	r2, #1
 8008848:	4013      	ands	r3, r2
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d1ee      	bne.n	800882e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2202      	movs	r2, #2
 8008856:	4013      	ands	r3, r2
 8008858:	d009      	beq.n	800886e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800885a:	4b83      	ldr	r3, [pc, #524]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	22f0      	movs	r2, #240	; 0xf0
 8008860:	4393      	bics	r3, r2
 8008862:	0019      	movs	r1, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	689a      	ldr	r2, [r3, #8]
 8008868:	4b7f      	ldr	r3, [pc, #508]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 800886a:	430a      	orrs	r2, r1
 800886c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2201      	movs	r2, #1
 8008874:	4013      	ands	r3, r2
 8008876:	d100      	bne.n	800887a <HAL_RCC_ClockConfig+0x8a>
 8008878:	e089      	b.n	800898e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d107      	bne.n	8008892 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008882:	4b79      	ldr	r3, [pc, #484]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	2380      	movs	r3, #128	; 0x80
 8008888:	029b      	lsls	r3, r3, #10
 800888a:	4013      	ands	r3, r2
 800888c:	d120      	bne.n	80088d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e0e1      	b.n	8008a56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	2b03      	cmp	r3, #3
 8008898:	d107      	bne.n	80088aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800889a:	4b73      	ldr	r3, [pc, #460]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	2380      	movs	r3, #128	; 0x80
 80088a0:	049b      	lsls	r3, r3, #18
 80088a2:	4013      	ands	r3, r2
 80088a4:	d114      	bne.n	80088d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e0d5      	b.n	8008a56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d106      	bne.n	80088c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088b2:	4b6d      	ldr	r3, [pc, #436]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2204      	movs	r2, #4
 80088b8:	4013      	ands	r3, r2
 80088ba:	d109      	bne.n	80088d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e0ca      	b.n	8008a56 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80088c0:	4b69      	ldr	r3, [pc, #420]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	2380      	movs	r3, #128	; 0x80
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4013      	ands	r3, r2
 80088ca:	d101      	bne.n	80088d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e0c2      	b.n	8008a56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088d0:	4b65      	ldr	r3, [pc, #404]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	2203      	movs	r2, #3
 80088d6:	4393      	bics	r3, r2
 80088d8:	0019      	movs	r1, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685a      	ldr	r2, [r3, #4]
 80088de:	4b62      	ldr	r3, [pc, #392]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 80088e0:	430a      	orrs	r2, r1
 80088e2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80088e4:	f7fd fdca 	bl	800647c <HAL_GetTick>
 80088e8:	0003      	movs	r3, r0
 80088ea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d111      	bne.n	8008918 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80088f4:	e009      	b.n	800890a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088f6:	f7fd fdc1 	bl	800647c <HAL_GetTick>
 80088fa:	0002      	movs	r2, r0
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	4a58      	ldr	r2, [pc, #352]	; (8008a64 <HAL_RCC_ClockConfig+0x274>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d901      	bls.n	800890a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e0a5      	b.n	8008a56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800890a:	4b57      	ldr	r3, [pc, #348]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	220c      	movs	r2, #12
 8008910:	4013      	ands	r3, r2
 8008912:	2b08      	cmp	r3, #8
 8008914:	d1ef      	bne.n	80088f6 <HAL_RCC_ClockConfig+0x106>
 8008916:	e03a      	b.n	800898e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	2b03      	cmp	r3, #3
 800891e:	d111      	bne.n	8008944 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008920:	e009      	b.n	8008936 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008922:	f7fd fdab 	bl	800647c <HAL_GetTick>
 8008926:	0002      	movs	r2, r0
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	4a4d      	ldr	r2, [pc, #308]	; (8008a64 <HAL_RCC_ClockConfig+0x274>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d901      	bls.n	8008936 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e08f      	b.n	8008a56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008936:	4b4c      	ldr	r3, [pc, #304]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	220c      	movs	r2, #12
 800893c:	4013      	ands	r3, r2
 800893e:	2b0c      	cmp	r3, #12
 8008940:	d1ef      	bne.n	8008922 <HAL_RCC_ClockConfig+0x132>
 8008942:	e024      	b.n	800898e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d11b      	bne.n	8008984 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800894c:	e009      	b.n	8008962 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800894e:	f7fd fd95 	bl	800647c <HAL_GetTick>
 8008952:	0002      	movs	r2, r0
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	4a42      	ldr	r2, [pc, #264]	; (8008a64 <HAL_RCC_ClockConfig+0x274>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d901      	bls.n	8008962 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e079      	b.n	8008a56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008962:	4b41      	ldr	r3, [pc, #260]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	220c      	movs	r2, #12
 8008968:	4013      	ands	r3, r2
 800896a:	2b04      	cmp	r3, #4
 800896c:	d1ef      	bne.n	800894e <HAL_RCC_ClockConfig+0x15e>
 800896e:	e00e      	b.n	800898e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008970:	f7fd fd84 	bl	800647c <HAL_GetTick>
 8008974:	0002      	movs	r2, r0
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	4a3a      	ldr	r2, [pc, #232]	; (8008a64 <HAL_RCC_ClockConfig+0x274>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d901      	bls.n	8008984 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e068      	b.n	8008a56 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008984:	4b38      	ldr	r3, [pc, #224]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	220c      	movs	r2, #12
 800898a:	4013      	ands	r3, r2
 800898c:	d1f0      	bne.n	8008970 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800898e:	4b34      	ldr	r3, [pc, #208]	; (8008a60 <HAL_RCC_ClockConfig+0x270>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2201      	movs	r2, #1
 8008994:	4013      	ands	r3, r2
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	429a      	cmp	r2, r3
 800899a:	d21e      	bcs.n	80089da <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800899c:	4b30      	ldr	r3, [pc, #192]	; (8008a60 <HAL_RCC_ClockConfig+0x270>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2201      	movs	r2, #1
 80089a2:	4393      	bics	r3, r2
 80089a4:	0019      	movs	r1, r3
 80089a6:	4b2e      	ldr	r3, [pc, #184]	; (8008a60 <HAL_RCC_ClockConfig+0x270>)
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80089ae:	f7fd fd65 	bl	800647c <HAL_GetTick>
 80089b2:	0003      	movs	r3, r0
 80089b4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089b6:	e009      	b.n	80089cc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089b8:	f7fd fd60 	bl	800647c <HAL_GetTick>
 80089bc:	0002      	movs	r2, r0
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	4a28      	ldr	r2, [pc, #160]	; (8008a64 <HAL_RCC_ClockConfig+0x274>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d901      	bls.n	80089cc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e044      	b.n	8008a56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089cc:	4b24      	ldr	r3, [pc, #144]	; (8008a60 <HAL_RCC_ClockConfig+0x270>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2201      	movs	r2, #1
 80089d2:	4013      	ands	r3, r2
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d1ee      	bne.n	80089b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2204      	movs	r2, #4
 80089e0:	4013      	ands	r3, r2
 80089e2:	d009      	beq.n	80089f8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089e4:	4b20      	ldr	r3, [pc, #128]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	4a20      	ldr	r2, [pc, #128]	; (8008a6c <HAL_RCC_ClockConfig+0x27c>)
 80089ea:	4013      	ands	r3, r2
 80089ec:	0019      	movs	r1, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	4b1d      	ldr	r3, [pc, #116]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 80089f4:	430a      	orrs	r2, r1
 80089f6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2208      	movs	r2, #8
 80089fe:	4013      	ands	r3, r2
 8008a00:	d00a      	beq.n	8008a18 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008a02:	4b19      	ldr	r3, [pc, #100]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	4a1a      	ldr	r2, [pc, #104]	; (8008a70 <HAL_RCC_ClockConfig+0x280>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	0019      	movs	r1, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	00da      	lsls	r2, r3, #3
 8008a12:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 8008a14:	430a      	orrs	r2, r1
 8008a16:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a18:	f000 f832 	bl	8008a80 <HAL_RCC_GetSysClockFreq>
 8008a1c:	0001      	movs	r1, r0
 8008a1e:	4b12      	ldr	r3, [pc, #72]	; (8008a68 <HAL_RCC_ClockConfig+0x278>)
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	091b      	lsrs	r3, r3, #4
 8008a24:	220f      	movs	r2, #15
 8008a26:	4013      	ands	r3, r2
 8008a28:	4a12      	ldr	r2, [pc, #72]	; (8008a74 <HAL_RCC_ClockConfig+0x284>)
 8008a2a:	5cd3      	ldrb	r3, [r2, r3]
 8008a2c:	000a      	movs	r2, r1
 8008a2e:	40da      	lsrs	r2, r3
 8008a30:	4b11      	ldr	r3, [pc, #68]	; (8008a78 <HAL_RCC_ClockConfig+0x288>)
 8008a32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008a34:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <HAL_RCC_ClockConfig+0x28c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	250b      	movs	r5, #11
 8008a3a:	197c      	adds	r4, r7, r5
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7fd fcd7 	bl	80063f0 <HAL_InitTick>
 8008a42:	0003      	movs	r3, r0
 8008a44:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008a46:	197b      	adds	r3, r7, r5
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8008a4e:	197b      	adds	r3, r7, r5
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	e000      	b.n	8008a56 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	0018      	movs	r0, r3
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	b004      	add	sp, #16
 8008a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a5e:	46c0      	nop			; (mov r8, r8)
 8008a60:	40022000 	.word	0x40022000
 8008a64:	00001388 	.word	0x00001388
 8008a68:	40021000 	.word	0x40021000
 8008a6c:	fffff8ff 	.word	0xfffff8ff
 8008a70:	ffffc7ff 	.word	0xffffc7ff
 8008a74:	0800ea24 	.word	0x0800ea24
 8008a78:	20000024 	.word	0x20000024
 8008a7c:	20000028 	.word	0x20000028

08008a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a80:	b5b0      	push	{r4, r5, r7, lr}
 8008a82:	b08e      	sub	sp, #56	; 0x38
 8008a84:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008a86:	4b4c      	ldr	r3, [pc, #304]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a8e:	230c      	movs	r3, #12
 8008a90:	4013      	ands	r3, r2
 8008a92:	2b0c      	cmp	r3, #12
 8008a94:	d014      	beq.n	8008ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8008a96:	d900      	bls.n	8008a9a <HAL_RCC_GetSysClockFreq+0x1a>
 8008a98:	e07b      	b.n	8008b92 <HAL_RCC_GetSysClockFreq+0x112>
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d002      	beq.n	8008aa4 <HAL_RCC_GetSysClockFreq+0x24>
 8008a9e:	2b08      	cmp	r3, #8
 8008aa0:	d00b      	beq.n	8008aba <HAL_RCC_GetSysClockFreq+0x3a>
 8008aa2:	e076      	b.n	8008b92 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008aa4:	4b44      	ldr	r3, [pc, #272]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2210      	movs	r2, #16
 8008aaa:	4013      	ands	r3, r2
 8008aac:	d002      	beq.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008aae:	4b43      	ldr	r3, [pc, #268]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x13c>)
 8008ab0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008ab2:	e07c      	b.n	8008bae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8008ab4:	4b42      	ldr	r3, [pc, #264]	; (8008bc0 <HAL_RCC_GetSysClockFreq+0x140>)
 8008ab6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008ab8:	e079      	b.n	8008bae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008aba:	4b42      	ldr	r3, [pc, #264]	; (8008bc4 <HAL_RCC_GetSysClockFreq+0x144>)
 8008abc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008abe:	e076      	b.n	8008bae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac2:	0c9a      	lsrs	r2, r3, #18
 8008ac4:	230f      	movs	r3, #15
 8008ac6:	401a      	ands	r2, r3
 8008ac8:	4b3f      	ldr	r3, [pc, #252]	; (8008bc8 <HAL_RCC_GetSysClockFreq+0x148>)
 8008aca:	5c9b      	ldrb	r3, [r3, r2]
 8008acc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	0d9a      	lsrs	r2, r3, #22
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ada:	4b37      	ldr	r3, [pc, #220]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	2380      	movs	r3, #128	; 0x80
 8008ae0:	025b      	lsls	r3, r3, #9
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	d01a      	beq.n	8008b1c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae8:	61bb      	str	r3, [r7, #24]
 8008aea:	2300      	movs	r3, #0
 8008aec:	61fb      	str	r3, [r7, #28]
 8008aee:	4a35      	ldr	r2, [pc, #212]	; (8008bc4 <HAL_RCC_GetSysClockFreq+0x144>)
 8008af0:	2300      	movs	r3, #0
 8008af2:	69b8      	ldr	r0, [r7, #24]
 8008af4:	69f9      	ldr	r1, [r7, #28]
 8008af6:	f7f7 fd31 	bl	800055c <__aeabi_lmul>
 8008afa:	0002      	movs	r2, r0
 8008afc:	000b      	movs	r3, r1
 8008afe:	0010      	movs	r0, r2
 8008b00:	0019      	movs	r1, r3
 8008b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b04:	613b      	str	r3, [r7, #16]
 8008b06:	2300      	movs	r3, #0
 8008b08:	617b      	str	r3, [r7, #20]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f7f7 fd05 	bl	800051c <__aeabi_uldivmod>
 8008b12:	0002      	movs	r2, r0
 8008b14:	000b      	movs	r3, r1
 8008b16:	0013      	movs	r3, r2
 8008b18:	637b      	str	r3, [r7, #52]	; 0x34
 8008b1a:	e037      	b.n	8008b8c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008b1c:	4b26      	ldr	r3, [pc, #152]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2210      	movs	r2, #16
 8008b22:	4013      	ands	r3, r2
 8008b24:	d01a      	beq.n	8008b5c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8008b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b28:	60bb      	str	r3, [r7, #8]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60fb      	str	r3, [r7, #12]
 8008b2e:	4a23      	ldr	r2, [pc, #140]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x13c>)
 8008b30:	2300      	movs	r3, #0
 8008b32:	68b8      	ldr	r0, [r7, #8]
 8008b34:	68f9      	ldr	r1, [r7, #12]
 8008b36:	f7f7 fd11 	bl	800055c <__aeabi_lmul>
 8008b3a:	0002      	movs	r2, r0
 8008b3c:	000b      	movs	r3, r1
 8008b3e:	0010      	movs	r0, r2
 8008b40:	0019      	movs	r1, r3
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	603b      	str	r3, [r7, #0]
 8008b46:	2300      	movs	r3, #0
 8008b48:	607b      	str	r3, [r7, #4]
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f7f7 fce5 	bl	800051c <__aeabi_uldivmod>
 8008b52:	0002      	movs	r2, r0
 8008b54:	000b      	movs	r3, r1
 8008b56:	0013      	movs	r3, r2
 8008b58:	637b      	str	r3, [r7, #52]	; 0x34
 8008b5a:	e017      	b.n	8008b8c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5e:	0018      	movs	r0, r3
 8008b60:	2300      	movs	r3, #0
 8008b62:	0019      	movs	r1, r3
 8008b64:	4a16      	ldr	r2, [pc, #88]	; (8008bc0 <HAL_RCC_GetSysClockFreq+0x140>)
 8008b66:	2300      	movs	r3, #0
 8008b68:	f7f7 fcf8 	bl	800055c <__aeabi_lmul>
 8008b6c:	0002      	movs	r2, r0
 8008b6e:	000b      	movs	r3, r1
 8008b70:	0010      	movs	r0, r2
 8008b72:	0019      	movs	r1, r3
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	001c      	movs	r4, r3
 8008b78:	2300      	movs	r3, #0
 8008b7a:	001d      	movs	r5, r3
 8008b7c:	0022      	movs	r2, r4
 8008b7e:	002b      	movs	r3, r5
 8008b80:	f7f7 fccc 	bl	800051c <__aeabi_uldivmod>
 8008b84:	0002      	movs	r2, r0
 8008b86:	000b      	movs	r3, r1
 8008b88:	0013      	movs	r3, r2
 8008b8a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8008b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008b90:	e00d      	b.n	8008bae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008b92:	4b09      	ldr	r3, [pc, #36]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	0b5b      	lsrs	r3, r3, #13
 8008b98:	2207      	movs	r2, #7
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	2280      	movs	r2, #128	; 0x80
 8008ba4:	0212      	lsls	r2, r2, #8
 8008ba6:	409a      	lsls	r2, r3
 8008ba8:	0013      	movs	r3, r2
 8008baa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008bac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8008bb0:	0018      	movs	r0, r3
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	b00e      	add	sp, #56	; 0x38
 8008bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8008bb8:	40021000 	.word	0x40021000
 8008bbc:	003d0900 	.word	0x003d0900
 8008bc0:	00f42400 	.word	0x00f42400
 8008bc4:	007a1200 	.word	0x007a1200
 8008bc8:	0800ea3c 	.word	0x0800ea3c

08008bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bd0:	4b02      	ldr	r3, [pc, #8]	; (8008bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
}
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	46c0      	nop			; (mov r8, r8)
 8008bdc:	20000024 	.word	0x20000024

08008be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008be4:	f7ff fff2 	bl	8008bcc <HAL_RCC_GetHCLKFreq>
 8008be8:	0001      	movs	r1, r0
 8008bea:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	0a1b      	lsrs	r3, r3, #8
 8008bf0:	2207      	movs	r2, #7
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	4a04      	ldr	r2, [pc, #16]	; (8008c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008bf6:	5cd3      	ldrb	r3, [r2, r3]
 8008bf8:	40d9      	lsrs	r1, r3
 8008bfa:	000b      	movs	r3, r1
}
 8008bfc:	0018      	movs	r0, r3
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	46c0      	nop			; (mov r8, r8)
 8008c04:	40021000 	.word	0x40021000
 8008c08:	0800ea34 	.word	0x0800ea34

08008c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008c10:	f7ff ffdc 	bl	8008bcc <HAL_RCC_GetHCLKFreq>
 8008c14:	0001      	movs	r1, r0
 8008c16:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	0adb      	lsrs	r3, r3, #11
 8008c1c:	2207      	movs	r2, #7
 8008c1e:	4013      	ands	r3, r2
 8008c20:	4a04      	ldr	r2, [pc, #16]	; (8008c34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c22:	5cd3      	ldrb	r3, [r2, r3]
 8008c24:	40d9      	lsrs	r1, r3
 8008c26:	000b      	movs	r3, r1
}
 8008c28:	0018      	movs	r0, r3
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	46c0      	nop			; (mov r8, r8)
 8008c30:	40021000 	.word	0x40021000
 8008c34:	0800ea34 	.word	0x0800ea34

08008c38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8008c40:	2017      	movs	r0, #23
 8008c42:	183b      	adds	r3, r7, r0
 8008c44:	2200      	movs	r2, #0
 8008c46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2220      	movs	r2, #32
 8008c4e:	4013      	ands	r3, r2
 8008c50:	d100      	bne.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8008c52:	e0c2      	b.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c54:	4b89      	ldr	r3, [pc, #548]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c58:	2380      	movs	r3, #128	; 0x80
 8008c5a:	055b      	lsls	r3, r3, #21
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	d109      	bne.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c60:	4b86      	ldr	r3, [pc, #536]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c64:	4b85      	ldr	r3, [pc, #532]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008c66:	2180      	movs	r1, #128	; 0x80
 8008c68:	0549      	lsls	r1, r1, #21
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008c6e:	183b      	adds	r3, r7, r0
 8008c70:	2201      	movs	r2, #1
 8008c72:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c74:	4b82      	ldr	r3, [pc, #520]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	2380      	movs	r3, #128	; 0x80
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	d11a      	bne.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c80:	4b7f      	ldr	r3, [pc, #508]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	4b7e      	ldr	r3, [pc, #504]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008c86:	2180      	movs	r1, #128	; 0x80
 8008c88:	0049      	lsls	r1, r1, #1
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c8e:	f7fd fbf5 	bl	800647c <HAL_GetTick>
 8008c92:	0003      	movs	r3, r0
 8008c94:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c96:	e008      	b.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c98:	f7fd fbf0 	bl	800647c <HAL_GetTick>
 8008c9c:	0002      	movs	r2, r0
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	2b64      	cmp	r3, #100	; 0x64
 8008ca4:	d901      	bls.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e0e3      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x23a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008caa:	4b75      	ldr	r3, [pc, #468]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	2380      	movs	r3, #128	; 0x80
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	d0f0      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008cb6:	4b71      	ldr	r3, [pc, #452]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	23c0      	movs	r3, #192	; 0xc0
 8008cbc:	039b      	lsls	r3, r3, #14
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	23c0      	movs	r3, #192	; 0xc0
 8008cc8:	039b      	lsls	r3, r3, #14
 8008cca:	4013      	ands	r3, r2
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d013      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	23c0      	movs	r3, #192	; 0xc0
 8008cd8:	029b      	lsls	r3, r3, #10
 8008cda:	401a      	ands	r2, r3
 8008cdc:	23c0      	movs	r3, #192	; 0xc0
 8008cde:	029b      	lsls	r3, r3, #10
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d10a      	bne.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ce4:	4b65      	ldr	r3, [pc, #404]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	2380      	movs	r3, #128	; 0x80
 8008cea:	029b      	lsls	r3, r3, #10
 8008cec:	401a      	ands	r2, r3
 8008cee:	2380      	movs	r3, #128	; 0x80
 8008cf0:	029b      	lsls	r3, r3, #10
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d101      	bne.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e0bb      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008cfa:	4b60      	ldr	r3, [pc, #384]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008cfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cfe:	23c0      	movs	r3, #192	; 0xc0
 8008d00:	029b      	lsls	r3, r3, #10
 8008d02:	4013      	ands	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d03b      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	23c0      	movs	r3, #192	; 0xc0
 8008d12:	029b      	lsls	r3, r3, #10
 8008d14:	4013      	ands	r3, r2
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d033      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2220      	movs	r2, #32
 8008d22:	4013      	ands	r3, r2
 8008d24:	d02e      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8008d26:	4b55      	ldr	r3, [pc, #340]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d2a:	4a56      	ldr	r2, [pc, #344]	; (8008e84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008d30:	4b52      	ldr	r3, [pc, #328]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008d32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d34:	4b51      	ldr	r3, [pc, #324]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008d36:	2180      	movs	r1, #128	; 0x80
 8008d38:	0309      	lsls	r1, r1, #12
 8008d3a:	430a      	orrs	r2, r1
 8008d3c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008d3e:	4b4f      	ldr	r3, [pc, #316]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008d40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d42:	4b4e      	ldr	r3, [pc, #312]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008d44:	4950      	ldr	r1, [pc, #320]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008d46:	400a      	ands	r2, r1
 8008d48:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008d4a:	4b4c      	ldr	r3, [pc, #304]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	2380      	movs	r3, #128	; 0x80
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	4013      	ands	r3, r2
 8008d58:	d014      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d5a:	f7fd fb8f 	bl	800647c <HAL_GetTick>
 8008d5e:	0003      	movs	r3, r0
 8008d60:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d62:	e009      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d64:	f7fd fb8a 	bl	800647c <HAL_GetTick>
 8008d68:	0002      	movs	r2, r0
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	4a47      	ldr	r2, [pc, #284]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d901      	bls.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e07c      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d78:	4b40      	ldr	r3, [pc, #256]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d7c:	2380      	movs	r3, #128	; 0x80
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4013      	ands	r3, r2
 8008d82:	d0ef      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	23c0      	movs	r3, #192	; 0xc0
 8008d8a:	029b      	lsls	r3, r3, #10
 8008d8c:	401a      	ands	r2, r3
 8008d8e:	23c0      	movs	r3, #192	; 0xc0
 8008d90:	029b      	lsls	r3, r3, #10
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d10c      	bne.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8008d96:	4b39      	ldr	r3, [pc, #228]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a3d      	ldr	r2, [pc, #244]	; (8008e90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	0019      	movs	r1, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685a      	ldr	r2, [r3, #4]
 8008da4:	23c0      	movs	r3, #192	; 0xc0
 8008da6:	039b      	lsls	r3, r3, #14
 8008da8:	401a      	ands	r2, r3
 8008daa:	4b34      	ldr	r3, [pc, #208]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008dac:	430a      	orrs	r2, r1
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	4b32      	ldr	r3, [pc, #200]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008db2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	23c0      	movs	r3, #192	; 0xc0
 8008dba:	029b      	lsls	r3, r3, #10
 8008dbc:	401a      	ands	r2, r3
 8008dbe:	4b2f      	ldr	r3, [pc, #188]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008dc4:	2317      	movs	r3, #23
 8008dc6:	18fb      	adds	r3, r7, r3
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d105      	bne.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dce:	4b2b      	ldr	r3, [pc, #172]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dd2:	4b2a      	ldr	r3, [pc, #168]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008dd4:	492f      	ldr	r1, [pc, #188]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008dd6:	400a      	ands	r2, r1
 8008dd8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2201      	movs	r2, #1
 8008de0:	4013      	ands	r3, r2
 8008de2:	d009      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008de4:	4b25      	ldr	r3, [pc, #148]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008de8:	2203      	movs	r2, #3
 8008dea:	4393      	bics	r3, r2
 8008dec:	0019      	movs	r1, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	689a      	ldr	r2, [r3, #8]
 8008df2:	4b22      	ldr	r3, [pc, #136]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008df4:	430a      	orrs	r2, r1
 8008df6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	4013      	ands	r3, r2
 8008e00:	d009      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e02:	4b1e      	ldr	r3, [pc, #120]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e06:	220c      	movs	r2, #12
 8008e08:	4393      	bics	r3, r2
 8008e0a:	0019      	movs	r1, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68da      	ldr	r2, [r3, #12]
 8008e10:	4b1a      	ldr	r3, [pc, #104]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008e12:	430a      	orrs	r2, r1
 8008e14:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2204      	movs	r2, #4
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	d009      	beq.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e20:	4b16      	ldr	r3, [pc, #88]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e24:	4a1c      	ldr	r2, [pc, #112]	; (8008e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e26:	4013      	ands	r3, r2
 8008e28:	0019      	movs	r1, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	691a      	ldr	r2, [r3, #16]
 8008e2e:	4b13      	ldr	r3, [pc, #76]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008e30:	430a      	orrs	r2, r1
 8008e32:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2208      	movs	r2, #8
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	d009      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e3e:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e42:	4a16      	ldr	r2, [pc, #88]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e44:	4013      	ands	r3, r2
 8008e46:	0019      	movs	r1, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	695a      	ldr	r2, [r3, #20]
 8008e4c:	4b0b      	ldr	r3, [pc, #44]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2280      	movs	r2, #128	; 0x80
 8008e58:	4013      	ands	r3, r2
 8008e5a:	d009      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008e5c:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e60:	4a0f      	ldr	r2, [pc, #60]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008e62:	4013      	ands	r3, r2
 8008e64:	0019      	movs	r1, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	699a      	ldr	r2, [r3, #24]
 8008e6a:	4b04      	ldr	r3, [pc, #16]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008e6c:	430a      	orrs	r2, r1
 8008e6e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	0018      	movs	r0, r3
 8008e74:	46bd      	mov	sp, r7
 8008e76:	b006      	add	sp, #24
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	46c0      	nop			; (mov r8, r8)
 8008e7c:	40021000 	.word	0x40021000
 8008e80:	40007000 	.word	0x40007000
 8008e84:	fffcffff 	.word	0xfffcffff
 8008e88:	fff7ffff 	.word	0xfff7ffff
 8008e8c:	00001388 	.word	0x00001388
 8008e90:	ffcfffff 	.word	0xffcfffff
 8008e94:	efffffff 	.word	0xefffffff
 8008e98:	fffff3ff 	.word	0xfffff3ff
 8008e9c:	ffffcfff 	.word	0xffffcfff
 8008ea0:	fff3ffff 	.word	0xfff3ffff

08008ea4 <HAL_RCCEx_EnableLSECSS>:
/**
  * @brief  Enables the LSE Clock Security System.
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSECSSON) ;
 8008ea8:	4b04      	ldr	r3, [pc, #16]	; (8008ebc <HAL_RCCEx_EnableLSECSS+0x18>)
 8008eaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008eac:	4b03      	ldr	r3, [pc, #12]	; (8008ebc <HAL_RCCEx_EnableLSECSS+0x18>)
 8008eae:	2180      	movs	r1, #128	; 0x80
 8008eb0:	0189      	lsls	r1, r1, #6
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008eb6:	46c0      	nop			; (mov r8, r8)
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	40021000 	.word	0x40021000

08008ec0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e08e      	b.n	8008ff0 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2221      	movs	r2, #33	; 0x21
 8008ed6:	5c9b      	ldrb	r3, [r3, r2]
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d107      	bne.n	8008eee <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	0018      	movs	r0, r3
 8008eea:	f7fc f965 	bl	80051b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2221      	movs	r2, #33	; 0x21
 8008ef2:	2102      	movs	r1, #2
 8008ef4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	22ca      	movs	r2, #202	; 0xca
 8008efc:	625a      	str	r2, [r3, #36]	; 0x24
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2253      	movs	r2, #83	; 0x53
 8008f04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	0018      	movs	r0, r3
 8008f0a:	f000 f89e 	bl	800904a <RTC_EnterInitMode>
 8008f0e:	1e03      	subs	r3, r0, #0
 8008f10:	d009      	beq.n	8008f26 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	22ff      	movs	r2, #255	; 0xff
 8008f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2221      	movs	r2, #33	; 0x21
 8008f1e:	2104      	movs	r1, #4
 8008f20:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e064      	b.n	8008ff0 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689a      	ldr	r2, [r3, #8]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4931      	ldr	r1, [pc, #196]	; (8008ff8 <HAL_RTC_Init+0x138>)
 8008f32:	400a      	ands	r2, r1
 8008f34:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6899      	ldr	r1, [r3, #8]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	431a      	orrs	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	68d2      	ldr	r2, [r2, #12]
 8008f5c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6919      	ldr	r1, [r3, #16]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	041a      	lsls	r2, r3, #16
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2180      	movs	r1, #128	; 0x80
 8008f7e:	438a      	bics	r2, r1
 8008f80:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2103      	movs	r1, #3
 8008f8e:	438a      	bics	r2, r1
 8008f90:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	69da      	ldr	r2, [r3, #28]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	431a      	orrs	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	2220      	movs	r2, #32
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	d113      	bne.n	8008fde <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	0018      	movs	r0, r3
 8008fba:	f000 f81f 	bl	8008ffc <HAL_RTC_WaitForSynchro>
 8008fbe:	1e03      	subs	r3, r0, #0
 8008fc0:	d00d      	beq.n	8008fde <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	22ff      	movs	r2, #255	; 0xff
 8008fc8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2221      	movs	r2, #33	; 0x21
 8008fce:	2104      	movs	r1, #4
 8008fd0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e008      	b.n	8008ff0 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	22ff      	movs	r2, #255	; 0xff
 8008fe4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2221      	movs	r2, #33	; 0x21
 8008fea:	2101      	movs	r1, #1
 8008fec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008fee:	2300      	movs	r3, #0
  }
}
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	b002      	add	sp, #8
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	ff8fffbf 	.word	0xff8fffbf

08008ffc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	21a0      	movs	r1, #160	; 0xa0
 8009010:	438a      	bics	r2, r1
 8009012:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009014:	f7fd fa32 	bl	800647c <HAL_GetTick>
 8009018:	0003      	movs	r3, r0
 800901a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800901c:	e00a      	b.n	8009034 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800901e:	f7fd fa2d 	bl	800647c <HAL_GetTick>
 8009022:	0002      	movs	r2, r0
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	1ad2      	subs	r2, r2, r3
 8009028:	23fa      	movs	r3, #250	; 0xfa
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	429a      	cmp	r2, r3
 800902e:	d901      	bls.n	8009034 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e006      	b.n	8009042 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	2220      	movs	r2, #32
 800903c:	4013      	ands	r3, r2
 800903e:	d0ee      	beq.n	800901e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	0018      	movs	r0, r3
 8009044:	46bd      	mov	sp, r7
 8009046:	b004      	add	sp, #16
 8009048:	bd80      	pop	{r7, pc}

0800904a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b084      	sub	sp, #16
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	2240      	movs	r2, #64	; 0x40
 800905a:	4013      	ands	r3, r2
 800905c:	d11a      	bne.n	8009094 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2201      	movs	r2, #1
 8009064:	4252      	negs	r2, r2
 8009066:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009068:	f7fd fa08 	bl	800647c <HAL_GetTick>
 800906c:	0003      	movs	r3, r0
 800906e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009070:	e00a      	b.n	8009088 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009072:	f7fd fa03 	bl	800647c <HAL_GetTick>
 8009076:	0002      	movs	r2, r0
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	1ad2      	subs	r2, r2, r3
 800907c:	23fa      	movs	r3, #250	; 0xfa
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	429a      	cmp	r2, r3
 8009082:	d901      	bls.n	8009088 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e006      	b.n	8009096 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	2240      	movs	r2, #64	; 0x40
 8009090:	4013      	ands	r3, r2
 8009092:	d0ee      	beq.n	8009072 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	0018      	movs	r0, r3
 8009098:	46bd      	mov	sp, r7
 800909a:	b004      	add	sp, #16
 800909c:	bd80      	pop	{r7, pc}
	...

080090a0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2220      	movs	r2, #32
 80090b0:	5c9b      	ldrb	r3, [r3, r2]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d101      	bne.n	80090ba <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80090b6:	2302      	movs	r3, #2
 80090b8:	e0ad      	b.n	8009216 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2220      	movs	r2, #32
 80090be:	2101      	movs	r1, #1
 80090c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2221      	movs	r2, #33	; 0x21
 80090c6:	2102      	movs	r1, #2
 80090c8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	22ca      	movs	r2, #202	; 0xca
 80090d0:	625a      	str	r2, [r3, #36]	; 0x24
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2253      	movs	r2, #83	; 0x53
 80090d8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	2380      	movs	r3, #128	; 0x80
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	4013      	ands	r3, r2
 80090e6:	d021      	beq.n	800912c <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 80090e8:	f7fd f9c8 	bl	800647c <HAL_GetTick>
 80090ec:	0003      	movs	r3, r0
 80090ee:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80090f0:	e016      	b.n	8009120 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80090f2:	f7fd f9c3 	bl	800647c <HAL_GetTick>
 80090f6:	0002      	movs	r2, r0
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	1ad2      	subs	r2, r2, r3
 80090fc:	23fa      	movs	r3, #250	; 0xfa
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	429a      	cmp	r2, r3
 8009102:	d90d      	bls.n	8009120 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	22ff      	movs	r2, #255	; 0xff
 800910a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2221      	movs	r2, #33	; 0x21
 8009110:	2103      	movs	r1, #3
 8009112:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2220      	movs	r2, #32
 8009118:	2100      	movs	r1, #0
 800911a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e07a      	b.n	8009216 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	2204      	movs	r2, #4
 8009128:	4013      	ands	r3, r2
 800912a:	d1e2      	bne.n	80090f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	493a      	ldr	r1, [pc, #232]	; (8009220 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8009138:	400a      	ands	r2, r1
 800913a:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	22ff      	movs	r2, #255	; 0xff
 8009144:	401a      	ands	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4936      	ldr	r1, [pc, #216]	; (8009224 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 800914c:	430a      	orrs	r2, r1
 800914e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009150:	f7fd f994 	bl	800647c <HAL_GetTick>
 8009154:	0003      	movs	r3, r0
 8009156:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009158:	e016      	b.n	8009188 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800915a:	f7fd f98f 	bl	800647c <HAL_GetTick>
 800915e:	0002      	movs	r2, r0
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	1ad2      	subs	r2, r2, r3
 8009164:	23fa      	movs	r3, #250	; 0xfa
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	429a      	cmp	r2, r3
 800916a:	d90d      	bls.n	8009188 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	22ff      	movs	r2, #255	; 0xff
 8009172:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2221      	movs	r2, #33	; 0x21
 8009178:	2103      	movs	r1, #3
 800917a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2220      	movs	r2, #32
 8009180:	2100      	movs	r1, #0
 8009182:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e046      	b.n	8009216 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	2204      	movs	r2, #4
 8009190:	4013      	ands	r3, r2
 8009192:	d0e2      	beq.n	800915a <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2107      	movs	r1, #7
 80091a8:	438a      	bics	r2, r1
 80091aa:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6899      	ldr	r1, [r3, #8]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	430a      	orrs	r2, r1
 80091ba:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80091bc:	4b1a      	ldr	r3, [pc, #104]	; (8009228 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	4b19      	ldr	r3, [pc, #100]	; (8009228 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80091c2:	2180      	movs	r1, #128	; 0x80
 80091c4:	0349      	lsls	r1, r1, #13
 80091c6:	430a      	orrs	r2, r1
 80091c8:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80091ca:	4b17      	ldr	r3, [pc, #92]	; (8009228 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80091cc:	689a      	ldr	r2, [r3, #8]
 80091ce:	4b16      	ldr	r3, [pc, #88]	; (8009228 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80091d0:	2180      	movs	r1, #128	; 0x80
 80091d2:	0349      	lsls	r1, r1, #13
 80091d4:	430a      	orrs	r2, r1
 80091d6:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	689a      	ldr	r2, [r3, #8]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2180      	movs	r1, #128	; 0x80
 80091e4:	01c9      	lsls	r1, r1, #7
 80091e6:	430a      	orrs	r2, r1
 80091e8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	689a      	ldr	r2, [r3, #8]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2180      	movs	r1, #128	; 0x80
 80091f6:	00c9      	lsls	r1, r1, #3
 80091f8:	430a      	orrs	r2, r1
 80091fa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	22ff      	movs	r2, #255	; 0xff
 8009202:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2221      	movs	r2, #33	; 0x21
 8009208:	2101      	movs	r1, #1
 800920a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2220      	movs	r2, #32
 8009210:	2100      	movs	r1, #0
 8009212:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	0018      	movs	r0, r3
 8009218:	46bd      	mov	sp, r7
 800921a:	b006      	add	sp, #24
 800921c:	bd80      	pop	{r7, pc}
 800921e:	46c0      	nop			; (mov r8, r8)
 8009220:	fffffbff 	.word	0xfffffbff
 8009224:	fffffb7f 	.word	0xfffffb7f
 8009228:	40010400 	.word	0x40010400

0800922c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68da      	ldr	r2, [r3, #12]
 800923a:	2380      	movs	r3, #128	; 0x80
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	4013      	ands	r3, r2
 8009240:	d00d      	beq.n	800925e <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	0018      	movs	r0, r3
 8009246:	f7fa fab5 	bl	80037b4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	22ff      	movs	r2, #255	; 0xff
 8009252:	401a      	ands	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4907      	ldr	r1, [pc, #28]	; (8009278 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 800925a:	430a      	orrs	r2, r1
 800925c:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800925e:	4b07      	ldr	r3, [pc, #28]	; (800927c <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 8009260:	2280      	movs	r2, #128	; 0x80
 8009262:	0352      	lsls	r2, r2, #13
 8009264:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2221      	movs	r2, #33	; 0x21
 800926a:	2101      	movs	r1, #1
 800926c:	5499      	strb	r1, [r3, r2]
}
 800926e:	46c0      	nop			; (mov r8, r8)
 8009270:	46bd      	mov	sp, r7
 8009272:	b002      	add	sp, #8
 8009274:	bd80      	pop	{r7, pc}
 8009276:	46c0      	nop			; (mov r8, r8)
 8009278:	fffffb7f 	.word	0xfffffb7f
 800927c:	40010400 	.word	0x40010400

08009280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e083      	b.n	800939a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	2b00      	cmp	r3, #0
 8009298:	d109      	bne.n	80092ae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	2382      	movs	r3, #130	; 0x82
 80092a0:	005b      	lsls	r3, r3, #1
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d009      	beq.n	80092ba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	61da      	str	r2, [r3, #28]
 80092ac:	e005      	b.n	80092ba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2251      	movs	r2, #81	; 0x51
 80092c4:	5c9b      	ldrb	r3, [r3, r2]
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d107      	bne.n	80092dc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2250      	movs	r2, #80	; 0x50
 80092d0:	2100      	movs	r1, #0
 80092d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	0018      	movs	r0, r3
 80092d8:	f7fb ff8e 	bl	80051f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2251      	movs	r2, #81	; 0x51
 80092e0:	2102      	movs	r1, #2
 80092e2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2140      	movs	r1, #64	; 0x40
 80092f0:	438a      	bics	r2, r1
 80092f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	2382      	movs	r3, #130	; 0x82
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	401a      	ands	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6899      	ldr	r1, [r3, #8]
 8009302:	2384      	movs	r3, #132	; 0x84
 8009304:	021b      	lsls	r3, r3, #8
 8009306:	400b      	ands	r3, r1
 8009308:	431a      	orrs	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68d9      	ldr	r1, [r3, #12]
 800930e:	2380      	movs	r3, #128	; 0x80
 8009310:	011b      	lsls	r3, r3, #4
 8009312:	400b      	ands	r3, r1
 8009314:	431a      	orrs	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	2102      	movs	r1, #2
 800931c:	400b      	ands	r3, r1
 800931e:	431a      	orrs	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	2101      	movs	r1, #1
 8009326:	400b      	ands	r3, r1
 8009328:	431a      	orrs	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6999      	ldr	r1, [r3, #24]
 800932e:	2380      	movs	r3, #128	; 0x80
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	400b      	ands	r3, r1
 8009334:	431a      	orrs	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	69db      	ldr	r3, [r3, #28]
 800933a:	2138      	movs	r1, #56	; 0x38
 800933c:	400b      	ands	r3, r1
 800933e:	431a      	orrs	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	2180      	movs	r1, #128	; 0x80
 8009346:	400b      	ands	r3, r1
 8009348:	431a      	orrs	r2, r3
 800934a:	0011      	movs	r1, r2
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009350:	2380      	movs	r3, #128	; 0x80
 8009352:	019b      	lsls	r3, r3, #6
 8009354:	401a      	ands	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	430a      	orrs	r2, r1
 800935c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	0c1b      	lsrs	r3, r3, #16
 8009364:	2204      	movs	r2, #4
 8009366:	4013      	ands	r3, r2
 8009368:	0019      	movs	r1, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936e:	2210      	movs	r2, #16
 8009370:	401a      	ands	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	69da      	ldr	r2, [r3, #28]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4907      	ldr	r1, [pc, #28]	; (80093a4 <HAL_SPI_Init+0x124>)
 8009386:	400a      	ands	r2, r1
 8009388:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2251      	movs	r2, #81	; 0x51
 8009394:	2101      	movs	r1, #1
 8009396:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	0018      	movs	r0, r3
 800939c:	46bd      	mov	sp, r7
 800939e:	b002      	add	sp, #8
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	46c0      	nop			; (mov r8, r8)
 80093a4:	fffff7ff 	.word	0xfffff7ff

080093a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	603b      	str	r3, [r7, #0]
 80093b4:	1dbb      	adds	r3, r7, #6
 80093b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80093b8:	231f      	movs	r3, #31
 80093ba:	18fb      	adds	r3, r7, r3
 80093bc:	2200      	movs	r2, #0
 80093be:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2250      	movs	r2, #80	; 0x50
 80093c4:	5c9b      	ldrb	r3, [r3, r2]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d101      	bne.n	80093ce <HAL_SPI_Transmit+0x26>
 80093ca:	2302      	movs	r3, #2
 80093cc:	e13e      	b.n	800964c <HAL_SPI_Transmit+0x2a4>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2250      	movs	r2, #80	; 0x50
 80093d2:	2101      	movs	r1, #1
 80093d4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093d6:	f7fd f851 	bl	800647c <HAL_GetTick>
 80093da:	0003      	movs	r3, r0
 80093dc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80093de:	2316      	movs	r3, #22
 80093e0:	18fb      	adds	r3, r7, r3
 80093e2:	1dba      	adds	r2, r7, #6
 80093e4:	8812      	ldrh	r2, [r2, #0]
 80093e6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2251      	movs	r2, #81	; 0x51
 80093ec:	5c9b      	ldrb	r3, [r3, r2]
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d004      	beq.n	80093fe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80093f4:	231f      	movs	r3, #31
 80093f6:	18fb      	adds	r3, r7, r3
 80093f8:	2202      	movs	r2, #2
 80093fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80093fc:	e11b      	b.n	8009636 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d003      	beq.n	800940c <HAL_SPI_Transmit+0x64>
 8009404:	1dbb      	adds	r3, r7, #6
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d104      	bne.n	8009416 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800940c:	231f      	movs	r3, #31
 800940e:	18fb      	adds	r3, r7, r3
 8009410:	2201      	movs	r2, #1
 8009412:	701a      	strb	r2, [r3, #0]
    goto error;
 8009414:	e10f      	b.n	8009636 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2251      	movs	r2, #81	; 0x51
 800941a:	2103      	movs	r1, #3
 800941c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	1dba      	adds	r2, r7, #6
 800942e:	8812      	ldrh	r2, [r2, #0]
 8009430:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	1dba      	adds	r2, r7, #6
 8009436:	8812      	ldrh	r2, [r2, #0]
 8009438:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	2380      	movs	r3, #128	; 0x80
 800945e:	021b      	lsls	r3, r3, #8
 8009460:	429a      	cmp	r2, r3
 8009462:	d110      	bne.n	8009486 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2140      	movs	r1, #64	; 0x40
 8009470:	438a      	bics	r2, r1
 8009472:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2180      	movs	r1, #128	; 0x80
 8009480:	01c9      	lsls	r1, r1, #7
 8009482:	430a      	orrs	r2, r1
 8009484:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2240      	movs	r2, #64	; 0x40
 800948e:	4013      	ands	r3, r2
 8009490:	2b40      	cmp	r3, #64	; 0x40
 8009492:	d007      	beq.n	80094a4 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2140      	movs	r1, #64	; 0x40
 80094a0:	430a      	orrs	r2, r1
 80094a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	68da      	ldr	r2, [r3, #12]
 80094a8:	2380      	movs	r3, #128	; 0x80
 80094aa:	011b      	lsls	r3, r3, #4
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d14e      	bne.n	800954e <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d004      	beq.n	80094c2 <HAL_SPI_Transmit+0x11a>
 80094b8:	2316      	movs	r3, #22
 80094ba:	18fb      	adds	r3, r7, r3
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d13f      	bne.n	8009542 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c6:	881a      	ldrh	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d2:	1c9a      	adds	r2, r3, #2
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094dc:	b29b      	uxth	r3, r3
 80094de:	3b01      	subs	r3, #1
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80094e6:	e02c      	b.n	8009542 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	2202      	movs	r2, #2
 80094f0:	4013      	ands	r3, r2
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d112      	bne.n	800951c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fa:	881a      	ldrh	r2, [r3, #0]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009506:	1c9a      	adds	r2, r3, #2
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009510:	b29b      	uxth	r3, r3
 8009512:	3b01      	subs	r3, #1
 8009514:	b29a      	uxth	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	86da      	strh	r2, [r3, #54]	; 0x36
 800951a:	e012      	b.n	8009542 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800951c:	f7fc ffae 	bl	800647c <HAL_GetTick>
 8009520:	0002      	movs	r2, r0
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	683a      	ldr	r2, [r7, #0]
 8009528:	429a      	cmp	r2, r3
 800952a:	d802      	bhi.n	8009532 <HAL_SPI_Transmit+0x18a>
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	3301      	adds	r3, #1
 8009530:	d102      	bne.n	8009538 <HAL_SPI_Transmit+0x190>
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d104      	bne.n	8009542 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8009538:	231f      	movs	r3, #31
 800953a:	18fb      	adds	r3, r7, r3
 800953c:	2203      	movs	r2, #3
 800953e:	701a      	strb	r2, [r3, #0]
          goto error;
 8009540:	e079      	b.n	8009636 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009546:	b29b      	uxth	r3, r3
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1cd      	bne.n	80094e8 <HAL_SPI_Transmit+0x140>
 800954c:	e04f      	b.n	80095ee <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d004      	beq.n	8009560 <HAL_SPI_Transmit+0x1b8>
 8009556:	2316      	movs	r3, #22
 8009558:	18fb      	adds	r3, r7, r3
 800955a:	881b      	ldrh	r3, [r3, #0]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d141      	bne.n	80095e4 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	330c      	adds	r3, #12
 800956a:	7812      	ldrb	r2, [r2, #0]
 800956c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800957c:	b29b      	uxth	r3, r3
 800957e:	3b01      	subs	r3, #1
 8009580:	b29a      	uxth	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009586:	e02d      	b.n	80095e4 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	2202      	movs	r2, #2
 8009590:	4013      	ands	r3, r2
 8009592:	2b02      	cmp	r3, #2
 8009594:	d113      	bne.n	80095be <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	330c      	adds	r3, #12
 80095a0:	7812      	ldrb	r2, [r2, #0]
 80095a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	3b01      	subs	r3, #1
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80095bc:	e012      	b.n	80095e4 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095be:	f7fc ff5d 	bl	800647c <HAL_GetTick>
 80095c2:	0002      	movs	r2, r0
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d802      	bhi.n	80095d4 <HAL_SPI_Transmit+0x22c>
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	3301      	adds	r3, #1
 80095d2:	d102      	bne.n	80095da <HAL_SPI_Transmit+0x232>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d104      	bne.n	80095e4 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 80095da:	231f      	movs	r3, #31
 80095dc:	18fb      	adds	r3, r7, r3
 80095de:	2203      	movs	r2, #3
 80095e0:	701a      	strb	r2, [r3, #0]
          goto error;
 80095e2:	e028      	b.n	8009636 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1cc      	bne.n	8009588 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	0018      	movs	r0, r3
 80095f6:	f000 fa83 	bl	8009b00 <SPI_EndRxTxTransaction>
 80095fa:	1e03      	subs	r3, r0, #0
 80095fc:	d002      	beq.n	8009604 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2220      	movs	r2, #32
 8009602:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10a      	bne.n	8009622 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800960c:	2300      	movs	r3, #0
 800960e:	613b      	str	r3, [r7, #16]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	613b      	str	r3, [r7, #16]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	613b      	str	r3, [r7, #16]
 8009620:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009626:	2b00      	cmp	r3, #0
 8009628:	d004      	beq.n	8009634 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 800962a:	231f      	movs	r3, #31
 800962c:	18fb      	adds	r3, r7, r3
 800962e:	2201      	movs	r2, #1
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	e000      	b.n	8009636 <HAL_SPI_Transmit+0x28e>
  }

error:
 8009634:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2251      	movs	r2, #81	; 0x51
 800963a:	2101      	movs	r1, #1
 800963c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2250      	movs	r2, #80	; 0x50
 8009642:	2100      	movs	r1, #0
 8009644:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009646:	231f      	movs	r3, #31
 8009648:	18fb      	adds	r3, r7, r3
 800964a:	781b      	ldrb	r3, [r3, #0]
}
 800964c:	0018      	movs	r0, r3
 800964e:	46bd      	mov	sp, r7
 8009650:	b008      	add	sp, #32
 8009652:	bd80      	pop	{r7, pc}

08009654 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b08c      	sub	sp, #48	; 0x30
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	001a      	movs	r2, r3
 8009662:	1cbb      	adds	r3, r7, #2
 8009664:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009666:	2301      	movs	r3, #1
 8009668:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800966a:	232b      	movs	r3, #43	; 0x2b
 800966c:	18fb      	adds	r3, r7, r3
 800966e:	2200      	movs	r2, #0
 8009670:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2250      	movs	r2, #80	; 0x50
 8009676:	5c9b      	ldrb	r3, [r3, r2]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d101      	bne.n	8009680 <HAL_SPI_TransmitReceive+0x2c>
 800967c:	2302      	movs	r3, #2
 800967e:	e1a0      	b.n	80099c2 <HAL_SPI_TransmitReceive+0x36e>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2250      	movs	r2, #80	; 0x50
 8009684:	2101      	movs	r1, #1
 8009686:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009688:	f7fc fef8 	bl	800647c <HAL_GetTick>
 800968c:	0003      	movs	r3, r0
 800968e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009690:	2023      	movs	r0, #35	; 0x23
 8009692:	183b      	adds	r3, r7, r0
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	2151      	movs	r1, #81	; 0x51
 8009698:	5c52      	ldrb	r2, [r2, r1]
 800969a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80096a2:	231a      	movs	r3, #26
 80096a4:	18fb      	adds	r3, r7, r3
 80096a6:	1cba      	adds	r2, r7, #2
 80096a8:	8812      	ldrh	r2, [r2, #0]
 80096aa:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80096ac:	183b      	adds	r3, r7, r0
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d011      	beq.n	80096d8 <HAL_SPI_TransmitReceive+0x84>
 80096b4:	69fa      	ldr	r2, [r7, #28]
 80096b6:	2382      	movs	r3, #130	; 0x82
 80096b8:	005b      	lsls	r3, r3, #1
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d107      	bne.n	80096ce <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d103      	bne.n	80096ce <HAL_SPI_TransmitReceive+0x7a>
 80096c6:	183b      	adds	r3, r7, r0
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	2b04      	cmp	r3, #4
 80096cc:	d004      	beq.n	80096d8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80096ce:	232b      	movs	r3, #43	; 0x2b
 80096d0:	18fb      	adds	r3, r7, r3
 80096d2:	2202      	movs	r2, #2
 80096d4:	701a      	strb	r2, [r3, #0]
    goto error;
 80096d6:	e169      	b.n	80099ac <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d006      	beq.n	80096ec <HAL_SPI_TransmitReceive+0x98>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d003      	beq.n	80096ec <HAL_SPI_TransmitReceive+0x98>
 80096e4:	1cbb      	adds	r3, r7, #2
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d104      	bne.n	80096f6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80096ec:	232b      	movs	r3, #43	; 0x2b
 80096ee:	18fb      	adds	r3, r7, r3
 80096f0:	2201      	movs	r2, #1
 80096f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80096f4:	e15a      	b.n	80099ac <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2251      	movs	r2, #81	; 0x51
 80096fa:	5c9b      	ldrb	r3, [r3, r2]
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b04      	cmp	r3, #4
 8009700:	d003      	beq.n	800970a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2251      	movs	r2, #81	; 0x51
 8009706:	2105      	movs	r1, #5
 8009708:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	1cba      	adds	r2, r7, #2
 800971a:	8812      	ldrh	r2, [r2, #0]
 800971c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	1cba      	adds	r2, r7, #2
 8009722:	8812      	ldrh	r2, [r2, #0]
 8009724:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	1cba      	adds	r2, r7, #2
 8009730:	8812      	ldrh	r2, [r2, #0]
 8009732:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	1cba      	adds	r2, r7, #2
 8009738:	8812      	ldrh	r2, [r2, #0]
 800973a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2240      	movs	r2, #64	; 0x40
 8009750:	4013      	ands	r3, r2
 8009752:	2b40      	cmp	r3, #64	; 0x40
 8009754:	d007      	beq.n	8009766 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2140      	movs	r1, #64	; 0x40
 8009762:	430a      	orrs	r2, r1
 8009764:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	2380      	movs	r3, #128	; 0x80
 800976c:	011b      	lsls	r3, r3, #4
 800976e:	429a      	cmp	r2, r3
 8009770:	d000      	beq.n	8009774 <HAL_SPI_TransmitReceive+0x120>
 8009772:	e07a      	b.n	800986a <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d004      	beq.n	8009786 <HAL_SPI_TransmitReceive+0x132>
 800977c:	231a      	movs	r3, #26
 800977e:	18fb      	adds	r3, r7, r3
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d166      	bne.n	8009854 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978a:	881a      	ldrh	r2, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009796:	1c9a      	adds	r2, r3, #2
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	3b01      	subs	r3, #1
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097aa:	e053      	b.n	8009854 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	2202      	movs	r2, #2
 80097b4:	4013      	ands	r3, r2
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d11b      	bne.n	80097f2 <HAL_SPI_TransmitReceive+0x19e>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097be:	b29b      	uxth	r3, r3
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d016      	beq.n	80097f2 <HAL_SPI_TransmitReceive+0x19e>
 80097c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d113      	bne.n	80097f2 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ce:	881a      	ldrh	r2, [r3, #0]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097da:	1c9a      	adds	r2, r3, #2
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	3b01      	subs	r3, #1
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	2201      	movs	r2, #1
 80097fa:	4013      	ands	r3, r2
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d119      	bne.n	8009834 <HAL_SPI_TransmitReceive+0x1e0>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009804:	b29b      	uxth	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d014      	beq.n	8009834 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68da      	ldr	r2, [r3, #12]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009814:	b292      	uxth	r2, r2
 8009816:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981c:	1c9a      	adds	r2, r3, #2
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009826:	b29b      	uxth	r3, r3
 8009828:	3b01      	subs	r3, #1
 800982a:	b29a      	uxth	r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009830:	2301      	movs	r3, #1
 8009832:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009834:	f7fc fe22 	bl	800647c <HAL_GetTick>
 8009838:	0002      	movs	r2, r0
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009840:	429a      	cmp	r2, r3
 8009842:	d807      	bhi.n	8009854 <HAL_SPI_TransmitReceive+0x200>
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	3301      	adds	r3, #1
 8009848:	d004      	beq.n	8009854 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800984a:	232b      	movs	r3, #43	; 0x2b
 800984c:	18fb      	adds	r3, r7, r3
 800984e:	2203      	movs	r2, #3
 8009850:	701a      	strb	r2, [r3, #0]
        goto error;
 8009852:	e0ab      	b.n	80099ac <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009858:	b29b      	uxth	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1a6      	bne.n	80097ac <HAL_SPI_TransmitReceive+0x158>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009862:	b29b      	uxth	r3, r3
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1a1      	bne.n	80097ac <HAL_SPI_TransmitReceive+0x158>
 8009868:	e07f      	b.n	800996a <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d005      	beq.n	800987e <HAL_SPI_TransmitReceive+0x22a>
 8009872:	231a      	movs	r3, #26
 8009874:	18fb      	adds	r3, r7, r3
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d000      	beq.n	800987e <HAL_SPI_TransmitReceive+0x22a>
 800987c:	e06b      	b.n	8009956 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	330c      	adds	r3, #12
 8009888:	7812      	ldrb	r2, [r2, #0]
 800988a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009890:	1c5a      	adds	r2, r3, #1
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800989a:	b29b      	uxth	r3, r3
 800989c:	3b01      	subs	r3, #1
 800989e:	b29a      	uxth	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098a4:	e057      	b.n	8009956 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	2202      	movs	r2, #2
 80098ae:	4013      	ands	r3, r2
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d11c      	bne.n	80098ee <HAL_SPI_TransmitReceive+0x29a>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d017      	beq.n	80098ee <HAL_SPI_TransmitReceive+0x29a>
 80098be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d114      	bne.n	80098ee <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	330c      	adds	r3, #12
 80098ce:	7812      	ldrb	r2, [r2, #0]
 80098d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	3b01      	subs	r3, #1
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098ea:	2300      	movs	r3, #0
 80098ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	2201      	movs	r2, #1
 80098f6:	4013      	ands	r3, r2
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d119      	bne.n	8009930 <HAL_SPI_TransmitReceive+0x2dc>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009900:	b29b      	uxth	r3, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d014      	beq.n	8009930 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68da      	ldr	r2, [r3, #12]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009910:	b2d2      	uxtb	r2, r2
 8009912:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009918:	1c5a      	adds	r2, r3, #1
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009922:	b29b      	uxth	r3, r3
 8009924:	3b01      	subs	r3, #1
 8009926:	b29a      	uxth	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800992c:	2301      	movs	r3, #1
 800992e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009930:	f7fc fda4 	bl	800647c <HAL_GetTick>
 8009934:	0002      	movs	r2, r0
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800993c:	429a      	cmp	r2, r3
 800993e:	d802      	bhi.n	8009946 <HAL_SPI_TransmitReceive+0x2f2>
 8009940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009942:	3301      	adds	r3, #1
 8009944:	d102      	bne.n	800994c <HAL_SPI_TransmitReceive+0x2f8>
 8009946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009948:	2b00      	cmp	r3, #0
 800994a:	d104      	bne.n	8009956 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800994c:	232b      	movs	r3, #43	; 0x2b
 800994e:	18fb      	adds	r3, r7, r3
 8009950:	2203      	movs	r2, #3
 8009952:	701a      	strb	r2, [r3, #0]
        goto error;
 8009954:	e02a      	b.n	80099ac <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800995a:	b29b      	uxth	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1a2      	bne.n	80098a6 <HAL_SPI_TransmitReceive+0x252>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009964:	b29b      	uxth	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d19d      	bne.n	80098a6 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800996a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	0018      	movs	r0, r3
 8009972:	f000 f8c5 	bl	8009b00 <SPI_EndRxTxTransaction>
 8009976:	1e03      	subs	r3, r0, #0
 8009978:	d007      	beq.n	800998a <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800997a:	232b      	movs	r3, #43	; 0x2b
 800997c:	18fb      	adds	r3, r7, r3
 800997e:	2201      	movs	r2, #1
 8009980:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2220      	movs	r2, #32
 8009986:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009988:	e010      	b.n	80099ac <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10b      	bne.n	80099aa <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009992:	2300      	movs	r3, #0
 8009994:	617b      	str	r3, [r7, #20]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	617b      	str	r3, [r7, #20]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	e000      	b.n	80099ac <HAL_SPI_TransmitReceive+0x358>
  }

error :
 80099aa:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2251      	movs	r2, #81	; 0x51
 80099b0:	2101      	movs	r1, #1
 80099b2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2250      	movs	r2, #80	; 0x50
 80099b8:	2100      	movs	r1, #0
 80099ba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80099bc:	232b      	movs	r3, #43	; 0x2b
 80099be:	18fb      	adds	r3, r7, r3
 80099c0:	781b      	ldrb	r3, [r3, #0]
}
 80099c2:	0018      	movs	r0, r3
 80099c4:	46bd      	mov	sp, r7
 80099c6:	b00c      	add	sp, #48	; 0x30
 80099c8:	bd80      	pop	{r7, pc}

080099ca <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b082      	sub	sp, #8
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2251      	movs	r2, #81	; 0x51
 80099d6:	5c9b      	ldrb	r3, [r3, r2]
 80099d8:	b2db      	uxtb	r3, r3
}
 80099da:	0018      	movs	r0, r3
 80099dc:	46bd      	mov	sp, r7
 80099de:	b002      	add	sp, #8
 80099e0:	bd80      	pop	{r7, pc}
	...

080099e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b088      	sub	sp, #32
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	603b      	str	r3, [r7, #0]
 80099f0:	1dfb      	adds	r3, r7, #7
 80099f2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80099f4:	f7fc fd42 	bl	800647c <HAL_GetTick>
 80099f8:	0002      	movs	r2, r0
 80099fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fc:	1a9b      	subs	r3, r3, r2
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	18d3      	adds	r3, r2, r3
 8009a02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009a04:	f7fc fd3a 	bl	800647c <HAL_GetTick>
 8009a08:	0003      	movs	r3, r0
 8009a0a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a0c:	4b3a      	ldr	r3, [pc, #232]	; (8009af8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	015b      	lsls	r3, r3, #5
 8009a12:	0d1b      	lsrs	r3, r3, #20
 8009a14:	69fa      	ldr	r2, [r7, #28]
 8009a16:	4353      	muls	r3, r2
 8009a18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a1a:	e058      	b.n	8009ace <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	d055      	beq.n	8009ace <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a22:	f7fc fd2b 	bl	800647c <HAL_GetTick>
 8009a26:	0002      	movs	r2, r0
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	69fa      	ldr	r2, [r7, #28]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d902      	bls.n	8009a38 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d142      	bne.n	8009abe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	21e0      	movs	r1, #224	; 0xe0
 8009a44:	438a      	bics	r2, r1
 8009a46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	2382      	movs	r3, #130	; 0x82
 8009a4e:	005b      	lsls	r3, r3, #1
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d113      	bne.n	8009a7c <SPI_WaitFlagStateUntilTimeout+0x98>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	2380      	movs	r3, #128	; 0x80
 8009a5a:	021b      	lsls	r3, r3, #8
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d005      	beq.n	8009a6c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	2380      	movs	r3, #128	; 0x80
 8009a66:	00db      	lsls	r3, r3, #3
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d107      	bne.n	8009a7c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2140      	movs	r1, #64	; 0x40
 8009a78:	438a      	bics	r2, r1
 8009a7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a80:	2380      	movs	r3, #128	; 0x80
 8009a82:	019b      	lsls	r3, r3, #6
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d110      	bne.n	8009aaa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	491a      	ldr	r1, [pc, #104]	; (8009afc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009a94:	400a      	ands	r2, r1
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2180      	movs	r1, #128	; 0x80
 8009aa4:	0189      	lsls	r1, r1, #6
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2251      	movs	r2, #81	; 0x51
 8009aae:	2101      	movs	r1, #1
 8009ab0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2250      	movs	r2, #80	; 0x50
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009aba:	2303      	movs	r3, #3
 8009abc:	e017      	b.n	8009aee <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d101      	bne.n	8009ac8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	425a      	negs	r2, r3
 8009ade:	4153      	adcs	r3, r2
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	001a      	movs	r2, r3
 8009ae4:	1dfb      	adds	r3, r7, #7
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d197      	bne.n	8009a1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	0018      	movs	r0, r3
 8009af0:	46bd      	mov	sp, r7
 8009af2:	b008      	add	sp, #32
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	46c0      	nop			; (mov r8, r8)
 8009af8:	20000024 	.word	0x20000024
 8009afc:	ffffdfff 	.word	0xffffdfff

08009b00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af02      	add	r7, sp, #8
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b0c:	4b1d      	ldr	r3, [pc, #116]	; (8009b84 <SPI_EndRxTxTransaction+0x84>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	491d      	ldr	r1, [pc, #116]	; (8009b88 <SPI_EndRxTxTransaction+0x88>)
 8009b12:	0018      	movs	r0, r3
 8009b14:	f7f6 fb14 	bl	8000140 <__udivsi3>
 8009b18:	0003      	movs	r3, r0
 8009b1a:	001a      	movs	r2, r3
 8009b1c:	0013      	movs	r3, r2
 8009b1e:	015b      	lsls	r3, r3, #5
 8009b20:	1a9b      	subs	r3, r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	189b      	adds	r3, r3, r2
 8009b26:	00db      	lsls	r3, r3, #3
 8009b28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	2382      	movs	r3, #130	; 0x82
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d112      	bne.n	8009b5c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	0013      	movs	r3, r2
 8009b40:	2200      	movs	r2, #0
 8009b42:	2180      	movs	r1, #128	; 0x80
 8009b44:	f7ff ff4e 	bl	80099e4 <SPI_WaitFlagStateUntilTimeout>
 8009b48:	1e03      	subs	r3, r0, #0
 8009b4a:	d016      	beq.n	8009b7a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b50:	2220      	movs	r2, #32
 8009b52:	431a      	orrs	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e00f      	b.n	8009b7c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00a      	beq.n	8009b78 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	3b01      	subs	r3, #1
 8009b66:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	2280      	movs	r2, #128	; 0x80
 8009b70:	4013      	ands	r3, r2
 8009b72:	2b80      	cmp	r3, #128	; 0x80
 8009b74:	d0f2      	beq.n	8009b5c <SPI_EndRxTxTransaction+0x5c>
 8009b76:	e000      	b.n	8009b7a <SPI_EndRxTxTransaction+0x7a>
        break;
 8009b78:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	0018      	movs	r0, r3
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	b006      	add	sp, #24
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	20000024 	.word	0x20000024
 8009b88:	016e3600 	.word	0x016e3600

08009b8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e044      	b.n	8009c28 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d107      	bne.n	8009bb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2274      	movs	r2, #116	; 0x74
 8009baa:	2100      	movs	r1, #0
 8009bac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	0018      	movs	r0, r3
 8009bb2:	f7fb fb65 	bl	8005280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2224      	movs	r2, #36	; 0x24
 8009bba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	438a      	bics	r2, r1
 8009bca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	0018      	movs	r0, r3
 8009bd0:	f000 fc46 	bl	800a460 <UART_SetConfig>
 8009bd4:	0003      	movs	r3, r0
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d101      	bne.n	8009bde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e024      	b.n	8009c28 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	0018      	movs	r0, r3
 8009bea:	f000 fed9 	bl	800a9a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	490d      	ldr	r1, [pc, #52]	; (8009c30 <HAL_UART_Init+0xa4>)
 8009bfa:	400a      	ands	r2, r1
 8009bfc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	689a      	ldr	r2, [r3, #8]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	212a      	movs	r1, #42	; 0x2a
 8009c0a:	438a      	bics	r2, r1
 8009c0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2101      	movs	r1, #1
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	0018      	movs	r0, r3
 8009c22:	f000 ff71 	bl	800ab08 <UART_CheckIdleState>
 8009c26:	0003      	movs	r3, r0
}
 8009c28:	0018      	movs	r0, r3
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	b002      	add	sp, #8
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	ffffb7ff 	.word	0xffffb7ff

08009c34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08a      	sub	sp, #40	; 0x28
 8009c38:	af02      	add	r7, sp, #8
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	1dbb      	adds	r3, r7, #6
 8009c42:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c48:	2b20      	cmp	r3, #32
 8009c4a:	d000      	beq.n	8009c4e <HAL_UART_Transmit+0x1a>
 8009c4c:	e095      	b.n	8009d7a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d003      	beq.n	8009c5c <HAL_UART_Transmit+0x28>
 8009c54:	1dbb      	adds	r3, r7, #6
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e08d      	b.n	8009d7c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	689a      	ldr	r2, [r3, #8]
 8009c64:	2380      	movs	r3, #128	; 0x80
 8009c66:	015b      	lsls	r3, r3, #5
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d109      	bne.n	8009c80 <HAL_UART_Transmit+0x4c>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d105      	bne.n	8009c80 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	2201      	movs	r2, #1
 8009c78:	4013      	ands	r3, r2
 8009c7a:	d001      	beq.n	8009c80 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e07d      	b.n	8009d7c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2274      	movs	r2, #116	; 0x74
 8009c84:	5c9b      	ldrb	r3, [r3, r2]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d101      	bne.n	8009c8e <HAL_UART_Transmit+0x5a>
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	e076      	b.n	8009d7c <HAL_UART_Transmit+0x148>
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2274      	movs	r2, #116	; 0x74
 8009c92:	2101      	movs	r1, #1
 8009c94:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2280      	movs	r2, #128	; 0x80
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2221      	movs	r2, #33	; 0x21
 8009ca2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ca4:	f7fc fbea 	bl	800647c <HAL_GetTick>
 8009ca8:	0003      	movs	r3, r0
 8009caa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	1dba      	adds	r2, r7, #6
 8009cb0:	2150      	movs	r1, #80	; 0x50
 8009cb2:	8812      	ldrh	r2, [r2, #0]
 8009cb4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	1dba      	adds	r2, r7, #6
 8009cba:	2152      	movs	r1, #82	; 0x52
 8009cbc:	8812      	ldrh	r2, [r2, #0]
 8009cbe:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	689a      	ldr	r2, [r3, #8]
 8009cc4:	2380      	movs	r3, #128	; 0x80
 8009cc6:	015b      	lsls	r3, r3, #5
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d108      	bne.n	8009cde <HAL_UART_Transmit+0xaa>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d104      	bne.n	8009cde <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	61bb      	str	r3, [r7, #24]
 8009cdc:	e003      	b.n	8009ce6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2274      	movs	r2, #116	; 0x74
 8009cea:	2100      	movs	r1, #0
 8009cec:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8009cee:	e02c      	b.n	8009d4a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	0013      	movs	r3, r2
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	2180      	movs	r1, #128	; 0x80
 8009cfe:	f000 ff4b 	bl	800ab98 <UART_WaitOnFlagUntilTimeout>
 8009d02:	1e03      	subs	r3, r0, #0
 8009d04:	d001      	beq.n	8009d0a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8009d06:	2303      	movs	r3, #3
 8009d08:	e038      	b.n	8009d7c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10b      	bne.n	8009d28 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	881b      	ldrh	r3, [r3, #0]
 8009d14:	001a      	movs	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	05d2      	lsls	r2, r2, #23
 8009d1c:	0dd2      	lsrs	r2, r2, #23
 8009d1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	3302      	adds	r3, #2
 8009d24:	61bb      	str	r3, [r7, #24]
 8009d26:	e007      	b.n	8009d38 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	781a      	ldrb	r2, [r3, #0]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	3301      	adds	r3, #1
 8009d36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2252      	movs	r2, #82	; 0x52
 8009d3c:	5a9b      	ldrh	r3, [r3, r2]
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	3b01      	subs	r3, #1
 8009d42:	b299      	uxth	r1, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2252      	movs	r2, #82	; 0x52
 8009d48:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2252      	movs	r2, #82	; 0x52
 8009d4e:	5a9b      	ldrh	r3, [r3, r2]
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1cc      	bne.n	8009cf0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	0013      	movs	r3, r2
 8009d60:	2200      	movs	r2, #0
 8009d62:	2140      	movs	r1, #64	; 0x40
 8009d64:	f000 ff18 	bl	800ab98 <UART_WaitOnFlagUntilTimeout>
 8009d68:	1e03      	subs	r3, r0, #0
 8009d6a:	d001      	beq.n	8009d70 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e005      	b.n	8009d7c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2220      	movs	r2, #32
 8009d74:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	e000      	b.n	8009d7c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8009d7a:	2302      	movs	r3, #2
  }
}
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	b008      	add	sp, #32
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b088      	sub	sp, #32
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	1dbb      	adds	r3, r7, #6
 8009d90:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d96:	2b20      	cmp	r3, #32
 8009d98:	d155      	bne.n	8009e46 <HAL_UART_Receive_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d003      	beq.n	8009da8 <HAL_UART_Receive_DMA+0x24>
 8009da0:	1dbb      	adds	r3, r7, #6
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d101      	bne.n	8009dac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e04d      	b.n	8009e48 <HAL_UART_Receive_DMA+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	689a      	ldr	r2, [r3, #8]
 8009db0:	2380      	movs	r3, #128	; 0x80
 8009db2:	015b      	lsls	r3, r3, #5
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d109      	bne.n	8009dcc <HAL_UART_Receive_DMA+0x48>
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d105      	bne.n	8009dcc <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	d001      	beq.n	8009dcc <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e03d      	b.n	8009e48 <HAL_UART_Receive_DMA+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2274      	movs	r2, #116	; 0x74
 8009dd0:	5c9b      	ldrb	r3, [r3, r2]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d101      	bne.n	8009dda <HAL_UART_Receive_DMA+0x56>
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	e036      	b.n	8009e48 <HAL_UART_Receive_DMA+0xc4>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2274      	movs	r2, #116	; 0x74
 8009dde:	2101      	movs	r1, #1
 8009de0:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a18      	ldr	r2, [pc, #96]	; (8009e50 <HAL_UART_Receive_DMA+0xcc>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d020      	beq.n	8009e34 <HAL_UART_Receive_DMA+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	2380      	movs	r3, #128	; 0x80
 8009dfa:	041b      	lsls	r3, r3, #16
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	d019      	beq.n	8009e34 <HAL_UART_Receive_DMA+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e00:	f3ef 8310 	mrs	r3, PRIMASK
 8009e04:	613b      	str	r3, [r7, #16]
  return(result);
 8009e06:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e08:	61fb      	str	r3, [r7, #28]
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f383 8810 	msr	PRIMASK, r3
}
 8009e14:	46c0      	nop			; (mov r8, r8)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2180      	movs	r1, #128	; 0x80
 8009e22:	04c9      	lsls	r1, r1, #19
 8009e24:	430a      	orrs	r2, r1
 8009e26:	601a      	str	r2, [r3, #0]
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	f383 8810 	msr	PRIMASK, r3
}
 8009e32:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009e34:	1dbb      	adds	r3, r7, #6
 8009e36:	881a      	ldrh	r2, [r3, #0]
 8009e38:	68b9      	ldr	r1, [r7, #8]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	f000 ff6f 	bl	800ad20 <UART_Start_Receive_DMA>
 8009e42:	0003      	movs	r3, r0
 8009e44:	e000      	b.n	8009e48 <HAL_UART_Receive_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8009e46:	2302      	movs	r3, #2
  }
}
 8009e48:	0018      	movs	r0, r3
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	b008      	add	sp, #32
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	40004800 	.word	0x40004800

08009e54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e54:	b590      	push	{r4, r7, lr}
 8009e56:	b0ab      	sub	sp, #172	; 0xac
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	69db      	ldr	r3, [r3, #28]
 8009e62:	22a4      	movs	r2, #164	; 0xa4
 8009e64:	18b9      	adds	r1, r7, r2
 8009e66:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	20a0      	movs	r0, #160	; 0xa0
 8009e70:	1839      	adds	r1, r7, r0
 8009e72:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	219c      	movs	r1, #156	; 0x9c
 8009e7c:	1879      	adds	r1, r7, r1
 8009e7e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e80:	0011      	movs	r1, r2
 8009e82:	18bb      	adds	r3, r7, r2
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a99      	ldr	r2, [pc, #612]	; (800a0ec <HAL_UART_IRQHandler+0x298>)
 8009e88:	4013      	ands	r3, r2
 8009e8a:	2298      	movs	r2, #152	; 0x98
 8009e8c:	18bc      	adds	r4, r7, r2
 8009e8e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8009e90:	18bb      	adds	r3, r7, r2
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d114      	bne.n	8009ec2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009e98:	187b      	adds	r3, r7, r1
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	d00f      	beq.n	8009ec2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009ea2:	183b      	adds	r3, r7, r0
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2220      	movs	r2, #32
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	d00a      	beq.n	8009ec2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d100      	bne.n	8009eb6 <HAL_UART_IRQHandler+0x62>
 8009eb4:	e298      	b.n	800a3e8 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	0010      	movs	r0, r2
 8009ebe:	4798      	blx	r3
      }
      return;
 8009ec0:	e292      	b.n	800a3e8 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009ec2:	2398      	movs	r3, #152	; 0x98
 8009ec4:	18fb      	adds	r3, r7, r3
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d100      	bne.n	8009ece <HAL_UART_IRQHandler+0x7a>
 8009ecc:	e114      	b.n	800a0f8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009ece:	239c      	movs	r3, #156	; 0x9c
 8009ed0:	18fb      	adds	r3, r7, r3
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	4013      	ands	r3, r2
 8009ed8:	d106      	bne.n	8009ee8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009eda:	23a0      	movs	r3, #160	; 0xa0
 8009edc:	18fb      	adds	r3, r7, r3
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a83      	ldr	r2, [pc, #524]	; (800a0f0 <HAL_UART_IRQHandler+0x29c>)
 8009ee2:	4013      	ands	r3, r2
 8009ee4:	d100      	bne.n	8009ee8 <HAL_UART_IRQHandler+0x94>
 8009ee6:	e107      	b.n	800a0f8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ee8:	23a4      	movs	r3, #164	; 0xa4
 8009eea:	18fb      	adds	r3, r7, r3
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	d012      	beq.n	8009f1a <HAL_UART_IRQHandler+0xc6>
 8009ef4:	23a0      	movs	r3, #160	; 0xa0
 8009ef6:	18fb      	adds	r3, r7, r3
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	2380      	movs	r3, #128	; 0x80
 8009efc:	005b      	lsls	r3, r3, #1
 8009efe:	4013      	ands	r3, r2
 8009f00:	d00b      	beq.n	8009f1a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2201      	movs	r2, #1
 8009f08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2280      	movs	r2, #128	; 0x80
 8009f0e:	589b      	ldr	r3, [r3, r2]
 8009f10:	2201      	movs	r2, #1
 8009f12:	431a      	orrs	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2180      	movs	r1, #128	; 0x80
 8009f18:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f1a:	23a4      	movs	r3, #164	; 0xa4
 8009f1c:	18fb      	adds	r3, r7, r3
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2202      	movs	r2, #2
 8009f22:	4013      	ands	r3, r2
 8009f24:	d011      	beq.n	8009f4a <HAL_UART_IRQHandler+0xf6>
 8009f26:	239c      	movs	r3, #156	; 0x9c
 8009f28:	18fb      	adds	r3, r7, r3
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	4013      	ands	r3, r2
 8009f30:	d00b      	beq.n	8009f4a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2202      	movs	r2, #2
 8009f38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2280      	movs	r2, #128	; 0x80
 8009f3e:	589b      	ldr	r3, [r3, r2]
 8009f40:	2204      	movs	r2, #4
 8009f42:	431a      	orrs	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2180      	movs	r1, #128	; 0x80
 8009f48:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f4a:	23a4      	movs	r3, #164	; 0xa4
 8009f4c:	18fb      	adds	r3, r7, r3
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2204      	movs	r2, #4
 8009f52:	4013      	ands	r3, r2
 8009f54:	d011      	beq.n	8009f7a <HAL_UART_IRQHandler+0x126>
 8009f56:	239c      	movs	r3, #156	; 0x9c
 8009f58:	18fb      	adds	r3, r7, r3
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	4013      	ands	r3, r2
 8009f60:	d00b      	beq.n	8009f7a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2204      	movs	r2, #4
 8009f68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2280      	movs	r2, #128	; 0x80
 8009f6e:	589b      	ldr	r3, [r3, r2]
 8009f70:	2202      	movs	r2, #2
 8009f72:	431a      	orrs	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2180      	movs	r1, #128	; 0x80
 8009f78:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f7a:	23a4      	movs	r3, #164	; 0xa4
 8009f7c:	18fb      	adds	r3, r7, r3
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2208      	movs	r2, #8
 8009f82:	4013      	ands	r3, r2
 8009f84:	d017      	beq.n	8009fb6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009f86:	23a0      	movs	r3, #160	; 0xa0
 8009f88:	18fb      	adds	r3, r7, r3
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	4013      	ands	r3, r2
 8009f90:	d105      	bne.n	8009f9e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009f92:	239c      	movs	r3, #156	; 0x9c
 8009f94:	18fb      	adds	r3, r7, r3
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009f9c:	d00b      	beq.n	8009fb6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2208      	movs	r2, #8
 8009fa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2280      	movs	r2, #128	; 0x80
 8009faa:	589b      	ldr	r3, [r3, r2]
 8009fac:	2208      	movs	r2, #8
 8009fae:	431a      	orrs	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2180      	movs	r1, #128	; 0x80
 8009fb4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009fb6:	23a4      	movs	r3, #164	; 0xa4
 8009fb8:	18fb      	adds	r3, r7, r3
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	2380      	movs	r3, #128	; 0x80
 8009fbe:	011b      	lsls	r3, r3, #4
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	d013      	beq.n	8009fec <HAL_UART_IRQHandler+0x198>
 8009fc4:	23a0      	movs	r3, #160	; 0xa0
 8009fc6:	18fb      	adds	r3, r7, r3
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	2380      	movs	r3, #128	; 0x80
 8009fcc:	04db      	lsls	r3, r3, #19
 8009fce:	4013      	ands	r3, r2
 8009fd0:	d00c      	beq.n	8009fec <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2280      	movs	r2, #128	; 0x80
 8009fd8:	0112      	lsls	r2, r2, #4
 8009fda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2280      	movs	r2, #128	; 0x80
 8009fe0:	589b      	ldr	r3, [r3, r2]
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	431a      	orrs	r2, r3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2180      	movs	r1, #128	; 0x80
 8009fea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2280      	movs	r2, #128	; 0x80
 8009ff0:	589b      	ldr	r3, [r3, r2]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d100      	bne.n	8009ff8 <HAL_UART_IRQHandler+0x1a4>
 8009ff6:	e1f9      	b.n	800a3ec <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009ff8:	23a4      	movs	r3, #164	; 0xa4
 8009ffa:	18fb      	adds	r3, r7, r3
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2220      	movs	r2, #32
 800a000:	4013      	ands	r3, r2
 800a002:	d00e      	beq.n	800a022 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a004:	23a0      	movs	r3, #160	; 0xa0
 800a006:	18fb      	adds	r3, r7, r3
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2220      	movs	r2, #32
 800a00c:	4013      	ands	r3, r2
 800a00e:	d008      	beq.n	800a022 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a014:	2b00      	cmp	r3, #0
 800a016:	d004      	beq.n	800a022 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	0010      	movs	r0, r2
 800a020:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2280      	movs	r2, #128	; 0x80
 800a026:	589b      	ldr	r3, [r3, r2]
 800a028:	2194      	movs	r1, #148	; 0x94
 800a02a:	187a      	adds	r2, r7, r1
 800a02c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	2240      	movs	r2, #64	; 0x40
 800a036:	4013      	ands	r3, r2
 800a038:	2b40      	cmp	r3, #64	; 0x40
 800a03a:	d004      	beq.n	800a046 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a03c:	187b      	adds	r3, r7, r1
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2228      	movs	r2, #40	; 0x28
 800a042:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a044:	d047      	beq.n	800a0d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	0018      	movs	r0, r3
 800a04a:	f000 ff2f 	bl	800aeac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	2240      	movs	r2, #64	; 0x40
 800a056:	4013      	ands	r3, r2
 800a058:	2b40      	cmp	r3, #64	; 0x40
 800a05a:	d137      	bne.n	800a0cc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a05c:	f3ef 8310 	mrs	r3, PRIMASK
 800a060:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800a062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a064:	2090      	movs	r0, #144	; 0x90
 800a066:	183a      	adds	r2, r7, r0
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	2301      	movs	r3, #1
 800a06c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a06e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a070:	f383 8810 	msr	PRIMASK, r3
}
 800a074:	46c0      	nop			; (mov r8, r8)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689a      	ldr	r2, [r3, #8]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2140      	movs	r1, #64	; 0x40
 800a082:	438a      	bics	r2, r1
 800a084:	609a      	str	r2, [r3, #8]
 800a086:	183b      	adds	r3, r7, r0
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a08c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a08e:	f383 8810 	msr	PRIMASK, r3
}
 800a092:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d012      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0a0:	4a14      	ldr	r2, [pc, #80]	; (800a0f4 <HAL_UART_IRQHandler+0x2a0>)
 800a0a2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	f7fd f85d 	bl	8007168 <HAL_DMA_Abort_IT>
 800a0ae:	1e03      	subs	r3, r0, #0
 800a0b0:	d01a      	beq.n	800a0e8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0bc:	0018      	movs	r0, r3
 800a0be:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0c0:	e012      	b.n	800a0e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	f000 f9b7 	bl	800a438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ca:	e00d      	b.n	800a0e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	f000 f9b2 	bl	800a438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0d4:	e008      	b.n	800a0e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	0018      	movs	r0, r3
 800a0da:	f000 f9ad 	bl	800a438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2280      	movs	r2, #128	; 0x80
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a0e6:	e181      	b.n	800a3ec <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0e8:	46c0      	nop			; (mov r8, r8)
    return;
 800a0ea:	e17f      	b.n	800a3ec <HAL_UART_IRQHandler+0x598>
 800a0ec:	0000080f 	.word	0x0000080f
 800a0f0:	04000120 	.word	0x04000120
 800a0f4:	0800b157 	.word	0x0800b157

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d000      	beq.n	800a102 <HAL_UART_IRQHandler+0x2ae>
 800a100:	e133      	b.n	800a36a <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a102:	23a4      	movs	r3, #164	; 0xa4
 800a104:	18fb      	adds	r3, r7, r3
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2210      	movs	r2, #16
 800a10a:	4013      	ands	r3, r2
 800a10c:	d100      	bne.n	800a110 <HAL_UART_IRQHandler+0x2bc>
 800a10e:	e12c      	b.n	800a36a <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a110:	23a0      	movs	r3, #160	; 0xa0
 800a112:	18fb      	adds	r3, r7, r3
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2210      	movs	r2, #16
 800a118:	4013      	ands	r3, r2
 800a11a:	d100      	bne.n	800a11e <HAL_UART_IRQHandler+0x2ca>
 800a11c:	e125      	b.n	800a36a <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2210      	movs	r2, #16
 800a124:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	2240      	movs	r2, #64	; 0x40
 800a12e:	4013      	ands	r3, r2
 800a130:	2b40      	cmp	r3, #64	; 0x40
 800a132:	d000      	beq.n	800a136 <HAL_UART_IRQHandler+0x2e2>
 800a134:	e09d      	b.n	800a272 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	217e      	movs	r1, #126	; 0x7e
 800a140:	187b      	adds	r3, r7, r1
 800a142:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a144:	187b      	adds	r3, r7, r1
 800a146:	881b      	ldrh	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d100      	bne.n	800a14e <HAL_UART_IRQHandler+0x2fa>
 800a14c:	e150      	b.n	800a3f0 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2258      	movs	r2, #88	; 0x58
 800a152:	5a9b      	ldrh	r3, [r3, r2]
 800a154:	187a      	adds	r2, r7, r1
 800a156:	8812      	ldrh	r2, [r2, #0]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d300      	bcc.n	800a15e <HAL_UART_IRQHandler+0x30a>
 800a15c:	e148      	b.n	800a3f0 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	187a      	adds	r2, r7, r1
 800a162:	215a      	movs	r1, #90	; 0x5a
 800a164:	8812      	ldrh	r2, [r2, #0]
 800a166:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2220      	movs	r2, #32
 800a172:	4013      	ands	r3, r2
 800a174:	d16e      	bne.n	800a254 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a176:	f3ef 8310 	mrs	r3, PRIMASK
 800a17a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a17e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a180:	2301      	movs	r3, #1
 800a182:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a186:	f383 8810 	msr	PRIMASK, r3
}
 800a18a:	46c0      	nop			; (mov r8, r8)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	499a      	ldr	r1, [pc, #616]	; (800a400 <HAL_UART_IRQHandler+0x5ac>)
 800a198:	400a      	ands	r2, r1
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a19e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a2:	f383 8810 	msr	PRIMASK, r3
}
 800a1a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1b0:	677b      	str	r3, [r7, #116]	; 0x74
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b8:	f383 8810 	msr	PRIMASK, r3
}
 800a1bc:	46c0      	nop			; (mov r8, r8)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	438a      	bics	r2, r1
 800a1cc:	609a      	str	r2, [r3, #8]
 800a1ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1d0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d4:	f383 8810 	msr	PRIMASK, r3
}
 800a1d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1da:	f3ef 8310 	mrs	r3, PRIMASK
 800a1de:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800a1e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1e2:	673b      	str	r3, [r7, #112]	; 0x70
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ea:	f383 8810 	msr	PRIMASK, r3
}
 800a1ee:	46c0      	nop			; (mov r8, r8)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	689a      	ldr	r2, [r3, #8]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2140      	movs	r1, #64	; 0x40
 800a1fc:	438a      	bics	r2, r1
 800a1fe:	609a      	str	r2, [r3, #8]
 800a200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a202:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a206:	f383 8810 	msr	PRIMASK, r3
}
 800a20a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2220      	movs	r2, #32
 800a210:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a218:	f3ef 8310 	mrs	r3, PRIMASK
 800a21c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800a21e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a220:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a222:	2301      	movs	r3, #1
 800a224:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a228:	f383 8810 	msr	PRIMASK, r3
}
 800a22c:	46c0      	nop			; (mov r8, r8)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2110      	movs	r1, #16
 800a23a:	438a      	bics	r2, r1
 800a23c:	601a      	str	r2, [r3, #0]
 800a23e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a240:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a244:	f383 8810 	msr	PRIMASK, r3
}
 800a248:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24e:	0018      	movs	r0, r3
 800a250:	f7fc ff4a 	bl	80070e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2258      	movs	r2, #88	; 0x58
 800a258:	5a9a      	ldrh	r2, [r3, r2]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	215a      	movs	r1, #90	; 0x5a
 800a25e:	5a5b      	ldrh	r3, [r3, r1]
 800a260:	b29b      	uxth	r3, r3
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	b29a      	uxth	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	0011      	movs	r1, r2
 800a26a:	0018      	movs	r0, r3
 800a26c:	f000 f8ec 	bl	800a448 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a270:	e0be      	b.n	800a3f0 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2258      	movs	r2, #88	; 0x58
 800a276:	5a99      	ldrh	r1, [r3, r2]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	225a      	movs	r2, #90	; 0x5a
 800a27c:	5a9b      	ldrh	r3, [r3, r2]
 800a27e:	b29a      	uxth	r2, r3
 800a280:	208e      	movs	r0, #142	; 0x8e
 800a282:	183b      	adds	r3, r7, r0
 800a284:	1a8a      	subs	r2, r1, r2
 800a286:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	225a      	movs	r2, #90	; 0x5a
 800a28c:	5a9b      	ldrh	r3, [r3, r2]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	2b00      	cmp	r3, #0
 800a292:	d100      	bne.n	800a296 <HAL_UART_IRQHandler+0x442>
 800a294:	e0ae      	b.n	800a3f4 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 800a296:	183b      	adds	r3, r7, r0
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d100      	bne.n	800a2a0 <HAL_UART_IRQHandler+0x44c>
 800a29e:	e0a9      	b.n	800a3f4 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a2a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2a8:	2488      	movs	r4, #136	; 0x88
 800a2aa:	193a      	adds	r2, r7, r4
 800a2ac:	6013      	str	r3, [r2, #0]
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	f383 8810 	msr	PRIMASK, r3
}
 800a2b8:	46c0      	nop			; (mov r8, r8)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	494f      	ldr	r1, [pc, #316]	; (800a404 <HAL_UART_IRQHandler+0x5b0>)
 800a2c6:	400a      	ands	r2, r1
 800a2c8:	601a      	str	r2, [r3, #0]
 800a2ca:	193b      	adds	r3, r7, r4
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	f383 8810 	msr	PRIMASK, r3
}
 800a2d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2d8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2dc:	61bb      	str	r3, [r7, #24]
  return(result);
 800a2de:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e0:	2484      	movs	r4, #132	; 0x84
 800a2e2:	193a      	adds	r2, r7, r4
 800a2e4:	6013      	str	r3, [r2, #0]
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	f383 8810 	msr	PRIMASK, r3
}
 800a2f0:	46c0      	nop			; (mov r8, r8)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	438a      	bics	r2, r1
 800a300:	609a      	str	r2, [r3, #8]
 800a302:	193b      	adds	r3, r7, r4
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	f383 8810 	msr	PRIMASK, r3
}
 800a30e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2220      	movs	r2, #32
 800a314:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a322:	f3ef 8310 	mrs	r3, PRIMASK
 800a326:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a32a:	2480      	movs	r4, #128	; 0x80
 800a32c:	193a      	adds	r2, r7, r4
 800a32e:	6013      	str	r3, [r2, #0]
 800a330:	2301      	movs	r3, #1
 800a332:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a336:	f383 8810 	msr	PRIMASK, r3
}
 800a33a:	46c0      	nop			; (mov r8, r8)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2110      	movs	r1, #16
 800a348:	438a      	bics	r2, r1
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	193b      	adds	r3, r7, r4
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a354:	f383 8810 	msr	PRIMASK, r3
}
 800a358:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a35a:	183b      	adds	r3, r7, r0
 800a35c:	881a      	ldrh	r2, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	0011      	movs	r1, r2
 800a362:	0018      	movs	r0, r3
 800a364:	f000 f870 	bl	800a448 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a368:	e044      	b.n	800a3f4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a36a:	23a4      	movs	r3, #164	; 0xa4
 800a36c:	18fb      	adds	r3, r7, r3
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	2380      	movs	r3, #128	; 0x80
 800a372:	035b      	lsls	r3, r3, #13
 800a374:	4013      	ands	r3, r2
 800a376:	d010      	beq.n	800a39a <HAL_UART_IRQHandler+0x546>
 800a378:	239c      	movs	r3, #156	; 0x9c
 800a37a:	18fb      	adds	r3, r7, r3
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	2380      	movs	r3, #128	; 0x80
 800a380:	03db      	lsls	r3, r3, #15
 800a382:	4013      	ands	r3, r2
 800a384:	d009      	beq.n	800a39a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2280      	movs	r2, #128	; 0x80
 800a38c:	0352      	lsls	r2, r2, #13
 800a38e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	0018      	movs	r0, r3
 800a394:	f000 ff21 	bl	800b1da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a398:	e02f      	b.n	800a3fa <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a39a:	23a4      	movs	r3, #164	; 0xa4
 800a39c:	18fb      	adds	r3, r7, r3
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2280      	movs	r2, #128	; 0x80
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	d00f      	beq.n	800a3c6 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a3a6:	23a0      	movs	r3, #160	; 0xa0
 800a3a8:	18fb      	adds	r3, r7, r3
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2280      	movs	r2, #128	; 0x80
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	d009      	beq.n	800a3c6 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d01e      	beq.n	800a3f8 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	0010      	movs	r0, r2
 800a3c2:	4798      	blx	r3
    }
    return;
 800a3c4:	e018      	b.n	800a3f8 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a3c6:	23a4      	movs	r3, #164	; 0xa4
 800a3c8:	18fb      	adds	r3, r7, r3
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2240      	movs	r2, #64	; 0x40
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	d013      	beq.n	800a3fa <HAL_UART_IRQHandler+0x5a6>
 800a3d2:	23a0      	movs	r3, #160	; 0xa0
 800a3d4:	18fb      	adds	r3, r7, r3
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2240      	movs	r2, #64	; 0x40
 800a3da:	4013      	ands	r3, r2
 800a3dc:	d00d      	beq.n	800a3fa <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	0018      	movs	r0, r3
 800a3e2:	f000 fecf 	bl	800b184 <UART_EndTransmit_IT>
    return;
 800a3e6:	e008      	b.n	800a3fa <HAL_UART_IRQHandler+0x5a6>
      return;
 800a3e8:	46c0      	nop			; (mov r8, r8)
 800a3ea:	e006      	b.n	800a3fa <HAL_UART_IRQHandler+0x5a6>
    return;
 800a3ec:	46c0      	nop			; (mov r8, r8)
 800a3ee:	e004      	b.n	800a3fa <HAL_UART_IRQHandler+0x5a6>
      return;
 800a3f0:	46c0      	nop			; (mov r8, r8)
 800a3f2:	e002      	b.n	800a3fa <HAL_UART_IRQHandler+0x5a6>
      return;
 800a3f4:	46c0      	nop			; (mov r8, r8)
 800a3f6:	e000      	b.n	800a3fa <HAL_UART_IRQHandler+0x5a6>
    return;
 800a3f8:	46c0      	nop			; (mov r8, r8)
  }

}
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	b02b      	add	sp, #172	; 0xac
 800a3fe:	bd90      	pop	{r4, r7, pc}
 800a400:	fffffeff 	.word	0xfffffeff
 800a404:	fffffedf 	.word	0xfffffedf

0800a408 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a410:	46c0      	nop			; (mov r8, r8)
 800a412:	46bd      	mov	sp, r7
 800a414:	b002      	add	sp, #8
 800a416:	bd80      	pop	{r7, pc}

0800a418 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a420:	46c0      	nop			; (mov r8, r8)
 800a422:	46bd      	mov	sp, r7
 800a424:	b002      	add	sp, #8
 800a426:	bd80      	pop	{r7, pc}

0800a428 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a430:	46c0      	nop			; (mov r8, r8)
 800a432:	46bd      	mov	sp, r7
 800a434:	b002      	add	sp, #8
 800a436:	bd80      	pop	{r7, pc}

0800a438 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a440:	46c0      	nop			; (mov r8, r8)
 800a442:	46bd      	mov	sp, r7
 800a444:	b002      	add	sp, #8
 800a446:	bd80      	pop	{r7, pc}

0800a448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	000a      	movs	r2, r1
 800a452:	1cbb      	adds	r3, r7, #2
 800a454:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a456:	46c0      	nop			; (mov r8, r8)
 800a458:	46bd      	mov	sp, r7
 800a45a:	b002      	add	sp, #8
 800a45c:	bd80      	pop	{r7, pc}
	...

0800a460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a460:	b5b0      	push	{r4, r5, r7, lr}
 800a462:	b08e      	sub	sp, #56	; 0x38
 800a464:	af00      	add	r7, sp, #0
 800a466:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a468:	231a      	movs	r3, #26
 800a46a:	2218      	movs	r2, #24
 800a46c:	4694      	mov	ip, r2
 800a46e:	44bc      	add	ip, r7
 800a470:	4463      	add	r3, ip
 800a472:	2200      	movs	r2, #0
 800a474:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	689a      	ldr	r2, [r3, #8]
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	431a      	orrs	r2, r3
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	695b      	ldr	r3, [r3, #20]
 800a484:	431a      	orrs	r2, r3
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4ac1      	ldr	r2, [pc, #772]	; (800a79c <UART_SetConfig+0x33c>)
 800a496:	4013      	ands	r3, r2
 800a498:	0019      	movs	r1, r3
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	4abd      	ldr	r2, [pc, #756]	; (800a7a0 <UART_SetConfig+0x340>)
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	0019      	movs	r1, r3
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	68da      	ldr	r2, [r3, #12]
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	430a      	orrs	r2, r1
 800a4ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4ab7      	ldr	r2, [pc, #732]	; (800a7a4 <UART_SetConfig+0x344>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d004      	beq.n	800a4d6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	6a1b      	ldr	r3, [r3, #32]
 800a4d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	4ab2      	ldr	r2, [pc, #712]	; (800a7a8 <UART_SetConfig+0x348>)
 800a4de:	4013      	ands	r3, r2
 800a4e0:	0019      	movs	r1, r3
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4aae      	ldr	r2, [pc, #696]	; (800a7ac <UART_SetConfig+0x34c>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d136      	bne.n	800a564 <UART_SetConfig+0x104>
 800a4f6:	4bae      	ldr	r3, [pc, #696]	; (800a7b0 <UART_SetConfig+0x350>)
 800a4f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d020      	beq.n	800a544 <UART_SetConfig+0xe4>
 800a502:	d827      	bhi.n	800a554 <UART_SetConfig+0xf4>
 800a504:	2b02      	cmp	r3, #2
 800a506:	d00d      	beq.n	800a524 <UART_SetConfig+0xc4>
 800a508:	d824      	bhi.n	800a554 <UART_SetConfig+0xf4>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d002      	beq.n	800a514 <UART_SetConfig+0xb4>
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d010      	beq.n	800a534 <UART_SetConfig+0xd4>
 800a512:	e01f      	b.n	800a554 <UART_SetConfig+0xf4>
 800a514:	231b      	movs	r3, #27
 800a516:	2218      	movs	r2, #24
 800a518:	4694      	mov	ip, r2
 800a51a:	44bc      	add	ip, r7
 800a51c:	4463      	add	r3, ip
 800a51e:	2201      	movs	r2, #1
 800a520:	701a      	strb	r2, [r3, #0]
 800a522:	e0ab      	b.n	800a67c <UART_SetConfig+0x21c>
 800a524:	231b      	movs	r3, #27
 800a526:	2218      	movs	r2, #24
 800a528:	4694      	mov	ip, r2
 800a52a:	44bc      	add	ip, r7
 800a52c:	4463      	add	r3, ip
 800a52e:	2202      	movs	r2, #2
 800a530:	701a      	strb	r2, [r3, #0]
 800a532:	e0a3      	b.n	800a67c <UART_SetConfig+0x21c>
 800a534:	231b      	movs	r3, #27
 800a536:	2218      	movs	r2, #24
 800a538:	4694      	mov	ip, r2
 800a53a:	44bc      	add	ip, r7
 800a53c:	4463      	add	r3, ip
 800a53e:	2204      	movs	r2, #4
 800a540:	701a      	strb	r2, [r3, #0]
 800a542:	e09b      	b.n	800a67c <UART_SetConfig+0x21c>
 800a544:	231b      	movs	r3, #27
 800a546:	2218      	movs	r2, #24
 800a548:	4694      	mov	ip, r2
 800a54a:	44bc      	add	ip, r7
 800a54c:	4463      	add	r3, ip
 800a54e:	2208      	movs	r2, #8
 800a550:	701a      	strb	r2, [r3, #0]
 800a552:	e093      	b.n	800a67c <UART_SetConfig+0x21c>
 800a554:	231b      	movs	r3, #27
 800a556:	2218      	movs	r2, #24
 800a558:	4694      	mov	ip, r2
 800a55a:	44bc      	add	ip, r7
 800a55c:	4463      	add	r3, ip
 800a55e:	2210      	movs	r2, #16
 800a560:	701a      	strb	r2, [r3, #0]
 800a562:	e08b      	b.n	800a67c <UART_SetConfig+0x21c>
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a92      	ldr	r2, [pc, #584]	; (800a7b4 <UART_SetConfig+0x354>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d136      	bne.n	800a5dc <UART_SetConfig+0x17c>
 800a56e:	4b90      	ldr	r3, [pc, #576]	; (800a7b0 <UART_SetConfig+0x350>)
 800a570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a572:	220c      	movs	r2, #12
 800a574:	4013      	ands	r3, r2
 800a576:	2b0c      	cmp	r3, #12
 800a578:	d020      	beq.n	800a5bc <UART_SetConfig+0x15c>
 800a57a:	d827      	bhi.n	800a5cc <UART_SetConfig+0x16c>
 800a57c:	2b08      	cmp	r3, #8
 800a57e:	d00d      	beq.n	800a59c <UART_SetConfig+0x13c>
 800a580:	d824      	bhi.n	800a5cc <UART_SetConfig+0x16c>
 800a582:	2b00      	cmp	r3, #0
 800a584:	d002      	beq.n	800a58c <UART_SetConfig+0x12c>
 800a586:	2b04      	cmp	r3, #4
 800a588:	d010      	beq.n	800a5ac <UART_SetConfig+0x14c>
 800a58a:	e01f      	b.n	800a5cc <UART_SetConfig+0x16c>
 800a58c:	231b      	movs	r3, #27
 800a58e:	2218      	movs	r2, #24
 800a590:	4694      	mov	ip, r2
 800a592:	44bc      	add	ip, r7
 800a594:	4463      	add	r3, ip
 800a596:	2200      	movs	r2, #0
 800a598:	701a      	strb	r2, [r3, #0]
 800a59a:	e06f      	b.n	800a67c <UART_SetConfig+0x21c>
 800a59c:	231b      	movs	r3, #27
 800a59e:	2218      	movs	r2, #24
 800a5a0:	4694      	mov	ip, r2
 800a5a2:	44bc      	add	ip, r7
 800a5a4:	4463      	add	r3, ip
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	701a      	strb	r2, [r3, #0]
 800a5aa:	e067      	b.n	800a67c <UART_SetConfig+0x21c>
 800a5ac:	231b      	movs	r3, #27
 800a5ae:	2218      	movs	r2, #24
 800a5b0:	4694      	mov	ip, r2
 800a5b2:	44bc      	add	ip, r7
 800a5b4:	4463      	add	r3, ip
 800a5b6:	2204      	movs	r2, #4
 800a5b8:	701a      	strb	r2, [r3, #0]
 800a5ba:	e05f      	b.n	800a67c <UART_SetConfig+0x21c>
 800a5bc:	231b      	movs	r3, #27
 800a5be:	2218      	movs	r2, #24
 800a5c0:	4694      	mov	ip, r2
 800a5c2:	44bc      	add	ip, r7
 800a5c4:	4463      	add	r3, ip
 800a5c6:	2208      	movs	r2, #8
 800a5c8:	701a      	strb	r2, [r3, #0]
 800a5ca:	e057      	b.n	800a67c <UART_SetConfig+0x21c>
 800a5cc:	231b      	movs	r3, #27
 800a5ce:	2218      	movs	r2, #24
 800a5d0:	4694      	mov	ip, r2
 800a5d2:	44bc      	add	ip, r7
 800a5d4:	4463      	add	r3, ip
 800a5d6:	2210      	movs	r2, #16
 800a5d8:	701a      	strb	r2, [r3, #0]
 800a5da:	e04f      	b.n	800a67c <UART_SetConfig+0x21c>
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a70      	ldr	r2, [pc, #448]	; (800a7a4 <UART_SetConfig+0x344>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d143      	bne.n	800a66e <UART_SetConfig+0x20e>
 800a5e6:	4b72      	ldr	r3, [pc, #456]	; (800a7b0 <UART_SetConfig+0x350>)
 800a5e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5ea:	23c0      	movs	r3, #192	; 0xc0
 800a5ec:	011b      	lsls	r3, r3, #4
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	22c0      	movs	r2, #192	; 0xc0
 800a5f2:	0112      	lsls	r2, r2, #4
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d02a      	beq.n	800a64e <UART_SetConfig+0x1ee>
 800a5f8:	22c0      	movs	r2, #192	; 0xc0
 800a5fa:	0112      	lsls	r2, r2, #4
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d82e      	bhi.n	800a65e <UART_SetConfig+0x1fe>
 800a600:	2280      	movs	r2, #128	; 0x80
 800a602:	0112      	lsls	r2, r2, #4
 800a604:	4293      	cmp	r3, r2
 800a606:	d012      	beq.n	800a62e <UART_SetConfig+0x1ce>
 800a608:	2280      	movs	r2, #128	; 0x80
 800a60a:	0112      	lsls	r2, r2, #4
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d826      	bhi.n	800a65e <UART_SetConfig+0x1fe>
 800a610:	2b00      	cmp	r3, #0
 800a612:	d004      	beq.n	800a61e <UART_SetConfig+0x1be>
 800a614:	2280      	movs	r2, #128	; 0x80
 800a616:	00d2      	lsls	r2, r2, #3
 800a618:	4293      	cmp	r3, r2
 800a61a:	d010      	beq.n	800a63e <UART_SetConfig+0x1de>
 800a61c:	e01f      	b.n	800a65e <UART_SetConfig+0x1fe>
 800a61e:	231b      	movs	r3, #27
 800a620:	2218      	movs	r2, #24
 800a622:	4694      	mov	ip, r2
 800a624:	44bc      	add	ip, r7
 800a626:	4463      	add	r3, ip
 800a628:	2200      	movs	r2, #0
 800a62a:	701a      	strb	r2, [r3, #0]
 800a62c:	e026      	b.n	800a67c <UART_SetConfig+0x21c>
 800a62e:	231b      	movs	r3, #27
 800a630:	2218      	movs	r2, #24
 800a632:	4694      	mov	ip, r2
 800a634:	44bc      	add	ip, r7
 800a636:	4463      	add	r3, ip
 800a638:	2202      	movs	r2, #2
 800a63a:	701a      	strb	r2, [r3, #0]
 800a63c:	e01e      	b.n	800a67c <UART_SetConfig+0x21c>
 800a63e:	231b      	movs	r3, #27
 800a640:	2218      	movs	r2, #24
 800a642:	4694      	mov	ip, r2
 800a644:	44bc      	add	ip, r7
 800a646:	4463      	add	r3, ip
 800a648:	2204      	movs	r2, #4
 800a64a:	701a      	strb	r2, [r3, #0]
 800a64c:	e016      	b.n	800a67c <UART_SetConfig+0x21c>
 800a64e:	231b      	movs	r3, #27
 800a650:	2218      	movs	r2, #24
 800a652:	4694      	mov	ip, r2
 800a654:	44bc      	add	ip, r7
 800a656:	4463      	add	r3, ip
 800a658:	2208      	movs	r2, #8
 800a65a:	701a      	strb	r2, [r3, #0]
 800a65c:	e00e      	b.n	800a67c <UART_SetConfig+0x21c>
 800a65e:	231b      	movs	r3, #27
 800a660:	2218      	movs	r2, #24
 800a662:	4694      	mov	ip, r2
 800a664:	44bc      	add	ip, r7
 800a666:	4463      	add	r3, ip
 800a668:	2210      	movs	r2, #16
 800a66a:	701a      	strb	r2, [r3, #0]
 800a66c:	e006      	b.n	800a67c <UART_SetConfig+0x21c>
 800a66e:	231b      	movs	r3, #27
 800a670:	2218      	movs	r2, #24
 800a672:	4694      	mov	ip, r2
 800a674:	44bc      	add	ip, r7
 800a676:	4463      	add	r3, ip
 800a678:	2210      	movs	r2, #16
 800a67a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a48      	ldr	r2, [pc, #288]	; (800a7a4 <UART_SetConfig+0x344>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d000      	beq.n	800a688 <UART_SetConfig+0x228>
 800a686:	e09b      	b.n	800a7c0 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a688:	231b      	movs	r3, #27
 800a68a:	2218      	movs	r2, #24
 800a68c:	4694      	mov	ip, r2
 800a68e:	44bc      	add	ip, r7
 800a690:	4463      	add	r3, ip
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	2b08      	cmp	r3, #8
 800a696:	d01d      	beq.n	800a6d4 <UART_SetConfig+0x274>
 800a698:	dc20      	bgt.n	800a6dc <UART_SetConfig+0x27c>
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d015      	beq.n	800a6ca <UART_SetConfig+0x26a>
 800a69e:	dc1d      	bgt.n	800a6dc <UART_SetConfig+0x27c>
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d002      	beq.n	800a6aa <UART_SetConfig+0x24a>
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d005      	beq.n	800a6b4 <UART_SetConfig+0x254>
 800a6a8:	e018      	b.n	800a6dc <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6aa:	f7fe fa99 	bl	8008be0 <HAL_RCC_GetPCLK1Freq>
 800a6ae:	0003      	movs	r3, r0
 800a6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6b2:	e01d      	b.n	800a6f0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6b4:	4b3e      	ldr	r3, [pc, #248]	; (800a7b0 <UART_SetConfig+0x350>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2210      	movs	r2, #16
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	d002      	beq.n	800a6c4 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a6be:	4b3e      	ldr	r3, [pc, #248]	; (800a7b8 <UART_SetConfig+0x358>)
 800a6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6c2:	e015      	b.n	800a6f0 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 800a6c4:	4b3d      	ldr	r3, [pc, #244]	; (800a7bc <UART_SetConfig+0x35c>)
 800a6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6c8:	e012      	b.n	800a6f0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6ca:	f7fe f9d9 	bl	8008a80 <HAL_RCC_GetSysClockFreq>
 800a6ce:	0003      	movs	r3, r0
 800a6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6d2:	e00d      	b.n	800a6f0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6d4:	2380      	movs	r3, #128	; 0x80
 800a6d6:	021b      	lsls	r3, r3, #8
 800a6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6da:	e009      	b.n	800a6f0 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a6e0:	231a      	movs	r3, #26
 800a6e2:	2218      	movs	r2, #24
 800a6e4:	4694      	mov	ip, r2
 800a6e6:	44bc      	add	ip, r7
 800a6e8:	4463      	add	r3, ip
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	701a      	strb	r2, [r3, #0]
        break;
 800a6ee:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d100      	bne.n	800a6f8 <UART_SetConfig+0x298>
 800a6f6:	e139      	b.n	800a96c <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	0013      	movs	r3, r2
 800a6fe:	005b      	lsls	r3, r3, #1
 800a700:	189b      	adds	r3, r3, r2
 800a702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a704:	429a      	cmp	r2, r3
 800a706:	d305      	bcc.n	800a714 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a70e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a710:	429a      	cmp	r2, r3
 800a712:	d907      	bls.n	800a724 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800a714:	231a      	movs	r3, #26
 800a716:	2218      	movs	r2, #24
 800a718:	4694      	mov	ip, r2
 800a71a:	44bc      	add	ip, r7
 800a71c:	4463      	add	r3, ip
 800a71e:	2201      	movs	r2, #1
 800a720:	701a      	strb	r2, [r3, #0]
 800a722:	e123      	b.n	800a96c <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a726:	613b      	str	r3, [r7, #16]
 800a728:	2300      	movs	r3, #0
 800a72a:	617b      	str	r3, [r7, #20]
 800a72c:	6939      	ldr	r1, [r7, #16]
 800a72e:	697a      	ldr	r2, [r7, #20]
 800a730:	000b      	movs	r3, r1
 800a732:	0e1b      	lsrs	r3, r3, #24
 800a734:	0010      	movs	r0, r2
 800a736:	0205      	lsls	r5, r0, #8
 800a738:	431d      	orrs	r5, r3
 800a73a:	000b      	movs	r3, r1
 800a73c:	021c      	lsls	r4, r3, #8
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	085b      	lsrs	r3, r3, #1
 800a744:	60bb      	str	r3, [r7, #8]
 800a746:	2300      	movs	r3, #0
 800a748:	60fb      	str	r3, [r7, #12]
 800a74a:	68b8      	ldr	r0, [r7, #8]
 800a74c:	68f9      	ldr	r1, [r7, #12]
 800a74e:	1900      	adds	r0, r0, r4
 800a750:	4169      	adcs	r1, r5
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	603b      	str	r3, [r7, #0]
 800a758:	2300      	movs	r3, #0
 800a75a:	607b      	str	r3, [r7, #4]
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f7f5 fedc 	bl	800051c <__aeabi_uldivmod>
 800a764:	0002      	movs	r2, r0
 800a766:	000b      	movs	r3, r1
 800a768:	0013      	movs	r3, r2
 800a76a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a76c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a76e:	23c0      	movs	r3, #192	; 0xc0
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	429a      	cmp	r2, r3
 800a774:	d309      	bcc.n	800a78a <UART_SetConfig+0x32a>
 800a776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a778:	2380      	movs	r3, #128	; 0x80
 800a77a:	035b      	lsls	r3, r3, #13
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d204      	bcs.n	800a78a <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a786:	60da      	str	r2, [r3, #12]
 800a788:	e0f0      	b.n	800a96c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800a78a:	231a      	movs	r3, #26
 800a78c:	2218      	movs	r2, #24
 800a78e:	4694      	mov	ip, r2
 800a790:	44bc      	add	ip, r7
 800a792:	4463      	add	r3, ip
 800a794:	2201      	movs	r2, #1
 800a796:	701a      	strb	r2, [r3, #0]
 800a798:	e0e8      	b.n	800a96c <UART_SetConfig+0x50c>
 800a79a:	46c0      	nop			; (mov r8, r8)
 800a79c:	efff69f3 	.word	0xefff69f3
 800a7a0:	ffffcfff 	.word	0xffffcfff
 800a7a4:	40004800 	.word	0x40004800
 800a7a8:	fffff4ff 	.word	0xfffff4ff
 800a7ac:	40013800 	.word	0x40013800
 800a7b0:	40021000 	.word	0x40021000
 800a7b4:	40004400 	.word	0x40004400
 800a7b8:	003d0900 	.word	0x003d0900
 800a7bc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	69da      	ldr	r2, [r3, #28]
 800a7c4:	2380      	movs	r3, #128	; 0x80
 800a7c6:	021b      	lsls	r3, r3, #8
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d000      	beq.n	800a7ce <UART_SetConfig+0x36e>
 800a7cc:	e074      	b.n	800a8b8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a7ce:	231b      	movs	r3, #27
 800a7d0:	2218      	movs	r2, #24
 800a7d2:	4694      	mov	ip, r2
 800a7d4:	44bc      	add	ip, r7
 800a7d6:	4463      	add	r3, ip
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	2b08      	cmp	r3, #8
 800a7dc:	d822      	bhi.n	800a824 <UART_SetConfig+0x3c4>
 800a7de:	009a      	lsls	r2, r3, #2
 800a7e0:	4b6a      	ldr	r3, [pc, #424]	; (800a98c <UART_SetConfig+0x52c>)
 800a7e2:	18d3      	adds	r3, r2, r3
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7e8:	f7fe f9fa 	bl	8008be0 <HAL_RCC_GetPCLK1Freq>
 800a7ec:	0003      	movs	r3, r0
 800a7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7f0:	e022      	b.n	800a838 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7f2:	f7fe fa0b 	bl	8008c0c <HAL_RCC_GetPCLK2Freq>
 800a7f6:	0003      	movs	r3, r0
 800a7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7fa:	e01d      	b.n	800a838 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7fc:	4b64      	ldr	r3, [pc, #400]	; (800a990 <UART_SetConfig+0x530>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2210      	movs	r2, #16
 800a802:	4013      	ands	r3, r2
 800a804:	d002      	beq.n	800a80c <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a806:	4b63      	ldr	r3, [pc, #396]	; (800a994 <UART_SetConfig+0x534>)
 800a808:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a80a:	e015      	b.n	800a838 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 800a80c:	4b62      	ldr	r3, [pc, #392]	; (800a998 <UART_SetConfig+0x538>)
 800a80e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a810:	e012      	b.n	800a838 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a812:	f7fe f935 	bl	8008a80 <HAL_RCC_GetSysClockFreq>
 800a816:	0003      	movs	r3, r0
 800a818:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a81a:	e00d      	b.n	800a838 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a81c:	2380      	movs	r3, #128	; 0x80
 800a81e:	021b      	lsls	r3, r3, #8
 800a820:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a822:	e009      	b.n	800a838 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 800a824:	2300      	movs	r3, #0
 800a826:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a828:	231a      	movs	r3, #26
 800a82a:	2218      	movs	r2, #24
 800a82c:	4694      	mov	ip, r2
 800a82e:	44bc      	add	ip, r7
 800a830:	4463      	add	r3, ip
 800a832:	2201      	movs	r2, #1
 800a834:	701a      	strb	r2, [r3, #0]
        break;
 800a836:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d100      	bne.n	800a840 <UART_SetConfig+0x3e0>
 800a83e:	e095      	b.n	800a96c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a842:	005a      	lsls	r2, r3, #1
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	085b      	lsrs	r3, r3, #1
 800a84a:	18d2      	adds	r2, r2, r3
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	0019      	movs	r1, r3
 800a852:	0010      	movs	r0, r2
 800a854:	f7f5 fc74 	bl	8000140 <__udivsi3>
 800a858:	0003      	movs	r3, r0
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a860:	2b0f      	cmp	r3, #15
 800a862:	d921      	bls.n	800a8a8 <UART_SetConfig+0x448>
 800a864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a866:	2380      	movs	r3, #128	; 0x80
 800a868:	025b      	lsls	r3, r3, #9
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d21c      	bcs.n	800a8a8 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a870:	b29a      	uxth	r2, r3
 800a872:	200e      	movs	r0, #14
 800a874:	2418      	movs	r4, #24
 800a876:	193b      	adds	r3, r7, r4
 800a878:	181b      	adds	r3, r3, r0
 800a87a:	210f      	movs	r1, #15
 800a87c:	438a      	bics	r2, r1
 800a87e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a882:	085b      	lsrs	r3, r3, #1
 800a884:	b29b      	uxth	r3, r3
 800a886:	2207      	movs	r2, #7
 800a888:	4013      	ands	r3, r2
 800a88a:	b299      	uxth	r1, r3
 800a88c:	193b      	adds	r3, r7, r4
 800a88e:	181b      	adds	r3, r3, r0
 800a890:	193a      	adds	r2, r7, r4
 800a892:	1812      	adds	r2, r2, r0
 800a894:	8812      	ldrh	r2, [r2, #0]
 800a896:	430a      	orrs	r2, r1
 800a898:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	193a      	adds	r2, r7, r4
 800a8a0:	1812      	adds	r2, r2, r0
 800a8a2:	8812      	ldrh	r2, [r2, #0]
 800a8a4:	60da      	str	r2, [r3, #12]
 800a8a6:	e061      	b.n	800a96c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800a8a8:	231a      	movs	r3, #26
 800a8aa:	2218      	movs	r2, #24
 800a8ac:	4694      	mov	ip, r2
 800a8ae:	44bc      	add	ip, r7
 800a8b0:	4463      	add	r3, ip
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	701a      	strb	r2, [r3, #0]
 800a8b6:	e059      	b.n	800a96c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a8b8:	231b      	movs	r3, #27
 800a8ba:	2218      	movs	r2, #24
 800a8bc:	4694      	mov	ip, r2
 800a8be:	44bc      	add	ip, r7
 800a8c0:	4463      	add	r3, ip
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	2b08      	cmp	r3, #8
 800a8c6:	d822      	bhi.n	800a90e <UART_SetConfig+0x4ae>
 800a8c8:	009a      	lsls	r2, r3, #2
 800a8ca:	4b34      	ldr	r3, [pc, #208]	; (800a99c <UART_SetConfig+0x53c>)
 800a8cc:	18d3      	adds	r3, r2, r3
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8d2:	f7fe f985 	bl	8008be0 <HAL_RCC_GetPCLK1Freq>
 800a8d6:	0003      	movs	r3, r0
 800a8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8da:	e022      	b.n	800a922 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8dc:	f7fe f996 	bl	8008c0c <HAL_RCC_GetPCLK2Freq>
 800a8e0:	0003      	movs	r3, r0
 800a8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8e4:	e01d      	b.n	800a922 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8e6:	4b2a      	ldr	r3, [pc, #168]	; (800a990 <UART_SetConfig+0x530>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2210      	movs	r2, #16
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	d002      	beq.n	800a8f6 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a8f0:	4b28      	ldr	r3, [pc, #160]	; (800a994 <UART_SetConfig+0x534>)
 800a8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8f4:	e015      	b.n	800a922 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800a8f6:	4b28      	ldr	r3, [pc, #160]	; (800a998 <UART_SetConfig+0x538>)
 800a8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8fa:	e012      	b.n	800a922 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8fc:	f7fe f8c0 	bl	8008a80 <HAL_RCC_GetSysClockFreq>
 800a900:	0003      	movs	r3, r0
 800a902:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a904:	e00d      	b.n	800a922 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a906:	2380      	movs	r3, #128	; 0x80
 800a908:	021b      	lsls	r3, r3, #8
 800a90a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a90c:	e009      	b.n	800a922 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800a90e:	2300      	movs	r3, #0
 800a910:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a912:	231a      	movs	r3, #26
 800a914:	2218      	movs	r2, #24
 800a916:	4694      	mov	ip, r2
 800a918:	44bc      	add	ip, r7
 800a91a:	4463      	add	r3, ip
 800a91c:	2201      	movs	r2, #1
 800a91e:	701a      	strb	r2, [r3, #0]
        break;
 800a920:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800a922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a924:	2b00      	cmp	r3, #0
 800a926:	d021      	beq.n	800a96c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	085a      	lsrs	r2, r3, #1
 800a92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a930:	18d2      	adds	r2, r2, r3
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	0019      	movs	r1, r3
 800a938:	0010      	movs	r0, r2
 800a93a:	f7f5 fc01 	bl	8000140 <__udivsi3>
 800a93e:	0003      	movs	r3, r0
 800a940:	b29b      	uxth	r3, r3
 800a942:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a946:	2b0f      	cmp	r3, #15
 800a948:	d909      	bls.n	800a95e <UART_SetConfig+0x4fe>
 800a94a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a94c:	2380      	movs	r3, #128	; 0x80
 800a94e:	025b      	lsls	r3, r3, #9
 800a950:	429a      	cmp	r2, r3
 800a952:	d204      	bcs.n	800a95e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a95a:	60da      	str	r2, [r3, #12]
 800a95c:	e006      	b.n	800a96c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800a95e:	231a      	movs	r3, #26
 800a960:	2218      	movs	r2, #24
 800a962:	4694      	mov	ip, r2
 800a964:	44bc      	add	ip, r7
 800a966:	4463      	add	r3, ip
 800a968:	2201      	movs	r2, #1
 800a96a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	2200      	movs	r2, #0
 800a970:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	2200      	movs	r2, #0
 800a976:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a978:	231a      	movs	r3, #26
 800a97a:	2218      	movs	r2, #24
 800a97c:	4694      	mov	ip, r2
 800a97e:	44bc      	add	ip, r7
 800a980:	4463      	add	r3, ip
 800a982:	781b      	ldrb	r3, [r3, #0]
}
 800a984:	0018      	movs	r0, r3
 800a986:	46bd      	mov	sp, r7
 800a988:	b00e      	add	sp, #56	; 0x38
 800a98a:	bdb0      	pop	{r4, r5, r7, pc}
 800a98c:	0800eb40 	.word	0x0800eb40
 800a990:	40021000 	.word	0x40021000
 800a994:	003d0900 	.word	0x003d0900
 800a998:	00f42400 	.word	0x00f42400
 800a99c:	0800eb64 	.word	0x0800eb64

0800a9a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	d00b      	beq.n	800a9ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	4a4a      	ldr	r2, [pc, #296]	; (800aae4 <UART_AdvFeatureConfig+0x144>)
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	0019      	movs	r1, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	d00b      	beq.n	800a9ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	4a43      	ldr	r2, [pc, #268]	; (800aae8 <UART_AdvFeatureConfig+0x148>)
 800a9dc:	4013      	ands	r3, r2
 800a9de:	0019      	movs	r1, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	430a      	orrs	r2, r1
 800a9ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	2204      	movs	r2, #4
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	d00b      	beq.n	800aa0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	4a3b      	ldr	r2, [pc, #236]	; (800aaec <UART_AdvFeatureConfig+0x14c>)
 800a9fe:	4013      	ands	r3, r2
 800aa00:	0019      	movs	r1, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa12:	2208      	movs	r2, #8
 800aa14:	4013      	ands	r3, r2
 800aa16:	d00b      	beq.n	800aa30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	4a34      	ldr	r2, [pc, #208]	; (800aaf0 <UART_AdvFeatureConfig+0x150>)
 800aa20:	4013      	ands	r3, r2
 800aa22:	0019      	movs	r1, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	2210      	movs	r2, #16
 800aa36:	4013      	ands	r3, r2
 800aa38:	d00b      	beq.n	800aa52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	4a2c      	ldr	r2, [pc, #176]	; (800aaf4 <UART_AdvFeatureConfig+0x154>)
 800aa42:	4013      	ands	r3, r2
 800aa44:	0019      	movs	r1, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	2220      	movs	r2, #32
 800aa58:	4013      	ands	r3, r2
 800aa5a:	d00b      	beq.n	800aa74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	4a25      	ldr	r2, [pc, #148]	; (800aaf8 <UART_AdvFeatureConfig+0x158>)
 800aa64:	4013      	ands	r3, r2
 800aa66:	0019      	movs	r1, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	430a      	orrs	r2, r1
 800aa72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa78:	2240      	movs	r2, #64	; 0x40
 800aa7a:	4013      	ands	r3, r2
 800aa7c:	d01d      	beq.n	800aaba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	4a1d      	ldr	r2, [pc, #116]	; (800aafc <UART_AdvFeatureConfig+0x15c>)
 800aa86:	4013      	ands	r3, r2
 800aa88:	0019      	movs	r1, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa9a:	2380      	movs	r3, #128	; 0x80
 800aa9c:	035b      	lsls	r3, r3, #13
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d10b      	bne.n	800aaba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	4a15      	ldr	r2, [pc, #84]	; (800ab00 <UART_AdvFeatureConfig+0x160>)
 800aaaa:	4013      	ands	r3, r2
 800aaac:	0019      	movs	r1, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	430a      	orrs	r2, r1
 800aab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabe:	2280      	movs	r2, #128	; 0x80
 800aac0:	4013      	ands	r3, r2
 800aac2:	d00b      	beq.n	800aadc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	4a0e      	ldr	r2, [pc, #56]	; (800ab04 <UART_AdvFeatureConfig+0x164>)
 800aacc:	4013      	ands	r3, r2
 800aace:	0019      	movs	r1, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	430a      	orrs	r2, r1
 800aada:	605a      	str	r2, [r3, #4]
  }
}
 800aadc:	46c0      	nop			; (mov r8, r8)
 800aade:	46bd      	mov	sp, r7
 800aae0:	b002      	add	sp, #8
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	fffdffff 	.word	0xfffdffff
 800aae8:	fffeffff 	.word	0xfffeffff
 800aaec:	fffbffff 	.word	0xfffbffff
 800aaf0:	ffff7fff 	.word	0xffff7fff
 800aaf4:	ffffefff 	.word	0xffffefff
 800aaf8:	ffffdfff 	.word	0xffffdfff
 800aafc:	ffefffff 	.word	0xffefffff
 800ab00:	ff9fffff 	.word	0xff9fffff
 800ab04:	fff7ffff 	.word	0xfff7ffff

0800ab08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b086      	sub	sp, #24
 800ab0c:	af02      	add	r7, sp, #8
 800ab0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2280      	movs	r2, #128	; 0x80
 800ab14:	2100      	movs	r1, #0
 800ab16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab18:	f7fb fcb0 	bl	800647c <HAL_GetTick>
 800ab1c:	0003      	movs	r3, r0
 800ab1e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2208      	movs	r2, #8
 800ab28:	4013      	ands	r3, r2
 800ab2a:	2b08      	cmp	r3, #8
 800ab2c:	d10c      	bne.n	800ab48 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2280      	movs	r2, #128	; 0x80
 800ab32:	0391      	lsls	r1, r2, #14
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	4a17      	ldr	r2, [pc, #92]	; (800ab94 <UART_CheckIdleState+0x8c>)
 800ab38:	9200      	str	r2, [sp, #0]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f000 f82c 	bl	800ab98 <UART_WaitOnFlagUntilTimeout>
 800ab40:	1e03      	subs	r3, r0, #0
 800ab42:	d001      	beq.n	800ab48 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e021      	b.n	800ab8c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2204      	movs	r2, #4
 800ab50:	4013      	ands	r3, r2
 800ab52:	2b04      	cmp	r3, #4
 800ab54:	d10c      	bne.n	800ab70 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2280      	movs	r2, #128	; 0x80
 800ab5a:	03d1      	lsls	r1, r2, #15
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	4a0d      	ldr	r2, [pc, #52]	; (800ab94 <UART_CheckIdleState+0x8c>)
 800ab60:	9200      	str	r2, [sp, #0]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f000 f818 	bl	800ab98 <UART_WaitOnFlagUntilTimeout>
 800ab68:	1e03      	subs	r3, r0, #0
 800ab6a:	d001      	beq.n	800ab70 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e00d      	b.n	800ab8c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2220      	movs	r2, #32
 800ab74:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2220      	movs	r2, #32
 800ab7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2274      	movs	r2, #116	; 0x74
 800ab86:	2100      	movs	r1, #0
 800ab88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	0018      	movs	r0, r3
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	b004      	add	sp, #16
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	01ffffff 	.word	0x01ffffff

0800ab98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b094      	sub	sp, #80	; 0x50
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	603b      	str	r3, [r7, #0]
 800aba4:	1dfb      	adds	r3, r7, #7
 800aba6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aba8:	e0a3      	b.n	800acf2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abac:	3301      	adds	r3, #1
 800abae:	d100      	bne.n	800abb2 <UART_WaitOnFlagUntilTimeout+0x1a>
 800abb0:	e09f      	b.n	800acf2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abb2:	f7fb fc63 	bl	800647c <HAL_GetTick>
 800abb6:	0002      	movs	r2, r0
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d302      	bcc.n	800abc8 <UART_WaitOnFlagUntilTimeout+0x30>
 800abc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d13d      	bne.n	800ac44 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abc8:	f3ef 8310 	mrs	r3, PRIMASK
 800abcc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800abce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800abd0:	647b      	str	r3, [r7, #68]	; 0x44
 800abd2:	2301      	movs	r3, #1
 800abd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd8:	f383 8810 	msr	PRIMASK, r3
}
 800abdc:	46c0      	nop			; (mov r8, r8)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	494c      	ldr	r1, [pc, #304]	; (800ad1c <UART_WaitOnFlagUntilTimeout+0x184>)
 800abea:	400a      	ands	r2, r1
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abf0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf4:	f383 8810 	msr	PRIMASK, r3
}
 800abf8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abfa:	f3ef 8310 	mrs	r3, PRIMASK
 800abfe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800ac00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac02:	643b      	str	r3, [r7, #64]	; 0x40
 800ac04:	2301      	movs	r3, #1
 800ac06:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0a:	f383 8810 	msr	PRIMASK, r3
}
 800ac0e:	46c0      	nop			; (mov r8, r8)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	689a      	ldr	r2, [r3, #8]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2101      	movs	r1, #1
 800ac1c:	438a      	bics	r2, r1
 800ac1e:	609a      	str	r2, [r3, #8]
 800ac20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac22:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac26:	f383 8810 	msr	PRIMASK, r3
}
 800ac2a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2220      	movs	r2, #32
 800ac30:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2220      	movs	r2, #32
 800ac36:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2274      	movs	r2, #116	; 0x74
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ac40:	2303      	movs	r3, #3
 800ac42:	e067      	b.n	800ad14 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2204      	movs	r2, #4
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	d050      	beq.n	800acf2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	69da      	ldr	r2, [r3, #28]
 800ac56:	2380      	movs	r3, #128	; 0x80
 800ac58:	011b      	lsls	r3, r3, #4
 800ac5a:	401a      	ands	r2, r3
 800ac5c:	2380      	movs	r3, #128	; 0x80
 800ac5e:	011b      	lsls	r3, r3, #4
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d146      	bne.n	800acf2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2280      	movs	r2, #128	; 0x80
 800ac6a:	0112      	lsls	r2, r2, #4
 800ac6c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac6e:	f3ef 8310 	mrs	r3, PRIMASK
 800ac72:	613b      	str	r3, [r7, #16]
  return(result);
 800ac74:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac78:	2301      	movs	r3, #1
 800ac7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f383 8810 	msr	PRIMASK, r3
}
 800ac82:	46c0      	nop			; (mov r8, r8)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4923      	ldr	r1, [pc, #140]	; (800ad1c <UART_WaitOnFlagUntilTimeout+0x184>)
 800ac90:	400a      	ands	r2, r1
 800ac92:	601a      	str	r2, [r3, #0]
 800ac94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	f383 8810 	msr	PRIMASK, r3
}
 800ac9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aca0:	f3ef 8310 	mrs	r3, PRIMASK
 800aca4:	61fb      	str	r3, [r7, #28]
  return(result);
 800aca6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aca8:	64bb      	str	r3, [r7, #72]	; 0x48
 800acaa:	2301      	movs	r3, #1
 800acac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acae:	6a3b      	ldr	r3, [r7, #32]
 800acb0:	f383 8810 	msr	PRIMASK, r3
}
 800acb4:	46c0      	nop			; (mov r8, r8)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	689a      	ldr	r2, [r3, #8]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2101      	movs	r1, #1
 800acc2:	438a      	bics	r2, r1
 800acc4:	609a      	str	r2, [r3, #8]
 800acc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acc8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800accc:	f383 8810 	msr	PRIMASK, r3
}
 800acd0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2220      	movs	r2, #32
 800acd6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2220      	movs	r2, #32
 800acdc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2280      	movs	r2, #128	; 0x80
 800ace2:	2120      	movs	r1, #32
 800ace4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2274      	movs	r2, #116	; 0x74
 800acea:	2100      	movs	r1, #0
 800acec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800acee:	2303      	movs	r3, #3
 800acf0:	e010      	b.n	800ad14 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	69db      	ldr	r3, [r3, #28]
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	4013      	ands	r3, r2
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	425a      	negs	r2, r3
 800ad02:	4153      	adcs	r3, r2
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	001a      	movs	r2, r3
 800ad08:	1dfb      	adds	r3, r7, #7
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d100      	bne.n	800ad12 <UART_WaitOnFlagUntilTimeout+0x17a>
 800ad10:	e74b      	b.n	800abaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	0018      	movs	r0, r3
 800ad16:	46bd      	mov	sp, r7
 800ad18:	b014      	add	sp, #80	; 0x50
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	fffffe5f 	.word	0xfffffe5f

0800ad20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b090      	sub	sp, #64	; 0x40
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	1dbb      	adds	r3, r7, #6
 800ad2c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	1dba      	adds	r2, r7, #6
 800ad38:	2158      	movs	r1, #88	; 0x58
 800ad3a:	8812      	ldrh	r2, [r2, #0]
 800ad3c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2280      	movs	r2, #128	; 0x80
 800ad42:	2100      	movs	r1, #0
 800ad44:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2222      	movs	r2, #34	; 0x22
 800ad4a:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d02b      	beq.n	800adac <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad58:	4a3f      	ldr	r2, [pc, #252]	; (800ae58 <UART_Start_Receive_DMA+0x138>)
 800ad5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad60:	4a3e      	ldr	r2, [pc, #248]	; (800ae5c <UART_Start_Receive_DMA+0x13c>)
 800ad62:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad68:	4a3d      	ldr	r2, [pc, #244]	; (800ae60 <UART_Start_Receive_DMA+0x140>)
 800ad6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad70:	2200      	movs	r2, #0
 800ad72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3324      	adds	r3, #36	; 0x24
 800ad7e:	0019      	movs	r1, r3
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad84:	001a      	movs	r2, r3
 800ad86:	1dbb      	adds	r3, r7, #6
 800ad88:	881b      	ldrh	r3, [r3, #0]
 800ad8a:	f7fc f947 	bl	800701c <HAL_DMA_Start_IT>
 800ad8e:	1e03      	subs	r3, r0, #0
 800ad90:	d00c      	beq.n	800adac <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2280      	movs	r2, #128	; 0x80
 800ad96:	2110      	movs	r1, #16
 800ad98:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2274      	movs	r2, #116	; 0x74
 800ad9e:	2100      	movs	r1, #0
 800ada0:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2220      	movs	r2, #32
 800ada6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	e050      	b.n	800ae4e <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2274      	movs	r2, #116	; 0x74
 800adb0:	2100      	movs	r1, #0
 800adb2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adb4:	f3ef 8310 	mrs	r3, PRIMASK
 800adb8:	613b      	str	r3, [r7, #16]
  return(result);
 800adba:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adbe:	2301      	movs	r3, #1
 800adc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	f383 8810 	msr	PRIMASK, r3
}
 800adc8:	46c0      	nop			; (mov r8, r8)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2180      	movs	r1, #128	; 0x80
 800add6:	0049      	lsls	r1, r1, #1
 800add8:	430a      	orrs	r2, r1
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	f383 8810 	msr	PRIMASK, r3
}
 800ade6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ade8:	f3ef 8310 	mrs	r3, PRIMASK
 800adec:	61fb      	str	r3, [r7, #28]
  return(result);
 800adee:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adf0:	63bb      	str	r3, [r7, #56]	; 0x38
 800adf2:	2301      	movs	r3, #1
 800adf4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	f383 8810 	msr	PRIMASK, r3
}
 800adfc:	46c0      	nop			; (mov r8, r8)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689a      	ldr	r2, [r3, #8]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2101      	movs	r1, #1
 800ae0a:	430a      	orrs	r2, r1
 800ae0c:	609a      	str	r2, [r3, #8]
 800ae0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae14:	f383 8810 	msr	PRIMASK, r3
}
 800ae18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae1a:	f3ef 8310 	mrs	r3, PRIMASK
 800ae1e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800ae20:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae22:	637b      	str	r3, [r7, #52]	; 0x34
 800ae24:	2301      	movs	r3, #1
 800ae26:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2a:	f383 8810 	msr	PRIMASK, r3
}
 800ae2e:	46c0      	nop			; (mov r8, r8)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689a      	ldr	r2, [r3, #8]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2140      	movs	r1, #64	; 0x40
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	609a      	str	r2, [r3, #8]
 800ae40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae42:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae46:	f383 8810 	msr	PRIMASK, r3
}
 800ae4a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	0018      	movs	r0, r3
 800ae50:	46bd      	mov	sp, r7
 800ae52:	b010      	add	sp, #64	; 0x40
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	46c0      	nop			; (mov r8, r8)
 800ae58:	0800af71 	.word	0x0800af71
 800ae5c:	0800b099 	.word	0x0800b099
 800ae60:	0800b0d5 	.word	0x0800b0d5

0800ae64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ae70:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae72:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ae74:	617b      	str	r3, [r7, #20]
 800ae76:	2301      	movs	r3, #1
 800ae78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f383 8810 	msr	PRIMASK, r3
}
 800ae80:	46c0      	nop			; (mov r8, r8)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	21c0      	movs	r1, #192	; 0xc0
 800ae8e:	438a      	bics	r2, r1
 800ae90:	601a      	str	r2, [r3, #0]
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	f383 8810 	msr	PRIMASK, r3
}
 800ae9c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2220      	movs	r2, #32
 800aea2:	679a      	str	r2, [r3, #120]	; 0x78
}
 800aea4:	46c0      	nop			; (mov r8, r8)
 800aea6:	46bd      	mov	sp, r7
 800aea8:	b006      	add	sp, #24
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08e      	sub	sp, #56	; 0x38
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aeb4:	f3ef 8310 	mrs	r3, PRIMASK
 800aeb8:	617b      	str	r3, [r7, #20]
  return(result);
 800aeba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aebc:	637b      	str	r3, [r7, #52]	; 0x34
 800aebe:	2301      	movs	r3, #1
 800aec0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	f383 8810 	msr	PRIMASK, r3
}
 800aec8:	46c0      	nop			; (mov r8, r8)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4925      	ldr	r1, [pc, #148]	; (800af6c <UART_EndRxTransfer+0xc0>)
 800aed6:	400a      	ands	r2, r1
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aedc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	f383 8810 	msr	PRIMASK, r3
}
 800aee4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aee6:	f3ef 8310 	mrs	r3, PRIMASK
 800aeea:	623b      	str	r3, [r7, #32]
  return(result);
 800aeec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeee:	633b      	str	r3, [r7, #48]	; 0x30
 800aef0:	2301      	movs	r3, #1
 800aef2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef6:	f383 8810 	msr	PRIMASK, r3
}
 800aefa:	46c0      	nop			; (mov r8, r8)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	689a      	ldr	r2, [r3, #8]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2101      	movs	r1, #1
 800af08:	438a      	bics	r2, r1
 800af0a:	609a      	str	r2, [r3, #8]
 800af0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af12:	f383 8810 	msr	PRIMASK, r3
}
 800af16:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d118      	bne.n	800af52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af20:	f3ef 8310 	mrs	r3, PRIMASK
 800af24:	60bb      	str	r3, [r7, #8]
  return(result);
 800af26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af2a:	2301      	movs	r3, #1
 800af2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f383 8810 	msr	PRIMASK, r3
}
 800af34:	46c0      	nop			; (mov r8, r8)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2110      	movs	r1, #16
 800af42:	438a      	bics	r2, r1
 800af44:	601a      	str	r2, [r3, #0]
 800af46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	f383 8810 	msr	PRIMASK, r3
}
 800af50:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2220      	movs	r2, #32
 800af56:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	665a      	str	r2, [r3, #100]	; 0x64
}
 800af64:	46c0      	nop			; (mov r8, r8)
 800af66:	46bd      	mov	sp, r7
 800af68:	b00e      	add	sp, #56	; 0x38
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	fffffedf 	.word	0xfffffedf

0800af70 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b094      	sub	sp, #80	; 0x50
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2220      	movs	r2, #32
 800af86:	4013      	ands	r3, r2
 800af88:	d16e      	bne.n	800b068 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 800af8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af8c:	225a      	movs	r2, #90	; 0x5a
 800af8e:	2100      	movs	r1, #0
 800af90:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af92:	f3ef 8310 	mrs	r3, PRIMASK
 800af96:	61bb      	str	r3, [r7, #24]
  return(result);
 800af98:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800af9c:	2301      	movs	r3, #1
 800af9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	f383 8810 	msr	PRIMASK, r3
}
 800afa6:	46c0      	nop			; (mov r8, r8)
 800afa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4938      	ldr	r1, [pc, #224]	; (800b094 <UART_DMAReceiveCplt+0x124>)
 800afb4:	400a      	ands	r2, r1
 800afb6:	601a      	str	r2, [r3, #0]
 800afb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afbc:	6a3b      	ldr	r3, [r7, #32]
 800afbe:	f383 8810 	msr	PRIMASK, r3
}
 800afc2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afc4:	f3ef 8310 	mrs	r3, PRIMASK
 800afc8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afcc:	647b      	str	r3, [r7, #68]	; 0x44
 800afce:	2301      	movs	r3, #1
 800afd0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd4:	f383 8810 	msr	PRIMASK, r3
}
 800afd8:	46c0      	nop			; (mov r8, r8)
 800afda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	689a      	ldr	r2, [r3, #8]
 800afe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2101      	movs	r1, #1
 800afe6:	438a      	bics	r2, r1
 800afe8:	609a      	str	r2, [r3, #8]
 800afea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff0:	f383 8810 	msr	PRIMASK, r3
}
 800aff4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aff6:	f3ef 8310 	mrs	r3, PRIMASK
 800affa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800affc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800affe:	643b      	str	r3, [r7, #64]	; 0x40
 800b000:	2301      	movs	r3, #1
 800b002:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b006:	f383 8810 	msr	PRIMASK, r3
}
 800b00a:	46c0      	nop			; (mov r8, r8)
 800b00c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	689a      	ldr	r2, [r3, #8]
 800b012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2140      	movs	r1, #64	; 0x40
 800b018:	438a      	bics	r2, r1
 800b01a:	609a      	str	r2, [r3, #8]
 800b01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b01e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b022:	f383 8810 	msr	PRIMASK, r3
}
 800b026:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b02a:	2220      	movs	r2, #32
 800b02c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b02e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b032:	2b01      	cmp	r3, #1
 800b034:	d118      	bne.n	800b068 <UART_DMAReceiveCplt+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b036:	f3ef 8310 	mrs	r3, PRIMASK
 800b03a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b03c:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b03e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b040:	2301      	movs	r3, #1
 800b042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	f383 8810 	msr	PRIMASK, r3
}
 800b04a:	46c0      	nop			; (mov r8, r8)
 800b04c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2110      	movs	r1, #16
 800b058:	438a      	bics	r2, r1
 800b05a:	601a      	str	r2, [r3, #0]
 800b05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b05e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f383 8810 	msr	PRIMASK, r3
}
 800b066:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b06a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d108      	bne.n	800b082 <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b072:	2258      	movs	r2, #88	; 0x58
 800b074:	5a9a      	ldrh	r2, [r3, r2]
 800b076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b078:	0011      	movs	r1, r2
 800b07a:	0018      	movs	r0, r3
 800b07c:	f7ff f9e4 	bl	800a448 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b080:	e003      	b.n	800b08a <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800b082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b084:	0018      	movs	r0, r3
 800b086:	f7ff f9c7 	bl	800a418 <HAL_UART_RxCpltCallback>
}
 800b08a:	46c0      	nop			; (mov r8, r8)
 800b08c:	46bd      	mov	sp, r7
 800b08e:	b014      	add	sp, #80	; 0x50
 800b090:	bd80      	pop	{r7, pc}
 800b092:	46c0      	nop			; (mov r8, r8)
 800b094:	fffffeff 	.word	0xfffffeff

0800b098 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d10a      	bne.n	800b0c4 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2258      	movs	r2, #88	; 0x58
 800b0b2:	5a9b      	ldrh	r3, [r3, r2]
 800b0b4:	085b      	lsrs	r3, r3, #1
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	0011      	movs	r1, r2
 800b0bc:	0018      	movs	r0, r3
 800b0be:	f7ff f9c3 	bl	800a448 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0c2:	e003      	b.n	800b0cc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	0018      	movs	r0, r3
 800b0c8:	f7ff f9ae 	bl	800a428 <HAL_UART_RxHalfCpltCallback>
}
 800b0cc:	46c0      	nop			; (mov r8, r8)
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	b004      	add	sp, #16
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	2280      	movs	r2, #128	; 0x80
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	2b80      	cmp	r3, #128	; 0x80
 800b0fa:	d10a      	bne.n	800b112 <UART_DMAError+0x3e>
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	2b21      	cmp	r3, #33	; 0x21
 800b100:	d107      	bne.n	800b112 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	2252      	movs	r2, #82	; 0x52
 800b106:	2100      	movs	r1, #0
 800b108:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	0018      	movs	r0, r3
 800b10e:	f7ff fea9 	bl	800ae64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	2240      	movs	r2, #64	; 0x40
 800b11a:	4013      	ands	r3, r2
 800b11c:	2b40      	cmp	r3, #64	; 0x40
 800b11e:	d10a      	bne.n	800b136 <UART_DMAError+0x62>
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2b22      	cmp	r3, #34	; 0x22
 800b124:	d107      	bne.n	800b136 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	225a      	movs	r2, #90	; 0x5a
 800b12a:	2100      	movs	r1, #0
 800b12c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	0018      	movs	r0, r3
 800b132:	f7ff febb 	bl	800aeac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	2280      	movs	r2, #128	; 0x80
 800b13a:	589b      	ldr	r3, [r3, r2]
 800b13c:	2210      	movs	r2, #16
 800b13e:	431a      	orrs	r2, r3
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	2180      	movs	r1, #128	; 0x80
 800b144:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	0018      	movs	r0, r3
 800b14a:	f7ff f975 	bl	800a438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b14e:	46c0      	nop			; (mov r8, r8)
 800b150:	46bd      	mov	sp, r7
 800b152:	b006      	add	sp, #24
 800b154:	bd80      	pop	{r7, pc}

0800b156 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b162:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	225a      	movs	r2, #90	; 0x5a
 800b168:	2100      	movs	r1, #0
 800b16a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2252      	movs	r2, #82	; 0x52
 800b170:	2100      	movs	r1, #0
 800b172:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	0018      	movs	r0, r3
 800b178:	f7ff f95e 	bl	800a438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b17c:	46c0      	nop			; (mov r8, r8)
 800b17e:	46bd      	mov	sp, r7
 800b180:	b004      	add	sp, #16
 800b182:	bd80      	pop	{r7, pc}

0800b184 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b18c:	f3ef 8310 	mrs	r3, PRIMASK
 800b190:	60bb      	str	r3, [r7, #8]
  return(result);
 800b192:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b194:	617b      	str	r3, [r7, #20]
 800b196:	2301      	movs	r3, #1
 800b198:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f383 8810 	msr	PRIMASK, r3
}
 800b1a0:	46c0      	nop			; (mov r8, r8)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2140      	movs	r1, #64	; 0x40
 800b1ae:	438a      	bics	r2, r1
 800b1b0:	601a      	str	r2, [r3, #0]
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	f383 8810 	msr	PRIMASK, r3
}
 800b1bc:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2220      	movs	r2, #32
 800b1c2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	f7ff f91b 	bl	800a408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1d2:	46c0      	nop			; (mov r8, r8)
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	b006      	add	sp, #24
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b082      	sub	sp, #8
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1e2:	46c0      	nop			; (mov r8, r8)
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	b002      	add	sp, #8
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b082      	sub	sp, #8
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d101      	bne.n	800b1fc <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e017      	b.n	800b22c <HAL_WWDG_Init+0x42>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	0018      	movs	r0, r3
 800b200:	f7fa f8b8 	bl	8005374 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	68da      	ldr	r2, [r3, #12]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2180      	movs	r1, #128	; 0x80
 800b20e:	430a      	orrs	r2, r1
 800b210:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	691a      	ldr	r2, [r3, #16]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	431a      	orrs	r2, r3
 800b21c:	0011      	movs	r1, r2
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	689a      	ldr	r2, [r3, #8]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	430a      	orrs	r2, r1
 800b228:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	0018      	movs	r0, r3
 800b22e:	46bd      	mov	sp, r7
 800b230:	b002      	add	sp, #8
 800b232:	bd80      	pop	{r7, pc}

0800b234 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	68d2      	ldr	r2, [r2, #12]
 800b244:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	0018      	movs	r0, r3
 800b24a:	46bd      	mov	sp, r7
 800b24c:	b002      	add	sp, #8
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <__errno>:
 800b250:	4b01      	ldr	r3, [pc, #4]	; (800b258 <__errno+0x8>)
 800b252:	6818      	ldr	r0, [r3, #0]
 800b254:	4770      	bx	lr
 800b256:	46c0      	nop			; (mov r8, r8)
 800b258:	20000030 	.word	0x20000030

0800b25c <__libc_init_array>:
 800b25c:	b570      	push	{r4, r5, r6, lr}
 800b25e:	2600      	movs	r6, #0
 800b260:	4d0c      	ldr	r5, [pc, #48]	; (800b294 <__libc_init_array+0x38>)
 800b262:	4c0d      	ldr	r4, [pc, #52]	; (800b298 <__libc_init_array+0x3c>)
 800b264:	1b64      	subs	r4, r4, r5
 800b266:	10a4      	asrs	r4, r4, #2
 800b268:	42a6      	cmp	r6, r4
 800b26a:	d109      	bne.n	800b280 <__libc_init_array+0x24>
 800b26c:	2600      	movs	r6, #0
 800b26e:	f003 f891 	bl	800e394 <_init>
 800b272:	4d0a      	ldr	r5, [pc, #40]	; (800b29c <__libc_init_array+0x40>)
 800b274:	4c0a      	ldr	r4, [pc, #40]	; (800b2a0 <__libc_init_array+0x44>)
 800b276:	1b64      	subs	r4, r4, r5
 800b278:	10a4      	asrs	r4, r4, #2
 800b27a:	42a6      	cmp	r6, r4
 800b27c:	d105      	bne.n	800b28a <__libc_init_array+0x2e>
 800b27e:	bd70      	pop	{r4, r5, r6, pc}
 800b280:	00b3      	lsls	r3, r6, #2
 800b282:	58eb      	ldr	r3, [r5, r3]
 800b284:	4798      	blx	r3
 800b286:	3601      	adds	r6, #1
 800b288:	e7ee      	b.n	800b268 <__libc_init_array+0xc>
 800b28a:	00b3      	lsls	r3, r6, #2
 800b28c:	58eb      	ldr	r3, [r5, r3]
 800b28e:	4798      	blx	r3
 800b290:	3601      	adds	r6, #1
 800b292:	e7f2      	b.n	800b27a <__libc_init_array+0x1e>
 800b294:	0800ef74 	.word	0x0800ef74
 800b298:	0800ef74 	.word	0x0800ef74
 800b29c:	0800ef74 	.word	0x0800ef74
 800b2a0:	0800ef78 	.word	0x0800ef78

0800b2a4 <memcpy>:
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	b510      	push	{r4, lr}
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d100      	bne.n	800b2ae <memcpy+0xa>
 800b2ac:	bd10      	pop	{r4, pc}
 800b2ae:	5ccc      	ldrb	r4, [r1, r3]
 800b2b0:	54c4      	strb	r4, [r0, r3]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	e7f8      	b.n	800b2a8 <memcpy+0x4>

0800b2b6 <memset>:
 800b2b6:	0003      	movs	r3, r0
 800b2b8:	1882      	adds	r2, r0, r2
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d100      	bne.n	800b2c0 <memset+0xa>
 800b2be:	4770      	bx	lr
 800b2c0:	7019      	strb	r1, [r3, #0]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	e7f9      	b.n	800b2ba <memset+0x4>

0800b2c6 <__cvt>:
 800b2c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2c8:	001e      	movs	r6, r3
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	0014      	movs	r4, r2
 800b2ce:	b08b      	sub	sp, #44	; 0x2c
 800b2d0:	429e      	cmp	r6, r3
 800b2d2:	da04      	bge.n	800b2de <__cvt+0x18>
 800b2d4:	2180      	movs	r1, #128	; 0x80
 800b2d6:	0609      	lsls	r1, r1, #24
 800b2d8:	1873      	adds	r3, r6, r1
 800b2da:	001e      	movs	r6, r3
 800b2dc:	232d      	movs	r3, #45	; 0x2d
 800b2de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b2e0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b2e2:	7013      	strb	r3, [r2, #0]
 800b2e4:	2320      	movs	r3, #32
 800b2e6:	2203      	movs	r2, #3
 800b2e8:	439f      	bics	r7, r3
 800b2ea:	2f46      	cmp	r7, #70	; 0x46
 800b2ec:	d007      	beq.n	800b2fe <__cvt+0x38>
 800b2ee:	003b      	movs	r3, r7
 800b2f0:	3b45      	subs	r3, #69	; 0x45
 800b2f2:	4259      	negs	r1, r3
 800b2f4:	414b      	adcs	r3, r1
 800b2f6:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b2f8:	3a01      	subs	r2, #1
 800b2fa:	18cb      	adds	r3, r1, r3
 800b2fc:	9310      	str	r3, [sp, #64]	; 0x40
 800b2fe:	ab09      	add	r3, sp, #36	; 0x24
 800b300:	9304      	str	r3, [sp, #16]
 800b302:	ab08      	add	r3, sp, #32
 800b304:	9303      	str	r3, [sp, #12]
 800b306:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b308:	9200      	str	r2, [sp, #0]
 800b30a:	9302      	str	r3, [sp, #8]
 800b30c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b30e:	0022      	movs	r2, r4
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	0033      	movs	r3, r6
 800b314:	f000 fe56 	bl	800bfc4 <_dtoa_r>
 800b318:	0005      	movs	r5, r0
 800b31a:	2f47      	cmp	r7, #71	; 0x47
 800b31c:	d102      	bne.n	800b324 <__cvt+0x5e>
 800b31e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b320:	07db      	lsls	r3, r3, #31
 800b322:	d528      	bpl.n	800b376 <__cvt+0xb0>
 800b324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b326:	18eb      	adds	r3, r5, r3
 800b328:	9307      	str	r3, [sp, #28]
 800b32a:	2f46      	cmp	r7, #70	; 0x46
 800b32c:	d114      	bne.n	800b358 <__cvt+0x92>
 800b32e:	782b      	ldrb	r3, [r5, #0]
 800b330:	2b30      	cmp	r3, #48	; 0x30
 800b332:	d10c      	bne.n	800b34e <__cvt+0x88>
 800b334:	2200      	movs	r2, #0
 800b336:	2300      	movs	r3, #0
 800b338:	0020      	movs	r0, r4
 800b33a:	0031      	movs	r1, r6
 800b33c:	f7f5 f886 	bl	800044c <__aeabi_dcmpeq>
 800b340:	2800      	cmp	r0, #0
 800b342:	d104      	bne.n	800b34e <__cvt+0x88>
 800b344:	2301      	movs	r3, #1
 800b346:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b348:	1a9b      	subs	r3, r3, r2
 800b34a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b34c:	6013      	str	r3, [r2, #0]
 800b34e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b350:	9a07      	ldr	r2, [sp, #28]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	18d3      	adds	r3, r2, r3
 800b356:	9307      	str	r3, [sp, #28]
 800b358:	2200      	movs	r2, #0
 800b35a:	2300      	movs	r3, #0
 800b35c:	0020      	movs	r0, r4
 800b35e:	0031      	movs	r1, r6
 800b360:	f7f5 f874 	bl	800044c <__aeabi_dcmpeq>
 800b364:	2800      	cmp	r0, #0
 800b366:	d001      	beq.n	800b36c <__cvt+0xa6>
 800b368:	9b07      	ldr	r3, [sp, #28]
 800b36a:	9309      	str	r3, [sp, #36]	; 0x24
 800b36c:	2230      	movs	r2, #48	; 0x30
 800b36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b370:	9907      	ldr	r1, [sp, #28]
 800b372:	428b      	cmp	r3, r1
 800b374:	d306      	bcc.n	800b384 <__cvt+0xbe>
 800b376:	0028      	movs	r0, r5
 800b378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b37a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b37c:	1b5b      	subs	r3, r3, r5
 800b37e:	6013      	str	r3, [r2, #0]
 800b380:	b00b      	add	sp, #44	; 0x2c
 800b382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b384:	1c59      	adds	r1, r3, #1
 800b386:	9109      	str	r1, [sp, #36]	; 0x24
 800b388:	701a      	strb	r2, [r3, #0]
 800b38a:	e7f0      	b.n	800b36e <__cvt+0xa8>

0800b38c <__exponent>:
 800b38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b38e:	1c83      	adds	r3, r0, #2
 800b390:	b087      	sub	sp, #28
 800b392:	9303      	str	r3, [sp, #12]
 800b394:	0005      	movs	r5, r0
 800b396:	000c      	movs	r4, r1
 800b398:	232b      	movs	r3, #43	; 0x2b
 800b39a:	7002      	strb	r2, [r0, #0]
 800b39c:	2900      	cmp	r1, #0
 800b39e:	da01      	bge.n	800b3a4 <__exponent+0x18>
 800b3a0:	424c      	negs	r4, r1
 800b3a2:	3302      	adds	r3, #2
 800b3a4:	706b      	strb	r3, [r5, #1]
 800b3a6:	2c09      	cmp	r4, #9
 800b3a8:	dd31      	ble.n	800b40e <__exponent+0x82>
 800b3aa:	270a      	movs	r7, #10
 800b3ac:	ab04      	add	r3, sp, #16
 800b3ae:	1dde      	adds	r6, r3, #7
 800b3b0:	0020      	movs	r0, r4
 800b3b2:	0039      	movs	r1, r7
 800b3b4:	9601      	str	r6, [sp, #4]
 800b3b6:	f7f5 f833 	bl	8000420 <__aeabi_idivmod>
 800b3ba:	3e01      	subs	r6, #1
 800b3bc:	3130      	adds	r1, #48	; 0x30
 800b3be:	0020      	movs	r0, r4
 800b3c0:	7031      	strb	r1, [r6, #0]
 800b3c2:	0039      	movs	r1, r7
 800b3c4:	9402      	str	r4, [sp, #8]
 800b3c6:	f7f4 ff45 	bl	8000254 <__divsi3>
 800b3ca:	9b02      	ldr	r3, [sp, #8]
 800b3cc:	0004      	movs	r4, r0
 800b3ce:	2b63      	cmp	r3, #99	; 0x63
 800b3d0:	dcee      	bgt.n	800b3b0 <__exponent+0x24>
 800b3d2:	9b01      	ldr	r3, [sp, #4]
 800b3d4:	3430      	adds	r4, #48	; 0x30
 800b3d6:	1e9a      	subs	r2, r3, #2
 800b3d8:	0013      	movs	r3, r2
 800b3da:	9903      	ldr	r1, [sp, #12]
 800b3dc:	7014      	strb	r4, [r2, #0]
 800b3de:	a804      	add	r0, sp, #16
 800b3e0:	3007      	adds	r0, #7
 800b3e2:	4298      	cmp	r0, r3
 800b3e4:	d80e      	bhi.n	800b404 <__exponent+0x78>
 800b3e6:	ab04      	add	r3, sp, #16
 800b3e8:	3307      	adds	r3, #7
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d804      	bhi.n	800b3fa <__exponent+0x6e>
 800b3f0:	ab04      	add	r3, sp, #16
 800b3f2:	3009      	adds	r0, #9
 800b3f4:	18c0      	adds	r0, r0, r3
 800b3f6:	9b01      	ldr	r3, [sp, #4]
 800b3f8:	1ac0      	subs	r0, r0, r3
 800b3fa:	9b03      	ldr	r3, [sp, #12]
 800b3fc:	1818      	adds	r0, r3, r0
 800b3fe:	1b40      	subs	r0, r0, r5
 800b400:	b007      	add	sp, #28
 800b402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b404:	7818      	ldrb	r0, [r3, #0]
 800b406:	3301      	adds	r3, #1
 800b408:	7008      	strb	r0, [r1, #0]
 800b40a:	3101      	adds	r1, #1
 800b40c:	e7e7      	b.n	800b3de <__exponent+0x52>
 800b40e:	2330      	movs	r3, #48	; 0x30
 800b410:	18e4      	adds	r4, r4, r3
 800b412:	70ab      	strb	r3, [r5, #2]
 800b414:	1d28      	adds	r0, r5, #4
 800b416:	70ec      	strb	r4, [r5, #3]
 800b418:	e7f1      	b.n	800b3fe <__exponent+0x72>
	...

0800b41c <_printf_float>:
 800b41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b41e:	b095      	sub	sp, #84	; 0x54
 800b420:	000c      	movs	r4, r1
 800b422:	9208      	str	r2, [sp, #32]
 800b424:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b426:	9309      	str	r3, [sp, #36]	; 0x24
 800b428:	0007      	movs	r7, r0
 800b42a:	f001 fdb7 	bl	800cf9c <_localeconv_r>
 800b42e:	6803      	ldr	r3, [r0, #0]
 800b430:	0018      	movs	r0, r3
 800b432:	930b      	str	r3, [sp, #44]	; 0x2c
 800b434:	f7f4 fe68 	bl	8000108 <strlen>
 800b438:	2300      	movs	r3, #0
 800b43a:	9312      	str	r3, [sp, #72]	; 0x48
 800b43c:	7e23      	ldrb	r3, [r4, #24]
 800b43e:	2207      	movs	r2, #7
 800b440:	001e      	movs	r6, r3
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	900d      	str	r0, [sp, #52]	; 0x34
 800b446:	930c      	str	r3, [sp, #48]	; 0x30
 800b448:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b44a:	682b      	ldr	r3, [r5, #0]
 800b44c:	05c9      	lsls	r1, r1, #23
 800b44e:	d547      	bpl.n	800b4e0 <_printf_float+0xc4>
 800b450:	189b      	adds	r3, r3, r2
 800b452:	4393      	bics	r3, r2
 800b454:	001a      	movs	r2, r3
 800b456:	3208      	adds	r2, #8
 800b458:	602a      	str	r2, [r5, #0]
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	64a2      	str	r2, [r4, #72]	; 0x48
 800b460:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b462:	2201      	movs	r2, #1
 800b464:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b466:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b468:	930a      	str	r3, [sp, #40]	; 0x28
 800b46a:	006b      	lsls	r3, r5, #1
 800b46c:	085b      	lsrs	r3, r3, #1
 800b46e:	930e      	str	r3, [sp, #56]	; 0x38
 800b470:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b472:	4ba8      	ldr	r3, [pc, #672]	; (800b714 <_printf_float+0x2f8>)
 800b474:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b476:	4252      	negs	r2, r2
 800b478:	f7f7 fd8e 	bl	8002f98 <__aeabi_dcmpun>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d131      	bne.n	800b4e4 <_printf_float+0xc8>
 800b480:	2201      	movs	r2, #1
 800b482:	4ba4      	ldr	r3, [pc, #656]	; (800b714 <_printf_float+0x2f8>)
 800b484:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b486:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b488:	4252      	negs	r2, r2
 800b48a:	f7f4 ffef 	bl	800046c <__aeabi_dcmple>
 800b48e:	2800      	cmp	r0, #0
 800b490:	d128      	bne.n	800b4e4 <_printf_float+0xc8>
 800b492:	2200      	movs	r2, #0
 800b494:	2300      	movs	r3, #0
 800b496:	0029      	movs	r1, r5
 800b498:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b49a:	f7f4 ffdd 	bl	8000458 <__aeabi_dcmplt>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d003      	beq.n	800b4aa <_printf_float+0x8e>
 800b4a2:	0023      	movs	r3, r4
 800b4a4:	222d      	movs	r2, #45	; 0x2d
 800b4a6:	3343      	adds	r3, #67	; 0x43
 800b4a8:	701a      	strb	r2, [r3, #0]
 800b4aa:	4d9b      	ldr	r5, [pc, #620]	; (800b718 <_printf_float+0x2fc>)
 800b4ac:	2e47      	cmp	r6, #71	; 0x47
 800b4ae:	d900      	bls.n	800b4b2 <_printf_float+0x96>
 800b4b0:	4d9a      	ldr	r5, [pc, #616]	; (800b71c <_printf_float+0x300>)
 800b4b2:	2303      	movs	r3, #3
 800b4b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4b6:	6123      	str	r3, [r4, #16]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	439a      	bics	r2, r3
 800b4bc:	2300      	movs	r3, #0
 800b4be:	6022      	str	r2, [r4, #0]
 800b4c0:	930a      	str	r3, [sp, #40]	; 0x28
 800b4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c4:	0021      	movs	r1, r4
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	0038      	movs	r0, r7
 800b4ca:	9b08      	ldr	r3, [sp, #32]
 800b4cc:	aa13      	add	r2, sp, #76	; 0x4c
 800b4ce:	f000 f9f3 	bl	800b8b8 <_printf_common>
 800b4d2:	1c43      	adds	r3, r0, #1
 800b4d4:	d000      	beq.n	800b4d8 <_printf_float+0xbc>
 800b4d6:	e09e      	b.n	800b616 <_printf_float+0x1fa>
 800b4d8:	2001      	movs	r0, #1
 800b4da:	4240      	negs	r0, r0
 800b4dc:	b015      	add	sp, #84	; 0x54
 800b4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4e0:	3307      	adds	r3, #7
 800b4e2:	e7b6      	b.n	800b452 <_printf_float+0x36>
 800b4e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4e6:	002b      	movs	r3, r5
 800b4e8:	0010      	movs	r0, r2
 800b4ea:	0029      	movs	r1, r5
 800b4ec:	f7f7 fd54 	bl	8002f98 <__aeabi_dcmpun>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d00a      	beq.n	800b50a <_printf_float+0xee>
 800b4f4:	2d00      	cmp	r5, #0
 800b4f6:	da03      	bge.n	800b500 <_printf_float+0xe4>
 800b4f8:	0023      	movs	r3, r4
 800b4fa:	222d      	movs	r2, #45	; 0x2d
 800b4fc:	3343      	adds	r3, #67	; 0x43
 800b4fe:	701a      	strb	r2, [r3, #0]
 800b500:	4d87      	ldr	r5, [pc, #540]	; (800b720 <_printf_float+0x304>)
 800b502:	2e47      	cmp	r6, #71	; 0x47
 800b504:	d9d5      	bls.n	800b4b2 <_printf_float+0x96>
 800b506:	4d87      	ldr	r5, [pc, #540]	; (800b724 <_printf_float+0x308>)
 800b508:	e7d3      	b.n	800b4b2 <_printf_float+0x96>
 800b50a:	2220      	movs	r2, #32
 800b50c:	0031      	movs	r1, r6
 800b50e:	6863      	ldr	r3, [r4, #4]
 800b510:	4391      	bics	r1, r2
 800b512:	910e      	str	r1, [sp, #56]	; 0x38
 800b514:	1c5a      	adds	r2, r3, #1
 800b516:	d147      	bne.n	800b5a8 <_printf_float+0x18c>
 800b518:	3307      	adds	r3, #7
 800b51a:	6063      	str	r3, [r4, #4]
 800b51c:	2380      	movs	r3, #128	; 0x80
 800b51e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	4313      	orrs	r3, r2
 800b524:	2200      	movs	r2, #0
 800b526:	9206      	str	r2, [sp, #24]
 800b528:	aa12      	add	r2, sp, #72	; 0x48
 800b52a:	9205      	str	r2, [sp, #20]
 800b52c:	aa11      	add	r2, sp, #68	; 0x44
 800b52e:	9203      	str	r2, [sp, #12]
 800b530:	2223      	movs	r2, #35	; 0x23
 800b532:	a908      	add	r1, sp, #32
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	9301      	str	r3, [sp, #4]
 800b538:	6863      	ldr	r3, [r4, #4]
 800b53a:	1852      	adds	r2, r2, r1
 800b53c:	9202      	str	r2, [sp, #8]
 800b53e:	9300      	str	r3, [sp, #0]
 800b540:	0038      	movs	r0, r7
 800b542:	002b      	movs	r3, r5
 800b544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b546:	9604      	str	r6, [sp, #16]
 800b548:	f7ff febd 	bl	800b2c6 <__cvt>
 800b54c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b54e:	0005      	movs	r5, r0
 800b550:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b552:	2b47      	cmp	r3, #71	; 0x47
 800b554:	d108      	bne.n	800b568 <_printf_float+0x14c>
 800b556:	1ccb      	adds	r3, r1, #3
 800b558:	db02      	blt.n	800b560 <_printf_float+0x144>
 800b55a:	6863      	ldr	r3, [r4, #4]
 800b55c:	4299      	cmp	r1, r3
 800b55e:	dd46      	ble.n	800b5ee <_printf_float+0x1d2>
 800b560:	0033      	movs	r3, r6
 800b562:	3b02      	subs	r3, #2
 800b564:	b2db      	uxtb	r3, r3
 800b566:	001e      	movs	r6, r3
 800b568:	2e65      	cmp	r6, #101	; 0x65
 800b56a:	d824      	bhi.n	800b5b6 <_printf_float+0x19a>
 800b56c:	0020      	movs	r0, r4
 800b56e:	0032      	movs	r2, r6
 800b570:	3901      	subs	r1, #1
 800b572:	3050      	adds	r0, #80	; 0x50
 800b574:	9111      	str	r1, [sp, #68]	; 0x44
 800b576:	f7ff ff09 	bl	800b38c <__exponent>
 800b57a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b57c:	900a      	str	r0, [sp, #40]	; 0x28
 800b57e:	1813      	adds	r3, r2, r0
 800b580:	6123      	str	r3, [r4, #16]
 800b582:	2a01      	cmp	r2, #1
 800b584:	dc02      	bgt.n	800b58c <_printf_float+0x170>
 800b586:	6822      	ldr	r2, [r4, #0]
 800b588:	07d2      	lsls	r2, r2, #31
 800b58a:	d501      	bpl.n	800b590 <_printf_float+0x174>
 800b58c:	3301      	adds	r3, #1
 800b58e:	6123      	str	r3, [r4, #16]
 800b590:	2323      	movs	r3, #35	; 0x23
 800b592:	aa08      	add	r2, sp, #32
 800b594:	189b      	adds	r3, r3, r2
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d100      	bne.n	800b59e <_printf_float+0x182>
 800b59c:	e791      	b.n	800b4c2 <_printf_float+0xa6>
 800b59e:	0023      	movs	r3, r4
 800b5a0:	222d      	movs	r2, #45	; 0x2d
 800b5a2:	3343      	adds	r3, #67	; 0x43
 800b5a4:	701a      	strb	r2, [r3, #0]
 800b5a6:	e78c      	b.n	800b4c2 <_printf_float+0xa6>
 800b5a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5aa:	2a47      	cmp	r2, #71	; 0x47
 800b5ac:	d1b6      	bne.n	800b51c <_printf_float+0x100>
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d1b4      	bne.n	800b51c <_printf_float+0x100>
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	e7b1      	b.n	800b51a <_printf_float+0xfe>
 800b5b6:	2e66      	cmp	r6, #102	; 0x66
 800b5b8:	d11b      	bne.n	800b5f2 <_printf_float+0x1d6>
 800b5ba:	6863      	ldr	r3, [r4, #4]
 800b5bc:	2900      	cmp	r1, #0
 800b5be:	dd0d      	ble.n	800b5dc <_printf_float+0x1c0>
 800b5c0:	6121      	str	r1, [r4, #16]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d102      	bne.n	800b5cc <_printf_float+0x1b0>
 800b5c6:	6822      	ldr	r2, [r4, #0]
 800b5c8:	07d2      	lsls	r2, r2, #31
 800b5ca:	d502      	bpl.n	800b5d2 <_printf_float+0x1b6>
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	1859      	adds	r1, r3, r1
 800b5d0:	6121      	str	r1, [r4, #16]
 800b5d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5d4:	65a3      	str	r3, [r4, #88]	; 0x58
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	930a      	str	r3, [sp, #40]	; 0x28
 800b5da:	e7d9      	b.n	800b590 <_printf_float+0x174>
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d103      	bne.n	800b5e8 <_printf_float+0x1cc>
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	6821      	ldr	r1, [r4, #0]
 800b5e4:	4211      	tst	r1, r2
 800b5e6:	d000      	beq.n	800b5ea <_printf_float+0x1ce>
 800b5e8:	1c9a      	adds	r2, r3, #2
 800b5ea:	6122      	str	r2, [r4, #16]
 800b5ec:	e7f1      	b.n	800b5d2 <_printf_float+0x1b6>
 800b5ee:	2367      	movs	r3, #103	; 0x67
 800b5f0:	001e      	movs	r6, r3
 800b5f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	db06      	blt.n	800b608 <_printf_float+0x1ec>
 800b5fa:	6822      	ldr	r2, [r4, #0]
 800b5fc:	6123      	str	r3, [r4, #16]
 800b5fe:	07d2      	lsls	r2, r2, #31
 800b600:	d5e7      	bpl.n	800b5d2 <_printf_float+0x1b6>
 800b602:	3301      	adds	r3, #1
 800b604:	6123      	str	r3, [r4, #16]
 800b606:	e7e4      	b.n	800b5d2 <_printf_float+0x1b6>
 800b608:	2101      	movs	r1, #1
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	dc01      	bgt.n	800b612 <_printf_float+0x1f6>
 800b60e:	1849      	adds	r1, r1, r1
 800b610:	1ac9      	subs	r1, r1, r3
 800b612:	1852      	adds	r2, r2, r1
 800b614:	e7e9      	b.n	800b5ea <_printf_float+0x1ce>
 800b616:	6822      	ldr	r2, [r4, #0]
 800b618:	0553      	lsls	r3, r2, #21
 800b61a:	d408      	bmi.n	800b62e <_printf_float+0x212>
 800b61c:	6923      	ldr	r3, [r4, #16]
 800b61e:	002a      	movs	r2, r5
 800b620:	0038      	movs	r0, r7
 800b622:	9908      	ldr	r1, [sp, #32]
 800b624:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b626:	47a8      	blx	r5
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d129      	bne.n	800b680 <_printf_float+0x264>
 800b62c:	e754      	b.n	800b4d8 <_printf_float+0xbc>
 800b62e:	2e65      	cmp	r6, #101	; 0x65
 800b630:	d800      	bhi.n	800b634 <_printf_float+0x218>
 800b632:	e0ec      	b.n	800b80e <_printf_float+0x3f2>
 800b634:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b636:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b638:	2200      	movs	r2, #0
 800b63a:	2300      	movs	r3, #0
 800b63c:	f7f4 ff06 	bl	800044c <__aeabi_dcmpeq>
 800b640:	2800      	cmp	r0, #0
 800b642:	d034      	beq.n	800b6ae <_printf_float+0x292>
 800b644:	2301      	movs	r3, #1
 800b646:	0038      	movs	r0, r7
 800b648:	4a37      	ldr	r2, [pc, #220]	; (800b728 <_printf_float+0x30c>)
 800b64a:	9908      	ldr	r1, [sp, #32]
 800b64c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b64e:	47a8      	blx	r5
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d100      	bne.n	800b656 <_printf_float+0x23a>
 800b654:	e740      	b.n	800b4d8 <_printf_float+0xbc>
 800b656:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b658:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b65a:	4293      	cmp	r3, r2
 800b65c:	db02      	blt.n	800b664 <_printf_float+0x248>
 800b65e:	6823      	ldr	r3, [r4, #0]
 800b660:	07db      	lsls	r3, r3, #31
 800b662:	d50d      	bpl.n	800b680 <_printf_float+0x264>
 800b664:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b666:	0038      	movs	r0, r7
 800b668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b66a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b66c:	9908      	ldr	r1, [sp, #32]
 800b66e:	47a8      	blx	r5
 800b670:	2500      	movs	r5, #0
 800b672:	1c43      	adds	r3, r0, #1
 800b674:	d100      	bne.n	800b678 <_printf_float+0x25c>
 800b676:	e72f      	b.n	800b4d8 <_printf_float+0xbc>
 800b678:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b67a:	3b01      	subs	r3, #1
 800b67c:	42ab      	cmp	r3, r5
 800b67e:	dc0a      	bgt.n	800b696 <_printf_float+0x27a>
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	079b      	lsls	r3, r3, #30
 800b684:	d500      	bpl.n	800b688 <_printf_float+0x26c>
 800b686:	e114      	b.n	800b8b2 <_printf_float+0x496>
 800b688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b68a:	68e0      	ldr	r0, [r4, #12]
 800b68c:	4298      	cmp	r0, r3
 800b68e:	db00      	blt.n	800b692 <_printf_float+0x276>
 800b690:	e724      	b.n	800b4dc <_printf_float+0xc0>
 800b692:	0018      	movs	r0, r3
 800b694:	e722      	b.n	800b4dc <_printf_float+0xc0>
 800b696:	0022      	movs	r2, r4
 800b698:	2301      	movs	r3, #1
 800b69a:	0038      	movs	r0, r7
 800b69c:	9908      	ldr	r1, [sp, #32]
 800b69e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b6a0:	321a      	adds	r2, #26
 800b6a2:	47b0      	blx	r6
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d100      	bne.n	800b6aa <_printf_float+0x28e>
 800b6a8:	e716      	b.n	800b4d8 <_printf_float+0xbc>
 800b6aa:	3501      	adds	r5, #1
 800b6ac:	e7e4      	b.n	800b678 <_printf_float+0x25c>
 800b6ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	dc3b      	bgt.n	800b72c <_printf_float+0x310>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	0038      	movs	r0, r7
 800b6b8:	4a1b      	ldr	r2, [pc, #108]	; (800b728 <_printf_float+0x30c>)
 800b6ba:	9908      	ldr	r1, [sp, #32]
 800b6bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b6be:	47b0      	blx	r6
 800b6c0:	1c43      	adds	r3, r0, #1
 800b6c2:	d100      	bne.n	800b6c6 <_printf_float+0x2aa>
 800b6c4:	e708      	b.n	800b4d8 <_printf_float+0xbc>
 800b6c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	d102      	bne.n	800b6d4 <_printf_float+0x2b8>
 800b6ce:	6823      	ldr	r3, [r4, #0]
 800b6d0:	07db      	lsls	r3, r3, #31
 800b6d2:	d5d5      	bpl.n	800b680 <_printf_float+0x264>
 800b6d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6d6:	0038      	movs	r0, r7
 800b6d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6da:	9908      	ldr	r1, [sp, #32]
 800b6dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b6de:	47b0      	blx	r6
 800b6e0:	1c43      	adds	r3, r0, #1
 800b6e2:	d100      	bne.n	800b6e6 <_printf_float+0x2ca>
 800b6e4:	e6f8      	b.n	800b4d8 <_printf_float+0xbc>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	930a      	str	r3, [sp, #40]	; 0x28
 800b6ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6ee:	425b      	negs	r3, r3
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	dc01      	bgt.n	800b6f8 <_printf_float+0x2dc>
 800b6f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6f6:	e792      	b.n	800b61e <_printf_float+0x202>
 800b6f8:	0022      	movs	r2, r4
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	0038      	movs	r0, r7
 800b6fe:	9908      	ldr	r1, [sp, #32]
 800b700:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b702:	321a      	adds	r2, #26
 800b704:	47b0      	blx	r6
 800b706:	1c43      	adds	r3, r0, #1
 800b708:	d100      	bne.n	800b70c <_printf_float+0x2f0>
 800b70a:	e6e5      	b.n	800b4d8 <_printf_float+0xbc>
 800b70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b70e:	3301      	adds	r3, #1
 800b710:	e7ea      	b.n	800b6e8 <_printf_float+0x2cc>
 800b712:	46c0      	nop			; (mov r8, r8)
 800b714:	7fefffff 	.word	0x7fefffff
 800b718:	0800eb8c 	.word	0x0800eb8c
 800b71c:	0800eb90 	.word	0x0800eb90
 800b720:	0800eb94 	.word	0x0800eb94
 800b724:	0800eb98 	.word	0x0800eb98
 800b728:	0800eb9c 	.word	0x0800eb9c
 800b72c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b72e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b730:	920a      	str	r2, [sp, #40]	; 0x28
 800b732:	429a      	cmp	r2, r3
 800b734:	dd00      	ble.n	800b738 <_printf_float+0x31c>
 800b736:	930a      	str	r3, [sp, #40]	; 0x28
 800b738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	dc3d      	bgt.n	800b7ba <_printf_float+0x39e>
 800b73e:	2300      	movs	r3, #0
 800b740:	930e      	str	r3, [sp, #56]	; 0x38
 800b742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b744:	43db      	mvns	r3, r3
 800b746:	17db      	asrs	r3, r3, #31
 800b748:	930f      	str	r3, [sp, #60]	; 0x3c
 800b74a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b74c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b74e:	930c      	str	r3, [sp, #48]	; 0x30
 800b750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b752:	4013      	ands	r3, r2
 800b754:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b75a:	4293      	cmp	r3, r2
 800b75c:	dc36      	bgt.n	800b7cc <_printf_float+0x3b0>
 800b75e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b760:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b762:	4293      	cmp	r3, r2
 800b764:	db40      	blt.n	800b7e8 <_printf_float+0x3cc>
 800b766:	6823      	ldr	r3, [r4, #0]
 800b768:	07db      	lsls	r3, r3, #31
 800b76a:	d43d      	bmi.n	800b7e8 <_printf_float+0x3cc>
 800b76c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b76e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b770:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b772:	1ad3      	subs	r3, r2, r3
 800b774:	1a52      	subs	r2, r2, r1
 800b776:	920a      	str	r2, [sp, #40]	; 0x28
 800b778:	429a      	cmp	r2, r3
 800b77a:	dd00      	ble.n	800b77e <_printf_float+0x362>
 800b77c:	930a      	str	r3, [sp, #40]	; 0x28
 800b77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b780:	2b00      	cmp	r3, #0
 800b782:	dc3a      	bgt.n	800b7fa <_printf_float+0x3de>
 800b784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b786:	2500      	movs	r5, #0
 800b788:	43db      	mvns	r3, r3
 800b78a:	17db      	asrs	r3, r3, #31
 800b78c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b78e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b790:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b792:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b794:	1a9b      	subs	r3, r3, r2
 800b796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b798:	400a      	ands	r2, r1
 800b79a:	1a9b      	subs	r3, r3, r2
 800b79c:	42ab      	cmp	r3, r5
 800b79e:	dc00      	bgt.n	800b7a2 <_printf_float+0x386>
 800b7a0:	e76e      	b.n	800b680 <_printf_float+0x264>
 800b7a2:	0022      	movs	r2, r4
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	0038      	movs	r0, r7
 800b7a8:	9908      	ldr	r1, [sp, #32]
 800b7aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b7ac:	321a      	adds	r2, #26
 800b7ae:	47b0      	blx	r6
 800b7b0:	1c43      	adds	r3, r0, #1
 800b7b2:	d100      	bne.n	800b7b6 <_printf_float+0x39a>
 800b7b4:	e690      	b.n	800b4d8 <_printf_float+0xbc>
 800b7b6:	3501      	adds	r5, #1
 800b7b8:	e7e9      	b.n	800b78e <_printf_float+0x372>
 800b7ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7bc:	002a      	movs	r2, r5
 800b7be:	0038      	movs	r0, r7
 800b7c0:	9908      	ldr	r1, [sp, #32]
 800b7c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b7c4:	47b0      	blx	r6
 800b7c6:	1c43      	adds	r3, r0, #1
 800b7c8:	d1b9      	bne.n	800b73e <_printf_float+0x322>
 800b7ca:	e685      	b.n	800b4d8 <_printf_float+0xbc>
 800b7cc:	0022      	movs	r2, r4
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	0038      	movs	r0, r7
 800b7d2:	9908      	ldr	r1, [sp, #32]
 800b7d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b7d6:	321a      	adds	r2, #26
 800b7d8:	47b0      	blx	r6
 800b7da:	1c43      	adds	r3, r0, #1
 800b7dc:	d100      	bne.n	800b7e0 <_printf_float+0x3c4>
 800b7de:	e67b      	b.n	800b4d8 <_printf_float+0xbc>
 800b7e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	930e      	str	r3, [sp, #56]	; 0x38
 800b7e6:	e7b0      	b.n	800b74a <_printf_float+0x32e>
 800b7e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ea:	0038      	movs	r0, r7
 800b7ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7ee:	9908      	ldr	r1, [sp, #32]
 800b7f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b7f2:	47b0      	blx	r6
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	d1b9      	bne.n	800b76c <_printf_float+0x350>
 800b7f8:	e66e      	b.n	800b4d8 <_printf_float+0xbc>
 800b7fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7fc:	0038      	movs	r0, r7
 800b7fe:	18ea      	adds	r2, r5, r3
 800b800:	9908      	ldr	r1, [sp, #32]
 800b802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b804:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b806:	47a8      	blx	r5
 800b808:	1c43      	adds	r3, r0, #1
 800b80a:	d1bb      	bne.n	800b784 <_printf_float+0x368>
 800b80c:	e664      	b.n	800b4d8 <_printf_float+0xbc>
 800b80e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b810:	2b01      	cmp	r3, #1
 800b812:	dc02      	bgt.n	800b81a <_printf_float+0x3fe>
 800b814:	2301      	movs	r3, #1
 800b816:	421a      	tst	r2, r3
 800b818:	d038      	beq.n	800b88c <_printf_float+0x470>
 800b81a:	2301      	movs	r3, #1
 800b81c:	002a      	movs	r2, r5
 800b81e:	0038      	movs	r0, r7
 800b820:	9908      	ldr	r1, [sp, #32]
 800b822:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b824:	47b0      	blx	r6
 800b826:	1c43      	adds	r3, r0, #1
 800b828:	d100      	bne.n	800b82c <_printf_float+0x410>
 800b82a:	e655      	b.n	800b4d8 <_printf_float+0xbc>
 800b82c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b82e:	0038      	movs	r0, r7
 800b830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b832:	9908      	ldr	r1, [sp, #32]
 800b834:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b836:	47b0      	blx	r6
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d100      	bne.n	800b83e <_printf_float+0x422>
 800b83c:	e64c      	b.n	800b4d8 <_printf_float+0xbc>
 800b83e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b840:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b842:	2200      	movs	r2, #0
 800b844:	2300      	movs	r3, #0
 800b846:	f7f4 fe01 	bl	800044c <__aeabi_dcmpeq>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d11c      	bne.n	800b888 <_printf_float+0x46c>
 800b84e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b850:	1c6a      	adds	r2, r5, #1
 800b852:	3b01      	subs	r3, #1
 800b854:	0038      	movs	r0, r7
 800b856:	9908      	ldr	r1, [sp, #32]
 800b858:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b85a:	47a8      	blx	r5
 800b85c:	1c43      	adds	r3, r0, #1
 800b85e:	d10f      	bne.n	800b880 <_printf_float+0x464>
 800b860:	e63a      	b.n	800b4d8 <_printf_float+0xbc>
 800b862:	0022      	movs	r2, r4
 800b864:	2301      	movs	r3, #1
 800b866:	0038      	movs	r0, r7
 800b868:	9908      	ldr	r1, [sp, #32]
 800b86a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b86c:	321a      	adds	r2, #26
 800b86e:	47b0      	blx	r6
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d100      	bne.n	800b876 <_printf_float+0x45a>
 800b874:	e630      	b.n	800b4d8 <_printf_float+0xbc>
 800b876:	3501      	adds	r5, #1
 800b878:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b87a:	3b01      	subs	r3, #1
 800b87c:	42ab      	cmp	r3, r5
 800b87e:	dcf0      	bgt.n	800b862 <_printf_float+0x446>
 800b880:	0022      	movs	r2, r4
 800b882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b884:	3250      	adds	r2, #80	; 0x50
 800b886:	e6cb      	b.n	800b620 <_printf_float+0x204>
 800b888:	2500      	movs	r5, #0
 800b88a:	e7f5      	b.n	800b878 <_printf_float+0x45c>
 800b88c:	002a      	movs	r2, r5
 800b88e:	e7e1      	b.n	800b854 <_printf_float+0x438>
 800b890:	0022      	movs	r2, r4
 800b892:	2301      	movs	r3, #1
 800b894:	0038      	movs	r0, r7
 800b896:	9908      	ldr	r1, [sp, #32]
 800b898:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b89a:	3219      	adds	r2, #25
 800b89c:	47b0      	blx	r6
 800b89e:	1c43      	adds	r3, r0, #1
 800b8a0:	d100      	bne.n	800b8a4 <_printf_float+0x488>
 800b8a2:	e619      	b.n	800b4d8 <_printf_float+0xbc>
 800b8a4:	3501      	adds	r5, #1
 800b8a6:	68e3      	ldr	r3, [r4, #12]
 800b8a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b8aa:	1a9b      	subs	r3, r3, r2
 800b8ac:	42ab      	cmp	r3, r5
 800b8ae:	dcef      	bgt.n	800b890 <_printf_float+0x474>
 800b8b0:	e6ea      	b.n	800b688 <_printf_float+0x26c>
 800b8b2:	2500      	movs	r5, #0
 800b8b4:	e7f7      	b.n	800b8a6 <_printf_float+0x48a>
 800b8b6:	46c0      	nop			; (mov r8, r8)

0800b8b8 <_printf_common>:
 800b8b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8ba:	0015      	movs	r5, r2
 800b8bc:	9301      	str	r3, [sp, #4]
 800b8be:	688a      	ldr	r2, [r1, #8]
 800b8c0:	690b      	ldr	r3, [r1, #16]
 800b8c2:	000c      	movs	r4, r1
 800b8c4:	9000      	str	r0, [sp, #0]
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	da00      	bge.n	800b8cc <_printf_common+0x14>
 800b8ca:	0013      	movs	r3, r2
 800b8cc:	0022      	movs	r2, r4
 800b8ce:	602b      	str	r3, [r5, #0]
 800b8d0:	3243      	adds	r2, #67	; 0x43
 800b8d2:	7812      	ldrb	r2, [r2, #0]
 800b8d4:	2a00      	cmp	r2, #0
 800b8d6:	d001      	beq.n	800b8dc <_printf_common+0x24>
 800b8d8:	3301      	adds	r3, #1
 800b8da:	602b      	str	r3, [r5, #0]
 800b8dc:	6823      	ldr	r3, [r4, #0]
 800b8de:	069b      	lsls	r3, r3, #26
 800b8e0:	d502      	bpl.n	800b8e8 <_printf_common+0x30>
 800b8e2:	682b      	ldr	r3, [r5, #0]
 800b8e4:	3302      	adds	r3, #2
 800b8e6:	602b      	str	r3, [r5, #0]
 800b8e8:	6822      	ldr	r2, [r4, #0]
 800b8ea:	2306      	movs	r3, #6
 800b8ec:	0017      	movs	r7, r2
 800b8ee:	401f      	ands	r7, r3
 800b8f0:	421a      	tst	r2, r3
 800b8f2:	d027      	beq.n	800b944 <_printf_common+0x8c>
 800b8f4:	0023      	movs	r3, r4
 800b8f6:	3343      	adds	r3, #67	; 0x43
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	1e5a      	subs	r2, r3, #1
 800b8fc:	4193      	sbcs	r3, r2
 800b8fe:	6822      	ldr	r2, [r4, #0]
 800b900:	0692      	lsls	r2, r2, #26
 800b902:	d430      	bmi.n	800b966 <_printf_common+0xae>
 800b904:	0022      	movs	r2, r4
 800b906:	9901      	ldr	r1, [sp, #4]
 800b908:	9800      	ldr	r0, [sp, #0]
 800b90a:	9e08      	ldr	r6, [sp, #32]
 800b90c:	3243      	adds	r2, #67	; 0x43
 800b90e:	47b0      	blx	r6
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	d025      	beq.n	800b960 <_printf_common+0xa8>
 800b914:	2306      	movs	r3, #6
 800b916:	6820      	ldr	r0, [r4, #0]
 800b918:	682a      	ldr	r2, [r5, #0]
 800b91a:	68e1      	ldr	r1, [r4, #12]
 800b91c:	2500      	movs	r5, #0
 800b91e:	4003      	ands	r3, r0
 800b920:	2b04      	cmp	r3, #4
 800b922:	d103      	bne.n	800b92c <_printf_common+0x74>
 800b924:	1a8d      	subs	r5, r1, r2
 800b926:	43eb      	mvns	r3, r5
 800b928:	17db      	asrs	r3, r3, #31
 800b92a:	401d      	ands	r5, r3
 800b92c:	68a3      	ldr	r3, [r4, #8]
 800b92e:	6922      	ldr	r2, [r4, #16]
 800b930:	4293      	cmp	r3, r2
 800b932:	dd01      	ble.n	800b938 <_printf_common+0x80>
 800b934:	1a9b      	subs	r3, r3, r2
 800b936:	18ed      	adds	r5, r5, r3
 800b938:	2700      	movs	r7, #0
 800b93a:	42bd      	cmp	r5, r7
 800b93c:	d120      	bne.n	800b980 <_printf_common+0xc8>
 800b93e:	2000      	movs	r0, #0
 800b940:	e010      	b.n	800b964 <_printf_common+0xac>
 800b942:	3701      	adds	r7, #1
 800b944:	68e3      	ldr	r3, [r4, #12]
 800b946:	682a      	ldr	r2, [r5, #0]
 800b948:	1a9b      	subs	r3, r3, r2
 800b94a:	42bb      	cmp	r3, r7
 800b94c:	ddd2      	ble.n	800b8f4 <_printf_common+0x3c>
 800b94e:	0022      	movs	r2, r4
 800b950:	2301      	movs	r3, #1
 800b952:	9901      	ldr	r1, [sp, #4]
 800b954:	9800      	ldr	r0, [sp, #0]
 800b956:	9e08      	ldr	r6, [sp, #32]
 800b958:	3219      	adds	r2, #25
 800b95a:	47b0      	blx	r6
 800b95c:	1c43      	adds	r3, r0, #1
 800b95e:	d1f0      	bne.n	800b942 <_printf_common+0x8a>
 800b960:	2001      	movs	r0, #1
 800b962:	4240      	negs	r0, r0
 800b964:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b966:	2030      	movs	r0, #48	; 0x30
 800b968:	18e1      	adds	r1, r4, r3
 800b96a:	3143      	adds	r1, #67	; 0x43
 800b96c:	7008      	strb	r0, [r1, #0]
 800b96e:	0021      	movs	r1, r4
 800b970:	1c5a      	adds	r2, r3, #1
 800b972:	3145      	adds	r1, #69	; 0x45
 800b974:	7809      	ldrb	r1, [r1, #0]
 800b976:	18a2      	adds	r2, r4, r2
 800b978:	3243      	adds	r2, #67	; 0x43
 800b97a:	3302      	adds	r3, #2
 800b97c:	7011      	strb	r1, [r2, #0]
 800b97e:	e7c1      	b.n	800b904 <_printf_common+0x4c>
 800b980:	0022      	movs	r2, r4
 800b982:	2301      	movs	r3, #1
 800b984:	9901      	ldr	r1, [sp, #4]
 800b986:	9800      	ldr	r0, [sp, #0]
 800b988:	9e08      	ldr	r6, [sp, #32]
 800b98a:	321a      	adds	r2, #26
 800b98c:	47b0      	blx	r6
 800b98e:	1c43      	adds	r3, r0, #1
 800b990:	d0e6      	beq.n	800b960 <_printf_common+0xa8>
 800b992:	3701      	adds	r7, #1
 800b994:	e7d1      	b.n	800b93a <_printf_common+0x82>
	...

0800b998 <_printf_i>:
 800b998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b99a:	b08b      	sub	sp, #44	; 0x2c
 800b99c:	9206      	str	r2, [sp, #24]
 800b99e:	000a      	movs	r2, r1
 800b9a0:	3243      	adds	r2, #67	; 0x43
 800b9a2:	9307      	str	r3, [sp, #28]
 800b9a4:	9005      	str	r0, [sp, #20]
 800b9a6:	9204      	str	r2, [sp, #16]
 800b9a8:	7e0a      	ldrb	r2, [r1, #24]
 800b9aa:	000c      	movs	r4, r1
 800b9ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9ae:	2a78      	cmp	r2, #120	; 0x78
 800b9b0:	d806      	bhi.n	800b9c0 <_printf_i+0x28>
 800b9b2:	2a62      	cmp	r2, #98	; 0x62
 800b9b4:	d808      	bhi.n	800b9c8 <_printf_i+0x30>
 800b9b6:	2a00      	cmp	r2, #0
 800b9b8:	d100      	bne.n	800b9bc <_printf_i+0x24>
 800b9ba:	e0c0      	b.n	800bb3e <_printf_i+0x1a6>
 800b9bc:	2a58      	cmp	r2, #88	; 0x58
 800b9be:	d052      	beq.n	800ba66 <_printf_i+0xce>
 800b9c0:	0026      	movs	r6, r4
 800b9c2:	3642      	adds	r6, #66	; 0x42
 800b9c4:	7032      	strb	r2, [r6, #0]
 800b9c6:	e022      	b.n	800ba0e <_printf_i+0x76>
 800b9c8:	0010      	movs	r0, r2
 800b9ca:	3863      	subs	r0, #99	; 0x63
 800b9cc:	2815      	cmp	r0, #21
 800b9ce:	d8f7      	bhi.n	800b9c0 <_printf_i+0x28>
 800b9d0:	f7f4 fbac 	bl	800012c <__gnu_thumb1_case_shi>
 800b9d4:	001f0016 	.word	0x001f0016
 800b9d8:	fff6fff6 	.word	0xfff6fff6
 800b9dc:	fff6fff6 	.word	0xfff6fff6
 800b9e0:	fff6001f 	.word	0xfff6001f
 800b9e4:	fff6fff6 	.word	0xfff6fff6
 800b9e8:	00a8fff6 	.word	0x00a8fff6
 800b9ec:	009a0036 	.word	0x009a0036
 800b9f0:	fff6fff6 	.word	0xfff6fff6
 800b9f4:	fff600b9 	.word	0xfff600b9
 800b9f8:	fff60036 	.word	0xfff60036
 800b9fc:	009efff6 	.word	0x009efff6
 800ba00:	0026      	movs	r6, r4
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	3642      	adds	r6, #66	; 0x42
 800ba06:	1d11      	adds	r1, r2, #4
 800ba08:	6019      	str	r1, [r3, #0]
 800ba0a:	6813      	ldr	r3, [r2, #0]
 800ba0c:	7033      	strb	r3, [r6, #0]
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e0a7      	b.n	800bb62 <_printf_i+0x1ca>
 800ba12:	6808      	ldr	r0, [r1, #0]
 800ba14:	6819      	ldr	r1, [r3, #0]
 800ba16:	1d0a      	adds	r2, r1, #4
 800ba18:	0605      	lsls	r5, r0, #24
 800ba1a:	d50b      	bpl.n	800ba34 <_printf_i+0x9c>
 800ba1c:	680d      	ldr	r5, [r1, #0]
 800ba1e:	601a      	str	r2, [r3, #0]
 800ba20:	2d00      	cmp	r5, #0
 800ba22:	da03      	bge.n	800ba2c <_printf_i+0x94>
 800ba24:	232d      	movs	r3, #45	; 0x2d
 800ba26:	9a04      	ldr	r2, [sp, #16]
 800ba28:	426d      	negs	r5, r5
 800ba2a:	7013      	strb	r3, [r2, #0]
 800ba2c:	4b61      	ldr	r3, [pc, #388]	; (800bbb4 <_printf_i+0x21c>)
 800ba2e:	270a      	movs	r7, #10
 800ba30:	9303      	str	r3, [sp, #12]
 800ba32:	e032      	b.n	800ba9a <_printf_i+0x102>
 800ba34:	680d      	ldr	r5, [r1, #0]
 800ba36:	601a      	str	r2, [r3, #0]
 800ba38:	0641      	lsls	r1, r0, #25
 800ba3a:	d5f1      	bpl.n	800ba20 <_printf_i+0x88>
 800ba3c:	b22d      	sxth	r5, r5
 800ba3e:	e7ef      	b.n	800ba20 <_printf_i+0x88>
 800ba40:	680d      	ldr	r5, [r1, #0]
 800ba42:	6819      	ldr	r1, [r3, #0]
 800ba44:	1d08      	adds	r0, r1, #4
 800ba46:	6018      	str	r0, [r3, #0]
 800ba48:	062e      	lsls	r6, r5, #24
 800ba4a:	d501      	bpl.n	800ba50 <_printf_i+0xb8>
 800ba4c:	680d      	ldr	r5, [r1, #0]
 800ba4e:	e003      	b.n	800ba58 <_printf_i+0xc0>
 800ba50:	066d      	lsls	r5, r5, #25
 800ba52:	d5fb      	bpl.n	800ba4c <_printf_i+0xb4>
 800ba54:	680d      	ldr	r5, [r1, #0]
 800ba56:	b2ad      	uxth	r5, r5
 800ba58:	4b56      	ldr	r3, [pc, #344]	; (800bbb4 <_printf_i+0x21c>)
 800ba5a:	270a      	movs	r7, #10
 800ba5c:	9303      	str	r3, [sp, #12]
 800ba5e:	2a6f      	cmp	r2, #111	; 0x6f
 800ba60:	d117      	bne.n	800ba92 <_printf_i+0xfa>
 800ba62:	2708      	movs	r7, #8
 800ba64:	e015      	b.n	800ba92 <_printf_i+0xfa>
 800ba66:	3145      	adds	r1, #69	; 0x45
 800ba68:	700a      	strb	r2, [r1, #0]
 800ba6a:	4a52      	ldr	r2, [pc, #328]	; (800bbb4 <_printf_i+0x21c>)
 800ba6c:	9203      	str	r2, [sp, #12]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	6821      	ldr	r1, [r4, #0]
 800ba72:	ca20      	ldmia	r2!, {r5}
 800ba74:	601a      	str	r2, [r3, #0]
 800ba76:	0608      	lsls	r0, r1, #24
 800ba78:	d550      	bpl.n	800bb1c <_printf_i+0x184>
 800ba7a:	07cb      	lsls	r3, r1, #31
 800ba7c:	d502      	bpl.n	800ba84 <_printf_i+0xec>
 800ba7e:	2320      	movs	r3, #32
 800ba80:	4319      	orrs	r1, r3
 800ba82:	6021      	str	r1, [r4, #0]
 800ba84:	2710      	movs	r7, #16
 800ba86:	2d00      	cmp	r5, #0
 800ba88:	d103      	bne.n	800ba92 <_printf_i+0xfa>
 800ba8a:	2320      	movs	r3, #32
 800ba8c:	6822      	ldr	r2, [r4, #0]
 800ba8e:	439a      	bics	r2, r3
 800ba90:	6022      	str	r2, [r4, #0]
 800ba92:	0023      	movs	r3, r4
 800ba94:	2200      	movs	r2, #0
 800ba96:	3343      	adds	r3, #67	; 0x43
 800ba98:	701a      	strb	r2, [r3, #0]
 800ba9a:	6863      	ldr	r3, [r4, #4]
 800ba9c:	60a3      	str	r3, [r4, #8]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	db03      	blt.n	800baaa <_printf_i+0x112>
 800baa2:	2204      	movs	r2, #4
 800baa4:	6821      	ldr	r1, [r4, #0]
 800baa6:	4391      	bics	r1, r2
 800baa8:	6021      	str	r1, [r4, #0]
 800baaa:	2d00      	cmp	r5, #0
 800baac:	d102      	bne.n	800bab4 <_printf_i+0x11c>
 800baae:	9e04      	ldr	r6, [sp, #16]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00c      	beq.n	800bace <_printf_i+0x136>
 800bab4:	9e04      	ldr	r6, [sp, #16]
 800bab6:	0028      	movs	r0, r5
 800bab8:	0039      	movs	r1, r7
 800baba:	f7f4 fbc7 	bl	800024c <__aeabi_uidivmod>
 800babe:	9b03      	ldr	r3, [sp, #12]
 800bac0:	3e01      	subs	r6, #1
 800bac2:	5c5b      	ldrb	r3, [r3, r1]
 800bac4:	7033      	strb	r3, [r6, #0]
 800bac6:	002b      	movs	r3, r5
 800bac8:	0005      	movs	r5, r0
 800baca:	429f      	cmp	r7, r3
 800bacc:	d9f3      	bls.n	800bab6 <_printf_i+0x11e>
 800bace:	2f08      	cmp	r7, #8
 800bad0:	d109      	bne.n	800bae6 <_printf_i+0x14e>
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	07db      	lsls	r3, r3, #31
 800bad6:	d506      	bpl.n	800bae6 <_printf_i+0x14e>
 800bad8:	6863      	ldr	r3, [r4, #4]
 800bada:	6922      	ldr	r2, [r4, #16]
 800badc:	4293      	cmp	r3, r2
 800bade:	dc02      	bgt.n	800bae6 <_printf_i+0x14e>
 800bae0:	2330      	movs	r3, #48	; 0x30
 800bae2:	3e01      	subs	r6, #1
 800bae4:	7033      	strb	r3, [r6, #0]
 800bae6:	9b04      	ldr	r3, [sp, #16]
 800bae8:	1b9b      	subs	r3, r3, r6
 800baea:	6123      	str	r3, [r4, #16]
 800baec:	9b07      	ldr	r3, [sp, #28]
 800baee:	0021      	movs	r1, r4
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	9805      	ldr	r0, [sp, #20]
 800baf4:	9b06      	ldr	r3, [sp, #24]
 800baf6:	aa09      	add	r2, sp, #36	; 0x24
 800baf8:	f7ff fede 	bl	800b8b8 <_printf_common>
 800bafc:	1c43      	adds	r3, r0, #1
 800bafe:	d135      	bne.n	800bb6c <_printf_i+0x1d4>
 800bb00:	2001      	movs	r0, #1
 800bb02:	4240      	negs	r0, r0
 800bb04:	b00b      	add	sp, #44	; 0x2c
 800bb06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb08:	2220      	movs	r2, #32
 800bb0a:	6809      	ldr	r1, [r1, #0]
 800bb0c:	430a      	orrs	r2, r1
 800bb0e:	6022      	str	r2, [r4, #0]
 800bb10:	0022      	movs	r2, r4
 800bb12:	2178      	movs	r1, #120	; 0x78
 800bb14:	3245      	adds	r2, #69	; 0x45
 800bb16:	7011      	strb	r1, [r2, #0]
 800bb18:	4a27      	ldr	r2, [pc, #156]	; (800bbb8 <_printf_i+0x220>)
 800bb1a:	e7a7      	b.n	800ba6c <_printf_i+0xd4>
 800bb1c:	0648      	lsls	r0, r1, #25
 800bb1e:	d5ac      	bpl.n	800ba7a <_printf_i+0xe2>
 800bb20:	b2ad      	uxth	r5, r5
 800bb22:	e7aa      	b.n	800ba7a <_printf_i+0xe2>
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	680d      	ldr	r5, [r1, #0]
 800bb28:	1d10      	adds	r0, r2, #4
 800bb2a:	6949      	ldr	r1, [r1, #20]
 800bb2c:	6018      	str	r0, [r3, #0]
 800bb2e:	6813      	ldr	r3, [r2, #0]
 800bb30:	062e      	lsls	r6, r5, #24
 800bb32:	d501      	bpl.n	800bb38 <_printf_i+0x1a0>
 800bb34:	6019      	str	r1, [r3, #0]
 800bb36:	e002      	b.n	800bb3e <_printf_i+0x1a6>
 800bb38:	066d      	lsls	r5, r5, #25
 800bb3a:	d5fb      	bpl.n	800bb34 <_printf_i+0x19c>
 800bb3c:	8019      	strh	r1, [r3, #0]
 800bb3e:	2300      	movs	r3, #0
 800bb40:	9e04      	ldr	r6, [sp, #16]
 800bb42:	6123      	str	r3, [r4, #16]
 800bb44:	e7d2      	b.n	800baec <_printf_i+0x154>
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	1d11      	adds	r1, r2, #4
 800bb4a:	6019      	str	r1, [r3, #0]
 800bb4c:	6816      	ldr	r6, [r2, #0]
 800bb4e:	2100      	movs	r1, #0
 800bb50:	0030      	movs	r0, r6
 800bb52:	6862      	ldr	r2, [r4, #4]
 800bb54:	f001 faa0 	bl	800d098 <memchr>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d001      	beq.n	800bb60 <_printf_i+0x1c8>
 800bb5c:	1b80      	subs	r0, r0, r6
 800bb5e:	6060      	str	r0, [r4, #4]
 800bb60:	6863      	ldr	r3, [r4, #4]
 800bb62:	6123      	str	r3, [r4, #16]
 800bb64:	2300      	movs	r3, #0
 800bb66:	9a04      	ldr	r2, [sp, #16]
 800bb68:	7013      	strb	r3, [r2, #0]
 800bb6a:	e7bf      	b.n	800baec <_printf_i+0x154>
 800bb6c:	6923      	ldr	r3, [r4, #16]
 800bb6e:	0032      	movs	r2, r6
 800bb70:	9906      	ldr	r1, [sp, #24]
 800bb72:	9805      	ldr	r0, [sp, #20]
 800bb74:	9d07      	ldr	r5, [sp, #28]
 800bb76:	47a8      	blx	r5
 800bb78:	1c43      	adds	r3, r0, #1
 800bb7a:	d0c1      	beq.n	800bb00 <_printf_i+0x168>
 800bb7c:	6823      	ldr	r3, [r4, #0]
 800bb7e:	079b      	lsls	r3, r3, #30
 800bb80:	d415      	bmi.n	800bbae <_printf_i+0x216>
 800bb82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb84:	68e0      	ldr	r0, [r4, #12]
 800bb86:	4298      	cmp	r0, r3
 800bb88:	dabc      	bge.n	800bb04 <_printf_i+0x16c>
 800bb8a:	0018      	movs	r0, r3
 800bb8c:	e7ba      	b.n	800bb04 <_printf_i+0x16c>
 800bb8e:	0022      	movs	r2, r4
 800bb90:	2301      	movs	r3, #1
 800bb92:	9906      	ldr	r1, [sp, #24]
 800bb94:	9805      	ldr	r0, [sp, #20]
 800bb96:	9e07      	ldr	r6, [sp, #28]
 800bb98:	3219      	adds	r2, #25
 800bb9a:	47b0      	blx	r6
 800bb9c:	1c43      	adds	r3, r0, #1
 800bb9e:	d0af      	beq.n	800bb00 <_printf_i+0x168>
 800bba0:	3501      	adds	r5, #1
 800bba2:	68e3      	ldr	r3, [r4, #12]
 800bba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bba6:	1a9b      	subs	r3, r3, r2
 800bba8:	42ab      	cmp	r3, r5
 800bbaa:	dcf0      	bgt.n	800bb8e <_printf_i+0x1f6>
 800bbac:	e7e9      	b.n	800bb82 <_printf_i+0x1ea>
 800bbae:	2500      	movs	r5, #0
 800bbb0:	e7f7      	b.n	800bba2 <_printf_i+0x20a>
 800bbb2:	46c0      	nop			; (mov r8, r8)
 800bbb4:	0800eb9e 	.word	0x0800eb9e
 800bbb8:	0800ebaf 	.word	0x0800ebaf

0800bbbc <iprintf>:
 800bbbc:	b40f      	push	{r0, r1, r2, r3}
 800bbbe:	4b0b      	ldr	r3, [pc, #44]	; (800bbec <iprintf+0x30>)
 800bbc0:	b513      	push	{r0, r1, r4, lr}
 800bbc2:	681c      	ldr	r4, [r3, #0]
 800bbc4:	2c00      	cmp	r4, #0
 800bbc6:	d005      	beq.n	800bbd4 <iprintf+0x18>
 800bbc8:	69a3      	ldr	r3, [r4, #24]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d102      	bne.n	800bbd4 <iprintf+0x18>
 800bbce:	0020      	movs	r0, r4
 800bbd0:	f001 f944 	bl	800ce5c <__sinit>
 800bbd4:	ab05      	add	r3, sp, #20
 800bbd6:	0020      	movs	r0, r4
 800bbd8:	9a04      	ldr	r2, [sp, #16]
 800bbda:	68a1      	ldr	r1, [r4, #8]
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	f001 fee3 	bl	800d9a8 <_vfiprintf_r>
 800bbe2:	bc16      	pop	{r1, r2, r4}
 800bbe4:	bc08      	pop	{r3}
 800bbe6:	b004      	add	sp, #16
 800bbe8:	4718      	bx	r3
 800bbea:	46c0      	nop			; (mov r8, r8)
 800bbec:	20000030 	.word	0x20000030

0800bbf0 <putchar>:
 800bbf0:	4b08      	ldr	r3, [pc, #32]	; (800bc14 <putchar+0x24>)
 800bbf2:	b570      	push	{r4, r5, r6, lr}
 800bbf4:	681c      	ldr	r4, [r3, #0]
 800bbf6:	0005      	movs	r5, r0
 800bbf8:	2c00      	cmp	r4, #0
 800bbfa:	d005      	beq.n	800bc08 <putchar+0x18>
 800bbfc:	69a3      	ldr	r3, [r4, #24]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d102      	bne.n	800bc08 <putchar+0x18>
 800bc02:	0020      	movs	r0, r4
 800bc04:	f001 f92a 	bl	800ce5c <__sinit>
 800bc08:	0029      	movs	r1, r5
 800bc0a:	0020      	movs	r0, r4
 800bc0c:	68a2      	ldr	r2, [r4, #8]
 800bc0e:	f002 f805 	bl	800dc1c <_putc_r>
 800bc12:	bd70      	pop	{r4, r5, r6, pc}
 800bc14:	20000030 	.word	0x20000030

0800bc18 <_puts_r>:
 800bc18:	b570      	push	{r4, r5, r6, lr}
 800bc1a:	0005      	movs	r5, r0
 800bc1c:	000e      	movs	r6, r1
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d004      	beq.n	800bc2c <_puts_r+0x14>
 800bc22:	6983      	ldr	r3, [r0, #24]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <_puts_r+0x14>
 800bc28:	f001 f918 	bl	800ce5c <__sinit>
 800bc2c:	69ab      	ldr	r3, [r5, #24]
 800bc2e:	68ac      	ldr	r4, [r5, #8]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d102      	bne.n	800bc3a <_puts_r+0x22>
 800bc34:	0028      	movs	r0, r5
 800bc36:	f001 f911 	bl	800ce5c <__sinit>
 800bc3a:	4b2d      	ldr	r3, [pc, #180]	; (800bcf0 <_puts_r+0xd8>)
 800bc3c:	429c      	cmp	r4, r3
 800bc3e:	d122      	bne.n	800bc86 <_puts_r+0x6e>
 800bc40:	686c      	ldr	r4, [r5, #4]
 800bc42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc44:	07db      	lsls	r3, r3, #31
 800bc46:	d405      	bmi.n	800bc54 <_puts_r+0x3c>
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	059b      	lsls	r3, r3, #22
 800bc4c:	d402      	bmi.n	800bc54 <_puts_r+0x3c>
 800bc4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc50:	f001 f9a9 	bl	800cfa6 <__retarget_lock_acquire_recursive>
 800bc54:	89a3      	ldrh	r3, [r4, #12]
 800bc56:	071b      	lsls	r3, r3, #28
 800bc58:	d502      	bpl.n	800bc60 <_puts_r+0x48>
 800bc5a:	6923      	ldr	r3, [r4, #16]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d129      	bne.n	800bcb4 <_puts_r+0x9c>
 800bc60:	0021      	movs	r1, r4
 800bc62:	0028      	movs	r0, r5
 800bc64:	f000 f8aa 	bl	800bdbc <__swsetup_r>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d023      	beq.n	800bcb4 <_puts_r+0x9c>
 800bc6c:	2501      	movs	r5, #1
 800bc6e:	426d      	negs	r5, r5
 800bc70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc72:	07db      	lsls	r3, r3, #31
 800bc74:	d405      	bmi.n	800bc82 <_puts_r+0x6a>
 800bc76:	89a3      	ldrh	r3, [r4, #12]
 800bc78:	059b      	lsls	r3, r3, #22
 800bc7a:	d402      	bmi.n	800bc82 <_puts_r+0x6a>
 800bc7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc7e:	f001 f993 	bl	800cfa8 <__retarget_lock_release_recursive>
 800bc82:	0028      	movs	r0, r5
 800bc84:	bd70      	pop	{r4, r5, r6, pc}
 800bc86:	4b1b      	ldr	r3, [pc, #108]	; (800bcf4 <_puts_r+0xdc>)
 800bc88:	429c      	cmp	r4, r3
 800bc8a:	d101      	bne.n	800bc90 <_puts_r+0x78>
 800bc8c:	68ac      	ldr	r4, [r5, #8]
 800bc8e:	e7d8      	b.n	800bc42 <_puts_r+0x2a>
 800bc90:	4b19      	ldr	r3, [pc, #100]	; (800bcf8 <_puts_r+0xe0>)
 800bc92:	429c      	cmp	r4, r3
 800bc94:	d1d5      	bne.n	800bc42 <_puts_r+0x2a>
 800bc96:	68ec      	ldr	r4, [r5, #12]
 800bc98:	e7d3      	b.n	800bc42 <_puts_r+0x2a>
 800bc9a:	3601      	adds	r6, #1
 800bc9c:	60a3      	str	r3, [r4, #8]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	da04      	bge.n	800bcac <_puts_r+0x94>
 800bca2:	69a2      	ldr	r2, [r4, #24]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	dc16      	bgt.n	800bcd6 <_puts_r+0xbe>
 800bca8:	290a      	cmp	r1, #10
 800bcaa:	d014      	beq.n	800bcd6 <_puts_r+0xbe>
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	1c5a      	adds	r2, r3, #1
 800bcb0:	6022      	str	r2, [r4, #0]
 800bcb2:	7019      	strb	r1, [r3, #0]
 800bcb4:	68a3      	ldr	r3, [r4, #8]
 800bcb6:	7831      	ldrb	r1, [r6, #0]
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	2900      	cmp	r1, #0
 800bcbc:	d1ed      	bne.n	800bc9a <_puts_r+0x82>
 800bcbe:	60a3      	str	r3, [r4, #8]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	da0f      	bge.n	800bce4 <_puts_r+0xcc>
 800bcc4:	0028      	movs	r0, r5
 800bcc6:	0022      	movs	r2, r4
 800bcc8:	310a      	adds	r1, #10
 800bcca:	f000 f821 	bl	800bd10 <__swbuf_r>
 800bcce:	250a      	movs	r5, #10
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	d1cd      	bne.n	800bc70 <_puts_r+0x58>
 800bcd4:	e7ca      	b.n	800bc6c <_puts_r+0x54>
 800bcd6:	0022      	movs	r2, r4
 800bcd8:	0028      	movs	r0, r5
 800bcda:	f000 f819 	bl	800bd10 <__swbuf_r>
 800bcde:	1c43      	adds	r3, r0, #1
 800bce0:	d1e8      	bne.n	800bcb4 <_puts_r+0x9c>
 800bce2:	e7c3      	b.n	800bc6c <_puts_r+0x54>
 800bce4:	250a      	movs	r5, #10
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	1c5a      	adds	r2, r3, #1
 800bcea:	6022      	str	r2, [r4, #0]
 800bcec:	701d      	strb	r5, [r3, #0]
 800bcee:	e7bf      	b.n	800bc70 <_puts_r+0x58>
 800bcf0:	0800ec74 	.word	0x0800ec74
 800bcf4:	0800ec94 	.word	0x0800ec94
 800bcf8:	0800ec54 	.word	0x0800ec54

0800bcfc <puts>:
 800bcfc:	b510      	push	{r4, lr}
 800bcfe:	4b03      	ldr	r3, [pc, #12]	; (800bd0c <puts+0x10>)
 800bd00:	0001      	movs	r1, r0
 800bd02:	6818      	ldr	r0, [r3, #0]
 800bd04:	f7ff ff88 	bl	800bc18 <_puts_r>
 800bd08:	bd10      	pop	{r4, pc}
 800bd0a:	46c0      	nop			; (mov r8, r8)
 800bd0c:	20000030 	.word	0x20000030

0800bd10 <__swbuf_r>:
 800bd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd12:	0005      	movs	r5, r0
 800bd14:	000e      	movs	r6, r1
 800bd16:	0014      	movs	r4, r2
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d004      	beq.n	800bd26 <__swbuf_r+0x16>
 800bd1c:	6983      	ldr	r3, [r0, #24]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d101      	bne.n	800bd26 <__swbuf_r+0x16>
 800bd22:	f001 f89b 	bl	800ce5c <__sinit>
 800bd26:	4b22      	ldr	r3, [pc, #136]	; (800bdb0 <__swbuf_r+0xa0>)
 800bd28:	429c      	cmp	r4, r3
 800bd2a:	d12e      	bne.n	800bd8a <__swbuf_r+0x7a>
 800bd2c:	686c      	ldr	r4, [r5, #4]
 800bd2e:	69a3      	ldr	r3, [r4, #24]
 800bd30:	60a3      	str	r3, [r4, #8]
 800bd32:	89a3      	ldrh	r3, [r4, #12]
 800bd34:	071b      	lsls	r3, r3, #28
 800bd36:	d532      	bpl.n	800bd9e <__swbuf_r+0x8e>
 800bd38:	6923      	ldr	r3, [r4, #16]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d02f      	beq.n	800bd9e <__swbuf_r+0x8e>
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	6922      	ldr	r2, [r4, #16]
 800bd42:	b2f7      	uxtb	r7, r6
 800bd44:	1a98      	subs	r0, r3, r2
 800bd46:	6963      	ldr	r3, [r4, #20]
 800bd48:	b2f6      	uxtb	r6, r6
 800bd4a:	4283      	cmp	r3, r0
 800bd4c:	dc05      	bgt.n	800bd5a <__swbuf_r+0x4a>
 800bd4e:	0021      	movs	r1, r4
 800bd50:	0028      	movs	r0, r5
 800bd52:	f000 ffe1 	bl	800cd18 <_fflush_r>
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d127      	bne.n	800bdaa <__swbuf_r+0x9a>
 800bd5a:	68a3      	ldr	r3, [r4, #8]
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	60a3      	str	r3, [r4, #8]
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	1c5a      	adds	r2, r3, #1
 800bd66:	6022      	str	r2, [r4, #0]
 800bd68:	701f      	strb	r7, [r3, #0]
 800bd6a:	6963      	ldr	r3, [r4, #20]
 800bd6c:	4283      	cmp	r3, r0
 800bd6e:	d004      	beq.n	800bd7a <__swbuf_r+0x6a>
 800bd70:	89a3      	ldrh	r3, [r4, #12]
 800bd72:	07db      	lsls	r3, r3, #31
 800bd74:	d507      	bpl.n	800bd86 <__swbuf_r+0x76>
 800bd76:	2e0a      	cmp	r6, #10
 800bd78:	d105      	bne.n	800bd86 <__swbuf_r+0x76>
 800bd7a:	0021      	movs	r1, r4
 800bd7c:	0028      	movs	r0, r5
 800bd7e:	f000 ffcb 	bl	800cd18 <_fflush_r>
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d111      	bne.n	800bdaa <__swbuf_r+0x9a>
 800bd86:	0030      	movs	r0, r6
 800bd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd8a:	4b0a      	ldr	r3, [pc, #40]	; (800bdb4 <__swbuf_r+0xa4>)
 800bd8c:	429c      	cmp	r4, r3
 800bd8e:	d101      	bne.n	800bd94 <__swbuf_r+0x84>
 800bd90:	68ac      	ldr	r4, [r5, #8]
 800bd92:	e7cc      	b.n	800bd2e <__swbuf_r+0x1e>
 800bd94:	4b08      	ldr	r3, [pc, #32]	; (800bdb8 <__swbuf_r+0xa8>)
 800bd96:	429c      	cmp	r4, r3
 800bd98:	d1c9      	bne.n	800bd2e <__swbuf_r+0x1e>
 800bd9a:	68ec      	ldr	r4, [r5, #12]
 800bd9c:	e7c7      	b.n	800bd2e <__swbuf_r+0x1e>
 800bd9e:	0021      	movs	r1, r4
 800bda0:	0028      	movs	r0, r5
 800bda2:	f000 f80b 	bl	800bdbc <__swsetup_r>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d0c9      	beq.n	800bd3e <__swbuf_r+0x2e>
 800bdaa:	2601      	movs	r6, #1
 800bdac:	4276      	negs	r6, r6
 800bdae:	e7ea      	b.n	800bd86 <__swbuf_r+0x76>
 800bdb0:	0800ec74 	.word	0x0800ec74
 800bdb4:	0800ec94 	.word	0x0800ec94
 800bdb8:	0800ec54 	.word	0x0800ec54

0800bdbc <__swsetup_r>:
 800bdbc:	4b37      	ldr	r3, [pc, #220]	; (800be9c <__swsetup_r+0xe0>)
 800bdbe:	b570      	push	{r4, r5, r6, lr}
 800bdc0:	681d      	ldr	r5, [r3, #0]
 800bdc2:	0006      	movs	r6, r0
 800bdc4:	000c      	movs	r4, r1
 800bdc6:	2d00      	cmp	r5, #0
 800bdc8:	d005      	beq.n	800bdd6 <__swsetup_r+0x1a>
 800bdca:	69ab      	ldr	r3, [r5, #24]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d102      	bne.n	800bdd6 <__swsetup_r+0x1a>
 800bdd0:	0028      	movs	r0, r5
 800bdd2:	f001 f843 	bl	800ce5c <__sinit>
 800bdd6:	4b32      	ldr	r3, [pc, #200]	; (800bea0 <__swsetup_r+0xe4>)
 800bdd8:	429c      	cmp	r4, r3
 800bdda:	d10f      	bne.n	800bdfc <__swsetup_r+0x40>
 800bddc:	686c      	ldr	r4, [r5, #4]
 800bdde:	230c      	movs	r3, #12
 800bde0:	5ee2      	ldrsh	r2, [r4, r3]
 800bde2:	b293      	uxth	r3, r2
 800bde4:	0711      	lsls	r1, r2, #28
 800bde6:	d42d      	bmi.n	800be44 <__swsetup_r+0x88>
 800bde8:	06d9      	lsls	r1, r3, #27
 800bdea:	d411      	bmi.n	800be10 <__swsetup_r+0x54>
 800bdec:	2309      	movs	r3, #9
 800bdee:	2001      	movs	r0, #1
 800bdf0:	6033      	str	r3, [r6, #0]
 800bdf2:	3337      	adds	r3, #55	; 0x37
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	81a3      	strh	r3, [r4, #12]
 800bdf8:	4240      	negs	r0, r0
 800bdfa:	bd70      	pop	{r4, r5, r6, pc}
 800bdfc:	4b29      	ldr	r3, [pc, #164]	; (800bea4 <__swsetup_r+0xe8>)
 800bdfe:	429c      	cmp	r4, r3
 800be00:	d101      	bne.n	800be06 <__swsetup_r+0x4a>
 800be02:	68ac      	ldr	r4, [r5, #8]
 800be04:	e7eb      	b.n	800bdde <__swsetup_r+0x22>
 800be06:	4b28      	ldr	r3, [pc, #160]	; (800bea8 <__swsetup_r+0xec>)
 800be08:	429c      	cmp	r4, r3
 800be0a:	d1e8      	bne.n	800bdde <__swsetup_r+0x22>
 800be0c:	68ec      	ldr	r4, [r5, #12]
 800be0e:	e7e6      	b.n	800bdde <__swsetup_r+0x22>
 800be10:	075b      	lsls	r3, r3, #29
 800be12:	d513      	bpl.n	800be3c <__swsetup_r+0x80>
 800be14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be16:	2900      	cmp	r1, #0
 800be18:	d008      	beq.n	800be2c <__swsetup_r+0x70>
 800be1a:	0023      	movs	r3, r4
 800be1c:	3344      	adds	r3, #68	; 0x44
 800be1e:	4299      	cmp	r1, r3
 800be20:	d002      	beq.n	800be28 <__swsetup_r+0x6c>
 800be22:	0030      	movs	r0, r6
 800be24:	f001 fcf0 	bl	800d808 <_free_r>
 800be28:	2300      	movs	r3, #0
 800be2a:	6363      	str	r3, [r4, #52]	; 0x34
 800be2c:	2224      	movs	r2, #36	; 0x24
 800be2e:	89a3      	ldrh	r3, [r4, #12]
 800be30:	4393      	bics	r3, r2
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	2300      	movs	r3, #0
 800be36:	6063      	str	r3, [r4, #4]
 800be38:	6923      	ldr	r3, [r4, #16]
 800be3a:	6023      	str	r3, [r4, #0]
 800be3c:	2308      	movs	r3, #8
 800be3e:	89a2      	ldrh	r2, [r4, #12]
 800be40:	4313      	orrs	r3, r2
 800be42:	81a3      	strh	r3, [r4, #12]
 800be44:	6923      	ldr	r3, [r4, #16]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d10b      	bne.n	800be62 <__swsetup_r+0xa6>
 800be4a:	21a0      	movs	r1, #160	; 0xa0
 800be4c:	2280      	movs	r2, #128	; 0x80
 800be4e:	89a3      	ldrh	r3, [r4, #12]
 800be50:	0089      	lsls	r1, r1, #2
 800be52:	0092      	lsls	r2, r2, #2
 800be54:	400b      	ands	r3, r1
 800be56:	4293      	cmp	r3, r2
 800be58:	d003      	beq.n	800be62 <__swsetup_r+0xa6>
 800be5a:	0021      	movs	r1, r4
 800be5c:	0030      	movs	r0, r6
 800be5e:	f001 f8cd 	bl	800cffc <__smakebuf_r>
 800be62:	220c      	movs	r2, #12
 800be64:	5ea3      	ldrsh	r3, [r4, r2]
 800be66:	2001      	movs	r0, #1
 800be68:	001a      	movs	r2, r3
 800be6a:	b299      	uxth	r1, r3
 800be6c:	4002      	ands	r2, r0
 800be6e:	4203      	tst	r3, r0
 800be70:	d00f      	beq.n	800be92 <__swsetup_r+0xd6>
 800be72:	2200      	movs	r2, #0
 800be74:	60a2      	str	r2, [r4, #8]
 800be76:	6962      	ldr	r2, [r4, #20]
 800be78:	4252      	negs	r2, r2
 800be7a:	61a2      	str	r2, [r4, #24]
 800be7c:	2000      	movs	r0, #0
 800be7e:	6922      	ldr	r2, [r4, #16]
 800be80:	4282      	cmp	r2, r0
 800be82:	d1ba      	bne.n	800bdfa <__swsetup_r+0x3e>
 800be84:	060a      	lsls	r2, r1, #24
 800be86:	d5b8      	bpl.n	800bdfa <__swsetup_r+0x3e>
 800be88:	2240      	movs	r2, #64	; 0x40
 800be8a:	4313      	orrs	r3, r2
 800be8c:	81a3      	strh	r3, [r4, #12]
 800be8e:	3801      	subs	r0, #1
 800be90:	e7b3      	b.n	800bdfa <__swsetup_r+0x3e>
 800be92:	0788      	lsls	r0, r1, #30
 800be94:	d400      	bmi.n	800be98 <__swsetup_r+0xdc>
 800be96:	6962      	ldr	r2, [r4, #20]
 800be98:	60a2      	str	r2, [r4, #8]
 800be9a:	e7ef      	b.n	800be7c <__swsetup_r+0xc0>
 800be9c:	20000030 	.word	0x20000030
 800bea0:	0800ec74 	.word	0x0800ec74
 800bea4:	0800ec94 	.word	0x0800ec94
 800bea8:	0800ec54 	.word	0x0800ec54

0800beac <quorem>:
 800beac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beae:	0006      	movs	r6, r0
 800beb0:	690d      	ldr	r5, [r1, #16]
 800beb2:	6933      	ldr	r3, [r6, #16]
 800beb4:	b087      	sub	sp, #28
 800beb6:	2000      	movs	r0, #0
 800beb8:	9102      	str	r1, [sp, #8]
 800beba:	42ab      	cmp	r3, r5
 800bebc:	db6b      	blt.n	800bf96 <quorem+0xea>
 800bebe:	000b      	movs	r3, r1
 800bec0:	3d01      	subs	r5, #1
 800bec2:	00ac      	lsls	r4, r5, #2
 800bec4:	3314      	adds	r3, #20
 800bec6:	9305      	str	r3, [sp, #20]
 800bec8:	191b      	adds	r3, r3, r4
 800beca:	9303      	str	r3, [sp, #12]
 800becc:	0033      	movs	r3, r6
 800bece:	3314      	adds	r3, #20
 800bed0:	9301      	str	r3, [sp, #4]
 800bed2:	191c      	adds	r4, r3, r4
 800bed4:	9b03      	ldr	r3, [sp, #12]
 800bed6:	6827      	ldr	r7, [r4, #0]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	0038      	movs	r0, r7
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	3301      	adds	r3, #1
 800bee0:	0019      	movs	r1, r3
 800bee2:	9304      	str	r3, [sp, #16]
 800bee4:	f7f4 f92c 	bl	8000140 <__udivsi3>
 800bee8:	9b04      	ldr	r3, [sp, #16]
 800beea:	9000      	str	r0, [sp, #0]
 800beec:	429f      	cmp	r7, r3
 800beee:	d329      	bcc.n	800bf44 <quorem+0x98>
 800bef0:	2300      	movs	r3, #0
 800bef2:	469c      	mov	ip, r3
 800bef4:	9801      	ldr	r0, [sp, #4]
 800bef6:	9f05      	ldr	r7, [sp, #20]
 800bef8:	9304      	str	r3, [sp, #16]
 800befa:	cf08      	ldmia	r7!, {r3}
 800befc:	9a00      	ldr	r2, [sp, #0]
 800befe:	b299      	uxth	r1, r3
 800bf00:	4351      	muls	r1, r2
 800bf02:	0c1b      	lsrs	r3, r3, #16
 800bf04:	4353      	muls	r3, r2
 800bf06:	4461      	add	r1, ip
 800bf08:	0c0a      	lsrs	r2, r1, #16
 800bf0a:	189b      	adds	r3, r3, r2
 800bf0c:	0c1a      	lsrs	r2, r3, #16
 800bf0e:	9305      	str	r3, [sp, #20]
 800bf10:	6803      	ldr	r3, [r0, #0]
 800bf12:	4694      	mov	ip, r2
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	9b04      	ldr	r3, [sp, #16]
 800bf18:	b289      	uxth	r1, r1
 800bf1a:	18d2      	adds	r2, r2, r3
 800bf1c:	6803      	ldr	r3, [r0, #0]
 800bf1e:	1a52      	subs	r2, r2, r1
 800bf20:	0c19      	lsrs	r1, r3, #16
 800bf22:	466b      	mov	r3, sp
 800bf24:	8a9b      	ldrh	r3, [r3, #20]
 800bf26:	1acb      	subs	r3, r1, r3
 800bf28:	1411      	asrs	r1, r2, #16
 800bf2a:	185b      	adds	r3, r3, r1
 800bf2c:	1419      	asrs	r1, r3, #16
 800bf2e:	b292      	uxth	r2, r2
 800bf30:	041b      	lsls	r3, r3, #16
 800bf32:	431a      	orrs	r2, r3
 800bf34:	9b03      	ldr	r3, [sp, #12]
 800bf36:	9104      	str	r1, [sp, #16]
 800bf38:	c004      	stmia	r0!, {r2}
 800bf3a:	42bb      	cmp	r3, r7
 800bf3c:	d2dd      	bcs.n	800befa <quorem+0x4e>
 800bf3e:	6823      	ldr	r3, [r4, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d02e      	beq.n	800bfa2 <quorem+0xf6>
 800bf44:	0030      	movs	r0, r6
 800bf46:	9902      	ldr	r1, [sp, #8]
 800bf48:	f001 fb38 	bl	800d5bc <__mcmp>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	db21      	blt.n	800bf94 <quorem+0xe8>
 800bf50:	0030      	movs	r0, r6
 800bf52:	2400      	movs	r4, #0
 800bf54:	9b00      	ldr	r3, [sp, #0]
 800bf56:	9902      	ldr	r1, [sp, #8]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	3014      	adds	r0, #20
 800bf5e:	3114      	adds	r1, #20
 800bf60:	6802      	ldr	r2, [r0, #0]
 800bf62:	c908      	ldmia	r1!, {r3}
 800bf64:	b292      	uxth	r2, r2
 800bf66:	1914      	adds	r4, r2, r4
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	1aa2      	subs	r2, r4, r2
 800bf6c:	6804      	ldr	r4, [r0, #0]
 800bf6e:	0c1b      	lsrs	r3, r3, #16
 800bf70:	0c24      	lsrs	r4, r4, #16
 800bf72:	1ae3      	subs	r3, r4, r3
 800bf74:	1414      	asrs	r4, r2, #16
 800bf76:	191b      	adds	r3, r3, r4
 800bf78:	141c      	asrs	r4, r3, #16
 800bf7a:	b292      	uxth	r2, r2
 800bf7c:	041b      	lsls	r3, r3, #16
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	c008      	stmia	r0!, {r3}
 800bf82:	9b03      	ldr	r3, [sp, #12]
 800bf84:	428b      	cmp	r3, r1
 800bf86:	d2eb      	bcs.n	800bf60 <quorem+0xb4>
 800bf88:	9a01      	ldr	r2, [sp, #4]
 800bf8a:	00ab      	lsls	r3, r5, #2
 800bf8c:	18d3      	adds	r3, r2, r3
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	2a00      	cmp	r2, #0
 800bf92:	d010      	beq.n	800bfb6 <quorem+0x10a>
 800bf94:	9800      	ldr	r0, [sp, #0]
 800bf96:	b007      	add	sp, #28
 800bf98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d104      	bne.n	800bfaa <quorem+0xfe>
 800bfa0:	3d01      	subs	r5, #1
 800bfa2:	9b01      	ldr	r3, [sp, #4]
 800bfa4:	3c04      	subs	r4, #4
 800bfa6:	42a3      	cmp	r3, r4
 800bfa8:	d3f7      	bcc.n	800bf9a <quorem+0xee>
 800bfaa:	6135      	str	r5, [r6, #16]
 800bfac:	e7ca      	b.n	800bf44 <quorem+0x98>
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	2a00      	cmp	r2, #0
 800bfb2:	d104      	bne.n	800bfbe <quorem+0x112>
 800bfb4:	3d01      	subs	r5, #1
 800bfb6:	9a01      	ldr	r2, [sp, #4]
 800bfb8:	3b04      	subs	r3, #4
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d3f7      	bcc.n	800bfae <quorem+0x102>
 800bfbe:	6135      	str	r5, [r6, #16]
 800bfc0:	e7e8      	b.n	800bf94 <quorem+0xe8>
	...

0800bfc4 <_dtoa_r>:
 800bfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfc6:	b09d      	sub	sp, #116	; 0x74
 800bfc8:	9202      	str	r2, [sp, #8]
 800bfca:	9303      	str	r3, [sp, #12]
 800bfcc:	9b02      	ldr	r3, [sp, #8]
 800bfce:	9c03      	ldr	r4, [sp, #12]
 800bfd0:	930a      	str	r3, [sp, #40]	; 0x28
 800bfd2:	940b      	str	r4, [sp, #44]	; 0x2c
 800bfd4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bfd6:	0007      	movs	r7, r0
 800bfd8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800bfda:	2c00      	cmp	r4, #0
 800bfdc:	d10e      	bne.n	800bffc <_dtoa_r+0x38>
 800bfde:	2010      	movs	r0, #16
 800bfe0:	f001 f850 	bl	800d084 <malloc>
 800bfe4:	1e02      	subs	r2, r0, #0
 800bfe6:	6278      	str	r0, [r7, #36]	; 0x24
 800bfe8:	d104      	bne.n	800bff4 <_dtoa_r+0x30>
 800bfea:	21ea      	movs	r1, #234	; 0xea
 800bfec:	4bc0      	ldr	r3, [pc, #768]	; (800c2f0 <_dtoa_r+0x32c>)
 800bfee:	48c1      	ldr	r0, [pc, #772]	; (800c2f4 <_dtoa_r+0x330>)
 800bff0:	f001 fed0 	bl	800dd94 <__assert_func>
 800bff4:	6044      	str	r4, [r0, #4]
 800bff6:	6084      	str	r4, [r0, #8]
 800bff8:	6004      	str	r4, [r0, #0]
 800bffa:	60c4      	str	r4, [r0, #12]
 800bffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffe:	6819      	ldr	r1, [r3, #0]
 800c000:	2900      	cmp	r1, #0
 800c002:	d00a      	beq.n	800c01a <_dtoa_r+0x56>
 800c004:	685a      	ldr	r2, [r3, #4]
 800c006:	2301      	movs	r3, #1
 800c008:	4093      	lsls	r3, r2
 800c00a:	604a      	str	r2, [r1, #4]
 800c00c:	608b      	str	r3, [r1, #8]
 800c00e:	0038      	movs	r0, r7
 800c010:	f001 f892 	bl	800d138 <_Bfree>
 800c014:	2200      	movs	r2, #0
 800c016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c018:	601a      	str	r2, [r3, #0]
 800c01a:	9b03      	ldr	r3, [sp, #12]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	da21      	bge.n	800c064 <_dtoa_r+0xa0>
 800c020:	2301      	movs	r3, #1
 800c022:	602b      	str	r3, [r5, #0]
 800c024:	9b03      	ldr	r3, [sp, #12]
 800c026:	005b      	lsls	r3, r3, #1
 800c028:	085b      	lsrs	r3, r3, #1
 800c02a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c02c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c02e:	4bb2      	ldr	r3, [pc, #712]	; (800c2f8 <_dtoa_r+0x334>)
 800c030:	002a      	movs	r2, r5
 800c032:	9318      	str	r3, [sp, #96]	; 0x60
 800c034:	401a      	ands	r2, r3
 800c036:	429a      	cmp	r2, r3
 800c038:	d117      	bne.n	800c06a <_dtoa_r+0xa6>
 800c03a:	4bb0      	ldr	r3, [pc, #704]	; (800c2fc <_dtoa_r+0x338>)
 800c03c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c03e:	0328      	lsls	r0, r5, #12
 800c040:	6013      	str	r3, [r2, #0]
 800c042:	9b02      	ldr	r3, [sp, #8]
 800c044:	0b00      	lsrs	r0, r0, #12
 800c046:	4318      	orrs	r0, r3
 800c048:	d101      	bne.n	800c04e <_dtoa_r+0x8a>
 800c04a:	f000 fdc3 	bl	800cbd4 <_dtoa_r+0xc10>
 800c04e:	48ac      	ldr	r0, [pc, #688]	; (800c300 <_dtoa_r+0x33c>)
 800c050:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c052:	9005      	str	r0, [sp, #20]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d002      	beq.n	800c05e <_dtoa_r+0x9a>
 800c058:	4baa      	ldr	r3, [pc, #680]	; (800c304 <_dtoa_r+0x340>)
 800c05a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c05c:	6013      	str	r3, [r2, #0]
 800c05e:	9805      	ldr	r0, [sp, #20]
 800c060:	b01d      	add	sp, #116	; 0x74
 800c062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c064:	2300      	movs	r3, #0
 800c066:	602b      	str	r3, [r5, #0]
 800c068:	e7e0      	b.n	800c02c <_dtoa_r+0x68>
 800c06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c06c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c06e:	9312      	str	r3, [sp, #72]	; 0x48
 800c070:	9413      	str	r4, [sp, #76]	; 0x4c
 800c072:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c074:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c076:	2200      	movs	r2, #0
 800c078:	2300      	movs	r3, #0
 800c07a:	f7f4 f9e7 	bl	800044c <__aeabi_dcmpeq>
 800c07e:	1e04      	subs	r4, r0, #0
 800c080:	d00b      	beq.n	800c09a <_dtoa_r+0xd6>
 800c082:	2301      	movs	r3, #1
 800c084:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c086:	6013      	str	r3, [r2, #0]
 800c088:	4b9f      	ldr	r3, [pc, #636]	; (800c308 <_dtoa_r+0x344>)
 800c08a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c08c:	9305      	str	r3, [sp, #20]
 800c08e:	2a00      	cmp	r2, #0
 800c090:	d0e5      	beq.n	800c05e <_dtoa_r+0x9a>
 800c092:	4a9e      	ldr	r2, [pc, #632]	; (800c30c <_dtoa_r+0x348>)
 800c094:	9926      	ldr	r1, [sp, #152]	; 0x98
 800c096:	600a      	str	r2, [r1, #0]
 800c098:	e7e1      	b.n	800c05e <_dtoa_r+0x9a>
 800c09a:	ab1a      	add	r3, sp, #104	; 0x68
 800c09c:	9301      	str	r3, [sp, #4]
 800c09e:	ab1b      	add	r3, sp, #108	; 0x6c
 800c0a0:	9300      	str	r3, [sp, #0]
 800c0a2:	0038      	movs	r0, r7
 800c0a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c0a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c0a8:	f001 fb3c 	bl	800d724 <__d2b>
 800c0ac:	006e      	lsls	r6, r5, #1
 800c0ae:	9004      	str	r0, [sp, #16]
 800c0b0:	0d76      	lsrs	r6, r6, #21
 800c0b2:	d100      	bne.n	800c0b6 <_dtoa_r+0xf2>
 800c0b4:	e07c      	b.n	800c1b0 <_dtoa_r+0x1ec>
 800c0b6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c0b8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c0ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c0bc:	4a94      	ldr	r2, [pc, #592]	; (800c310 <_dtoa_r+0x34c>)
 800c0be:	031b      	lsls	r3, r3, #12
 800c0c0:	0b1b      	lsrs	r3, r3, #12
 800c0c2:	431a      	orrs	r2, r3
 800c0c4:	0011      	movs	r1, r2
 800c0c6:	4b93      	ldr	r3, [pc, #588]	; (800c314 <_dtoa_r+0x350>)
 800c0c8:	9416      	str	r4, [sp, #88]	; 0x58
 800c0ca:	18f6      	adds	r6, r6, r3
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	4b92      	ldr	r3, [pc, #584]	; (800c318 <_dtoa_r+0x354>)
 800c0d0:	f7f6 fbd0 	bl	8002874 <__aeabi_dsub>
 800c0d4:	4a91      	ldr	r2, [pc, #580]	; (800c31c <_dtoa_r+0x358>)
 800c0d6:	4b92      	ldr	r3, [pc, #584]	; (800c320 <_dtoa_r+0x35c>)
 800c0d8:	f7f6 f960 	bl	800239c <__aeabi_dmul>
 800c0dc:	4a91      	ldr	r2, [pc, #580]	; (800c324 <_dtoa_r+0x360>)
 800c0de:	4b92      	ldr	r3, [pc, #584]	; (800c328 <_dtoa_r+0x364>)
 800c0e0:	f7f5 f9ec 	bl	80014bc <__aeabi_dadd>
 800c0e4:	0004      	movs	r4, r0
 800c0e6:	0030      	movs	r0, r6
 800c0e8:	000d      	movs	r5, r1
 800c0ea:	f7f6 ffa9 	bl	8003040 <__aeabi_i2d>
 800c0ee:	4a8f      	ldr	r2, [pc, #572]	; (800c32c <_dtoa_r+0x368>)
 800c0f0:	4b8f      	ldr	r3, [pc, #572]	; (800c330 <_dtoa_r+0x36c>)
 800c0f2:	f7f6 f953 	bl	800239c <__aeabi_dmul>
 800c0f6:	0002      	movs	r2, r0
 800c0f8:	000b      	movs	r3, r1
 800c0fa:	0020      	movs	r0, r4
 800c0fc:	0029      	movs	r1, r5
 800c0fe:	f7f5 f9dd 	bl	80014bc <__aeabi_dadd>
 800c102:	0004      	movs	r4, r0
 800c104:	000d      	movs	r5, r1
 800c106:	f7f6 ff65 	bl	8002fd4 <__aeabi_d2iz>
 800c10a:	2200      	movs	r2, #0
 800c10c:	9002      	str	r0, [sp, #8]
 800c10e:	2300      	movs	r3, #0
 800c110:	0020      	movs	r0, r4
 800c112:	0029      	movs	r1, r5
 800c114:	f7f4 f9a0 	bl	8000458 <__aeabi_dcmplt>
 800c118:	2800      	cmp	r0, #0
 800c11a:	d00b      	beq.n	800c134 <_dtoa_r+0x170>
 800c11c:	9802      	ldr	r0, [sp, #8]
 800c11e:	f7f6 ff8f 	bl	8003040 <__aeabi_i2d>
 800c122:	002b      	movs	r3, r5
 800c124:	0022      	movs	r2, r4
 800c126:	f7f4 f991 	bl	800044c <__aeabi_dcmpeq>
 800c12a:	4243      	negs	r3, r0
 800c12c:	4158      	adcs	r0, r3
 800c12e:	9b02      	ldr	r3, [sp, #8]
 800c130:	1a1b      	subs	r3, r3, r0
 800c132:	9302      	str	r3, [sp, #8]
 800c134:	2301      	movs	r3, #1
 800c136:	9315      	str	r3, [sp, #84]	; 0x54
 800c138:	9b02      	ldr	r3, [sp, #8]
 800c13a:	2b16      	cmp	r3, #22
 800c13c:	d80f      	bhi.n	800c15e <_dtoa_r+0x19a>
 800c13e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c140:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c142:	00da      	lsls	r2, r3, #3
 800c144:	4b7b      	ldr	r3, [pc, #492]	; (800c334 <_dtoa_r+0x370>)
 800c146:	189b      	adds	r3, r3, r2
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	f7f4 f984 	bl	8000458 <__aeabi_dcmplt>
 800c150:	2800      	cmp	r0, #0
 800c152:	d049      	beq.n	800c1e8 <_dtoa_r+0x224>
 800c154:	9b02      	ldr	r3, [sp, #8]
 800c156:	3b01      	subs	r3, #1
 800c158:	9302      	str	r3, [sp, #8]
 800c15a:	2300      	movs	r3, #0
 800c15c:	9315      	str	r3, [sp, #84]	; 0x54
 800c15e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c160:	1b9e      	subs	r6, r3, r6
 800c162:	2300      	movs	r3, #0
 800c164:	9308      	str	r3, [sp, #32]
 800c166:	0033      	movs	r3, r6
 800c168:	3b01      	subs	r3, #1
 800c16a:	930d      	str	r3, [sp, #52]	; 0x34
 800c16c:	d504      	bpl.n	800c178 <_dtoa_r+0x1b4>
 800c16e:	2301      	movs	r3, #1
 800c170:	1b9b      	subs	r3, r3, r6
 800c172:	9308      	str	r3, [sp, #32]
 800c174:	2300      	movs	r3, #0
 800c176:	930d      	str	r3, [sp, #52]	; 0x34
 800c178:	9b02      	ldr	r3, [sp, #8]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	db36      	blt.n	800c1ec <_dtoa_r+0x228>
 800c17e:	9a02      	ldr	r2, [sp, #8]
 800c180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c182:	4694      	mov	ip, r2
 800c184:	4463      	add	r3, ip
 800c186:	930d      	str	r3, [sp, #52]	; 0x34
 800c188:	2300      	movs	r3, #0
 800c18a:	9214      	str	r2, [sp, #80]	; 0x50
 800c18c:	930e      	str	r3, [sp, #56]	; 0x38
 800c18e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c190:	2401      	movs	r4, #1
 800c192:	2b09      	cmp	r3, #9
 800c194:	d862      	bhi.n	800c25c <_dtoa_r+0x298>
 800c196:	2b05      	cmp	r3, #5
 800c198:	dd02      	ble.n	800c1a0 <_dtoa_r+0x1dc>
 800c19a:	2400      	movs	r4, #0
 800c19c:	3b04      	subs	r3, #4
 800c19e:	9322      	str	r3, [sp, #136]	; 0x88
 800c1a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1a2:	1e98      	subs	r0, r3, #2
 800c1a4:	2803      	cmp	r0, #3
 800c1a6:	d862      	bhi.n	800c26e <_dtoa_r+0x2aa>
 800c1a8:	f7f3 ffb6 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c1ac:	56343629 	.word	0x56343629
 800c1b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c1b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c1b4:	189e      	adds	r6, r3, r2
 800c1b6:	4b60      	ldr	r3, [pc, #384]	; (800c338 <_dtoa_r+0x374>)
 800c1b8:	18f2      	adds	r2, r6, r3
 800c1ba:	2a20      	cmp	r2, #32
 800c1bc:	dd0f      	ble.n	800c1de <_dtoa_r+0x21a>
 800c1be:	2340      	movs	r3, #64	; 0x40
 800c1c0:	1a9b      	subs	r3, r3, r2
 800c1c2:	409d      	lsls	r5, r3
 800c1c4:	4b5d      	ldr	r3, [pc, #372]	; (800c33c <_dtoa_r+0x378>)
 800c1c6:	9802      	ldr	r0, [sp, #8]
 800c1c8:	18f3      	adds	r3, r6, r3
 800c1ca:	40d8      	lsrs	r0, r3
 800c1cc:	4328      	orrs	r0, r5
 800c1ce:	f7f6 ff67 	bl	80030a0 <__aeabi_ui2d>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	4c5a      	ldr	r4, [pc, #360]	; (800c340 <_dtoa_r+0x37c>)
 800c1d6:	3e01      	subs	r6, #1
 800c1d8:	1909      	adds	r1, r1, r4
 800c1da:	9316      	str	r3, [sp, #88]	; 0x58
 800c1dc:	e776      	b.n	800c0cc <_dtoa_r+0x108>
 800c1de:	2320      	movs	r3, #32
 800c1e0:	9802      	ldr	r0, [sp, #8]
 800c1e2:	1a9b      	subs	r3, r3, r2
 800c1e4:	4098      	lsls	r0, r3
 800c1e6:	e7f2      	b.n	800c1ce <_dtoa_r+0x20a>
 800c1e8:	9015      	str	r0, [sp, #84]	; 0x54
 800c1ea:	e7b8      	b.n	800c15e <_dtoa_r+0x19a>
 800c1ec:	9b08      	ldr	r3, [sp, #32]
 800c1ee:	9a02      	ldr	r2, [sp, #8]
 800c1f0:	1a9b      	subs	r3, r3, r2
 800c1f2:	9308      	str	r3, [sp, #32]
 800c1f4:	4253      	negs	r3, r2
 800c1f6:	930e      	str	r3, [sp, #56]	; 0x38
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	9314      	str	r3, [sp, #80]	; 0x50
 800c1fc:	e7c7      	b.n	800c18e <_dtoa_r+0x1ca>
 800c1fe:	2300      	movs	r3, #0
 800c200:	930f      	str	r3, [sp, #60]	; 0x3c
 800c202:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c204:	2b00      	cmp	r3, #0
 800c206:	dc36      	bgt.n	800c276 <_dtoa_r+0x2b2>
 800c208:	2301      	movs	r3, #1
 800c20a:	001a      	movs	r2, r3
 800c20c:	930c      	str	r3, [sp, #48]	; 0x30
 800c20e:	9306      	str	r3, [sp, #24]
 800c210:	9223      	str	r2, [sp, #140]	; 0x8c
 800c212:	e00d      	b.n	800c230 <_dtoa_r+0x26c>
 800c214:	2301      	movs	r3, #1
 800c216:	e7f3      	b.n	800c200 <_dtoa_r+0x23c>
 800c218:	2300      	movs	r3, #0
 800c21a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c21c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c21e:	4694      	mov	ip, r2
 800c220:	9b02      	ldr	r3, [sp, #8]
 800c222:	4463      	add	r3, ip
 800c224:	930c      	str	r3, [sp, #48]	; 0x30
 800c226:	3301      	adds	r3, #1
 800c228:	9306      	str	r3, [sp, #24]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	dc00      	bgt.n	800c230 <_dtoa_r+0x26c>
 800c22e:	2301      	movs	r3, #1
 800c230:	2200      	movs	r2, #0
 800c232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c234:	6042      	str	r2, [r0, #4]
 800c236:	3204      	adds	r2, #4
 800c238:	0015      	movs	r5, r2
 800c23a:	3514      	adds	r5, #20
 800c23c:	6841      	ldr	r1, [r0, #4]
 800c23e:	429d      	cmp	r5, r3
 800c240:	d91d      	bls.n	800c27e <_dtoa_r+0x2ba>
 800c242:	0038      	movs	r0, r7
 800c244:	f000 ff34 	bl	800d0b0 <_Balloc>
 800c248:	9005      	str	r0, [sp, #20]
 800c24a:	2800      	cmp	r0, #0
 800c24c:	d11b      	bne.n	800c286 <_dtoa_r+0x2c2>
 800c24e:	21d5      	movs	r1, #213	; 0xd5
 800c250:	0002      	movs	r2, r0
 800c252:	4b3c      	ldr	r3, [pc, #240]	; (800c344 <_dtoa_r+0x380>)
 800c254:	0049      	lsls	r1, r1, #1
 800c256:	e6ca      	b.n	800bfee <_dtoa_r+0x2a>
 800c258:	2301      	movs	r3, #1
 800c25a:	e7de      	b.n	800c21a <_dtoa_r+0x256>
 800c25c:	2300      	movs	r3, #0
 800c25e:	940f      	str	r4, [sp, #60]	; 0x3c
 800c260:	9322      	str	r3, [sp, #136]	; 0x88
 800c262:	3b01      	subs	r3, #1
 800c264:	930c      	str	r3, [sp, #48]	; 0x30
 800c266:	9306      	str	r3, [sp, #24]
 800c268:	2200      	movs	r2, #0
 800c26a:	3313      	adds	r3, #19
 800c26c:	e7d0      	b.n	800c210 <_dtoa_r+0x24c>
 800c26e:	2301      	movs	r3, #1
 800c270:	930f      	str	r3, [sp, #60]	; 0x3c
 800c272:	3b02      	subs	r3, #2
 800c274:	e7f6      	b.n	800c264 <_dtoa_r+0x2a0>
 800c276:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c278:	930c      	str	r3, [sp, #48]	; 0x30
 800c27a:	9306      	str	r3, [sp, #24]
 800c27c:	e7d8      	b.n	800c230 <_dtoa_r+0x26c>
 800c27e:	3101      	adds	r1, #1
 800c280:	6041      	str	r1, [r0, #4]
 800c282:	0052      	lsls	r2, r2, #1
 800c284:	e7d8      	b.n	800c238 <_dtoa_r+0x274>
 800c286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c288:	9a05      	ldr	r2, [sp, #20]
 800c28a:	601a      	str	r2, [r3, #0]
 800c28c:	9b06      	ldr	r3, [sp, #24]
 800c28e:	2b0e      	cmp	r3, #14
 800c290:	d900      	bls.n	800c294 <_dtoa_r+0x2d0>
 800c292:	e0eb      	b.n	800c46c <_dtoa_r+0x4a8>
 800c294:	2c00      	cmp	r4, #0
 800c296:	d100      	bne.n	800c29a <_dtoa_r+0x2d6>
 800c298:	e0e8      	b.n	800c46c <_dtoa_r+0x4a8>
 800c29a:	9b02      	ldr	r3, [sp, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	dd68      	ble.n	800c372 <_dtoa_r+0x3ae>
 800c2a0:	001a      	movs	r2, r3
 800c2a2:	210f      	movs	r1, #15
 800c2a4:	4b23      	ldr	r3, [pc, #140]	; (800c334 <_dtoa_r+0x370>)
 800c2a6:	400a      	ands	r2, r1
 800c2a8:	00d2      	lsls	r2, r2, #3
 800c2aa:	189b      	adds	r3, r3, r2
 800c2ac:	681d      	ldr	r5, [r3, #0]
 800c2ae:	685e      	ldr	r6, [r3, #4]
 800c2b0:	9b02      	ldr	r3, [sp, #8]
 800c2b2:	111c      	asrs	r4, r3, #4
 800c2b4:	2302      	movs	r3, #2
 800c2b6:	9310      	str	r3, [sp, #64]	; 0x40
 800c2b8:	9b02      	ldr	r3, [sp, #8]
 800c2ba:	05db      	lsls	r3, r3, #23
 800c2bc:	d50b      	bpl.n	800c2d6 <_dtoa_r+0x312>
 800c2be:	4b22      	ldr	r3, [pc, #136]	; (800c348 <_dtoa_r+0x384>)
 800c2c0:	400c      	ands	r4, r1
 800c2c2:	6a1a      	ldr	r2, [r3, #32]
 800c2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c2c8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c2ca:	f7f5 fc61 	bl	8001b90 <__aeabi_ddiv>
 800c2ce:	2303      	movs	r3, #3
 800c2d0:	900a      	str	r0, [sp, #40]	; 0x28
 800c2d2:	910b      	str	r1, [sp, #44]	; 0x2c
 800c2d4:	9310      	str	r3, [sp, #64]	; 0x40
 800c2d6:	4b1c      	ldr	r3, [pc, #112]	; (800c348 <_dtoa_r+0x384>)
 800c2d8:	9307      	str	r3, [sp, #28]
 800c2da:	2c00      	cmp	r4, #0
 800c2dc:	d136      	bne.n	800c34c <_dtoa_r+0x388>
 800c2de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c2e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c2e2:	002a      	movs	r2, r5
 800c2e4:	0033      	movs	r3, r6
 800c2e6:	f7f5 fc53 	bl	8001b90 <__aeabi_ddiv>
 800c2ea:	900a      	str	r0, [sp, #40]	; 0x28
 800c2ec:	910b      	str	r1, [sp, #44]	; 0x2c
 800c2ee:	e05c      	b.n	800c3aa <_dtoa_r+0x3e6>
 800c2f0:	0800ebcd 	.word	0x0800ebcd
 800c2f4:	0800ebe4 	.word	0x0800ebe4
 800c2f8:	7ff00000 	.word	0x7ff00000
 800c2fc:	0000270f 	.word	0x0000270f
 800c300:	0800ebc9 	.word	0x0800ebc9
 800c304:	0800ebcc 	.word	0x0800ebcc
 800c308:	0800eb9c 	.word	0x0800eb9c
 800c30c:	0800eb9d 	.word	0x0800eb9d
 800c310:	3ff00000 	.word	0x3ff00000
 800c314:	fffffc01 	.word	0xfffffc01
 800c318:	3ff80000 	.word	0x3ff80000
 800c31c:	636f4361 	.word	0x636f4361
 800c320:	3fd287a7 	.word	0x3fd287a7
 800c324:	8b60c8b3 	.word	0x8b60c8b3
 800c328:	3fc68a28 	.word	0x3fc68a28
 800c32c:	509f79fb 	.word	0x509f79fb
 800c330:	3fd34413 	.word	0x3fd34413
 800c334:	0800ed40 	.word	0x0800ed40
 800c338:	00000432 	.word	0x00000432
 800c33c:	00000412 	.word	0x00000412
 800c340:	fe100000 	.word	0xfe100000
 800c344:	0800ec43 	.word	0x0800ec43
 800c348:	0800ed18 	.word	0x0800ed18
 800c34c:	2301      	movs	r3, #1
 800c34e:	421c      	tst	r4, r3
 800c350:	d00b      	beq.n	800c36a <_dtoa_r+0x3a6>
 800c352:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c354:	0028      	movs	r0, r5
 800c356:	3301      	adds	r3, #1
 800c358:	9310      	str	r3, [sp, #64]	; 0x40
 800c35a:	9b07      	ldr	r3, [sp, #28]
 800c35c:	0031      	movs	r1, r6
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	f7f6 f81b 	bl	800239c <__aeabi_dmul>
 800c366:	0005      	movs	r5, r0
 800c368:	000e      	movs	r6, r1
 800c36a:	9b07      	ldr	r3, [sp, #28]
 800c36c:	1064      	asrs	r4, r4, #1
 800c36e:	3308      	adds	r3, #8
 800c370:	e7b2      	b.n	800c2d8 <_dtoa_r+0x314>
 800c372:	2302      	movs	r3, #2
 800c374:	9310      	str	r3, [sp, #64]	; 0x40
 800c376:	9b02      	ldr	r3, [sp, #8]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d016      	beq.n	800c3aa <_dtoa_r+0x3e6>
 800c37c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c37e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c380:	425c      	negs	r4, r3
 800c382:	230f      	movs	r3, #15
 800c384:	4ab5      	ldr	r2, [pc, #724]	; (800c65c <_dtoa_r+0x698>)
 800c386:	4023      	ands	r3, r4
 800c388:	00db      	lsls	r3, r3, #3
 800c38a:	18d3      	adds	r3, r2, r3
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	f7f6 f804 	bl	800239c <__aeabi_dmul>
 800c394:	2601      	movs	r6, #1
 800c396:	2300      	movs	r3, #0
 800c398:	900a      	str	r0, [sp, #40]	; 0x28
 800c39a:	910b      	str	r1, [sp, #44]	; 0x2c
 800c39c:	4db0      	ldr	r5, [pc, #704]	; (800c660 <_dtoa_r+0x69c>)
 800c39e:	1124      	asrs	r4, r4, #4
 800c3a0:	2c00      	cmp	r4, #0
 800c3a2:	d000      	beq.n	800c3a6 <_dtoa_r+0x3e2>
 800c3a4:	e094      	b.n	800c4d0 <_dtoa_r+0x50c>
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d19f      	bne.n	800c2ea <_dtoa_r+0x326>
 800c3aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d100      	bne.n	800c3b2 <_dtoa_r+0x3ee>
 800c3b0:	e09b      	b.n	800c4ea <_dtoa_r+0x526>
 800c3b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c3b4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	0020      	movs	r0, r4
 800c3ba:	0029      	movs	r1, r5
 800c3bc:	4ba9      	ldr	r3, [pc, #676]	; (800c664 <_dtoa_r+0x6a0>)
 800c3be:	f7f4 f84b 	bl	8000458 <__aeabi_dcmplt>
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	d100      	bne.n	800c3c8 <_dtoa_r+0x404>
 800c3c6:	e090      	b.n	800c4ea <_dtoa_r+0x526>
 800c3c8:	9b06      	ldr	r3, [sp, #24]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d100      	bne.n	800c3d0 <_dtoa_r+0x40c>
 800c3ce:	e08c      	b.n	800c4ea <_dtoa_r+0x526>
 800c3d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	dd46      	ble.n	800c464 <_dtoa_r+0x4a0>
 800c3d6:	9b02      	ldr	r3, [sp, #8]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	0020      	movs	r0, r4
 800c3dc:	0029      	movs	r1, r5
 800c3de:	1e5e      	subs	r6, r3, #1
 800c3e0:	4ba1      	ldr	r3, [pc, #644]	; (800c668 <_dtoa_r+0x6a4>)
 800c3e2:	f7f5 ffdb 	bl	800239c <__aeabi_dmul>
 800c3e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3e8:	900a      	str	r0, [sp, #40]	; 0x28
 800c3ea:	910b      	str	r1, [sp, #44]	; 0x2c
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	9310      	str	r3, [sp, #64]	; 0x40
 800c3f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3f2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c3f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c3f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c3f8:	9307      	str	r3, [sp, #28]
 800c3fa:	f7f6 fe21 	bl	8003040 <__aeabi_i2d>
 800c3fe:	0022      	movs	r2, r4
 800c400:	002b      	movs	r3, r5
 800c402:	f7f5 ffcb 	bl	800239c <__aeabi_dmul>
 800c406:	2200      	movs	r2, #0
 800c408:	4b98      	ldr	r3, [pc, #608]	; (800c66c <_dtoa_r+0x6a8>)
 800c40a:	f7f5 f857 	bl	80014bc <__aeabi_dadd>
 800c40e:	9010      	str	r0, [sp, #64]	; 0x40
 800c410:	9111      	str	r1, [sp, #68]	; 0x44
 800c412:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c414:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c416:	920a      	str	r2, [sp, #40]	; 0x28
 800c418:	930b      	str	r3, [sp, #44]	; 0x2c
 800c41a:	4a95      	ldr	r2, [pc, #596]	; (800c670 <_dtoa_r+0x6ac>)
 800c41c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c41e:	4694      	mov	ip, r2
 800c420:	4463      	add	r3, ip
 800c422:	9317      	str	r3, [sp, #92]	; 0x5c
 800c424:	930b      	str	r3, [sp, #44]	; 0x2c
 800c426:	9b07      	ldr	r3, [sp, #28]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d161      	bne.n	800c4f0 <_dtoa_r+0x52c>
 800c42c:	2200      	movs	r2, #0
 800c42e:	0020      	movs	r0, r4
 800c430:	0029      	movs	r1, r5
 800c432:	4b90      	ldr	r3, [pc, #576]	; (800c674 <_dtoa_r+0x6b0>)
 800c434:	f7f6 fa1e 	bl	8002874 <__aeabi_dsub>
 800c438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c43a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c43c:	0004      	movs	r4, r0
 800c43e:	000d      	movs	r5, r1
 800c440:	f7f4 f81e 	bl	8000480 <__aeabi_dcmpgt>
 800c444:	2800      	cmp	r0, #0
 800c446:	d000      	beq.n	800c44a <_dtoa_r+0x486>
 800c448:	e2b5      	b.n	800c9b6 <_dtoa_r+0x9f2>
 800c44a:	488b      	ldr	r0, [pc, #556]	; (800c678 <_dtoa_r+0x6b4>)
 800c44c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c44e:	4684      	mov	ip, r0
 800c450:	4461      	add	r1, ip
 800c452:	000b      	movs	r3, r1
 800c454:	0020      	movs	r0, r4
 800c456:	0029      	movs	r1, r5
 800c458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c45a:	f7f3 fffd 	bl	8000458 <__aeabi_dcmplt>
 800c45e:	2800      	cmp	r0, #0
 800c460:	d000      	beq.n	800c464 <_dtoa_r+0x4a0>
 800c462:	e2a5      	b.n	800c9b0 <_dtoa_r+0x9ec>
 800c464:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c466:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c468:	930a      	str	r3, [sp, #40]	; 0x28
 800c46a:	940b      	str	r4, [sp, #44]	; 0x2c
 800c46c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c46e:	2b00      	cmp	r3, #0
 800c470:	da00      	bge.n	800c474 <_dtoa_r+0x4b0>
 800c472:	e171      	b.n	800c758 <_dtoa_r+0x794>
 800c474:	9a02      	ldr	r2, [sp, #8]
 800c476:	2a0e      	cmp	r2, #14
 800c478:	dd00      	ble.n	800c47c <_dtoa_r+0x4b8>
 800c47a:	e16d      	b.n	800c758 <_dtoa_r+0x794>
 800c47c:	4b77      	ldr	r3, [pc, #476]	; (800c65c <_dtoa_r+0x698>)
 800c47e:	00d2      	lsls	r2, r2, #3
 800c480:	189b      	adds	r3, r3, r2
 800c482:	685c      	ldr	r4, [r3, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	9308      	str	r3, [sp, #32]
 800c488:	9409      	str	r4, [sp, #36]	; 0x24
 800c48a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	db00      	blt.n	800c492 <_dtoa_r+0x4ce>
 800c490:	e0f6      	b.n	800c680 <_dtoa_r+0x6bc>
 800c492:	9b06      	ldr	r3, [sp, #24]
 800c494:	2b00      	cmp	r3, #0
 800c496:	dd00      	ble.n	800c49a <_dtoa_r+0x4d6>
 800c498:	e0f2      	b.n	800c680 <_dtoa_r+0x6bc>
 800c49a:	d000      	beq.n	800c49e <_dtoa_r+0x4da>
 800c49c:	e288      	b.n	800c9b0 <_dtoa_r+0x9ec>
 800c49e:	9808      	ldr	r0, [sp, #32]
 800c4a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	4b73      	ldr	r3, [pc, #460]	; (800c674 <_dtoa_r+0x6b0>)
 800c4a6:	f7f5 ff79 	bl	800239c <__aeabi_dmul>
 800c4aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4ae:	f7f3 fff1 	bl	8000494 <__aeabi_dcmpge>
 800c4b2:	9e06      	ldr	r6, [sp, #24]
 800c4b4:	0035      	movs	r5, r6
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	d000      	beq.n	800c4bc <_dtoa_r+0x4f8>
 800c4ba:	e25f      	b.n	800c97c <_dtoa_r+0x9b8>
 800c4bc:	9b05      	ldr	r3, [sp, #20]
 800c4be:	9a05      	ldr	r2, [sp, #20]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	9307      	str	r3, [sp, #28]
 800c4c4:	2331      	movs	r3, #49	; 0x31
 800c4c6:	7013      	strb	r3, [r2, #0]
 800c4c8:	9b02      	ldr	r3, [sp, #8]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	9302      	str	r3, [sp, #8]
 800c4ce:	e25a      	b.n	800c986 <_dtoa_r+0x9c2>
 800c4d0:	4234      	tst	r4, r6
 800c4d2:	d007      	beq.n	800c4e4 <_dtoa_r+0x520>
 800c4d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	9310      	str	r3, [sp, #64]	; 0x40
 800c4da:	682a      	ldr	r2, [r5, #0]
 800c4dc:	686b      	ldr	r3, [r5, #4]
 800c4de:	f7f5 ff5d 	bl	800239c <__aeabi_dmul>
 800c4e2:	0033      	movs	r3, r6
 800c4e4:	1064      	asrs	r4, r4, #1
 800c4e6:	3508      	adds	r5, #8
 800c4e8:	e75a      	b.n	800c3a0 <_dtoa_r+0x3dc>
 800c4ea:	9e02      	ldr	r6, [sp, #8]
 800c4ec:	9b06      	ldr	r3, [sp, #24]
 800c4ee:	e780      	b.n	800c3f2 <_dtoa_r+0x42e>
 800c4f0:	9b07      	ldr	r3, [sp, #28]
 800c4f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c4f4:	1e5a      	subs	r2, r3, #1
 800c4f6:	4b59      	ldr	r3, [pc, #356]	; (800c65c <_dtoa_r+0x698>)
 800c4f8:	00d2      	lsls	r2, r2, #3
 800c4fa:	189b      	adds	r3, r3, r2
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	2900      	cmp	r1, #0
 800c502:	d051      	beq.n	800c5a8 <_dtoa_r+0x5e4>
 800c504:	2000      	movs	r0, #0
 800c506:	495d      	ldr	r1, [pc, #372]	; (800c67c <_dtoa_r+0x6b8>)
 800c508:	f7f5 fb42 	bl	8001b90 <__aeabi_ddiv>
 800c50c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c50e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c510:	f7f6 f9b0 	bl	8002874 <__aeabi_dsub>
 800c514:	9a05      	ldr	r2, [sp, #20]
 800c516:	9b05      	ldr	r3, [sp, #20]
 800c518:	4694      	mov	ip, r2
 800c51a:	9310      	str	r3, [sp, #64]	; 0x40
 800c51c:	9b07      	ldr	r3, [sp, #28]
 800c51e:	900a      	str	r0, [sp, #40]	; 0x28
 800c520:	910b      	str	r1, [sp, #44]	; 0x2c
 800c522:	4463      	add	r3, ip
 800c524:	9319      	str	r3, [sp, #100]	; 0x64
 800c526:	0029      	movs	r1, r5
 800c528:	0020      	movs	r0, r4
 800c52a:	f7f6 fd53 	bl	8002fd4 <__aeabi_d2iz>
 800c52e:	9017      	str	r0, [sp, #92]	; 0x5c
 800c530:	f7f6 fd86 	bl	8003040 <__aeabi_i2d>
 800c534:	0002      	movs	r2, r0
 800c536:	000b      	movs	r3, r1
 800c538:	0020      	movs	r0, r4
 800c53a:	0029      	movs	r1, r5
 800c53c:	f7f6 f99a 	bl	8002874 <__aeabi_dsub>
 800c540:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c542:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c544:	3301      	adds	r3, #1
 800c546:	9307      	str	r3, [sp, #28]
 800c548:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c54a:	0004      	movs	r4, r0
 800c54c:	3330      	adds	r3, #48	; 0x30
 800c54e:	7013      	strb	r3, [r2, #0]
 800c550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c554:	000d      	movs	r5, r1
 800c556:	f7f3 ff7f 	bl	8000458 <__aeabi_dcmplt>
 800c55a:	2800      	cmp	r0, #0
 800c55c:	d175      	bne.n	800c64a <_dtoa_r+0x686>
 800c55e:	0022      	movs	r2, r4
 800c560:	002b      	movs	r3, r5
 800c562:	2000      	movs	r0, #0
 800c564:	493f      	ldr	r1, [pc, #252]	; (800c664 <_dtoa_r+0x6a0>)
 800c566:	f7f6 f985 	bl	8002874 <__aeabi_dsub>
 800c56a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c56c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c56e:	f7f3 ff73 	bl	8000458 <__aeabi_dcmplt>
 800c572:	2800      	cmp	r0, #0
 800c574:	d000      	beq.n	800c578 <_dtoa_r+0x5b4>
 800c576:	e0d1      	b.n	800c71c <_dtoa_r+0x758>
 800c578:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c57a:	9a07      	ldr	r2, [sp, #28]
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d100      	bne.n	800c582 <_dtoa_r+0x5be>
 800c580:	e770      	b.n	800c464 <_dtoa_r+0x4a0>
 800c582:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c584:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c586:	2200      	movs	r2, #0
 800c588:	4b37      	ldr	r3, [pc, #220]	; (800c668 <_dtoa_r+0x6a4>)
 800c58a:	f7f5 ff07 	bl	800239c <__aeabi_dmul>
 800c58e:	4b36      	ldr	r3, [pc, #216]	; (800c668 <_dtoa_r+0x6a4>)
 800c590:	900a      	str	r0, [sp, #40]	; 0x28
 800c592:	910b      	str	r1, [sp, #44]	; 0x2c
 800c594:	2200      	movs	r2, #0
 800c596:	0020      	movs	r0, r4
 800c598:	0029      	movs	r1, r5
 800c59a:	f7f5 feff 	bl	800239c <__aeabi_dmul>
 800c59e:	9b07      	ldr	r3, [sp, #28]
 800c5a0:	0004      	movs	r4, r0
 800c5a2:	000d      	movs	r5, r1
 800c5a4:	9310      	str	r3, [sp, #64]	; 0x40
 800c5a6:	e7be      	b.n	800c526 <_dtoa_r+0x562>
 800c5a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c5aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c5ac:	f7f5 fef6 	bl	800239c <__aeabi_dmul>
 800c5b0:	9a05      	ldr	r2, [sp, #20]
 800c5b2:	9b05      	ldr	r3, [sp, #20]
 800c5b4:	4694      	mov	ip, r2
 800c5b6:	930a      	str	r3, [sp, #40]	; 0x28
 800c5b8:	9b07      	ldr	r3, [sp, #28]
 800c5ba:	9010      	str	r0, [sp, #64]	; 0x40
 800c5bc:	9111      	str	r1, [sp, #68]	; 0x44
 800c5be:	4463      	add	r3, ip
 800c5c0:	9319      	str	r3, [sp, #100]	; 0x64
 800c5c2:	0029      	movs	r1, r5
 800c5c4:	0020      	movs	r0, r4
 800c5c6:	f7f6 fd05 	bl	8002fd4 <__aeabi_d2iz>
 800c5ca:	9017      	str	r0, [sp, #92]	; 0x5c
 800c5cc:	f7f6 fd38 	bl	8003040 <__aeabi_i2d>
 800c5d0:	0002      	movs	r2, r0
 800c5d2:	000b      	movs	r3, r1
 800c5d4:	0020      	movs	r0, r4
 800c5d6:	0029      	movs	r1, r5
 800c5d8:	f7f6 f94c 	bl	8002874 <__aeabi_dsub>
 800c5dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5e0:	3330      	adds	r3, #48	; 0x30
 800c5e2:	7013      	strb	r3, [r2, #0]
 800c5e4:	0013      	movs	r3, r2
 800c5e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	0004      	movs	r4, r0
 800c5ec:	000d      	movs	r5, r1
 800c5ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d12c      	bne.n	800c64e <_dtoa_r+0x68a>
 800c5f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c5f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c5f8:	9a05      	ldr	r2, [sp, #20]
 800c5fa:	9b07      	ldr	r3, [sp, #28]
 800c5fc:	4694      	mov	ip, r2
 800c5fe:	4463      	add	r3, ip
 800c600:	2200      	movs	r2, #0
 800c602:	9307      	str	r3, [sp, #28]
 800c604:	4b1d      	ldr	r3, [pc, #116]	; (800c67c <_dtoa_r+0x6b8>)
 800c606:	f7f4 ff59 	bl	80014bc <__aeabi_dadd>
 800c60a:	0002      	movs	r2, r0
 800c60c:	000b      	movs	r3, r1
 800c60e:	0020      	movs	r0, r4
 800c610:	0029      	movs	r1, r5
 800c612:	f7f3 ff35 	bl	8000480 <__aeabi_dcmpgt>
 800c616:	2800      	cmp	r0, #0
 800c618:	d000      	beq.n	800c61c <_dtoa_r+0x658>
 800c61a:	e07f      	b.n	800c71c <_dtoa_r+0x758>
 800c61c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c61e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c620:	2000      	movs	r0, #0
 800c622:	4916      	ldr	r1, [pc, #88]	; (800c67c <_dtoa_r+0x6b8>)
 800c624:	f7f6 f926 	bl	8002874 <__aeabi_dsub>
 800c628:	0002      	movs	r2, r0
 800c62a:	000b      	movs	r3, r1
 800c62c:	0020      	movs	r0, r4
 800c62e:	0029      	movs	r1, r5
 800c630:	f7f3 ff12 	bl	8000458 <__aeabi_dcmplt>
 800c634:	2800      	cmp	r0, #0
 800c636:	d100      	bne.n	800c63a <_dtoa_r+0x676>
 800c638:	e714      	b.n	800c464 <_dtoa_r+0x4a0>
 800c63a:	9b07      	ldr	r3, [sp, #28]
 800c63c:	001a      	movs	r2, r3
 800c63e:	3a01      	subs	r2, #1
 800c640:	9207      	str	r2, [sp, #28]
 800c642:	7812      	ldrb	r2, [r2, #0]
 800c644:	2a30      	cmp	r2, #48	; 0x30
 800c646:	d0f8      	beq.n	800c63a <_dtoa_r+0x676>
 800c648:	9307      	str	r3, [sp, #28]
 800c64a:	9602      	str	r6, [sp, #8]
 800c64c:	e054      	b.n	800c6f8 <_dtoa_r+0x734>
 800c64e:	2200      	movs	r2, #0
 800c650:	4b05      	ldr	r3, [pc, #20]	; (800c668 <_dtoa_r+0x6a4>)
 800c652:	f7f5 fea3 	bl	800239c <__aeabi_dmul>
 800c656:	0004      	movs	r4, r0
 800c658:	000d      	movs	r5, r1
 800c65a:	e7b2      	b.n	800c5c2 <_dtoa_r+0x5fe>
 800c65c:	0800ed40 	.word	0x0800ed40
 800c660:	0800ed18 	.word	0x0800ed18
 800c664:	3ff00000 	.word	0x3ff00000
 800c668:	40240000 	.word	0x40240000
 800c66c:	401c0000 	.word	0x401c0000
 800c670:	fcc00000 	.word	0xfcc00000
 800c674:	40140000 	.word	0x40140000
 800c678:	7cc00000 	.word	0x7cc00000
 800c67c:	3fe00000 	.word	0x3fe00000
 800c680:	9b06      	ldr	r3, [sp, #24]
 800c682:	9e05      	ldr	r6, [sp, #20]
 800c684:	3b01      	subs	r3, #1
 800c686:	199b      	adds	r3, r3, r6
 800c688:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c68a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c68c:	930a      	str	r3, [sp, #40]	; 0x28
 800c68e:	9a08      	ldr	r2, [sp, #32]
 800c690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c692:	0020      	movs	r0, r4
 800c694:	0029      	movs	r1, r5
 800c696:	f7f5 fa7b 	bl	8001b90 <__aeabi_ddiv>
 800c69a:	f7f6 fc9b 	bl	8002fd4 <__aeabi_d2iz>
 800c69e:	9006      	str	r0, [sp, #24]
 800c6a0:	f7f6 fcce 	bl	8003040 <__aeabi_i2d>
 800c6a4:	9a08      	ldr	r2, [sp, #32]
 800c6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6a8:	f7f5 fe78 	bl	800239c <__aeabi_dmul>
 800c6ac:	0002      	movs	r2, r0
 800c6ae:	000b      	movs	r3, r1
 800c6b0:	0020      	movs	r0, r4
 800c6b2:	0029      	movs	r1, r5
 800c6b4:	f7f6 f8de 	bl	8002874 <__aeabi_dsub>
 800c6b8:	0033      	movs	r3, r6
 800c6ba:	9a06      	ldr	r2, [sp, #24]
 800c6bc:	3601      	adds	r6, #1
 800c6be:	3230      	adds	r2, #48	; 0x30
 800c6c0:	701a      	strb	r2, [r3, #0]
 800c6c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6c4:	9607      	str	r6, [sp, #28]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d139      	bne.n	800c73e <_dtoa_r+0x77a>
 800c6ca:	0002      	movs	r2, r0
 800c6cc:	000b      	movs	r3, r1
 800c6ce:	f7f4 fef5 	bl	80014bc <__aeabi_dadd>
 800c6d2:	9a08      	ldr	r2, [sp, #32]
 800c6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6d6:	0004      	movs	r4, r0
 800c6d8:	000d      	movs	r5, r1
 800c6da:	f7f3 fed1 	bl	8000480 <__aeabi_dcmpgt>
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	d11b      	bne.n	800c71a <_dtoa_r+0x756>
 800c6e2:	9a08      	ldr	r2, [sp, #32]
 800c6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6e6:	0020      	movs	r0, r4
 800c6e8:	0029      	movs	r1, r5
 800c6ea:	f7f3 feaf 	bl	800044c <__aeabi_dcmpeq>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d002      	beq.n	800c6f8 <_dtoa_r+0x734>
 800c6f2:	9b06      	ldr	r3, [sp, #24]
 800c6f4:	07db      	lsls	r3, r3, #31
 800c6f6:	d410      	bmi.n	800c71a <_dtoa_r+0x756>
 800c6f8:	0038      	movs	r0, r7
 800c6fa:	9904      	ldr	r1, [sp, #16]
 800c6fc:	f000 fd1c 	bl	800d138 <_Bfree>
 800c700:	2300      	movs	r3, #0
 800c702:	9a07      	ldr	r2, [sp, #28]
 800c704:	9802      	ldr	r0, [sp, #8]
 800c706:	7013      	strb	r3, [r2, #0]
 800c708:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c70a:	3001      	adds	r0, #1
 800c70c:	6018      	str	r0, [r3, #0]
 800c70e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c710:	2b00      	cmp	r3, #0
 800c712:	d100      	bne.n	800c716 <_dtoa_r+0x752>
 800c714:	e4a3      	b.n	800c05e <_dtoa_r+0x9a>
 800c716:	601a      	str	r2, [r3, #0]
 800c718:	e4a1      	b.n	800c05e <_dtoa_r+0x9a>
 800c71a:	9e02      	ldr	r6, [sp, #8]
 800c71c:	9b07      	ldr	r3, [sp, #28]
 800c71e:	9307      	str	r3, [sp, #28]
 800c720:	3b01      	subs	r3, #1
 800c722:	781a      	ldrb	r2, [r3, #0]
 800c724:	2a39      	cmp	r2, #57	; 0x39
 800c726:	d106      	bne.n	800c736 <_dtoa_r+0x772>
 800c728:	9a05      	ldr	r2, [sp, #20]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d1f7      	bne.n	800c71e <_dtoa_r+0x75a>
 800c72e:	2230      	movs	r2, #48	; 0x30
 800c730:	9905      	ldr	r1, [sp, #20]
 800c732:	3601      	adds	r6, #1
 800c734:	700a      	strb	r2, [r1, #0]
 800c736:	781a      	ldrb	r2, [r3, #0]
 800c738:	3201      	adds	r2, #1
 800c73a:	701a      	strb	r2, [r3, #0]
 800c73c:	e785      	b.n	800c64a <_dtoa_r+0x686>
 800c73e:	2200      	movs	r2, #0
 800c740:	4bad      	ldr	r3, [pc, #692]	; (800c9f8 <_dtoa_r+0xa34>)
 800c742:	f7f5 fe2b 	bl	800239c <__aeabi_dmul>
 800c746:	2200      	movs	r2, #0
 800c748:	2300      	movs	r3, #0
 800c74a:	0004      	movs	r4, r0
 800c74c:	000d      	movs	r5, r1
 800c74e:	f7f3 fe7d 	bl	800044c <__aeabi_dcmpeq>
 800c752:	2800      	cmp	r0, #0
 800c754:	d09b      	beq.n	800c68e <_dtoa_r+0x6ca>
 800c756:	e7cf      	b.n	800c6f8 <_dtoa_r+0x734>
 800c758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c75a:	2a00      	cmp	r2, #0
 800c75c:	d100      	bne.n	800c760 <_dtoa_r+0x79c>
 800c75e:	e082      	b.n	800c866 <_dtoa_r+0x8a2>
 800c760:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c762:	2a01      	cmp	r2, #1
 800c764:	dc66      	bgt.n	800c834 <_dtoa_r+0x870>
 800c766:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c768:	2a00      	cmp	r2, #0
 800c76a:	d05f      	beq.n	800c82c <_dtoa_r+0x868>
 800c76c:	4aa3      	ldr	r2, [pc, #652]	; (800c9fc <_dtoa_r+0xa38>)
 800c76e:	189b      	adds	r3, r3, r2
 800c770:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c772:	9c08      	ldr	r4, [sp, #32]
 800c774:	9a08      	ldr	r2, [sp, #32]
 800c776:	2101      	movs	r1, #1
 800c778:	18d2      	adds	r2, r2, r3
 800c77a:	9208      	str	r2, [sp, #32]
 800c77c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c77e:	0038      	movs	r0, r7
 800c780:	18d3      	adds	r3, r2, r3
 800c782:	930d      	str	r3, [sp, #52]	; 0x34
 800c784:	f000 fd88 	bl	800d298 <__i2b>
 800c788:	0005      	movs	r5, r0
 800c78a:	2c00      	cmp	r4, #0
 800c78c:	dd0e      	ble.n	800c7ac <_dtoa_r+0x7e8>
 800c78e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c790:	2b00      	cmp	r3, #0
 800c792:	dd0b      	ble.n	800c7ac <_dtoa_r+0x7e8>
 800c794:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c796:	0023      	movs	r3, r4
 800c798:	4294      	cmp	r4, r2
 800c79a:	dd00      	ble.n	800c79e <_dtoa_r+0x7da>
 800c79c:	0013      	movs	r3, r2
 800c79e:	9a08      	ldr	r2, [sp, #32]
 800c7a0:	1ae4      	subs	r4, r4, r3
 800c7a2:	1ad2      	subs	r2, r2, r3
 800c7a4:	9208      	str	r2, [sp, #32]
 800c7a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7a8:	1ad3      	subs	r3, r2, r3
 800c7aa:	930d      	str	r3, [sp, #52]	; 0x34
 800c7ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d01f      	beq.n	800c7f2 <_dtoa_r+0x82e>
 800c7b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d05a      	beq.n	800c86e <_dtoa_r+0x8aa>
 800c7b8:	2e00      	cmp	r6, #0
 800c7ba:	dd11      	ble.n	800c7e0 <_dtoa_r+0x81c>
 800c7bc:	0029      	movs	r1, r5
 800c7be:	0032      	movs	r2, r6
 800c7c0:	0038      	movs	r0, r7
 800c7c2:	f000 fe2f 	bl	800d424 <__pow5mult>
 800c7c6:	9a04      	ldr	r2, [sp, #16]
 800c7c8:	0001      	movs	r1, r0
 800c7ca:	0005      	movs	r5, r0
 800c7cc:	0038      	movs	r0, r7
 800c7ce:	f000 fd79 	bl	800d2c4 <__multiply>
 800c7d2:	9904      	ldr	r1, [sp, #16]
 800c7d4:	9007      	str	r0, [sp, #28]
 800c7d6:	0038      	movs	r0, r7
 800c7d8:	f000 fcae 	bl	800d138 <_Bfree>
 800c7dc:	9b07      	ldr	r3, [sp, #28]
 800c7de:	9304      	str	r3, [sp, #16]
 800c7e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7e2:	1b9a      	subs	r2, r3, r6
 800c7e4:	42b3      	cmp	r3, r6
 800c7e6:	d004      	beq.n	800c7f2 <_dtoa_r+0x82e>
 800c7e8:	0038      	movs	r0, r7
 800c7ea:	9904      	ldr	r1, [sp, #16]
 800c7ec:	f000 fe1a 	bl	800d424 <__pow5mult>
 800c7f0:	9004      	str	r0, [sp, #16]
 800c7f2:	2101      	movs	r1, #1
 800c7f4:	0038      	movs	r0, r7
 800c7f6:	f000 fd4f 	bl	800d298 <__i2b>
 800c7fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7fc:	0006      	movs	r6, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	dd37      	ble.n	800c872 <_dtoa_r+0x8ae>
 800c802:	001a      	movs	r2, r3
 800c804:	0001      	movs	r1, r0
 800c806:	0038      	movs	r0, r7
 800c808:	f000 fe0c 	bl	800d424 <__pow5mult>
 800c80c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c80e:	0006      	movs	r6, r0
 800c810:	2b01      	cmp	r3, #1
 800c812:	dd33      	ble.n	800c87c <_dtoa_r+0x8b8>
 800c814:	2300      	movs	r3, #0
 800c816:	9307      	str	r3, [sp, #28]
 800c818:	6933      	ldr	r3, [r6, #16]
 800c81a:	3303      	adds	r3, #3
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	18f3      	adds	r3, r6, r3
 800c820:	6858      	ldr	r0, [r3, #4]
 800c822:	f000 fcf1 	bl	800d208 <__hi0bits>
 800c826:	2320      	movs	r3, #32
 800c828:	1a18      	subs	r0, r3, r0
 800c82a:	e03f      	b.n	800c8ac <_dtoa_r+0x8e8>
 800c82c:	2336      	movs	r3, #54	; 0x36
 800c82e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c830:	1a9b      	subs	r3, r3, r2
 800c832:	e79d      	b.n	800c770 <_dtoa_r+0x7ac>
 800c834:	9b06      	ldr	r3, [sp, #24]
 800c836:	1e5e      	subs	r6, r3, #1
 800c838:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c83a:	42b3      	cmp	r3, r6
 800c83c:	db08      	blt.n	800c850 <_dtoa_r+0x88c>
 800c83e:	1b9e      	subs	r6, r3, r6
 800c840:	9b06      	ldr	r3, [sp, #24]
 800c842:	2b00      	cmp	r3, #0
 800c844:	da0c      	bge.n	800c860 <_dtoa_r+0x89c>
 800c846:	9b08      	ldr	r3, [sp, #32]
 800c848:	9a06      	ldr	r2, [sp, #24]
 800c84a:	1a9c      	subs	r4, r3, r2
 800c84c:	2300      	movs	r3, #0
 800c84e:	e791      	b.n	800c774 <_dtoa_r+0x7b0>
 800c850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c852:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c854:	1af3      	subs	r3, r6, r3
 800c856:	18d3      	adds	r3, r2, r3
 800c858:	960e      	str	r6, [sp, #56]	; 0x38
 800c85a:	9314      	str	r3, [sp, #80]	; 0x50
 800c85c:	2600      	movs	r6, #0
 800c85e:	e7ef      	b.n	800c840 <_dtoa_r+0x87c>
 800c860:	9c08      	ldr	r4, [sp, #32]
 800c862:	9b06      	ldr	r3, [sp, #24]
 800c864:	e786      	b.n	800c774 <_dtoa_r+0x7b0>
 800c866:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c868:	9c08      	ldr	r4, [sp, #32]
 800c86a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c86c:	e78d      	b.n	800c78a <_dtoa_r+0x7c6>
 800c86e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c870:	e7ba      	b.n	800c7e8 <_dtoa_r+0x824>
 800c872:	2300      	movs	r3, #0
 800c874:	9307      	str	r3, [sp, #28]
 800c876:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c878:	2b01      	cmp	r3, #1
 800c87a:	dc13      	bgt.n	800c8a4 <_dtoa_r+0x8e0>
 800c87c:	2300      	movs	r3, #0
 800c87e:	9307      	str	r3, [sp, #28]
 800c880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c882:	2b00      	cmp	r3, #0
 800c884:	d10e      	bne.n	800c8a4 <_dtoa_r+0x8e0>
 800c886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c888:	031b      	lsls	r3, r3, #12
 800c88a:	d10b      	bne.n	800c8a4 <_dtoa_r+0x8e0>
 800c88c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c88e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c890:	4213      	tst	r3, r2
 800c892:	d007      	beq.n	800c8a4 <_dtoa_r+0x8e0>
 800c894:	9b08      	ldr	r3, [sp, #32]
 800c896:	3301      	adds	r3, #1
 800c898:	9308      	str	r3, [sp, #32]
 800c89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c89c:	3301      	adds	r3, #1
 800c89e:	930d      	str	r3, [sp, #52]	; 0x34
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	9307      	str	r3, [sp, #28]
 800c8a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8a6:	2001      	movs	r0, #1
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1b5      	bne.n	800c818 <_dtoa_r+0x854>
 800c8ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8ae:	221f      	movs	r2, #31
 800c8b0:	1818      	adds	r0, r3, r0
 800c8b2:	0003      	movs	r3, r0
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	4210      	tst	r0, r2
 800c8b8:	d046      	beq.n	800c948 <_dtoa_r+0x984>
 800c8ba:	3201      	adds	r2, #1
 800c8bc:	1ad2      	subs	r2, r2, r3
 800c8be:	2a04      	cmp	r2, #4
 800c8c0:	dd3f      	ble.n	800c942 <_dtoa_r+0x97e>
 800c8c2:	221c      	movs	r2, #28
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	9a08      	ldr	r2, [sp, #32]
 800c8c8:	18e4      	adds	r4, r4, r3
 800c8ca:	18d2      	adds	r2, r2, r3
 800c8cc:	9208      	str	r2, [sp, #32]
 800c8ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8d0:	18d3      	adds	r3, r2, r3
 800c8d2:	930d      	str	r3, [sp, #52]	; 0x34
 800c8d4:	9b08      	ldr	r3, [sp, #32]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	dd05      	ble.n	800c8e6 <_dtoa_r+0x922>
 800c8da:	001a      	movs	r2, r3
 800c8dc:	0038      	movs	r0, r7
 800c8de:	9904      	ldr	r1, [sp, #16]
 800c8e0:	f000 fdfc 	bl	800d4dc <__lshift>
 800c8e4:	9004      	str	r0, [sp, #16]
 800c8e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	dd05      	ble.n	800c8f8 <_dtoa_r+0x934>
 800c8ec:	0031      	movs	r1, r6
 800c8ee:	001a      	movs	r2, r3
 800c8f0:	0038      	movs	r0, r7
 800c8f2:	f000 fdf3 	bl	800d4dc <__lshift>
 800c8f6:	0006      	movs	r6, r0
 800c8f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d026      	beq.n	800c94c <_dtoa_r+0x988>
 800c8fe:	0031      	movs	r1, r6
 800c900:	9804      	ldr	r0, [sp, #16]
 800c902:	f000 fe5b 	bl	800d5bc <__mcmp>
 800c906:	2800      	cmp	r0, #0
 800c908:	da20      	bge.n	800c94c <_dtoa_r+0x988>
 800c90a:	9b02      	ldr	r3, [sp, #8]
 800c90c:	220a      	movs	r2, #10
 800c90e:	3b01      	subs	r3, #1
 800c910:	9302      	str	r3, [sp, #8]
 800c912:	0038      	movs	r0, r7
 800c914:	2300      	movs	r3, #0
 800c916:	9904      	ldr	r1, [sp, #16]
 800c918:	f000 fc32 	bl	800d180 <__multadd>
 800c91c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c91e:	9004      	str	r0, [sp, #16]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d100      	bne.n	800c926 <_dtoa_r+0x962>
 800c924:	e160      	b.n	800cbe8 <_dtoa_r+0xc24>
 800c926:	2300      	movs	r3, #0
 800c928:	0029      	movs	r1, r5
 800c92a:	220a      	movs	r2, #10
 800c92c:	0038      	movs	r0, r7
 800c92e:	f000 fc27 	bl	800d180 <__multadd>
 800c932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c934:	0005      	movs	r5, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	dc47      	bgt.n	800c9ca <_dtoa_r+0xa06>
 800c93a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	dc0d      	bgt.n	800c95c <_dtoa_r+0x998>
 800c940:	e043      	b.n	800c9ca <_dtoa_r+0xa06>
 800c942:	2a04      	cmp	r2, #4
 800c944:	d0c6      	beq.n	800c8d4 <_dtoa_r+0x910>
 800c946:	0013      	movs	r3, r2
 800c948:	331c      	adds	r3, #28
 800c94a:	e7bc      	b.n	800c8c6 <_dtoa_r+0x902>
 800c94c:	9b06      	ldr	r3, [sp, #24]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	dc35      	bgt.n	800c9be <_dtoa_r+0x9fa>
 800c952:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c954:	2b02      	cmp	r3, #2
 800c956:	dd32      	ble.n	800c9be <_dtoa_r+0x9fa>
 800c958:	9b06      	ldr	r3, [sp, #24]
 800c95a:	930c      	str	r3, [sp, #48]	; 0x30
 800c95c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10c      	bne.n	800c97c <_dtoa_r+0x9b8>
 800c962:	0031      	movs	r1, r6
 800c964:	2205      	movs	r2, #5
 800c966:	0038      	movs	r0, r7
 800c968:	f000 fc0a 	bl	800d180 <__multadd>
 800c96c:	0006      	movs	r6, r0
 800c96e:	0001      	movs	r1, r0
 800c970:	9804      	ldr	r0, [sp, #16]
 800c972:	f000 fe23 	bl	800d5bc <__mcmp>
 800c976:	2800      	cmp	r0, #0
 800c978:	dd00      	ble.n	800c97c <_dtoa_r+0x9b8>
 800c97a:	e59f      	b.n	800c4bc <_dtoa_r+0x4f8>
 800c97c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c97e:	43db      	mvns	r3, r3
 800c980:	9302      	str	r3, [sp, #8]
 800c982:	9b05      	ldr	r3, [sp, #20]
 800c984:	9307      	str	r3, [sp, #28]
 800c986:	2400      	movs	r4, #0
 800c988:	0031      	movs	r1, r6
 800c98a:	0038      	movs	r0, r7
 800c98c:	f000 fbd4 	bl	800d138 <_Bfree>
 800c990:	2d00      	cmp	r5, #0
 800c992:	d100      	bne.n	800c996 <_dtoa_r+0x9d2>
 800c994:	e6b0      	b.n	800c6f8 <_dtoa_r+0x734>
 800c996:	2c00      	cmp	r4, #0
 800c998:	d005      	beq.n	800c9a6 <_dtoa_r+0x9e2>
 800c99a:	42ac      	cmp	r4, r5
 800c99c:	d003      	beq.n	800c9a6 <_dtoa_r+0x9e2>
 800c99e:	0021      	movs	r1, r4
 800c9a0:	0038      	movs	r0, r7
 800c9a2:	f000 fbc9 	bl	800d138 <_Bfree>
 800c9a6:	0029      	movs	r1, r5
 800c9a8:	0038      	movs	r0, r7
 800c9aa:	f000 fbc5 	bl	800d138 <_Bfree>
 800c9ae:	e6a3      	b.n	800c6f8 <_dtoa_r+0x734>
 800c9b0:	2600      	movs	r6, #0
 800c9b2:	0035      	movs	r5, r6
 800c9b4:	e7e2      	b.n	800c97c <_dtoa_r+0x9b8>
 800c9b6:	9602      	str	r6, [sp, #8]
 800c9b8:	9e07      	ldr	r6, [sp, #28]
 800c9ba:	0035      	movs	r5, r6
 800c9bc:	e57e      	b.n	800c4bc <_dtoa_r+0x4f8>
 800c9be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d100      	bne.n	800c9c6 <_dtoa_r+0xa02>
 800c9c4:	e0c8      	b.n	800cb58 <_dtoa_r+0xb94>
 800c9c6:	9b06      	ldr	r3, [sp, #24]
 800c9c8:	930c      	str	r3, [sp, #48]	; 0x30
 800c9ca:	2c00      	cmp	r4, #0
 800c9cc:	dd05      	ble.n	800c9da <_dtoa_r+0xa16>
 800c9ce:	0029      	movs	r1, r5
 800c9d0:	0022      	movs	r2, r4
 800c9d2:	0038      	movs	r0, r7
 800c9d4:	f000 fd82 	bl	800d4dc <__lshift>
 800c9d8:	0005      	movs	r5, r0
 800c9da:	9b07      	ldr	r3, [sp, #28]
 800c9dc:	0028      	movs	r0, r5
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d01f      	beq.n	800ca22 <_dtoa_r+0xa5e>
 800c9e2:	0038      	movs	r0, r7
 800c9e4:	6869      	ldr	r1, [r5, #4]
 800c9e6:	f000 fb63 	bl	800d0b0 <_Balloc>
 800c9ea:	1e04      	subs	r4, r0, #0
 800c9ec:	d10c      	bne.n	800ca08 <_dtoa_r+0xa44>
 800c9ee:	0002      	movs	r2, r0
 800c9f0:	4b03      	ldr	r3, [pc, #12]	; (800ca00 <_dtoa_r+0xa3c>)
 800c9f2:	4904      	ldr	r1, [pc, #16]	; (800ca04 <_dtoa_r+0xa40>)
 800c9f4:	f7ff fafb 	bl	800bfee <_dtoa_r+0x2a>
 800c9f8:	40240000 	.word	0x40240000
 800c9fc:	00000433 	.word	0x00000433
 800ca00:	0800ec43 	.word	0x0800ec43
 800ca04:	000002ea 	.word	0x000002ea
 800ca08:	0029      	movs	r1, r5
 800ca0a:	692b      	ldr	r3, [r5, #16]
 800ca0c:	310c      	adds	r1, #12
 800ca0e:	1c9a      	adds	r2, r3, #2
 800ca10:	0092      	lsls	r2, r2, #2
 800ca12:	300c      	adds	r0, #12
 800ca14:	f7fe fc46 	bl	800b2a4 <memcpy>
 800ca18:	2201      	movs	r2, #1
 800ca1a:	0021      	movs	r1, r4
 800ca1c:	0038      	movs	r0, r7
 800ca1e:	f000 fd5d 	bl	800d4dc <__lshift>
 800ca22:	002c      	movs	r4, r5
 800ca24:	0005      	movs	r5, r0
 800ca26:	9b05      	ldr	r3, [sp, #20]
 800ca28:	9308      	str	r3, [sp, #32]
 800ca2a:	0031      	movs	r1, r6
 800ca2c:	9804      	ldr	r0, [sp, #16]
 800ca2e:	f7ff fa3d 	bl	800beac <quorem>
 800ca32:	0003      	movs	r3, r0
 800ca34:	0021      	movs	r1, r4
 800ca36:	3330      	adds	r3, #48	; 0x30
 800ca38:	900e      	str	r0, [sp, #56]	; 0x38
 800ca3a:	9804      	ldr	r0, [sp, #16]
 800ca3c:	9306      	str	r3, [sp, #24]
 800ca3e:	f000 fdbd 	bl	800d5bc <__mcmp>
 800ca42:	002a      	movs	r2, r5
 800ca44:	900f      	str	r0, [sp, #60]	; 0x3c
 800ca46:	0031      	movs	r1, r6
 800ca48:	0038      	movs	r0, r7
 800ca4a:	f000 fdd3 	bl	800d5f4 <__mdiff>
 800ca4e:	68c3      	ldr	r3, [r0, #12]
 800ca50:	9007      	str	r0, [sp, #28]
 800ca52:	9310      	str	r3, [sp, #64]	; 0x40
 800ca54:	2301      	movs	r3, #1
 800ca56:	930d      	str	r3, [sp, #52]	; 0x34
 800ca58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d104      	bne.n	800ca68 <_dtoa_r+0xaa4>
 800ca5e:	0001      	movs	r1, r0
 800ca60:	9804      	ldr	r0, [sp, #16]
 800ca62:	f000 fdab 	bl	800d5bc <__mcmp>
 800ca66:	900d      	str	r0, [sp, #52]	; 0x34
 800ca68:	0038      	movs	r0, r7
 800ca6a:	9907      	ldr	r1, [sp, #28]
 800ca6c:	f000 fb64 	bl	800d138 <_Bfree>
 800ca70:	2301      	movs	r3, #1
 800ca72:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ca74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca76:	4018      	ands	r0, r3
 800ca78:	9b08      	ldr	r3, [sp, #32]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	9307      	str	r3, [sp, #28]
 800ca7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ca80:	4313      	orrs	r3, r2
 800ca82:	4303      	orrs	r3, r0
 800ca84:	d10c      	bne.n	800caa0 <_dtoa_r+0xadc>
 800ca86:	9b06      	ldr	r3, [sp, #24]
 800ca88:	2b39      	cmp	r3, #57	; 0x39
 800ca8a:	d025      	beq.n	800cad8 <_dtoa_r+0xb14>
 800ca8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	dd02      	ble.n	800ca98 <_dtoa_r+0xad4>
 800ca92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca94:	3331      	adds	r3, #49	; 0x31
 800ca96:	9306      	str	r3, [sp, #24]
 800ca98:	9b08      	ldr	r3, [sp, #32]
 800ca9a:	9a06      	ldr	r2, [sp, #24]
 800ca9c:	701a      	strb	r2, [r3, #0]
 800ca9e:	e773      	b.n	800c988 <_dtoa_r+0x9c4>
 800caa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	db03      	blt.n	800caae <_dtoa_r+0xaea>
 800caa6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800caa8:	4313      	orrs	r3, r2
 800caaa:	4303      	orrs	r3, r0
 800caac:	d11f      	bne.n	800caee <_dtoa_r+0xb2a>
 800caae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	ddf1      	ble.n	800ca98 <_dtoa_r+0xad4>
 800cab4:	9904      	ldr	r1, [sp, #16]
 800cab6:	2201      	movs	r2, #1
 800cab8:	0038      	movs	r0, r7
 800caba:	f000 fd0f 	bl	800d4dc <__lshift>
 800cabe:	0031      	movs	r1, r6
 800cac0:	9004      	str	r0, [sp, #16]
 800cac2:	f000 fd7b 	bl	800d5bc <__mcmp>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	dc03      	bgt.n	800cad2 <_dtoa_r+0xb0e>
 800caca:	d1e5      	bne.n	800ca98 <_dtoa_r+0xad4>
 800cacc:	9b06      	ldr	r3, [sp, #24]
 800cace:	07db      	lsls	r3, r3, #31
 800cad0:	d5e2      	bpl.n	800ca98 <_dtoa_r+0xad4>
 800cad2:	9b06      	ldr	r3, [sp, #24]
 800cad4:	2b39      	cmp	r3, #57	; 0x39
 800cad6:	d1dc      	bne.n	800ca92 <_dtoa_r+0xace>
 800cad8:	2339      	movs	r3, #57	; 0x39
 800cada:	9a08      	ldr	r2, [sp, #32]
 800cadc:	7013      	strb	r3, [r2, #0]
 800cade:	9b07      	ldr	r3, [sp, #28]
 800cae0:	9307      	str	r3, [sp, #28]
 800cae2:	3b01      	subs	r3, #1
 800cae4:	781a      	ldrb	r2, [r3, #0]
 800cae6:	2a39      	cmp	r2, #57	; 0x39
 800cae8:	d06c      	beq.n	800cbc4 <_dtoa_r+0xc00>
 800caea:	3201      	adds	r2, #1
 800caec:	e7d6      	b.n	800ca9c <_dtoa_r+0xad8>
 800caee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dd07      	ble.n	800cb04 <_dtoa_r+0xb40>
 800caf4:	9b06      	ldr	r3, [sp, #24]
 800caf6:	2b39      	cmp	r3, #57	; 0x39
 800caf8:	d0ee      	beq.n	800cad8 <_dtoa_r+0xb14>
 800cafa:	9b06      	ldr	r3, [sp, #24]
 800cafc:	9a08      	ldr	r2, [sp, #32]
 800cafe:	3301      	adds	r3, #1
 800cb00:	7013      	strb	r3, [r2, #0]
 800cb02:	e741      	b.n	800c988 <_dtoa_r+0x9c4>
 800cb04:	9b08      	ldr	r3, [sp, #32]
 800cb06:	9a06      	ldr	r2, [sp, #24]
 800cb08:	701a      	strb	r2, [r3, #0]
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	9a05      	ldr	r2, [sp, #20]
 800cb0e:	1a9b      	subs	r3, r3, r2
 800cb10:	9a08      	ldr	r2, [sp, #32]
 800cb12:	189b      	adds	r3, r3, r2
 800cb14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d03e      	beq.n	800cb98 <_dtoa_r+0xbd4>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	220a      	movs	r2, #10
 800cb1e:	9904      	ldr	r1, [sp, #16]
 800cb20:	0038      	movs	r0, r7
 800cb22:	f000 fb2d 	bl	800d180 <__multadd>
 800cb26:	2300      	movs	r3, #0
 800cb28:	9004      	str	r0, [sp, #16]
 800cb2a:	220a      	movs	r2, #10
 800cb2c:	0021      	movs	r1, r4
 800cb2e:	0038      	movs	r0, r7
 800cb30:	42ac      	cmp	r4, r5
 800cb32:	d106      	bne.n	800cb42 <_dtoa_r+0xb7e>
 800cb34:	f000 fb24 	bl	800d180 <__multadd>
 800cb38:	0004      	movs	r4, r0
 800cb3a:	0005      	movs	r5, r0
 800cb3c:	9b07      	ldr	r3, [sp, #28]
 800cb3e:	9308      	str	r3, [sp, #32]
 800cb40:	e773      	b.n	800ca2a <_dtoa_r+0xa66>
 800cb42:	f000 fb1d 	bl	800d180 <__multadd>
 800cb46:	0029      	movs	r1, r5
 800cb48:	0004      	movs	r4, r0
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	220a      	movs	r2, #10
 800cb4e:	0038      	movs	r0, r7
 800cb50:	f000 fb16 	bl	800d180 <__multadd>
 800cb54:	0005      	movs	r5, r0
 800cb56:	e7f1      	b.n	800cb3c <_dtoa_r+0xb78>
 800cb58:	9b06      	ldr	r3, [sp, #24]
 800cb5a:	930c      	str	r3, [sp, #48]	; 0x30
 800cb5c:	2400      	movs	r4, #0
 800cb5e:	0031      	movs	r1, r6
 800cb60:	9804      	ldr	r0, [sp, #16]
 800cb62:	f7ff f9a3 	bl	800beac <quorem>
 800cb66:	9b05      	ldr	r3, [sp, #20]
 800cb68:	3030      	adds	r0, #48	; 0x30
 800cb6a:	5518      	strb	r0, [r3, r4]
 800cb6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb6e:	3401      	adds	r4, #1
 800cb70:	9006      	str	r0, [sp, #24]
 800cb72:	42a3      	cmp	r3, r4
 800cb74:	dd07      	ble.n	800cb86 <_dtoa_r+0xbc2>
 800cb76:	2300      	movs	r3, #0
 800cb78:	220a      	movs	r2, #10
 800cb7a:	0038      	movs	r0, r7
 800cb7c:	9904      	ldr	r1, [sp, #16]
 800cb7e:	f000 faff 	bl	800d180 <__multadd>
 800cb82:	9004      	str	r0, [sp, #16]
 800cb84:	e7eb      	b.n	800cb5e <_dtoa_r+0xb9a>
 800cb86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb88:	2001      	movs	r0, #1
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	dd00      	ble.n	800cb90 <_dtoa_r+0xbcc>
 800cb8e:	0018      	movs	r0, r3
 800cb90:	2400      	movs	r4, #0
 800cb92:	9b05      	ldr	r3, [sp, #20]
 800cb94:	181b      	adds	r3, r3, r0
 800cb96:	9307      	str	r3, [sp, #28]
 800cb98:	9904      	ldr	r1, [sp, #16]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	0038      	movs	r0, r7
 800cb9e:	f000 fc9d 	bl	800d4dc <__lshift>
 800cba2:	0031      	movs	r1, r6
 800cba4:	9004      	str	r0, [sp, #16]
 800cba6:	f000 fd09 	bl	800d5bc <__mcmp>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	dc97      	bgt.n	800cade <_dtoa_r+0xb1a>
 800cbae:	d102      	bne.n	800cbb6 <_dtoa_r+0xbf2>
 800cbb0:	9b06      	ldr	r3, [sp, #24]
 800cbb2:	07db      	lsls	r3, r3, #31
 800cbb4:	d493      	bmi.n	800cade <_dtoa_r+0xb1a>
 800cbb6:	9b07      	ldr	r3, [sp, #28]
 800cbb8:	9307      	str	r3, [sp, #28]
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	781a      	ldrb	r2, [r3, #0]
 800cbbe:	2a30      	cmp	r2, #48	; 0x30
 800cbc0:	d0fa      	beq.n	800cbb8 <_dtoa_r+0xbf4>
 800cbc2:	e6e1      	b.n	800c988 <_dtoa_r+0x9c4>
 800cbc4:	9a05      	ldr	r2, [sp, #20]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d18a      	bne.n	800cae0 <_dtoa_r+0xb1c>
 800cbca:	9b02      	ldr	r3, [sp, #8]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	9302      	str	r3, [sp, #8]
 800cbd0:	2331      	movs	r3, #49	; 0x31
 800cbd2:	e795      	b.n	800cb00 <_dtoa_r+0xb3c>
 800cbd4:	4b08      	ldr	r3, [pc, #32]	; (800cbf8 <_dtoa_r+0xc34>)
 800cbd6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cbd8:	9305      	str	r3, [sp, #20]
 800cbda:	4b08      	ldr	r3, [pc, #32]	; (800cbfc <_dtoa_r+0xc38>)
 800cbdc:	2a00      	cmp	r2, #0
 800cbde:	d001      	beq.n	800cbe4 <_dtoa_r+0xc20>
 800cbe0:	f7ff fa3b 	bl	800c05a <_dtoa_r+0x96>
 800cbe4:	f7ff fa3b 	bl	800c05e <_dtoa_r+0x9a>
 800cbe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	dcb6      	bgt.n	800cb5c <_dtoa_r+0xb98>
 800cbee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	dd00      	ble.n	800cbf6 <_dtoa_r+0xc32>
 800cbf4:	e6b2      	b.n	800c95c <_dtoa_r+0x998>
 800cbf6:	e7b1      	b.n	800cb5c <_dtoa_r+0xb98>
 800cbf8:	0800ebc0 	.word	0x0800ebc0
 800cbfc:	0800ebc8 	.word	0x0800ebc8

0800cc00 <__sflush_r>:
 800cc00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc02:	898b      	ldrh	r3, [r1, #12]
 800cc04:	0005      	movs	r5, r0
 800cc06:	000c      	movs	r4, r1
 800cc08:	071a      	lsls	r2, r3, #28
 800cc0a:	d45f      	bmi.n	800cccc <__sflush_r+0xcc>
 800cc0c:	684a      	ldr	r2, [r1, #4]
 800cc0e:	2a00      	cmp	r2, #0
 800cc10:	dc04      	bgt.n	800cc1c <__sflush_r+0x1c>
 800cc12:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800cc14:	2a00      	cmp	r2, #0
 800cc16:	dc01      	bgt.n	800cc1c <__sflush_r+0x1c>
 800cc18:	2000      	movs	r0, #0
 800cc1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc1c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cc1e:	2f00      	cmp	r7, #0
 800cc20:	d0fa      	beq.n	800cc18 <__sflush_r+0x18>
 800cc22:	2200      	movs	r2, #0
 800cc24:	2180      	movs	r1, #128	; 0x80
 800cc26:	682e      	ldr	r6, [r5, #0]
 800cc28:	602a      	str	r2, [r5, #0]
 800cc2a:	001a      	movs	r2, r3
 800cc2c:	0149      	lsls	r1, r1, #5
 800cc2e:	400a      	ands	r2, r1
 800cc30:	420b      	tst	r3, r1
 800cc32:	d034      	beq.n	800cc9e <__sflush_r+0x9e>
 800cc34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc36:	89a3      	ldrh	r3, [r4, #12]
 800cc38:	075b      	lsls	r3, r3, #29
 800cc3a:	d506      	bpl.n	800cc4a <__sflush_r+0x4a>
 800cc3c:	6863      	ldr	r3, [r4, #4]
 800cc3e:	1ac0      	subs	r0, r0, r3
 800cc40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d001      	beq.n	800cc4a <__sflush_r+0x4a>
 800cc46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc48:	1ac0      	subs	r0, r0, r3
 800cc4a:	0002      	movs	r2, r0
 800cc4c:	6a21      	ldr	r1, [r4, #32]
 800cc4e:	2300      	movs	r3, #0
 800cc50:	0028      	movs	r0, r5
 800cc52:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cc54:	47b8      	blx	r7
 800cc56:	89a1      	ldrh	r1, [r4, #12]
 800cc58:	1c43      	adds	r3, r0, #1
 800cc5a:	d106      	bne.n	800cc6a <__sflush_r+0x6a>
 800cc5c:	682b      	ldr	r3, [r5, #0]
 800cc5e:	2b1d      	cmp	r3, #29
 800cc60:	d831      	bhi.n	800ccc6 <__sflush_r+0xc6>
 800cc62:	4a2c      	ldr	r2, [pc, #176]	; (800cd14 <__sflush_r+0x114>)
 800cc64:	40da      	lsrs	r2, r3
 800cc66:	07d3      	lsls	r3, r2, #31
 800cc68:	d52d      	bpl.n	800ccc6 <__sflush_r+0xc6>
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	6063      	str	r3, [r4, #4]
 800cc6e:	6923      	ldr	r3, [r4, #16]
 800cc70:	6023      	str	r3, [r4, #0]
 800cc72:	04cb      	lsls	r3, r1, #19
 800cc74:	d505      	bpl.n	800cc82 <__sflush_r+0x82>
 800cc76:	1c43      	adds	r3, r0, #1
 800cc78:	d102      	bne.n	800cc80 <__sflush_r+0x80>
 800cc7a:	682b      	ldr	r3, [r5, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d100      	bne.n	800cc82 <__sflush_r+0x82>
 800cc80:	6560      	str	r0, [r4, #84]	; 0x54
 800cc82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc84:	602e      	str	r6, [r5, #0]
 800cc86:	2900      	cmp	r1, #0
 800cc88:	d0c6      	beq.n	800cc18 <__sflush_r+0x18>
 800cc8a:	0023      	movs	r3, r4
 800cc8c:	3344      	adds	r3, #68	; 0x44
 800cc8e:	4299      	cmp	r1, r3
 800cc90:	d002      	beq.n	800cc98 <__sflush_r+0x98>
 800cc92:	0028      	movs	r0, r5
 800cc94:	f000 fdb8 	bl	800d808 <_free_r>
 800cc98:	2000      	movs	r0, #0
 800cc9a:	6360      	str	r0, [r4, #52]	; 0x34
 800cc9c:	e7bd      	b.n	800cc1a <__sflush_r+0x1a>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	0028      	movs	r0, r5
 800cca2:	6a21      	ldr	r1, [r4, #32]
 800cca4:	47b8      	blx	r7
 800cca6:	1c43      	adds	r3, r0, #1
 800cca8:	d1c5      	bne.n	800cc36 <__sflush_r+0x36>
 800ccaa:	682b      	ldr	r3, [r5, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d0c2      	beq.n	800cc36 <__sflush_r+0x36>
 800ccb0:	2b1d      	cmp	r3, #29
 800ccb2:	d001      	beq.n	800ccb8 <__sflush_r+0xb8>
 800ccb4:	2b16      	cmp	r3, #22
 800ccb6:	d101      	bne.n	800ccbc <__sflush_r+0xbc>
 800ccb8:	602e      	str	r6, [r5, #0]
 800ccba:	e7ad      	b.n	800cc18 <__sflush_r+0x18>
 800ccbc:	2340      	movs	r3, #64	; 0x40
 800ccbe:	89a2      	ldrh	r2, [r4, #12]
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	81a3      	strh	r3, [r4, #12]
 800ccc4:	e7a9      	b.n	800cc1a <__sflush_r+0x1a>
 800ccc6:	2340      	movs	r3, #64	; 0x40
 800ccc8:	430b      	orrs	r3, r1
 800ccca:	e7fa      	b.n	800ccc2 <__sflush_r+0xc2>
 800cccc:	690f      	ldr	r7, [r1, #16]
 800ccce:	2f00      	cmp	r7, #0
 800ccd0:	d0a2      	beq.n	800cc18 <__sflush_r+0x18>
 800ccd2:	680a      	ldr	r2, [r1, #0]
 800ccd4:	600f      	str	r7, [r1, #0]
 800ccd6:	1bd2      	subs	r2, r2, r7
 800ccd8:	9201      	str	r2, [sp, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	079b      	lsls	r3, r3, #30
 800ccde:	d100      	bne.n	800cce2 <__sflush_r+0xe2>
 800cce0:	694a      	ldr	r2, [r1, #20]
 800cce2:	60a2      	str	r2, [r4, #8]
 800cce4:	9b01      	ldr	r3, [sp, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	dc00      	bgt.n	800ccec <__sflush_r+0xec>
 800ccea:	e795      	b.n	800cc18 <__sflush_r+0x18>
 800ccec:	003a      	movs	r2, r7
 800ccee:	0028      	movs	r0, r5
 800ccf0:	9b01      	ldr	r3, [sp, #4]
 800ccf2:	6a21      	ldr	r1, [r4, #32]
 800ccf4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccf6:	47b0      	blx	r6
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	dc06      	bgt.n	800cd0a <__sflush_r+0x10a>
 800ccfc:	2340      	movs	r3, #64	; 0x40
 800ccfe:	2001      	movs	r0, #1
 800cd00:	89a2      	ldrh	r2, [r4, #12]
 800cd02:	4240      	negs	r0, r0
 800cd04:	4313      	orrs	r3, r2
 800cd06:	81a3      	strh	r3, [r4, #12]
 800cd08:	e787      	b.n	800cc1a <__sflush_r+0x1a>
 800cd0a:	9b01      	ldr	r3, [sp, #4]
 800cd0c:	183f      	adds	r7, r7, r0
 800cd0e:	1a1b      	subs	r3, r3, r0
 800cd10:	9301      	str	r3, [sp, #4]
 800cd12:	e7e7      	b.n	800cce4 <__sflush_r+0xe4>
 800cd14:	20400001 	.word	0x20400001

0800cd18 <_fflush_r>:
 800cd18:	690b      	ldr	r3, [r1, #16]
 800cd1a:	b570      	push	{r4, r5, r6, lr}
 800cd1c:	0005      	movs	r5, r0
 800cd1e:	000c      	movs	r4, r1
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d102      	bne.n	800cd2a <_fflush_r+0x12>
 800cd24:	2500      	movs	r5, #0
 800cd26:	0028      	movs	r0, r5
 800cd28:	bd70      	pop	{r4, r5, r6, pc}
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	d004      	beq.n	800cd38 <_fflush_r+0x20>
 800cd2e:	6983      	ldr	r3, [r0, #24]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d101      	bne.n	800cd38 <_fflush_r+0x20>
 800cd34:	f000 f892 	bl	800ce5c <__sinit>
 800cd38:	4b14      	ldr	r3, [pc, #80]	; (800cd8c <_fflush_r+0x74>)
 800cd3a:	429c      	cmp	r4, r3
 800cd3c:	d11b      	bne.n	800cd76 <_fflush_r+0x5e>
 800cd3e:	686c      	ldr	r4, [r5, #4]
 800cd40:	220c      	movs	r2, #12
 800cd42:	5ea3      	ldrsh	r3, [r4, r2]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d0ed      	beq.n	800cd24 <_fflush_r+0xc>
 800cd48:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd4a:	07d2      	lsls	r2, r2, #31
 800cd4c:	d404      	bmi.n	800cd58 <_fflush_r+0x40>
 800cd4e:	059b      	lsls	r3, r3, #22
 800cd50:	d402      	bmi.n	800cd58 <_fflush_r+0x40>
 800cd52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd54:	f000 f927 	bl	800cfa6 <__retarget_lock_acquire_recursive>
 800cd58:	0028      	movs	r0, r5
 800cd5a:	0021      	movs	r1, r4
 800cd5c:	f7ff ff50 	bl	800cc00 <__sflush_r>
 800cd60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd62:	0005      	movs	r5, r0
 800cd64:	07db      	lsls	r3, r3, #31
 800cd66:	d4de      	bmi.n	800cd26 <_fflush_r+0xe>
 800cd68:	89a3      	ldrh	r3, [r4, #12]
 800cd6a:	059b      	lsls	r3, r3, #22
 800cd6c:	d4db      	bmi.n	800cd26 <_fflush_r+0xe>
 800cd6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd70:	f000 f91a 	bl	800cfa8 <__retarget_lock_release_recursive>
 800cd74:	e7d7      	b.n	800cd26 <_fflush_r+0xe>
 800cd76:	4b06      	ldr	r3, [pc, #24]	; (800cd90 <_fflush_r+0x78>)
 800cd78:	429c      	cmp	r4, r3
 800cd7a:	d101      	bne.n	800cd80 <_fflush_r+0x68>
 800cd7c:	68ac      	ldr	r4, [r5, #8]
 800cd7e:	e7df      	b.n	800cd40 <_fflush_r+0x28>
 800cd80:	4b04      	ldr	r3, [pc, #16]	; (800cd94 <_fflush_r+0x7c>)
 800cd82:	429c      	cmp	r4, r3
 800cd84:	d1dc      	bne.n	800cd40 <_fflush_r+0x28>
 800cd86:	68ec      	ldr	r4, [r5, #12]
 800cd88:	e7da      	b.n	800cd40 <_fflush_r+0x28>
 800cd8a:	46c0      	nop			; (mov r8, r8)
 800cd8c:	0800ec74 	.word	0x0800ec74
 800cd90:	0800ec94 	.word	0x0800ec94
 800cd94:	0800ec54 	.word	0x0800ec54

0800cd98 <std>:
 800cd98:	2300      	movs	r3, #0
 800cd9a:	b510      	push	{r4, lr}
 800cd9c:	0004      	movs	r4, r0
 800cd9e:	6003      	str	r3, [r0, #0]
 800cda0:	6043      	str	r3, [r0, #4]
 800cda2:	6083      	str	r3, [r0, #8]
 800cda4:	8181      	strh	r1, [r0, #12]
 800cda6:	6643      	str	r3, [r0, #100]	; 0x64
 800cda8:	0019      	movs	r1, r3
 800cdaa:	81c2      	strh	r2, [r0, #14]
 800cdac:	6103      	str	r3, [r0, #16]
 800cdae:	6143      	str	r3, [r0, #20]
 800cdb0:	6183      	str	r3, [r0, #24]
 800cdb2:	2208      	movs	r2, #8
 800cdb4:	305c      	adds	r0, #92	; 0x5c
 800cdb6:	f7fe fa7e 	bl	800b2b6 <memset>
 800cdba:	4b05      	ldr	r3, [pc, #20]	; (800cdd0 <std+0x38>)
 800cdbc:	6263      	str	r3, [r4, #36]	; 0x24
 800cdbe:	4b05      	ldr	r3, [pc, #20]	; (800cdd4 <std+0x3c>)
 800cdc0:	6224      	str	r4, [r4, #32]
 800cdc2:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdc4:	4b04      	ldr	r3, [pc, #16]	; (800cdd8 <std+0x40>)
 800cdc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdc8:	4b04      	ldr	r3, [pc, #16]	; (800cddc <std+0x44>)
 800cdca:	6323      	str	r3, [r4, #48]	; 0x30
 800cdcc:	bd10      	pop	{r4, pc}
 800cdce:	46c0      	nop			; (mov r8, r8)
 800cdd0:	0800dcd5 	.word	0x0800dcd5
 800cdd4:	0800dcfd 	.word	0x0800dcfd
 800cdd8:	0800dd35 	.word	0x0800dd35
 800cddc:	0800dd61 	.word	0x0800dd61

0800cde0 <_cleanup_r>:
 800cde0:	b510      	push	{r4, lr}
 800cde2:	4902      	ldr	r1, [pc, #8]	; (800cdec <_cleanup_r+0xc>)
 800cde4:	f000 f8ba 	bl	800cf5c <_fwalk_reent>
 800cde8:	bd10      	pop	{r4, pc}
 800cdea:	46c0      	nop			; (mov r8, r8)
 800cdec:	0800cd19 	.word	0x0800cd19

0800cdf0 <__sfmoreglue>:
 800cdf0:	b570      	push	{r4, r5, r6, lr}
 800cdf2:	2568      	movs	r5, #104	; 0x68
 800cdf4:	1e4a      	subs	r2, r1, #1
 800cdf6:	4355      	muls	r5, r2
 800cdf8:	000e      	movs	r6, r1
 800cdfa:	0029      	movs	r1, r5
 800cdfc:	3174      	adds	r1, #116	; 0x74
 800cdfe:	f000 fd4d 	bl	800d89c <_malloc_r>
 800ce02:	1e04      	subs	r4, r0, #0
 800ce04:	d008      	beq.n	800ce18 <__sfmoreglue+0x28>
 800ce06:	2100      	movs	r1, #0
 800ce08:	002a      	movs	r2, r5
 800ce0a:	6001      	str	r1, [r0, #0]
 800ce0c:	6046      	str	r6, [r0, #4]
 800ce0e:	300c      	adds	r0, #12
 800ce10:	60a0      	str	r0, [r4, #8]
 800ce12:	3268      	adds	r2, #104	; 0x68
 800ce14:	f7fe fa4f 	bl	800b2b6 <memset>
 800ce18:	0020      	movs	r0, r4
 800ce1a:	bd70      	pop	{r4, r5, r6, pc}

0800ce1c <__sfp_lock_acquire>:
 800ce1c:	b510      	push	{r4, lr}
 800ce1e:	4802      	ldr	r0, [pc, #8]	; (800ce28 <__sfp_lock_acquire+0xc>)
 800ce20:	f000 f8c1 	bl	800cfa6 <__retarget_lock_acquire_recursive>
 800ce24:	bd10      	pop	{r4, pc}
 800ce26:	46c0      	nop			; (mov r8, r8)
 800ce28:	2000059c 	.word	0x2000059c

0800ce2c <__sfp_lock_release>:
 800ce2c:	b510      	push	{r4, lr}
 800ce2e:	4802      	ldr	r0, [pc, #8]	; (800ce38 <__sfp_lock_release+0xc>)
 800ce30:	f000 f8ba 	bl	800cfa8 <__retarget_lock_release_recursive>
 800ce34:	bd10      	pop	{r4, pc}
 800ce36:	46c0      	nop			; (mov r8, r8)
 800ce38:	2000059c 	.word	0x2000059c

0800ce3c <__sinit_lock_acquire>:
 800ce3c:	b510      	push	{r4, lr}
 800ce3e:	4802      	ldr	r0, [pc, #8]	; (800ce48 <__sinit_lock_acquire+0xc>)
 800ce40:	f000 f8b1 	bl	800cfa6 <__retarget_lock_acquire_recursive>
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	46c0      	nop			; (mov r8, r8)
 800ce48:	20000597 	.word	0x20000597

0800ce4c <__sinit_lock_release>:
 800ce4c:	b510      	push	{r4, lr}
 800ce4e:	4802      	ldr	r0, [pc, #8]	; (800ce58 <__sinit_lock_release+0xc>)
 800ce50:	f000 f8aa 	bl	800cfa8 <__retarget_lock_release_recursive>
 800ce54:	bd10      	pop	{r4, pc}
 800ce56:	46c0      	nop			; (mov r8, r8)
 800ce58:	20000597 	.word	0x20000597

0800ce5c <__sinit>:
 800ce5c:	b513      	push	{r0, r1, r4, lr}
 800ce5e:	0004      	movs	r4, r0
 800ce60:	f7ff ffec 	bl	800ce3c <__sinit_lock_acquire>
 800ce64:	69a3      	ldr	r3, [r4, #24]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d002      	beq.n	800ce70 <__sinit+0x14>
 800ce6a:	f7ff ffef 	bl	800ce4c <__sinit_lock_release>
 800ce6e:	bd13      	pop	{r0, r1, r4, pc}
 800ce70:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce72:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ce74:	6523      	str	r3, [r4, #80]	; 0x50
 800ce76:	4b13      	ldr	r3, [pc, #76]	; (800cec4 <__sinit+0x68>)
 800ce78:	4a13      	ldr	r2, [pc, #76]	; (800cec8 <__sinit+0x6c>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce7e:	9301      	str	r3, [sp, #4]
 800ce80:	42a3      	cmp	r3, r4
 800ce82:	d101      	bne.n	800ce88 <__sinit+0x2c>
 800ce84:	2301      	movs	r3, #1
 800ce86:	61a3      	str	r3, [r4, #24]
 800ce88:	0020      	movs	r0, r4
 800ce8a:	f000 f81f 	bl	800cecc <__sfp>
 800ce8e:	6060      	str	r0, [r4, #4]
 800ce90:	0020      	movs	r0, r4
 800ce92:	f000 f81b 	bl	800cecc <__sfp>
 800ce96:	60a0      	str	r0, [r4, #8]
 800ce98:	0020      	movs	r0, r4
 800ce9a:	f000 f817 	bl	800cecc <__sfp>
 800ce9e:	2200      	movs	r2, #0
 800cea0:	2104      	movs	r1, #4
 800cea2:	60e0      	str	r0, [r4, #12]
 800cea4:	6860      	ldr	r0, [r4, #4]
 800cea6:	f7ff ff77 	bl	800cd98 <std>
 800ceaa:	2201      	movs	r2, #1
 800ceac:	2109      	movs	r1, #9
 800ceae:	68a0      	ldr	r0, [r4, #8]
 800ceb0:	f7ff ff72 	bl	800cd98 <std>
 800ceb4:	2202      	movs	r2, #2
 800ceb6:	2112      	movs	r1, #18
 800ceb8:	68e0      	ldr	r0, [r4, #12]
 800ceba:	f7ff ff6d 	bl	800cd98 <std>
 800cebe:	2301      	movs	r3, #1
 800cec0:	61a3      	str	r3, [r4, #24]
 800cec2:	e7d2      	b.n	800ce6a <__sinit+0xe>
 800cec4:	0800eb88 	.word	0x0800eb88
 800cec8:	0800cde1 	.word	0x0800cde1

0800cecc <__sfp>:
 800cecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cece:	0007      	movs	r7, r0
 800ced0:	f7ff ffa4 	bl	800ce1c <__sfp_lock_acquire>
 800ced4:	4b1f      	ldr	r3, [pc, #124]	; (800cf54 <__sfp+0x88>)
 800ced6:	681e      	ldr	r6, [r3, #0]
 800ced8:	69b3      	ldr	r3, [r6, #24]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d102      	bne.n	800cee4 <__sfp+0x18>
 800cede:	0030      	movs	r0, r6
 800cee0:	f7ff ffbc 	bl	800ce5c <__sinit>
 800cee4:	3648      	adds	r6, #72	; 0x48
 800cee6:	68b4      	ldr	r4, [r6, #8]
 800cee8:	6873      	ldr	r3, [r6, #4]
 800ceea:	3b01      	subs	r3, #1
 800ceec:	d504      	bpl.n	800cef8 <__sfp+0x2c>
 800ceee:	6833      	ldr	r3, [r6, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d022      	beq.n	800cf3a <__sfp+0x6e>
 800cef4:	6836      	ldr	r6, [r6, #0]
 800cef6:	e7f6      	b.n	800cee6 <__sfp+0x1a>
 800cef8:	220c      	movs	r2, #12
 800cefa:	5ea5      	ldrsh	r5, [r4, r2]
 800cefc:	2d00      	cmp	r5, #0
 800cefe:	d11a      	bne.n	800cf36 <__sfp+0x6a>
 800cf00:	0020      	movs	r0, r4
 800cf02:	4b15      	ldr	r3, [pc, #84]	; (800cf58 <__sfp+0x8c>)
 800cf04:	3058      	adds	r0, #88	; 0x58
 800cf06:	60e3      	str	r3, [r4, #12]
 800cf08:	6665      	str	r5, [r4, #100]	; 0x64
 800cf0a:	f000 f84b 	bl	800cfa4 <__retarget_lock_init_recursive>
 800cf0e:	f7ff ff8d 	bl	800ce2c <__sfp_lock_release>
 800cf12:	0020      	movs	r0, r4
 800cf14:	2208      	movs	r2, #8
 800cf16:	0029      	movs	r1, r5
 800cf18:	6025      	str	r5, [r4, #0]
 800cf1a:	60a5      	str	r5, [r4, #8]
 800cf1c:	6065      	str	r5, [r4, #4]
 800cf1e:	6125      	str	r5, [r4, #16]
 800cf20:	6165      	str	r5, [r4, #20]
 800cf22:	61a5      	str	r5, [r4, #24]
 800cf24:	305c      	adds	r0, #92	; 0x5c
 800cf26:	f7fe f9c6 	bl	800b2b6 <memset>
 800cf2a:	6365      	str	r5, [r4, #52]	; 0x34
 800cf2c:	63a5      	str	r5, [r4, #56]	; 0x38
 800cf2e:	64a5      	str	r5, [r4, #72]	; 0x48
 800cf30:	64e5      	str	r5, [r4, #76]	; 0x4c
 800cf32:	0020      	movs	r0, r4
 800cf34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf36:	3468      	adds	r4, #104	; 0x68
 800cf38:	e7d7      	b.n	800ceea <__sfp+0x1e>
 800cf3a:	2104      	movs	r1, #4
 800cf3c:	0038      	movs	r0, r7
 800cf3e:	f7ff ff57 	bl	800cdf0 <__sfmoreglue>
 800cf42:	1e04      	subs	r4, r0, #0
 800cf44:	6030      	str	r0, [r6, #0]
 800cf46:	d1d5      	bne.n	800cef4 <__sfp+0x28>
 800cf48:	f7ff ff70 	bl	800ce2c <__sfp_lock_release>
 800cf4c:	230c      	movs	r3, #12
 800cf4e:	603b      	str	r3, [r7, #0]
 800cf50:	e7ef      	b.n	800cf32 <__sfp+0x66>
 800cf52:	46c0      	nop			; (mov r8, r8)
 800cf54:	0800eb88 	.word	0x0800eb88
 800cf58:	ffff0001 	.word	0xffff0001

0800cf5c <_fwalk_reent>:
 800cf5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf5e:	0004      	movs	r4, r0
 800cf60:	0006      	movs	r6, r0
 800cf62:	2700      	movs	r7, #0
 800cf64:	9101      	str	r1, [sp, #4]
 800cf66:	3448      	adds	r4, #72	; 0x48
 800cf68:	6863      	ldr	r3, [r4, #4]
 800cf6a:	68a5      	ldr	r5, [r4, #8]
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	9b00      	ldr	r3, [sp, #0]
 800cf70:	3b01      	subs	r3, #1
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	d504      	bpl.n	800cf80 <_fwalk_reent+0x24>
 800cf76:	6824      	ldr	r4, [r4, #0]
 800cf78:	2c00      	cmp	r4, #0
 800cf7a:	d1f5      	bne.n	800cf68 <_fwalk_reent+0xc>
 800cf7c:	0038      	movs	r0, r7
 800cf7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf80:	89ab      	ldrh	r3, [r5, #12]
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d908      	bls.n	800cf98 <_fwalk_reent+0x3c>
 800cf86:	220e      	movs	r2, #14
 800cf88:	5eab      	ldrsh	r3, [r5, r2]
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	d004      	beq.n	800cf98 <_fwalk_reent+0x3c>
 800cf8e:	0029      	movs	r1, r5
 800cf90:	0030      	movs	r0, r6
 800cf92:	9b01      	ldr	r3, [sp, #4]
 800cf94:	4798      	blx	r3
 800cf96:	4307      	orrs	r7, r0
 800cf98:	3568      	adds	r5, #104	; 0x68
 800cf9a:	e7e8      	b.n	800cf6e <_fwalk_reent+0x12>

0800cf9c <_localeconv_r>:
 800cf9c:	4800      	ldr	r0, [pc, #0]	; (800cfa0 <_localeconv_r+0x4>)
 800cf9e:	4770      	bx	lr
 800cfa0:	20000184 	.word	0x20000184

0800cfa4 <__retarget_lock_init_recursive>:
 800cfa4:	4770      	bx	lr

0800cfa6 <__retarget_lock_acquire_recursive>:
 800cfa6:	4770      	bx	lr

0800cfa8 <__retarget_lock_release_recursive>:
 800cfa8:	4770      	bx	lr
	...

0800cfac <__swhatbuf_r>:
 800cfac:	b570      	push	{r4, r5, r6, lr}
 800cfae:	000e      	movs	r6, r1
 800cfb0:	001d      	movs	r5, r3
 800cfb2:	230e      	movs	r3, #14
 800cfb4:	5ec9      	ldrsh	r1, [r1, r3]
 800cfb6:	0014      	movs	r4, r2
 800cfb8:	b096      	sub	sp, #88	; 0x58
 800cfba:	2900      	cmp	r1, #0
 800cfbc:	da07      	bge.n	800cfce <__swhatbuf_r+0x22>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	602b      	str	r3, [r5, #0]
 800cfc2:	89b3      	ldrh	r3, [r6, #12]
 800cfc4:	061b      	lsls	r3, r3, #24
 800cfc6:	d411      	bmi.n	800cfec <__swhatbuf_r+0x40>
 800cfc8:	2380      	movs	r3, #128	; 0x80
 800cfca:	00db      	lsls	r3, r3, #3
 800cfcc:	e00f      	b.n	800cfee <__swhatbuf_r+0x42>
 800cfce:	466a      	mov	r2, sp
 800cfd0:	f000 ff20 	bl	800de14 <_fstat_r>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	dbf2      	blt.n	800cfbe <__swhatbuf_r+0x12>
 800cfd8:	23f0      	movs	r3, #240	; 0xf0
 800cfda:	9901      	ldr	r1, [sp, #4]
 800cfdc:	021b      	lsls	r3, r3, #8
 800cfde:	4019      	ands	r1, r3
 800cfe0:	4b05      	ldr	r3, [pc, #20]	; (800cff8 <__swhatbuf_r+0x4c>)
 800cfe2:	18c9      	adds	r1, r1, r3
 800cfe4:	424b      	negs	r3, r1
 800cfe6:	4159      	adcs	r1, r3
 800cfe8:	6029      	str	r1, [r5, #0]
 800cfea:	e7ed      	b.n	800cfc8 <__swhatbuf_r+0x1c>
 800cfec:	2340      	movs	r3, #64	; 0x40
 800cfee:	2000      	movs	r0, #0
 800cff0:	6023      	str	r3, [r4, #0]
 800cff2:	b016      	add	sp, #88	; 0x58
 800cff4:	bd70      	pop	{r4, r5, r6, pc}
 800cff6:	46c0      	nop			; (mov r8, r8)
 800cff8:	ffffe000 	.word	0xffffe000

0800cffc <__smakebuf_r>:
 800cffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cffe:	2602      	movs	r6, #2
 800d000:	898b      	ldrh	r3, [r1, #12]
 800d002:	0005      	movs	r5, r0
 800d004:	000c      	movs	r4, r1
 800d006:	4233      	tst	r3, r6
 800d008:	d006      	beq.n	800d018 <__smakebuf_r+0x1c>
 800d00a:	0023      	movs	r3, r4
 800d00c:	3347      	adds	r3, #71	; 0x47
 800d00e:	6023      	str	r3, [r4, #0]
 800d010:	6123      	str	r3, [r4, #16]
 800d012:	2301      	movs	r3, #1
 800d014:	6163      	str	r3, [r4, #20]
 800d016:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d018:	466a      	mov	r2, sp
 800d01a:	ab01      	add	r3, sp, #4
 800d01c:	f7ff ffc6 	bl	800cfac <__swhatbuf_r>
 800d020:	9900      	ldr	r1, [sp, #0]
 800d022:	0007      	movs	r7, r0
 800d024:	0028      	movs	r0, r5
 800d026:	f000 fc39 	bl	800d89c <_malloc_r>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	d108      	bne.n	800d040 <__smakebuf_r+0x44>
 800d02e:	220c      	movs	r2, #12
 800d030:	5ea3      	ldrsh	r3, [r4, r2]
 800d032:	059a      	lsls	r2, r3, #22
 800d034:	d4ef      	bmi.n	800d016 <__smakebuf_r+0x1a>
 800d036:	2203      	movs	r2, #3
 800d038:	4393      	bics	r3, r2
 800d03a:	431e      	orrs	r6, r3
 800d03c:	81a6      	strh	r6, [r4, #12]
 800d03e:	e7e4      	b.n	800d00a <__smakebuf_r+0xe>
 800d040:	4b0f      	ldr	r3, [pc, #60]	; (800d080 <__smakebuf_r+0x84>)
 800d042:	62ab      	str	r3, [r5, #40]	; 0x28
 800d044:	2380      	movs	r3, #128	; 0x80
 800d046:	89a2      	ldrh	r2, [r4, #12]
 800d048:	6020      	str	r0, [r4, #0]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	81a3      	strh	r3, [r4, #12]
 800d04e:	9b00      	ldr	r3, [sp, #0]
 800d050:	6120      	str	r0, [r4, #16]
 800d052:	6163      	str	r3, [r4, #20]
 800d054:	9b01      	ldr	r3, [sp, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00d      	beq.n	800d076 <__smakebuf_r+0x7a>
 800d05a:	0028      	movs	r0, r5
 800d05c:	230e      	movs	r3, #14
 800d05e:	5ee1      	ldrsh	r1, [r4, r3]
 800d060:	f000 feea 	bl	800de38 <_isatty_r>
 800d064:	2800      	cmp	r0, #0
 800d066:	d006      	beq.n	800d076 <__smakebuf_r+0x7a>
 800d068:	2203      	movs	r2, #3
 800d06a:	89a3      	ldrh	r3, [r4, #12]
 800d06c:	4393      	bics	r3, r2
 800d06e:	001a      	movs	r2, r3
 800d070:	2301      	movs	r3, #1
 800d072:	4313      	orrs	r3, r2
 800d074:	81a3      	strh	r3, [r4, #12]
 800d076:	89a0      	ldrh	r0, [r4, #12]
 800d078:	4307      	orrs	r7, r0
 800d07a:	81a7      	strh	r7, [r4, #12]
 800d07c:	e7cb      	b.n	800d016 <__smakebuf_r+0x1a>
 800d07e:	46c0      	nop			; (mov r8, r8)
 800d080:	0800cde1 	.word	0x0800cde1

0800d084 <malloc>:
 800d084:	b510      	push	{r4, lr}
 800d086:	4b03      	ldr	r3, [pc, #12]	; (800d094 <malloc+0x10>)
 800d088:	0001      	movs	r1, r0
 800d08a:	6818      	ldr	r0, [r3, #0]
 800d08c:	f000 fc06 	bl	800d89c <_malloc_r>
 800d090:	bd10      	pop	{r4, pc}
 800d092:	46c0      	nop			; (mov r8, r8)
 800d094:	20000030 	.word	0x20000030

0800d098 <memchr>:
 800d098:	b2c9      	uxtb	r1, r1
 800d09a:	1882      	adds	r2, r0, r2
 800d09c:	4290      	cmp	r0, r2
 800d09e:	d101      	bne.n	800d0a4 <memchr+0xc>
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	4770      	bx	lr
 800d0a4:	7803      	ldrb	r3, [r0, #0]
 800d0a6:	428b      	cmp	r3, r1
 800d0a8:	d0fb      	beq.n	800d0a2 <memchr+0xa>
 800d0aa:	3001      	adds	r0, #1
 800d0ac:	e7f6      	b.n	800d09c <memchr+0x4>
	...

0800d0b0 <_Balloc>:
 800d0b0:	b570      	push	{r4, r5, r6, lr}
 800d0b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d0b4:	0006      	movs	r6, r0
 800d0b6:	000c      	movs	r4, r1
 800d0b8:	2d00      	cmp	r5, #0
 800d0ba:	d10e      	bne.n	800d0da <_Balloc+0x2a>
 800d0bc:	2010      	movs	r0, #16
 800d0be:	f7ff ffe1 	bl	800d084 <malloc>
 800d0c2:	1e02      	subs	r2, r0, #0
 800d0c4:	6270      	str	r0, [r6, #36]	; 0x24
 800d0c6:	d104      	bne.n	800d0d2 <_Balloc+0x22>
 800d0c8:	2166      	movs	r1, #102	; 0x66
 800d0ca:	4b19      	ldr	r3, [pc, #100]	; (800d130 <_Balloc+0x80>)
 800d0cc:	4819      	ldr	r0, [pc, #100]	; (800d134 <_Balloc+0x84>)
 800d0ce:	f000 fe61 	bl	800dd94 <__assert_func>
 800d0d2:	6045      	str	r5, [r0, #4]
 800d0d4:	6085      	str	r5, [r0, #8]
 800d0d6:	6005      	str	r5, [r0, #0]
 800d0d8:	60c5      	str	r5, [r0, #12]
 800d0da:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800d0dc:	68eb      	ldr	r3, [r5, #12]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d013      	beq.n	800d10a <_Balloc+0x5a>
 800d0e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d0e4:	00a2      	lsls	r2, r4, #2
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	189b      	adds	r3, r3, r2
 800d0ea:	6818      	ldr	r0, [r3, #0]
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d118      	bne.n	800d122 <_Balloc+0x72>
 800d0f0:	2101      	movs	r1, #1
 800d0f2:	000d      	movs	r5, r1
 800d0f4:	40a5      	lsls	r5, r4
 800d0f6:	1d6a      	adds	r2, r5, #5
 800d0f8:	0030      	movs	r0, r6
 800d0fa:	0092      	lsls	r2, r2, #2
 800d0fc:	f000 fb76 	bl	800d7ec <_calloc_r>
 800d100:	2800      	cmp	r0, #0
 800d102:	d00c      	beq.n	800d11e <_Balloc+0x6e>
 800d104:	6044      	str	r4, [r0, #4]
 800d106:	6085      	str	r5, [r0, #8]
 800d108:	e00d      	b.n	800d126 <_Balloc+0x76>
 800d10a:	2221      	movs	r2, #33	; 0x21
 800d10c:	2104      	movs	r1, #4
 800d10e:	0030      	movs	r0, r6
 800d110:	f000 fb6c 	bl	800d7ec <_calloc_r>
 800d114:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d116:	60e8      	str	r0, [r5, #12]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d1e1      	bne.n	800d0e2 <_Balloc+0x32>
 800d11e:	2000      	movs	r0, #0
 800d120:	bd70      	pop	{r4, r5, r6, pc}
 800d122:	6802      	ldr	r2, [r0, #0]
 800d124:	601a      	str	r2, [r3, #0]
 800d126:	2300      	movs	r3, #0
 800d128:	6103      	str	r3, [r0, #16]
 800d12a:	60c3      	str	r3, [r0, #12]
 800d12c:	e7f8      	b.n	800d120 <_Balloc+0x70>
 800d12e:	46c0      	nop			; (mov r8, r8)
 800d130:	0800ebcd 	.word	0x0800ebcd
 800d134:	0800ecb4 	.word	0x0800ecb4

0800d138 <_Bfree>:
 800d138:	b570      	push	{r4, r5, r6, lr}
 800d13a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d13c:	0005      	movs	r5, r0
 800d13e:	000c      	movs	r4, r1
 800d140:	2e00      	cmp	r6, #0
 800d142:	d10e      	bne.n	800d162 <_Bfree+0x2a>
 800d144:	2010      	movs	r0, #16
 800d146:	f7ff ff9d 	bl	800d084 <malloc>
 800d14a:	1e02      	subs	r2, r0, #0
 800d14c:	6268      	str	r0, [r5, #36]	; 0x24
 800d14e:	d104      	bne.n	800d15a <_Bfree+0x22>
 800d150:	218a      	movs	r1, #138	; 0x8a
 800d152:	4b09      	ldr	r3, [pc, #36]	; (800d178 <_Bfree+0x40>)
 800d154:	4809      	ldr	r0, [pc, #36]	; (800d17c <_Bfree+0x44>)
 800d156:	f000 fe1d 	bl	800dd94 <__assert_func>
 800d15a:	6046      	str	r6, [r0, #4]
 800d15c:	6086      	str	r6, [r0, #8]
 800d15e:	6006      	str	r6, [r0, #0]
 800d160:	60c6      	str	r6, [r0, #12]
 800d162:	2c00      	cmp	r4, #0
 800d164:	d007      	beq.n	800d176 <_Bfree+0x3e>
 800d166:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d168:	6862      	ldr	r2, [r4, #4]
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	0092      	lsls	r2, r2, #2
 800d16e:	189b      	adds	r3, r3, r2
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	6022      	str	r2, [r4, #0]
 800d174:	601c      	str	r4, [r3, #0]
 800d176:	bd70      	pop	{r4, r5, r6, pc}
 800d178:	0800ebcd 	.word	0x0800ebcd
 800d17c:	0800ecb4 	.word	0x0800ecb4

0800d180 <__multadd>:
 800d180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d182:	000e      	movs	r6, r1
 800d184:	9001      	str	r0, [sp, #4]
 800d186:	000c      	movs	r4, r1
 800d188:	001d      	movs	r5, r3
 800d18a:	2000      	movs	r0, #0
 800d18c:	690f      	ldr	r7, [r1, #16]
 800d18e:	3614      	adds	r6, #20
 800d190:	6833      	ldr	r3, [r6, #0]
 800d192:	3001      	adds	r0, #1
 800d194:	b299      	uxth	r1, r3
 800d196:	4351      	muls	r1, r2
 800d198:	0c1b      	lsrs	r3, r3, #16
 800d19a:	4353      	muls	r3, r2
 800d19c:	1949      	adds	r1, r1, r5
 800d19e:	0c0d      	lsrs	r5, r1, #16
 800d1a0:	195b      	adds	r3, r3, r5
 800d1a2:	0c1d      	lsrs	r5, r3, #16
 800d1a4:	b289      	uxth	r1, r1
 800d1a6:	041b      	lsls	r3, r3, #16
 800d1a8:	185b      	adds	r3, r3, r1
 800d1aa:	c608      	stmia	r6!, {r3}
 800d1ac:	4287      	cmp	r7, r0
 800d1ae:	dcef      	bgt.n	800d190 <__multadd+0x10>
 800d1b0:	2d00      	cmp	r5, #0
 800d1b2:	d022      	beq.n	800d1fa <__multadd+0x7a>
 800d1b4:	68a3      	ldr	r3, [r4, #8]
 800d1b6:	42bb      	cmp	r3, r7
 800d1b8:	dc19      	bgt.n	800d1ee <__multadd+0x6e>
 800d1ba:	6863      	ldr	r3, [r4, #4]
 800d1bc:	9801      	ldr	r0, [sp, #4]
 800d1be:	1c59      	adds	r1, r3, #1
 800d1c0:	f7ff ff76 	bl	800d0b0 <_Balloc>
 800d1c4:	1e06      	subs	r6, r0, #0
 800d1c6:	d105      	bne.n	800d1d4 <__multadd+0x54>
 800d1c8:	0002      	movs	r2, r0
 800d1ca:	21b5      	movs	r1, #181	; 0xb5
 800d1cc:	4b0c      	ldr	r3, [pc, #48]	; (800d200 <__multadd+0x80>)
 800d1ce:	480d      	ldr	r0, [pc, #52]	; (800d204 <__multadd+0x84>)
 800d1d0:	f000 fde0 	bl	800dd94 <__assert_func>
 800d1d4:	0021      	movs	r1, r4
 800d1d6:	6923      	ldr	r3, [r4, #16]
 800d1d8:	310c      	adds	r1, #12
 800d1da:	1c9a      	adds	r2, r3, #2
 800d1dc:	0092      	lsls	r2, r2, #2
 800d1de:	300c      	adds	r0, #12
 800d1e0:	f7fe f860 	bl	800b2a4 <memcpy>
 800d1e4:	0021      	movs	r1, r4
 800d1e6:	9801      	ldr	r0, [sp, #4]
 800d1e8:	f7ff ffa6 	bl	800d138 <_Bfree>
 800d1ec:	0034      	movs	r4, r6
 800d1ee:	1d3b      	adds	r3, r7, #4
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	18e3      	adds	r3, r4, r3
 800d1f4:	605d      	str	r5, [r3, #4]
 800d1f6:	1c7b      	adds	r3, r7, #1
 800d1f8:	6123      	str	r3, [r4, #16]
 800d1fa:	0020      	movs	r0, r4
 800d1fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d1fe:	46c0      	nop			; (mov r8, r8)
 800d200:	0800ec43 	.word	0x0800ec43
 800d204:	0800ecb4 	.word	0x0800ecb4

0800d208 <__hi0bits>:
 800d208:	0003      	movs	r3, r0
 800d20a:	0c02      	lsrs	r2, r0, #16
 800d20c:	2000      	movs	r0, #0
 800d20e:	4282      	cmp	r2, r0
 800d210:	d101      	bne.n	800d216 <__hi0bits+0xe>
 800d212:	041b      	lsls	r3, r3, #16
 800d214:	3010      	adds	r0, #16
 800d216:	0e1a      	lsrs	r2, r3, #24
 800d218:	d101      	bne.n	800d21e <__hi0bits+0x16>
 800d21a:	3008      	adds	r0, #8
 800d21c:	021b      	lsls	r3, r3, #8
 800d21e:	0f1a      	lsrs	r2, r3, #28
 800d220:	d101      	bne.n	800d226 <__hi0bits+0x1e>
 800d222:	3004      	adds	r0, #4
 800d224:	011b      	lsls	r3, r3, #4
 800d226:	0f9a      	lsrs	r2, r3, #30
 800d228:	d101      	bne.n	800d22e <__hi0bits+0x26>
 800d22a:	3002      	adds	r0, #2
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	2b00      	cmp	r3, #0
 800d230:	db03      	blt.n	800d23a <__hi0bits+0x32>
 800d232:	3001      	adds	r0, #1
 800d234:	005b      	lsls	r3, r3, #1
 800d236:	d400      	bmi.n	800d23a <__hi0bits+0x32>
 800d238:	2020      	movs	r0, #32
 800d23a:	4770      	bx	lr

0800d23c <__lo0bits>:
 800d23c:	6803      	ldr	r3, [r0, #0]
 800d23e:	0002      	movs	r2, r0
 800d240:	2107      	movs	r1, #7
 800d242:	0018      	movs	r0, r3
 800d244:	4008      	ands	r0, r1
 800d246:	420b      	tst	r3, r1
 800d248:	d00d      	beq.n	800d266 <__lo0bits+0x2a>
 800d24a:	3906      	subs	r1, #6
 800d24c:	2000      	movs	r0, #0
 800d24e:	420b      	tst	r3, r1
 800d250:	d105      	bne.n	800d25e <__lo0bits+0x22>
 800d252:	3002      	adds	r0, #2
 800d254:	4203      	tst	r3, r0
 800d256:	d003      	beq.n	800d260 <__lo0bits+0x24>
 800d258:	40cb      	lsrs	r3, r1
 800d25a:	0008      	movs	r0, r1
 800d25c:	6013      	str	r3, [r2, #0]
 800d25e:	4770      	bx	lr
 800d260:	089b      	lsrs	r3, r3, #2
 800d262:	6013      	str	r3, [r2, #0]
 800d264:	e7fb      	b.n	800d25e <__lo0bits+0x22>
 800d266:	b299      	uxth	r1, r3
 800d268:	2900      	cmp	r1, #0
 800d26a:	d101      	bne.n	800d270 <__lo0bits+0x34>
 800d26c:	2010      	movs	r0, #16
 800d26e:	0c1b      	lsrs	r3, r3, #16
 800d270:	b2d9      	uxtb	r1, r3
 800d272:	2900      	cmp	r1, #0
 800d274:	d101      	bne.n	800d27a <__lo0bits+0x3e>
 800d276:	3008      	adds	r0, #8
 800d278:	0a1b      	lsrs	r3, r3, #8
 800d27a:	0719      	lsls	r1, r3, #28
 800d27c:	d101      	bne.n	800d282 <__lo0bits+0x46>
 800d27e:	3004      	adds	r0, #4
 800d280:	091b      	lsrs	r3, r3, #4
 800d282:	0799      	lsls	r1, r3, #30
 800d284:	d101      	bne.n	800d28a <__lo0bits+0x4e>
 800d286:	3002      	adds	r0, #2
 800d288:	089b      	lsrs	r3, r3, #2
 800d28a:	07d9      	lsls	r1, r3, #31
 800d28c:	d4e9      	bmi.n	800d262 <__lo0bits+0x26>
 800d28e:	3001      	adds	r0, #1
 800d290:	085b      	lsrs	r3, r3, #1
 800d292:	d1e6      	bne.n	800d262 <__lo0bits+0x26>
 800d294:	2020      	movs	r0, #32
 800d296:	e7e2      	b.n	800d25e <__lo0bits+0x22>

0800d298 <__i2b>:
 800d298:	b510      	push	{r4, lr}
 800d29a:	000c      	movs	r4, r1
 800d29c:	2101      	movs	r1, #1
 800d29e:	f7ff ff07 	bl	800d0b0 <_Balloc>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d106      	bne.n	800d2b4 <__i2b+0x1c>
 800d2a6:	21a0      	movs	r1, #160	; 0xa0
 800d2a8:	0002      	movs	r2, r0
 800d2aa:	4b04      	ldr	r3, [pc, #16]	; (800d2bc <__i2b+0x24>)
 800d2ac:	4804      	ldr	r0, [pc, #16]	; (800d2c0 <__i2b+0x28>)
 800d2ae:	0049      	lsls	r1, r1, #1
 800d2b0:	f000 fd70 	bl	800dd94 <__assert_func>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	6144      	str	r4, [r0, #20]
 800d2b8:	6103      	str	r3, [r0, #16]
 800d2ba:	bd10      	pop	{r4, pc}
 800d2bc:	0800ec43 	.word	0x0800ec43
 800d2c0:	0800ecb4 	.word	0x0800ecb4

0800d2c4 <__multiply>:
 800d2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2c6:	690b      	ldr	r3, [r1, #16]
 800d2c8:	0014      	movs	r4, r2
 800d2ca:	6912      	ldr	r2, [r2, #16]
 800d2cc:	000d      	movs	r5, r1
 800d2ce:	b089      	sub	sp, #36	; 0x24
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	da01      	bge.n	800d2d8 <__multiply+0x14>
 800d2d4:	0025      	movs	r5, r4
 800d2d6:	000c      	movs	r4, r1
 800d2d8:	692f      	ldr	r7, [r5, #16]
 800d2da:	6926      	ldr	r6, [r4, #16]
 800d2dc:	6869      	ldr	r1, [r5, #4]
 800d2de:	19bb      	adds	r3, r7, r6
 800d2e0:	9302      	str	r3, [sp, #8]
 800d2e2:	68ab      	ldr	r3, [r5, #8]
 800d2e4:	19ba      	adds	r2, r7, r6
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	da00      	bge.n	800d2ec <__multiply+0x28>
 800d2ea:	3101      	adds	r1, #1
 800d2ec:	f7ff fee0 	bl	800d0b0 <_Balloc>
 800d2f0:	9001      	str	r0, [sp, #4]
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	d106      	bne.n	800d304 <__multiply+0x40>
 800d2f6:	215e      	movs	r1, #94	; 0x5e
 800d2f8:	0002      	movs	r2, r0
 800d2fa:	4b48      	ldr	r3, [pc, #288]	; (800d41c <__multiply+0x158>)
 800d2fc:	4848      	ldr	r0, [pc, #288]	; (800d420 <__multiply+0x15c>)
 800d2fe:	31ff      	adds	r1, #255	; 0xff
 800d300:	f000 fd48 	bl	800dd94 <__assert_func>
 800d304:	9b01      	ldr	r3, [sp, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	3314      	adds	r3, #20
 800d30a:	469c      	mov	ip, r3
 800d30c:	19bb      	adds	r3, r7, r6
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4463      	add	r3, ip
 800d312:	9303      	str	r3, [sp, #12]
 800d314:	4663      	mov	r3, ip
 800d316:	9903      	ldr	r1, [sp, #12]
 800d318:	428b      	cmp	r3, r1
 800d31a:	d32c      	bcc.n	800d376 <__multiply+0xb2>
 800d31c:	002b      	movs	r3, r5
 800d31e:	0022      	movs	r2, r4
 800d320:	3314      	adds	r3, #20
 800d322:	00bf      	lsls	r7, r7, #2
 800d324:	3214      	adds	r2, #20
 800d326:	9306      	str	r3, [sp, #24]
 800d328:	00b6      	lsls	r6, r6, #2
 800d32a:	19db      	adds	r3, r3, r7
 800d32c:	9304      	str	r3, [sp, #16]
 800d32e:	1993      	adds	r3, r2, r6
 800d330:	9307      	str	r3, [sp, #28]
 800d332:	2304      	movs	r3, #4
 800d334:	9305      	str	r3, [sp, #20]
 800d336:	002b      	movs	r3, r5
 800d338:	9904      	ldr	r1, [sp, #16]
 800d33a:	3315      	adds	r3, #21
 800d33c:	9200      	str	r2, [sp, #0]
 800d33e:	4299      	cmp	r1, r3
 800d340:	d305      	bcc.n	800d34e <__multiply+0x8a>
 800d342:	1b4b      	subs	r3, r1, r5
 800d344:	3b15      	subs	r3, #21
 800d346:	089b      	lsrs	r3, r3, #2
 800d348:	3301      	adds	r3, #1
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	9305      	str	r3, [sp, #20]
 800d34e:	9b07      	ldr	r3, [sp, #28]
 800d350:	9a00      	ldr	r2, [sp, #0]
 800d352:	429a      	cmp	r2, r3
 800d354:	d311      	bcc.n	800d37a <__multiply+0xb6>
 800d356:	9b02      	ldr	r3, [sp, #8]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	dd06      	ble.n	800d36a <__multiply+0xa6>
 800d35c:	9b03      	ldr	r3, [sp, #12]
 800d35e:	3b04      	subs	r3, #4
 800d360:	9303      	str	r3, [sp, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d054      	beq.n	800d414 <__multiply+0x150>
 800d36a:	9b01      	ldr	r3, [sp, #4]
 800d36c:	9a02      	ldr	r2, [sp, #8]
 800d36e:	0018      	movs	r0, r3
 800d370:	611a      	str	r2, [r3, #16]
 800d372:	b009      	add	sp, #36	; 0x24
 800d374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d376:	c304      	stmia	r3!, {r2}
 800d378:	e7cd      	b.n	800d316 <__multiply+0x52>
 800d37a:	9b00      	ldr	r3, [sp, #0]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	b298      	uxth	r0, r3
 800d380:	2800      	cmp	r0, #0
 800d382:	d01c      	beq.n	800d3be <__multiply+0xfa>
 800d384:	4667      	mov	r7, ip
 800d386:	2400      	movs	r4, #0
 800d388:	9e06      	ldr	r6, [sp, #24]
 800d38a:	ce02      	ldmia	r6!, {r1}
 800d38c:	683a      	ldr	r2, [r7, #0]
 800d38e:	b28b      	uxth	r3, r1
 800d390:	4343      	muls	r3, r0
 800d392:	0c09      	lsrs	r1, r1, #16
 800d394:	4341      	muls	r1, r0
 800d396:	b292      	uxth	r2, r2
 800d398:	189b      	adds	r3, r3, r2
 800d39a:	191b      	adds	r3, r3, r4
 800d39c:	000c      	movs	r4, r1
 800d39e:	683a      	ldr	r2, [r7, #0]
 800d3a0:	0c11      	lsrs	r1, r2, #16
 800d3a2:	1861      	adds	r1, r4, r1
 800d3a4:	0c1c      	lsrs	r4, r3, #16
 800d3a6:	1909      	adds	r1, r1, r4
 800d3a8:	0c0c      	lsrs	r4, r1, #16
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	0409      	lsls	r1, r1, #16
 800d3ae:	430b      	orrs	r3, r1
 800d3b0:	c708      	stmia	r7!, {r3}
 800d3b2:	9b04      	ldr	r3, [sp, #16]
 800d3b4:	42b3      	cmp	r3, r6
 800d3b6:	d8e8      	bhi.n	800d38a <__multiply+0xc6>
 800d3b8:	4663      	mov	r3, ip
 800d3ba:	9a05      	ldr	r2, [sp, #20]
 800d3bc:	509c      	str	r4, [r3, r2]
 800d3be:	9b00      	ldr	r3, [sp, #0]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	0c1e      	lsrs	r6, r3, #16
 800d3c4:	d020      	beq.n	800d408 <__multiply+0x144>
 800d3c6:	4663      	mov	r3, ip
 800d3c8:	002c      	movs	r4, r5
 800d3ca:	4660      	mov	r0, ip
 800d3cc:	2700      	movs	r7, #0
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	3414      	adds	r4, #20
 800d3d2:	6822      	ldr	r2, [r4, #0]
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	b291      	uxth	r1, r2
 800d3d8:	4371      	muls	r1, r6
 800d3da:	6802      	ldr	r2, [r0, #0]
 800d3dc:	0c12      	lsrs	r2, r2, #16
 800d3de:	1889      	adds	r1, r1, r2
 800d3e0:	19cf      	adds	r7, r1, r7
 800d3e2:	0439      	lsls	r1, r7, #16
 800d3e4:	430b      	orrs	r3, r1
 800d3e6:	6003      	str	r3, [r0, #0]
 800d3e8:	cc02      	ldmia	r4!, {r1}
 800d3ea:	6843      	ldr	r3, [r0, #4]
 800d3ec:	0c09      	lsrs	r1, r1, #16
 800d3ee:	4371      	muls	r1, r6
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	0c3f      	lsrs	r7, r7, #16
 800d3f4:	18cb      	adds	r3, r1, r3
 800d3f6:	9a04      	ldr	r2, [sp, #16]
 800d3f8:	19db      	adds	r3, r3, r7
 800d3fa:	0c1f      	lsrs	r7, r3, #16
 800d3fc:	3004      	adds	r0, #4
 800d3fe:	42a2      	cmp	r2, r4
 800d400:	d8e7      	bhi.n	800d3d2 <__multiply+0x10e>
 800d402:	4662      	mov	r2, ip
 800d404:	9905      	ldr	r1, [sp, #20]
 800d406:	5053      	str	r3, [r2, r1]
 800d408:	9b00      	ldr	r3, [sp, #0]
 800d40a:	3304      	adds	r3, #4
 800d40c:	9300      	str	r3, [sp, #0]
 800d40e:	2304      	movs	r3, #4
 800d410:	449c      	add	ip, r3
 800d412:	e79c      	b.n	800d34e <__multiply+0x8a>
 800d414:	9b02      	ldr	r3, [sp, #8]
 800d416:	3b01      	subs	r3, #1
 800d418:	9302      	str	r3, [sp, #8]
 800d41a:	e79c      	b.n	800d356 <__multiply+0x92>
 800d41c:	0800ec43 	.word	0x0800ec43
 800d420:	0800ecb4 	.word	0x0800ecb4

0800d424 <__pow5mult>:
 800d424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d426:	2303      	movs	r3, #3
 800d428:	0015      	movs	r5, r2
 800d42a:	0007      	movs	r7, r0
 800d42c:	000e      	movs	r6, r1
 800d42e:	401a      	ands	r2, r3
 800d430:	421d      	tst	r5, r3
 800d432:	d008      	beq.n	800d446 <__pow5mult+0x22>
 800d434:	4925      	ldr	r1, [pc, #148]	; (800d4cc <__pow5mult+0xa8>)
 800d436:	3a01      	subs	r2, #1
 800d438:	0092      	lsls	r2, r2, #2
 800d43a:	5852      	ldr	r2, [r2, r1]
 800d43c:	2300      	movs	r3, #0
 800d43e:	0031      	movs	r1, r6
 800d440:	f7ff fe9e 	bl	800d180 <__multadd>
 800d444:	0006      	movs	r6, r0
 800d446:	10ad      	asrs	r5, r5, #2
 800d448:	d03d      	beq.n	800d4c6 <__pow5mult+0xa2>
 800d44a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d44c:	2c00      	cmp	r4, #0
 800d44e:	d10f      	bne.n	800d470 <__pow5mult+0x4c>
 800d450:	2010      	movs	r0, #16
 800d452:	f7ff fe17 	bl	800d084 <malloc>
 800d456:	1e02      	subs	r2, r0, #0
 800d458:	6278      	str	r0, [r7, #36]	; 0x24
 800d45a:	d105      	bne.n	800d468 <__pow5mult+0x44>
 800d45c:	21d7      	movs	r1, #215	; 0xd7
 800d45e:	4b1c      	ldr	r3, [pc, #112]	; (800d4d0 <__pow5mult+0xac>)
 800d460:	481c      	ldr	r0, [pc, #112]	; (800d4d4 <__pow5mult+0xb0>)
 800d462:	0049      	lsls	r1, r1, #1
 800d464:	f000 fc96 	bl	800dd94 <__assert_func>
 800d468:	6044      	str	r4, [r0, #4]
 800d46a:	6084      	str	r4, [r0, #8]
 800d46c:	6004      	str	r4, [r0, #0]
 800d46e:	60c4      	str	r4, [r0, #12]
 800d470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d472:	689c      	ldr	r4, [r3, #8]
 800d474:	9301      	str	r3, [sp, #4]
 800d476:	2c00      	cmp	r4, #0
 800d478:	d108      	bne.n	800d48c <__pow5mult+0x68>
 800d47a:	0038      	movs	r0, r7
 800d47c:	4916      	ldr	r1, [pc, #88]	; (800d4d8 <__pow5mult+0xb4>)
 800d47e:	f7ff ff0b 	bl	800d298 <__i2b>
 800d482:	9b01      	ldr	r3, [sp, #4]
 800d484:	0004      	movs	r4, r0
 800d486:	6098      	str	r0, [r3, #8]
 800d488:	2300      	movs	r3, #0
 800d48a:	6003      	str	r3, [r0, #0]
 800d48c:	2301      	movs	r3, #1
 800d48e:	421d      	tst	r5, r3
 800d490:	d00a      	beq.n	800d4a8 <__pow5mult+0x84>
 800d492:	0031      	movs	r1, r6
 800d494:	0022      	movs	r2, r4
 800d496:	0038      	movs	r0, r7
 800d498:	f7ff ff14 	bl	800d2c4 <__multiply>
 800d49c:	0031      	movs	r1, r6
 800d49e:	9001      	str	r0, [sp, #4]
 800d4a0:	0038      	movs	r0, r7
 800d4a2:	f7ff fe49 	bl	800d138 <_Bfree>
 800d4a6:	9e01      	ldr	r6, [sp, #4]
 800d4a8:	106d      	asrs	r5, r5, #1
 800d4aa:	d00c      	beq.n	800d4c6 <__pow5mult+0xa2>
 800d4ac:	6820      	ldr	r0, [r4, #0]
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d107      	bne.n	800d4c2 <__pow5mult+0x9e>
 800d4b2:	0022      	movs	r2, r4
 800d4b4:	0021      	movs	r1, r4
 800d4b6:	0038      	movs	r0, r7
 800d4b8:	f7ff ff04 	bl	800d2c4 <__multiply>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	6020      	str	r0, [r4, #0]
 800d4c0:	6003      	str	r3, [r0, #0]
 800d4c2:	0004      	movs	r4, r0
 800d4c4:	e7e2      	b.n	800d48c <__pow5mult+0x68>
 800d4c6:	0030      	movs	r0, r6
 800d4c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4ca:	46c0      	nop			; (mov r8, r8)
 800d4cc:	0800ee08 	.word	0x0800ee08
 800d4d0:	0800ebcd 	.word	0x0800ebcd
 800d4d4:	0800ecb4 	.word	0x0800ecb4
 800d4d8:	00000271 	.word	0x00000271

0800d4dc <__lshift>:
 800d4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4de:	000c      	movs	r4, r1
 800d4e0:	0017      	movs	r7, r2
 800d4e2:	6923      	ldr	r3, [r4, #16]
 800d4e4:	1155      	asrs	r5, r2, #5
 800d4e6:	b087      	sub	sp, #28
 800d4e8:	18eb      	adds	r3, r5, r3
 800d4ea:	9302      	str	r3, [sp, #8]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	9301      	str	r3, [sp, #4]
 800d4f0:	6849      	ldr	r1, [r1, #4]
 800d4f2:	68a3      	ldr	r3, [r4, #8]
 800d4f4:	9004      	str	r0, [sp, #16]
 800d4f6:	9a01      	ldr	r2, [sp, #4]
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	db11      	blt.n	800d520 <__lshift+0x44>
 800d4fc:	9804      	ldr	r0, [sp, #16]
 800d4fe:	f7ff fdd7 	bl	800d0b0 <_Balloc>
 800d502:	0002      	movs	r2, r0
 800d504:	2300      	movs	r3, #0
 800d506:	3214      	adds	r2, #20
 800d508:	0006      	movs	r6, r0
 800d50a:	0011      	movs	r1, r2
 800d50c:	9203      	str	r2, [sp, #12]
 800d50e:	4298      	cmp	r0, r3
 800d510:	d10d      	bne.n	800d52e <__lshift+0x52>
 800d512:	21da      	movs	r1, #218	; 0xda
 800d514:	0002      	movs	r2, r0
 800d516:	4b27      	ldr	r3, [pc, #156]	; (800d5b4 <__lshift+0xd8>)
 800d518:	4827      	ldr	r0, [pc, #156]	; (800d5b8 <__lshift+0xdc>)
 800d51a:	31ff      	adds	r1, #255	; 0xff
 800d51c:	f000 fc3a 	bl	800dd94 <__assert_func>
 800d520:	3101      	adds	r1, #1
 800d522:	005b      	lsls	r3, r3, #1
 800d524:	e7e7      	b.n	800d4f6 <__lshift+0x1a>
 800d526:	2200      	movs	r2, #0
 800d528:	0098      	lsls	r0, r3, #2
 800d52a:	500a      	str	r2, [r1, r0]
 800d52c:	3301      	adds	r3, #1
 800d52e:	42ab      	cmp	r3, r5
 800d530:	dbf9      	blt.n	800d526 <__lshift+0x4a>
 800d532:	43eb      	mvns	r3, r5
 800d534:	17db      	asrs	r3, r3, #31
 800d536:	401d      	ands	r5, r3
 800d538:	9b03      	ldr	r3, [sp, #12]
 800d53a:	00ad      	lsls	r5, r5, #2
 800d53c:	211f      	movs	r1, #31
 800d53e:	0038      	movs	r0, r7
 800d540:	195d      	adds	r5, r3, r5
 800d542:	0023      	movs	r3, r4
 800d544:	6922      	ldr	r2, [r4, #16]
 800d546:	3314      	adds	r3, #20
 800d548:	0092      	lsls	r2, r2, #2
 800d54a:	4008      	ands	r0, r1
 800d54c:	4684      	mov	ip, r0
 800d54e:	189a      	adds	r2, r3, r2
 800d550:	420f      	tst	r7, r1
 800d552:	d02a      	beq.n	800d5aa <__lshift+0xce>
 800d554:	3101      	adds	r1, #1
 800d556:	1a09      	subs	r1, r1, r0
 800d558:	9105      	str	r1, [sp, #20]
 800d55a:	2100      	movs	r1, #0
 800d55c:	9503      	str	r5, [sp, #12]
 800d55e:	4667      	mov	r7, ip
 800d560:	6818      	ldr	r0, [r3, #0]
 800d562:	40b8      	lsls	r0, r7
 800d564:	4301      	orrs	r1, r0
 800d566:	9803      	ldr	r0, [sp, #12]
 800d568:	c002      	stmia	r0!, {r1}
 800d56a:	cb02      	ldmia	r3!, {r1}
 800d56c:	9003      	str	r0, [sp, #12]
 800d56e:	9805      	ldr	r0, [sp, #20]
 800d570:	40c1      	lsrs	r1, r0
 800d572:	429a      	cmp	r2, r3
 800d574:	d8f3      	bhi.n	800d55e <__lshift+0x82>
 800d576:	0020      	movs	r0, r4
 800d578:	3015      	adds	r0, #21
 800d57a:	2304      	movs	r3, #4
 800d57c:	4282      	cmp	r2, r0
 800d57e:	d304      	bcc.n	800d58a <__lshift+0xae>
 800d580:	1b13      	subs	r3, r2, r4
 800d582:	3b15      	subs	r3, #21
 800d584:	089b      	lsrs	r3, r3, #2
 800d586:	3301      	adds	r3, #1
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	50e9      	str	r1, [r5, r3]
 800d58c:	2900      	cmp	r1, #0
 800d58e:	d002      	beq.n	800d596 <__lshift+0xba>
 800d590:	9b02      	ldr	r3, [sp, #8]
 800d592:	3302      	adds	r3, #2
 800d594:	9301      	str	r3, [sp, #4]
 800d596:	9b01      	ldr	r3, [sp, #4]
 800d598:	9804      	ldr	r0, [sp, #16]
 800d59a:	3b01      	subs	r3, #1
 800d59c:	0021      	movs	r1, r4
 800d59e:	6133      	str	r3, [r6, #16]
 800d5a0:	f7ff fdca 	bl	800d138 <_Bfree>
 800d5a4:	0030      	movs	r0, r6
 800d5a6:	b007      	add	sp, #28
 800d5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5aa:	cb02      	ldmia	r3!, {r1}
 800d5ac:	c502      	stmia	r5!, {r1}
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d8fb      	bhi.n	800d5aa <__lshift+0xce>
 800d5b2:	e7f0      	b.n	800d596 <__lshift+0xba>
 800d5b4:	0800ec43 	.word	0x0800ec43
 800d5b8:	0800ecb4 	.word	0x0800ecb4

0800d5bc <__mcmp>:
 800d5bc:	6902      	ldr	r2, [r0, #16]
 800d5be:	690b      	ldr	r3, [r1, #16]
 800d5c0:	b530      	push	{r4, r5, lr}
 800d5c2:	0004      	movs	r4, r0
 800d5c4:	1ad0      	subs	r0, r2, r3
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d10d      	bne.n	800d5e6 <__mcmp+0x2a>
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	3414      	adds	r4, #20
 800d5ce:	3114      	adds	r1, #20
 800d5d0:	18e2      	adds	r2, r4, r3
 800d5d2:	18c9      	adds	r1, r1, r3
 800d5d4:	3a04      	subs	r2, #4
 800d5d6:	3904      	subs	r1, #4
 800d5d8:	6815      	ldr	r5, [r2, #0]
 800d5da:	680b      	ldr	r3, [r1, #0]
 800d5dc:	429d      	cmp	r5, r3
 800d5de:	d003      	beq.n	800d5e8 <__mcmp+0x2c>
 800d5e0:	2001      	movs	r0, #1
 800d5e2:	429d      	cmp	r5, r3
 800d5e4:	d303      	bcc.n	800d5ee <__mcmp+0x32>
 800d5e6:	bd30      	pop	{r4, r5, pc}
 800d5e8:	4294      	cmp	r4, r2
 800d5ea:	d3f3      	bcc.n	800d5d4 <__mcmp+0x18>
 800d5ec:	e7fb      	b.n	800d5e6 <__mcmp+0x2a>
 800d5ee:	4240      	negs	r0, r0
 800d5f0:	e7f9      	b.n	800d5e6 <__mcmp+0x2a>
	...

0800d5f4 <__mdiff>:
 800d5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5f6:	000e      	movs	r6, r1
 800d5f8:	0007      	movs	r7, r0
 800d5fa:	0011      	movs	r1, r2
 800d5fc:	0030      	movs	r0, r6
 800d5fe:	b087      	sub	sp, #28
 800d600:	0014      	movs	r4, r2
 800d602:	f7ff ffdb 	bl	800d5bc <__mcmp>
 800d606:	1e05      	subs	r5, r0, #0
 800d608:	d110      	bne.n	800d62c <__mdiff+0x38>
 800d60a:	0001      	movs	r1, r0
 800d60c:	0038      	movs	r0, r7
 800d60e:	f7ff fd4f 	bl	800d0b0 <_Balloc>
 800d612:	1e02      	subs	r2, r0, #0
 800d614:	d104      	bne.n	800d620 <__mdiff+0x2c>
 800d616:	4b40      	ldr	r3, [pc, #256]	; (800d718 <__mdiff+0x124>)
 800d618:	4940      	ldr	r1, [pc, #256]	; (800d71c <__mdiff+0x128>)
 800d61a:	4841      	ldr	r0, [pc, #260]	; (800d720 <__mdiff+0x12c>)
 800d61c:	f000 fbba 	bl	800dd94 <__assert_func>
 800d620:	2301      	movs	r3, #1
 800d622:	6145      	str	r5, [r0, #20]
 800d624:	6103      	str	r3, [r0, #16]
 800d626:	0010      	movs	r0, r2
 800d628:	b007      	add	sp, #28
 800d62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d62c:	2301      	movs	r3, #1
 800d62e:	9301      	str	r3, [sp, #4]
 800d630:	2800      	cmp	r0, #0
 800d632:	db04      	blt.n	800d63e <__mdiff+0x4a>
 800d634:	0023      	movs	r3, r4
 800d636:	0034      	movs	r4, r6
 800d638:	001e      	movs	r6, r3
 800d63a:	2300      	movs	r3, #0
 800d63c:	9301      	str	r3, [sp, #4]
 800d63e:	0038      	movs	r0, r7
 800d640:	6861      	ldr	r1, [r4, #4]
 800d642:	f7ff fd35 	bl	800d0b0 <_Balloc>
 800d646:	1e02      	subs	r2, r0, #0
 800d648:	d103      	bne.n	800d652 <__mdiff+0x5e>
 800d64a:	2190      	movs	r1, #144	; 0x90
 800d64c:	4b32      	ldr	r3, [pc, #200]	; (800d718 <__mdiff+0x124>)
 800d64e:	0089      	lsls	r1, r1, #2
 800d650:	e7e3      	b.n	800d61a <__mdiff+0x26>
 800d652:	9b01      	ldr	r3, [sp, #4]
 800d654:	2700      	movs	r7, #0
 800d656:	60c3      	str	r3, [r0, #12]
 800d658:	6920      	ldr	r0, [r4, #16]
 800d65a:	3414      	adds	r4, #20
 800d65c:	9401      	str	r4, [sp, #4]
 800d65e:	9b01      	ldr	r3, [sp, #4]
 800d660:	0084      	lsls	r4, r0, #2
 800d662:	191b      	adds	r3, r3, r4
 800d664:	0034      	movs	r4, r6
 800d666:	9302      	str	r3, [sp, #8]
 800d668:	6933      	ldr	r3, [r6, #16]
 800d66a:	3414      	adds	r4, #20
 800d66c:	0099      	lsls	r1, r3, #2
 800d66e:	1863      	adds	r3, r4, r1
 800d670:	9303      	str	r3, [sp, #12]
 800d672:	0013      	movs	r3, r2
 800d674:	3314      	adds	r3, #20
 800d676:	469c      	mov	ip, r3
 800d678:	9305      	str	r3, [sp, #20]
 800d67a:	9b01      	ldr	r3, [sp, #4]
 800d67c:	9304      	str	r3, [sp, #16]
 800d67e:	9b04      	ldr	r3, [sp, #16]
 800d680:	cc02      	ldmia	r4!, {r1}
 800d682:	cb20      	ldmia	r3!, {r5}
 800d684:	9304      	str	r3, [sp, #16]
 800d686:	b2ab      	uxth	r3, r5
 800d688:	19df      	adds	r7, r3, r7
 800d68a:	b28b      	uxth	r3, r1
 800d68c:	1afb      	subs	r3, r7, r3
 800d68e:	0c2d      	lsrs	r5, r5, #16
 800d690:	0c09      	lsrs	r1, r1, #16
 800d692:	1a69      	subs	r1, r5, r1
 800d694:	141d      	asrs	r5, r3, #16
 800d696:	1949      	adds	r1, r1, r5
 800d698:	140f      	asrs	r7, r1, #16
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	0409      	lsls	r1, r1, #16
 800d69e:	430b      	orrs	r3, r1
 800d6a0:	4661      	mov	r1, ip
 800d6a2:	c108      	stmia	r1!, {r3}
 800d6a4:	9b03      	ldr	r3, [sp, #12]
 800d6a6:	468c      	mov	ip, r1
 800d6a8:	42a3      	cmp	r3, r4
 800d6aa:	d8e8      	bhi.n	800d67e <__mdiff+0x8a>
 800d6ac:	0031      	movs	r1, r6
 800d6ae:	9c03      	ldr	r4, [sp, #12]
 800d6b0:	3115      	adds	r1, #21
 800d6b2:	2304      	movs	r3, #4
 800d6b4:	428c      	cmp	r4, r1
 800d6b6:	d304      	bcc.n	800d6c2 <__mdiff+0xce>
 800d6b8:	1ba3      	subs	r3, r4, r6
 800d6ba:	3b15      	subs	r3, #21
 800d6bc:	089b      	lsrs	r3, r3, #2
 800d6be:	3301      	adds	r3, #1
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	9901      	ldr	r1, [sp, #4]
 800d6c4:	18cc      	adds	r4, r1, r3
 800d6c6:	9905      	ldr	r1, [sp, #20]
 800d6c8:	0026      	movs	r6, r4
 800d6ca:	18cb      	adds	r3, r1, r3
 800d6cc:	469c      	mov	ip, r3
 800d6ce:	9902      	ldr	r1, [sp, #8]
 800d6d0:	428e      	cmp	r6, r1
 800d6d2:	d310      	bcc.n	800d6f6 <__mdiff+0x102>
 800d6d4:	9e02      	ldr	r6, [sp, #8]
 800d6d6:	1ee5      	subs	r5, r4, #3
 800d6d8:	2100      	movs	r1, #0
 800d6da:	42ae      	cmp	r6, r5
 800d6dc:	d304      	bcc.n	800d6e8 <__mdiff+0xf4>
 800d6de:	0031      	movs	r1, r6
 800d6e0:	3103      	adds	r1, #3
 800d6e2:	1b09      	subs	r1, r1, r4
 800d6e4:	0889      	lsrs	r1, r1, #2
 800d6e6:	0089      	lsls	r1, r1, #2
 800d6e8:	185b      	adds	r3, r3, r1
 800d6ea:	3b04      	subs	r3, #4
 800d6ec:	6819      	ldr	r1, [r3, #0]
 800d6ee:	2900      	cmp	r1, #0
 800d6f0:	d00f      	beq.n	800d712 <__mdiff+0x11e>
 800d6f2:	6110      	str	r0, [r2, #16]
 800d6f4:	e797      	b.n	800d626 <__mdiff+0x32>
 800d6f6:	ce02      	ldmia	r6!, {r1}
 800d6f8:	b28d      	uxth	r5, r1
 800d6fa:	19ed      	adds	r5, r5, r7
 800d6fc:	0c0f      	lsrs	r7, r1, #16
 800d6fe:	1429      	asrs	r1, r5, #16
 800d700:	1879      	adds	r1, r7, r1
 800d702:	140f      	asrs	r7, r1, #16
 800d704:	b2ad      	uxth	r5, r5
 800d706:	0409      	lsls	r1, r1, #16
 800d708:	430d      	orrs	r5, r1
 800d70a:	4661      	mov	r1, ip
 800d70c:	c120      	stmia	r1!, {r5}
 800d70e:	468c      	mov	ip, r1
 800d710:	e7dd      	b.n	800d6ce <__mdiff+0xda>
 800d712:	3801      	subs	r0, #1
 800d714:	e7e9      	b.n	800d6ea <__mdiff+0xf6>
 800d716:	46c0      	nop			; (mov r8, r8)
 800d718:	0800ec43 	.word	0x0800ec43
 800d71c:	00000232 	.word	0x00000232
 800d720:	0800ecb4 	.word	0x0800ecb4

0800d724 <__d2b>:
 800d724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d726:	2101      	movs	r1, #1
 800d728:	0014      	movs	r4, r2
 800d72a:	001e      	movs	r6, r3
 800d72c:	9f08      	ldr	r7, [sp, #32]
 800d72e:	f7ff fcbf 	bl	800d0b0 <_Balloc>
 800d732:	1e05      	subs	r5, r0, #0
 800d734:	d105      	bne.n	800d742 <__d2b+0x1e>
 800d736:	0002      	movs	r2, r0
 800d738:	4b26      	ldr	r3, [pc, #152]	; (800d7d4 <__d2b+0xb0>)
 800d73a:	4927      	ldr	r1, [pc, #156]	; (800d7d8 <__d2b+0xb4>)
 800d73c:	4827      	ldr	r0, [pc, #156]	; (800d7dc <__d2b+0xb8>)
 800d73e:	f000 fb29 	bl	800dd94 <__assert_func>
 800d742:	0333      	lsls	r3, r6, #12
 800d744:	0076      	lsls	r6, r6, #1
 800d746:	0b1b      	lsrs	r3, r3, #12
 800d748:	0d76      	lsrs	r6, r6, #21
 800d74a:	d124      	bne.n	800d796 <__d2b+0x72>
 800d74c:	9301      	str	r3, [sp, #4]
 800d74e:	2c00      	cmp	r4, #0
 800d750:	d027      	beq.n	800d7a2 <__d2b+0x7e>
 800d752:	4668      	mov	r0, sp
 800d754:	9400      	str	r4, [sp, #0]
 800d756:	f7ff fd71 	bl	800d23c <__lo0bits>
 800d75a:	9c00      	ldr	r4, [sp, #0]
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d01e      	beq.n	800d79e <__d2b+0x7a>
 800d760:	9b01      	ldr	r3, [sp, #4]
 800d762:	2120      	movs	r1, #32
 800d764:	001a      	movs	r2, r3
 800d766:	1a09      	subs	r1, r1, r0
 800d768:	408a      	lsls	r2, r1
 800d76a:	40c3      	lsrs	r3, r0
 800d76c:	4322      	orrs	r2, r4
 800d76e:	616a      	str	r2, [r5, #20]
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	9c01      	ldr	r4, [sp, #4]
 800d774:	61ac      	str	r4, [r5, #24]
 800d776:	1e63      	subs	r3, r4, #1
 800d778:	419c      	sbcs	r4, r3
 800d77a:	3401      	adds	r4, #1
 800d77c:	612c      	str	r4, [r5, #16]
 800d77e:	2e00      	cmp	r6, #0
 800d780:	d018      	beq.n	800d7b4 <__d2b+0x90>
 800d782:	4b17      	ldr	r3, [pc, #92]	; (800d7e0 <__d2b+0xbc>)
 800d784:	18f6      	adds	r6, r6, r3
 800d786:	2335      	movs	r3, #53	; 0x35
 800d788:	1836      	adds	r6, r6, r0
 800d78a:	1a18      	subs	r0, r3, r0
 800d78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d78e:	603e      	str	r6, [r7, #0]
 800d790:	6018      	str	r0, [r3, #0]
 800d792:	0028      	movs	r0, r5
 800d794:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d796:	2280      	movs	r2, #128	; 0x80
 800d798:	0352      	lsls	r2, r2, #13
 800d79a:	4313      	orrs	r3, r2
 800d79c:	e7d6      	b.n	800d74c <__d2b+0x28>
 800d79e:	616c      	str	r4, [r5, #20]
 800d7a0:	e7e7      	b.n	800d772 <__d2b+0x4e>
 800d7a2:	a801      	add	r0, sp, #4
 800d7a4:	f7ff fd4a 	bl	800d23c <__lo0bits>
 800d7a8:	2401      	movs	r4, #1
 800d7aa:	9b01      	ldr	r3, [sp, #4]
 800d7ac:	612c      	str	r4, [r5, #16]
 800d7ae:	616b      	str	r3, [r5, #20]
 800d7b0:	3020      	adds	r0, #32
 800d7b2:	e7e4      	b.n	800d77e <__d2b+0x5a>
 800d7b4:	4b0b      	ldr	r3, [pc, #44]	; (800d7e4 <__d2b+0xc0>)
 800d7b6:	18c0      	adds	r0, r0, r3
 800d7b8:	4b0b      	ldr	r3, [pc, #44]	; (800d7e8 <__d2b+0xc4>)
 800d7ba:	6038      	str	r0, [r7, #0]
 800d7bc:	18e3      	adds	r3, r4, r3
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	18eb      	adds	r3, r5, r3
 800d7c2:	6958      	ldr	r0, [r3, #20]
 800d7c4:	f7ff fd20 	bl	800d208 <__hi0bits>
 800d7c8:	0164      	lsls	r4, r4, #5
 800d7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7cc:	1a24      	subs	r4, r4, r0
 800d7ce:	601c      	str	r4, [r3, #0]
 800d7d0:	e7df      	b.n	800d792 <__d2b+0x6e>
 800d7d2:	46c0      	nop			; (mov r8, r8)
 800d7d4:	0800ec43 	.word	0x0800ec43
 800d7d8:	0000030a 	.word	0x0000030a
 800d7dc:	0800ecb4 	.word	0x0800ecb4
 800d7e0:	fffffbcd 	.word	0xfffffbcd
 800d7e4:	fffffbce 	.word	0xfffffbce
 800d7e8:	3fffffff 	.word	0x3fffffff

0800d7ec <_calloc_r>:
 800d7ec:	434a      	muls	r2, r1
 800d7ee:	b570      	push	{r4, r5, r6, lr}
 800d7f0:	0011      	movs	r1, r2
 800d7f2:	0015      	movs	r5, r2
 800d7f4:	f000 f852 	bl	800d89c <_malloc_r>
 800d7f8:	1e04      	subs	r4, r0, #0
 800d7fa:	d003      	beq.n	800d804 <_calloc_r+0x18>
 800d7fc:	002a      	movs	r2, r5
 800d7fe:	2100      	movs	r1, #0
 800d800:	f7fd fd59 	bl	800b2b6 <memset>
 800d804:	0020      	movs	r0, r4
 800d806:	bd70      	pop	{r4, r5, r6, pc}

0800d808 <_free_r>:
 800d808:	b570      	push	{r4, r5, r6, lr}
 800d80a:	0005      	movs	r5, r0
 800d80c:	2900      	cmp	r1, #0
 800d80e:	d010      	beq.n	800d832 <_free_r+0x2a>
 800d810:	1f0c      	subs	r4, r1, #4
 800d812:	6823      	ldr	r3, [r4, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	da00      	bge.n	800d81a <_free_r+0x12>
 800d818:	18e4      	adds	r4, r4, r3
 800d81a:	0028      	movs	r0, r5
 800d81c:	f000 fb44 	bl	800dea8 <__malloc_lock>
 800d820:	4a1d      	ldr	r2, [pc, #116]	; (800d898 <_free_r+0x90>)
 800d822:	6813      	ldr	r3, [r2, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d105      	bne.n	800d834 <_free_r+0x2c>
 800d828:	6063      	str	r3, [r4, #4]
 800d82a:	6014      	str	r4, [r2, #0]
 800d82c:	0028      	movs	r0, r5
 800d82e:	f000 fb43 	bl	800deb8 <__malloc_unlock>
 800d832:	bd70      	pop	{r4, r5, r6, pc}
 800d834:	42a3      	cmp	r3, r4
 800d836:	d908      	bls.n	800d84a <_free_r+0x42>
 800d838:	6821      	ldr	r1, [r4, #0]
 800d83a:	1860      	adds	r0, r4, r1
 800d83c:	4283      	cmp	r3, r0
 800d83e:	d1f3      	bne.n	800d828 <_free_r+0x20>
 800d840:	6818      	ldr	r0, [r3, #0]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	1841      	adds	r1, r0, r1
 800d846:	6021      	str	r1, [r4, #0]
 800d848:	e7ee      	b.n	800d828 <_free_r+0x20>
 800d84a:	001a      	movs	r2, r3
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d001      	beq.n	800d856 <_free_r+0x4e>
 800d852:	42a3      	cmp	r3, r4
 800d854:	d9f9      	bls.n	800d84a <_free_r+0x42>
 800d856:	6811      	ldr	r1, [r2, #0]
 800d858:	1850      	adds	r0, r2, r1
 800d85a:	42a0      	cmp	r0, r4
 800d85c:	d10b      	bne.n	800d876 <_free_r+0x6e>
 800d85e:	6820      	ldr	r0, [r4, #0]
 800d860:	1809      	adds	r1, r1, r0
 800d862:	1850      	adds	r0, r2, r1
 800d864:	6011      	str	r1, [r2, #0]
 800d866:	4283      	cmp	r3, r0
 800d868:	d1e0      	bne.n	800d82c <_free_r+0x24>
 800d86a:	6818      	ldr	r0, [r3, #0]
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	1841      	adds	r1, r0, r1
 800d870:	6011      	str	r1, [r2, #0]
 800d872:	6053      	str	r3, [r2, #4]
 800d874:	e7da      	b.n	800d82c <_free_r+0x24>
 800d876:	42a0      	cmp	r0, r4
 800d878:	d902      	bls.n	800d880 <_free_r+0x78>
 800d87a:	230c      	movs	r3, #12
 800d87c:	602b      	str	r3, [r5, #0]
 800d87e:	e7d5      	b.n	800d82c <_free_r+0x24>
 800d880:	6821      	ldr	r1, [r4, #0]
 800d882:	1860      	adds	r0, r4, r1
 800d884:	4283      	cmp	r3, r0
 800d886:	d103      	bne.n	800d890 <_free_r+0x88>
 800d888:	6818      	ldr	r0, [r3, #0]
 800d88a:	685b      	ldr	r3, [r3, #4]
 800d88c:	1841      	adds	r1, r0, r1
 800d88e:	6021      	str	r1, [r4, #0]
 800d890:	6063      	str	r3, [r4, #4]
 800d892:	6054      	str	r4, [r2, #4]
 800d894:	e7ca      	b.n	800d82c <_free_r+0x24>
 800d896:	46c0      	nop			; (mov r8, r8)
 800d898:	20000270 	.word	0x20000270

0800d89c <_malloc_r>:
 800d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89e:	2303      	movs	r3, #3
 800d8a0:	1ccd      	adds	r5, r1, #3
 800d8a2:	439d      	bics	r5, r3
 800d8a4:	3508      	adds	r5, #8
 800d8a6:	0006      	movs	r6, r0
 800d8a8:	2d0c      	cmp	r5, #12
 800d8aa:	d21f      	bcs.n	800d8ec <_malloc_r+0x50>
 800d8ac:	250c      	movs	r5, #12
 800d8ae:	42a9      	cmp	r1, r5
 800d8b0:	d81e      	bhi.n	800d8f0 <_malloc_r+0x54>
 800d8b2:	0030      	movs	r0, r6
 800d8b4:	f000 faf8 	bl	800dea8 <__malloc_lock>
 800d8b8:	4925      	ldr	r1, [pc, #148]	; (800d950 <_malloc_r+0xb4>)
 800d8ba:	680a      	ldr	r2, [r1, #0]
 800d8bc:	0014      	movs	r4, r2
 800d8be:	2c00      	cmp	r4, #0
 800d8c0:	d11a      	bne.n	800d8f8 <_malloc_r+0x5c>
 800d8c2:	4f24      	ldr	r7, [pc, #144]	; (800d954 <_malloc_r+0xb8>)
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d104      	bne.n	800d8d4 <_malloc_r+0x38>
 800d8ca:	0021      	movs	r1, r4
 800d8cc:	0030      	movs	r0, r6
 800d8ce:	f000 f9ef 	bl	800dcb0 <_sbrk_r>
 800d8d2:	6038      	str	r0, [r7, #0]
 800d8d4:	0029      	movs	r1, r5
 800d8d6:	0030      	movs	r0, r6
 800d8d8:	f000 f9ea 	bl	800dcb0 <_sbrk_r>
 800d8dc:	1c43      	adds	r3, r0, #1
 800d8de:	d12b      	bne.n	800d938 <_malloc_r+0x9c>
 800d8e0:	230c      	movs	r3, #12
 800d8e2:	0030      	movs	r0, r6
 800d8e4:	6033      	str	r3, [r6, #0]
 800d8e6:	f000 fae7 	bl	800deb8 <__malloc_unlock>
 800d8ea:	e003      	b.n	800d8f4 <_malloc_r+0x58>
 800d8ec:	2d00      	cmp	r5, #0
 800d8ee:	dade      	bge.n	800d8ae <_malloc_r+0x12>
 800d8f0:	230c      	movs	r3, #12
 800d8f2:	6033      	str	r3, [r6, #0]
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8f8:	6823      	ldr	r3, [r4, #0]
 800d8fa:	1b5b      	subs	r3, r3, r5
 800d8fc:	d419      	bmi.n	800d932 <_malloc_r+0x96>
 800d8fe:	2b0b      	cmp	r3, #11
 800d900:	d903      	bls.n	800d90a <_malloc_r+0x6e>
 800d902:	6023      	str	r3, [r4, #0]
 800d904:	18e4      	adds	r4, r4, r3
 800d906:	6025      	str	r5, [r4, #0]
 800d908:	e003      	b.n	800d912 <_malloc_r+0x76>
 800d90a:	6863      	ldr	r3, [r4, #4]
 800d90c:	42a2      	cmp	r2, r4
 800d90e:	d10e      	bne.n	800d92e <_malloc_r+0x92>
 800d910:	600b      	str	r3, [r1, #0]
 800d912:	0030      	movs	r0, r6
 800d914:	f000 fad0 	bl	800deb8 <__malloc_unlock>
 800d918:	0020      	movs	r0, r4
 800d91a:	2207      	movs	r2, #7
 800d91c:	300b      	adds	r0, #11
 800d91e:	1d23      	adds	r3, r4, #4
 800d920:	4390      	bics	r0, r2
 800d922:	1ac2      	subs	r2, r0, r3
 800d924:	4298      	cmp	r0, r3
 800d926:	d0e6      	beq.n	800d8f6 <_malloc_r+0x5a>
 800d928:	1a1b      	subs	r3, r3, r0
 800d92a:	50a3      	str	r3, [r4, r2]
 800d92c:	e7e3      	b.n	800d8f6 <_malloc_r+0x5a>
 800d92e:	6053      	str	r3, [r2, #4]
 800d930:	e7ef      	b.n	800d912 <_malloc_r+0x76>
 800d932:	0022      	movs	r2, r4
 800d934:	6864      	ldr	r4, [r4, #4]
 800d936:	e7c2      	b.n	800d8be <_malloc_r+0x22>
 800d938:	2303      	movs	r3, #3
 800d93a:	1cc4      	adds	r4, r0, #3
 800d93c:	439c      	bics	r4, r3
 800d93e:	42a0      	cmp	r0, r4
 800d940:	d0e1      	beq.n	800d906 <_malloc_r+0x6a>
 800d942:	1a21      	subs	r1, r4, r0
 800d944:	0030      	movs	r0, r6
 800d946:	f000 f9b3 	bl	800dcb0 <_sbrk_r>
 800d94a:	1c43      	adds	r3, r0, #1
 800d94c:	d1db      	bne.n	800d906 <_malloc_r+0x6a>
 800d94e:	e7c7      	b.n	800d8e0 <_malloc_r+0x44>
 800d950:	20000270 	.word	0x20000270
 800d954:	20000274 	.word	0x20000274

0800d958 <__sfputc_r>:
 800d958:	6893      	ldr	r3, [r2, #8]
 800d95a:	b510      	push	{r4, lr}
 800d95c:	3b01      	subs	r3, #1
 800d95e:	6093      	str	r3, [r2, #8]
 800d960:	2b00      	cmp	r3, #0
 800d962:	da04      	bge.n	800d96e <__sfputc_r+0x16>
 800d964:	6994      	ldr	r4, [r2, #24]
 800d966:	42a3      	cmp	r3, r4
 800d968:	db07      	blt.n	800d97a <__sfputc_r+0x22>
 800d96a:	290a      	cmp	r1, #10
 800d96c:	d005      	beq.n	800d97a <__sfputc_r+0x22>
 800d96e:	6813      	ldr	r3, [r2, #0]
 800d970:	1c58      	adds	r0, r3, #1
 800d972:	6010      	str	r0, [r2, #0]
 800d974:	7019      	strb	r1, [r3, #0]
 800d976:	0008      	movs	r0, r1
 800d978:	bd10      	pop	{r4, pc}
 800d97a:	f7fe f9c9 	bl	800bd10 <__swbuf_r>
 800d97e:	0001      	movs	r1, r0
 800d980:	e7f9      	b.n	800d976 <__sfputc_r+0x1e>

0800d982 <__sfputs_r>:
 800d982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d984:	0006      	movs	r6, r0
 800d986:	000f      	movs	r7, r1
 800d988:	0014      	movs	r4, r2
 800d98a:	18d5      	adds	r5, r2, r3
 800d98c:	42ac      	cmp	r4, r5
 800d98e:	d101      	bne.n	800d994 <__sfputs_r+0x12>
 800d990:	2000      	movs	r0, #0
 800d992:	e007      	b.n	800d9a4 <__sfputs_r+0x22>
 800d994:	7821      	ldrb	r1, [r4, #0]
 800d996:	003a      	movs	r2, r7
 800d998:	0030      	movs	r0, r6
 800d99a:	f7ff ffdd 	bl	800d958 <__sfputc_r>
 800d99e:	3401      	adds	r4, #1
 800d9a0:	1c43      	adds	r3, r0, #1
 800d9a2:	d1f3      	bne.n	800d98c <__sfputs_r+0xa>
 800d9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d9a8 <_vfiprintf_r>:
 800d9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9aa:	b0a1      	sub	sp, #132	; 0x84
 800d9ac:	0006      	movs	r6, r0
 800d9ae:	000c      	movs	r4, r1
 800d9b0:	001f      	movs	r7, r3
 800d9b2:	9203      	str	r2, [sp, #12]
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d004      	beq.n	800d9c2 <_vfiprintf_r+0x1a>
 800d9b8:	6983      	ldr	r3, [r0, #24]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d101      	bne.n	800d9c2 <_vfiprintf_r+0x1a>
 800d9be:	f7ff fa4d 	bl	800ce5c <__sinit>
 800d9c2:	4b8e      	ldr	r3, [pc, #568]	; (800dbfc <_vfiprintf_r+0x254>)
 800d9c4:	429c      	cmp	r4, r3
 800d9c6:	d11c      	bne.n	800da02 <_vfiprintf_r+0x5a>
 800d9c8:	6874      	ldr	r4, [r6, #4]
 800d9ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9cc:	07db      	lsls	r3, r3, #31
 800d9ce:	d405      	bmi.n	800d9dc <_vfiprintf_r+0x34>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	059b      	lsls	r3, r3, #22
 800d9d4:	d402      	bmi.n	800d9dc <_vfiprintf_r+0x34>
 800d9d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9d8:	f7ff fae5 	bl	800cfa6 <__retarget_lock_acquire_recursive>
 800d9dc:	89a3      	ldrh	r3, [r4, #12]
 800d9de:	071b      	lsls	r3, r3, #28
 800d9e0:	d502      	bpl.n	800d9e8 <_vfiprintf_r+0x40>
 800d9e2:	6923      	ldr	r3, [r4, #16]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d11d      	bne.n	800da24 <_vfiprintf_r+0x7c>
 800d9e8:	0021      	movs	r1, r4
 800d9ea:	0030      	movs	r0, r6
 800d9ec:	f7fe f9e6 	bl	800bdbc <__swsetup_r>
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	d017      	beq.n	800da24 <_vfiprintf_r+0x7c>
 800d9f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9f6:	07db      	lsls	r3, r3, #31
 800d9f8:	d50d      	bpl.n	800da16 <_vfiprintf_r+0x6e>
 800d9fa:	2001      	movs	r0, #1
 800d9fc:	4240      	negs	r0, r0
 800d9fe:	b021      	add	sp, #132	; 0x84
 800da00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da02:	4b7f      	ldr	r3, [pc, #508]	; (800dc00 <_vfiprintf_r+0x258>)
 800da04:	429c      	cmp	r4, r3
 800da06:	d101      	bne.n	800da0c <_vfiprintf_r+0x64>
 800da08:	68b4      	ldr	r4, [r6, #8]
 800da0a:	e7de      	b.n	800d9ca <_vfiprintf_r+0x22>
 800da0c:	4b7d      	ldr	r3, [pc, #500]	; (800dc04 <_vfiprintf_r+0x25c>)
 800da0e:	429c      	cmp	r4, r3
 800da10:	d1db      	bne.n	800d9ca <_vfiprintf_r+0x22>
 800da12:	68f4      	ldr	r4, [r6, #12]
 800da14:	e7d9      	b.n	800d9ca <_vfiprintf_r+0x22>
 800da16:	89a3      	ldrh	r3, [r4, #12]
 800da18:	059b      	lsls	r3, r3, #22
 800da1a:	d4ee      	bmi.n	800d9fa <_vfiprintf_r+0x52>
 800da1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da1e:	f7ff fac3 	bl	800cfa8 <__retarget_lock_release_recursive>
 800da22:	e7ea      	b.n	800d9fa <_vfiprintf_r+0x52>
 800da24:	2300      	movs	r3, #0
 800da26:	ad08      	add	r5, sp, #32
 800da28:	616b      	str	r3, [r5, #20]
 800da2a:	3320      	adds	r3, #32
 800da2c:	766b      	strb	r3, [r5, #25]
 800da2e:	3310      	adds	r3, #16
 800da30:	76ab      	strb	r3, [r5, #26]
 800da32:	9707      	str	r7, [sp, #28]
 800da34:	9f03      	ldr	r7, [sp, #12]
 800da36:	783b      	ldrb	r3, [r7, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d001      	beq.n	800da40 <_vfiprintf_r+0x98>
 800da3c:	2b25      	cmp	r3, #37	; 0x25
 800da3e:	d14e      	bne.n	800dade <_vfiprintf_r+0x136>
 800da40:	9b03      	ldr	r3, [sp, #12]
 800da42:	1afb      	subs	r3, r7, r3
 800da44:	9305      	str	r3, [sp, #20]
 800da46:	9b03      	ldr	r3, [sp, #12]
 800da48:	429f      	cmp	r7, r3
 800da4a:	d00d      	beq.n	800da68 <_vfiprintf_r+0xc0>
 800da4c:	9b05      	ldr	r3, [sp, #20]
 800da4e:	0021      	movs	r1, r4
 800da50:	0030      	movs	r0, r6
 800da52:	9a03      	ldr	r2, [sp, #12]
 800da54:	f7ff ff95 	bl	800d982 <__sfputs_r>
 800da58:	1c43      	adds	r3, r0, #1
 800da5a:	d100      	bne.n	800da5e <_vfiprintf_r+0xb6>
 800da5c:	e0b5      	b.n	800dbca <_vfiprintf_r+0x222>
 800da5e:	696a      	ldr	r2, [r5, #20]
 800da60:	9b05      	ldr	r3, [sp, #20]
 800da62:	4694      	mov	ip, r2
 800da64:	4463      	add	r3, ip
 800da66:	616b      	str	r3, [r5, #20]
 800da68:	783b      	ldrb	r3, [r7, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d100      	bne.n	800da70 <_vfiprintf_r+0xc8>
 800da6e:	e0ac      	b.n	800dbca <_vfiprintf_r+0x222>
 800da70:	2201      	movs	r2, #1
 800da72:	1c7b      	adds	r3, r7, #1
 800da74:	9303      	str	r3, [sp, #12]
 800da76:	2300      	movs	r3, #0
 800da78:	4252      	negs	r2, r2
 800da7a:	606a      	str	r2, [r5, #4]
 800da7c:	a904      	add	r1, sp, #16
 800da7e:	3254      	adds	r2, #84	; 0x54
 800da80:	1852      	adds	r2, r2, r1
 800da82:	602b      	str	r3, [r5, #0]
 800da84:	60eb      	str	r3, [r5, #12]
 800da86:	60ab      	str	r3, [r5, #8]
 800da88:	7013      	strb	r3, [r2, #0]
 800da8a:	65ab      	str	r3, [r5, #88]	; 0x58
 800da8c:	9b03      	ldr	r3, [sp, #12]
 800da8e:	2205      	movs	r2, #5
 800da90:	7819      	ldrb	r1, [r3, #0]
 800da92:	485d      	ldr	r0, [pc, #372]	; (800dc08 <_vfiprintf_r+0x260>)
 800da94:	f7ff fb00 	bl	800d098 <memchr>
 800da98:	9b03      	ldr	r3, [sp, #12]
 800da9a:	1c5f      	adds	r7, r3, #1
 800da9c:	2800      	cmp	r0, #0
 800da9e:	d120      	bne.n	800dae2 <_vfiprintf_r+0x13a>
 800daa0:	682a      	ldr	r2, [r5, #0]
 800daa2:	06d3      	lsls	r3, r2, #27
 800daa4:	d504      	bpl.n	800dab0 <_vfiprintf_r+0x108>
 800daa6:	2353      	movs	r3, #83	; 0x53
 800daa8:	a904      	add	r1, sp, #16
 800daaa:	185b      	adds	r3, r3, r1
 800daac:	2120      	movs	r1, #32
 800daae:	7019      	strb	r1, [r3, #0]
 800dab0:	0713      	lsls	r3, r2, #28
 800dab2:	d504      	bpl.n	800dabe <_vfiprintf_r+0x116>
 800dab4:	2353      	movs	r3, #83	; 0x53
 800dab6:	a904      	add	r1, sp, #16
 800dab8:	185b      	adds	r3, r3, r1
 800daba:	212b      	movs	r1, #43	; 0x2b
 800dabc:	7019      	strb	r1, [r3, #0]
 800dabe:	9b03      	ldr	r3, [sp, #12]
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	2b2a      	cmp	r3, #42	; 0x2a
 800dac4:	d016      	beq.n	800daf4 <_vfiprintf_r+0x14c>
 800dac6:	2100      	movs	r1, #0
 800dac8:	68eb      	ldr	r3, [r5, #12]
 800daca:	9f03      	ldr	r7, [sp, #12]
 800dacc:	783a      	ldrb	r2, [r7, #0]
 800dace:	1c78      	adds	r0, r7, #1
 800dad0:	3a30      	subs	r2, #48	; 0x30
 800dad2:	4684      	mov	ip, r0
 800dad4:	2a09      	cmp	r2, #9
 800dad6:	d94f      	bls.n	800db78 <_vfiprintf_r+0x1d0>
 800dad8:	2900      	cmp	r1, #0
 800dada:	d111      	bne.n	800db00 <_vfiprintf_r+0x158>
 800dadc:	e017      	b.n	800db0e <_vfiprintf_r+0x166>
 800dade:	3701      	adds	r7, #1
 800dae0:	e7a9      	b.n	800da36 <_vfiprintf_r+0x8e>
 800dae2:	4b49      	ldr	r3, [pc, #292]	; (800dc08 <_vfiprintf_r+0x260>)
 800dae4:	682a      	ldr	r2, [r5, #0]
 800dae6:	1ac0      	subs	r0, r0, r3
 800dae8:	2301      	movs	r3, #1
 800daea:	4083      	lsls	r3, r0
 800daec:	4313      	orrs	r3, r2
 800daee:	602b      	str	r3, [r5, #0]
 800daf0:	9703      	str	r7, [sp, #12]
 800daf2:	e7cb      	b.n	800da8c <_vfiprintf_r+0xe4>
 800daf4:	9b07      	ldr	r3, [sp, #28]
 800daf6:	1d19      	adds	r1, r3, #4
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	9107      	str	r1, [sp, #28]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	db01      	blt.n	800db04 <_vfiprintf_r+0x15c>
 800db00:	930b      	str	r3, [sp, #44]	; 0x2c
 800db02:	e004      	b.n	800db0e <_vfiprintf_r+0x166>
 800db04:	425b      	negs	r3, r3
 800db06:	60eb      	str	r3, [r5, #12]
 800db08:	2302      	movs	r3, #2
 800db0a:	4313      	orrs	r3, r2
 800db0c:	602b      	str	r3, [r5, #0]
 800db0e:	783b      	ldrb	r3, [r7, #0]
 800db10:	2b2e      	cmp	r3, #46	; 0x2e
 800db12:	d10a      	bne.n	800db2a <_vfiprintf_r+0x182>
 800db14:	787b      	ldrb	r3, [r7, #1]
 800db16:	2b2a      	cmp	r3, #42	; 0x2a
 800db18:	d137      	bne.n	800db8a <_vfiprintf_r+0x1e2>
 800db1a:	9b07      	ldr	r3, [sp, #28]
 800db1c:	3702      	adds	r7, #2
 800db1e:	1d1a      	adds	r2, r3, #4
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	9207      	str	r2, [sp, #28]
 800db24:	2b00      	cmp	r3, #0
 800db26:	db2d      	blt.n	800db84 <_vfiprintf_r+0x1dc>
 800db28:	9309      	str	r3, [sp, #36]	; 0x24
 800db2a:	2203      	movs	r2, #3
 800db2c:	7839      	ldrb	r1, [r7, #0]
 800db2e:	4837      	ldr	r0, [pc, #220]	; (800dc0c <_vfiprintf_r+0x264>)
 800db30:	f7ff fab2 	bl	800d098 <memchr>
 800db34:	2800      	cmp	r0, #0
 800db36:	d007      	beq.n	800db48 <_vfiprintf_r+0x1a0>
 800db38:	4b34      	ldr	r3, [pc, #208]	; (800dc0c <_vfiprintf_r+0x264>)
 800db3a:	682a      	ldr	r2, [r5, #0]
 800db3c:	1ac0      	subs	r0, r0, r3
 800db3e:	2340      	movs	r3, #64	; 0x40
 800db40:	4083      	lsls	r3, r0
 800db42:	4313      	orrs	r3, r2
 800db44:	3701      	adds	r7, #1
 800db46:	602b      	str	r3, [r5, #0]
 800db48:	7839      	ldrb	r1, [r7, #0]
 800db4a:	1c7b      	adds	r3, r7, #1
 800db4c:	2206      	movs	r2, #6
 800db4e:	4830      	ldr	r0, [pc, #192]	; (800dc10 <_vfiprintf_r+0x268>)
 800db50:	9303      	str	r3, [sp, #12]
 800db52:	7629      	strb	r1, [r5, #24]
 800db54:	f7ff faa0 	bl	800d098 <memchr>
 800db58:	2800      	cmp	r0, #0
 800db5a:	d045      	beq.n	800dbe8 <_vfiprintf_r+0x240>
 800db5c:	4b2d      	ldr	r3, [pc, #180]	; (800dc14 <_vfiprintf_r+0x26c>)
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d127      	bne.n	800dbb2 <_vfiprintf_r+0x20a>
 800db62:	2207      	movs	r2, #7
 800db64:	9b07      	ldr	r3, [sp, #28]
 800db66:	3307      	adds	r3, #7
 800db68:	4393      	bics	r3, r2
 800db6a:	3308      	adds	r3, #8
 800db6c:	9307      	str	r3, [sp, #28]
 800db6e:	696b      	ldr	r3, [r5, #20]
 800db70:	9a04      	ldr	r2, [sp, #16]
 800db72:	189b      	adds	r3, r3, r2
 800db74:	616b      	str	r3, [r5, #20]
 800db76:	e75d      	b.n	800da34 <_vfiprintf_r+0x8c>
 800db78:	210a      	movs	r1, #10
 800db7a:	434b      	muls	r3, r1
 800db7c:	4667      	mov	r7, ip
 800db7e:	189b      	adds	r3, r3, r2
 800db80:	3909      	subs	r1, #9
 800db82:	e7a3      	b.n	800dacc <_vfiprintf_r+0x124>
 800db84:	2301      	movs	r3, #1
 800db86:	425b      	negs	r3, r3
 800db88:	e7ce      	b.n	800db28 <_vfiprintf_r+0x180>
 800db8a:	2300      	movs	r3, #0
 800db8c:	001a      	movs	r2, r3
 800db8e:	3701      	adds	r7, #1
 800db90:	606b      	str	r3, [r5, #4]
 800db92:	7839      	ldrb	r1, [r7, #0]
 800db94:	1c78      	adds	r0, r7, #1
 800db96:	3930      	subs	r1, #48	; 0x30
 800db98:	4684      	mov	ip, r0
 800db9a:	2909      	cmp	r1, #9
 800db9c:	d903      	bls.n	800dba6 <_vfiprintf_r+0x1fe>
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d0c3      	beq.n	800db2a <_vfiprintf_r+0x182>
 800dba2:	9209      	str	r2, [sp, #36]	; 0x24
 800dba4:	e7c1      	b.n	800db2a <_vfiprintf_r+0x182>
 800dba6:	230a      	movs	r3, #10
 800dba8:	435a      	muls	r2, r3
 800dbaa:	4667      	mov	r7, ip
 800dbac:	1852      	adds	r2, r2, r1
 800dbae:	3b09      	subs	r3, #9
 800dbb0:	e7ef      	b.n	800db92 <_vfiprintf_r+0x1ea>
 800dbb2:	ab07      	add	r3, sp, #28
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	0022      	movs	r2, r4
 800dbb8:	0029      	movs	r1, r5
 800dbba:	0030      	movs	r0, r6
 800dbbc:	4b16      	ldr	r3, [pc, #88]	; (800dc18 <_vfiprintf_r+0x270>)
 800dbbe:	f7fd fc2d 	bl	800b41c <_printf_float>
 800dbc2:	9004      	str	r0, [sp, #16]
 800dbc4:	9b04      	ldr	r3, [sp, #16]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	d1d1      	bne.n	800db6e <_vfiprintf_r+0x1c6>
 800dbca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbcc:	07db      	lsls	r3, r3, #31
 800dbce:	d405      	bmi.n	800dbdc <_vfiprintf_r+0x234>
 800dbd0:	89a3      	ldrh	r3, [r4, #12]
 800dbd2:	059b      	lsls	r3, r3, #22
 800dbd4:	d402      	bmi.n	800dbdc <_vfiprintf_r+0x234>
 800dbd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbd8:	f7ff f9e6 	bl	800cfa8 <__retarget_lock_release_recursive>
 800dbdc:	89a3      	ldrh	r3, [r4, #12]
 800dbde:	065b      	lsls	r3, r3, #25
 800dbe0:	d500      	bpl.n	800dbe4 <_vfiprintf_r+0x23c>
 800dbe2:	e70a      	b.n	800d9fa <_vfiprintf_r+0x52>
 800dbe4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dbe6:	e70a      	b.n	800d9fe <_vfiprintf_r+0x56>
 800dbe8:	ab07      	add	r3, sp, #28
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	0022      	movs	r2, r4
 800dbee:	0029      	movs	r1, r5
 800dbf0:	0030      	movs	r0, r6
 800dbf2:	4b09      	ldr	r3, [pc, #36]	; (800dc18 <_vfiprintf_r+0x270>)
 800dbf4:	f7fd fed0 	bl	800b998 <_printf_i>
 800dbf8:	e7e3      	b.n	800dbc2 <_vfiprintf_r+0x21a>
 800dbfa:	46c0      	nop			; (mov r8, r8)
 800dbfc:	0800ec74 	.word	0x0800ec74
 800dc00:	0800ec94 	.word	0x0800ec94
 800dc04:	0800ec54 	.word	0x0800ec54
 800dc08:	0800ee14 	.word	0x0800ee14
 800dc0c:	0800ee1a 	.word	0x0800ee1a
 800dc10:	0800ee1e 	.word	0x0800ee1e
 800dc14:	0800b41d 	.word	0x0800b41d
 800dc18:	0800d983 	.word	0x0800d983

0800dc1c <_putc_r>:
 800dc1c:	b570      	push	{r4, r5, r6, lr}
 800dc1e:	0006      	movs	r6, r0
 800dc20:	000d      	movs	r5, r1
 800dc22:	0014      	movs	r4, r2
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d004      	beq.n	800dc32 <_putc_r+0x16>
 800dc28:	6983      	ldr	r3, [r0, #24]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d101      	bne.n	800dc32 <_putc_r+0x16>
 800dc2e:	f7ff f915 	bl	800ce5c <__sinit>
 800dc32:	4b1c      	ldr	r3, [pc, #112]	; (800dca4 <_putc_r+0x88>)
 800dc34:	429c      	cmp	r4, r3
 800dc36:	d124      	bne.n	800dc82 <_putc_r+0x66>
 800dc38:	6874      	ldr	r4, [r6, #4]
 800dc3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc3c:	07db      	lsls	r3, r3, #31
 800dc3e:	d405      	bmi.n	800dc4c <_putc_r+0x30>
 800dc40:	89a3      	ldrh	r3, [r4, #12]
 800dc42:	059b      	lsls	r3, r3, #22
 800dc44:	d402      	bmi.n	800dc4c <_putc_r+0x30>
 800dc46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc48:	f7ff f9ad 	bl	800cfa6 <__retarget_lock_acquire_recursive>
 800dc4c:	68a3      	ldr	r3, [r4, #8]
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	60a3      	str	r3, [r4, #8]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	da05      	bge.n	800dc62 <_putc_r+0x46>
 800dc56:	69a2      	ldr	r2, [r4, #24]
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	db1c      	blt.n	800dc96 <_putc_r+0x7a>
 800dc5c:	b2eb      	uxtb	r3, r5
 800dc5e:	2b0a      	cmp	r3, #10
 800dc60:	d019      	beq.n	800dc96 <_putc_r+0x7a>
 800dc62:	6823      	ldr	r3, [r4, #0]
 800dc64:	1c5a      	adds	r2, r3, #1
 800dc66:	6022      	str	r2, [r4, #0]
 800dc68:	701d      	strb	r5, [r3, #0]
 800dc6a:	b2ed      	uxtb	r5, r5
 800dc6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc6e:	07db      	lsls	r3, r3, #31
 800dc70:	d405      	bmi.n	800dc7e <_putc_r+0x62>
 800dc72:	89a3      	ldrh	r3, [r4, #12]
 800dc74:	059b      	lsls	r3, r3, #22
 800dc76:	d402      	bmi.n	800dc7e <_putc_r+0x62>
 800dc78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc7a:	f7ff f995 	bl	800cfa8 <__retarget_lock_release_recursive>
 800dc7e:	0028      	movs	r0, r5
 800dc80:	bd70      	pop	{r4, r5, r6, pc}
 800dc82:	4b09      	ldr	r3, [pc, #36]	; (800dca8 <_putc_r+0x8c>)
 800dc84:	429c      	cmp	r4, r3
 800dc86:	d101      	bne.n	800dc8c <_putc_r+0x70>
 800dc88:	68b4      	ldr	r4, [r6, #8]
 800dc8a:	e7d6      	b.n	800dc3a <_putc_r+0x1e>
 800dc8c:	4b07      	ldr	r3, [pc, #28]	; (800dcac <_putc_r+0x90>)
 800dc8e:	429c      	cmp	r4, r3
 800dc90:	d1d3      	bne.n	800dc3a <_putc_r+0x1e>
 800dc92:	68f4      	ldr	r4, [r6, #12]
 800dc94:	e7d1      	b.n	800dc3a <_putc_r+0x1e>
 800dc96:	0029      	movs	r1, r5
 800dc98:	0022      	movs	r2, r4
 800dc9a:	0030      	movs	r0, r6
 800dc9c:	f7fe f838 	bl	800bd10 <__swbuf_r>
 800dca0:	0005      	movs	r5, r0
 800dca2:	e7e3      	b.n	800dc6c <_putc_r+0x50>
 800dca4:	0800ec74 	.word	0x0800ec74
 800dca8:	0800ec94 	.word	0x0800ec94
 800dcac:	0800ec54 	.word	0x0800ec54

0800dcb0 <_sbrk_r>:
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	b570      	push	{r4, r5, r6, lr}
 800dcb4:	4d06      	ldr	r5, [pc, #24]	; (800dcd0 <_sbrk_r+0x20>)
 800dcb6:	0004      	movs	r4, r0
 800dcb8:	0008      	movs	r0, r1
 800dcba:	602b      	str	r3, [r5, #0]
 800dcbc:	f7f8 f96c 	bl	8005f98 <_sbrk>
 800dcc0:	1c43      	adds	r3, r0, #1
 800dcc2:	d103      	bne.n	800dccc <_sbrk_r+0x1c>
 800dcc4:	682b      	ldr	r3, [r5, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d000      	beq.n	800dccc <_sbrk_r+0x1c>
 800dcca:	6023      	str	r3, [r4, #0]
 800dccc:	bd70      	pop	{r4, r5, r6, pc}
 800dcce:	46c0      	nop			; (mov r8, r8)
 800dcd0:	200005a0 	.word	0x200005a0

0800dcd4 <__sread>:
 800dcd4:	b570      	push	{r4, r5, r6, lr}
 800dcd6:	000c      	movs	r4, r1
 800dcd8:	250e      	movs	r5, #14
 800dcda:	5f49      	ldrsh	r1, [r1, r5]
 800dcdc:	f000 f8f4 	bl	800dec8 <_read_r>
 800dce0:	2800      	cmp	r0, #0
 800dce2:	db03      	blt.n	800dcec <__sread+0x18>
 800dce4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dce6:	181b      	adds	r3, r3, r0
 800dce8:	6563      	str	r3, [r4, #84]	; 0x54
 800dcea:	bd70      	pop	{r4, r5, r6, pc}
 800dcec:	89a3      	ldrh	r3, [r4, #12]
 800dcee:	4a02      	ldr	r2, [pc, #8]	; (800dcf8 <__sread+0x24>)
 800dcf0:	4013      	ands	r3, r2
 800dcf2:	81a3      	strh	r3, [r4, #12]
 800dcf4:	e7f9      	b.n	800dcea <__sread+0x16>
 800dcf6:	46c0      	nop			; (mov r8, r8)
 800dcf8:	ffffefff 	.word	0xffffefff

0800dcfc <__swrite>:
 800dcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcfe:	001f      	movs	r7, r3
 800dd00:	898b      	ldrh	r3, [r1, #12]
 800dd02:	0005      	movs	r5, r0
 800dd04:	000c      	movs	r4, r1
 800dd06:	0016      	movs	r6, r2
 800dd08:	05db      	lsls	r3, r3, #23
 800dd0a:	d505      	bpl.n	800dd18 <__swrite+0x1c>
 800dd0c:	230e      	movs	r3, #14
 800dd0e:	5ec9      	ldrsh	r1, [r1, r3]
 800dd10:	2200      	movs	r2, #0
 800dd12:	2302      	movs	r3, #2
 800dd14:	f000 f8a2 	bl	800de5c <_lseek_r>
 800dd18:	89a3      	ldrh	r3, [r4, #12]
 800dd1a:	4a05      	ldr	r2, [pc, #20]	; (800dd30 <__swrite+0x34>)
 800dd1c:	0028      	movs	r0, r5
 800dd1e:	4013      	ands	r3, r2
 800dd20:	81a3      	strh	r3, [r4, #12]
 800dd22:	0032      	movs	r2, r6
 800dd24:	230e      	movs	r3, #14
 800dd26:	5ee1      	ldrsh	r1, [r4, r3]
 800dd28:	003b      	movs	r3, r7
 800dd2a:	f000 f81f 	bl	800dd6c <_write_r>
 800dd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd30:	ffffefff 	.word	0xffffefff

0800dd34 <__sseek>:
 800dd34:	b570      	push	{r4, r5, r6, lr}
 800dd36:	000c      	movs	r4, r1
 800dd38:	250e      	movs	r5, #14
 800dd3a:	5f49      	ldrsh	r1, [r1, r5]
 800dd3c:	f000 f88e 	bl	800de5c <_lseek_r>
 800dd40:	89a3      	ldrh	r3, [r4, #12]
 800dd42:	1c42      	adds	r2, r0, #1
 800dd44:	d103      	bne.n	800dd4e <__sseek+0x1a>
 800dd46:	4a05      	ldr	r2, [pc, #20]	; (800dd5c <__sseek+0x28>)
 800dd48:	4013      	ands	r3, r2
 800dd4a:	81a3      	strh	r3, [r4, #12]
 800dd4c:	bd70      	pop	{r4, r5, r6, pc}
 800dd4e:	2280      	movs	r2, #128	; 0x80
 800dd50:	0152      	lsls	r2, r2, #5
 800dd52:	4313      	orrs	r3, r2
 800dd54:	81a3      	strh	r3, [r4, #12]
 800dd56:	6560      	str	r0, [r4, #84]	; 0x54
 800dd58:	e7f8      	b.n	800dd4c <__sseek+0x18>
 800dd5a:	46c0      	nop			; (mov r8, r8)
 800dd5c:	ffffefff 	.word	0xffffefff

0800dd60 <__sclose>:
 800dd60:	b510      	push	{r4, lr}
 800dd62:	230e      	movs	r3, #14
 800dd64:	5ec9      	ldrsh	r1, [r1, r3]
 800dd66:	f000 f833 	bl	800ddd0 <_close_r>
 800dd6a:	bd10      	pop	{r4, pc}

0800dd6c <_write_r>:
 800dd6c:	b570      	push	{r4, r5, r6, lr}
 800dd6e:	0004      	movs	r4, r0
 800dd70:	0008      	movs	r0, r1
 800dd72:	0011      	movs	r1, r2
 800dd74:	001a      	movs	r2, r3
 800dd76:	2300      	movs	r3, #0
 800dd78:	4d05      	ldr	r5, [pc, #20]	; (800dd90 <_write_r+0x24>)
 800dd7a:	602b      	str	r3, [r5, #0]
 800dd7c:	f7f5 fba8 	bl	80034d0 <_write>
 800dd80:	1c43      	adds	r3, r0, #1
 800dd82:	d103      	bne.n	800dd8c <_write_r+0x20>
 800dd84:	682b      	ldr	r3, [r5, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d000      	beq.n	800dd8c <_write_r+0x20>
 800dd8a:	6023      	str	r3, [r4, #0]
 800dd8c:	bd70      	pop	{r4, r5, r6, pc}
 800dd8e:	46c0      	nop			; (mov r8, r8)
 800dd90:	200005a0 	.word	0x200005a0

0800dd94 <__assert_func>:
 800dd94:	b530      	push	{r4, r5, lr}
 800dd96:	0014      	movs	r4, r2
 800dd98:	001a      	movs	r2, r3
 800dd9a:	4b09      	ldr	r3, [pc, #36]	; (800ddc0 <__assert_func+0x2c>)
 800dd9c:	0005      	movs	r5, r0
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	b085      	sub	sp, #20
 800dda2:	68d8      	ldr	r0, [r3, #12]
 800dda4:	4b07      	ldr	r3, [pc, #28]	; (800ddc4 <__assert_func+0x30>)
 800dda6:	2c00      	cmp	r4, #0
 800dda8:	d101      	bne.n	800ddae <__assert_func+0x1a>
 800ddaa:	4b07      	ldr	r3, [pc, #28]	; (800ddc8 <__assert_func+0x34>)
 800ddac:	001c      	movs	r4, r3
 800ddae:	9301      	str	r3, [sp, #4]
 800ddb0:	9100      	str	r1, [sp, #0]
 800ddb2:	002b      	movs	r3, r5
 800ddb4:	4905      	ldr	r1, [pc, #20]	; (800ddcc <__assert_func+0x38>)
 800ddb6:	9402      	str	r4, [sp, #8]
 800ddb8:	f000 f81c 	bl	800ddf4 <fiprintf>
 800ddbc:	f000 f8a5 	bl	800df0a <abort>
 800ddc0:	20000030 	.word	0x20000030
 800ddc4:	0800ee25 	.word	0x0800ee25
 800ddc8:	0800ee60 	.word	0x0800ee60
 800ddcc:	0800ee32 	.word	0x0800ee32

0800ddd0 <_close_r>:
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	b570      	push	{r4, r5, r6, lr}
 800ddd4:	4d06      	ldr	r5, [pc, #24]	; (800ddf0 <_close_r+0x20>)
 800ddd6:	0004      	movs	r4, r0
 800ddd8:	0008      	movs	r0, r1
 800ddda:	602b      	str	r3, [r5, #0]
 800dddc:	f7f8 f8af 	bl	8005f3e <_close>
 800dde0:	1c43      	adds	r3, r0, #1
 800dde2:	d103      	bne.n	800ddec <_close_r+0x1c>
 800dde4:	682b      	ldr	r3, [r5, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d000      	beq.n	800ddec <_close_r+0x1c>
 800ddea:	6023      	str	r3, [r4, #0]
 800ddec:	bd70      	pop	{r4, r5, r6, pc}
 800ddee:	46c0      	nop			; (mov r8, r8)
 800ddf0:	200005a0 	.word	0x200005a0

0800ddf4 <fiprintf>:
 800ddf4:	b40e      	push	{r1, r2, r3}
 800ddf6:	b503      	push	{r0, r1, lr}
 800ddf8:	0001      	movs	r1, r0
 800ddfa:	ab03      	add	r3, sp, #12
 800ddfc:	4804      	ldr	r0, [pc, #16]	; (800de10 <fiprintf+0x1c>)
 800ddfe:	cb04      	ldmia	r3!, {r2}
 800de00:	6800      	ldr	r0, [r0, #0]
 800de02:	9301      	str	r3, [sp, #4]
 800de04:	f7ff fdd0 	bl	800d9a8 <_vfiprintf_r>
 800de08:	b002      	add	sp, #8
 800de0a:	bc08      	pop	{r3}
 800de0c:	b003      	add	sp, #12
 800de0e:	4718      	bx	r3
 800de10:	20000030 	.word	0x20000030

0800de14 <_fstat_r>:
 800de14:	2300      	movs	r3, #0
 800de16:	b570      	push	{r4, r5, r6, lr}
 800de18:	4d06      	ldr	r5, [pc, #24]	; (800de34 <_fstat_r+0x20>)
 800de1a:	0004      	movs	r4, r0
 800de1c:	0008      	movs	r0, r1
 800de1e:	0011      	movs	r1, r2
 800de20:	602b      	str	r3, [r5, #0]
 800de22:	f7f8 f896 	bl	8005f52 <_fstat>
 800de26:	1c43      	adds	r3, r0, #1
 800de28:	d103      	bne.n	800de32 <_fstat_r+0x1e>
 800de2a:	682b      	ldr	r3, [r5, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d000      	beq.n	800de32 <_fstat_r+0x1e>
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	bd70      	pop	{r4, r5, r6, pc}
 800de34:	200005a0 	.word	0x200005a0

0800de38 <_isatty_r>:
 800de38:	2300      	movs	r3, #0
 800de3a:	b570      	push	{r4, r5, r6, lr}
 800de3c:	4d06      	ldr	r5, [pc, #24]	; (800de58 <_isatty_r+0x20>)
 800de3e:	0004      	movs	r4, r0
 800de40:	0008      	movs	r0, r1
 800de42:	602b      	str	r3, [r5, #0]
 800de44:	f7f8 f893 	bl	8005f6e <_isatty>
 800de48:	1c43      	adds	r3, r0, #1
 800de4a:	d103      	bne.n	800de54 <_isatty_r+0x1c>
 800de4c:	682b      	ldr	r3, [r5, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d000      	beq.n	800de54 <_isatty_r+0x1c>
 800de52:	6023      	str	r3, [r4, #0]
 800de54:	bd70      	pop	{r4, r5, r6, pc}
 800de56:	46c0      	nop			; (mov r8, r8)
 800de58:	200005a0 	.word	0x200005a0

0800de5c <_lseek_r>:
 800de5c:	b570      	push	{r4, r5, r6, lr}
 800de5e:	0004      	movs	r4, r0
 800de60:	0008      	movs	r0, r1
 800de62:	0011      	movs	r1, r2
 800de64:	001a      	movs	r2, r3
 800de66:	2300      	movs	r3, #0
 800de68:	4d05      	ldr	r5, [pc, #20]	; (800de80 <_lseek_r+0x24>)
 800de6a:	602b      	str	r3, [r5, #0]
 800de6c:	f7f8 f888 	bl	8005f80 <_lseek>
 800de70:	1c43      	adds	r3, r0, #1
 800de72:	d103      	bne.n	800de7c <_lseek_r+0x20>
 800de74:	682b      	ldr	r3, [r5, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d000      	beq.n	800de7c <_lseek_r+0x20>
 800de7a:	6023      	str	r3, [r4, #0]
 800de7c:	bd70      	pop	{r4, r5, r6, pc}
 800de7e:	46c0      	nop			; (mov r8, r8)
 800de80:	200005a0 	.word	0x200005a0

0800de84 <__ascii_mbtowc>:
 800de84:	b082      	sub	sp, #8
 800de86:	2900      	cmp	r1, #0
 800de88:	d100      	bne.n	800de8c <__ascii_mbtowc+0x8>
 800de8a:	a901      	add	r1, sp, #4
 800de8c:	1e10      	subs	r0, r2, #0
 800de8e:	d006      	beq.n	800de9e <__ascii_mbtowc+0x1a>
 800de90:	2b00      	cmp	r3, #0
 800de92:	d006      	beq.n	800dea2 <__ascii_mbtowc+0x1e>
 800de94:	7813      	ldrb	r3, [r2, #0]
 800de96:	600b      	str	r3, [r1, #0]
 800de98:	7810      	ldrb	r0, [r2, #0]
 800de9a:	1e43      	subs	r3, r0, #1
 800de9c:	4198      	sbcs	r0, r3
 800de9e:	b002      	add	sp, #8
 800dea0:	4770      	bx	lr
 800dea2:	2002      	movs	r0, #2
 800dea4:	4240      	negs	r0, r0
 800dea6:	e7fa      	b.n	800de9e <__ascii_mbtowc+0x1a>

0800dea8 <__malloc_lock>:
 800dea8:	b510      	push	{r4, lr}
 800deaa:	4802      	ldr	r0, [pc, #8]	; (800deb4 <__malloc_lock+0xc>)
 800deac:	f7ff f87b 	bl	800cfa6 <__retarget_lock_acquire_recursive>
 800deb0:	bd10      	pop	{r4, pc}
 800deb2:	46c0      	nop			; (mov r8, r8)
 800deb4:	20000598 	.word	0x20000598

0800deb8 <__malloc_unlock>:
 800deb8:	b510      	push	{r4, lr}
 800deba:	4802      	ldr	r0, [pc, #8]	; (800dec4 <__malloc_unlock+0xc>)
 800debc:	f7ff f874 	bl	800cfa8 <__retarget_lock_release_recursive>
 800dec0:	bd10      	pop	{r4, pc}
 800dec2:	46c0      	nop			; (mov r8, r8)
 800dec4:	20000598 	.word	0x20000598

0800dec8 <_read_r>:
 800dec8:	b570      	push	{r4, r5, r6, lr}
 800deca:	0004      	movs	r4, r0
 800decc:	0008      	movs	r0, r1
 800dece:	0011      	movs	r1, r2
 800ded0:	001a      	movs	r2, r3
 800ded2:	2300      	movs	r3, #0
 800ded4:	4d05      	ldr	r5, [pc, #20]	; (800deec <_read_r+0x24>)
 800ded6:	602b      	str	r3, [r5, #0]
 800ded8:	f7f8 f814 	bl	8005f04 <_read>
 800dedc:	1c43      	adds	r3, r0, #1
 800dede:	d103      	bne.n	800dee8 <_read_r+0x20>
 800dee0:	682b      	ldr	r3, [r5, #0]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d000      	beq.n	800dee8 <_read_r+0x20>
 800dee6:	6023      	str	r3, [r4, #0]
 800dee8:	bd70      	pop	{r4, r5, r6, pc}
 800deea:	46c0      	nop			; (mov r8, r8)
 800deec:	200005a0 	.word	0x200005a0

0800def0 <__ascii_wctomb>:
 800def0:	0003      	movs	r3, r0
 800def2:	1e08      	subs	r0, r1, #0
 800def4:	d005      	beq.n	800df02 <__ascii_wctomb+0x12>
 800def6:	2aff      	cmp	r2, #255	; 0xff
 800def8:	d904      	bls.n	800df04 <__ascii_wctomb+0x14>
 800defa:	228a      	movs	r2, #138	; 0x8a
 800defc:	2001      	movs	r0, #1
 800defe:	601a      	str	r2, [r3, #0]
 800df00:	4240      	negs	r0, r0
 800df02:	4770      	bx	lr
 800df04:	2001      	movs	r0, #1
 800df06:	700a      	strb	r2, [r1, #0]
 800df08:	e7fb      	b.n	800df02 <__ascii_wctomb+0x12>

0800df0a <abort>:
 800df0a:	2006      	movs	r0, #6
 800df0c:	b510      	push	{r4, lr}
 800df0e:	f000 f82d 	bl	800df6c <raise>
 800df12:	2001      	movs	r0, #1
 800df14:	f7f7 ffea 	bl	8005eec <_exit>

0800df18 <_raise_r>:
 800df18:	b570      	push	{r4, r5, r6, lr}
 800df1a:	0004      	movs	r4, r0
 800df1c:	000d      	movs	r5, r1
 800df1e:	291f      	cmp	r1, #31
 800df20:	d904      	bls.n	800df2c <_raise_r+0x14>
 800df22:	2316      	movs	r3, #22
 800df24:	6003      	str	r3, [r0, #0]
 800df26:	2001      	movs	r0, #1
 800df28:	4240      	negs	r0, r0
 800df2a:	bd70      	pop	{r4, r5, r6, pc}
 800df2c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d004      	beq.n	800df3c <_raise_r+0x24>
 800df32:	008a      	lsls	r2, r1, #2
 800df34:	189b      	adds	r3, r3, r2
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	2a00      	cmp	r2, #0
 800df3a:	d108      	bne.n	800df4e <_raise_r+0x36>
 800df3c:	0020      	movs	r0, r4
 800df3e:	f000 f831 	bl	800dfa4 <_getpid_r>
 800df42:	002a      	movs	r2, r5
 800df44:	0001      	movs	r1, r0
 800df46:	0020      	movs	r0, r4
 800df48:	f000 f81a 	bl	800df80 <_kill_r>
 800df4c:	e7ed      	b.n	800df2a <_raise_r+0x12>
 800df4e:	2000      	movs	r0, #0
 800df50:	2a01      	cmp	r2, #1
 800df52:	d0ea      	beq.n	800df2a <_raise_r+0x12>
 800df54:	1c51      	adds	r1, r2, #1
 800df56:	d103      	bne.n	800df60 <_raise_r+0x48>
 800df58:	2316      	movs	r3, #22
 800df5a:	3001      	adds	r0, #1
 800df5c:	6023      	str	r3, [r4, #0]
 800df5e:	e7e4      	b.n	800df2a <_raise_r+0x12>
 800df60:	2400      	movs	r4, #0
 800df62:	0028      	movs	r0, r5
 800df64:	601c      	str	r4, [r3, #0]
 800df66:	4790      	blx	r2
 800df68:	0020      	movs	r0, r4
 800df6a:	e7de      	b.n	800df2a <_raise_r+0x12>

0800df6c <raise>:
 800df6c:	b510      	push	{r4, lr}
 800df6e:	4b03      	ldr	r3, [pc, #12]	; (800df7c <raise+0x10>)
 800df70:	0001      	movs	r1, r0
 800df72:	6818      	ldr	r0, [r3, #0]
 800df74:	f7ff ffd0 	bl	800df18 <_raise_r>
 800df78:	bd10      	pop	{r4, pc}
 800df7a:	46c0      	nop			; (mov r8, r8)
 800df7c:	20000030 	.word	0x20000030

0800df80 <_kill_r>:
 800df80:	2300      	movs	r3, #0
 800df82:	b570      	push	{r4, r5, r6, lr}
 800df84:	4d06      	ldr	r5, [pc, #24]	; (800dfa0 <_kill_r+0x20>)
 800df86:	0004      	movs	r4, r0
 800df88:	0008      	movs	r0, r1
 800df8a:	0011      	movs	r1, r2
 800df8c:	602b      	str	r3, [r5, #0]
 800df8e:	f7f7 ff9d 	bl	8005ecc <_kill>
 800df92:	1c43      	adds	r3, r0, #1
 800df94:	d103      	bne.n	800df9e <_kill_r+0x1e>
 800df96:	682b      	ldr	r3, [r5, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d000      	beq.n	800df9e <_kill_r+0x1e>
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	bd70      	pop	{r4, r5, r6, pc}
 800dfa0:	200005a0 	.word	0x200005a0

0800dfa4 <_getpid_r>:
 800dfa4:	b510      	push	{r4, lr}
 800dfa6:	f7f7 ff8b 	bl	8005ec0 <_getpid>
 800dfaa:	bd10      	pop	{r4, pc}

0800dfac <log>:
 800dfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfae:	0004      	movs	r4, r0
 800dfb0:	000d      	movs	r5, r1
 800dfb2:	f000 f839 	bl	800e028 <__ieee754_log>
 800dfb6:	4b19      	ldr	r3, [pc, #100]	; (800e01c <log+0x70>)
 800dfb8:	0006      	movs	r6, r0
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	000f      	movs	r7, r1
 800dfbe:	b25b      	sxtb	r3, r3
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	d01d      	beq.n	800e000 <log+0x54>
 800dfc4:	0022      	movs	r2, r4
 800dfc6:	002b      	movs	r3, r5
 800dfc8:	0020      	movs	r0, r4
 800dfca:	0029      	movs	r1, r5
 800dfcc:	f7f4 ffe4 	bl	8002f98 <__aeabi_dcmpun>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d115      	bne.n	800e000 <log+0x54>
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	0020      	movs	r0, r4
 800dfda:	0029      	movs	r1, r5
 800dfdc:	f7f2 fa50 	bl	8000480 <__aeabi_dcmpgt>
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	d10d      	bne.n	800e000 <log+0x54>
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	0020      	movs	r0, r4
 800dfea:	0029      	movs	r1, r5
 800dfec:	f7f2 fa2e 	bl	800044c <__aeabi_dcmpeq>
 800dff0:	2800      	cmp	r0, #0
 800dff2:	d008      	beq.n	800e006 <log+0x5a>
 800dff4:	f7fd f92c 	bl	800b250 <__errno>
 800dff8:	2322      	movs	r3, #34	; 0x22
 800dffa:	2600      	movs	r6, #0
 800dffc:	4f08      	ldr	r7, [pc, #32]	; (800e020 <log+0x74>)
 800dffe:	6003      	str	r3, [r0, #0]
 800e000:	0030      	movs	r0, r6
 800e002:	0039      	movs	r1, r7
 800e004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e006:	f7fd f923 	bl	800b250 <__errno>
 800e00a:	2321      	movs	r3, #33	; 0x21
 800e00c:	6003      	str	r3, [r0, #0]
 800e00e:	4805      	ldr	r0, [pc, #20]	; (800e024 <log+0x78>)
 800e010:	f000 f9ba 	bl	800e388 <nan>
 800e014:	0006      	movs	r6, r0
 800e016:	000f      	movs	r7, r1
 800e018:	e7f2      	b.n	800e000 <log+0x54>
 800e01a:	46c0      	nop			; (mov r8, r8)
 800e01c:	20000200 	.word	0x20000200
 800e020:	fff00000 	.word	0xfff00000
 800e024:	0800ee60 	.word	0x0800ee60

0800e028 <__ieee754_log>:
 800e028:	2280      	movs	r2, #128	; 0x80
 800e02a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e02c:	000b      	movs	r3, r1
 800e02e:	b08d      	sub	sp, #52	; 0x34
 800e030:	0352      	lsls	r2, r2, #13
 800e032:	4291      	cmp	r1, r2
 800e034:	da22      	bge.n	800e07c <__ieee754_log+0x54>
 800e036:	004a      	lsls	r2, r1, #1
 800e038:	0852      	lsrs	r2, r2, #1
 800e03a:	4302      	orrs	r2, r0
 800e03c:	d107      	bne.n	800e04e <__ieee754_log+0x26>
 800e03e:	2200      	movs	r2, #0
 800e040:	2300      	movs	r3, #0
 800e042:	2000      	movs	r0, #0
 800e044:	49b3      	ldr	r1, [pc, #716]	; (800e314 <__ieee754_log+0x2ec>)
 800e046:	f7f3 fda3 	bl	8001b90 <__aeabi_ddiv>
 800e04a:	b00d      	add	sp, #52	; 0x34
 800e04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e04e:	2900      	cmp	r1, #0
 800e050:	da05      	bge.n	800e05e <__ieee754_log+0x36>
 800e052:	0002      	movs	r2, r0
 800e054:	f7f4 fc0e 	bl	8002874 <__aeabi_dsub>
 800e058:	2200      	movs	r2, #0
 800e05a:	2300      	movs	r3, #0
 800e05c:	e7f3      	b.n	800e046 <__ieee754_log+0x1e>
 800e05e:	4bae      	ldr	r3, [pc, #696]	; (800e318 <__ieee754_log+0x2f0>)
 800e060:	2200      	movs	r2, #0
 800e062:	f7f4 f99b 	bl	800239c <__aeabi_dmul>
 800e066:	2436      	movs	r4, #54	; 0x36
 800e068:	000b      	movs	r3, r1
 800e06a:	4264      	negs	r4, r4
 800e06c:	4aab      	ldr	r2, [pc, #684]	; (800e31c <__ieee754_log+0x2f4>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	dd06      	ble.n	800e080 <__ieee754_log+0x58>
 800e072:	0002      	movs	r2, r0
 800e074:	000b      	movs	r3, r1
 800e076:	f7f3 fa21 	bl	80014bc <__aeabi_dadd>
 800e07a:	e7e6      	b.n	800e04a <__ieee754_log+0x22>
 800e07c:	2400      	movs	r4, #0
 800e07e:	e7f5      	b.n	800e06c <__ieee754_log+0x44>
 800e080:	4da7      	ldr	r5, [pc, #668]	; (800e320 <__ieee754_log+0x2f8>)
 800e082:	151a      	asrs	r2, r3, #20
 800e084:	1952      	adds	r2, r2, r5
 800e086:	1912      	adds	r2, r2, r4
 800e088:	031b      	lsls	r3, r3, #12
 800e08a:	4ca6      	ldr	r4, [pc, #664]	; (800e324 <__ieee754_log+0x2fc>)
 800e08c:	0b1b      	lsrs	r3, r3, #12
 800e08e:	9302      	str	r3, [sp, #8]
 800e090:	191c      	adds	r4, r3, r4
 800e092:	2380      	movs	r3, #128	; 0x80
 800e094:	035b      	lsls	r3, r3, #13
 800e096:	4023      	ands	r3, r4
 800e098:	4ca3      	ldr	r4, [pc, #652]	; (800e328 <__ieee754_log+0x300>)
 800e09a:	9d02      	ldr	r5, [sp, #8]
 800e09c:	405c      	eors	r4, r3
 800e09e:	151b      	asrs	r3, r3, #20
 800e0a0:	189b      	adds	r3, r3, r2
 800e0a2:	4325      	orrs	r5, r4
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	0029      	movs	r1, r5
 800e0aa:	4b9f      	ldr	r3, [pc, #636]	; (800e328 <__ieee754_log+0x300>)
 800e0ac:	f7f4 fbe2 	bl	8002874 <__aeabi_dsub>
 800e0b0:	9b02      	ldr	r3, [sp, #8]
 800e0b2:	0006      	movs	r6, r0
 800e0b4:	3302      	adds	r3, #2
 800e0b6:	031b      	lsls	r3, r3, #12
 800e0b8:	000f      	movs	r7, r1
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	0b1b      	lsrs	r3, r3, #12
 800e0be:	2b02      	cmp	r3, #2
 800e0c0:	dc64      	bgt.n	800e18c <__ieee754_log+0x164>
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	f7f2 f9c2 	bl	800044c <__aeabi_dcmpeq>
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d019      	beq.n	800e100 <__ieee754_log+0xd8>
 800e0cc:	9b00      	ldr	r3, [sp, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d100      	bne.n	800e0d4 <__ieee754_log+0xac>
 800e0d2:	e11c      	b.n	800e30e <__ieee754_log+0x2e6>
 800e0d4:	0018      	movs	r0, r3
 800e0d6:	f7f4 ffb3 	bl	8003040 <__aeabi_i2d>
 800e0da:	4a94      	ldr	r2, [pc, #592]	; (800e32c <__ieee754_log+0x304>)
 800e0dc:	4b94      	ldr	r3, [pc, #592]	; (800e330 <__ieee754_log+0x308>)
 800e0de:	0004      	movs	r4, r0
 800e0e0:	000d      	movs	r5, r1
 800e0e2:	f7f4 f95b 	bl	800239c <__aeabi_dmul>
 800e0e6:	4a93      	ldr	r2, [pc, #588]	; (800e334 <__ieee754_log+0x30c>)
 800e0e8:	0006      	movs	r6, r0
 800e0ea:	000f      	movs	r7, r1
 800e0ec:	4b92      	ldr	r3, [pc, #584]	; (800e338 <__ieee754_log+0x310>)
 800e0ee:	0020      	movs	r0, r4
 800e0f0:	0029      	movs	r1, r5
 800e0f2:	f7f4 f953 	bl	800239c <__aeabi_dmul>
 800e0f6:	0002      	movs	r2, r0
 800e0f8:	000b      	movs	r3, r1
 800e0fa:	0030      	movs	r0, r6
 800e0fc:	0039      	movs	r1, r7
 800e0fe:	e7ba      	b.n	800e076 <__ieee754_log+0x4e>
 800e100:	4a8e      	ldr	r2, [pc, #568]	; (800e33c <__ieee754_log+0x314>)
 800e102:	4b8f      	ldr	r3, [pc, #572]	; (800e340 <__ieee754_log+0x318>)
 800e104:	0030      	movs	r0, r6
 800e106:	0039      	movs	r1, r7
 800e108:	f7f4 f948 	bl	800239c <__aeabi_dmul>
 800e10c:	0002      	movs	r2, r0
 800e10e:	000b      	movs	r3, r1
 800e110:	2000      	movs	r0, #0
 800e112:	498c      	ldr	r1, [pc, #560]	; (800e344 <__ieee754_log+0x31c>)
 800e114:	f7f4 fbae 	bl	8002874 <__aeabi_dsub>
 800e118:	0032      	movs	r2, r6
 800e11a:	0004      	movs	r4, r0
 800e11c:	000d      	movs	r5, r1
 800e11e:	003b      	movs	r3, r7
 800e120:	0030      	movs	r0, r6
 800e122:	0039      	movs	r1, r7
 800e124:	f7f4 f93a 	bl	800239c <__aeabi_dmul>
 800e128:	000b      	movs	r3, r1
 800e12a:	0002      	movs	r2, r0
 800e12c:	0029      	movs	r1, r5
 800e12e:	0020      	movs	r0, r4
 800e130:	f7f4 f934 	bl	800239c <__aeabi_dmul>
 800e134:	9b00      	ldr	r3, [sp, #0]
 800e136:	9002      	str	r0, [sp, #8]
 800e138:	9103      	str	r1, [sp, #12]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d106      	bne.n	800e14c <__ieee754_log+0x124>
 800e13e:	0002      	movs	r2, r0
 800e140:	000b      	movs	r3, r1
 800e142:	0030      	movs	r0, r6
 800e144:	0039      	movs	r1, r7
 800e146:	f7f4 fb95 	bl	8002874 <__aeabi_dsub>
 800e14a:	e77e      	b.n	800e04a <__ieee754_log+0x22>
 800e14c:	9800      	ldr	r0, [sp, #0]
 800e14e:	f7f4 ff77 	bl	8003040 <__aeabi_i2d>
 800e152:	4a76      	ldr	r2, [pc, #472]	; (800e32c <__ieee754_log+0x304>)
 800e154:	4b76      	ldr	r3, [pc, #472]	; (800e330 <__ieee754_log+0x308>)
 800e156:	0004      	movs	r4, r0
 800e158:	000d      	movs	r5, r1
 800e15a:	f7f4 f91f 	bl	800239c <__aeabi_dmul>
 800e15e:	4a75      	ldr	r2, [pc, #468]	; (800e334 <__ieee754_log+0x30c>)
 800e160:	9000      	str	r0, [sp, #0]
 800e162:	9101      	str	r1, [sp, #4]
 800e164:	4b74      	ldr	r3, [pc, #464]	; (800e338 <__ieee754_log+0x310>)
 800e166:	0020      	movs	r0, r4
 800e168:	0029      	movs	r1, r5
 800e16a:	f7f4 f917 	bl	800239c <__aeabi_dmul>
 800e16e:	0002      	movs	r2, r0
 800e170:	000b      	movs	r3, r1
 800e172:	9802      	ldr	r0, [sp, #8]
 800e174:	9903      	ldr	r1, [sp, #12]
 800e176:	f7f4 fb7d 	bl	8002874 <__aeabi_dsub>
 800e17a:	0032      	movs	r2, r6
 800e17c:	003b      	movs	r3, r7
 800e17e:	f7f4 fb79 	bl	8002874 <__aeabi_dsub>
 800e182:	0002      	movs	r2, r0
 800e184:	000b      	movs	r3, r1
 800e186:	9800      	ldr	r0, [sp, #0]
 800e188:	9901      	ldr	r1, [sp, #4]
 800e18a:	e7dc      	b.n	800e146 <__ieee754_log+0x11e>
 800e18c:	2380      	movs	r3, #128	; 0x80
 800e18e:	05db      	lsls	r3, r3, #23
 800e190:	f7f3 f994 	bl	80014bc <__aeabi_dadd>
 800e194:	0002      	movs	r2, r0
 800e196:	000b      	movs	r3, r1
 800e198:	0030      	movs	r0, r6
 800e19a:	0039      	movs	r1, r7
 800e19c:	f7f3 fcf8 	bl	8001b90 <__aeabi_ddiv>
 800e1a0:	9004      	str	r0, [sp, #16]
 800e1a2:	9105      	str	r1, [sp, #20]
 800e1a4:	9800      	ldr	r0, [sp, #0]
 800e1a6:	f7f4 ff4b 	bl	8003040 <__aeabi_i2d>
 800e1aa:	9a04      	ldr	r2, [sp, #16]
 800e1ac:	9b05      	ldr	r3, [sp, #20]
 800e1ae:	9006      	str	r0, [sp, #24]
 800e1b0:	9107      	str	r1, [sp, #28]
 800e1b2:	0010      	movs	r0, r2
 800e1b4:	0019      	movs	r1, r3
 800e1b6:	f7f4 f8f1 	bl	800239c <__aeabi_dmul>
 800e1ba:	4a63      	ldr	r2, [pc, #396]	; (800e348 <__ieee754_log+0x320>)
 800e1bc:	9b02      	ldr	r3, [sp, #8]
 800e1be:	4694      	mov	ip, r2
 800e1c0:	4463      	add	r3, ip
 800e1c2:	0002      	movs	r2, r0
 800e1c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1c6:	000b      	movs	r3, r1
 800e1c8:	9008      	str	r0, [sp, #32]
 800e1ca:	9109      	str	r1, [sp, #36]	; 0x24
 800e1cc:	f7f4 f8e6 	bl	800239c <__aeabi_dmul>
 800e1d0:	0004      	movs	r4, r0
 800e1d2:	000d      	movs	r5, r1
 800e1d4:	4a5d      	ldr	r2, [pc, #372]	; (800e34c <__ieee754_log+0x324>)
 800e1d6:	4b5e      	ldr	r3, [pc, #376]	; (800e350 <__ieee754_log+0x328>)
 800e1d8:	f7f4 f8e0 	bl	800239c <__aeabi_dmul>
 800e1dc:	4a5d      	ldr	r2, [pc, #372]	; (800e354 <__ieee754_log+0x32c>)
 800e1de:	4b5e      	ldr	r3, [pc, #376]	; (800e358 <__ieee754_log+0x330>)
 800e1e0:	f7f3 f96c 	bl	80014bc <__aeabi_dadd>
 800e1e4:	0022      	movs	r2, r4
 800e1e6:	002b      	movs	r3, r5
 800e1e8:	f7f4 f8d8 	bl	800239c <__aeabi_dmul>
 800e1ec:	4a5b      	ldr	r2, [pc, #364]	; (800e35c <__ieee754_log+0x334>)
 800e1ee:	4b5c      	ldr	r3, [pc, #368]	; (800e360 <__ieee754_log+0x338>)
 800e1f0:	f7f3 f964 	bl	80014bc <__aeabi_dadd>
 800e1f4:	0022      	movs	r2, r4
 800e1f6:	002b      	movs	r3, r5
 800e1f8:	f7f4 f8d0 	bl	800239c <__aeabi_dmul>
 800e1fc:	4a59      	ldr	r2, [pc, #356]	; (800e364 <__ieee754_log+0x33c>)
 800e1fe:	4b5a      	ldr	r3, [pc, #360]	; (800e368 <__ieee754_log+0x340>)
 800e200:	f7f3 f95c 	bl	80014bc <__aeabi_dadd>
 800e204:	9a08      	ldr	r2, [sp, #32]
 800e206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e208:	f7f4 f8c8 	bl	800239c <__aeabi_dmul>
 800e20c:	4a57      	ldr	r2, [pc, #348]	; (800e36c <__ieee754_log+0x344>)
 800e20e:	9008      	str	r0, [sp, #32]
 800e210:	9109      	str	r1, [sp, #36]	; 0x24
 800e212:	4b57      	ldr	r3, [pc, #348]	; (800e370 <__ieee754_log+0x348>)
 800e214:	0020      	movs	r0, r4
 800e216:	0029      	movs	r1, r5
 800e218:	f7f4 f8c0 	bl	800239c <__aeabi_dmul>
 800e21c:	4a55      	ldr	r2, [pc, #340]	; (800e374 <__ieee754_log+0x34c>)
 800e21e:	4b56      	ldr	r3, [pc, #344]	; (800e378 <__ieee754_log+0x350>)
 800e220:	f7f3 f94c 	bl	80014bc <__aeabi_dadd>
 800e224:	0022      	movs	r2, r4
 800e226:	002b      	movs	r3, r5
 800e228:	f7f4 f8b8 	bl	800239c <__aeabi_dmul>
 800e22c:	4a53      	ldr	r2, [pc, #332]	; (800e37c <__ieee754_log+0x354>)
 800e22e:	4b54      	ldr	r3, [pc, #336]	; (800e380 <__ieee754_log+0x358>)
 800e230:	f7f3 f944 	bl	80014bc <__aeabi_dadd>
 800e234:	0022      	movs	r2, r4
 800e236:	002b      	movs	r3, r5
 800e238:	f7f4 f8b0 	bl	800239c <__aeabi_dmul>
 800e23c:	0002      	movs	r2, r0
 800e23e:	000b      	movs	r3, r1
 800e240:	9808      	ldr	r0, [sp, #32]
 800e242:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e244:	f7f3 f93a 	bl	80014bc <__aeabi_dadd>
 800e248:	9a02      	ldr	r2, [sp, #8]
 800e24a:	4b4e      	ldr	r3, [pc, #312]	; (800e384 <__ieee754_log+0x35c>)
 800e24c:	0004      	movs	r4, r0
 800e24e:	1a9b      	subs	r3, r3, r2
 800e250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e252:	000d      	movs	r5, r1
 800e254:	4313      	orrs	r3, r2
 800e256:	2b00      	cmp	r3, #0
 800e258:	dd34      	ble.n	800e2c4 <__ieee754_log+0x29c>
 800e25a:	2200      	movs	r2, #0
 800e25c:	4b39      	ldr	r3, [pc, #228]	; (800e344 <__ieee754_log+0x31c>)
 800e25e:	0030      	movs	r0, r6
 800e260:	0039      	movs	r1, r7
 800e262:	f7f4 f89b 	bl	800239c <__aeabi_dmul>
 800e266:	0032      	movs	r2, r6
 800e268:	003b      	movs	r3, r7
 800e26a:	f7f4 f897 	bl	800239c <__aeabi_dmul>
 800e26e:	0002      	movs	r2, r0
 800e270:	000b      	movs	r3, r1
 800e272:	9002      	str	r0, [sp, #8]
 800e274:	9103      	str	r1, [sp, #12]
 800e276:	0020      	movs	r0, r4
 800e278:	0029      	movs	r1, r5
 800e27a:	f7f3 f91f 	bl	80014bc <__aeabi_dadd>
 800e27e:	9a04      	ldr	r2, [sp, #16]
 800e280:	9b05      	ldr	r3, [sp, #20]
 800e282:	f7f4 f88b 	bl	800239c <__aeabi_dmul>
 800e286:	9b00      	ldr	r3, [sp, #0]
 800e288:	0004      	movs	r4, r0
 800e28a:	000d      	movs	r5, r1
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d106      	bne.n	800e29e <__ieee754_log+0x276>
 800e290:	0002      	movs	r2, r0
 800e292:	000b      	movs	r3, r1
 800e294:	9802      	ldr	r0, [sp, #8]
 800e296:	9903      	ldr	r1, [sp, #12]
 800e298:	f7f4 faec 	bl	8002874 <__aeabi_dsub>
 800e29c:	e74f      	b.n	800e13e <__ieee754_log+0x116>
 800e29e:	4a23      	ldr	r2, [pc, #140]	; (800e32c <__ieee754_log+0x304>)
 800e2a0:	4b23      	ldr	r3, [pc, #140]	; (800e330 <__ieee754_log+0x308>)
 800e2a2:	9806      	ldr	r0, [sp, #24]
 800e2a4:	9907      	ldr	r1, [sp, #28]
 800e2a6:	f7f4 f879 	bl	800239c <__aeabi_dmul>
 800e2aa:	4a22      	ldr	r2, [pc, #136]	; (800e334 <__ieee754_log+0x30c>)
 800e2ac:	9000      	str	r0, [sp, #0]
 800e2ae:	9101      	str	r1, [sp, #4]
 800e2b0:	9806      	ldr	r0, [sp, #24]
 800e2b2:	9907      	ldr	r1, [sp, #28]
 800e2b4:	4b20      	ldr	r3, [pc, #128]	; (800e338 <__ieee754_log+0x310>)
 800e2b6:	f7f4 f871 	bl	800239c <__aeabi_dmul>
 800e2ba:	0022      	movs	r2, r4
 800e2bc:	002b      	movs	r3, r5
 800e2be:	f7f3 f8fd 	bl	80014bc <__aeabi_dadd>
 800e2c2:	e754      	b.n	800e16e <__ieee754_log+0x146>
 800e2c4:	0002      	movs	r2, r0
 800e2c6:	000b      	movs	r3, r1
 800e2c8:	0030      	movs	r0, r6
 800e2ca:	0039      	movs	r1, r7
 800e2cc:	f7f4 fad2 	bl	8002874 <__aeabi_dsub>
 800e2d0:	9a04      	ldr	r2, [sp, #16]
 800e2d2:	9b05      	ldr	r3, [sp, #20]
 800e2d4:	f7f4 f862 	bl	800239c <__aeabi_dmul>
 800e2d8:	9b00      	ldr	r3, [sp, #0]
 800e2da:	0004      	movs	r4, r0
 800e2dc:	000d      	movs	r5, r1
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d102      	bne.n	800e2e8 <__ieee754_log+0x2c0>
 800e2e2:	0002      	movs	r2, r0
 800e2e4:	000b      	movs	r3, r1
 800e2e6:	e72c      	b.n	800e142 <__ieee754_log+0x11a>
 800e2e8:	4a10      	ldr	r2, [pc, #64]	; (800e32c <__ieee754_log+0x304>)
 800e2ea:	4b11      	ldr	r3, [pc, #68]	; (800e330 <__ieee754_log+0x308>)
 800e2ec:	9806      	ldr	r0, [sp, #24]
 800e2ee:	9907      	ldr	r1, [sp, #28]
 800e2f0:	f7f4 f854 	bl	800239c <__aeabi_dmul>
 800e2f4:	4a0f      	ldr	r2, [pc, #60]	; (800e334 <__ieee754_log+0x30c>)
 800e2f6:	9000      	str	r0, [sp, #0]
 800e2f8:	9101      	str	r1, [sp, #4]
 800e2fa:	9806      	ldr	r0, [sp, #24]
 800e2fc:	9907      	ldr	r1, [sp, #28]
 800e2fe:	4b0e      	ldr	r3, [pc, #56]	; (800e338 <__ieee754_log+0x310>)
 800e300:	f7f4 f84c 	bl	800239c <__aeabi_dmul>
 800e304:	0002      	movs	r2, r0
 800e306:	000b      	movs	r3, r1
 800e308:	0020      	movs	r0, r4
 800e30a:	0029      	movs	r1, r5
 800e30c:	e733      	b.n	800e176 <__ieee754_log+0x14e>
 800e30e:	2000      	movs	r0, #0
 800e310:	2100      	movs	r1, #0
 800e312:	e69a      	b.n	800e04a <__ieee754_log+0x22>
 800e314:	c3500000 	.word	0xc3500000
 800e318:	43500000 	.word	0x43500000
 800e31c:	7fefffff 	.word	0x7fefffff
 800e320:	fffffc01 	.word	0xfffffc01
 800e324:	00095f64 	.word	0x00095f64
 800e328:	3ff00000 	.word	0x3ff00000
 800e32c:	fee00000 	.word	0xfee00000
 800e330:	3fe62e42 	.word	0x3fe62e42
 800e334:	35793c76 	.word	0x35793c76
 800e338:	3dea39ef 	.word	0x3dea39ef
 800e33c:	55555555 	.word	0x55555555
 800e340:	3fd55555 	.word	0x3fd55555
 800e344:	3fe00000 	.word	0x3fe00000
 800e348:	fff9eb86 	.word	0xfff9eb86
 800e34c:	df3e5244 	.word	0xdf3e5244
 800e350:	3fc2f112 	.word	0x3fc2f112
 800e354:	96cb03de 	.word	0x96cb03de
 800e358:	3fc74664 	.word	0x3fc74664
 800e35c:	94229359 	.word	0x94229359
 800e360:	3fd24924 	.word	0x3fd24924
 800e364:	55555593 	.word	0x55555593
 800e368:	3fe55555 	.word	0x3fe55555
 800e36c:	d078c69f 	.word	0xd078c69f
 800e370:	3fc39a09 	.word	0x3fc39a09
 800e374:	1d8e78af 	.word	0x1d8e78af
 800e378:	3fcc71c5 	.word	0x3fcc71c5
 800e37c:	9997fa04 	.word	0x9997fa04
 800e380:	3fd99999 	.word	0x3fd99999
 800e384:	0006b851 	.word	0x0006b851

0800e388 <nan>:
 800e388:	2000      	movs	r0, #0
 800e38a:	4901      	ldr	r1, [pc, #4]	; (800e390 <nan+0x8>)
 800e38c:	4770      	bx	lr
 800e38e:	46c0      	nop			; (mov r8, r8)
 800e390:	7ff80000 	.word	0x7ff80000

0800e394 <_init>:
 800e394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e396:	46c0      	nop			; (mov r8, r8)
 800e398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e39a:	bc08      	pop	{r3}
 800e39c:	469e      	mov	lr, r3
 800e39e:	4770      	bx	lr

0800e3a0 <_fini>:
 800e3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a2:	46c0      	nop			; (mov r8, r8)
 800e3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3a6:	bc08      	pop	{r3}
 800e3a8:	469e      	mov	lr, r3
 800e3aa:	4770      	bx	lr
