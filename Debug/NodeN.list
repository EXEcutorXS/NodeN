
NodeN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c7c  0800df00  0800df00  0001df00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb7c  0800eb7c  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb7c  0800eb7c  0001eb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb84  0800eb84  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb84  0800eb84  0001eb84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb88  0800eb88  0001eb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800eb8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20000200  0800ed8c  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  0800ed8c  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015882  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b8  00000000  00000000  00035aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  00039268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  0003a618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001675d  00000000  00000000  0003b850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017fc6  00000000  00000000  00051fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e1e3  00000000  00000000  00069f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8156  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a24  00000000  00000000  000e81a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000200 	.word	0x20000200
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800dee4 	.word	0x0800dee4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000204 	.word	0x20000204
 8000104:	0800dee4 	.word	0x0800dee4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ff15 	bl	800226c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe65 	bl	800211c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ff07 	bl	800226c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fefd 	bl	800226c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe8d 	bl	80021a0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe83 	bl	80021a0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fc87 	bl	8000dc4 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc13 	bl	8000cec <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc79 	bl	8000dc4 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc6f 	bl	8000dc4 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc1f 	bl	8000d38 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc15 	bl	8000d38 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f84c 	bl	80005e8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4647      	mov	r7, r8
 8000562:	b580      	push	{r7, lr}
 8000564:	0007      	movs	r7, r0
 8000566:	4699      	mov	r9, r3
 8000568:	0c3b      	lsrs	r3, r7, #16
 800056a:	469c      	mov	ip, r3
 800056c:	0413      	lsls	r3, r2, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	001d      	movs	r5, r3
 8000572:	000e      	movs	r6, r1
 8000574:	4661      	mov	r1, ip
 8000576:	0400      	lsls	r0, r0, #16
 8000578:	0c14      	lsrs	r4, r2, #16
 800057a:	0c00      	lsrs	r0, r0, #16
 800057c:	4345      	muls	r5, r0
 800057e:	434b      	muls	r3, r1
 8000580:	4360      	muls	r0, r4
 8000582:	4361      	muls	r1, r4
 8000584:	18c0      	adds	r0, r0, r3
 8000586:	0c2c      	lsrs	r4, r5, #16
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4372      	muls	r2, r6
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	4463      	add	r3, ip
 80005a2:	042d      	lsls	r5, r5, #16
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	18c9      	adds	r1, r1, r3
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	1889      	adds	r1, r1, r2
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	; 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff13 	bl	80013f4 <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	; 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd5f 	bl	8001098 <__aeabi_fsub>
 80005da:	f000 ff0b 	bl	80013f4 <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__udivmoddi4>:
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	4657      	mov	r7, sl
 80005ec:	464e      	mov	r6, r9
 80005ee:	4645      	mov	r5, r8
 80005f0:	46de      	mov	lr, fp
 80005f2:	b5e0      	push	{r5, r6, r7, lr}
 80005f4:	0004      	movs	r4, r0
 80005f6:	000d      	movs	r5, r1
 80005f8:	4692      	mov	sl, r2
 80005fa:	4699      	mov	r9, r3
 80005fc:	b083      	sub	sp, #12
 80005fe:	428b      	cmp	r3, r1
 8000600:	d830      	bhi.n	8000664 <__udivmoddi4+0x7c>
 8000602:	d02d      	beq.n	8000660 <__udivmoddi4+0x78>
 8000604:	4649      	mov	r1, r9
 8000606:	4650      	mov	r0, sl
 8000608:	f002 fe2a 	bl	8003260 <__clzdi2>
 800060c:	0029      	movs	r1, r5
 800060e:	0006      	movs	r6, r0
 8000610:	0020      	movs	r0, r4
 8000612:	f002 fe25 	bl	8003260 <__clzdi2>
 8000616:	1a33      	subs	r3, r6, r0
 8000618:	4698      	mov	r8, r3
 800061a:	3b20      	subs	r3, #32
 800061c:	469b      	mov	fp, r3
 800061e:	d433      	bmi.n	8000688 <__udivmoddi4+0xa0>
 8000620:	465a      	mov	r2, fp
 8000622:	4653      	mov	r3, sl
 8000624:	4093      	lsls	r3, r2
 8000626:	4642      	mov	r2, r8
 8000628:	001f      	movs	r7, r3
 800062a:	4653      	mov	r3, sl
 800062c:	4093      	lsls	r3, r2
 800062e:	001e      	movs	r6, r3
 8000630:	42af      	cmp	r7, r5
 8000632:	d83a      	bhi.n	80006aa <__udivmoddi4+0xc2>
 8000634:	42af      	cmp	r7, r5
 8000636:	d100      	bne.n	800063a <__udivmoddi4+0x52>
 8000638:	e078      	b.n	800072c <__udivmoddi4+0x144>
 800063a:	465b      	mov	r3, fp
 800063c:	1ba4      	subs	r4, r4, r6
 800063e:	41bd      	sbcs	r5, r7
 8000640:	2b00      	cmp	r3, #0
 8000642:	da00      	bge.n	8000646 <__udivmoddi4+0x5e>
 8000644:	e075      	b.n	8000732 <__udivmoddi4+0x14a>
 8000646:	2200      	movs	r2, #0
 8000648:	2300      	movs	r3, #0
 800064a:	9200      	str	r2, [sp, #0]
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2301      	movs	r3, #1
 8000650:	465a      	mov	r2, fp
 8000652:	4093      	lsls	r3, r2
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2301      	movs	r3, #1
 8000658:	4642      	mov	r2, r8
 800065a:	4093      	lsls	r3, r2
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	e028      	b.n	80006b2 <__udivmoddi4+0xca>
 8000660:	4282      	cmp	r2, r0
 8000662:	d9cf      	bls.n	8000604 <__udivmoddi4+0x1c>
 8000664:	2200      	movs	r2, #0
 8000666:	2300      	movs	r3, #0
 8000668:	9200      	str	r2, [sp, #0]
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <__udivmoddi4+0x8e>
 8000672:	601c      	str	r4, [r3, #0]
 8000674:	605d      	str	r5, [r3, #4]
 8000676:	9800      	ldr	r0, [sp, #0]
 8000678:	9901      	ldr	r1, [sp, #4]
 800067a:	b003      	add	sp, #12
 800067c:	bcf0      	pop	{r4, r5, r6, r7}
 800067e:	46bb      	mov	fp, r7
 8000680:	46b2      	mov	sl, r6
 8000682:	46a9      	mov	r9, r5
 8000684:	46a0      	mov	r8, r4
 8000686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000688:	4642      	mov	r2, r8
 800068a:	2320      	movs	r3, #32
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	4652      	mov	r2, sl
 8000690:	40da      	lsrs	r2, r3
 8000692:	4641      	mov	r1, r8
 8000694:	0013      	movs	r3, r2
 8000696:	464a      	mov	r2, r9
 8000698:	408a      	lsls	r2, r1
 800069a:	0017      	movs	r7, r2
 800069c:	4642      	mov	r2, r8
 800069e:	431f      	orrs	r7, r3
 80006a0:	4653      	mov	r3, sl
 80006a2:	4093      	lsls	r3, r2
 80006a4:	001e      	movs	r6, r3
 80006a6:	42af      	cmp	r7, r5
 80006a8:	d9c4      	bls.n	8000634 <__udivmoddi4+0x4c>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2300      	movs	r3, #0
 80006ae:	9200      	str	r2, [sp, #0]
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	4643      	mov	r3, r8
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0d9      	beq.n	800066c <__udivmoddi4+0x84>
 80006b8:	07fb      	lsls	r3, r7, #31
 80006ba:	0872      	lsrs	r2, r6, #1
 80006bc:	431a      	orrs	r2, r3
 80006be:	4646      	mov	r6, r8
 80006c0:	087b      	lsrs	r3, r7, #1
 80006c2:	e00e      	b.n	80006e2 <__udivmoddi4+0xfa>
 80006c4:	42ab      	cmp	r3, r5
 80006c6:	d101      	bne.n	80006cc <__udivmoddi4+0xe4>
 80006c8:	42a2      	cmp	r2, r4
 80006ca:	d80c      	bhi.n	80006e6 <__udivmoddi4+0xfe>
 80006cc:	1aa4      	subs	r4, r4, r2
 80006ce:	419d      	sbcs	r5, r3
 80006d0:	2001      	movs	r0, #1
 80006d2:	1924      	adds	r4, r4, r4
 80006d4:	416d      	adcs	r5, r5
 80006d6:	2100      	movs	r1, #0
 80006d8:	3e01      	subs	r6, #1
 80006da:	1824      	adds	r4, r4, r0
 80006dc:	414d      	adcs	r5, r1
 80006de:	2e00      	cmp	r6, #0
 80006e0:	d006      	beq.n	80006f0 <__udivmoddi4+0x108>
 80006e2:	42ab      	cmp	r3, r5
 80006e4:	d9ee      	bls.n	80006c4 <__udivmoddi4+0xdc>
 80006e6:	3e01      	subs	r6, #1
 80006e8:	1924      	adds	r4, r4, r4
 80006ea:	416d      	adcs	r5, r5
 80006ec:	2e00      	cmp	r6, #0
 80006ee:	d1f8      	bne.n	80006e2 <__udivmoddi4+0xfa>
 80006f0:	9800      	ldr	r0, [sp, #0]
 80006f2:	9901      	ldr	r1, [sp, #4]
 80006f4:	465b      	mov	r3, fp
 80006f6:	1900      	adds	r0, r0, r4
 80006f8:	4169      	adcs	r1, r5
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db24      	blt.n	8000748 <__udivmoddi4+0x160>
 80006fe:	002b      	movs	r3, r5
 8000700:	465a      	mov	r2, fp
 8000702:	4644      	mov	r4, r8
 8000704:	40d3      	lsrs	r3, r2
 8000706:	002a      	movs	r2, r5
 8000708:	40e2      	lsrs	r2, r4
 800070a:	001c      	movs	r4, r3
 800070c:	465b      	mov	r3, fp
 800070e:	0015      	movs	r5, r2
 8000710:	2b00      	cmp	r3, #0
 8000712:	db2a      	blt.n	800076a <__udivmoddi4+0x182>
 8000714:	0026      	movs	r6, r4
 8000716:	409e      	lsls	r6, r3
 8000718:	0033      	movs	r3, r6
 800071a:	0026      	movs	r6, r4
 800071c:	4647      	mov	r7, r8
 800071e:	40be      	lsls	r6, r7
 8000720:	0032      	movs	r2, r6
 8000722:	1a80      	subs	r0, r0, r2
 8000724:	4199      	sbcs	r1, r3
 8000726:	9000      	str	r0, [sp, #0]
 8000728:	9101      	str	r1, [sp, #4]
 800072a:	e79f      	b.n	800066c <__udivmoddi4+0x84>
 800072c:	42a3      	cmp	r3, r4
 800072e:	d8bc      	bhi.n	80006aa <__udivmoddi4+0xc2>
 8000730:	e783      	b.n	800063a <__udivmoddi4+0x52>
 8000732:	4642      	mov	r2, r8
 8000734:	2320      	movs	r3, #32
 8000736:	2100      	movs	r1, #0
 8000738:	1a9b      	subs	r3, r3, r2
 800073a:	2200      	movs	r2, #0
 800073c:	9100      	str	r1, [sp, #0]
 800073e:	9201      	str	r2, [sp, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	40da      	lsrs	r2, r3
 8000744:	9201      	str	r2, [sp, #4]
 8000746:	e786      	b.n	8000656 <__udivmoddi4+0x6e>
 8000748:	4642      	mov	r2, r8
 800074a:	2320      	movs	r3, #32
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	002a      	movs	r2, r5
 8000750:	4646      	mov	r6, r8
 8000752:	409a      	lsls	r2, r3
 8000754:	0023      	movs	r3, r4
 8000756:	40f3      	lsrs	r3, r6
 8000758:	4644      	mov	r4, r8
 800075a:	4313      	orrs	r3, r2
 800075c:	002a      	movs	r2, r5
 800075e:	40e2      	lsrs	r2, r4
 8000760:	001c      	movs	r4, r3
 8000762:	465b      	mov	r3, fp
 8000764:	0015      	movs	r5, r2
 8000766:	2b00      	cmp	r3, #0
 8000768:	dad4      	bge.n	8000714 <__udivmoddi4+0x12c>
 800076a:	4642      	mov	r2, r8
 800076c:	002f      	movs	r7, r5
 800076e:	2320      	movs	r3, #32
 8000770:	0026      	movs	r6, r4
 8000772:	4097      	lsls	r7, r2
 8000774:	1a9b      	subs	r3, r3, r2
 8000776:	40de      	lsrs	r6, r3
 8000778:	003b      	movs	r3, r7
 800077a:	4333      	orrs	r3, r6
 800077c:	e7cd      	b.n	800071a <__udivmoddi4+0x132>
 800077e:	46c0      	nop			; (mov r8, r8)

08000780 <__aeabi_fadd>:
 8000780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000782:	46c6      	mov	lr, r8
 8000784:	0243      	lsls	r3, r0, #9
 8000786:	0a5b      	lsrs	r3, r3, #9
 8000788:	024e      	lsls	r6, r1, #9
 800078a:	0045      	lsls	r5, r0, #1
 800078c:	004f      	lsls	r7, r1, #1
 800078e:	00da      	lsls	r2, r3, #3
 8000790:	0fc4      	lsrs	r4, r0, #31
 8000792:	469c      	mov	ip, r3
 8000794:	0a70      	lsrs	r0, r6, #9
 8000796:	4690      	mov	r8, r2
 8000798:	b500      	push	{lr}
 800079a:	0e2d      	lsrs	r5, r5, #24
 800079c:	0e3f      	lsrs	r7, r7, #24
 800079e:	0fc9      	lsrs	r1, r1, #31
 80007a0:	09b6      	lsrs	r6, r6, #6
 80007a2:	428c      	cmp	r4, r1
 80007a4:	d04b      	beq.n	800083e <__aeabi_fadd+0xbe>
 80007a6:	1bea      	subs	r2, r5, r7
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	dd36      	ble.n	800081a <__aeabi_fadd+0x9a>
 80007ac:	2f00      	cmp	r7, #0
 80007ae:	d061      	beq.n	8000874 <__aeabi_fadd+0xf4>
 80007b0:	2dff      	cmp	r5, #255	; 0xff
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fadd+0x36>
 80007b4:	e0ad      	b.n	8000912 <__aeabi_fadd+0x192>
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	04db      	lsls	r3, r3, #19
 80007ba:	431e      	orrs	r6, r3
 80007bc:	2a1b      	cmp	r2, #27
 80007be:	dc00      	bgt.n	80007c2 <__aeabi_fadd+0x42>
 80007c0:	e0d3      	b.n	800096a <__aeabi_fadd+0x1ea>
 80007c2:	2001      	movs	r0, #1
 80007c4:	4643      	mov	r3, r8
 80007c6:	1a18      	subs	r0, r3, r0
 80007c8:	0143      	lsls	r3, r0, #5
 80007ca:	d400      	bmi.n	80007ce <__aeabi_fadd+0x4e>
 80007cc:	e08c      	b.n	80008e8 <__aeabi_fadd+0x168>
 80007ce:	0180      	lsls	r0, r0, #6
 80007d0:	0987      	lsrs	r7, r0, #6
 80007d2:	0038      	movs	r0, r7
 80007d4:	f002 fd26 	bl	8003224 <__clzsi2>
 80007d8:	3805      	subs	r0, #5
 80007da:	4087      	lsls	r7, r0
 80007dc:	4285      	cmp	r5, r0
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_fadd+0x62>
 80007e0:	e0b6      	b.n	8000950 <__aeabi_fadd+0x1d0>
 80007e2:	1a2d      	subs	r5, r5, r0
 80007e4:	48b3      	ldr	r0, [pc, #716]	; (8000ab4 <__aeabi_fadd+0x334>)
 80007e6:	4038      	ands	r0, r7
 80007e8:	0743      	lsls	r3, r0, #29
 80007ea:	d004      	beq.n	80007f6 <__aeabi_fadd+0x76>
 80007ec:	230f      	movs	r3, #15
 80007ee:	4003      	ands	r3, r0
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fadd+0x76>
 80007f4:	3004      	adds	r0, #4
 80007f6:	0143      	lsls	r3, r0, #5
 80007f8:	d400      	bmi.n	80007fc <__aeabi_fadd+0x7c>
 80007fa:	e078      	b.n	80008ee <__aeabi_fadd+0x16e>
 80007fc:	1c6a      	adds	r2, r5, #1
 80007fe:	2dfe      	cmp	r5, #254	; 0xfe
 8000800:	d065      	beq.n	80008ce <__aeabi_fadd+0x14e>
 8000802:	0180      	lsls	r0, r0, #6
 8000804:	0a43      	lsrs	r3, r0, #9
 8000806:	469c      	mov	ip, r3
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	4663      	mov	r3, ip
 800080c:	05d0      	lsls	r0, r2, #23
 800080e:	4318      	orrs	r0, r3
 8000810:	07e4      	lsls	r4, r4, #31
 8000812:	4320      	orrs	r0, r4
 8000814:	bc80      	pop	{r7}
 8000816:	46b8      	mov	r8, r7
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081a:	2a00      	cmp	r2, #0
 800081c:	d035      	beq.n	800088a <__aeabi_fadd+0x10a>
 800081e:	1b7a      	subs	r2, r7, r5
 8000820:	2d00      	cmp	r5, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0xa6>
 8000824:	e0af      	b.n	8000986 <__aeabi_fadd+0x206>
 8000826:	4643      	mov	r3, r8
 8000828:	2b00      	cmp	r3, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fadd+0xae>
 800082c:	e0a7      	b.n	800097e <__aeabi_fadd+0x1fe>
 800082e:	1e53      	subs	r3, r2, #1
 8000830:	2a01      	cmp	r2, #1
 8000832:	d100      	bne.n	8000836 <__aeabi_fadd+0xb6>
 8000834:	e12f      	b.n	8000a96 <__aeabi_fadd+0x316>
 8000836:	2aff      	cmp	r2, #255	; 0xff
 8000838:	d069      	beq.n	800090e <__aeabi_fadd+0x18e>
 800083a:	001a      	movs	r2, r3
 800083c:	e0aa      	b.n	8000994 <__aeabi_fadd+0x214>
 800083e:	1be9      	subs	r1, r5, r7
 8000840:	2900      	cmp	r1, #0
 8000842:	dd70      	ble.n	8000926 <__aeabi_fadd+0x1a6>
 8000844:	2f00      	cmp	r7, #0
 8000846:	d037      	beq.n	80008b8 <__aeabi_fadd+0x138>
 8000848:	2dff      	cmp	r5, #255	; 0xff
 800084a:	d062      	beq.n	8000912 <__aeabi_fadd+0x192>
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	04db      	lsls	r3, r3, #19
 8000850:	431e      	orrs	r6, r3
 8000852:	291b      	cmp	r1, #27
 8000854:	dc00      	bgt.n	8000858 <__aeabi_fadd+0xd8>
 8000856:	e0b0      	b.n	80009ba <__aeabi_fadd+0x23a>
 8000858:	2001      	movs	r0, #1
 800085a:	4440      	add	r0, r8
 800085c:	0143      	lsls	r3, r0, #5
 800085e:	d543      	bpl.n	80008e8 <__aeabi_fadd+0x168>
 8000860:	3501      	adds	r5, #1
 8000862:	2dff      	cmp	r5, #255	; 0xff
 8000864:	d033      	beq.n	80008ce <__aeabi_fadd+0x14e>
 8000866:	2301      	movs	r3, #1
 8000868:	4a93      	ldr	r2, [pc, #588]	; (8000ab8 <__aeabi_fadd+0x338>)
 800086a:	4003      	ands	r3, r0
 800086c:	0840      	lsrs	r0, r0, #1
 800086e:	4010      	ands	r0, r2
 8000870:	4318      	orrs	r0, r3
 8000872:	e7b9      	b.n	80007e8 <__aeabi_fadd+0x68>
 8000874:	2e00      	cmp	r6, #0
 8000876:	d100      	bne.n	800087a <__aeabi_fadd+0xfa>
 8000878:	e083      	b.n	8000982 <__aeabi_fadd+0x202>
 800087a:	1e51      	subs	r1, r2, #1
 800087c:	2a01      	cmp	r2, #1
 800087e:	d100      	bne.n	8000882 <__aeabi_fadd+0x102>
 8000880:	e0d8      	b.n	8000a34 <__aeabi_fadd+0x2b4>
 8000882:	2aff      	cmp	r2, #255	; 0xff
 8000884:	d045      	beq.n	8000912 <__aeabi_fadd+0x192>
 8000886:	000a      	movs	r2, r1
 8000888:	e798      	b.n	80007bc <__aeabi_fadd+0x3c>
 800088a:	27fe      	movs	r7, #254	; 0xfe
 800088c:	1c6a      	adds	r2, r5, #1
 800088e:	4217      	tst	r7, r2
 8000890:	d000      	beq.n	8000894 <__aeabi_fadd+0x114>
 8000892:	e086      	b.n	80009a2 <__aeabi_fadd+0x222>
 8000894:	2d00      	cmp	r5, #0
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x11a>
 8000898:	e0b7      	b.n	8000a0a <__aeabi_fadd+0x28a>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d100      	bne.n	80008a2 <__aeabi_fadd+0x122>
 80008a0:	e0f3      	b.n	8000a8a <__aeabi_fadd+0x30a>
 80008a2:	2200      	movs	r2, #0
 80008a4:	2e00      	cmp	r6, #0
 80008a6:	d0b0      	beq.n	800080a <__aeabi_fadd+0x8a>
 80008a8:	1b98      	subs	r0, r3, r6
 80008aa:	0143      	lsls	r3, r0, #5
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_fadd+0x130>
 80008ae:	e0fa      	b.n	8000aa6 <__aeabi_fadd+0x326>
 80008b0:	4643      	mov	r3, r8
 80008b2:	000c      	movs	r4, r1
 80008b4:	1af0      	subs	r0, r6, r3
 80008b6:	e797      	b.n	80007e8 <__aeabi_fadd+0x68>
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d100      	bne.n	80008be <__aeabi_fadd+0x13e>
 80008bc:	e0c8      	b.n	8000a50 <__aeabi_fadd+0x2d0>
 80008be:	1e4a      	subs	r2, r1, #1
 80008c0:	2901      	cmp	r1, #1
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fadd+0x146>
 80008c4:	e0ae      	b.n	8000a24 <__aeabi_fadd+0x2a4>
 80008c6:	29ff      	cmp	r1, #255	; 0xff
 80008c8:	d023      	beq.n	8000912 <__aeabi_fadd+0x192>
 80008ca:	0011      	movs	r1, r2
 80008cc:	e7c1      	b.n	8000852 <__aeabi_fadd+0xd2>
 80008ce:	2300      	movs	r3, #0
 80008d0:	22ff      	movs	r2, #255	; 0xff
 80008d2:	469c      	mov	ip, r3
 80008d4:	e799      	b.n	800080a <__aeabi_fadd+0x8a>
 80008d6:	21fe      	movs	r1, #254	; 0xfe
 80008d8:	1c6a      	adds	r2, r5, #1
 80008da:	4211      	tst	r1, r2
 80008dc:	d077      	beq.n	80009ce <__aeabi_fadd+0x24e>
 80008de:	2aff      	cmp	r2, #255	; 0xff
 80008e0:	d0f5      	beq.n	80008ce <__aeabi_fadd+0x14e>
 80008e2:	0015      	movs	r5, r2
 80008e4:	4446      	add	r6, r8
 80008e6:	0870      	lsrs	r0, r6, #1
 80008e8:	0743      	lsls	r3, r0, #29
 80008ea:	d000      	beq.n	80008ee <__aeabi_fadd+0x16e>
 80008ec:	e77e      	b.n	80007ec <__aeabi_fadd+0x6c>
 80008ee:	08c3      	lsrs	r3, r0, #3
 80008f0:	2dff      	cmp	r5, #255	; 0xff
 80008f2:	d00e      	beq.n	8000912 <__aeabi_fadd+0x192>
 80008f4:	025b      	lsls	r3, r3, #9
 80008f6:	0a5b      	lsrs	r3, r3, #9
 80008f8:	469c      	mov	ip, r3
 80008fa:	b2ea      	uxtb	r2, r5
 80008fc:	e785      	b.n	800080a <__aeabi_fadd+0x8a>
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d007      	beq.n	8000912 <__aeabi_fadd+0x192>
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	03d2      	lsls	r2, r2, #15
 8000906:	4213      	tst	r3, r2
 8000908:	d003      	beq.n	8000912 <__aeabi_fadd+0x192>
 800090a:	4210      	tst	r0, r2
 800090c:	d101      	bne.n	8000912 <__aeabi_fadd+0x192>
 800090e:	000c      	movs	r4, r1
 8000910:	0003      	movs	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0db      	beq.n	80008ce <__aeabi_fadd+0x14e>
 8000916:	2080      	movs	r0, #128	; 0x80
 8000918:	03c0      	lsls	r0, r0, #15
 800091a:	4318      	orrs	r0, r3
 800091c:	0240      	lsls	r0, r0, #9
 800091e:	0a43      	lsrs	r3, r0, #9
 8000920:	469c      	mov	ip, r3
 8000922:	22ff      	movs	r2, #255	; 0xff
 8000924:	e771      	b.n	800080a <__aeabi_fadd+0x8a>
 8000926:	2900      	cmp	r1, #0
 8000928:	d0d5      	beq.n	80008d6 <__aeabi_fadd+0x156>
 800092a:	1b7a      	subs	r2, r7, r5
 800092c:	2d00      	cmp	r5, #0
 800092e:	d160      	bne.n	80009f2 <__aeabi_fadd+0x272>
 8000930:	4643      	mov	r3, r8
 8000932:	2b00      	cmp	r3, #0
 8000934:	d024      	beq.n	8000980 <__aeabi_fadd+0x200>
 8000936:	1e53      	subs	r3, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d073      	beq.n	8000a24 <__aeabi_fadd+0x2a4>
 800093c:	2aff      	cmp	r2, #255	; 0xff
 800093e:	d0e7      	beq.n	8000910 <__aeabi_fadd+0x190>
 8000940:	001a      	movs	r2, r3
 8000942:	2a1b      	cmp	r2, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x1c8>
 8000946:	e085      	b.n	8000a54 <__aeabi_fadd+0x2d4>
 8000948:	2001      	movs	r0, #1
 800094a:	003d      	movs	r5, r7
 800094c:	1980      	adds	r0, r0, r6
 800094e:	e785      	b.n	800085c <__aeabi_fadd+0xdc>
 8000950:	2320      	movs	r3, #32
 8000952:	003a      	movs	r2, r7
 8000954:	1b45      	subs	r5, r0, r5
 8000956:	0038      	movs	r0, r7
 8000958:	3501      	adds	r5, #1
 800095a:	40ea      	lsrs	r2, r5
 800095c:	1b5d      	subs	r5, r3, r5
 800095e:	40a8      	lsls	r0, r5
 8000960:	1e43      	subs	r3, r0, #1
 8000962:	4198      	sbcs	r0, r3
 8000964:	2500      	movs	r5, #0
 8000966:	4310      	orrs	r0, r2
 8000968:	e73e      	b.n	80007e8 <__aeabi_fadd+0x68>
 800096a:	2320      	movs	r3, #32
 800096c:	0030      	movs	r0, r6
 800096e:	1a9b      	subs	r3, r3, r2
 8000970:	0031      	movs	r1, r6
 8000972:	4098      	lsls	r0, r3
 8000974:	40d1      	lsrs	r1, r2
 8000976:	1e43      	subs	r3, r0, #1
 8000978:	4198      	sbcs	r0, r3
 800097a:	4308      	orrs	r0, r1
 800097c:	e722      	b.n	80007c4 <__aeabi_fadd+0x44>
 800097e:	000c      	movs	r4, r1
 8000980:	0003      	movs	r3, r0
 8000982:	0015      	movs	r5, r2
 8000984:	e7b4      	b.n	80008f0 <__aeabi_fadd+0x170>
 8000986:	2fff      	cmp	r7, #255	; 0xff
 8000988:	d0c1      	beq.n	800090e <__aeabi_fadd+0x18e>
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	4640      	mov	r0, r8
 800098e:	04db      	lsls	r3, r3, #19
 8000990:	4318      	orrs	r0, r3
 8000992:	4680      	mov	r8, r0
 8000994:	2a1b      	cmp	r2, #27
 8000996:	dd51      	ble.n	8000a3c <__aeabi_fadd+0x2bc>
 8000998:	2001      	movs	r0, #1
 800099a:	000c      	movs	r4, r1
 800099c:	003d      	movs	r5, r7
 800099e:	1a30      	subs	r0, r6, r0
 80009a0:	e712      	b.n	80007c8 <__aeabi_fadd+0x48>
 80009a2:	4643      	mov	r3, r8
 80009a4:	1b9f      	subs	r7, r3, r6
 80009a6:	017b      	lsls	r3, r7, #5
 80009a8:	d42b      	bmi.n	8000a02 <__aeabi_fadd+0x282>
 80009aa:	2f00      	cmp	r7, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fadd+0x230>
 80009ae:	e710      	b.n	80007d2 <__aeabi_fadd+0x52>
 80009b0:	2300      	movs	r3, #0
 80009b2:	2400      	movs	r4, #0
 80009b4:	2200      	movs	r2, #0
 80009b6:	469c      	mov	ip, r3
 80009b8:	e727      	b.n	800080a <__aeabi_fadd+0x8a>
 80009ba:	2320      	movs	r3, #32
 80009bc:	0032      	movs	r2, r6
 80009be:	0030      	movs	r0, r6
 80009c0:	40ca      	lsrs	r2, r1
 80009c2:	1a59      	subs	r1, r3, r1
 80009c4:	4088      	lsls	r0, r1
 80009c6:	1e43      	subs	r3, r0, #1
 80009c8:	4198      	sbcs	r0, r3
 80009ca:	4310      	orrs	r0, r2
 80009cc:	e745      	b.n	800085a <__aeabi_fadd+0xda>
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d14a      	bne.n	8000a68 <__aeabi_fadd+0x2e8>
 80009d2:	4643      	mov	r3, r8
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d063      	beq.n	8000aa0 <__aeabi_fadd+0x320>
 80009d8:	2200      	movs	r2, #0
 80009da:	2e00      	cmp	r6, #0
 80009dc:	d100      	bne.n	80009e0 <__aeabi_fadd+0x260>
 80009de:	e714      	b.n	800080a <__aeabi_fadd+0x8a>
 80009e0:	0030      	movs	r0, r6
 80009e2:	4440      	add	r0, r8
 80009e4:	0143      	lsls	r3, r0, #5
 80009e6:	d400      	bmi.n	80009ea <__aeabi_fadd+0x26a>
 80009e8:	e77e      	b.n	80008e8 <__aeabi_fadd+0x168>
 80009ea:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <__aeabi_fadd+0x334>)
 80009ec:	3501      	adds	r5, #1
 80009ee:	4018      	ands	r0, r3
 80009f0:	e77a      	b.n	80008e8 <__aeabi_fadd+0x168>
 80009f2:	2fff      	cmp	r7, #255	; 0xff
 80009f4:	d08c      	beq.n	8000910 <__aeabi_fadd+0x190>
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	4641      	mov	r1, r8
 80009fa:	04db      	lsls	r3, r3, #19
 80009fc:	4319      	orrs	r1, r3
 80009fe:	4688      	mov	r8, r1
 8000a00:	e79f      	b.n	8000942 <__aeabi_fadd+0x1c2>
 8000a02:	4643      	mov	r3, r8
 8000a04:	000c      	movs	r4, r1
 8000a06:	1af7      	subs	r7, r6, r3
 8000a08:	e6e3      	b.n	80007d2 <__aeabi_fadd+0x52>
 8000a0a:	4642      	mov	r2, r8
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_fadd+0x292>
 8000a10:	e775      	b.n	80008fe <__aeabi_fadd+0x17e>
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d000      	beq.n	8000a18 <__aeabi_fadd+0x298>
 8000a16:	e77a      	b.n	800090e <__aeabi_fadd+0x18e>
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	03db      	lsls	r3, r3, #15
 8000a1c:	2400      	movs	r4, #0
 8000a1e:	469c      	mov	ip, r3
 8000a20:	22ff      	movs	r2, #255	; 0xff
 8000a22:	e6f2      	b.n	800080a <__aeabi_fadd+0x8a>
 8000a24:	0030      	movs	r0, r6
 8000a26:	4440      	add	r0, r8
 8000a28:	2501      	movs	r5, #1
 8000a2a:	0143      	lsls	r3, r0, #5
 8000a2c:	d400      	bmi.n	8000a30 <__aeabi_fadd+0x2b0>
 8000a2e:	e75b      	b.n	80008e8 <__aeabi_fadd+0x168>
 8000a30:	2502      	movs	r5, #2
 8000a32:	e718      	b.n	8000866 <__aeabi_fadd+0xe6>
 8000a34:	4643      	mov	r3, r8
 8000a36:	2501      	movs	r5, #1
 8000a38:	1b98      	subs	r0, r3, r6
 8000a3a:	e6c5      	b.n	80007c8 <__aeabi_fadd+0x48>
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	4644      	mov	r4, r8
 8000a40:	4640      	mov	r0, r8
 8000a42:	40d4      	lsrs	r4, r2
 8000a44:	1a9a      	subs	r2, r3, r2
 8000a46:	4090      	lsls	r0, r2
 8000a48:	1e43      	subs	r3, r0, #1
 8000a4a:	4198      	sbcs	r0, r3
 8000a4c:	4320      	orrs	r0, r4
 8000a4e:	e7a4      	b.n	800099a <__aeabi_fadd+0x21a>
 8000a50:	000d      	movs	r5, r1
 8000a52:	e74d      	b.n	80008f0 <__aeabi_fadd+0x170>
 8000a54:	2320      	movs	r3, #32
 8000a56:	4641      	mov	r1, r8
 8000a58:	4640      	mov	r0, r8
 8000a5a:	40d1      	lsrs	r1, r2
 8000a5c:	1a9a      	subs	r2, r3, r2
 8000a5e:	4090      	lsls	r0, r2
 8000a60:	1e43      	subs	r3, r0, #1
 8000a62:	4198      	sbcs	r0, r3
 8000a64:	4308      	orrs	r0, r1
 8000a66:	e770      	b.n	800094a <__aeabi_fadd+0x1ca>
 8000a68:	4642      	mov	r2, r8
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_fadd+0x2f0>
 8000a6e:	e74f      	b.n	8000910 <__aeabi_fadd+0x190>
 8000a70:	2e00      	cmp	r6, #0
 8000a72:	d100      	bne.n	8000a76 <__aeabi_fadd+0x2f6>
 8000a74:	e74d      	b.n	8000912 <__aeabi_fadd+0x192>
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	03d2      	lsls	r2, r2, #15
 8000a7a:	4213      	tst	r3, r2
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fadd+0x300>
 8000a7e:	e748      	b.n	8000912 <__aeabi_fadd+0x192>
 8000a80:	4210      	tst	r0, r2
 8000a82:	d000      	beq.n	8000a86 <__aeabi_fadd+0x306>
 8000a84:	e745      	b.n	8000912 <__aeabi_fadd+0x192>
 8000a86:	0003      	movs	r3, r0
 8000a88:	e743      	b.n	8000912 <__aeabi_fadd+0x192>
 8000a8a:	2e00      	cmp	r6, #0
 8000a8c:	d090      	beq.n	80009b0 <__aeabi_fadd+0x230>
 8000a8e:	000c      	movs	r4, r1
 8000a90:	4684      	mov	ip, r0
 8000a92:	2200      	movs	r2, #0
 8000a94:	e6b9      	b.n	800080a <__aeabi_fadd+0x8a>
 8000a96:	4643      	mov	r3, r8
 8000a98:	000c      	movs	r4, r1
 8000a9a:	1af0      	subs	r0, r6, r3
 8000a9c:	3501      	adds	r5, #1
 8000a9e:	e693      	b.n	80007c8 <__aeabi_fadd+0x48>
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	e6b1      	b.n	800080a <__aeabi_fadd+0x8a>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	d000      	beq.n	8000aac <__aeabi_fadd+0x32c>
 8000aaa:	e71d      	b.n	80008e8 <__aeabi_fadd+0x168>
 8000aac:	2300      	movs	r3, #0
 8000aae:	2400      	movs	r4, #0
 8000ab0:	469c      	mov	ip, r3
 8000ab2:	e6aa      	b.n	800080a <__aeabi_fadd+0x8a>
 8000ab4:	fbffffff 	.word	0xfbffffff
 8000ab8:	7dffffff 	.word	0x7dffffff

08000abc <__aeabi_fdiv>:
 8000abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000abe:	464f      	mov	r7, r9
 8000ac0:	4646      	mov	r6, r8
 8000ac2:	46d6      	mov	lr, sl
 8000ac4:	0245      	lsls	r5, r0, #9
 8000ac6:	b5c0      	push	{r6, r7, lr}
 8000ac8:	0047      	lsls	r7, r0, #1
 8000aca:	1c0c      	adds	r4, r1, #0
 8000acc:	0a6d      	lsrs	r5, r5, #9
 8000ace:	0e3f      	lsrs	r7, r7, #24
 8000ad0:	0fc6      	lsrs	r6, r0, #31
 8000ad2:	2f00      	cmp	r7, #0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_fdiv+0x1c>
 8000ad6:	e070      	b.n	8000bba <__aeabi_fdiv+0xfe>
 8000ad8:	2fff      	cmp	r7, #255	; 0xff
 8000ada:	d100      	bne.n	8000ade <__aeabi_fdiv+0x22>
 8000adc:	e075      	b.n	8000bca <__aeabi_fdiv+0x10e>
 8000ade:	00eb      	lsls	r3, r5, #3
 8000ae0:	2580      	movs	r5, #128	; 0x80
 8000ae2:	04ed      	lsls	r5, r5, #19
 8000ae4:	431d      	orrs	r5, r3
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	4699      	mov	r9, r3
 8000aea:	469a      	mov	sl, r3
 8000aec:	3f7f      	subs	r7, #127	; 0x7f
 8000aee:	0260      	lsls	r0, r4, #9
 8000af0:	0a43      	lsrs	r3, r0, #9
 8000af2:	4698      	mov	r8, r3
 8000af4:	0063      	lsls	r3, r4, #1
 8000af6:	0e1b      	lsrs	r3, r3, #24
 8000af8:	0fe4      	lsrs	r4, r4, #31
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d04e      	beq.n	8000b9c <__aeabi_fdiv+0xe0>
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d046      	beq.n	8000b90 <__aeabi_fdiv+0xd4>
 8000b02:	4642      	mov	r2, r8
 8000b04:	00d0      	lsls	r0, r2, #3
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	04d2      	lsls	r2, r2, #19
 8000b0a:	4302      	orrs	r2, r0
 8000b0c:	4690      	mov	r8, r2
 8000b0e:	2200      	movs	r2, #0
 8000b10:	3b7f      	subs	r3, #127	; 0x7f
 8000b12:	0031      	movs	r1, r6
 8000b14:	1aff      	subs	r7, r7, r3
 8000b16:	464b      	mov	r3, r9
 8000b18:	4061      	eors	r1, r4
 8000b1a:	b2c9      	uxtb	r1, r1
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	2b0f      	cmp	r3, #15
 8000b20:	d900      	bls.n	8000b24 <__aeabi_fdiv+0x68>
 8000b22:	e0b5      	b.n	8000c90 <__aeabi_fdiv+0x1d4>
 8000b24:	486e      	ldr	r0, [pc, #440]	; (8000ce0 <__aeabi_fdiv+0x224>)
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	58c3      	ldr	r3, [r0, r3]
 8000b2a:	469f      	mov	pc, r3
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	4698      	mov	r8, r3
 8000b30:	0026      	movs	r6, r4
 8000b32:	4645      	mov	r5, r8
 8000b34:	4692      	mov	sl, r2
 8000b36:	4653      	mov	r3, sl
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_fdiv+0x82>
 8000b3c:	e089      	b.n	8000c52 <__aeabi_fdiv+0x196>
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d100      	bne.n	8000b44 <__aeabi_fdiv+0x88>
 8000b42:	e09e      	b.n	8000c82 <__aeabi_fdiv+0x1c6>
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d018      	beq.n	8000b7a <__aeabi_fdiv+0xbe>
 8000b48:	003b      	movs	r3, r7
 8000b4a:	337f      	adds	r3, #127	; 0x7f
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd69      	ble.n	8000c24 <__aeabi_fdiv+0x168>
 8000b50:	076a      	lsls	r2, r5, #29
 8000b52:	d004      	beq.n	8000b5e <__aeabi_fdiv+0xa2>
 8000b54:	220f      	movs	r2, #15
 8000b56:	402a      	ands	r2, r5
 8000b58:	2a04      	cmp	r2, #4
 8000b5a:	d000      	beq.n	8000b5e <__aeabi_fdiv+0xa2>
 8000b5c:	3504      	adds	r5, #4
 8000b5e:	012a      	lsls	r2, r5, #4
 8000b60:	d503      	bpl.n	8000b6a <__aeabi_fdiv+0xae>
 8000b62:	4b60      	ldr	r3, [pc, #384]	; (8000ce4 <__aeabi_fdiv+0x228>)
 8000b64:	401d      	ands	r5, r3
 8000b66:	003b      	movs	r3, r7
 8000b68:	3380      	adds	r3, #128	; 0x80
 8000b6a:	2bfe      	cmp	r3, #254	; 0xfe
 8000b6c:	dd00      	ble.n	8000b70 <__aeabi_fdiv+0xb4>
 8000b6e:	e070      	b.n	8000c52 <__aeabi_fdiv+0x196>
 8000b70:	01ad      	lsls	r5, r5, #6
 8000b72:	0a6d      	lsrs	r5, r5, #9
 8000b74:	b2d8      	uxtb	r0, r3
 8000b76:	e002      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000b78:	000e      	movs	r6, r1
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	2500      	movs	r5, #0
 8000b7e:	05c0      	lsls	r0, r0, #23
 8000b80:	4328      	orrs	r0, r5
 8000b82:	07f6      	lsls	r6, r6, #31
 8000b84:	4330      	orrs	r0, r6
 8000b86:	bce0      	pop	{r5, r6, r7}
 8000b88:	46ba      	mov	sl, r7
 8000b8a:	46b1      	mov	r9, r6
 8000b8c:	46a8      	mov	r8, r5
 8000b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b90:	4643      	mov	r3, r8
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d13f      	bne.n	8000c16 <__aeabi_fdiv+0x15a>
 8000b96:	2202      	movs	r2, #2
 8000b98:	3fff      	subs	r7, #255	; 0xff
 8000b9a:	e003      	b.n	8000ba4 <__aeabi_fdiv+0xe8>
 8000b9c:	4643      	mov	r3, r8
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d12d      	bne.n	8000bfe <__aeabi_fdiv+0x142>
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	0031      	movs	r1, r6
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	4061      	eors	r1, r4
 8000baa:	b2c9      	uxtb	r1, r1
 8000bac:	4313      	orrs	r3, r2
 8000bae:	2b0f      	cmp	r3, #15
 8000bb0:	d834      	bhi.n	8000c1c <__aeabi_fdiv+0x160>
 8000bb2:	484d      	ldr	r0, [pc, #308]	; (8000ce8 <__aeabi_fdiv+0x22c>)
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	58c3      	ldr	r3, [r0, r3]
 8000bb8:	469f      	mov	pc, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d113      	bne.n	8000be6 <__aeabi_fdiv+0x12a>
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	4699      	mov	r9, r3
 8000bc2:	3b03      	subs	r3, #3
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	469a      	mov	sl, r3
 8000bc8:	e791      	b.n	8000aee <__aeabi_fdiv+0x32>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d105      	bne.n	8000bda <__aeabi_fdiv+0x11e>
 8000bce:	2308      	movs	r3, #8
 8000bd0:	4699      	mov	r9, r3
 8000bd2:	3b06      	subs	r3, #6
 8000bd4:	27ff      	movs	r7, #255	; 0xff
 8000bd6:	469a      	mov	sl, r3
 8000bd8:	e789      	b.n	8000aee <__aeabi_fdiv+0x32>
 8000bda:	230c      	movs	r3, #12
 8000bdc:	4699      	mov	r9, r3
 8000bde:	3b09      	subs	r3, #9
 8000be0:	27ff      	movs	r7, #255	; 0xff
 8000be2:	469a      	mov	sl, r3
 8000be4:	e783      	b.n	8000aee <__aeabi_fdiv+0x32>
 8000be6:	0028      	movs	r0, r5
 8000be8:	f002 fb1c 	bl	8003224 <__clzsi2>
 8000bec:	2776      	movs	r7, #118	; 0x76
 8000bee:	1f43      	subs	r3, r0, #5
 8000bf0:	409d      	lsls	r5, r3
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	427f      	negs	r7, r7
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	1a3f      	subs	r7, r7, r0
 8000bfc:	e777      	b.n	8000aee <__aeabi_fdiv+0x32>
 8000bfe:	4640      	mov	r0, r8
 8000c00:	f002 fb10 	bl	8003224 <__clzsi2>
 8000c04:	4642      	mov	r2, r8
 8000c06:	1f43      	subs	r3, r0, #5
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	2376      	movs	r3, #118	; 0x76
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	4690      	mov	r8, r2
 8000c10:	1a1b      	subs	r3, r3, r0
 8000c12:	2200      	movs	r2, #0
 8000c14:	e77d      	b.n	8000b12 <__aeabi_fdiv+0x56>
 8000c16:	23ff      	movs	r3, #255	; 0xff
 8000c18:	2203      	movs	r2, #3
 8000c1a:	e77a      	b.n	8000b12 <__aeabi_fdiv+0x56>
 8000c1c:	000e      	movs	r6, r1
 8000c1e:	20ff      	movs	r0, #255	; 0xff
 8000c20:	2500      	movs	r5, #0
 8000c22:	e7ac      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c24:	2001      	movs	r0, #1
 8000c26:	1ac0      	subs	r0, r0, r3
 8000c28:	281b      	cmp	r0, #27
 8000c2a:	dca6      	bgt.n	8000b7a <__aeabi_fdiv+0xbe>
 8000c2c:	379e      	adds	r7, #158	; 0x9e
 8000c2e:	002a      	movs	r2, r5
 8000c30:	40bd      	lsls	r5, r7
 8000c32:	40c2      	lsrs	r2, r0
 8000c34:	1e6b      	subs	r3, r5, #1
 8000c36:	419d      	sbcs	r5, r3
 8000c38:	4315      	orrs	r5, r2
 8000c3a:	076b      	lsls	r3, r5, #29
 8000c3c:	d004      	beq.n	8000c48 <__aeabi_fdiv+0x18c>
 8000c3e:	230f      	movs	r3, #15
 8000c40:	402b      	ands	r3, r5
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	d000      	beq.n	8000c48 <__aeabi_fdiv+0x18c>
 8000c46:	3504      	adds	r5, #4
 8000c48:	016b      	lsls	r3, r5, #5
 8000c4a:	d544      	bpl.n	8000cd6 <__aeabi_fdiv+0x21a>
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	2500      	movs	r5, #0
 8000c50:	e795      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c52:	20ff      	movs	r0, #255	; 0xff
 8000c54:	2500      	movs	r5, #0
 8000c56:	e792      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c58:	2580      	movs	r5, #128	; 0x80
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	20ff      	movs	r0, #255	; 0xff
 8000c5e:	03ed      	lsls	r5, r5, #15
 8000c60:	e78d      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c62:	2300      	movs	r3, #0
 8000c64:	4698      	mov	r8, r3
 8000c66:	2080      	movs	r0, #128	; 0x80
 8000c68:	03c0      	lsls	r0, r0, #15
 8000c6a:	4205      	tst	r5, r0
 8000c6c:	d009      	beq.n	8000c82 <__aeabi_fdiv+0x1c6>
 8000c6e:	4643      	mov	r3, r8
 8000c70:	4203      	tst	r3, r0
 8000c72:	d106      	bne.n	8000c82 <__aeabi_fdiv+0x1c6>
 8000c74:	4645      	mov	r5, r8
 8000c76:	4305      	orrs	r5, r0
 8000c78:	026d      	lsls	r5, r5, #9
 8000c7a:	0026      	movs	r6, r4
 8000c7c:	20ff      	movs	r0, #255	; 0xff
 8000c7e:	0a6d      	lsrs	r5, r5, #9
 8000c80:	e77d      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c82:	2080      	movs	r0, #128	; 0x80
 8000c84:	03c0      	lsls	r0, r0, #15
 8000c86:	4305      	orrs	r5, r0
 8000c88:	026d      	lsls	r5, r5, #9
 8000c8a:	20ff      	movs	r0, #255	; 0xff
 8000c8c:	0a6d      	lsrs	r5, r5, #9
 8000c8e:	e776      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c90:	4642      	mov	r2, r8
 8000c92:	016b      	lsls	r3, r5, #5
 8000c94:	0150      	lsls	r0, r2, #5
 8000c96:	4283      	cmp	r3, r0
 8000c98:	d219      	bcs.n	8000cce <__aeabi_fdiv+0x212>
 8000c9a:	221b      	movs	r2, #27
 8000c9c:	2500      	movs	r5, #0
 8000c9e:	3f01      	subs	r7, #1
 8000ca0:	2601      	movs	r6, #1
 8000ca2:	001c      	movs	r4, r3
 8000ca4:	006d      	lsls	r5, r5, #1
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2c00      	cmp	r4, #0
 8000caa:	db01      	blt.n	8000cb0 <__aeabi_fdiv+0x1f4>
 8000cac:	4298      	cmp	r0, r3
 8000cae:	d801      	bhi.n	8000cb4 <__aeabi_fdiv+0x1f8>
 8000cb0:	1a1b      	subs	r3, r3, r0
 8000cb2:	4335      	orrs	r5, r6
 8000cb4:	3a01      	subs	r2, #1
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d1f3      	bne.n	8000ca2 <__aeabi_fdiv+0x1e6>
 8000cba:	1e5a      	subs	r2, r3, #1
 8000cbc:	4193      	sbcs	r3, r2
 8000cbe:	431d      	orrs	r5, r3
 8000cc0:	003b      	movs	r3, r7
 8000cc2:	337f      	adds	r3, #127	; 0x7f
 8000cc4:	000e      	movs	r6, r1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	dd00      	ble.n	8000ccc <__aeabi_fdiv+0x210>
 8000cca:	e741      	b.n	8000b50 <__aeabi_fdiv+0x94>
 8000ccc:	e7aa      	b.n	8000c24 <__aeabi_fdiv+0x168>
 8000cce:	221a      	movs	r2, #26
 8000cd0:	2501      	movs	r5, #1
 8000cd2:	1a1b      	subs	r3, r3, r0
 8000cd4:	e7e4      	b.n	8000ca0 <__aeabi_fdiv+0x1e4>
 8000cd6:	01ad      	lsls	r5, r5, #6
 8000cd8:	2000      	movs	r0, #0
 8000cda:	0a6d      	lsrs	r5, r5, #9
 8000cdc:	e74f      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	0800e420 	.word	0x0800e420
 8000ce4:	f7ffffff 	.word	0xf7ffffff
 8000ce8:	0800e460 	.word	0x0800e460

08000cec <__eqsf2>:
 8000cec:	b570      	push	{r4, r5, r6, lr}
 8000cee:	0042      	lsls	r2, r0, #1
 8000cf0:	0245      	lsls	r5, r0, #9
 8000cf2:	024e      	lsls	r6, r1, #9
 8000cf4:	004c      	lsls	r4, r1, #1
 8000cf6:	0fc3      	lsrs	r3, r0, #31
 8000cf8:	0a6d      	lsrs	r5, r5, #9
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	0e12      	lsrs	r2, r2, #24
 8000cfe:	0a76      	lsrs	r6, r6, #9
 8000d00:	0e24      	lsrs	r4, r4, #24
 8000d02:	0fc9      	lsrs	r1, r1, #31
 8000d04:	2aff      	cmp	r2, #255	; 0xff
 8000d06:	d006      	beq.n	8000d16 <__eqsf2+0x2a>
 8000d08:	2cff      	cmp	r4, #255	; 0xff
 8000d0a:	d003      	beq.n	8000d14 <__eqsf2+0x28>
 8000d0c:	42a2      	cmp	r2, r4
 8000d0e:	d101      	bne.n	8000d14 <__eqsf2+0x28>
 8000d10:	42b5      	cmp	r5, r6
 8000d12:	d006      	beq.n	8000d22 <__eqsf2+0x36>
 8000d14:	bd70      	pop	{r4, r5, r6, pc}
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d1fc      	bne.n	8000d14 <__eqsf2+0x28>
 8000d1a:	2cff      	cmp	r4, #255	; 0xff
 8000d1c:	d1fa      	bne.n	8000d14 <__eqsf2+0x28>
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d1f8      	bne.n	8000d14 <__eqsf2+0x28>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d006      	beq.n	8000d34 <__eqsf2+0x48>
 8000d26:	2001      	movs	r0, #1
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	d1f3      	bne.n	8000d14 <__eqsf2+0x28>
 8000d2c:	0028      	movs	r0, r5
 8000d2e:	1e43      	subs	r3, r0, #1
 8000d30:	4198      	sbcs	r0, r3
 8000d32:	e7ef      	b.n	8000d14 <__eqsf2+0x28>
 8000d34:	2000      	movs	r0, #0
 8000d36:	e7ed      	b.n	8000d14 <__eqsf2+0x28>

08000d38 <__gesf2>:
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	0042      	lsls	r2, r0, #1
 8000d3c:	0245      	lsls	r5, r0, #9
 8000d3e:	024e      	lsls	r6, r1, #9
 8000d40:	004c      	lsls	r4, r1, #1
 8000d42:	0fc3      	lsrs	r3, r0, #31
 8000d44:	0a6d      	lsrs	r5, r5, #9
 8000d46:	0e12      	lsrs	r2, r2, #24
 8000d48:	0a76      	lsrs	r6, r6, #9
 8000d4a:	0e24      	lsrs	r4, r4, #24
 8000d4c:	0fc8      	lsrs	r0, r1, #31
 8000d4e:	2aff      	cmp	r2, #255	; 0xff
 8000d50:	d01b      	beq.n	8000d8a <__gesf2+0x52>
 8000d52:	2cff      	cmp	r4, #255	; 0xff
 8000d54:	d00e      	beq.n	8000d74 <__gesf2+0x3c>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d11b      	bne.n	8000d92 <__gesf2+0x5a>
 8000d5a:	2c00      	cmp	r4, #0
 8000d5c:	d101      	bne.n	8000d62 <__gesf2+0x2a>
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d01c      	beq.n	8000d9c <__gesf2+0x64>
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d00c      	beq.n	8000d80 <__gesf2+0x48>
 8000d66:	4283      	cmp	r3, r0
 8000d68:	d01c      	beq.n	8000da4 <__gesf2+0x6c>
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	1e58      	subs	r0, r3, #1
 8000d6e:	4008      	ands	r0, r1
 8000d70:	3801      	subs	r0, #1
 8000d72:	bd70      	pop	{r4, r5, r6, pc}
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d122      	bne.n	8000dbe <__gesf2+0x86>
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	d1f4      	bne.n	8000d66 <__gesf2+0x2e>
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d1f2      	bne.n	8000d66 <__gesf2+0x2e>
 8000d80:	2800      	cmp	r0, #0
 8000d82:	d1f6      	bne.n	8000d72 <__gesf2+0x3a>
 8000d84:	2001      	movs	r0, #1
 8000d86:	4240      	negs	r0, r0
 8000d88:	e7f3      	b.n	8000d72 <__gesf2+0x3a>
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d117      	bne.n	8000dbe <__gesf2+0x86>
 8000d8e:	2cff      	cmp	r4, #255	; 0xff
 8000d90:	d0f0      	beq.n	8000d74 <__gesf2+0x3c>
 8000d92:	2c00      	cmp	r4, #0
 8000d94:	d1e7      	bne.n	8000d66 <__gesf2+0x2e>
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d1e5      	bne.n	8000d66 <__gesf2+0x2e>
 8000d9a:	e7e6      	b.n	8000d6a <__gesf2+0x32>
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	2d00      	cmp	r5, #0
 8000da0:	d0e7      	beq.n	8000d72 <__gesf2+0x3a>
 8000da2:	e7e2      	b.n	8000d6a <__gesf2+0x32>
 8000da4:	42a2      	cmp	r2, r4
 8000da6:	dc05      	bgt.n	8000db4 <__gesf2+0x7c>
 8000da8:	dbea      	blt.n	8000d80 <__gesf2+0x48>
 8000daa:	42b5      	cmp	r5, r6
 8000dac:	d802      	bhi.n	8000db4 <__gesf2+0x7c>
 8000dae:	d3e7      	bcc.n	8000d80 <__gesf2+0x48>
 8000db0:	2000      	movs	r0, #0
 8000db2:	e7de      	b.n	8000d72 <__gesf2+0x3a>
 8000db4:	4243      	negs	r3, r0
 8000db6:	4158      	adcs	r0, r3
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	3801      	subs	r0, #1
 8000dbc:	e7d9      	b.n	8000d72 <__gesf2+0x3a>
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	4240      	negs	r0, r0
 8000dc2:	e7d6      	b.n	8000d72 <__gesf2+0x3a>

08000dc4 <__lesf2>:
 8000dc4:	b570      	push	{r4, r5, r6, lr}
 8000dc6:	0042      	lsls	r2, r0, #1
 8000dc8:	0245      	lsls	r5, r0, #9
 8000dca:	024e      	lsls	r6, r1, #9
 8000dcc:	004c      	lsls	r4, r1, #1
 8000dce:	0fc3      	lsrs	r3, r0, #31
 8000dd0:	0a6d      	lsrs	r5, r5, #9
 8000dd2:	0e12      	lsrs	r2, r2, #24
 8000dd4:	0a76      	lsrs	r6, r6, #9
 8000dd6:	0e24      	lsrs	r4, r4, #24
 8000dd8:	0fc8      	lsrs	r0, r1, #31
 8000dda:	2aff      	cmp	r2, #255	; 0xff
 8000ddc:	d00b      	beq.n	8000df6 <__lesf2+0x32>
 8000dde:	2cff      	cmp	r4, #255	; 0xff
 8000de0:	d00d      	beq.n	8000dfe <__lesf2+0x3a>
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d11f      	bne.n	8000e26 <__lesf2+0x62>
 8000de6:	2c00      	cmp	r4, #0
 8000de8:	d116      	bne.n	8000e18 <__lesf2+0x54>
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d114      	bne.n	8000e18 <__lesf2+0x54>
 8000dee:	2000      	movs	r0, #0
 8000df0:	2d00      	cmp	r5, #0
 8000df2:	d010      	beq.n	8000e16 <__lesf2+0x52>
 8000df4:	e009      	b.n	8000e0a <__lesf2+0x46>
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d10c      	bne.n	8000e14 <__lesf2+0x50>
 8000dfa:	2cff      	cmp	r4, #255	; 0xff
 8000dfc:	d113      	bne.n	8000e26 <__lesf2+0x62>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d108      	bne.n	8000e14 <__lesf2+0x50>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d008      	beq.n	8000e18 <__lesf2+0x54>
 8000e06:	4283      	cmp	r3, r0
 8000e08:	d012      	beq.n	8000e30 <__lesf2+0x6c>
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	1e58      	subs	r0, r3, #1
 8000e0e:	4008      	ands	r0, r1
 8000e10:	3801      	subs	r0, #1
 8000e12:	e000      	b.n	8000e16 <__lesf2+0x52>
 8000e14:	2002      	movs	r0, #2
 8000e16:	bd70      	pop	{r4, r5, r6, pc}
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d1f4      	bne.n	8000e06 <__lesf2+0x42>
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	d1fa      	bne.n	8000e16 <__lesf2+0x52>
 8000e20:	2001      	movs	r0, #1
 8000e22:	4240      	negs	r0, r0
 8000e24:	e7f7      	b.n	8000e16 <__lesf2+0x52>
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	d1ed      	bne.n	8000e06 <__lesf2+0x42>
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d1eb      	bne.n	8000e06 <__lesf2+0x42>
 8000e2e:	e7ec      	b.n	8000e0a <__lesf2+0x46>
 8000e30:	42a2      	cmp	r2, r4
 8000e32:	dc05      	bgt.n	8000e40 <__lesf2+0x7c>
 8000e34:	dbf2      	blt.n	8000e1c <__lesf2+0x58>
 8000e36:	42b5      	cmp	r5, r6
 8000e38:	d802      	bhi.n	8000e40 <__lesf2+0x7c>
 8000e3a:	d3ef      	bcc.n	8000e1c <__lesf2+0x58>
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	e7ea      	b.n	8000e16 <__lesf2+0x52>
 8000e40:	4243      	negs	r3, r0
 8000e42:	4158      	adcs	r0, r3
 8000e44:	0040      	lsls	r0, r0, #1
 8000e46:	3801      	subs	r0, #1
 8000e48:	e7e5      	b.n	8000e16 <__lesf2+0x52>
 8000e4a:	46c0      	nop			; (mov r8, r8)

08000e4c <__aeabi_fmul>:
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	464f      	mov	r7, r9
 8000e50:	4646      	mov	r6, r8
 8000e52:	46d6      	mov	lr, sl
 8000e54:	0244      	lsls	r4, r0, #9
 8000e56:	0045      	lsls	r5, r0, #1
 8000e58:	b5c0      	push	{r6, r7, lr}
 8000e5a:	0a64      	lsrs	r4, r4, #9
 8000e5c:	1c0f      	adds	r7, r1, #0
 8000e5e:	0e2d      	lsrs	r5, r5, #24
 8000e60:	0fc6      	lsrs	r6, r0, #31
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d100      	bne.n	8000e68 <__aeabi_fmul+0x1c>
 8000e66:	e08d      	b.n	8000f84 <__aeabi_fmul+0x138>
 8000e68:	2dff      	cmp	r5, #255	; 0xff
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_fmul+0x22>
 8000e6c:	e092      	b.n	8000f94 <__aeabi_fmul+0x148>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	2080      	movs	r0, #128	; 0x80
 8000e72:	4699      	mov	r9, r3
 8000e74:	469a      	mov	sl, r3
 8000e76:	00e4      	lsls	r4, r4, #3
 8000e78:	04c0      	lsls	r0, r0, #19
 8000e7a:	4304      	orrs	r4, r0
 8000e7c:	3d7f      	subs	r5, #127	; 0x7f
 8000e7e:	0278      	lsls	r0, r7, #9
 8000e80:	0a43      	lsrs	r3, r0, #9
 8000e82:	4698      	mov	r8, r3
 8000e84:	007b      	lsls	r3, r7, #1
 8000e86:	0e1b      	lsrs	r3, r3, #24
 8000e88:	0fff      	lsrs	r7, r7, #31
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fmul+0x44>
 8000e8e:	e070      	b.n	8000f72 <__aeabi_fmul+0x126>
 8000e90:	2bff      	cmp	r3, #255	; 0xff
 8000e92:	d100      	bne.n	8000e96 <__aeabi_fmul+0x4a>
 8000e94:	e086      	b.n	8000fa4 <__aeabi_fmul+0x158>
 8000e96:	4642      	mov	r2, r8
 8000e98:	00d0      	lsls	r0, r2, #3
 8000e9a:	2280      	movs	r2, #128	; 0x80
 8000e9c:	3b7f      	subs	r3, #127	; 0x7f
 8000e9e:	18ed      	adds	r5, r5, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	04d2      	lsls	r2, r2, #19
 8000ea4:	4302      	orrs	r2, r0
 8000ea6:	4690      	mov	r8, r2
 8000ea8:	469c      	mov	ip, r3
 8000eaa:	0031      	movs	r1, r6
 8000eac:	464b      	mov	r3, r9
 8000eae:	4079      	eors	r1, r7
 8000eb0:	1c68      	adds	r0, r5, #1
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	d81c      	bhi.n	8000ef0 <__aeabi_fmul+0xa4>
 8000eb6:	4a76      	ldr	r2, [pc, #472]	; (8001090 <__aeabi_fmul+0x244>)
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	58d3      	ldr	r3, [r2, r3]
 8000ebc:	469f      	mov	pc, r3
 8000ebe:	0039      	movs	r1, r7
 8000ec0:	4644      	mov	r4, r8
 8000ec2:	46e2      	mov	sl, ip
 8000ec4:	4653      	mov	r3, sl
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d00f      	beq.n	8000eea <__aeabi_fmul+0x9e>
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fmul+0x84>
 8000ece:	e0d7      	b.n	8001080 <__aeabi_fmul+0x234>
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d137      	bne.n	8000f44 <__aeabi_fmul+0xf8>
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	05c0      	lsls	r0, r0, #23
 8000eda:	4320      	orrs	r0, r4
 8000edc:	07c9      	lsls	r1, r1, #31
 8000ede:	4308      	orrs	r0, r1
 8000ee0:	bce0      	pop	{r5, r6, r7}
 8000ee2:	46ba      	mov	sl, r7
 8000ee4:	46b1      	mov	r9, r6
 8000ee6:	46a8      	mov	r8, r5
 8000ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eea:	20ff      	movs	r0, #255	; 0xff
 8000eec:	2400      	movs	r4, #0
 8000eee:	e7f3      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8000ef0:	0c26      	lsrs	r6, r4, #16
 8000ef2:	0424      	lsls	r4, r4, #16
 8000ef4:	0c22      	lsrs	r2, r4, #16
 8000ef6:	4644      	mov	r4, r8
 8000ef8:	0424      	lsls	r4, r4, #16
 8000efa:	0c24      	lsrs	r4, r4, #16
 8000efc:	4643      	mov	r3, r8
 8000efe:	0027      	movs	r7, r4
 8000f00:	0c1b      	lsrs	r3, r3, #16
 8000f02:	4357      	muls	r7, r2
 8000f04:	4374      	muls	r4, r6
 8000f06:	435a      	muls	r2, r3
 8000f08:	435e      	muls	r6, r3
 8000f0a:	1912      	adds	r2, r2, r4
 8000f0c:	0c3b      	lsrs	r3, r7, #16
 8000f0e:	189b      	adds	r3, r3, r2
 8000f10:	429c      	cmp	r4, r3
 8000f12:	d903      	bls.n	8000f1c <__aeabi_fmul+0xd0>
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	0252      	lsls	r2, r2, #9
 8000f18:	4694      	mov	ip, r2
 8000f1a:	4466      	add	r6, ip
 8000f1c:	043f      	lsls	r7, r7, #16
 8000f1e:	041a      	lsls	r2, r3, #16
 8000f20:	0c3f      	lsrs	r7, r7, #16
 8000f22:	19d2      	adds	r2, r2, r7
 8000f24:	0194      	lsls	r4, r2, #6
 8000f26:	1e67      	subs	r7, r4, #1
 8000f28:	41bc      	sbcs	r4, r7
 8000f2a:	0c1b      	lsrs	r3, r3, #16
 8000f2c:	0e92      	lsrs	r2, r2, #26
 8000f2e:	199b      	adds	r3, r3, r6
 8000f30:	4314      	orrs	r4, r2
 8000f32:	019b      	lsls	r3, r3, #6
 8000f34:	431c      	orrs	r4, r3
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	d400      	bmi.n	8000f3c <__aeabi_fmul+0xf0>
 8000f3a:	e09b      	b.n	8001074 <__aeabi_fmul+0x228>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	0862      	lsrs	r2, r4, #1
 8000f40:	401c      	ands	r4, r3
 8000f42:	4314      	orrs	r4, r2
 8000f44:	0002      	movs	r2, r0
 8000f46:	327f      	adds	r2, #127	; 0x7f
 8000f48:	2a00      	cmp	r2, #0
 8000f4a:	dd64      	ble.n	8001016 <__aeabi_fmul+0x1ca>
 8000f4c:	0763      	lsls	r3, r4, #29
 8000f4e:	d004      	beq.n	8000f5a <__aeabi_fmul+0x10e>
 8000f50:	230f      	movs	r3, #15
 8000f52:	4023      	ands	r3, r4
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d000      	beq.n	8000f5a <__aeabi_fmul+0x10e>
 8000f58:	3404      	adds	r4, #4
 8000f5a:	0123      	lsls	r3, r4, #4
 8000f5c:	d503      	bpl.n	8000f66 <__aeabi_fmul+0x11a>
 8000f5e:	0002      	movs	r2, r0
 8000f60:	4b4c      	ldr	r3, [pc, #304]	; (8001094 <__aeabi_fmul+0x248>)
 8000f62:	3280      	adds	r2, #128	; 0x80
 8000f64:	401c      	ands	r4, r3
 8000f66:	2afe      	cmp	r2, #254	; 0xfe
 8000f68:	dcbf      	bgt.n	8000eea <__aeabi_fmul+0x9e>
 8000f6a:	01a4      	lsls	r4, r4, #6
 8000f6c:	0a64      	lsrs	r4, r4, #9
 8000f6e:	b2d0      	uxtb	r0, r2
 8000f70:	e7b2      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8000f72:	4643      	mov	r3, r8
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d13d      	bne.n	8000ff4 <__aeabi_fmul+0x1a8>
 8000f78:	464a      	mov	r2, r9
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	4691      	mov	r9, r2
 8000f80:	469c      	mov	ip, r3
 8000f82:	e792      	b.n	8000eaa <__aeabi_fmul+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d129      	bne.n	8000fdc <__aeabi_fmul+0x190>
 8000f88:	2304      	movs	r3, #4
 8000f8a:	4699      	mov	r9, r3
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	2500      	movs	r5, #0
 8000f90:	469a      	mov	sl, r3
 8000f92:	e774      	b.n	8000e7e <__aeabi_fmul+0x32>
 8000f94:	2c00      	cmp	r4, #0
 8000f96:	d11b      	bne.n	8000fd0 <__aeabi_fmul+0x184>
 8000f98:	2308      	movs	r3, #8
 8000f9a:	4699      	mov	r9, r3
 8000f9c:	3b06      	subs	r3, #6
 8000f9e:	25ff      	movs	r5, #255	; 0xff
 8000fa0:	469a      	mov	sl, r3
 8000fa2:	e76c      	b.n	8000e7e <__aeabi_fmul+0x32>
 8000fa4:	4643      	mov	r3, r8
 8000fa6:	35ff      	adds	r5, #255	; 0xff
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10b      	bne.n	8000fc4 <__aeabi_fmul+0x178>
 8000fac:	2302      	movs	r3, #2
 8000fae:	464a      	mov	r2, r9
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	4691      	mov	r9, r2
 8000fb4:	469c      	mov	ip, r3
 8000fb6:	e778      	b.n	8000eaa <__aeabi_fmul+0x5e>
 8000fb8:	4653      	mov	r3, sl
 8000fba:	0031      	movs	r1, r6
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d000      	beq.n	8000fc2 <__aeabi_fmul+0x176>
 8000fc0:	e783      	b.n	8000eca <__aeabi_fmul+0x7e>
 8000fc2:	e792      	b.n	8000eea <__aeabi_fmul+0x9e>
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	464a      	mov	r2, r9
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	4691      	mov	r9, r2
 8000fcc:	469c      	mov	ip, r3
 8000fce:	e76c      	b.n	8000eaa <__aeabi_fmul+0x5e>
 8000fd0:	230c      	movs	r3, #12
 8000fd2:	4699      	mov	r9, r3
 8000fd4:	3b09      	subs	r3, #9
 8000fd6:	25ff      	movs	r5, #255	; 0xff
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e750      	b.n	8000e7e <__aeabi_fmul+0x32>
 8000fdc:	0020      	movs	r0, r4
 8000fde:	f002 f921 	bl	8003224 <__clzsi2>
 8000fe2:	2576      	movs	r5, #118	; 0x76
 8000fe4:	1f43      	subs	r3, r0, #5
 8000fe6:	409c      	lsls	r4, r3
 8000fe8:	2300      	movs	r3, #0
 8000fea:	426d      	negs	r5, r5
 8000fec:	4699      	mov	r9, r3
 8000fee:	469a      	mov	sl, r3
 8000ff0:	1a2d      	subs	r5, r5, r0
 8000ff2:	e744      	b.n	8000e7e <__aeabi_fmul+0x32>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	f002 f915 	bl	8003224 <__clzsi2>
 8000ffa:	4642      	mov	r2, r8
 8000ffc:	1f43      	subs	r3, r0, #5
 8000ffe:	409a      	lsls	r2, r3
 8001000:	2300      	movs	r3, #0
 8001002:	1a2d      	subs	r5, r5, r0
 8001004:	4690      	mov	r8, r2
 8001006:	469c      	mov	ip, r3
 8001008:	3d76      	subs	r5, #118	; 0x76
 800100a:	e74e      	b.n	8000eaa <__aeabi_fmul+0x5e>
 800100c:	2480      	movs	r4, #128	; 0x80
 800100e:	2100      	movs	r1, #0
 8001010:	20ff      	movs	r0, #255	; 0xff
 8001012:	03e4      	lsls	r4, r4, #15
 8001014:	e760      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001016:	2301      	movs	r3, #1
 8001018:	1a9b      	subs	r3, r3, r2
 800101a:	2b1b      	cmp	r3, #27
 800101c:	dd00      	ble.n	8001020 <__aeabi_fmul+0x1d4>
 800101e:	e759      	b.n	8000ed4 <__aeabi_fmul+0x88>
 8001020:	0022      	movs	r2, r4
 8001022:	309e      	adds	r0, #158	; 0x9e
 8001024:	40da      	lsrs	r2, r3
 8001026:	4084      	lsls	r4, r0
 8001028:	0013      	movs	r3, r2
 800102a:	1e62      	subs	r2, r4, #1
 800102c:	4194      	sbcs	r4, r2
 800102e:	431c      	orrs	r4, r3
 8001030:	0763      	lsls	r3, r4, #29
 8001032:	d004      	beq.n	800103e <__aeabi_fmul+0x1f2>
 8001034:	230f      	movs	r3, #15
 8001036:	4023      	ands	r3, r4
 8001038:	2b04      	cmp	r3, #4
 800103a:	d000      	beq.n	800103e <__aeabi_fmul+0x1f2>
 800103c:	3404      	adds	r4, #4
 800103e:	0163      	lsls	r3, r4, #5
 8001040:	d51a      	bpl.n	8001078 <__aeabi_fmul+0x22c>
 8001042:	2001      	movs	r0, #1
 8001044:	2400      	movs	r4, #0
 8001046:	e747      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001048:	2080      	movs	r0, #128	; 0x80
 800104a:	03c0      	lsls	r0, r0, #15
 800104c:	4204      	tst	r4, r0
 800104e:	d009      	beq.n	8001064 <__aeabi_fmul+0x218>
 8001050:	4643      	mov	r3, r8
 8001052:	4203      	tst	r3, r0
 8001054:	d106      	bne.n	8001064 <__aeabi_fmul+0x218>
 8001056:	4644      	mov	r4, r8
 8001058:	4304      	orrs	r4, r0
 800105a:	0264      	lsls	r4, r4, #9
 800105c:	0039      	movs	r1, r7
 800105e:	20ff      	movs	r0, #255	; 0xff
 8001060:	0a64      	lsrs	r4, r4, #9
 8001062:	e739      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001064:	2080      	movs	r0, #128	; 0x80
 8001066:	03c0      	lsls	r0, r0, #15
 8001068:	4304      	orrs	r4, r0
 800106a:	0264      	lsls	r4, r4, #9
 800106c:	0031      	movs	r1, r6
 800106e:	20ff      	movs	r0, #255	; 0xff
 8001070:	0a64      	lsrs	r4, r4, #9
 8001072:	e731      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001074:	0028      	movs	r0, r5
 8001076:	e765      	b.n	8000f44 <__aeabi_fmul+0xf8>
 8001078:	01a4      	lsls	r4, r4, #6
 800107a:	2000      	movs	r0, #0
 800107c:	0a64      	lsrs	r4, r4, #9
 800107e:	e72b      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001080:	2080      	movs	r0, #128	; 0x80
 8001082:	03c0      	lsls	r0, r0, #15
 8001084:	4304      	orrs	r4, r0
 8001086:	0264      	lsls	r4, r4, #9
 8001088:	20ff      	movs	r0, #255	; 0xff
 800108a:	0a64      	lsrs	r4, r4, #9
 800108c:	e724      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	0800e4a0 	.word	0x0800e4a0
 8001094:	f7ffffff 	.word	0xf7ffffff

08001098 <__aeabi_fsub>:
 8001098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109a:	46ce      	mov	lr, r9
 800109c:	4647      	mov	r7, r8
 800109e:	0243      	lsls	r3, r0, #9
 80010a0:	0a5b      	lsrs	r3, r3, #9
 80010a2:	024e      	lsls	r6, r1, #9
 80010a4:	00da      	lsls	r2, r3, #3
 80010a6:	4694      	mov	ip, r2
 80010a8:	0a72      	lsrs	r2, r6, #9
 80010aa:	4691      	mov	r9, r2
 80010ac:	0045      	lsls	r5, r0, #1
 80010ae:	004a      	lsls	r2, r1, #1
 80010b0:	b580      	push	{r7, lr}
 80010b2:	0e2d      	lsrs	r5, r5, #24
 80010b4:	001f      	movs	r7, r3
 80010b6:	0fc4      	lsrs	r4, r0, #31
 80010b8:	0e12      	lsrs	r2, r2, #24
 80010ba:	0fc9      	lsrs	r1, r1, #31
 80010bc:	09b6      	lsrs	r6, r6, #6
 80010be:	2aff      	cmp	r2, #255	; 0xff
 80010c0:	d05b      	beq.n	800117a <__aeabi_fsub+0xe2>
 80010c2:	2001      	movs	r0, #1
 80010c4:	4041      	eors	r1, r0
 80010c6:	428c      	cmp	r4, r1
 80010c8:	d039      	beq.n	800113e <__aeabi_fsub+0xa6>
 80010ca:	1aa8      	subs	r0, r5, r2
 80010cc:	2800      	cmp	r0, #0
 80010ce:	dd5a      	ble.n	8001186 <__aeabi_fsub+0xee>
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	d06a      	beq.n	80011aa <__aeabi_fsub+0x112>
 80010d4:	2dff      	cmp	r5, #255	; 0xff
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x42>
 80010d8:	e0d9      	b.n	800128e <__aeabi_fsub+0x1f6>
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	04d2      	lsls	r2, r2, #19
 80010de:	4316      	orrs	r6, r2
 80010e0:	281b      	cmp	r0, #27
 80010e2:	dc00      	bgt.n	80010e6 <__aeabi_fsub+0x4e>
 80010e4:	e0e9      	b.n	80012ba <__aeabi_fsub+0x222>
 80010e6:	2001      	movs	r0, #1
 80010e8:	4663      	mov	r3, ip
 80010ea:	1a18      	subs	r0, r3, r0
 80010ec:	0143      	lsls	r3, r0, #5
 80010ee:	d400      	bmi.n	80010f2 <__aeabi_fsub+0x5a>
 80010f0:	e0b4      	b.n	800125c <__aeabi_fsub+0x1c4>
 80010f2:	0180      	lsls	r0, r0, #6
 80010f4:	0987      	lsrs	r7, r0, #6
 80010f6:	0038      	movs	r0, r7
 80010f8:	f002 f894 	bl	8003224 <__clzsi2>
 80010fc:	3805      	subs	r0, #5
 80010fe:	4087      	lsls	r7, r0
 8001100:	4285      	cmp	r5, r0
 8001102:	dc00      	bgt.n	8001106 <__aeabi_fsub+0x6e>
 8001104:	e0cc      	b.n	80012a0 <__aeabi_fsub+0x208>
 8001106:	1a2d      	subs	r5, r5, r0
 8001108:	48b5      	ldr	r0, [pc, #724]	; (80013e0 <__aeabi_fsub+0x348>)
 800110a:	4038      	ands	r0, r7
 800110c:	0743      	lsls	r3, r0, #29
 800110e:	d004      	beq.n	800111a <__aeabi_fsub+0x82>
 8001110:	230f      	movs	r3, #15
 8001112:	4003      	ands	r3, r0
 8001114:	2b04      	cmp	r3, #4
 8001116:	d000      	beq.n	800111a <__aeabi_fsub+0x82>
 8001118:	3004      	adds	r0, #4
 800111a:	0143      	lsls	r3, r0, #5
 800111c:	d400      	bmi.n	8001120 <__aeabi_fsub+0x88>
 800111e:	e0a0      	b.n	8001262 <__aeabi_fsub+0x1ca>
 8001120:	1c6a      	adds	r2, r5, #1
 8001122:	2dfe      	cmp	r5, #254	; 0xfe
 8001124:	d100      	bne.n	8001128 <__aeabi_fsub+0x90>
 8001126:	e08d      	b.n	8001244 <__aeabi_fsub+0x1ac>
 8001128:	0180      	lsls	r0, r0, #6
 800112a:	0a47      	lsrs	r7, r0, #9
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	05d0      	lsls	r0, r2, #23
 8001130:	4338      	orrs	r0, r7
 8001132:	07e4      	lsls	r4, r4, #31
 8001134:	4320      	orrs	r0, r4
 8001136:	bcc0      	pop	{r6, r7}
 8001138:	46b9      	mov	r9, r7
 800113a:	46b0      	mov	r8, r6
 800113c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800113e:	1aa8      	subs	r0, r5, r2
 8001140:	4680      	mov	r8, r0
 8001142:	2800      	cmp	r0, #0
 8001144:	dd45      	ble.n	80011d2 <__aeabi_fsub+0x13a>
 8001146:	2a00      	cmp	r2, #0
 8001148:	d070      	beq.n	800122c <__aeabi_fsub+0x194>
 800114a:	2dff      	cmp	r5, #255	; 0xff
 800114c:	d100      	bne.n	8001150 <__aeabi_fsub+0xb8>
 800114e:	e09e      	b.n	800128e <__aeabi_fsub+0x1f6>
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	04db      	lsls	r3, r3, #19
 8001154:	431e      	orrs	r6, r3
 8001156:	4643      	mov	r3, r8
 8001158:	2b1b      	cmp	r3, #27
 800115a:	dc00      	bgt.n	800115e <__aeabi_fsub+0xc6>
 800115c:	e0d2      	b.n	8001304 <__aeabi_fsub+0x26c>
 800115e:	2001      	movs	r0, #1
 8001160:	4460      	add	r0, ip
 8001162:	0143      	lsls	r3, r0, #5
 8001164:	d57a      	bpl.n	800125c <__aeabi_fsub+0x1c4>
 8001166:	3501      	adds	r5, #1
 8001168:	2dff      	cmp	r5, #255	; 0xff
 800116a:	d06b      	beq.n	8001244 <__aeabi_fsub+0x1ac>
 800116c:	2301      	movs	r3, #1
 800116e:	4a9d      	ldr	r2, [pc, #628]	; (80013e4 <__aeabi_fsub+0x34c>)
 8001170:	4003      	ands	r3, r0
 8001172:	0840      	lsrs	r0, r0, #1
 8001174:	4010      	ands	r0, r2
 8001176:	4318      	orrs	r0, r3
 8001178:	e7c8      	b.n	800110c <__aeabi_fsub+0x74>
 800117a:	2e00      	cmp	r6, #0
 800117c:	d020      	beq.n	80011c0 <__aeabi_fsub+0x128>
 800117e:	428c      	cmp	r4, r1
 8001180:	d023      	beq.n	80011ca <__aeabi_fsub+0x132>
 8001182:	0028      	movs	r0, r5
 8001184:	38ff      	subs	r0, #255	; 0xff
 8001186:	2800      	cmp	r0, #0
 8001188:	d039      	beq.n	80011fe <__aeabi_fsub+0x166>
 800118a:	1b57      	subs	r7, r2, r5
 800118c:	2d00      	cmp	r5, #0
 800118e:	d000      	beq.n	8001192 <__aeabi_fsub+0xfa>
 8001190:	e09d      	b.n	80012ce <__aeabi_fsub+0x236>
 8001192:	4663      	mov	r3, ip
 8001194:	2b00      	cmp	r3, #0
 8001196:	d100      	bne.n	800119a <__aeabi_fsub+0x102>
 8001198:	e0db      	b.n	8001352 <__aeabi_fsub+0x2ba>
 800119a:	1e7b      	subs	r3, r7, #1
 800119c:	2f01      	cmp	r7, #1
 800119e:	d100      	bne.n	80011a2 <__aeabi_fsub+0x10a>
 80011a0:	e10d      	b.n	80013be <__aeabi_fsub+0x326>
 80011a2:	2fff      	cmp	r7, #255	; 0xff
 80011a4:	d071      	beq.n	800128a <__aeabi_fsub+0x1f2>
 80011a6:	001f      	movs	r7, r3
 80011a8:	e098      	b.n	80012dc <__aeabi_fsub+0x244>
 80011aa:	2e00      	cmp	r6, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x118>
 80011ae:	e0a7      	b.n	8001300 <__aeabi_fsub+0x268>
 80011b0:	1e42      	subs	r2, r0, #1
 80011b2:	2801      	cmp	r0, #1
 80011b4:	d100      	bne.n	80011b8 <__aeabi_fsub+0x120>
 80011b6:	e0e6      	b.n	8001386 <__aeabi_fsub+0x2ee>
 80011b8:	28ff      	cmp	r0, #255	; 0xff
 80011ba:	d068      	beq.n	800128e <__aeabi_fsub+0x1f6>
 80011bc:	0010      	movs	r0, r2
 80011be:	e78f      	b.n	80010e0 <__aeabi_fsub+0x48>
 80011c0:	2001      	movs	r0, #1
 80011c2:	4041      	eors	r1, r0
 80011c4:	42a1      	cmp	r1, r4
 80011c6:	d000      	beq.n	80011ca <__aeabi_fsub+0x132>
 80011c8:	e77f      	b.n	80010ca <__aeabi_fsub+0x32>
 80011ca:	20ff      	movs	r0, #255	; 0xff
 80011cc:	4240      	negs	r0, r0
 80011ce:	4680      	mov	r8, r0
 80011d0:	44a8      	add	r8, r5
 80011d2:	4640      	mov	r0, r8
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d038      	beq.n	800124a <__aeabi_fsub+0x1b2>
 80011d8:	1b51      	subs	r1, r2, r5
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d100      	bne.n	80011e0 <__aeabi_fsub+0x148>
 80011de:	e0ae      	b.n	800133e <__aeabi_fsub+0x2a6>
 80011e0:	2aff      	cmp	r2, #255	; 0xff
 80011e2:	d100      	bne.n	80011e6 <__aeabi_fsub+0x14e>
 80011e4:	e0df      	b.n	80013a6 <__aeabi_fsub+0x30e>
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	4660      	mov	r0, ip
 80011ea:	04db      	lsls	r3, r3, #19
 80011ec:	4318      	orrs	r0, r3
 80011ee:	4684      	mov	ip, r0
 80011f0:	291b      	cmp	r1, #27
 80011f2:	dc00      	bgt.n	80011f6 <__aeabi_fsub+0x15e>
 80011f4:	e0d9      	b.n	80013aa <__aeabi_fsub+0x312>
 80011f6:	2001      	movs	r0, #1
 80011f8:	0015      	movs	r5, r2
 80011fa:	1980      	adds	r0, r0, r6
 80011fc:	e7b1      	b.n	8001162 <__aeabi_fsub+0xca>
 80011fe:	20fe      	movs	r0, #254	; 0xfe
 8001200:	1c6a      	adds	r2, r5, #1
 8001202:	4210      	tst	r0, r2
 8001204:	d171      	bne.n	80012ea <__aeabi_fsub+0x252>
 8001206:	2d00      	cmp	r5, #0
 8001208:	d000      	beq.n	800120c <__aeabi_fsub+0x174>
 800120a:	e0a6      	b.n	800135a <__aeabi_fsub+0x2c2>
 800120c:	4663      	mov	r3, ip
 800120e:	2b00      	cmp	r3, #0
 8001210:	d100      	bne.n	8001214 <__aeabi_fsub+0x17c>
 8001212:	e0d9      	b.n	80013c8 <__aeabi_fsub+0x330>
 8001214:	2200      	movs	r2, #0
 8001216:	2e00      	cmp	r6, #0
 8001218:	d100      	bne.n	800121c <__aeabi_fsub+0x184>
 800121a:	e788      	b.n	800112e <__aeabi_fsub+0x96>
 800121c:	1b98      	subs	r0, r3, r6
 800121e:	0143      	lsls	r3, r0, #5
 8001220:	d400      	bmi.n	8001224 <__aeabi_fsub+0x18c>
 8001222:	e0e1      	b.n	80013e8 <__aeabi_fsub+0x350>
 8001224:	4663      	mov	r3, ip
 8001226:	000c      	movs	r4, r1
 8001228:	1af0      	subs	r0, r6, r3
 800122a:	e76f      	b.n	800110c <__aeabi_fsub+0x74>
 800122c:	2e00      	cmp	r6, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_fsub+0x19a>
 8001230:	e0b7      	b.n	80013a2 <__aeabi_fsub+0x30a>
 8001232:	0002      	movs	r2, r0
 8001234:	3a01      	subs	r2, #1
 8001236:	2801      	cmp	r0, #1
 8001238:	d100      	bne.n	800123c <__aeabi_fsub+0x1a4>
 800123a:	e09c      	b.n	8001376 <__aeabi_fsub+0x2de>
 800123c:	28ff      	cmp	r0, #255	; 0xff
 800123e:	d026      	beq.n	800128e <__aeabi_fsub+0x1f6>
 8001240:	4690      	mov	r8, r2
 8001242:	e788      	b.n	8001156 <__aeabi_fsub+0xbe>
 8001244:	22ff      	movs	r2, #255	; 0xff
 8001246:	2700      	movs	r7, #0
 8001248:	e771      	b.n	800112e <__aeabi_fsub+0x96>
 800124a:	20fe      	movs	r0, #254	; 0xfe
 800124c:	1c6a      	adds	r2, r5, #1
 800124e:	4210      	tst	r0, r2
 8001250:	d064      	beq.n	800131c <__aeabi_fsub+0x284>
 8001252:	2aff      	cmp	r2, #255	; 0xff
 8001254:	d0f6      	beq.n	8001244 <__aeabi_fsub+0x1ac>
 8001256:	0015      	movs	r5, r2
 8001258:	4466      	add	r6, ip
 800125a:	0870      	lsrs	r0, r6, #1
 800125c:	0743      	lsls	r3, r0, #29
 800125e:	d000      	beq.n	8001262 <__aeabi_fsub+0x1ca>
 8001260:	e756      	b.n	8001110 <__aeabi_fsub+0x78>
 8001262:	08c3      	lsrs	r3, r0, #3
 8001264:	2dff      	cmp	r5, #255	; 0xff
 8001266:	d012      	beq.n	800128e <__aeabi_fsub+0x1f6>
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5f      	lsrs	r7, r3, #9
 800126c:	b2ea      	uxtb	r2, r5
 800126e:	e75e      	b.n	800112e <__aeabi_fsub+0x96>
 8001270:	4662      	mov	r2, ip
 8001272:	2a00      	cmp	r2, #0
 8001274:	d100      	bne.n	8001278 <__aeabi_fsub+0x1e0>
 8001276:	e096      	b.n	80013a6 <__aeabi_fsub+0x30e>
 8001278:	2e00      	cmp	r6, #0
 800127a:	d008      	beq.n	800128e <__aeabi_fsub+0x1f6>
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	03d2      	lsls	r2, r2, #15
 8001280:	4213      	tst	r3, r2
 8001282:	d004      	beq.n	800128e <__aeabi_fsub+0x1f6>
 8001284:	4648      	mov	r0, r9
 8001286:	4210      	tst	r0, r2
 8001288:	d101      	bne.n	800128e <__aeabi_fsub+0x1f6>
 800128a:	000c      	movs	r4, r1
 800128c:	464b      	mov	r3, r9
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0d8      	beq.n	8001244 <__aeabi_fsub+0x1ac>
 8001292:	2780      	movs	r7, #128	; 0x80
 8001294:	03ff      	lsls	r7, r7, #15
 8001296:	431f      	orrs	r7, r3
 8001298:	027f      	lsls	r7, r7, #9
 800129a:	22ff      	movs	r2, #255	; 0xff
 800129c:	0a7f      	lsrs	r7, r7, #9
 800129e:	e746      	b.n	800112e <__aeabi_fsub+0x96>
 80012a0:	2320      	movs	r3, #32
 80012a2:	003a      	movs	r2, r7
 80012a4:	1b45      	subs	r5, r0, r5
 80012a6:	0038      	movs	r0, r7
 80012a8:	3501      	adds	r5, #1
 80012aa:	40ea      	lsrs	r2, r5
 80012ac:	1b5d      	subs	r5, r3, r5
 80012ae:	40a8      	lsls	r0, r5
 80012b0:	1e43      	subs	r3, r0, #1
 80012b2:	4198      	sbcs	r0, r3
 80012b4:	2500      	movs	r5, #0
 80012b6:	4310      	orrs	r0, r2
 80012b8:	e728      	b.n	800110c <__aeabi_fsub+0x74>
 80012ba:	2320      	movs	r3, #32
 80012bc:	1a1b      	subs	r3, r3, r0
 80012be:	0032      	movs	r2, r6
 80012c0:	409e      	lsls	r6, r3
 80012c2:	40c2      	lsrs	r2, r0
 80012c4:	0030      	movs	r0, r6
 80012c6:	1e43      	subs	r3, r0, #1
 80012c8:	4198      	sbcs	r0, r3
 80012ca:	4310      	orrs	r0, r2
 80012cc:	e70c      	b.n	80010e8 <__aeabi_fsub+0x50>
 80012ce:	2aff      	cmp	r2, #255	; 0xff
 80012d0:	d0db      	beq.n	800128a <__aeabi_fsub+0x1f2>
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	4660      	mov	r0, ip
 80012d6:	04db      	lsls	r3, r3, #19
 80012d8:	4318      	orrs	r0, r3
 80012da:	4684      	mov	ip, r0
 80012dc:	2f1b      	cmp	r7, #27
 80012de:	dd56      	ble.n	800138e <__aeabi_fsub+0x2f6>
 80012e0:	2001      	movs	r0, #1
 80012e2:	000c      	movs	r4, r1
 80012e4:	0015      	movs	r5, r2
 80012e6:	1a30      	subs	r0, r6, r0
 80012e8:	e700      	b.n	80010ec <__aeabi_fsub+0x54>
 80012ea:	4663      	mov	r3, ip
 80012ec:	1b9f      	subs	r7, r3, r6
 80012ee:	017b      	lsls	r3, r7, #5
 80012f0:	d43d      	bmi.n	800136e <__aeabi_fsub+0x2d6>
 80012f2:	2f00      	cmp	r7, #0
 80012f4:	d000      	beq.n	80012f8 <__aeabi_fsub+0x260>
 80012f6:	e6fe      	b.n	80010f6 <__aeabi_fsub+0x5e>
 80012f8:	2400      	movs	r4, #0
 80012fa:	2200      	movs	r2, #0
 80012fc:	2700      	movs	r7, #0
 80012fe:	e716      	b.n	800112e <__aeabi_fsub+0x96>
 8001300:	0005      	movs	r5, r0
 8001302:	e7af      	b.n	8001264 <__aeabi_fsub+0x1cc>
 8001304:	0032      	movs	r2, r6
 8001306:	4643      	mov	r3, r8
 8001308:	4641      	mov	r1, r8
 800130a:	40da      	lsrs	r2, r3
 800130c:	2320      	movs	r3, #32
 800130e:	1a5b      	subs	r3, r3, r1
 8001310:	409e      	lsls	r6, r3
 8001312:	0030      	movs	r0, r6
 8001314:	1e43      	subs	r3, r0, #1
 8001316:	4198      	sbcs	r0, r3
 8001318:	4310      	orrs	r0, r2
 800131a:	e721      	b.n	8001160 <__aeabi_fsub+0xc8>
 800131c:	2d00      	cmp	r5, #0
 800131e:	d1a7      	bne.n	8001270 <__aeabi_fsub+0x1d8>
 8001320:	4663      	mov	r3, ip
 8001322:	2b00      	cmp	r3, #0
 8001324:	d059      	beq.n	80013da <__aeabi_fsub+0x342>
 8001326:	2200      	movs	r2, #0
 8001328:	2e00      	cmp	r6, #0
 800132a:	d100      	bne.n	800132e <__aeabi_fsub+0x296>
 800132c:	e6ff      	b.n	800112e <__aeabi_fsub+0x96>
 800132e:	0030      	movs	r0, r6
 8001330:	4460      	add	r0, ip
 8001332:	0143      	lsls	r3, r0, #5
 8001334:	d592      	bpl.n	800125c <__aeabi_fsub+0x1c4>
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <__aeabi_fsub+0x348>)
 8001338:	3501      	adds	r5, #1
 800133a:	4018      	ands	r0, r3
 800133c:	e78e      	b.n	800125c <__aeabi_fsub+0x1c4>
 800133e:	4663      	mov	r3, ip
 8001340:	2b00      	cmp	r3, #0
 8001342:	d047      	beq.n	80013d4 <__aeabi_fsub+0x33c>
 8001344:	1e4b      	subs	r3, r1, #1
 8001346:	2901      	cmp	r1, #1
 8001348:	d015      	beq.n	8001376 <__aeabi_fsub+0x2de>
 800134a:	29ff      	cmp	r1, #255	; 0xff
 800134c:	d02b      	beq.n	80013a6 <__aeabi_fsub+0x30e>
 800134e:	0019      	movs	r1, r3
 8001350:	e74e      	b.n	80011f0 <__aeabi_fsub+0x158>
 8001352:	000c      	movs	r4, r1
 8001354:	464b      	mov	r3, r9
 8001356:	003d      	movs	r5, r7
 8001358:	e784      	b.n	8001264 <__aeabi_fsub+0x1cc>
 800135a:	4662      	mov	r2, ip
 800135c:	2a00      	cmp	r2, #0
 800135e:	d18b      	bne.n	8001278 <__aeabi_fsub+0x1e0>
 8001360:	2e00      	cmp	r6, #0
 8001362:	d192      	bne.n	800128a <__aeabi_fsub+0x1f2>
 8001364:	2780      	movs	r7, #128	; 0x80
 8001366:	2400      	movs	r4, #0
 8001368:	22ff      	movs	r2, #255	; 0xff
 800136a:	03ff      	lsls	r7, r7, #15
 800136c:	e6df      	b.n	800112e <__aeabi_fsub+0x96>
 800136e:	4663      	mov	r3, ip
 8001370:	000c      	movs	r4, r1
 8001372:	1af7      	subs	r7, r6, r3
 8001374:	e6bf      	b.n	80010f6 <__aeabi_fsub+0x5e>
 8001376:	0030      	movs	r0, r6
 8001378:	4460      	add	r0, ip
 800137a:	2501      	movs	r5, #1
 800137c:	0143      	lsls	r3, r0, #5
 800137e:	d400      	bmi.n	8001382 <__aeabi_fsub+0x2ea>
 8001380:	e76c      	b.n	800125c <__aeabi_fsub+0x1c4>
 8001382:	2502      	movs	r5, #2
 8001384:	e6f2      	b.n	800116c <__aeabi_fsub+0xd4>
 8001386:	4663      	mov	r3, ip
 8001388:	2501      	movs	r5, #1
 800138a:	1b98      	subs	r0, r3, r6
 800138c:	e6ae      	b.n	80010ec <__aeabi_fsub+0x54>
 800138e:	2320      	movs	r3, #32
 8001390:	4664      	mov	r4, ip
 8001392:	4660      	mov	r0, ip
 8001394:	40fc      	lsrs	r4, r7
 8001396:	1bdf      	subs	r7, r3, r7
 8001398:	40b8      	lsls	r0, r7
 800139a:	1e43      	subs	r3, r0, #1
 800139c:	4198      	sbcs	r0, r3
 800139e:	4320      	orrs	r0, r4
 80013a0:	e79f      	b.n	80012e2 <__aeabi_fsub+0x24a>
 80013a2:	0005      	movs	r5, r0
 80013a4:	e75e      	b.n	8001264 <__aeabi_fsub+0x1cc>
 80013a6:	464b      	mov	r3, r9
 80013a8:	e771      	b.n	800128e <__aeabi_fsub+0x1f6>
 80013aa:	2320      	movs	r3, #32
 80013ac:	4665      	mov	r5, ip
 80013ae:	4660      	mov	r0, ip
 80013b0:	40cd      	lsrs	r5, r1
 80013b2:	1a59      	subs	r1, r3, r1
 80013b4:	4088      	lsls	r0, r1
 80013b6:	1e43      	subs	r3, r0, #1
 80013b8:	4198      	sbcs	r0, r3
 80013ba:	4328      	orrs	r0, r5
 80013bc:	e71c      	b.n	80011f8 <__aeabi_fsub+0x160>
 80013be:	4663      	mov	r3, ip
 80013c0:	000c      	movs	r4, r1
 80013c2:	2501      	movs	r5, #1
 80013c4:	1af0      	subs	r0, r6, r3
 80013c6:	e691      	b.n	80010ec <__aeabi_fsub+0x54>
 80013c8:	2e00      	cmp	r6, #0
 80013ca:	d095      	beq.n	80012f8 <__aeabi_fsub+0x260>
 80013cc:	000c      	movs	r4, r1
 80013ce:	464f      	mov	r7, r9
 80013d0:	2200      	movs	r2, #0
 80013d2:	e6ac      	b.n	800112e <__aeabi_fsub+0x96>
 80013d4:	464b      	mov	r3, r9
 80013d6:	000d      	movs	r5, r1
 80013d8:	e744      	b.n	8001264 <__aeabi_fsub+0x1cc>
 80013da:	464f      	mov	r7, r9
 80013dc:	2200      	movs	r2, #0
 80013de:	e6a6      	b.n	800112e <__aeabi_fsub+0x96>
 80013e0:	fbffffff 	.word	0xfbffffff
 80013e4:	7dffffff 	.word	0x7dffffff
 80013e8:	2800      	cmp	r0, #0
 80013ea:	d000      	beq.n	80013ee <__aeabi_fsub+0x356>
 80013ec:	e736      	b.n	800125c <__aeabi_fsub+0x1c4>
 80013ee:	2400      	movs	r4, #0
 80013f0:	2700      	movs	r7, #0
 80013f2:	e69c      	b.n	800112e <__aeabi_fsub+0x96>

080013f4 <__aeabi_f2iz>:
 80013f4:	0241      	lsls	r1, r0, #9
 80013f6:	0042      	lsls	r2, r0, #1
 80013f8:	0fc3      	lsrs	r3, r0, #31
 80013fa:	0a49      	lsrs	r1, r1, #9
 80013fc:	2000      	movs	r0, #0
 80013fe:	0e12      	lsrs	r2, r2, #24
 8001400:	2a7e      	cmp	r2, #126	; 0x7e
 8001402:	dd03      	ble.n	800140c <__aeabi_f2iz+0x18>
 8001404:	2a9d      	cmp	r2, #157	; 0x9d
 8001406:	dd02      	ble.n	800140e <__aeabi_f2iz+0x1a>
 8001408:	4a09      	ldr	r2, [pc, #36]	; (8001430 <__aeabi_f2iz+0x3c>)
 800140a:	1898      	adds	r0, r3, r2
 800140c:	4770      	bx	lr
 800140e:	2080      	movs	r0, #128	; 0x80
 8001410:	0400      	lsls	r0, r0, #16
 8001412:	4301      	orrs	r1, r0
 8001414:	2a95      	cmp	r2, #149	; 0x95
 8001416:	dc07      	bgt.n	8001428 <__aeabi_f2iz+0x34>
 8001418:	2096      	movs	r0, #150	; 0x96
 800141a:	1a82      	subs	r2, r0, r2
 800141c:	40d1      	lsrs	r1, r2
 800141e:	4248      	negs	r0, r1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f3      	bne.n	800140c <__aeabi_f2iz+0x18>
 8001424:	0008      	movs	r0, r1
 8001426:	e7f1      	b.n	800140c <__aeabi_f2iz+0x18>
 8001428:	3a96      	subs	r2, #150	; 0x96
 800142a:	4091      	lsls	r1, r2
 800142c:	e7f7      	b.n	800141e <__aeabi_f2iz+0x2a>
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	7fffffff 	.word	0x7fffffff

08001434 <__aeabi_ui2f>:
 8001434:	b570      	push	{r4, r5, r6, lr}
 8001436:	1e05      	subs	r5, r0, #0
 8001438:	d00e      	beq.n	8001458 <__aeabi_ui2f+0x24>
 800143a:	f001 fef3 	bl	8003224 <__clzsi2>
 800143e:	239e      	movs	r3, #158	; 0x9e
 8001440:	0004      	movs	r4, r0
 8001442:	1a1b      	subs	r3, r3, r0
 8001444:	2b96      	cmp	r3, #150	; 0x96
 8001446:	dc0c      	bgt.n	8001462 <__aeabi_ui2f+0x2e>
 8001448:	2808      	cmp	r0, #8
 800144a:	dd01      	ble.n	8001450 <__aeabi_ui2f+0x1c>
 800144c:	3c08      	subs	r4, #8
 800144e:	40a5      	lsls	r5, r4
 8001450:	026d      	lsls	r5, r5, #9
 8001452:	0a6d      	lsrs	r5, r5, #9
 8001454:	b2d8      	uxtb	r0, r3
 8001456:	e001      	b.n	800145c <__aeabi_ui2f+0x28>
 8001458:	2000      	movs	r0, #0
 800145a:	2500      	movs	r5, #0
 800145c:	05c0      	lsls	r0, r0, #23
 800145e:	4328      	orrs	r0, r5
 8001460:	bd70      	pop	{r4, r5, r6, pc}
 8001462:	2b99      	cmp	r3, #153	; 0x99
 8001464:	dd09      	ble.n	800147a <__aeabi_ui2f+0x46>
 8001466:	0002      	movs	r2, r0
 8001468:	0029      	movs	r1, r5
 800146a:	321b      	adds	r2, #27
 800146c:	4091      	lsls	r1, r2
 800146e:	1e4a      	subs	r2, r1, #1
 8001470:	4191      	sbcs	r1, r2
 8001472:	2205      	movs	r2, #5
 8001474:	1a12      	subs	r2, r2, r0
 8001476:	40d5      	lsrs	r5, r2
 8001478:	430d      	orrs	r5, r1
 800147a:	2c05      	cmp	r4, #5
 800147c:	dc12      	bgt.n	80014a4 <__aeabi_ui2f+0x70>
 800147e:	0029      	movs	r1, r5
 8001480:	4e0c      	ldr	r6, [pc, #48]	; (80014b4 <__aeabi_ui2f+0x80>)
 8001482:	4031      	ands	r1, r6
 8001484:	076a      	lsls	r2, r5, #29
 8001486:	d009      	beq.n	800149c <__aeabi_ui2f+0x68>
 8001488:	200f      	movs	r0, #15
 800148a:	4028      	ands	r0, r5
 800148c:	2804      	cmp	r0, #4
 800148e:	d005      	beq.n	800149c <__aeabi_ui2f+0x68>
 8001490:	3104      	adds	r1, #4
 8001492:	014a      	lsls	r2, r1, #5
 8001494:	d502      	bpl.n	800149c <__aeabi_ui2f+0x68>
 8001496:	239f      	movs	r3, #159	; 0x9f
 8001498:	4031      	ands	r1, r6
 800149a:	1b1b      	subs	r3, r3, r4
 800149c:	0189      	lsls	r1, r1, #6
 800149e:	0a4d      	lsrs	r5, r1, #9
 80014a0:	b2d8      	uxtb	r0, r3
 80014a2:	e7db      	b.n	800145c <__aeabi_ui2f+0x28>
 80014a4:	1f62      	subs	r2, r4, #5
 80014a6:	4095      	lsls	r5, r2
 80014a8:	0029      	movs	r1, r5
 80014aa:	4e02      	ldr	r6, [pc, #8]	; (80014b4 <__aeabi_ui2f+0x80>)
 80014ac:	4031      	ands	r1, r6
 80014ae:	076a      	lsls	r2, r5, #29
 80014b0:	d0f4      	beq.n	800149c <__aeabi_ui2f+0x68>
 80014b2:	e7e9      	b.n	8001488 <__aeabi_ui2f+0x54>
 80014b4:	fbffffff 	.word	0xfbffffff

080014b8 <__aeabi_dadd>:
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	464f      	mov	r7, r9
 80014bc:	4646      	mov	r6, r8
 80014be:	46d6      	mov	lr, sl
 80014c0:	000d      	movs	r5, r1
 80014c2:	0004      	movs	r4, r0
 80014c4:	b5c0      	push	{r6, r7, lr}
 80014c6:	001f      	movs	r7, r3
 80014c8:	0011      	movs	r1, r2
 80014ca:	0328      	lsls	r0, r5, #12
 80014cc:	0f62      	lsrs	r2, r4, #29
 80014ce:	0a40      	lsrs	r0, r0, #9
 80014d0:	4310      	orrs	r0, r2
 80014d2:	007a      	lsls	r2, r7, #1
 80014d4:	0d52      	lsrs	r2, r2, #21
 80014d6:	00e3      	lsls	r3, r4, #3
 80014d8:	033c      	lsls	r4, r7, #12
 80014da:	4691      	mov	r9, r2
 80014dc:	0a64      	lsrs	r4, r4, #9
 80014de:	0ffa      	lsrs	r2, r7, #31
 80014e0:	0f4f      	lsrs	r7, r1, #29
 80014e2:	006e      	lsls	r6, r5, #1
 80014e4:	4327      	orrs	r7, r4
 80014e6:	4692      	mov	sl, r2
 80014e8:	46b8      	mov	r8, r7
 80014ea:	0d76      	lsrs	r6, r6, #21
 80014ec:	0fed      	lsrs	r5, r5, #31
 80014ee:	00c9      	lsls	r1, r1, #3
 80014f0:	4295      	cmp	r5, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x3e>
 80014f4:	e099      	b.n	800162a <__aeabi_dadd+0x172>
 80014f6:	464c      	mov	r4, r9
 80014f8:	1b34      	subs	r4, r6, r4
 80014fa:	46a4      	mov	ip, r4
 80014fc:	2c00      	cmp	r4, #0
 80014fe:	dc00      	bgt.n	8001502 <__aeabi_dadd+0x4a>
 8001500:	e07c      	b.n	80015fc <__aeabi_dadd+0x144>
 8001502:	464a      	mov	r2, r9
 8001504:	2a00      	cmp	r2, #0
 8001506:	d100      	bne.n	800150a <__aeabi_dadd+0x52>
 8001508:	e0b8      	b.n	800167c <__aeabi_dadd+0x1c4>
 800150a:	4ac5      	ldr	r2, [pc, #788]	; (8001820 <__aeabi_dadd+0x368>)
 800150c:	4296      	cmp	r6, r2
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x5a>
 8001510:	e11c      	b.n	800174c <__aeabi_dadd+0x294>
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	003c      	movs	r4, r7
 8001516:	0412      	lsls	r2, r2, #16
 8001518:	4314      	orrs	r4, r2
 800151a:	46a0      	mov	r8, r4
 800151c:	4662      	mov	r2, ip
 800151e:	2a38      	cmp	r2, #56	; 0x38
 8001520:	dd00      	ble.n	8001524 <__aeabi_dadd+0x6c>
 8001522:	e161      	b.n	80017e8 <__aeabi_dadd+0x330>
 8001524:	2a1f      	cmp	r2, #31
 8001526:	dd00      	ble.n	800152a <__aeabi_dadd+0x72>
 8001528:	e1cc      	b.n	80018c4 <__aeabi_dadd+0x40c>
 800152a:	4664      	mov	r4, ip
 800152c:	2220      	movs	r2, #32
 800152e:	1b12      	subs	r2, r2, r4
 8001530:	4644      	mov	r4, r8
 8001532:	4094      	lsls	r4, r2
 8001534:	000f      	movs	r7, r1
 8001536:	46a1      	mov	r9, r4
 8001538:	4664      	mov	r4, ip
 800153a:	4091      	lsls	r1, r2
 800153c:	40e7      	lsrs	r7, r4
 800153e:	464c      	mov	r4, r9
 8001540:	1e4a      	subs	r2, r1, #1
 8001542:	4191      	sbcs	r1, r2
 8001544:	433c      	orrs	r4, r7
 8001546:	4642      	mov	r2, r8
 8001548:	4321      	orrs	r1, r4
 800154a:	4664      	mov	r4, ip
 800154c:	40e2      	lsrs	r2, r4
 800154e:	1a80      	subs	r0, r0, r2
 8001550:	1a5c      	subs	r4, r3, r1
 8001552:	42a3      	cmp	r3, r4
 8001554:	419b      	sbcs	r3, r3
 8001556:	425f      	negs	r7, r3
 8001558:	1bc7      	subs	r7, r0, r7
 800155a:	023b      	lsls	r3, r7, #8
 800155c:	d400      	bmi.n	8001560 <__aeabi_dadd+0xa8>
 800155e:	e0d0      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001560:	027f      	lsls	r7, r7, #9
 8001562:	0a7f      	lsrs	r7, r7, #9
 8001564:	2f00      	cmp	r7, #0
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0xb2>
 8001568:	e0ff      	b.n	800176a <__aeabi_dadd+0x2b2>
 800156a:	0038      	movs	r0, r7
 800156c:	f001 fe5a 	bl	8003224 <__clzsi2>
 8001570:	0001      	movs	r1, r0
 8001572:	3908      	subs	r1, #8
 8001574:	2320      	movs	r3, #32
 8001576:	0022      	movs	r2, r4
 8001578:	1a5b      	subs	r3, r3, r1
 800157a:	408f      	lsls	r7, r1
 800157c:	40da      	lsrs	r2, r3
 800157e:	408c      	lsls	r4, r1
 8001580:	4317      	orrs	r7, r2
 8001582:	42b1      	cmp	r1, r6
 8001584:	da00      	bge.n	8001588 <__aeabi_dadd+0xd0>
 8001586:	e0ff      	b.n	8001788 <__aeabi_dadd+0x2d0>
 8001588:	1b89      	subs	r1, r1, r6
 800158a:	1c4b      	adds	r3, r1, #1
 800158c:	2b1f      	cmp	r3, #31
 800158e:	dd00      	ble.n	8001592 <__aeabi_dadd+0xda>
 8001590:	e0a8      	b.n	80016e4 <__aeabi_dadd+0x22c>
 8001592:	2220      	movs	r2, #32
 8001594:	0039      	movs	r1, r7
 8001596:	1ad2      	subs	r2, r2, r3
 8001598:	0020      	movs	r0, r4
 800159a:	4094      	lsls	r4, r2
 800159c:	4091      	lsls	r1, r2
 800159e:	40d8      	lsrs	r0, r3
 80015a0:	1e62      	subs	r2, r4, #1
 80015a2:	4194      	sbcs	r4, r2
 80015a4:	40df      	lsrs	r7, r3
 80015a6:	2600      	movs	r6, #0
 80015a8:	4301      	orrs	r1, r0
 80015aa:	430c      	orrs	r4, r1
 80015ac:	0763      	lsls	r3, r4, #29
 80015ae:	d009      	beq.n	80015c4 <__aeabi_dadd+0x10c>
 80015b0:	230f      	movs	r3, #15
 80015b2:	4023      	ands	r3, r4
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d005      	beq.n	80015c4 <__aeabi_dadd+0x10c>
 80015b8:	1d23      	adds	r3, r4, #4
 80015ba:	42a3      	cmp	r3, r4
 80015bc:	41a4      	sbcs	r4, r4
 80015be:	4264      	negs	r4, r4
 80015c0:	193f      	adds	r7, r7, r4
 80015c2:	001c      	movs	r4, r3
 80015c4:	023b      	lsls	r3, r7, #8
 80015c6:	d400      	bmi.n	80015ca <__aeabi_dadd+0x112>
 80015c8:	e09e      	b.n	8001708 <__aeabi_dadd+0x250>
 80015ca:	4b95      	ldr	r3, [pc, #596]	; (8001820 <__aeabi_dadd+0x368>)
 80015cc:	3601      	adds	r6, #1
 80015ce:	429e      	cmp	r6, r3
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dadd+0x11c>
 80015d2:	e0b7      	b.n	8001744 <__aeabi_dadd+0x28c>
 80015d4:	4a93      	ldr	r2, [pc, #588]	; (8001824 <__aeabi_dadd+0x36c>)
 80015d6:	08e4      	lsrs	r4, r4, #3
 80015d8:	4017      	ands	r7, r2
 80015da:	077b      	lsls	r3, r7, #29
 80015dc:	0571      	lsls	r1, r6, #21
 80015de:	027f      	lsls	r7, r7, #9
 80015e0:	4323      	orrs	r3, r4
 80015e2:	0b3f      	lsrs	r7, r7, #12
 80015e4:	0d4a      	lsrs	r2, r1, #21
 80015e6:	0512      	lsls	r2, r2, #20
 80015e8:	433a      	orrs	r2, r7
 80015ea:	07ed      	lsls	r5, r5, #31
 80015ec:	432a      	orrs	r2, r5
 80015ee:	0018      	movs	r0, r3
 80015f0:	0011      	movs	r1, r2
 80015f2:	bce0      	pop	{r5, r6, r7}
 80015f4:	46ba      	mov	sl, r7
 80015f6:	46b1      	mov	r9, r6
 80015f8:	46a8      	mov	r8, r5
 80015fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d04b      	beq.n	8001698 <__aeabi_dadd+0x1e0>
 8001600:	464c      	mov	r4, r9
 8001602:	1ba4      	subs	r4, r4, r6
 8001604:	46a4      	mov	ip, r4
 8001606:	2e00      	cmp	r6, #0
 8001608:	d000      	beq.n	800160c <__aeabi_dadd+0x154>
 800160a:	e123      	b.n	8001854 <__aeabi_dadd+0x39c>
 800160c:	0004      	movs	r4, r0
 800160e:	431c      	orrs	r4, r3
 8001610:	d100      	bne.n	8001614 <__aeabi_dadd+0x15c>
 8001612:	e1af      	b.n	8001974 <__aeabi_dadd+0x4bc>
 8001614:	4662      	mov	r2, ip
 8001616:	1e54      	subs	r4, r2, #1
 8001618:	2a01      	cmp	r2, #1
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x166>
 800161c:	e215      	b.n	8001a4a <__aeabi_dadd+0x592>
 800161e:	4d80      	ldr	r5, [pc, #512]	; (8001820 <__aeabi_dadd+0x368>)
 8001620:	45ac      	cmp	ip, r5
 8001622:	d100      	bne.n	8001626 <__aeabi_dadd+0x16e>
 8001624:	e1c8      	b.n	80019b8 <__aeabi_dadd+0x500>
 8001626:	46a4      	mov	ip, r4
 8001628:	e11b      	b.n	8001862 <__aeabi_dadd+0x3aa>
 800162a:	464a      	mov	r2, r9
 800162c:	1ab2      	subs	r2, r6, r2
 800162e:	4694      	mov	ip, r2
 8001630:	2a00      	cmp	r2, #0
 8001632:	dc00      	bgt.n	8001636 <__aeabi_dadd+0x17e>
 8001634:	e0ac      	b.n	8001790 <__aeabi_dadd+0x2d8>
 8001636:	464a      	mov	r2, r9
 8001638:	2a00      	cmp	r2, #0
 800163a:	d043      	beq.n	80016c4 <__aeabi_dadd+0x20c>
 800163c:	4a78      	ldr	r2, [pc, #480]	; (8001820 <__aeabi_dadd+0x368>)
 800163e:	4296      	cmp	r6, r2
 8001640:	d100      	bne.n	8001644 <__aeabi_dadd+0x18c>
 8001642:	e1af      	b.n	80019a4 <__aeabi_dadd+0x4ec>
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	003c      	movs	r4, r7
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	4314      	orrs	r4, r2
 800164c:	46a0      	mov	r8, r4
 800164e:	4662      	mov	r2, ip
 8001650:	2a38      	cmp	r2, #56	; 0x38
 8001652:	dc67      	bgt.n	8001724 <__aeabi_dadd+0x26c>
 8001654:	2a1f      	cmp	r2, #31
 8001656:	dc00      	bgt.n	800165a <__aeabi_dadd+0x1a2>
 8001658:	e15f      	b.n	800191a <__aeabi_dadd+0x462>
 800165a:	4647      	mov	r7, r8
 800165c:	3a20      	subs	r2, #32
 800165e:	40d7      	lsrs	r7, r2
 8001660:	4662      	mov	r2, ip
 8001662:	2a20      	cmp	r2, #32
 8001664:	d005      	beq.n	8001672 <__aeabi_dadd+0x1ba>
 8001666:	4664      	mov	r4, ip
 8001668:	2240      	movs	r2, #64	; 0x40
 800166a:	1b12      	subs	r2, r2, r4
 800166c:	4644      	mov	r4, r8
 800166e:	4094      	lsls	r4, r2
 8001670:	4321      	orrs	r1, r4
 8001672:	1e4a      	subs	r2, r1, #1
 8001674:	4191      	sbcs	r1, r2
 8001676:	000c      	movs	r4, r1
 8001678:	433c      	orrs	r4, r7
 800167a:	e057      	b.n	800172c <__aeabi_dadd+0x274>
 800167c:	003a      	movs	r2, r7
 800167e:	430a      	orrs	r2, r1
 8001680:	d100      	bne.n	8001684 <__aeabi_dadd+0x1cc>
 8001682:	e105      	b.n	8001890 <__aeabi_dadd+0x3d8>
 8001684:	0022      	movs	r2, r4
 8001686:	3a01      	subs	r2, #1
 8001688:	2c01      	cmp	r4, #1
 800168a:	d100      	bne.n	800168e <__aeabi_dadd+0x1d6>
 800168c:	e182      	b.n	8001994 <__aeabi_dadd+0x4dc>
 800168e:	4c64      	ldr	r4, [pc, #400]	; (8001820 <__aeabi_dadd+0x368>)
 8001690:	45a4      	cmp	ip, r4
 8001692:	d05b      	beq.n	800174c <__aeabi_dadd+0x294>
 8001694:	4694      	mov	ip, r2
 8001696:	e741      	b.n	800151c <__aeabi_dadd+0x64>
 8001698:	4c63      	ldr	r4, [pc, #396]	; (8001828 <__aeabi_dadd+0x370>)
 800169a:	1c77      	adds	r7, r6, #1
 800169c:	4227      	tst	r7, r4
 800169e:	d000      	beq.n	80016a2 <__aeabi_dadd+0x1ea>
 80016a0:	e0c4      	b.n	800182c <__aeabi_dadd+0x374>
 80016a2:	0004      	movs	r4, r0
 80016a4:	431c      	orrs	r4, r3
 80016a6:	2e00      	cmp	r6, #0
 80016a8:	d000      	beq.n	80016ac <__aeabi_dadd+0x1f4>
 80016aa:	e169      	b.n	8001980 <__aeabi_dadd+0x4c8>
 80016ac:	2c00      	cmp	r4, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dadd+0x1fa>
 80016b0:	e1bf      	b.n	8001a32 <__aeabi_dadd+0x57a>
 80016b2:	4644      	mov	r4, r8
 80016b4:	430c      	orrs	r4, r1
 80016b6:	d000      	beq.n	80016ba <__aeabi_dadd+0x202>
 80016b8:	e1d0      	b.n	8001a5c <__aeabi_dadd+0x5a4>
 80016ba:	0742      	lsls	r2, r0, #29
 80016bc:	08db      	lsrs	r3, r3, #3
 80016be:	4313      	orrs	r3, r2
 80016c0:	08c0      	lsrs	r0, r0, #3
 80016c2:	e029      	b.n	8001718 <__aeabi_dadd+0x260>
 80016c4:	003a      	movs	r2, r7
 80016c6:	430a      	orrs	r2, r1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x214>
 80016ca:	e170      	b.n	80019ae <__aeabi_dadd+0x4f6>
 80016cc:	4662      	mov	r2, ip
 80016ce:	4664      	mov	r4, ip
 80016d0:	3a01      	subs	r2, #1
 80016d2:	2c01      	cmp	r4, #1
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dadd+0x220>
 80016d6:	e0e0      	b.n	800189a <__aeabi_dadd+0x3e2>
 80016d8:	4c51      	ldr	r4, [pc, #324]	; (8001820 <__aeabi_dadd+0x368>)
 80016da:	45a4      	cmp	ip, r4
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dadd+0x228>
 80016de:	e161      	b.n	80019a4 <__aeabi_dadd+0x4ec>
 80016e0:	4694      	mov	ip, r2
 80016e2:	e7b4      	b.n	800164e <__aeabi_dadd+0x196>
 80016e4:	003a      	movs	r2, r7
 80016e6:	391f      	subs	r1, #31
 80016e8:	40ca      	lsrs	r2, r1
 80016ea:	0011      	movs	r1, r2
 80016ec:	2b20      	cmp	r3, #32
 80016ee:	d003      	beq.n	80016f8 <__aeabi_dadd+0x240>
 80016f0:	2240      	movs	r2, #64	; 0x40
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	409f      	lsls	r7, r3
 80016f6:	433c      	orrs	r4, r7
 80016f8:	1e63      	subs	r3, r4, #1
 80016fa:	419c      	sbcs	r4, r3
 80016fc:	2700      	movs	r7, #0
 80016fe:	2600      	movs	r6, #0
 8001700:	430c      	orrs	r4, r1
 8001702:	0763      	lsls	r3, r4, #29
 8001704:	d000      	beq.n	8001708 <__aeabi_dadd+0x250>
 8001706:	e753      	b.n	80015b0 <__aeabi_dadd+0xf8>
 8001708:	46b4      	mov	ip, r6
 800170a:	08e4      	lsrs	r4, r4, #3
 800170c:	077b      	lsls	r3, r7, #29
 800170e:	4323      	orrs	r3, r4
 8001710:	08f8      	lsrs	r0, r7, #3
 8001712:	4a43      	ldr	r2, [pc, #268]	; (8001820 <__aeabi_dadd+0x368>)
 8001714:	4594      	cmp	ip, r2
 8001716:	d01d      	beq.n	8001754 <__aeabi_dadd+0x29c>
 8001718:	4662      	mov	r2, ip
 800171a:	0307      	lsls	r7, r0, #12
 800171c:	0552      	lsls	r2, r2, #21
 800171e:	0b3f      	lsrs	r7, r7, #12
 8001720:	0d52      	lsrs	r2, r2, #21
 8001722:	e760      	b.n	80015e6 <__aeabi_dadd+0x12e>
 8001724:	4644      	mov	r4, r8
 8001726:	430c      	orrs	r4, r1
 8001728:	1e62      	subs	r2, r4, #1
 800172a:	4194      	sbcs	r4, r2
 800172c:	18e4      	adds	r4, r4, r3
 800172e:	429c      	cmp	r4, r3
 8001730:	419b      	sbcs	r3, r3
 8001732:	425f      	negs	r7, r3
 8001734:	183f      	adds	r7, r7, r0
 8001736:	023b      	lsls	r3, r7, #8
 8001738:	d5e3      	bpl.n	8001702 <__aeabi_dadd+0x24a>
 800173a:	4b39      	ldr	r3, [pc, #228]	; (8001820 <__aeabi_dadd+0x368>)
 800173c:	3601      	adds	r6, #1
 800173e:	429e      	cmp	r6, r3
 8001740:	d000      	beq.n	8001744 <__aeabi_dadd+0x28c>
 8001742:	e0b5      	b.n	80018b0 <__aeabi_dadd+0x3f8>
 8001744:	0032      	movs	r2, r6
 8001746:	2700      	movs	r7, #0
 8001748:	2300      	movs	r3, #0
 800174a:	e74c      	b.n	80015e6 <__aeabi_dadd+0x12e>
 800174c:	0742      	lsls	r2, r0, #29
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	4313      	orrs	r3, r2
 8001752:	08c0      	lsrs	r0, r0, #3
 8001754:	001a      	movs	r2, r3
 8001756:	4302      	orrs	r2, r0
 8001758:	d100      	bne.n	800175c <__aeabi_dadd+0x2a4>
 800175a:	e1e1      	b.n	8001b20 <__aeabi_dadd+0x668>
 800175c:	2780      	movs	r7, #128	; 0x80
 800175e:	033f      	lsls	r7, r7, #12
 8001760:	4307      	orrs	r7, r0
 8001762:	033f      	lsls	r7, r7, #12
 8001764:	4a2e      	ldr	r2, [pc, #184]	; (8001820 <__aeabi_dadd+0x368>)
 8001766:	0b3f      	lsrs	r7, r7, #12
 8001768:	e73d      	b.n	80015e6 <__aeabi_dadd+0x12e>
 800176a:	0020      	movs	r0, r4
 800176c:	f001 fd5a 	bl	8003224 <__clzsi2>
 8001770:	0001      	movs	r1, r0
 8001772:	3118      	adds	r1, #24
 8001774:	291f      	cmp	r1, #31
 8001776:	dc00      	bgt.n	800177a <__aeabi_dadd+0x2c2>
 8001778:	e6fc      	b.n	8001574 <__aeabi_dadd+0xbc>
 800177a:	3808      	subs	r0, #8
 800177c:	4084      	lsls	r4, r0
 800177e:	0027      	movs	r7, r4
 8001780:	2400      	movs	r4, #0
 8001782:	42b1      	cmp	r1, r6
 8001784:	db00      	blt.n	8001788 <__aeabi_dadd+0x2d0>
 8001786:	e6ff      	b.n	8001588 <__aeabi_dadd+0xd0>
 8001788:	4a26      	ldr	r2, [pc, #152]	; (8001824 <__aeabi_dadd+0x36c>)
 800178a:	1a76      	subs	r6, r6, r1
 800178c:	4017      	ands	r7, r2
 800178e:	e70d      	b.n	80015ac <__aeabi_dadd+0xf4>
 8001790:	2a00      	cmp	r2, #0
 8001792:	d02f      	beq.n	80017f4 <__aeabi_dadd+0x33c>
 8001794:	464a      	mov	r2, r9
 8001796:	1b92      	subs	r2, r2, r6
 8001798:	4694      	mov	ip, r2
 800179a:	2e00      	cmp	r6, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_dadd+0x2e8>
 800179e:	e0ad      	b.n	80018fc <__aeabi_dadd+0x444>
 80017a0:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <__aeabi_dadd+0x368>)
 80017a2:	4591      	cmp	r9, r2
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dadd+0x2f0>
 80017a6:	e10f      	b.n	80019c8 <__aeabi_dadd+0x510>
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	0412      	lsls	r2, r2, #16
 80017ac:	4310      	orrs	r0, r2
 80017ae:	4662      	mov	r2, ip
 80017b0:	2a38      	cmp	r2, #56	; 0x38
 80017b2:	dd00      	ble.n	80017b6 <__aeabi_dadd+0x2fe>
 80017b4:	e10f      	b.n	80019d6 <__aeabi_dadd+0x51e>
 80017b6:	2a1f      	cmp	r2, #31
 80017b8:	dd00      	ble.n	80017bc <__aeabi_dadd+0x304>
 80017ba:	e180      	b.n	8001abe <__aeabi_dadd+0x606>
 80017bc:	4664      	mov	r4, ip
 80017be:	2220      	movs	r2, #32
 80017c0:	001e      	movs	r6, r3
 80017c2:	1b12      	subs	r2, r2, r4
 80017c4:	4667      	mov	r7, ip
 80017c6:	0004      	movs	r4, r0
 80017c8:	4093      	lsls	r3, r2
 80017ca:	4094      	lsls	r4, r2
 80017cc:	40fe      	lsrs	r6, r7
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	4193      	sbcs	r3, r2
 80017d2:	40f8      	lsrs	r0, r7
 80017d4:	4334      	orrs	r4, r6
 80017d6:	431c      	orrs	r4, r3
 80017d8:	4480      	add	r8, r0
 80017da:	1864      	adds	r4, r4, r1
 80017dc:	428c      	cmp	r4, r1
 80017de:	41bf      	sbcs	r7, r7
 80017e0:	427f      	negs	r7, r7
 80017e2:	464e      	mov	r6, r9
 80017e4:	4447      	add	r7, r8
 80017e6:	e7a6      	b.n	8001736 <__aeabi_dadd+0x27e>
 80017e8:	4642      	mov	r2, r8
 80017ea:	430a      	orrs	r2, r1
 80017ec:	0011      	movs	r1, r2
 80017ee:	1e4a      	subs	r2, r1, #1
 80017f0:	4191      	sbcs	r1, r2
 80017f2:	e6ad      	b.n	8001550 <__aeabi_dadd+0x98>
 80017f4:	4c0c      	ldr	r4, [pc, #48]	; (8001828 <__aeabi_dadd+0x370>)
 80017f6:	1c72      	adds	r2, r6, #1
 80017f8:	4222      	tst	r2, r4
 80017fa:	d000      	beq.n	80017fe <__aeabi_dadd+0x346>
 80017fc:	e0a1      	b.n	8001942 <__aeabi_dadd+0x48a>
 80017fe:	0002      	movs	r2, r0
 8001800:	431a      	orrs	r2, r3
 8001802:	2e00      	cmp	r6, #0
 8001804:	d000      	beq.n	8001808 <__aeabi_dadd+0x350>
 8001806:	e0fa      	b.n	80019fe <__aeabi_dadd+0x546>
 8001808:	2a00      	cmp	r2, #0
 800180a:	d100      	bne.n	800180e <__aeabi_dadd+0x356>
 800180c:	e145      	b.n	8001a9a <__aeabi_dadd+0x5e2>
 800180e:	003a      	movs	r2, r7
 8001810:	430a      	orrs	r2, r1
 8001812:	d000      	beq.n	8001816 <__aeabi_dadd+0x35e>
 8001814:	e146      	b.n	8001aa4 <__aeabi_dadd+0x5ec>
 8001816:	0742      	lsls	r2, r0, #29
 8001818:	08db      	lsrs	r3, r3, #3
 800181a:	4313      	orrs	r3, r2
 800181c:	08c0      	lsrs	r0, r0, #3
 800181e:	e77b      	b.n	8001718 <__aeabi_dadd+0x260>
 8001820:	000007ff 	.word	0x000007ff
 8001824:	ff7fffff 	.word	0xff7fffff
 8001828:	000007fe 	.word	0x000007fe
 800182c:	4647      	mov	r7, r8
 800182e:	1a5c      	subs	r4, r3, r1
 8001830:	1bc2      	subs	r2, r0, r7
 8001832:	42a3      	cmp	r3, r4
 8001834:	41bf      	sbcs	r7, r7
 8001836:	427f      	negs	r7, r7
 8001838:	46b9      	mov	r9, r7
 800183a:	0017      	movs	r7, r2
 800183c:	464a      	mov	r2, r9
 800183e:	1abf      	subs	r7, r7, r2
 8001840:	023a      	lsls	r2, r7, #8
 8001842:	d500      	bpl.n	8001846 <__aeabi_dadd+0x38e>
 8001844:	e08d      	b.n	8001962 <__aeabi_dadd+0x4aa>
 8001846:	0023      	movs	r3, r4
 8001848:	433b      	orrs	r3, r7
 800184a:	d000      	beq.n	800184e <__aeabi_dadd+0x396>
 800184c:	e68a      	b.n	8001564 <__aeabi_dadd+0xac>
 800184e:	2000      	movs	r0, #0
 8001850:	2500      	movs	r5, #0
 8001852:	e761      	b.n	8001718 <__aeabi_dadd+0x260>
 8001854:	4cb4      	ldr	r4, [pc, #720]	; (8001b28 <__aeabi_dadd+0x670>)
 8001856:	45a1      	cmp	r9, r4
 8001858:	d100      	bne.n	800185c <__aeabi_dadd+0x3a4>
 800185a:	e0ad      	b.n	80019b8 <__aeabi_dadd+0x500>
 800185c:	2480      	movs	r4, #128	; 0x80
 800185e:	0424      	lsls	r4, r4, #16
 8001860:	4320      	orrs	r0, r4
 8001862:	4664      	mov	r4, ip
 8001864:	2c38      	cmp	r4, #56	; 0x38
 8001866:	dc3d      	bgt.n	80018e4 <__aeabi_dadd+0x42c>
 8001868:	4662      	mov	r2, ip
 800186a:	2c1f      	cmp	r4, #31
 800186c:	dd00      	ble.n	8001870 <__aeabi_dadd+0x3b8>
 800186e:	e0b7      	b.n	80019e0 <__aeabi_dadd+0x528>
 8001870:	2520      	movs	r5, #32
 8001872:	001e      	movs	r6, r3
 8001874:	1b2d      	subs	r5, r5, r4
 8001876:	0004      	movs	r4, r0
 8001878:	40ab      	lsls	r3, r5
 800187a:	40ac      	lsls	r4, r5
 800187c:	40d6      	lsrs	r6, r2
 800187e:	40d0      	lsrs	r0, r2
 8001880:	4642      	mov	r2, r8
 8001882:	1e5d      	subs	r5, r3, #1
 8001884:	41ab      	sbcs	r3, r5
 8001886:	4334      	orrs	r4, r6
 8001888:	1a12      	subs	r2, r2, r0
 800188a:	4690      	mov	r8, r2
 800188c:	4323      	orrs	r3, r4
 800188e:	e02c      	b.n	80018ea <__aeabi_dadd+0x432>
 8001890:	0742      	lsls	r2, r0, #29
 8001892:	08db      	lsrs	r3, r3, #3
 8001894:	4313      	orrs	r3, r2
 8001896:	08c0      	lsrs	r0, r0, #3
 8001898:	e73b      	b.n	8001712 <__aeabi_dadd+0x25a>
 800189a:	185c      	adds	r4, r3, r1
 800189c:	429c      	cmp	r4, r3
 800189e:	419b      	sbcs	r3, r3
 80018a0:	4440      	add	r0, r8
 80018a2:	425b      	negs	r3, r3
 80018a4:	18c7      	adds	r7, r0, r3
 80018a6:	2601      	movs	r6, #1
 80018a8:	023b      	lsls	r3, r7, #8
 80018aa:	d400      	bmi.n	80018ae <__aeabi_dadd+0x3f6>
 80018ac:	e729      	b.n	8001702 <__aeabi_dadd+0x24a>
 80018ae:	2602      	movs	r6, #2
 80018b0:	4a9e      	ldr	r2, [pc, #632]	; (8001b2c <__aeabi_dadd+0x674>)
 80018b2:	0863      	lsrs	r3, r4, #1
 80018b4:	4017      	ands	r7, r2
 80018b6:	2201      	movs	r2, #1
 80018b8:	4014      	ands	r4, r2
 80018ba:	431c      	orrs	r4, r3
 80018bc:	07fb      	lsls	r3, r7, #31
 80018be:	431c      	orrs	r4, r3
 80018c0:	087f      	lsrs	r7, r7, #1
 80018c2:	e673      	b.n	80015ac <__aeabi_dadd+0xf4>
 80018c4:	4644      	mov	r4, r8
 80018c6:	3a20      	subs	r2, #32
 80018c8:	40d4      	lsrs	r4, r2
 80018ca:	4662      	mov	r2, ip
 80018cc:	2a20      	cmp	r2, #32
 80018ce:	d005      	beq.n	80018dc <__aeabi_dadd+0x424>
 80018d0:	4667      	mov	r7, ip
 80018d2:	2240      	movs	r2, #64	; 0x40
 80018d4:	1bd2      	subs	r2, r2, r7
 80018d6:	4647      	mov	r7, r8
 80018d8:	4097      	lsls	r7, r2
 80018da:	4339      	orrs	r1, r7
 80018dc:	1e4a      	subs	r2, r1, #1
 80018de:	4191      	sbcs	r1, r2
 80018e0:	4321      	orrs	r1, r4
 80018e2:	e635      	b.n	8001550 <__aeabi_dadd+0x98>
 80018e4:	4303      	orrs	r3, r0
 80018e6:	1e58      	subs	r0, r3, #1
 80018e8:	4183      	sbcs	r3, r0
 80018ea:	1acc      	subs	r4, r1, r3
 80018ec:	42a1      	cmp	r1, r4
 80018ee:	41bf      	sbcs	r7, r7
 80018f0:	4643      	mov	r3, r8
 80018f2:	427f      	negs	r7, r7
 80018f4:	4655      	mov	r5, sl
 80018f6:	464e      	mov	r6, r9
 80018f8:	1bdf      	subs	r7, r3, r7
 80018fa:	e62e      	b.n	800155a <__aeabi_dadd+0xa2>
 80018fc:	0002      	movs	r2, r0
 80018fe:	431a      	orrs	r2, r3
 8001900:	d100      	bne.n	8001904 <__aeabi_dadd+0x44c>
 8001902:	e0bd      	b.n	8001a80 <__aeabi_dadd+0x5c8>
 8001904:	4662      	mov	r2, ip
 8001906:	4664      	mov	r4, ip
 8001908:	3a01      	subs	r2, #1
 800190a:	2c01      	cmp	r4, #1
 800190c:	d100      	bne.n	8001910 <__aeabi_dadd+0x458>
 800190e:	e0e5      	b.n	8001adc <__aeabi_dadd+0x624>
 8001910:	4c85      	ldr	r4, [pc, #532]	; (8001b28 <__aeabi_dadd+0x670>)
 8001912:	45a4      	cmp	ip, r4
 8001914:	d058      	beq.n	80019c8 <__aeabi_dadd+0x510>
 8001916:	4694      	mov	ip, r2
 8001918:	e749      	b.n	80017ae <__aeabi_dadd+0x2f6>
 800191a:	4664      	mov	r4, ip
 800191c:	2220      	movs	r2, #32
 800191e:	1b12      	subs	r2, r2, r4
 8001920:	4644      	mov	r4, r8
 8001922:	4094      	lsls	r4, r2
 8001924:	000f      	movs	r7, r1
 8001926:	46a1      	mov	r9, r4
 8001928:	4664      	mov	r4, ip
 800192a:	4091      	lsls	r1, r2
 800192c:	40e7      	lsrs	r7, r4
 800192e:	464c      	mov	r4, r9
 8001930:	1e4a      	subs	r2, r1, #1
 8001932:	4191      	sbcs	r1, r2
 8001934:	433c      	orrs	r4, r7
 8001936:	4642      	mov	r2, r8
 8001938:	430c      	orrs	r4, r1
 800193a:	4661      	mov	r1, ip
 800193c:	40ca      	lsrs	r2, r1
 800193e:	1880      	adds	r0, r0, r2
 8001940:	e6f4      	b.n	800172c <__aeabi_dadd+0x274>
 8001942:	4c79      	ldr	r4, [pc, #484]	; (8001b28 <__aeabi_dadd+0x670>)
 8001944:	42a2      	cmp	r2, r4
 8001946:	d100      	bne.n	800194a <__aeabi_dadd+0x492>
 8001948:	e6fd      	b.n	8001746 <__aeabi_dadd+0x28e>
 800194a:	1859      	adds	r1, r3, r1
 800194c:	4299      	cmp	r1, r3
 800194e:	419b      	sbcs	r3, r3
 8001950:	4440      	add	r0, r8
 8001952:	425f      	negs	r7, r3
 8001954:	19c7      	adds	r7, r0, r7
 8001956:	07fc      	lsls	r4, r7, #31
 8001958:	0849      	lsrs	r1, r1, #1
 800195a:	0016      	movs	r6, r2
 800195c:	430c      	orrs	r4, r1
 800195e:	087f      	lsrs	r7, r7, #1
 8001960:	e6cf      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001962:	1acc      	subs	r4, r1, r3
 8001964:	42a1      	cmp	r1, r4
 8001966:	41bf      	sbcs	r7, r7
 8001968:	4643      	mov	r3, r8
 800196a:	427f      	negs	r7, r7
 800196c:	1a18      	subs	r0, r3, r0
 800196e:	4655      	mov	r5, sl
 8001970:	1bc7      	subs	r7, r0, r7
 8001972:	e5f7      	b.n	8001564 <__aeabi_dadd+0xac>
 8001974:	08c9      	lsrs	r1, r1, #3
 8001976:	077b      	lsls	r3, r7, #29
 8001978:	4655      	mov	r5, sl
 800197a:	430b      	orrs	r3, r1
 800197c:	08f8      	lsrs	r0, r7, #3
 800197e:	e6c8      	b.n	8001712 <__aeabi_dadd+0x25a>
 8001980:	2c00      	cmp	r4, #0
 8001982:	d000      	beq.n	8001986 <__aeabi_dadd+0x4ce>
 8001984:	e081      	b.n	8001a8a <__aeabi_dadd+0x5d2>
 8001986:	4643      	mov	r3, r8
 8001988:	430b      	orrs	r3, r1
 800198a:	d115      	bne.n	80019b8 <__aeabi_dadd+0x500>
 800198c:	2080      	movs	r0, #128	; 0x80
 800198e:	2500      	movs	r5, #0
 8001990:	0300      	lsls	r0, r0, #12
 8001992:	e6e3      	b.n	800175c <__aeabi_dadd+0x2a4>
 8001994:	1a5c      	subs	r4, r3, r1
 8001996:	42a3      	cmp	r3, r4
 8001998:	419b      	sbcs	r3, r3
 800199a:	1bc7      	subs	r7, r0, r7
 800199c:	425b      	negs	r3, r3
 800199e:	2601      	movs	r6, #1
 80019a0:	1aff      	subs	r7, r7, r3
 80019a2:	e5da      	b.n	800155a <__aeabi_dadd+0xa2>
 80019a4:	0742      	lsls	r2, r0, #29
 80019a6:	08db      	lsrs	r3, r3, #3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	08c0      	lsrs	r0, r0, #3
 80019ac:	e6d2      	b.n	8001754 <__aeabi_dadd+0x29c>
 80019ae:	0742      	lsls	r2, r0, #29
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	08c0      	lsrs	r0, r0, #3
 80019b6:	e6ac      	b.n	8001712 <__aeabi_dadd+0x25a>
 80019b8:	4643      	mov	r3, r8
 80019ba:	4642      	mov	r2, r8
 80019bc:	08c9      	lsrs	r1, r1, #3
 80019be:	075b      	lsls	r3, r3, #29
 80019c0:	4655      	mov	r5, sl
 80019c2:	430b      	orrs	r3, r1
 80019c4:	08d0      	lsrs	r0, r2, #3
 80019c6:	e6c5      	b.n	8001754 <__aeabi_dadd+0x29c>
 80019c8:	4643      	mov	r3, r8
 80019ca:	4642      	mov	r2, r8
 80019cc:	075b      	lsls	r3, r3, #29
 80019ce:	08c9      	lsrs	r1, r1, #3
 80019d0:	430b      	orrs	r3, r1
 80019d2:	08d0      	lsrs	r0, r2, #3
 80019d4:	e6be      	b.n	8001754 <__aeabi_dadd+0x29c>
 80019d6:	4303      	orrs	r3, r0
 80019d8:	001c      	movs	r4, r3
 80019da:	1e63      	subs	r3, r4, #1
 80019dc:	419c      	sbcs	r4, r3
 80019de:	e6fc      	b.n	80017da <__aeabi_dadd+0x322>
 80019e0:	0002      	movs	r2, r0
 80019e2:	3c20      	subs	r4, #32
 80019e4:	40e2      	lsrs	r2, r4
 80019e6:	0014      	movs	r4, r2
 80019e8:	4662      	mov	r2, ip
 80019ea:	2a20      	cmp	r2, #32
 80019ec:	d003      	beq.n	80019f6 <__aeabi_dadd+0x53e>
 80019ee:	2540      	movs	r5, #64	; 0x40
 80019f0:	1aad      	subs	r5, r5, r2
 80019f2:	40a8      	lsls	r0, r5
 80019f4:	4303      	orrs	r3, r0
 80019f6:	1e58      	subs	r0, r3, #1
 80019f8:	4183      	sbcs	r3, r0
 80019fa:	4323      	orrs	r3, r4
 80019fc:	e775      	b.n	80018ea <__aeabi_dadd+0x432>
 80019fe:	2a00      	cmp	r2, #0
 8001a00:	d0e2      	beq.n	80019c8 <__aeabi_dadd+0x510>
 8001a02:	003a      	movs	r2, r7
 8001a04:	430a      	orrs	r2, r1
 8001a06:	d0cd      	beq.n	80019a4 <__aeabi_dadd+0x4ec>
 8001a08:	0742      	lsls	r2, r0, #29
 8001a0a:	08db      	lsrs	r3, r3, #3
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	08c0      	lsrs	r0, r0, #3
 8001a12:	0312      	lsls	r2, r2, #12
 8001a14:	4210      	tst	r0, r2
 8001a16:	d006      	beq.n	8001a26 <__aeabi_dadd+0x56e>
 8001a18:	08fc      	lsrs	r4, r7, #3
 8001a1a:	4214      	tst	r4, r2
 8001a1c:	d103      	bne.n	8001a26 <__aeabi_dadd+0x56e>
 8001a1e:	0020      	movs	r0, r4
 8001a20:	08cb      	lsrs	r3, r1, #3
 8001a22:	077a      	lsls	r2, r7, #29
 8001a24:	4313      	orrs	r3, r2
 8001a26:	0f5a      	lsrs	r2, r3, #29
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	0752      	lsls	r2, r2, #29
 8001a2c:	08db      	lsrs	r3, r3, #3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	e690      	b.n	8001754 <__aeabi_dadd+0x29c>
 8001a32:	4643      	mov	r3, r8
 8001a34:	430b      	orrs	r3, r1
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dadd+0x582>
 8001a38:	e709      	b.n	800184e <__aeabi_dadd+0x396>
 8001a3a:	4643      	mov	r3, r8
 8001a3c:	4642      	mov	r2, r8
 8001a3e:	08c9      	lsrs	r1, r1, #3
 8001a40:	075b      	lsls	r3, r3, #29
 8001a42:	4655      	mov	r5, sl
 8001a44:	430b      	orrs	r3, r1
 8001a46:	08d0      	lsrs	r0, r2, #3
 8001a48:	e666      	b.n	8001718 <__aeabi_dadd+0x260>
 8001a4a:	1acc      	subs	r4, r1, r3
 8001a4c:	42a1      	cmp	r1, r4
 8001a4e:	4189      	sbcs	r1, r1
 8001a50:	1a3f      	subs	r7, r7, r0
 8001a52:	4249      	negs	r1, r1
 8001a54:	4655      	mov	r5, sl
 8001a56:	2601      	movs	r6, #1
 8001a58:	1a7f      	subs	r7, r7, r1
 8001a5a:	e57e      	b.n	800155a <__aeabi_dadd+0xa2>
 8001a5c:	4642      	mov	r2, r8
 8001a5e:	1a5c      	subs	r4, r3, r1
 8001a60:	1a87      	subs	r7, r0, r2
 8001a62:	42a3      	cmp	r3, r4
 8001a64:	4192      	sbcs	r2, r2
 8001a66:	4252      	negs	r2, r2
 8001a68:	1abf      	subs	r7, r7, r2
 8001a6a:	023a      	lsls	r2, r7, #8
 8001a6c:	d53d      	bpl.n	8001aea <__aeabi_dadd+0x632>
 8001a6e:	1acc      	subs	r4, r1, r3
 8001a70:	42a1      	cmp	r1, r4
 8001a72:	4189      	sbcs	r1, r1
 8001a74:	4643      	mov	r3, r8
 8001a76:	4249      	negs	r1, r1
 8001a78:	1a1f      	subs	r7, r3, r0
 8001a7a:	4655      	mov	r5, sl
 8001a7c:	1a7f      	subs	r7, r7, r1
 8001a7e:	e595      	b.n	80015ac <__aeabi_dadd+0xf4>
 8001a80:	077b      	lsls	r3, r7, #29
 8001a82:	08c9      	lsrs	r1, r1, #3
 8001a84:	430b      	orrs	r3, r1
 8001a86:	08f8      	lsrs	r0, r7, #3
 8001a88:	e643      	b.n	8001712 <__aeabi_dadd+0x25a>
 8001a8a:	4644      	mov	r4, r8
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	430c      	orrs	r4, r1
 8001a90:	d130      	bne.n	8001af4 <__aeabi_dadd+0x63c>
 8001a92:	0742      	lsls	r2, r0, #29
 8001a94:	4313      	orrs	r3, r2
 8001a96:	08c0      	lsrs	r0, r0, #3
 8001a98:	e65c      	b.n	8001754 <__aeabi_dadd+0x29c>
 8001a9a:	077b      	lsls	r3, r7, #29
 8001a9c:	08c9      	lsrs	r1, r1, #3
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	08f8      	lsrs	r0, r7, #3
 8001aa2:	e639      	b.n	8001718 <__aeabi_dadd+0x260>
 8001aa4:	185c      	adds	r4, r3, r1
 8001aa6:	429c      	cmp	r4, r3
 8001aa8:	419b      	sbcs	r3, r3
 8001aaa:	4440      	add	r0, r8
 8001aac:	425b      	negs	r3, r3
 8001aae:	18c7      	adds	r7, r0, r3
 8001ab0:	023b      	lsls	r3, r7, #8
 8001ab2:	d400      	bmi.n	8001ab6 <__aeabi_dadd+0x5fe>
 8001ab4:	e625      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <__aeabi_dadd+0x674>)
 8001ab8:	2601      	movs	r6, #1
 8001aba:	401f      	ands	r7, r3
 8001abc:	e621      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001abe:	0004      	movs	r4, r0
 8001ac0:	3a20      	subs	r2, #32
 8001ac2:	40d4      	lsrs	r4, r2
 8001ac4:	4662      	mov	r2, ip
 8001ac6:	2a20      	cmp	r2, #32
 8001ac8:	d004      	beq.n	8001ad4 <__aeabi_dadd+0x61c>
 8001aca:	2240      	movs	r2, #64	; 0x40
 8001acc:	4666      	mov	r6, ip
 8001ace:	1b92      	subs	r2, r2, r6
 8001ad0:	4090      	lsls	r0, r2
 8001ad2:	4303      	orrs	r3, r0
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	4193      	sbcs	r3, r2
 8001ad8:	431c      	orrs	r4, r3
 8001ada:	e67e      	b.n	80017da <__aeabi_dadd+0x322>
 8001adc:	185c      	adds	r4, r3, r1
 8001ade:	428c      	cmp	r4, r1
 8001ae0:	4189      	sbcs	r1, r1
 8001ae2:	4440      	add	r0, r8
 8001ae4:	4249      	negs	r1, r1
 8001ae6:	1847      	adds	r7, r0, r1
 8001ae8:	e6dd      	b.n	80018a6 <__aeabi_dadd+0x3ee>
 8001aea:	0023      	movs	r3, r4
 8001aec:	433b      	orrs	r3, r7
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dadd+0x63a>
 8001af0:	e6ad      	b.n	800184e <__aeabi_dadd+0x396>
 8001af2:	e606      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001af4:	0744      	lsls	r4, r0, #29
 8001af6:	4323      	orrs	r3, r4
 8001af8:	2480      	movs	r4, #128	; 0x80
 8001afa:	08c0      	lsrs	r0, r0, #3
 8001afc:	0324      	lsls	r4, r4, #12
 8001afe:	4220      	tst	r0, r4
 8001b00:	d008      	beq.n	8001b14 <__aeabi_dadd+0x65c>
 8001b02:	4642      	mov	r2, r8
 8001b04:	08d6      	lsrs	r6, r2, #3
 8001b06:	4226      	tst	r6, r4
 8001b08:	d104      	bne.n	8001b14 <__aeabi_dadd+0x65c>
 8001b0a:	4655      	mov	r5, sl
 8001b0c:	0030      	movs	r0, r6
 8001b0e:	08cb      	lsrs	r3, r1, #3
 8001b10:	0751      	lsls	r1, r2, #29
 8001b12:	430b      	orrs	r3, r1
 8001b14:	0f5a      	lsrs	r2, r3, #29
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	0752      	lsls	r2, r2, #29
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	e619      	b.n	8001754 <__aeabi_dadd+0x29c>
 8001b20:	2300      	movs	r3, #0
 8001b22:	4a01      	ldr	r2, [pc, #4]	; (8001b28 <__aeabi_dadd+0x670>)
 8001b24:	001f      	movs	r7, r3
 8001b26:	e55e      	b.n	80015e6 <__aeabi_dadd+0x12e>
 8001b28:	000007ff 	.word	0x000007ff
 8001b2c:	ff7fffff 	.word	0xff7fffff

08001b30 <__aeabi_ddiv>:
 8001b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b32:	4657      	mov	r7, sl
 8001b34:	464e      	mov	r6, r9
 8001b36:	4645      	mov	r5, r8
 8001b38:	46de      	mov	lr, fp
 8001b3a:	b5e0      	push	{r5, r6, r7, lr}
 8001b3c:	4681      	mov	r9, r0
 8001b3e:	0005      	movs	r5, r0
 8001b40:	030c      	lsls	r4, r1, #12
 8001b42:	0048      	lsls	r0, r1, #1
 8001b44:	4692      	mov	sl, r2
 8001b46:	001f      	movs	r7, r3
 8001b48:	b085      	sub	sp, #20
 8001b4a:	0b24      	lsrs	r4, r4, #12
 8001b4c:	0d40      	lsrs	r0, r0, #21
 8001b4e:	0fce      	lsrs	r6, r1, #31
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d100      	bne.n	8001b56 <__aeabi_ddiv+0x26>
 8001b54:	e156      	b.n	8001e04 <__aeabi_ddiv+0x2d4>
 8001b56:	4bd4      	ldr	r3, [pc, #848]	; (8001ea8 <__aeabi_ddiv+0x378>)
 8001b58:	4298      	cmp	r0, r3
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_ddiv+0x2e>
 8001b5c:	e172      	b.n	8001e44 <__aeabi_ddiv+0x314>
 8001b5e:	0f6b      	lsrs	r3, r5, #29
 8001b60:	00e4      	lsls	r4, r4, #3
 8001b62:	431c      	orrs	r4, r3
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	041b      	lsls	r3, r3, #16
 8001b68:	4323      	orrs	r3, r4
 8001b6a:	4698      	mov	r8, r3
 8001b6c:	4bcf      	ldr	r3, [pc, #828]	; (8001eac <__aeabi_ddiv+0x37c>)
 8001b6e:	00ed      	lsls	r5, r5, #3
 8001b70:	469b      	mov	fp, r3
 8001b72:	2300      	movs	r3, #0
 8001b74:	4699      	mov	r9, r3
 8001b76:	4483      	add	fp, r0
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	033c      	lsls	r4, r7, #12
 8001b7c:	007b      	lsls	r3, r7, #1
 8001b7e:	4650      	mov	r0, sl
 8001b80:	0b24      	lsrs	r4, r4, #12
 8001b82:	0d5b      	lsrs	r3, r3, #21
 8001b84:	0fff      	lsrs	r7, r7, #31
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d100      	bne.n	8001b8c <__aeabi_ddiv+0x5c>
 8001b8a:	e11f      	b.n	8001dcc <__aeabi_ddiv+0x29c>
 8001b8c:	4ac6      	ldr	r2, [pc, #792]	; (8001ea8 <__aeabi_ddiv+0x378>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d100      	bne.n	8001b94 <__aeabi_ddiv+0x64>
 8001b92:	e162      	b.n	8001e5a <__aeabi_ddiv+0x32a>
 8001b94:	49c5      	ldr	r1, [pc, #788]	; (8001eac <__aeabi_ddiv+0x37c>)
 8001b96:	0f42      	lsrs	r2, r0, #29
 8001b98:	468c      	mov	ip, r1
 8001b9a:	00e4      	lsls	r4, r4, #3
 8001b9c:	4659      	mov	r1, fp
 8001b9e:	4314      	orrs	r4, r2
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	4463      	add	r3, ip
 8001ba4:	0412      	lsls	r2, r2, #16
 8001ba6:	1acb      	subs	r3, r1, r3
 8001ba8:	4314      	orrs	r4, r2
 8001baa:	469b      	mov	fp, r3
 8001bac:	00c2      	lsls	r2, r0, #3
 8001bae:	2000      	movs	r0, #0
 8001bb0:	0033      	movs	r3, r6
 8001bb2:	407b      	eors	r3, r7
 8001bb4:	469a      	mov	sl, r3
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d827      	bhi.n	8001c0c <__aeabi_ddiv+0xdc>
 8001bbc:	49bc      	ldr	r1, [pc, #752]	; (8001eb0 <__aeabi_ddiv+0x380>)
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	58cb      	ldr	r3, [r1, r3]
 8001bc2:	469f      	mov	pc, r3
 8001bc4:	46b2      	mov	sl, r6
 8001bc6:	9b00      	ldr	r3, [sp, #0]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d016      	beq.n	8001bfa <__aeabi_ddiv+0xca>
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_ddiv+0xa2>
 8001bd0:	e28e      	b.n	80020f0 <__aeabi_ddiv+0x5c0>
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d000      	beq.n	8001bd8 <__aeabi_ddiv+0xa8>
 8001bd6:	e0d9      	b.n	8001d8c <__aeabi_ddiv+0x25c>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2400      	movs	r4, #0
 8001bdc:	2500      	movs	r5, #0
 8001bde:	4652      	mov	r2, sl
 8001be0:	051b      	lsls	r3, r3, #20
 8001be2:	4323      	orrs	r3, r4
 8001be4:	07d2      	lsls	r2, r2, #31
 8001be6:	4313      	orrs	r3, r2
 8001be8:	0028      	movs	r0, r5
 8001bea:	0019      	movs	r1, r3
 8001bec:	b005      	add	sp, #20
 8001bee:	bcf0      	pop	{r4, r5, r6, r7}
 8001bf0:	46bb      	mov	fp, r7
 8001bf2:	46b2      	mov	sl, r6
 8001bf4:	46a9      	mov	r9, r5
 8001bf6:	46a0      	mov	r8, r4
 8001bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfa:	2400      	movs	r4, #0
 8001bfc:	2500      	movs	r5, #0
 8001bfe:	4baa      	ldr	r3, [pc, #680]	; (8001ea8 <__aeabi_ddiv+0x378>)
 8001c00:	e7ed      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001c02:	46ba      	mov	sl, r7
 8001c04:	46a0      	mov	r8, r4
 8001c06:	0015      	movs	r5, r2
 8001c08:	9000      	str	r0, [sp, #0]
 8001c0a:	e7dc      	b.n	8001bc6 <__aeabi_ddiv+0x96>
 8001c0c:	4544      	cmp	r4, r8
 8001c0e:	d200      	bcs.n	8001c12 <__aeabi_ddiv+0xe2>
 8001c10:	e1c7      	b.n	8001fa2 <__aeabi_ddiv+0x472>
 8001c12:	d100      	bne.n	8001c16 <__aeabi_ddiv+0xe6>
 8001c14:	e1c2      	b.n	8001f9c <__aeabi_ddiv+0x46c>
 8001c16:	2301      	movs	r3, #1
 8001c18:	425b      	negs	r3, r3
 8001c1a:	469c      	mov	ip, r3
 8001c1c:	002e      	movs	r6, r5
 8001c1e:	4640      	mov	r0, r8
 8001c20:	2500      	movs	r5, #0
 8001c22:	44e3      	add	fp, ip
 8001c24:	0223      	lsls	r3, r4, #8
 8001c26:	0e14      	lsrs	r4, r2, #24
 8001c28:	431c      	orrs	r4, r3
 8001c2a:	0c1b      	lsrs	r3, r3, #16
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	0423      	lsls	r3, r4, #16
 8001c30:	0c1f      	lsrs	r7, r3, #16
 8001c32:	0212      	lsls	r2, r2, #8
 8001c34:	4649      	mov	r1, r9
 8001c36:	9200      	str	r2, [sp, #0]
 8001c38:	9701      	str	r7, [sp, #4]
 8001c3a:	f7fe fb07 	bl	800024c <__aeabi_uidivmod>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	437a      	muls	r2, r7
 8001c42:	040b      	lsls	r3, r1, #16
 8001c44:	0c31      	lsrs	r1, r6, #16
 8001c46:	4680      	mov	r8, r0
 8001c48:	4319      	orrs	r1, r3
 8001c4a:	428a      	cmp	r2, r1
 8001c4c:	d907      	bls.n	8001c5e <__aeabi_ddiv+0x12e>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	425b      	negs	r3, r3
 8001c52:	469c      	mov	ip, r3
 8001c54:	1909      	adds	r1, r1, r4
 8001c56:	44e0      	add	r8, ip
 8001c58:	428c      	cmp	r4, r1
 8001c5a:	d800      	bhi.n	8001c5e <__aeabi_ddiv+0x12e>
 8001c5c:	e207      	b.n	800206e <__aeabi_ddiv+0x53e>
 8001c5e:	1a88      	subs	r0, r1, r2
 8001c60:	4649      	mov	r1, r9
 8001c62:	f7fe faf3 	bl	800024c <__aeabi_uidivmod>
 8001c66:	0409      	lsls	r1, r1, #16
 8001c68:	468c      	mov	ip, r1
 8001c6a:	0431      	lsls	r1, r6, #16
 8001c6c:	4666      	mov	r6, ip
 8001c6e:	9a01      	ldr	r2, [sp, #4]
 8001c70:	0c09      	lsrs	r1, r1, #16
 8001c72:	4342      	muls	r2, r0
 8001c74:	0003      	movs	r3, r0
 8001c76:	4331      	orrs	r1, r6
 8001c78:	428a      	cmp	r2, r1
 8001c7a:	d904      	bls.n	8001c86 <__aeabi_ddiv+0x156>
 8001c7c:	1909      	adds	r1, r1, r4
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	428c      	cmp	r4, r1
 8001c82:	d800      	bhi.n	8001c86 <__aeabi_ddiv+0x156>
 8001c84:	e1ed      	b.n	8002062 <__aeabi_ddiv+0x532>
 8001c86:	1a88      	subs	r0, r1, r2
 8001c88:	4642      	mov	r2, r8
 8001c8a:	0412      	lsls	r2, r2, #16
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	4690      	mov	r8, r2
 8001c90:	4641      	mov	r1, r8
 8001c92:	9b00      	ldr	r3, [sp, #0]
 8001c94:	040e      	lsls	r6, r1, #16
 8001c96:	0c1b      	lsrs	r3, r3, #16
 8001c98:	001f      	movs	r7, r3
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	9b00      	ldr	r3, [sp, #0]
 8001c9e:	0c36      	lsrs	r6, r6, #16
 8001ca0:	041b      	lsls	r3, r3, #16
 8001ca2:	0c19      	lsrs	r1, r3, #16
 8001ca4:	000b      	movs	r3, r1
 8001ca6:	4373      	muls	r3, r6
 8001ca8:	0c12      	lsrs	r2, r2, #16
 8001caa:	437e      	muls	r6, r7
 8001cac:	9103      	str	r1, [sp, #12]
 8001cae:	4351      	muls	r1, r2
 8001cb0:	437a      	muls	r2, r7
 8001cb2:	0c1f      	lsrs	r7, r3, #16
 8001cb4:	46bc      	mov	ip, r7
 8001cb6:	1876      	adds	r6, r6, r1
 8001cb8:	4466      	add	r6, ip
 8001cba:	42b1      	cmp	r1, r6
 8001cbc:	d903      	bls.n	8001cc6 <__aeabi_ddiv+0x196>
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	0249      	lsls	r1, r1, #9
 8001cc2:	468c      	mov	ip, r1
 8001cc4:	4462      	add	r2, ip
 8001cc6:	0c31      	lsrs	r1, r6, #16
 8001cc8:	188a      	adds	r2, r1, r2
 8001cca:	0431      	lsls	r1, r6, #16
 8001ccc:	041e      	lsls	r6, r3, #16
 8001cce:	0c36      	lsrs	r6, r6, #16
 8001cd0:	198e      	adds	r6, r1, r6
 8001cd2:	4290      	cmp	r0, r2
 8001cd4:	d302      	bcc.n	8001cdc <__aeabi_ddiv+0x1ac>
 8001cd6:	d112      	bne.n	8001cfe <__aeabi_ddiv+0x1ce>
 8001cd8:	42b5      	cmp	r5, r6
 8001cda:	d210      	bcs.n	8001cfe <__aeabi_ddiv+0x1ce>
 8001cdc:	4643      	mov	r3, r8
 8001cde:	1e59      	subs	r1, r3, #1
 8001ce0:	9b00      	ldr	r3, [sp, #0]
 8001ce2:	469c      	mov	ip, r3
 8001ce4:	4465      	add	r5, ip
 8001ce6:	001f      	movs	r7, r3
 8001ce8:	429d      	cmp	r5, r3
 8001cea:	419b      	sbcs	r3, r3
 8001cec:	425b      	negs	r3, r3
 8001cee:	191b      	adds	r3, r3, r4
 8001cf0:	18c0      	adds	r0, r0, r3
 8001cf2:	4284      	cmp	r4, r0
 8001cf4:	d200      	bcs.n	8001cf8 <__aeabi_ddiv+0x1c8>
 8001cf6:	e1a0      	b.n	800203a <__aeabi_ddiv+0x50a>
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_ddiv+0x1cc>
 8001cfa:	e19b      	b.n	8002034 <__aeabi_ddiv+0x504>
 8001cfc:	4688      	mov	r8, r1
 8001cfe:	1bae      	subs	r6, r5, r6
 8001d00:	42b5      	cmp	r5, r6
 8001d02:	41ad      	sbcs	r5, r5
 8001d04:	1a80      	subs	r0, r0, r2
 8001d06:	426d      	negs	r5, r5
 8001d08:	1b40      	subs	r0, r0, r5
 8001d0a:	4284      	cmp	r4, r0
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_ddiv+0x1e0>
 8001d0e:	e1d5      	b.n	80020bc <__aeabi_ddiv+0x58c>
 8001d10:	4649      	mov	r1, r9
 8001d12:	f7fe fa9b 	bl	800024c <__aeabi_uidivmod>
 8001d16:	9a01      	ldr	r2, [sp, #4]
 8001d18:	040b      	lsls	r3, r1, #16
 8001d1a:	4342      	muls	r2, r0
 8001d1c:	0c31      	lsrs	r1, r6, #16
 8001d1e:	0005      	movs	r5, r0
 8001d20:	4319      	orrs	r1, r3
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d900      	bls.n	8001d28 <__aeabi_ddiv+0x1f8>
 8001d26:	e16c      	b.n	8002002 <__aeabi_ddiv+0x4d2>
 8001d28:	1a88      	subs	r0, r1, r2
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	f7fe fa8e 	bl	800024c <__aeabi_uidivmod>
 8001d30:	9a01      	ldr	r2, [sp, #4]
 8001d32:	0436      	lsls	r6, r6, #16
 8001d34:	4342      	muls	r2, r0
 8001d36:	0409      	lsls	r1, r1, #16
 8001d38:	0c36      	lsrs	r6, r6, #16
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	430e      	orrs	r6, r1
 8001d3e:	42b2      	cmp	r2, r6
 8001d40:	d900      	bls.n	8001d44 <__aeabi_ddiv+0x214>
 8001d42:	e153      	b.n	8001fec <__aeabi_ddiv+0x4bc>
 8001d44:	9803      	ldr	r0, [sp, #12]
 8001d46:	1ab6      	subs	r6, r6, r2
 8001d48:	0002      	movs	r2, r0
 8001d4a:	042d      	lsls	r5, r5, #16
 8001d4c:	431d      	orrs	r5, r3
 8001d4e:	9f02      	ldr	r7, [sp, #8]
 8001d50:	042b      	lsls	r3, r5, #16
 8001d52:	0c1b      	lsrs	r3, r3, #16
 8001d54:	435a      	muls	r2, r3
 8001d56:	437b      	muls	r3, r7
 8001d58:	469c      	mov	ip, r3
 8001d5a:	0c29      	lsrs	r1, r5, #16
 8001d5c:	4348      	muls	r0, r1
 8001d5e:	0c13      	lsrs	r3, r2, #16
 8001d60:	4484      	add	ip, r0
 8001d62:	4463      	add	r3, ip
 8001d64:	4379      	muls	r1, r7
 8001d66:	4298      	cmp	r0, r3
 8001d68:	d903      	bls.n	8001d72 <__aeabi_ddiv+0x242>
 8001d6a:	2080      	movs	r0, #128	; 0x80
 8001d6c:	0240      	lsls	r0, r0, #9
 8001d6e:	4684      	mov	ip, r0
 8001d70:	4461      	add	r1, ip
 8001d72:	0c18      	lsrs	r0, r3, #16
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	041b      	lsls	r3, r3, #16
 8001d78:	0c12      	lsrs	r2, r2, #16
 8001d7a:	1841      	adds	r1, r0, r1
 8001d7c:	189b      	adds	r3, r3, r2
 8001d7e:	428e      	cmp	r6, r1
 8001d80:	d200      	bcs.n	8001d84 <__aeabi_ddiv+0x254>
 8001d82:	e0ff      	b.n	8001f84 <__aeabi_ddiv+0x454>
 8001d84:	d100      	bne.n	8001d88 <__aeabi_ddiv+0x258>
 8001d86:	e0fa      	b.n	8001f7e <__aeabi_ddiv+0x44e>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	431d      	orrs	r5, r3
 8001d8c:	4a49      	ldr	r2, [pc, #292]	; (8001eb4 <__aeabi_ddiv+0x384>)
 8001d8e:	445a      	add	r2, fp
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	dc00      	bgt.n	8001d96 <__aeabi_ddiv+0x266>
 8001d94:	e0aa      	b.n	8001eec <__aeabi_ddiv+0x3bc>
 8001d96:	076b      	lsls	r3, r5, #29
 8001d98:	d000      	beq.n	8001d9c <__aeabi_ddiv+0x26c>
 8001d9a:	e13d      	b.n	8002018 <__aeabi_ddiv+0x4e8>
 8001d9c:	08ed      	lsrs	r5, r5, #3
 8001d9e:	4643      	mov	r3, r8
 8001da0:	01db      	lsls	r3, r3, #7
 8001da2:	d506      	bpl.n	8001db2 <__aeabi_ddiv+0x282>
 8001da4:	4642      	mov	r2, r8
 8001da6:	4b44      	ldr	r3, [pc, #272]	; (8001eb8 <__aeabi_ddiv+0x388>)
 8001da8:	401a      	ands	r2, r3
 8001daa:	4690      	mov	r8, r2
 8001dac:	2280      	movs	r2, #128	; 0x80
 8001dae:	00d2      	lsls	r2, r2, #3
 8001db0:	445a      	add	r2, fp
 8001db2:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <__aeabi_ddiv+0x38c>)
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dd00      	ble.n	8001dba <__aeabi_ddiv+0x28a>
 8001db8:	e71f      	b.n	8001bfa <__aeabi_ddiv+0xca>
 8001dba:	4643      	mov	r3, r8
 8001dbc:	075b      	lsls	r3, r3, #29
 8001dbe:	431d      	orrs	r5, r3
 8001dc0:	4643      	mov	r3, r8
 8001dc2:	0552      	lsls	r2, r2, #21
 8001dc4:	025c      	lsls	r4, r3, #9
 8001dc6:	0b24      	lsrs	r4, r4, #12
 8001dc8:	0d53      	lsrs	r3, r2, #21
 8001dca:	e708      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001dcc:	4652      	mov	r2, sl
 8001dce:	4322      	orrs	r2, r4
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_ddiv+0x2a4>
 8001dd2:	e07b      	b.n	8001ecc <__aeabi_ddiv+0x39c>
 8001dd4:	2c00      	cmp	r4, #0
 8001dd6:	d100      	bne.n	8001dda <__aeabi_ddiv+0x2aa>
 8001dd8:	e0fa      	b.n	8001fd0 <__aeabi_ddiv+0x4a0>
 8001dda:	0020      	movs	r0, r4
 8001ddc:	f001 fa22 	bl	8003224 <__clzsi2>
 8001de0:	0002      	movs	r2, r0
 8001de2:	3a0b      	subs	r2, #11
 8001de4:	231d      	movs	r3, #29
 8001de6:	0001      	movs	r1, r0
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	4652      	mov	r2, sl
 8001dec:	3908      	subs	r1, #8
 8001dee:	40da      	lsrs	r2, r3
 8001df0:	408c      	lsls	r4, r1
 8001df2:	4314      	orrs	r4, r2
 8001df4:	4652      	mov	r2, sl
 8001df6:	408a      	lsls	r2, r1
 8001df8:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <__aeabi_ddiv+0x390>)
 8001dfa:	4458      	add	r0, fp
 8001dfc:	469b      	mov	fp, r3
 8001dfe:	4483      	add	fp, r0
 8001e00:	2000      	movs	r0, #0
 8001e02:	e6d5      	b.n	8001bb0 <__aeabi_ddiv+0x80>
 8001e04:	464b      	mov	r3, r9
 8001e06:	4323      	orrs	r3, r4
 8001e08:	4698      	mov	r8, r3
 8001e0a:	d044      	beq.n	8001e96 <__aeabi_ddiv+0x366>
 8001e0c:	2c00      	cmp	r4, #0
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_ddiv+0x2e2>
 8001e10:	e0ce      	b.n	8001fb0 <__aeabi_ddiv+0x480>
 8001e12:	0020      	movs	r0, r4
 8001e14:	f001 fa06 	bl	8003224 <__clzsi2>
 8001e18:	0001      	movs	r1, r0
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	390b      	subs	r1, #11
 8001e1e:	231d      	movs	r3, #29
 8001e20:	1a5b      	subs	r3, r3, r1
 8001e22:	4649      	mov	r1, r9
 8001e24:	0010      	movs	r0, r2
 8001e26:	40d9      	lsrs	r1, r3
 8001e28:	3808      	subs	r0, #8
 8001e2a:	4084      	lsls	r4, r0
 8001e2c:	000b      	movs	r3, r1
 8001e2e:	464d      	mov	r5, r9
 8001e30:	4323      	orrs	r3, r4
 8001e32:	4698      	mov	r8, r3
 8001e34:	4085      	lsls	r5, r0
 8001e36:	4823      	ldr	r0, [pc, #140]	; (8001ec4 <__aeabi_ddiv+0x394>)
 8001e38:	1a83      	subs	r3, r0, r2
 8001e3a:	469b      	mov	fp, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	4699      	mov	r9, r3
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	e69a      	b.n	8001b7a <__aeabi_ddiv+0x4a>
 8001e44:	464b      	mov	r3, r9
 8001e46:	4323      	orrs	r3, r4
 8001e48:	4698      	mov	r8, r3
 8001e4a:	d11d      	bne.n	8001e88 <__aeabi_ddiv+0x358>
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	4699      	mov	r9, r3
 8001e50:	3b06      	subs	r3, #6
 8001e52:	2500      	movs	r5, #0
 8001e54:	4683      	mov	fp, r0
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	e68f      	b.n	8001b7a <__aeabi_ddiv+0x4a>
 8001e5a:	4652      	mov	r2, sl
 8001e5c:	4322      	orrs	r2, r4
 8001e5e:	d109      	bne.n	8001e74 <__aeabi_ddiv+0x344>
 8001e60:	2302      	movs	r3, #2
 8001e62:	4649      	mov	r1, r9
 8001e64:	4319      	orrs	r1, r3
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <__aeabi_ddiv+0x398>)
 8001e68:	4689      	mov	r9, r1
 8001e6a:	469c      	mov	ip, r3
 8001e6c:	2400      	movs	r4, #0
 8001e6e:	2002      	movs	r0, #2
 8001e70:	44e3      	add	fp, ip
 8001e72:	e69d      	b.n	8001bb0 <__aeabi_ddiv+0x80>
 8001e74:	2303      	movs	r3, #3
 8001e76:	464a      	mov	r2, r9
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <__aeabi_ddiv+0x398>)
 8001e7c:	4691      	mov	r9, r2
 8001e7e:	469c      	mov	ip, r3
 8001e80:	4652      	mov	r2, sl
 8001e82:	2003      	movs	r0, #3
 8001e84:	44e3      	add	fp, ip
 8001e86:	e693      	b.n	8001bb0 <__aeabi_ddiv+0x80>
 8001e88:	230c      	movs	r3, #12
 8001e8a:	4699      	mov	r9, r3
 8001e8c:	3b09      	subs	r3, #9
 8001e8e:	46a0      	mov	r8, r4
 8001e90:	4683      	mov	fp, r0
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	e671      	b.n	8001b7a <__aeabi_ddiv+0x4a>
 8001e96:	2304      	movs	r3, #4
 8001e98:	4699      	mov	r9, r3
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	469b      	mov	fp, r3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	2500      	movs	r5, #0
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	e669      	b.n	8001b7a <__aeabi_ddiv+0x4a>
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	000007ff 	.word	0x000007ff
 8001eac:	fffffc01 	.word	0xfffffc01
 8001eb0:	0800e4e0 	.word	0x0800e4e0
 8001eb4:	000003ff 	.word	0x000003ff
 8001eb8:	feffffff 	.word	0xfeffffff
 8001ebc:	000007fe 	.word	0x000007fe
 8001ec0:	000003f3 	.word	0x000003f3
 8001ec4:	fffffc0d 	.word	0xfffffc0d
 8001ec8:	fffff801 	.word	0xfffff801
 8001ecc:	4649      	mov	r1, r9
 8001ece:	2301      	movs	r3, #1
 8001ed0:	4319      	orrs	r1, r3
 8001ed2:	4689      	mov	r9, r1
 8001ed4:	2400      	movs	r4, #0
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	e66a      	b.n	8001bb0 <__aeabi_ddiv+0x80>
 8001eda:	2300      	movs	r3, #0
 8001edc:	2480      	movs	r4, #128	; 0x80
 8001ede:	469a      	mov	sl, r3
 8001ee0:	2500      	movs	r5, #0
 8001ee2:	4b8a      	ldr	r3, [pc, #552]	; (800210c <__aeabi_ddiv+0x5dc>)
 8001ee4:	0324      	lsls	r4, r4, #12
 8001ee6:	e67a      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001ee8:	2501      	movs	r5, #1
 8001eea:	426d      	negs	r5, r5
 8001eec:	2301      	movs	r3, #1
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	2b38      	cmp	r3, #56	; 0x38
 8001ef2:	dd00      	ble.n	8001ef6 <__aeabi_ddiv+0x3c6>
 8001ef4:	e670      	b.n	8001bd8 <__aeabi_ddiv+0xa8>
 8001ef6:	2b1f      	cmp	r3, #31
 8001ef8:	dc00      	bgt.n	8001efc <__aeabi_ddiv+0x3cc>
 8001efa:	e0bf      	b.n	800207c <__aeabi_ddiv+0x54c>
 8001efc:	211f      	movs	r1, #31
 8001efe:	4249      	negs	r1, r1
 8001f00:	1a8a      	subs	r2, r1, r2
 8001f02:	4641      	mov	r1, r8
 8001f04:	40d1      	lsrs	r1, r2
 8001f06:	000a      	movs	r2, r1
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d004      	beq.n	8001f16 <__aeabi_ddiv+0x3e6>
 8001f0c:	4641      	mov	r1, r8
 8001f0e:	4b80      	ldr	r3, [pc, #512]	; (8002110 <__aeabi_ddiv+0x5e0>)
 8001f10:	445b      	add	r3, fp
 8001f12:	4099      	lsls	r1, r3
 8001f14:	430d      	orrs	r5, r1
 8001f16:	1e6b      	subs	r3, r5, #1
 8001f18:	419d      	sbcs	r5, r3
 8001f1a:	2307      	movs	r3, #7
 8001f1c:	432a      	orrs	r2, r5
 8001f1e:	001d      	movs	r5, r3
 8001f20:	2400      	movs	r4, #0
 8001f22:	4015      	ands	r5, r2
 8001f24:	4213      	tst	r3, r2
 8001f26:	d100      	bne.n	8001f2a <__aeabi_ddiv+0x3fa>
 8001f28:	e0d4      	b.n	80020d4 <__aeabi_ddiv+0x5a4>
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	4011      	ands	r1, r2
 8001f30:	2904      	cmp	r1, #4
 8001f32:	d100      	bne.n	8001f36 <__aeabi_ddiv+0x406>
 8001f34:	e0cb      	b.n	80020ce <__aeabi_ddiv+0x59e>
 8001f36:	1d11      	adds	r1, r2, #4
 8001f38:	4291      	cmp	r1, r2
 8001f3a:	4192      	sbcs	r2, r2
 8001f3c:	4252      	negs	r2, r2
 8001f3e:	189b      	adds	r3, r3, r2
 8001f40:	000a      	movs	r2, r1
 8001f42:	0219      	lsls	r1, r3, #8
 8001f44:	d400      	bmi.n	8001f48 <__aeabi_ddiv+0x418>
 8001f46:	e0c2      	b.n	80020ce <__aeabi_ddiv+0x59e>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	2400      	movs	r4, #0
 8001f4c:	2500      	movs	r5, #0
 8001f4e:	e646      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	4641      	mov	r1, r8
 8001f54:	031b      	lsls	r3, r3, #12
 8001f56:	4219      	tst	r1, r3
 8001f58:	d008      	beq.n	8001f6c <__aeabi_ddiv+0x43c>
 8001f5a:	421c      	tst	r4, r3
 8001f5c:	d106      	bne.n	8001f6c <__aeabi_ddiv+0x43c>
 8001f5e:	431c      	orrs	r4, r3
 8001f60:	0324      	lsls	r4, r4, #12
 8001f62:	46ba      	mov	sl, r7
 8001f64:	0015      	movs	r5, r2
 8001f66:	4b69      	ldr	r3, [pc, #420]	; (800210c <__aeabi_ddiv+0x5dc>)
 8001f68:	0b24      	lsrs	r4, r4, #12
 8001f6a:	e638      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001f6c:	2480      	movs	r4, #128	; 0x80
 8001f6e:	4643      	mov	r3, r8
 8001f70:	0324      	lsls	r4, r4, #12
 8001f72:	431c      	orrs	r4, r3
 8001f74:	0324      	lsls	r4, r4, #12
 8001f76:	46b2      	mov	sl, r6
 8001f78:	4b64      	ldr	r3, [pc, #400]	; (800210c <__aeabi_ddiv+0x5dc>)
 8001f7a:	0b24      	lsrs	r4, r4, #12
 8001f7c:	e62f      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d100      	bne.n	8001f84 <__aeabi_ddiv+0x454>
 8001f82:	e703      	b.n	8001d8c <__aeabi_ddiv+0x25c>
 8001f84:	19a6      	adds	r6, r4, r6
 8001f86:	1e68      	subs	r0, r5, #1
 8001f88:	42a6      	cmp	r6, r4
 8001f8a:	d200      	bcs.n	8001f8e <__aeabi_ddiv+0x45e>
 8001f8c:	e08d      	b.n	80020aa <__aeabi_ddiv+0x57a>
 8001f8e:	428e      	cmp	r6, r1
 8001f90:	d200      	bcs.n	8001f94 <__aeabi_ddiv+0x464>
 8001f92:	e0a3      	b.n	80020dc <__aeabi_ddiv+0x5ac>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x468>
 8001f96:	e0b3      	b.n	8002100 <__aeabi_ddiv+0x5d0>
 8001f98:	0005      	movs	r5, r0
 8001f9a:	e6f5      	b.n	8001d88 <__aeabi_ddiv+0x258>
 8001f9c:	42aa      	cmp	r2, r5
 8001f9e:	d900      	bls.n	8001fa2 <__aeabi_ddiv+0x472>
 8001fa0:	e639      	b.n	8001c16 <__aeabi_ddiv+0xe6>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	07de      	lsls	r6, r3, #31
 8001fa6:	0858      	lsrs	r0, r3, #1
 8001fa8:	086b      	lsrs	r3, r5, #1
 8001faa:	431e      	orrs	r6, r3
 8001fac:	07ed      	lsls	r5, r5, #31
 8001fae:	e639      	b.n	8001c24 <__aeabi_ddiv+0xf4>
 8001fb0:	4648      	mov	r0, r9
 8001fb2:	f001 f937 	bl	8003224 <__clzsi2>
 8001fb6:	0001      	movs	r1, r0
 8001fb8:	0002      	movs	r2, r0
 8001fba:	3115      	adds	r1, #21
 8001fbc:	3220      	adds	r2, #32
 8001fbe:	291c      	cmp	r1, #28
 8001fc0:	dc00      	bgt.n	8001fc4 <__aeabi_ddiv+0x494>
 8001fc2:	e72c      	b.n	8001e1e <__aeabi_ddiv+0x2ee>
 8001fc4:	464b      	mov	r3, r9
 8001fc6:	3808      	subs	r0, #8
 8001fc8:	4083      	lsls	r3, r0
 8001fca:	2500      	movs	r5, #0
 8001fcc:	4698      	mov	r8, r3
 8001fce:	e732      	b.n	8001e36 <__aeabi_ddiv+0x306>
 8001fd0:	f001 f928 	bl	8003224 <__clzsi2>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	001a      	movs	r2, r3
 8001fd8:	3215      	adds	r2, #21
 8001fda:	3020      	adds	r0, #32
 8001fdc:	2a1c      	cmp	r2, #28
 8001fde:	dc00      	bgt.n	8001fe2 <__aeabi_ddiv+0x4b2>
 8001fe0:	e700      	b.n	8001de4 <__aeabi_ddiv+0x2b4>
 8001fe2:	4654      	mov	r4, sl
 8001fe4:	3b08      	subs	r3, #8
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	409c      	lsls	r4, r3
 8001fea:	e705      	b.n	8001df8 <__aeabi_ddiv+0x2c8>
 8001fec:	1936      	adds	r6, r6, r4
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	42b4      	cmp	r4, r6
 8001ff2:	d900      	bls.n	8001ff6 <__aeabi_ddiv+0x4c6>
 8001ff4:	e6a6      	b.n	8001d44 <__aeabi_ddiv+0x214>
 8001ff6:	42b2      	cmp	r2, r6
 8001ff8:	d800      	bhi.n	8001ffc <__aeabi_ddiv+0x4cc>
 8001ffa:	e6a3      	b.n	8001d44 <__aeabi_ddiv+0x214>
 8001ffc:	1e83      	subs	r3, r0, #2
 8001ffe:	1936      	adds	r6, r6, r4
 8002000:	e6a0      	b.n	8001d44 <__aeabi_ddiv+0x214>
 8002002:	1909      	adds	r1, r1, r4
 8002004:	3d01      	subs	r5, #1
 8002006:	428c      	cmp	r4, r1
 8002008:	d900      	bls.n	800200c <__aeabi_ddiv+0x4dc>
 800200a:	e68d      	b.n	8001d28 <__aeabi_ddiv+0x1f8>
 800200c:	428a      	cmp	r2, r1
 800200e:	d800      	bhi.n	8002012 <__aeabi_ddiv+0x4e2>
 8002010:	e68a      	b.n	8001d28 <__aeabi_ddiv+0x1f8>
 8002012:	1e85      	subs	r5, r0, #2
 8002014:	1909      	adds	r1, r1, r4
 8002016:	e687      	b.n	8001d28 <__aeabi_ddiv+0x1f8>
 8002018:	230f      	movs	r3, #15
 800201a:	402b      	ands	r3, r5
 800201c:	2b04      	cmp	r3, #4
 800201e:	d100      	bne.n	8002022 <__aeabi_ddiv+0x4f2>
 8002020:	e6bc      	b.n	8001d9c <__aeabi_ddiv+0x26c>
 8002022:	2305      	movs	r3, #5
 8002024:	425b      	negs	r3, r3
 8002026:	42ab      	cmp	r3, r5
 8002028:	419b      	sbcs	r3, r3
 800202a:	3504      	adds	r5, #4
 800202c:	425b      	negs	r3, r3
 800202e:	08ed      	lsrs	r5, r5, #3
 8002030:	4498      	add	r8, r3
 8002032:	e6b4      	b.n	8001d9e <__aeabi_ddiv+0x26e>
 8002034:	42af      	cmp	r7, r5
 8002036:	d900      	bls.n	800203a <__aeabi_ddiv+0x50a>
 8002038:	e660      	b.n	8001cfc <__aeabi_ddiv+0x1cc>
 800203a:	4282      	cmp	r2, r0
 800203c:	d804      	bhi.n	8002048 <__aeabi_ddiv+0x518>
 800203e:	d000      	beq.n	8002042 <__aeabi_ddiv+0x512>
 8002040:	e65c      	b.n	8001cfc <__aeabi_ddiv+0x1cc>
 8002042:	42ae      	cmp	r6, r5
 8002044:	d800      	bhi.n	8002048 <__aeabi_ddiv+0x518>
 8002046:	e659      	b.n	8001cfc <__aeabi_ddiv+0x1cc>
 8002048:	2302      	movs	r3, #2
 800204a:	425b      	negs	r3, r3
 800204c:	469c      	mov	ip, r3
 800204e:	9b00      	ldr	r3, [sp, #0]
 8002050:	44e0      	add	r8, ip
 8002052:	469c      	mov	ip, r3
 8002054:	4465      	add	r5, ip
 8002056:	429d      	cmp	r5, r3
 8002058:	419b      	sbcs	r3, r3
 800205a:	425b      	negs	r3, r3
 800205c:	191b      	adds	r3, r3, r4
 800205e:	18c0      	adds	r0, r0, r3
 8002060:	e64d      	b.n	8001cfe <__aeabi_ddiv+0x1ce>
 8002062:	428a      	cmp	r2, r1
 8002064:	d800      	bhi.n	8002068 <__aeabi_ddiv+0x538>
 8002066:	e60e      	b.n	8001c86 <__aeabi_ddiv+0x156>
 8002068:	1e83      	subs	r3, r0, #2
 800206a:	1909      	adds	r1, r1, r4
 800206c:	e60b      	b.n	8001c86 <__aeabi_ddiv+0x156>
 800206e:	428a      	cmp	r2, r1
 8002070:	d800      	bhi.n	8002074 <__aeabi_ddiv+0x544>
 8002072:	e5f4      	b.n	8001c5e <__aeabi_ddiv+0x12e>
 8002074:	1e83      	subs	r3, r0, #2
 8002076:	4698      	mov	r8, r3
 8002078:	1909      	adds	r1, r1, r4
 800207a:	e5f0      	b.n	8001c5e <__aeabi_ddiv+0x12e>
 800207c:	4925      	ldr	r1, [pc, #148]	; (8002114 <__aeabi_ddiv+0x5e4>)
 800207e:	0028      	movs	r0, r5
 8002080:	4459      	add	r1, fp
 8002082:	408d      	lsls	r5, r1
 8002084:	4642      	mov	r2, r8
 8002086:	408a      	lsls	r2, r1
 8002088:	1e69      	subs	r1, r5, #1
 800208a:	418d      	sbcs	r5, r1
 800208c:	4641      	mov	r1, r8
 800208e:	40d8      	lsrs	r0, r3
 8002090:	40d9      	lsrs	r1, r3
 8002092:	4302      	orrs	r2, r0
 8002094:	432a      	orrs	r2, r5
 8002096:	000b      	movs	r3, r1
 8002098:	0751      	lsls	r1, r2, #29
 800209a:	d100      	bne.n	800209e <__aeabi_ddiv+0x56e>
 800209c:	e751      	b.n	8001f42 <__aeabi_ddiv+0x412>
 800209e:	210f      	movs	r1, #15
 80020a0:	4011      	ands	r1, r2
 80020a2:	2904      	cmp	r1, #4
 80020a4:	d000      	beq.n	80020a8 <__aeabi_ddiv+0x578>
 80020a6:	e746      	b.n	8001f36 <__aeabi_ddiv+0x406>
 80020a8:	e74b      	b.n	8001f42 <__aeabi_ddiv+0x412>
 80020aa:	0005      	movs	r5, r0
 80020ac:	428e      	cmp	r6, r1
 80020ae:	d000      	beq.n	80020b2 <__aeabi_ddiv+0x582>
 80020b0:	e66a      	b.n	8001d88 <__aeabi_ddiv+0x258>
 80020b2:	9a00      	ldr	r2, [sp, #0]
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d000      	beq.n	80020ba <__aeabi_ddiv+0x58a>
 80020b8:	e666      	b.n	8001d88 <__aeabi_ddiv+0x258>
 80020ba:	e667      	b.n	8001d8c <__aeabi_ddiv+0x25c>
 80020bc:	4a16      	ldr	r2, [pc, #88]	; (8002118 <__aeabi_ddiv+0x5e8>)
 80020be:	445a      	add	r2, fp
 80020c0:	2a00      	cmp	r2, #0
 80020c2:	dc00      	bgt.n	80020c6 <__aeabi_ddiv+0x596>
 80020c4:	e710      	b.n	8001ee8 <__aeabi_ddiv+0x3b8>
 80020c6:	2301      	movs	r3, #1
 80020c8:	2500      	movs	r5, #0
 80020ca:	4498      	add	r8, r3
 80020cc:	e667      	b.n	8001d9e <__aeabi_ddiv+0x26e>
 80020ce:	075d      	lsls	r5, r3, #29
 80020d0:	025b      	lsls	r3, r3, #9
 80020d2:	0b1c      	lsrs	r4, r3, #12
 80020d4:	08d2      	lsrs	r2, r2, #3
 80020d6:	2300      	movs	r3, #0
 80020d8:	4315      	orrs	r5, r2
 80020da:	e580      	b.n	8001bde <__aeabi_ddiv+0xae>
 80020dc:	9800      	ldr	r0, [sp, #0]
 80020de:	3d02      	subs	r5, #2
 80020e0:	0042      	lsls	r2, r0, #1
 80020e2:	4282      	cmp	r2, r0
 80020e4:	41bf      	sbcs	r7, r7
 80020e6:	427f      	negs	r7, r7
 80020e8:	193c      	adds	r4, r7, r4
 80020ea:	1936      	adds	r6, r6, r4
 80020ec:	9200      	str	r2, [sp, #0]
 80020ee:	e7dd      	b.n	80020ac <__aeabi_ddiv+0x57c>
 80020f0:	2480      	movs	r4, #128	; 0x80
 80020f2:	4643      	mov	r3, r8
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	431c      	orrs	r4, r3
 80020f8:	0324      	lsls	r4, r4, #12
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <__aeabi_ddiv+0x5dc>)
 80020fc:	0b24      	lsrs	r4, r4, #12
 80020fe:	e56e      	b.n	8001bde <__aeabi_ddiv+0xae>
 8002100:	9a00      	ldr	r2, [sp, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3ea      	bcc.n	80020dc <__aeabi_ddiv+0x5ac>
 8002106:	0005      	movs	r5, r0
 8002108:	e7d3      	b.n	80020b2 <__aeabi_ddiv+0x582>
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	000007ff 	.word	0x000007ff
 8002110:	0000043e 	.word	0x0000043e
 8002114:	0000041e 	.word	0x0000041e
 8002118:	000003ff 	.word	0x000003ff

0800211c <__eqdf2>:
 800211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211e:	464e      	mov	r6, r9
 8002120:	4645      	mov	r5, r8
 8002122:	46de      	mov	lr, fp
 8002124:	4657      	mov	r7, sl
 8002126:	4690      	mov	r8, r2
 8002128:	b5e0      	push	{r5, r6, r7, lr}
 800212a:	0017      	movs	r7, r2
 800212c:	031a      	lsls	r2, r3, #12
 800212e:	0b12      	lsrs	r2, r2, #12
 8002130:	0005      	movs	r5, r0
 8002132:	4684      	mov	ip, r0
 8002134:	4819      	ldr	r0, [pc, #100]	; (800219c <__eqdf2+0x80>)
 8002136:	030e      	lsls	r6, r1, #12
 8002138:	004c      	lsls	r4, r1, #1
 800213a:	4691      	mov	r9, r2
 800213c:	005a      	lsls	r2, r3, #1
 800213e:	0fdb      	lsrs	r3, r3, #31
 8002140:	469b      	mov	fp, r3
 8002142:	0b36      	lsrs	r6, r6, #12
 8002144:	0d64      	lsrs	r4, r4, #21
 8002146:	0fc9      	lsrs	r1, r1, #31
 8002148:	0d52      	lsrs	r2, r2, #21
 800214a:	4284      	cmp	r4, r0
 800214c:	d019      	beq.n	8002182 <__eqdf2+0x66>
 800214e:	4282      	cmp	r2, r0
 8002150:	d010      	beq.n	8002174 <__eqdf2+0x58>
 8002152:	2001      	movs	r0, #1
 8002154:	4294      	cmp	r4, r2
 8002156:	d10e      	bne.n	8002176 <__eqdf2+0x5a>
 8002158:	454e      	cmp	r6, r9
 800215a:	d10c      	bne.n	8002176 <__eqdf2+0x5a>
 800215c:	2001      	movs	r0, #1
 800215e:	45c4      	cmp	ip, r8
 8002160:	d109      	bne.n	8002176 <__eqdf2+0x5a>
 8002162:	4559      	cmp	r1, fp
 8002164:	d017      	beq.n	8002196 <__eqdf2+0x7a>
 8002166:	2c00      	cmp	r4, #0
 8002168:	d105      	bne.n	8002176 <__eqdf2+0x5a>
 800216a:	0030      	movs	r0, r6
 800216c:	4328      	orrs	r0, r5
 800216e:	1e43      	subs	r3, r0, #1
 8002170:	4198      	sbcs	r0, r3
 8002172:	e000      	b.n	8002176 <__eqdf2+0x5a>
 8002174:	2001      	movs	r0, #1
 8002176:	bcf0      	pop	{r4, r5, r6, r7}
 8002178:	46bb      	mov	fp, r7
 800217a:	46b2      	mov	sl, r6
 800217c:	46a9      	mov	r9, r5
 800217e:	46a0      	mov	r8, r4
 8002180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002182:	0033      	movs	r3, r6
 8002184:	2001      	movs	r0, #1
 8002186:	432b      	orrs	r3, r5
 8002188:	d1f5      	bne.n	8002176 <__eqdf2+0x5a>
 800218a:	42a2      	cmp	r2, r4
 800218c:	d1f3      	bne.n	8002176 <__eqdf2+0x5a>
 800218e:	464b      	mov	r3, r9
 8002190:	433b      	orrs	r3, r7
 8002192:	d1f0      	bne.n	8002176 <__eqdf2+0x5a>
 8002194:	e7e2      	b.n	800215c <__eqdf2+0x40>
 8002196:	2000      	movs	r0, #0
 8002198:	e7ed      	b.n	8002176 <__eqdf2+0x5a>
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	000007ff 	.word	0x000007ff

080021a0 <__gedf2>:
 80021a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a2:	4647      	mov	r7, r8
 80021a4:	46ce      	mov	lr, r9
 80021a6:	0004      	movs	r4, r0
 80021a8:	0018      	movs	r0, r3
 80021aa:	0016      	movs	r6, r2
 80021ac:	031b      	lsls	r3, r3, #12
 80021ae:	0b1b      	lsrs	r3, r3, #12
 80021b0:	4d2d      	ldr	r5, [pc, #180]	; (8002268 <__gedf2+0xc8>)
 80021b2:	004a      	lsls	r2, r1, #1
 80021b4:	4699      	mov	r9, r3
 80021b6:	b580      	push	{r7, lr}
 80021b8:	0043      	lsls	r3, r0, #1
 80021ba:	030f      	lsls	r7, r1, #12
 80021bc:	46a4      	mov	ip, r4
 80021be:	46b0      	mov	r8, r6
 80021c0:	0b3f      	lsrs	r7, r7, #12
 80021c2:	0d52      	lsrs	r2, r2, #21
 80021c4:	0fc9      	lsrs	r1, r1, #31
 80021c6:	0d5b      	lsrs	r3, r3, #21
 80021c8:	0fc0      	lsrs	r0, r0, #31
 80021ca:	42aa      	cmp	r2, r5
 80021cc:	d021      	beq.n	8002212 <__gedf2+0x72>
 80021ce:	42ab      	cmp	r3, r5
 80021d0:	d013      	beq.n	80021fa <__gedf2+0x5a>
 80021d2:	2a00      	cmp	r2, #0
 80021d4:	d122      	bne.n	800221c <__gedf2+0x7c>
 80021d6:	433c      	orrs	r4, r7
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <__gedf2+0x42>
 80021dc:	464d      	mov	r5, r9
 80021de:	432e      	orrs	r6, r5
 80021e0:	d022      	beq.n	8002228 <__gedf2+0x88>
 80021e2:	2c00      	cmp	r4, #0
 80021e4:	d010      	beq.n	8002208 <__gedf2+0x68>
 80021e6:	4281      	cmp	r1, r0
 80021e8:	d022      	beq.n	8002230 <__gedf2+0x90>
 80021ea:	2002      	movs	r0, #2
 80021ec:	3901      	subs	r1, #1
 80021ee:	4008      	ands	r0, r1
 80021f0:	3801      	subs	r0, #1
 80021f2:	bcc0      	pop	{r6, r7}
 80021f4:	46b9      	mov	r9, r7
 80021f6:	46b0      	mov	r8, r6
 80021f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fa:	464d      	mov	r5, r9
 80021fc:	432e      	orrs	r6, r5
 80021fe:	d129      	bne.n	8002254 <__gedf2+0xb4>
 8002200:	2a00      	cmp	r2, #0
 8002202:	d1f0      	bne.n	80021e6 <__gedf2+0x46>
 8002204:	433c      	orrs	r4, r7
 8002206:	d1ee      	bne.n	80021e6 <__gedf2+0x46>
 8002208:	2800      	cmp	r0, #0
 800220a:	d1f2      	bne.n	80021f2 <__gedf2+0x52>
 800220c:	2001      	movs	r0, #1
 800220e:	4240      	negs	r0, r0
 8002210:	e7ef      	b.n	80021f2 <__gedf2+0x52>
 8002212:	003d      	movs	r5, r7
 8002214:	4325      	orrs	r5, r4
 8002216:	d11d      	bne.n	8002254 <__gedf2+0xb4>
 8002218:	4293      	cmp	r3, r2
 800221a:	d0ee      	beq.n	80021fa <__gedf2+0x5a>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1e2      	bne.n	80021e6 <__gedf2+0x46>
 8002220:	464c      	mov	r4, r9
 8002222:	4326      	orrs	r6, r4
 8002224:	d1df      	bne.n	80021e6 <__gedf2+0x46>
 8002226:	e7e0      	b.n	80021ea <__gedf2+0x4a>
 8002228:	2000      	movs	r0, #0
 800222a:	2c00      	cmp	r4, #0
 800222c:	d0e1      	beq.n	80021f2 <__gedf2+0x52>
 800222e:	e7dc      	b.n	80021ea <__gedf2+0x4a>
 8002230:	429a      	cmp	r2, r3
 8002232:	dc0a      	bgt.n	800224a <__gedf2+0xaa>
 8002234:	dbe8      	blt.n	8002208 <__gedf2+0x68>
 8002236:	454f      	cmp	r7, r9
 8002238:	d8d7      	bhi.n	80021ea <__gedf2+0x4a>
 800223a:	d00e      	beq.n	800225a <__gedf2+0xba>
 800223c:	2000      	movs	r0, #0
 800223e:	454f      	cmp	r7, r9
 8002240:	d2d7      	bcs.n	80021f2 <__gedf2+0x52>
 8002242:	2900      	cmp	r1, #0
 8002244:	d0e2      	beq.n	800220c <__gedf2+0x6c>
 8002246:	0008      	movs	r0, r1
 8002248:	e7d3      	b.n	80021f2 <__gedf2+0x52>
 800224a:	4243      	negs	r3, r0
 800224c:	4158      	adcs	r0, r3
 800224e:	0040      	lsls	r0, r0, #1
 8002250:	3801      	subs	r0, #1
 8002252:	e7ce      	b.n	80021f2 <__gedf2+0x52>
 8002254:	2002      	movs	r0, #2
 8002256:	4240      	negs	r0, r0
 8002258:	e7cb      	b.n	80021f2 <__gedf2+0x52>
 800225a:	45c4      	cmp	ip, r8
 800225c:	d8c5      	bhi.n	80021ea <__gedf2+0x4a>
 800225e:	2000      	movs	r0, #0
 8002260:	45c4      	cmp	ip, r8
 8002262:	d2c6      	bcs.n	80021f2 <__gedf2+0x52>
 8002264:	e7ed      	b.n	8002242 <__gedf2+0xa2>
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	000007ff 	.word	0x000007ff

0800226c <__ledf2>:
 800226c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226e:	4647      	mov	r7, r8
 8002270:	46ce      	mov	lr, r9
 8002272:	0004      	movs	r4, r0
 8002274:	0018      	movs	r0, r3
 8002276:	0016      	movs	r6, r2
 8002278:	031b      	lsls	r3, r3, #12
 800227a:	0b1b      	lsrs	r3, r3, #12
 800227c:	4d2c      	ldr	r5, [pc, #176]	; (8002330 <__ledf2+0xc4>)
 800227e:	004a      	lsls	r2, r1, #1
 8002280:	4699      	mov	r9, r3
 8002282:	b580      	push	{r7, lr}
 8002284:	0043      	lsls	r3, r0, #1
 8002286:	030f      	lsls	r7, r1, #12
 8002288:	46a4      	mov	ip, r4
 800228a:	46b0      	mov	r8, r6
 800228c:	0b3f      	lsrs	r7, r7, #12
 800228e:	0d52      	lsrs	r2, r2, #21
 8002290:	0fc9      	lsrs	r1, r1, #31
 8002292:	0d5b      	lsrs	r3, r3, #21
 8002294:	0fc0      	lsrs	r0, r0, #31
 8002296:	42aa      	cmp	r2, r5
 8002298:	d00d      	beq.n	80022b6 <__ledf2+0x4a>
 800229a:	42ab      	cmp	r3, r5
 800229c:	d010      	beq.n	80022c0 <__ledf2+0x54>
 800229e:	2a00      	cmp	r2, #0
 80022a0:	d127      	bne.n	80022f2 <__ledf2+0x86>
 80022a2:	433c      	orrs	r4, r7
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <__ledf2+0x60>
 80022a8:	464d      	mov	r5, r9
 80022aa:	432e      	orrs	r6, r5
 80022ac:	d10e      	bne.n	80022cc <__ledf2+0x60>
 80022ae:	2000      	movs	r0, #0
 80022b0:	2c00      	cmp	r4, #0
 80022b2:	d015      	beq.n	80022e0 <__ledf2+0x74>
 80022b4:	e00e      	b.n	80022d4 <__ledf2+0x68>
 80022b6:	003d      	movs	r5, r7
 80022b8:	4325      	orrs	r5, r4
 80022ba:	d110      	bne.n	80022de <__ledf2+0x72>
 80022bc:	4293      	cmp	r3, r2
 80022be:	d118      	bne.n	80022f2 <__ledf2+0x86>
 80022c0:	464d      	mov	r5, r9
 80022c2:	432e      	orrs	r6, r5
 80022c4:	d10b      	bne.n	80022de <__ledf2+0x72>
 80022c6:	2a00      	cmp	r2, #0
 80022c8:	d102      	bne.n	80022d0 <__ledf2+0x64>
 80022ca:	433c      	orrs	r4, r7
 80022cc:	2c00      	cmp	r4, #0
 80022ce:	d00b      	beq.n	80022e8 <__ledf2+0x7c>
 80022d0:	4281      	cmp	r1, r0
 80022d2:	d014      	beq.n	80022fe <__ledf2+0x92>
 80022d4:	2002      	movs	r0, #2
 80022d6:	3901      	subs	r1, #1
 80022d8:	4008      	ands	r0, r1
 80022da:	3801      	subs	r0, #1
 80022dc:	e000      	b.n	80022e0 <__ledf2+0x74>
 80022de:	2002      	movs	r0, #2
 80022e0:	bcc0      	pop	{r6, r7}
 80022e2:	46b9      	mov	r9, r7
 80022e4:	46b0      	mov	r8, r6
 80022e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e8:	2800      	cmp	r0, #0
 80022ea:	d1f9      	bne.n	80022e0 <__ledf2+0x74>
 80022ec:	2001      	movs	r0, #1
 80022ee:	4240      	negs	r0, r0
 80022f0:	e7f6      	b.n	80022e0 <__ledf2+0x74>
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1ec      	bne.n	80022d0 <__ledf2+0x64>
 80022f6:	464c      	mov	r4, r9
 80022f8:	4326      	orrs	r6, r4
 80022fa:	d1e9      	bne.n	80022d0 <__ledf2+0x64>
 80022fc:	e7ea      	b.n	80022d4 <__ledf2+0x68>
 80022fe:	429a      	cmp	r2, r3
 8002300:	dd04      	ble.n	800230c <__ledf2+0xa0>
 8002302:	4243      	negs	r3, r0
 8002304:	4158      	adcs	r0, r3
 8002306:	0040      	lsls	r0, r0, #1
 8002308:	3801      	subs	r0, #1
 800230a:	e7e9      	b.n	80022e0 <__ledf2+0x74>
 800230c:	429a      	cmp	r2, r3
 800230e:	dbeb      	blt.n	80022e8 <__ledf2+0x7c>
 8002310:	454f      	cmp	r7, r9
 8002312:	d8df      	bhi.n	80022d4 <__ledf2+0x68>
 8002314:	d006      	beq.n	8002324 <__ledf2+0xb8>
 8002316:	2000      	movs	r0, #0
 8002318:	454f      	cmp	r7, r9
 800231a:	d2e1      	bcs.n	80022e0 <__ledf2+0x74>
 800231c:	2900      	cmp	r1, #0
 800231e:	d0e5      	beq.n	80022ec <__ledf2+0x80>
 8002320:	0008      	movs	r0, r1
 8002322:	e7dd      	b.n	80022e0 <__ledf2+0x74>
 8002324:	45c4      	cmp	ip, r8
 8002326:	d8d5      	bhi.n	80022d4 <__ledf2+0x68>
 8002328:	2000      	movs	r0, #0
 800232a:	45c4      	cmp	ip, r8
 800232c:	d2d8      	bcs.n	80022e0 <__ledf2+0x74>
 800232e:	e7f5      	b.n	800231c <__ledf2+0xb0>
 8002330:	000007ff 	.word	0x000007ff

08002334 <__aeabi_dmul>:
 8002334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002336:	4657      	mov	r7, sl
 8002338:	464e      	mov	r6, r9
 800233a:	4645      	mov	r5, r8
 800233c:	46de      	mov	lr, fp
 800233e:	b5e0      	push	{r5, r6, r7, lr}
 8002340:	4698      	mov	r8, r3
 8002342:	030c      	lsls	r4, r1, #12
 8002344:	004b      	lsls	r3, r1, #1
 8002346:	0006      	movs	r6, r0
 8002348:	4692      	mov	sl, r2
 800234a:	b087      	sub	sp, #28
 800234c:	0b24      	lsrs	r4, r4, #12
 800234e:	0d5b      	lsrs	r3, r3, #21
 8002350:	0fcf      	lsrs	r7, r1, #31
 8002352:	2b00      	cmp	r3, #0
 8002354:	d100      	bne.n	8002358 <__aeabi_dmul+0x24>
 8002356:	e15c      	b.n	8002612 <__aeabi_dmul+0x2de>
 8002358:	4ad9      	ldr	r2, [pc, #868]	; (80026c0 <__aeabi_dmul+0x38c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d100      	bne.n	8002360 <__aeabi_dmul+0x2c>
 800235e:	e175      	b.n	800264c <__aeabi_dmul+0x318>
 8002360:	0f42      	lsrs	r2, r0, #29
 8002362:	00e4      	lsls	r4, r4, #3
 8002364:	4314      	orrs	r4, r2
 8002366:	2280      	movs	r2, #128	; 0x80
 8002368:	0412      	lsls	r2, r2, #16
 800236a:	4314      	orrs	r4, r2
 800236c:	4ad5      	ldr	r2, [pc, #852]	; (80026c4 <__aeabi_dmul+0x390>)
 800236e:	00c5      	lsls	r5, r0, #3
 8002370:	4694      	mov	ip, r2
 8002372:	4463      	add	r3, ip
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2300      	movs	r3, #0
 8002378:	4699      	mov	r9, r3
 800237a:	469b      	mov	fp, r3
 800237c:	4643      	mov	r3, r8
 800237e:	4642      	mov	r2, r8
 8002380:	031e      	lsls	r6, r3, #12
 8002382:	0fd2      	lsrs	r2, r2, #31
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4650      	mov	r0, sl
 8002388:	4690      	mov	r8, r2
 800238a:	0b36      	lsrs	r6, r6, #12
 800238c:	0d5b      	lsrs	r3, r3, #21
 800238e:	d100      	bne.n	8002392 <__aeabi_dmul+0x5e>
 8002390:	e120      	b.n	80025d4 <__aeabi_dmul+0x2a0>
 8002392:	4acb      	ldr	r2, [pc, #812]	; (80026c0 <__aeabi_dmul+0x38c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d100      	bne.n	800239a <__aeabi_dmul+0x66>
 8002398:	e162      	b.n	8002660 <__aeabi_dmul+0x32c>
 800239a:	49ca      	ldr	r1, [pc, #808]	; (80026c4 <__aeabi_dmul+0x390>)
 800239c:	0f42      	lsrs	r2, r0, #29
 800239e:	468c      	mov	ip, r1
 80023a0:	9900      	ldr	r1, [sp, #0]
 80023a2:	4463      	add	r3, ip
 80023a4:	00f6      	lsls	r6, r6, #3
 80023a6:	468c      	mov	ip, r1
 80023a8:	4316      	orrs	r6, r2
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	449c      	add	ip, r3
 80023ae:	0412      	lsls	r2, r2, #16
 80023b0:	4663      	mov	r3, ip
 80023b2:	4316      	orrs	r6, r2
 80023b4:	00c2      	lsls	r2, r0, #3
 80023b6:	2000      	movs	r0, #0
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	9900      	ldr	r1, [sp, #0]
 80023bc:	4643      	mov	r3, r8
 80023be:	3101      	adds	r1, #1
 80023c0:	468c      	mov	ip, r1
 80023c2:	4649      	mov	r1, r9
 80023c4:	407b      	eors	r3, r7
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	290f      	cmp	r1, #15
 80023ca:	d826      	bhi.n	800241a <__aeabi_dmul+0xe6>
 80023cc:	4bbe      	ldr	r3, [pc, #760]	; (80026c8 <__aeabi_dmul+0x394>)
 80023ce:	0089      	lsls	r1, r1, #2
 80023d0:	5859      	ldr	r1, [r3, r1]
 80023d2:	468f      	mov	pc, r1
 80023d4:	4643      	mov	r3, r8
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	0034      	movs	r4, r6
 80023da:	0015      	movs	r5, r2
 80023dc:	4683      	mov	fp, r0
 80023de:	465b      	mov	r3, fp
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d016      	beq.n	8002412 <__aeabi_dmul+0xde>
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d100      	bne.n	80023ea <__aeabi_dmul+0xb6>
 80023e8:	e203      	b.n	80027f2 <__aeabi_dmul+0x4be>
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d000      	beq.n	80023f0 <__aeabi_dmul+0xbc>
 80023ee:	e0cd      	b.n	800258c <__aeabi_dmul+0x258>
 80023f0:	2200      	movs	r2, #0
 80023f2:	2400      	movs	r4, #0
 80023f4:	2500      	movs	r5, #0
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	0512      	lsls	r2, r2, #20
 80023fa:	4322      	orrs	r2, r4
 80023fc:	07db      	lsls	r3, r3, #31
 80023fe:	431a      	orrs	r2, r3
 8002400:	0028      	movs	r0, r5
 8002402:	0011      	movs	r1, r2
 8002404:	b007      	add	sp, #28
 8002406:	bcf0      	pop	{r4, r5, r6, r7}
 8002408:	46bb      	mov	fp, r7
 800240a:	46b2      	mov	sl, r6
 800240c:	46a9      	mov	r9, r5
 800240e:	46a0      	mov	r8, r4
 8002410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002412:	2400      	movs	r4, #0
 8002414:	2500      	movs	r5, #0
 8002416:	4aaa      	ldr	r2, [pc, #680]	; (80026c0 <__aeabi_dmul+0x38c>)
 8002418:	e7ed      	b.n	80023f6 <__aeabi_dmul+0xc2>
 800241a:	0c28      	lsrs	r0, r5, #16
 800241c:	042d      	lsls	r5, r5, #16
 800241e:	0c2d      	lsrs	r5, r5, #16
 8002420:	002b      	movs	r3, r5
 8002422:	0c11      	lsrs	r1, r2, #16
 8002424:	0412      	lsls	r2, r2, #16
 8002426:	0c12      	lsrs	r2, r2, #16
 8002428:	4353      	muls	r3, r2
 800242a:	4698      	mov	r8, r3
 800242c:	0013      	movs	r3, r2
 800242e:	002f      	movs	r7, r5
 8002430:	4343      	muls	r3, r0
 8002432:	4699      	mov	r9, r3
 8002434:	434f      	muls	r7, r1
 8002436:	444f      	add	r7, r9
 8002438:	46bb      	mov	fp, r7
 800243a:	4647      	mov	r7, r8
 800243c:	000b      	movs	r3, r1
 800243e:	0c3f      	lsrs	r7, r7, #16
 8002440:	46ba      	mov	sl, r7
 8002442:	4343      	muls	r3, r0
 8002444:	44da      	add	sl, fp
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	45d1      	cmp	r9, sl
 800244a:	d904      	bls.n	8002456 <__aeabi_dmul+0x122>
 800244c:	2780      	movs	r7, #128	; 0x80
 800244e:	027f      	lsls	r7, r7, #9
 8002450:	46b9      	mov	r9, r7
 8002452:	444b      	add	r3, r9
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	4653      	mov	r3, sl
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	469b      	mov	fp, r3
 800245c:	4653      	mov	r3, sl
 800245e:	041f      	lsls	r7, r3, #16
 8002460:	4643      	mov	r3, r8
 8002462:	041b      	lsls	r3, r3, #16
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	4698      	mov	r8, r3
 8002468:	003b      	movs	r3, r7
 800246a:	4443      	add	r3, r8
 800246c:	9304      	str	r3, [sp, #16]
 800246e:	0c33      	lsrs	r3, r6, #16
 8002470:	0436      	lsls	r6, r6, #16
 8002472:	0c36      	lsrs	r6, r6, #16
 8002474:	4698      	mov	r8, r3
 8002476:	0033      	movs	r3, r6
 8002478:	4343      	muls	r3, r0
 800247a:	4699      	mov	r9, r3
 800247c:	4643      	mov	r3, r8
 800247e:	4343      	muls	r3, r0
 8002480:	002f      	movs	r7, r5
 8002482:	469a      	mov	sl, r3
 8002484:	4643      	mov	r3, r8
 8002486:	4377      	muls	r7, r6
 8002488:	435d      	muls	r5, r3
 800248a:	0c38      	lsrs	r0, r7, #16
 800248c:	444d      	add	r5, r9
 800248e:	1945      	adds	r5, r0, r5
 8002490:	45a9      	cmp	r9, r5
 8002492:	d903      	bls.n	800249c <__aeabi_dmul+0x168>
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	025b      	lsls	r3, r3, #9
 8002498:	4699      	mov	r9, r3
 800249a:	44ca      	add	sl, r9
 800249c:	043f      	lsls	r7, r7, #16
 800249e:	0c28      	lsrs	r0, r5, #16
 80024a0:	0c3f      	lsrs	r7, r7, #16
 80024a2:	042d      	lsls	r5, r5, #16
 80024a4:	19ed      	adds	r5, r5, r7
 80024a6:	0c27      	lsrs	r7, r4, #16
 80024a8:	0424      	lsls	r4, r4, #16
 80024aa:	0c24      	lsrs	r4, r4, #16
 80024ac:	0003      	movs	r3, r0
 80024ae:	0020      	movs	r0, r4
 80024b0:	4350      	muls	r0, r2
 80024b2:	437a      	muls	r2, r7
 80024b4:	4691      	mov	r9, r2
 80024b6:	003a      	movs	r2, r7
 80024b8:	4453      	add	r3, sl
 80024ba:	9305      	str	r3, [sp, #20]
 80024bc:	0c03      	lsrs	r3, r0, #16
 80024be:	469a      	mov	sl, r3
 80024c0:	434a      	muls	r2, r1
 80024c2:	4361      	muls	r1, r4
 80024c4:	4449      	add	r1, r9
 80024c6:	4451      	add	r1, sl
 80024c8:	44ab      	add	fp, r5
 80024ca:	4589      	cmp	r9, r1
 80024cc:	d903      	bls.n	80024d6 <__aeabi_dmul+0x1a2>
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	025b      	lsls	r3, r3, #9
 80024d2:	4699      	mov	r9, r3
 80024d4:	444a      	add	r2, r9
 80024d6:	0400      	lsls	r0, r0, #16
 80024d8:	0c0b      	lsrs	r3, r1, #16
 80024da:	0c00      	lsrs	r0, r0, #16
 80024dc:	0409      	lsls	r1, r1, #16
 80024de:	1809      	adds	r1, r1, r0
 80024e0:	0020      	movs	r0, r4
 80024e2:	4699      	mov	r9, r3
 80024e4:	4643      	mov	r3, r8
 80024e6:	4370      	muls	r0, r6
 80024e8:	435c      	muls	r4, r3
 80024ea:	437e      	muls	r6, r7
 80024ec:	435f      	muls	r7, r3
 80024ee:	0c03      	lsrs	r3, r0, #16
 80024f0:	4698      	mov	r8, r3
 80024f2:	19a4      	adds	r4, r4, r6
 80024f4:	4444      	add	r4, r8
 80024f6:	444a      	add	r2, r9
 80024f8:	9703      	str	r7, [sp, #12]
 80024fa:	42a6      	cmp	r6, r4
 80024fc:	d904      	bls.n	8002508 <__aeabi_dmul+0x1d4>
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	025b      	lsls	r3, r3, #9
 8002502:	4698      	mov	r8, r3
 8002504:	4447      	add	r7, r8
 8002506:	9703      	str	r7, [sp, #12]
 8002508:	0423      	lsls	r3, r4, #16
 800250a:	9e02      	ldr	r6, [sp, #8]
 800250c:	469a      	mov	sl, r3
 800250e:	9b05      	ldr	r3, [sp, #20]
 8002510:	445e      	add	r6, fp
 8002512:	4698      	mov	r8, r3
 8002514:	42ae      	cmp	r6, r5
 8002516:	41ad      	sbcs	r5, r5
 8002518:	1876      	adds	r6, r6, r1
 800251a:	428e      	cmp	r6, r1
 800251c:	4189      	sbcs	r1, r1
 800251e:	0400      	lsls	r0, r0, #16
 8002520:	0c00      	lsrs	r0, r0, #16
 8002522:	4450      	add	r0, sl
 8002524:	4440      	add	r0, r8
 8002526:	426d      	negs	r5, r5
 8002528:	1947      	adds	r7, r0, r5
 800252a:	46b8      	mov	r8, r7
 800252c:	4693      	mov	fp, r2
 800252e:	4249      	negs	r1, r1
 8002530:	4689      	mov	r9, r1
 8002532:	44c3      	add	fp, r8
 8002534:	44d9      	add	r9, fp
 8002536:	4298      	cmp	r0, r3
 8002538:	4180      	sbcs	r0, r0
 800253a:	45a8      	cmp	r8, r5
 800253c:	41ad      	sbcs	r5, r5
 800253e:	4593      	cmp	fp, r2
 8002540:	4192      	sbcs	r2, r2
 8002542:	4589      	cmp	r9, r1
 8002544:	4189      	sbcs	r1, r1
 8002546:	426d      	negs	r5, r5
 8002548:	4240      	negs	r0, r0
 800254a:	4328      	orrs	r0, r5
 800254c:	0c24      	lsrs	r4, r4, #16
 800254e:	4252      	negs	r2, r2
 8002550:	4249      	negs	r1, r1
 8002552:	430a      	orrs	r2, r1
 8002554:	9b03      	ldr	r3, [sp, #12]
 8002556:	1900      	adds	r0, r0, r4
 8002558:	1880      	adds	r0, r0, r2
 800255a:	18c7      	adds	r7, r0, r3
 800255c:	464b      	mov	r3, r9
 800255e:	0ddc      	lsrs	r4, r3, #23
 8002560:	9b04      	ldr	r3, [sp, #16]
 8002562:	0275      	lsls	r5, r6, #9
 8002564:	431d      	orrs	r5, r3
 8002566:	1e6a      	subs	r2, r5, #1
 8002568:	4195      	sbcs	r5, r2
 800256a:	464b      	mov	r3, r9
 800256c:	0df6      	lsrs	r6, r6, #23
 800256e:	027f      	lsls	r7, r7, #9
 8002570:	4335      	orrs	r5, r6
 8002572:	025a      	lsls	r2, r3, #9
 8002574:	433c      	orrs	r4, r7
 8002576:	4315      	orrs	r5, r2
 8002578:	01fb      	lsls	r3, r7, #7
 800257a:	d400      	bmi.n	800257e <__aeabi_dmul+0x24a>
 800257c:	e11c      	b.n	80027b8 <__aeabi_dmul+0x484>
 800257e:	2101      	movs	r1, #1
 8002580:	086a      	lsrs	r2, r5, #1
 8002582:	400d      	ands	r5, r1
 8002584:	4315      	orrs	r5, r2
 8002586:	07e2      	lsls	r2, r4, #31
 8002588:	4315      	orrs	r5, r2
 800258a:	0864      	lsrs	r4, r4, #1
 800258c:	494f      	ldr	r1, [pc, #316]	; (80026cc <__aeabi_dmul+0x398>)
 800258e:	4461      	add	r1, ip
 8002590:	2900      	cmp	r1, #0
 8002592:	dc00      	bgt.n	8002596 <__aeabi_dmul+0x262>
 8002594:	e0b0      	b.n	80026f8 <__aeabi_dmul+0x3c4>
 8002596:	076b      	lsls	r3, r5, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_dmul+0x27a>
 800259a:	220f      	movs	r2, #15
 800259c:	402a      	ands	r2, r5
 800259e:	2a04      	cmp	r2, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_dmul+0x27a>
 80025a2:	1d2a      	adds	r2, r5, #4
 80025a4:	42aa      	cmp	r2, r5
 80025a6:	41ad      	sbcs	r5, r5
 80025a8:	426d      	negs	r5, r5
 80025aa:	1964      	adds	r4, r4, r5
 80025ac:	0015      	movs	r5, r2
 80025ae:	01e3      	lsls	r3, r4, #7
 80025b0:	d504      	bpl.n	80025bc <__aeabi_dmul+0x288>
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	4a46      	ldr	r2, [pc, #280]	; (80026d0 <__aeabi_dmul+0x39c>)
 80025b6:	00c9      	lsls	r1, r1, #3
 80025b8:	4014      	ands	r4, r2
 80025ba:	4461      	add	r1, ip
 80025bc:	4a45      	ldr	r2, [pc, #276]	; (80026d4 <__aeabi_dmul+0x3a0>)
 80025be:	4291      	cmp	r1, r2
 80025c0:	dd00      	ble.n	80025c4 <__aeabi_dmul+0x290>
 80025c2:	e726      	b.n	8002412 <__aeabi_dmul+0xde>
 80025c4:	0762      	lsls	r2, r4, #29
 80025c6:	08ed      	lsrs	r5, r5, #3
 80025c8:	0264      	lsls	r4, r4, #9
 80025ca:	0549      	lsls	r1, r1, #21
 80025cc:	4315      	orrs	r5, r2
 80025ce:	0b24      	lsrs	r4, r4, #12
 80025d0:	0d4a      	lsrs	r2, r1, #21
 80025d2:	e710      	b.n	80023f6 <__aeabi_dmul+0xc2>
 80025d4:	4652      	mov	r2, sl
 80025d6:	4332      	orrs	r2, r6
 80025d8:	d100      	bne.n	80025dc <__aeabi_dmul+0x2a8>
 80025da:	e07f      	b.n	80026dc <__aeabi_dmul+0x3a8>
 80025dc:	2e00      	cmp	r6, #0
 80025de:	d100      	bne.n	80025e2 <__aeabi_dmul+0x2ae>
 80025e0:	e0dc      	b.n	800279c <__aeabi_dmul+0x468>
 80025e2:	0030      	movs	r0, r6
 80025e4:	f000 fe1e 	bl	8003224 <__clzsi2>
 80025e8:	0002      	movs	r2, r0
 80025ea:	3a0b      	subs	r2, #11
 80025ec:	231d      	movs	r3, #29
 80025ee:	0001      	movs	r1, r0
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	4652      	mov	r2, sl
 80025f4:	3908      	subs	r1, #8
 80025f6:	40da      	lsrs	r2, r3
 80025f8:	408e      	lsls	r6, r1
 80025fa:	4316      	orrs	r6, r2
 80025fc:	4652      	mov	r2, sl
 80025fe:	408a      	lsls	r2, r1
 8002600:	9b00      	ldr	r3, [sp, #0]
 8002602:	4935      	ldr	r1, [pc, #212]	; (80026d8 <__aeabi_dmul+0x3a4>)
 8002604:	1a18      	subs	r0, r3, r0
 8002606:	0003      	movs	r3, r0
 8002608:	468c      	mov	ip, r1
 800260a:	4463      	add	r3, ip
 800260c:	2000      	movs	r0, #0
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	e6d3      	b.n	80023ba <__aeabi_dmul+0x86>
 8002612:	0025      	movs	r5, r4
 8002614:	4305      	orrs	r5, r0
 8002616:	d04a      	beq.n	80026ae <__aeabi_dmul+0x37a>
 8002618:	2c00      	cmp	r4, #0
 800261a:	d100      	bne.n	800261e <__aeabi_dmul+0x2ea>
 800261c:	e0b0      	b.n	8002780 <__aeabi_dmul+0x44c>
 800261e:	0020      	movs	r0, r4
 8002620:	f000 fe00 	bl	8003224 <__clzsi2>
 8002624:	0001      	movs	r1, r0
 8002626:	0002      	movs	r2, r0
 8002628:	390b      	subs	r1, #11
 800262a:	231d      	movs	r3, #29
 800262c:	0010      	movs	r0, r2
 800262e:	1a5b      	subs	r3, r3, r1
 8002630:	0031      	movs	r1, r6
 8002632:	0035      	movs	r5, r6
 8002634:	3808      	subs	r0, #8
 8002636:	4084      	lsls	r4, r0
 8002638:	40d9      	lsrs	r1, r3
 800263a:	4085      	lsls	r5, r0
 800263c:	430c      	orrs	r4, r1
 800263e:	4826      	ldr	r0, [pc, #152]	; (80026d8 <__aeabi_dmul+0x3a4>)
 8002640:	1a83      	subs	r3, r0, r2
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2300      	movs	r3, #0
 8002646:	4699      	mov	r9, r3
 8002648:	469b      	mov	fp, r3
 800264a:	e697      	b.n	800237c <__aeabi_dmul+0x48>
 800264c:	0005      	movs	r5, r0
 800264e:	4325      	orrs	r5, r4
 8002650:	d126      	bne.n	80026a0 <__aeabi_dmul+0x36c>
 8002652:	2208      	movs	r2, #8
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2302      	movs	r3, #2
 8002658:	2400      	movs	r4, #0
 800265a:	4691      	mov	r9, r2
 800265c:	469b      	mov	fp, r3
 800265e:	e68d      	b.n	800237c <__aeabi_dmul+0x48>
 8002660:	4652      	mov	r2, sl
 8002662:	9b00      	ldr	r3, [sp, #0]
 8002664:	4332      	orrs	r2, r6
 8002666:	d110      	bne.n	800268a <__aeabi_dmul+0x356>
 8002668:	4915      	ldr	r1, [pc, #84]	; (80026c0 <__aeabi_dmul+0x38c>)
 800266a:	2600      	movs	r6, #0
 800266c:	468c      	mov	ip, r1
 800266e:	4463      	add	r3, ip
 8002670:	4649      	mov	r1, r9
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2302      	movs	r3, #2
 8002676:	4319      	orrs	r1, r3
 8002678:	4689      	mov	r9, r1
 800267a:	2002      	movs	r0, #2
 800267c:	e69d      	b.n	80023ba <__aeabi_dmul+0x86>
 800267e:	465b      	mov	r3, fp
 8002680:	9701      	str	r7, [sp, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d000      	beq.n	8002688 <__aeabi_dmul+0x354>
 8002686:	e6ad      	b.n	80023e4 <__aeabi_dmul+0xb0>
 8002688:	e6c3      	b.n	8002412 <__aeabi_dmul+0xde>
 800268a:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <__aeabi_dmul+0x38c>)
 800268c:	2003      	movs	r0, #3
 800268e:	4694      	mov	ip, r2
 8002690:	4463      	add	r3, ip
 8002692:	464a      	mov	r2, r9
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	2303      	movs	r3, #3
 8002698:	431a      	orrs	r2, r3
 800269a:	4691      	mov	r9, r2
 800269c:	4652      	mov	r2, sl
 800269e:	e68c      	b.n	80023ba <__aeabi_dmul+0x86>
 80026a0:	220c      	movs	r2, #12
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2303      	movs	r3, #3
 80026a6:	0005      	movs	r5, r0
 80026a8:	4691      	mov	r9, r2
 80026aa:	469b      	mov	fp, r3
 80026ac:	e666      	b.n	800237c <__aeabi_dmul+0x48>
 80026ae:	2304      	movs	r3, #4
 80026b0:	4699      	mov	r9, r3
 80026b2:	2300      	movs	r3, #0
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	2400      	movs	r4, #0
 80026ba:	469b      	mov	fp, r3
 80026bc:	e65e      	b.n	800237c <__aeabi_dmul+0x48>
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	000007ff 	.word	0x000007ff
 80026c4:	fffffc01 	.word	0xfffffc01
 80026c8:	0800e520 	.word	0x0800e520
 80026cc:	000003ff 	.word	0x000003ff
 80026d0:	feffffff 	.word	0xfeffffff
 80026d4:	000007fe 	.word	0x000007fe
 80026d8:	fffffc0d 	.word	0xfffffc0d
 80026dc:	4649      	mov	r1, r9
 80026de:	2301      	movs	r3, #1
 80026e0:	4319      	orrs	r1, r3
 80026e2:	4689      	mov	r9, r1
 80026e4:	2600      	movs	r6, #0
 80026e6:	2001      	movs	r0, #1
 80026e8:	e667      	b.n	80023ba <__aeabi_dmul+0x86>
 80026ea:	2300      	movs	r3, #0
 80026ec:	2480      	movs	r4, #128	; 0x80
 80026ee:	2500      	movs	r5, #0
 80026f0:	4a43      	ldr	r2, [pc, #268]	; (8002800 <__aeabi_dmul+0x4cc>)
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	0324      	lsls	r4, r4, #12
 80026f6:	e67e      	b.n	80023f6 <__aeabi_dmul+0xc2>
 80026f8:	2001      	movs	r0, #1
 80026fa:	1a40      	subs	r0, r0, r1
 80026fc:	2838      	cmp	r0, #56	; 0x38
 80026fe:	dd00      	ble.n	8002702 <__aeabi_dmul+0x3ce>
 8002700:	e676      	b.n	80023f0 <__aeabi_dmul+0xbc>
 8002702:	281f      	cmp	r0, #31
 8002704:	dd5b      	ble.n	80027be <__aeabi_dmul+0x48a>
 8002706:	221f      	movs	r2, #31
 8002708:	0023      	movs	r3, r4
 800270a:	4252      	negs	r2, r2
 800270c:	1a51      	subs	r1, r2, r1
 800270e:	40cb      	lsrs	r3, r1
 8002710:	0019      	movs	r1, r3
 8002712:	2820      	cmp	r0, #32
 8002714:	d003      	beq.n	800271e <__aeabi_dmul+0x3ea>
 8002716:	4a3b      	ldr	r2, [pc, #236]	; (8002804 <__aeabi_dmul+0x4d0>)
 8002718:	4462      	add	r2, ip
 800271a:	4094      	lsls	r4, r2
 800271c:	4325      	orrs	r5, r4
 800271e:	1e6a      	subs	r2, r5, #1
 8002720:	4195      	sbcs	r5, r2
 8002722:	002a      	movs	r2, r5
 8002724:	430a      	orrs	r2, r1
 8002726:	2107      	movs	r1, #7
 8002728:	000d      	movs	r5, r1
 800272a:	2400      	movs	r4, #0
 800272c:	4015      	ands	r5, r2
 800272e:	4211      	tst	r1, r2
 8002730:	d05b      	beq.n	80027ea <__aeabi_dmul+0x4b6>
 8002732:	210f      	movs	r1, #15
 8002734:	2400      	movs	r4, #0
 8002736:	4011      	ands	r1, r2
 8002738:	2904      	cmp	r1, #4
 800273a:	d053      	beq.n	80027e4 <__aeabi_dmul+0x4b0>
 800273c:	1d11      	adds	r1, r2, #4
 800273e:	4291      	cmp	r1, r2
 8002740:	4192      	sbcs	r2, r2
 8002742:	4252      	negs	r2, r2
 8002744:	18a4      	adds	r4, r4, r2
 8002746:	000a      	movs	r2, r1
 8002748:	0223      	lsls	r3, r4, #8
 800274a:	d54b      	bpl.n	80027e4 <__aeabi_dmul+0x4b0>
 800274c:	2201      	movs	r2, #1
 800274e:	2400      	movs	r4, #0
 8002750:	2500      	movs	r5, #0
 8002752:	e650      	b.n	80023f6 <__aeabi_dmul+0xc2>
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	031b      	lsls	r3, r3, #12
 8002758:	421c      	tst	r4, r3
 800275a:	d009      	beq.n	8002770 <__aeabi_dmul+0x43c>
 800275c:	421e      	tst	r6, r3
 800275e:	d107      	bne.n	8002770 <__aeabi_dmul+0x43c>
 8002760:	4333      	orrs	r3, r6
 8002762:	031c      	lsls	r4, r3, #12
 8002764:	4643      	mov	r3, r8
 8002766:	0015      	movs	r5, r2
 8002768:	0b24      	lsrs	r4, r4, #12
 800276a:	4a25      	ldr	r2, [pc, #148]	; (8002800 <__aeabi_dmul+0x4cc>)
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	e642      	b.n	80023f6 <__aeabi_dmul+0xc2>
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	0312      	lsls	r2, r2, #12
 8002774:	4314      	orrs	r4, r2
 8002776:	0324      	lsls	r4, r4, #12
 8002778:	4a21      	ldr	r2, [pc, #132]	; (8002800 <__aeabi_dmul+0x4cc>)
 800277a:	0b24      	lsrs	r4, r4, #12
 800277c:	9701      	str	r7, [sp, #4]
 800277e:	e63a      	b.n	80023f6 <__aeabi_dmul+0xc2>
 8002780:	f000 fd50 	bl	8003224 <__clzsi2>
 8002784:	0001      	movs	r1, r0
 8002786:	0002      	movs	r2, r0
 8002788:	3115      	adds	r1, #21
 800278a:	3220      	adds	r2, #32
 800278c:	291c      	cmp	r1, #28
 800278e:	dc00      	bgt.n	8002792 <__aeabi_dmul+0x45e>
 8002790:	e74b      	b.n	800262a <__aeabi_dmul+0x2f6>
 8002792:	0034      	movs	r4, r6
 8002794:	3808      	subs	r0, #8
 8002796:	2500      	movs	r5, #0
 8002798:	4084      	lsls	r4, r0
 800279a:	e750      	b.n	800263e <__aeabi_dmul+0x30a>
 800279c:	f000 fd42 	bl	8003224 <__clzsi2>
 80027a0:	0003      	movs	r3, r0
 80027a2:	001a      	movs	r2, r3
 80027a4:	3215      	adds	r2, #21
 80027a6:	3020      	adds	r0, #32
 80027a8:	2a1c      	cmp	r2, #28
 80027aa:	dc00      	bgt.n	80027ae <__aeabi_dmul+0x47a>
 80027ac:	e71e      	b.n	80025ec <__aeabi_dmul+0x2b8>
 80027ae:	4656      	mov	r6, sl
 80027b0:	3b08      	subs	r3, #8
 80027b2:	2200      	movs	r2, #0
 80027b4:	409e      	lsls	r6, r3
 80027b6:	e723      	b.n	8002600 <__aeabi_dmul+0x2cc>
 80027b8:	9b00      	ldr	r3, [sp, #0]
 80027ba:	469c      	mov	ip, r3
 80027bc:	e6e6      	b.n	800258c <__aeabi_dmul+0x258>
 80027be:	4912      	ldr	r1, [pc, #72]	; (8002808 <__aeabi_dmul+0x4d4>)
 80027c0:	0022      	movs	r2, r4
 80027c2:	4461      	add	r1, ip
 80027c4:	002e      	movs	r6, r5
 80027c6:	408d      	lsls	r5, r1
 80027c8:	408a      	lsls	r2, r1
 80027ca:	40c6      	lsrs	r6, r0
 80027cc:	1e69      	subs	r1, r5, #1
 80027ce:	418d      	sbcs	r5, r1
 80027d0:	4332      	orrs	r2, r6
 80027d2:	432a      	orrs	r2, r5
 80027d4:	40c4      	lsrs	r4, r0
 80027d6:	0753      	lsls	r3, r2, #29
 80027d8:	d0b6      	beq.n	8002748 <__aeabi_dmul+0x414>
 80027da:	210f      	movs	r1, #15
 80027dc:	4011      	ands	r1, r2
 80027de:	2904      	cmp	r1, #4
 80027e0:	d1ac      	bne.n	800273c <__aeabi_dmul+0x408>
 80027e2:	e7b1      	b.n	8002748 <__aeabi_dmul+0x414>
 80027e4:	0765      	lsls	r5, r4, #29
 80027e6:	0264      	lsls	r4, r4, #9
 80027e8:	0b24      	lsrs	r4, r4, #12
 80027ea:	08d2      	lsrs	r2, r2, #3
 80027ec:	4315      	orrs	r5, r2
 80027ee:	2200      	movs	r2, #0
 80027f0:	e601      	b.n	80023f6 <__aeabi_dmul+0xc2>
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	0312      	lsls	r2, r2, #12
 80027f6:	4314      	orrs	r4, r2
 80027f8:	0324      	lsls	r4, r4, #12
 80027fa:	4a01      	ldr	r2, [pc, #4]	; (8002800 <__aeabi_dmul+0x4cc>)
 80027fc:	0b24      	lsrs	r4, r4, #12
 80027fe:	e5fa      	b.n	80023f6 <__aeabi_dmul+0xc2>
 8002800:	000007ff 	.word	0x000007ff
 8002804:	0000043e 	.word	0x0000043e
 8002808:	0000041e 	.word	0x0000041e

0800280c <__aeabi_dsub>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	4657      	mov	r7, sl
 8002810:	464e      	mov	r6, r9
 8002812:	4645      	mov	r5, r8
 8002814:	46de      	mov	lr, fp
 8002816:	b5e0      	push	{r5, r6, r7, lr}
 8002818:	001e      	movs	r6, r3
 800281a:	0017      	movs	r7, r2
 800281c:	004a      	lsls	r2, r1, #1
 800281e:	030b      	lsls	r3, r1, #12
 8002820:	0d52      	lsrs	r2, r2, #21
 8002822:	0a5b      	lsrs	r3, r3, #9
 8002824:	4690      	mov	r8, r2
 8002826:	0f42      	lsrs	r2, r0, #29
 8002828:	431a      	orrs	r2, r3
 800282a:	0fcd      	lsrs	r5, r1, #31
 800282c:	4ccd      	ldr	r4, [pc, #820]	; (8002b64 <__aeabi_dsub+0x358>)
 800282e:	0331      	lsls	r1, r6, #12
 8002830:	00c3      	lsls	r3, r0, #3
 8002832:	4694      	mov	ip, r2
 8002834:	0070      	lsls	r0, r6, #1
 8002836:	0f7a      	lsrs	r2, r7, #29
 8002838:	0a49      	lsrs	r1, r1, #9
 800283a:	00ff      	lsls	r7, r7, #3
 800283c:	469a      	mov	sl, r3
 800283e:	46b9      	mov	r9, r7
 8002840:	0d40      	lsrs	r0, r0, #21
 8002842:	0ff6      	lsrs	r6, r6, #31
 8002844:	4311      	orrs	r1, r2
 8002846:	42a0      	cmp	r0, r4
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x40>
 800284a:	e0b1      	b.n	80029b0 <__aeabi_dsub+0x1a4>
 800284c:	2201      	movs	r2, #1
 800284e:	4056      	eors	r6, r2
 8002850:	46b3      	mov	fp, r6
 8002852:	42b5      	cmp	r5, r6
 8002854:	d100      	bne.n	8002858 <__aeabi_dsub+0x4c>
 8002856:	e088      	b.n	800296a <__aeabi_dsub+0x15e>
 8002858:	4642      	mov	r2, r8
 800285a:	1a12      	subs	r2, r2, r0
 800285c:	2a00      	cmp	r2, #0
 800285e:	dc00      	bgt.n	8002862 <__aeabi_dsub+0x56>
 8002860:	e0ae      	b.n	80029c0 <__aeabi_dsub+0x1b4>
 8002862:	2800      	cmp	r0, #0
 8002864:	d100      	bne.n	8002868 <__aeabi_dsub+0x5c>
 8002866:	e0c1      	b.n	80029ec <__aeabi_dsub+0x1e0>
 8002868:	48be      	ldr	r0, [pc, #760]	; (8002b64 <__aeabi_dsub+0x358>)
 800286a:	4580      	cmp	r8, r0
 800286c:	d100      	bne.n	8002870 <__aeabi_dsub+0x64>
 800286e:	e151      	b.n	8002b14 <__aeabi_dsub+0x308>
 8002870:	2080      	movs	r0, #128	; 0x80
 8002872:	0400      	lsls	r0, r0, #16
 8002874:	4301      	orrs	r1, r0
 8002876:	2a38      	cmp	r2, #56	; 0x38
 8002878:	dd00      	ble.n	800287c <__aeabi_dsub+0x70>
 800287a:	e17b      	b.n	8002b74 <__aeabi_dsub+0x368>
 800287c:	2a1f      	cmp	r2, #31
 800287e:	dd00      	ble.n	8002882 <__aeabi_dsub+0x76>
 8002880:	e1ee      	b.n	8002c60 <__aeabi_dsub+0x454>
 8002882:	2020      	movs	r0, #32
 8002884:	003e      	movs	r6, r7
 8002886:	1a80      	subs	r0, r0, r2
 8002888:	000c      	movs	r4, r1
 800288a:	40d6      	lsrs	r6, r2
 800288c:	40d1      	lsrs	r1, r2
 800288e:	4087      	lsls	r7, r0
 8002890:	4662      	mov	r2, ip
 8002892:	4084      	lsls	r4, r0
 8002894:	1a52      	subs	r2, r2, r1
 8002896:	1e78      	subs	r0, r7, #1
 8002898:	4187      	sbcs	r7, r0
 800289a:	4694      	mov	ip, r2
 800289c:	4334      	orrs	r4, r6
 800289e:	4327      	orrs	r7, r4
 80028a0:	1bdc      	subs	r4, r3, r7
 80028a2:	42a3      	cmp	r3, r4
 80028a4:	419b      	sbcs	r3, r3
 80028a6:	4662      	mov	r2, ip
 80028a8:	425b      	negs	r3, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	4699      	mov	r9, r3
 80028ae:	464b      	mov	r3, r9
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	d400      	bmi.n	80028b6 <__aeabi_dsub+0xaa>
 80028b4:	e118      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 80028b6:	464b      	mov	r3, r9
 80028b8:	0258      	lsls	r0, r3, #9
 80028ba:	0a43      	lsrs	r3, r0, #9
 80028bc:	4699      	mov	r9, r3
 80028be:	464b      	mov	r3, r9
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d100      	bne.n	80028c6 <__aeabi_dsub+0xba>
 80028c4:	e137      	b.n	8002b36 <__aeabi_dsub+0x32a>
 80028c6:	4648      	mov	r0, r9
 80028c8:	f000 fcac 	bl	8003224 <__clzsi2>
 80028cc:	0001      	movs	r1, r0
 80028ce:	3908      	subs	r1, #8
 80028d0:	2320      	movs	r3, #32
 80028d2:	0022      	movs	r2, r4
 80028d4:	4648      	mov	r0, r9
 80028d6:	1a5b      	subs	r3, r3, r1
 80028d8:	40da      	lsrs	r2, r3
 80028da:	4088      	lsls	r0, r1
 80028dc:	408c      	lsls	r4, r1
 80028de:	4643      	mov	r3, r8
 80028e0:	4310      	orrs	r0, r2
 80028e2:	4588      	cmp	r8, r1
 80028e4:	dd00      	ble.n	80028e8 <__aeabi_dsub+0xdc>
 80028e6:	e136      	b.n	8002b56 <__aeabi_dsub+0x34a>
 80028e8:	1ac9      	subs	r1, r1, r3
 80028ea:	1c4b      	adds	r3, r1, #1
 80028ec:	2b1f      	cmp	r3, #31
 80028ee:	dd00      	ble.n	80028f2 <__aeabi_dsub+0xe6>
 80028f0:	e0ea      	b.n	8002ac8 <__aeabi_dsub+0x2bc>
 80028f2:	2220      	movs	r2, #32
 80028f4:	0026      	movs	r6, r4
 80028f6:	1ad2      	subs	r2, r2, r3
 80028f8:	0001      	movs	r1, r0
 80028fa:	4094      	lsls	r4, r2
 80028fc:	40de      	lsrs	r6, r3
 80028fe:	40d8      	lsrs	r0, r3
 8002900:	2300      	movs	r3, #0
 8002902:	4091      	lsls	r1, r2
 8002904:	1e62      	subs	r2, r4, #1
 8002906:	4194      	sbcs	r4, r2
 8002908:	4681      	mov	r9, r0
 800290a:	4698      	mov	r8, r3
 800290c:	4331      	orrs	r1, r6
 800290e:	430c      	orrs	r4, r1
 8002910:	0763      	lsls	r3, r4, #29
 8002912:	d009      	beq.n	8002928 <__aeabi_dsub+0x11c>
 8002914:	230f      	movs	r3, #15
 8002916:	4023      	ands	r3, r4
 8002918:	2b04      	cmp	r3, #4
 800291a:	d005      	beq.n	8002928 <__aeabi_dsub+0x11c>
 800291c:	1d23      	adds	r3, r4, #4
 800291e:	42a3      	cmp	r3, r4
 8002920:	41a4      	sbcs	r4, r4
 8002922:	4264      	negs	r4, r4
 8002924:	44a1      	add	r9, r4
 8002926:	001c      	movs	r4, r3
 8002928:	464b      	mov	r3, r9
 800292a:	021b      	lsls	r3, r3, #8
 800292c:	d400      	bmi.n	8002930 <__aeabi_dsub+0x124>
 800292e:	e0de      	b.n	8002aee <__aeabi_dsub+0x2e2>
 8002930:	4641      	mov	r1, r8
 8002932:	4b8c      	ldr	r3, [pc, #560]	; (8002b64 <__aeabi_dsub+0x358>)
 8002934:	3101      	adds	r1, #1
 8002936:	4299      	cmp	r1, r3
 8002938:	d100      	bne.n	800293c <__aeabi_dsub+0x130>
 800293a:	e0e7      	b.n	8002b0c <__aeabi_dsub+0x300>
 800293c:	464b      	mov	r3, r9
 800293e:	488a      	ldr	r0, [pc, #552]	; (8002b68 <__aeabi_dsub+0x35c>)
 8002940:	08e4      	lsrs	r4, r4, #3
 8002942:	4003      	ands	r3, r0
 8002944:	0018      	movs	r0, r3
 8002946:	0549      	lsls	r1, r1, #21
 8002948:	075b      	lsls	r3, r3, #29
 800294a:	0240      	lsls	r0, r0, #9
 800294c:	4323      	orrs	r3, r4
 800294e:	0d4a      	lsrs	r2, r1, #21
 8002950:	0b04      	lsrs	r4, r0, #12
 8002952:	0512      	lsls	r2, r2, #20
 8002954:	07ed      	lsls	r5, r5, #31
 8002956:	4322      	orrs	r2, r4
 8002958:	432a      	orrs	r2, r5
 800295a:	0018      	movs	r0, r3
 800295c:	0011      	movs	r1, r2
 800295e:	bcf0      	pop	{r4, r5, r6, r7}
 8002960:	46bb      	mov	fp, r7
 8002962:	46b2      	mov	sl, r6
 8002964:	46a9      	mov	r9, r5
 8002966:	46a0      	mov	r8, r4
 8002968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800296a:	4642      	mov	r2, r8
 800296c:	1a12      	subs	r2, r2, r0
 800296e:	2a00      	cmp	r2, #0
 8002970:	dd52      	ble.n	8002a18 <__aeabi_dsub+0x20c>
 8002972:	2800      	cmp	r0, #0
 8002974:	d100      	bne.n	8002978 <__aeabi_dsub+0x16c>
 8002976:	e09c      	b.n	8002ab2 <__aeabi_dsub+0x2a6>
 8002978:	45a0      	cmp	r8, r4
 800297a:	d100      	bne.n	800297e <__aeabi_dsub+0x172>
 800297c:	e0ca      	b.n	8002b14 <__aeabi_dsub+0x308>
 800297e:	2080      	movs	r0, #128	; 0x80
 8002980:	0400      	lsls	r0, r0, #16
 8002982:	4301      	orrs	r1, r0
 8002984:	2a38      	cmp	r2, #56	; 0x38
 8002986:	dd00      	ble.n	800298a <__aeabi_dsub+0x17e>
 8002988:	e149      	b.n	8002c1e <__aeabi_dsub+0x412>
 800298a:	2a1f      	cmp	r2, #31
 800298c:	dc00      	bgt.n	8002990 <__aeabi_dsub+0x184>
 800298e:	e197      	b.n	8002cc0 <__aeabi_dsub+0x4b4>
 8002990:	0010      	movs	r0, r2
 8002992:	000e      	movs	r6, r1
 8002994:	3820      	subs	r0, #32
 8002996:	40c6      	lsrs	r6, r0
 8002998:	2a20      	cmp	r2, #32
 800299a:	d004      	beq.n	80029a6 <__aeabi_dsub+0x19a>
 800299c:	2040      	movs	r0, #64	; 0x40
 800299e:	1a82      	subs	r2, r0, r2
 80029a0:	4091      	lsls	r1, r2
 80029a2:	430f      	orrs	r7, r1
 80029a4:	46b9      	mov	r9, r7
 80029a6:	464c      	mov	r4, r9
 80029a8:	1e62      	subs	r2, r4, #1
 80029aa:	4194      	sbcs	r4, r2
 80029ac:	4334      	orrs	r4, r6
 80029ae:	e13a      	b.n	8002c26 <__aeabi_dsub+0x41a>
 80029b0:	000a      	movs	r2, r1
 80029b2:	433a      	orrs	r2, r7
 80029b4:	d028      	beq.n	8002a08 <__aeabi_dsub+0x1fc>
 80029b6:	46b3      	mov	fp, r6
 80029b8:	42b5      	cmp	r5, r6
 80029ba:	d02b      	beq.n	8002a14 <__aeabi_dsub+0x208>
 80029bc:	4a6b      	ldr	r2, [pc, #428]	; (8002b6c <__aeabi_dsub+0x360>)
 80029be:	4442      	add	r2, r8
 80029c0:	2a00      	cmp	r2, #0
 80029c2:	d05d      	beq.n	8002a80 <__aeabi_dsub+0x274>
 80029c4:	4642      	mov	r2, r8
 80029c6:	4644      	mov	r4, r8
 80029c8:	1a82      	subs	r2, r0, r2
 80029ca:	2c00      	cmp	r4, #0
 80029cc:	d000      	beq.n	80029d0 <__aeabi_dsub+0x1c4>
 80029ce:	e0f5      	b.n	8002bbc <__aeabi_dsub+0x3b0>
 80029d0:	4665      	mov	r5, ip
 80029d2:	431d      	orrs	r5, r3
 80029d4:	d100      	bne.n	80029d8 <__aeabi_dsub+0x1cc>
 80029d6:	e19c      	b.n	8002d12 <__aeabi_dsub+0x506>
 80029d8:	1e55      	subs	r5, r2, #1
 80029da:	2a01      	cmp	r2, #1
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x1d4>
 80029de:	e1fb      	b.n	8002dd8 <__aeabi_dsub+0x5cc>
 80029e0:	4c60      	ldr	r4, [pc, #384]	; (8002b64 <__aeabi_dsub+0x358>)
 80029e2:	42a2      	cmp	r2, r4
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x1dc>
 80029e6:	e1bd      	b.n	8002d64 <__aeabi_dsub+0x558>
 80029e8:	002a      	movs	r2, r5
 80029ea:	e0f0      	b.n	8002bce <__aeabi_dsub+0x3c2>
 80029ec:	0008      	movs	r0, r1
 80029ee:	4338      	orrs	r0, r7
 80029f0:	d100      	bne.n	80029f4 <__aeabi_dsub+0x1e8>
 80029f2:	e0c3      	b.n	8002b7c <__aeabi_dsub+0x370>
 80029f4:	1e50      	subs	r0, r2, #1
 80029f6:	2a01      	cmp	r2, #1
 80029f8:	d100      	bne.n	80029fc <__aeabi_dsub+0x1f0>
 80029fa:	e1a8      	b.n	8002d4e <__aeabi_dsub+0x542>
 80029fc:	4c59      	ldr	r4, [pc, #356]	; (8002b64 <__aeabi_dsub+0x358>)
 80029fe:	42a2      	cmp	r2, r4
 8002a00:	d100      	bne.n	8002a04 <__aeabi_dsub+0x1f8>
 8002a02:	e087      	b.n	8002b14 <__aeabi_dsub+0x308>
 8002a04:	0002      	movs	r2, r0
 8002a06:	e736      	b.n	8002876 <__aeabi_dsub+0x6a>
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4056      	eors	r6, r2
 8002a0c:	46b3      	mov	fp, r6
 8002a0e:	42b5      	cmp	r5, r6
 8002a10:	d000      	beq.n	8002a14 <__aeabi_dsub+0x208>
 8002a12:	e721      	b.n	8002858 <__aeabi_dsub+0x4c>
 8002a14:	4a55      	ldr	r2, [pc, #340]	; (8002b6c <__aeabi_dsub+0x360>)
 8002a16:	4442      	add	r2, r8
 8002a18:	2a00      	cmp	r2, #0
 8002a1a:	d100      	bne.n	8002a1e <__aeabi_dsub+0x212>
 8002a1c:	e0b5      	b.n	8002b8a <__aeabi_dsub+0x37e>
 8002a1e:	4642      	mov	r2, r8
 8002a20:	4644      	mov	r4, r8
 8002a22:	1a82      	subs	r2, r0, r2
 8002a24:	2c00      	cmp	r4, #0
 8002a26:	d100      	bne.n	8002a2a <__aeabi_dsub+0x21e>
 8002a28:	e138      	b.n	8002c9c <__aeabi_dsub+0x490>
 8002a2a:	4e4e      	ldr	r6, [pc, #312]	; (8002b64 <__aeabi_dsub+0x358>)
 8002a2c:	42b0      	cmp	r0, r6
 8002a2e:	d100      	bne.n	8002a32 <__aeabi_dsub+0x226>
 8002a30:	e1de      	b.n	8002df0 <__aeabi_dsub+0x5e4>
 8002a32:	2680      	movs	r6, #128	; 0x80
 8002a34:	4664      	mov	r4, ip
 8002a36:	0436      	lsls	r6, r6, #16
 8002a38:	4334      	orrs	r4, r6
 8002a3a:	46a4      	mov	ip, r4
 8002a3c:	2a38      	cmp	r2, #56	; 0x38
 8002a3e:	dd00      	ble.n	8002a42 <__aeabi_dsub+0x236>
 8002a40:	e196      	b.n	8002d70 <__aeabi_dsub+0x564>
 8002a42:	2a1f      	cmp	r2, #31
 8002a44:	dd00      	ble.n	8002a48 <__aeabi_dsub+0x23c>
 8002a46:	e224      	b.n	8002e92 <__aeabi_dsub+0x686>
 8002a48:	2620      	movs	r6, #32
 8002a4a:	1ab4      	subs	r4, r6, r2
 8002a4c:	46a2      	mov	sl, r4
 8002a4e:	4664      	mov	r4, ip
 8002a50:	4656      	mov	r6, sl
 8002a52:	40b4      	lsls	r4, r6
 8002a54:	46a1      	mov	r9, r4
 8002a56:	001c      	movs	r4, r3
 8002a58:	464e      	mov	r6, r9
 8002a5a:	40d4      	lsrs	r4, r2
 8002a5c:	4326      	orrs	r6, r4
 8002a5e:	0034      	movs	r4, r6
 8002a60:	4656      	mov	r6, sl
 8002a62:	40b3      	lsls	r3, r6
 8002a64:	1e5e      	subs	r6, r3, #1
 8002a66:	41b3      	sbcs	r3, r6
 8002a68:	431c      	orrs	r4, r3
 8002a6a:	4663      	mov	r3, ip
 8002a6c:	40d3      	lsrs	r3, r2
 8002a6e:	18c9      	adds	r1, r1, r3
 8002a70:	19e4      	adds	r4, r4, r7
 8002a72:	42bc      	cmp	r4, r7
 8002a74:	41bf      	sbcs	r7, r7
 8002a76:	427f      	negs	r7, r7
 8002a78:	46b9      	mov	r9, r7
 8002a7a:	4680      	mov	r8, r0
 8002a7c:	4489      	add	r9, r1
 8002a7e:	e0d8      	b.n	8002c32 <__aeabi_dsub+0x426>
 8002a80:	4640      	mov	r0, r8
 8002a82:	4c3b      	ldr	r4, [pc, #236]	; (8002b70 <__aeabi_dsub+0x364>)
 8002a84:	3001      	adds	r0, #1
 8002a86:	4220      	tst	r0, r4
 8002a88:	d000      	beq.n	8002a8c <__aeabi_dsub+0x280>
 8002a8a:	e0b4      	b.n	8002bf6 <__aeabi_dsub+0x3ea>
 8002a8c:	4640      	mov	r0, r8
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d000      	beq.n	8002a94 <__aeabi_dsub+0x288>
 8002a92:	e144      	b.n	8002d1e <__aeabi_dsub+0x512>
 8002a94:	4660      	mov	r0, ip
 8002a96:	4318      	orrs	r0, r3
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x290>
 8002a9a:	e190      	b.n	8002dbe <__aeabi_dsub+0x5b2>
 8002a9c:	0008      	movs	r0, r1
 8002a9e:	4338      	orrs	r0, r7
 8002aa0:	d000      	beq.n	8002aa4 <__aeabi_dsub+0x298>
 8002aa2:	e1aa      	b.n	8002dfa <__aeabi_dsub+0x5ee>
 8002aa4:	4661      	mov	r1, ip
 8002aa6:	08db      	lsrs	r3, r3, #3
 8002aa8:	0749      	lsls	r1, r1, #29
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	4661      	mov	r1, ip
 8002aae:	08cc      	lsrs	r4, r1, #3
 8002ab0:	e027      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002ab2:	0008      	movs	r0, r1
 8002ab4:	4338      	orrs	r0, r7
 8002ab6:	d061      	beq.n	8002b7c <__aeabi_dsub+0x370>
 8002ab8:	1e50      	subs	r0, r2, #1
 8002aba:	2a01      	cmp	r2, #1
 8002abc:	d100      	bne.n	8002ac0 <__aeabi_dsub+0x2b4>
 8002abe:	e139      	b.n	8002d34 <__aeabi_dsub+0x528>
 8002ac0:	42a2      	cmp	r2, r4
 8002ac2:	d027      	beq.n	8002b14 <__aeabi_dsub+0x308>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	e75d      	b.n	8002984 <__aeabi_dsub+0x178>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	391f      	subs	r1, #31
 8002acc:	40ca      	lsrs	r2, r1
 8002ace:	0011      	movs	r1, r2
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d003      	beq.n	8002adc <__aeabi_dsub+0x2d0>
 8002ad4:	2240      	movs	r2, #64	; 0x40
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	4098      	lsls	r0, r3
 8002ada:	4304      	orrs	r4, r0
 8002adc:	1e63      	subs	r3, r4, #1
 8002ade:	419c      	sbcs	r4, r3
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	4699      	mov	r9, r3
 8002ae4:	4698      	mov	r8, r3
 8002ae6:	430c      	orrs	r4, r1
 8002ae8:	0763      	lsls	r3, r4, #29
 8002aea:	d000      	beq.n	8002aee <__aeabi_dsub+0x2e2>
 8002aec:	e712      	b.n	8002914 <__aeabi_dsub+0x108>
 8002aee:	464b      	mov	r3, r9
 8002af0:	464a      	mov	r2, r9
 8002af2:	08e4      	lsrs	r4, r4, #3
 8002af4:	075b      	lsls	r3, r3, #29
 8002af6:	4323      	orrs	r3, r4
 8002af8:	08d4      	lsrs	r4, r2, #3
 8002afa:	4642      	mov	r2, r8
 8002afc:	4919      	ldr	r1, [pc, #100]	; (8002b64 <__aeabi_dsub+0x358>)
 8002afe:	428a      	cmp	r2, r1
 8002b00:	d00e      	beq.n	8002b20 <__aeabi_dsub+0x314>
 8002b02:	0324      	lsls	r4, r4, #12
 8002b04:	0552      	lsls	r2, r2, #21
 8002b06:	0b24      	lsrs	r4, r4, #12
 8002b08:	0d52      	lsrs	r2, r2, #21
 8002b0a:	e722      	b.n	8002952 <__aeabi_dsub+0x146>
 8002b0c:	000a      	movs	r2, r1
 8002b0e:	2400      	movs	r4, #0
 8002b10:	2300      	movs	r3, #0
 8002b12:	e71e      	b.n	8002952 <__aeabi_dsub+0x146>
 8002b14:	08db      	lsrs	r3, r3, #3
 8002b16:	4662      	mov	r2, ip
 8002b18:	0752      	lsls	r2, r2, #29
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	4662      	mov	r2, ip
 8002b1e:	08d4      	lsrs	r4, r2, #3
 8002b20:	001a      	movs	r2, r3
 8002b22:	4322      	orrs	r2, r4
 8002b24:	d100      	bne.n	8002b28 <__aeabi_dsub+0x31c>
 8002b26:	e1fc      	b.n	8002f22 <__aeabi_dsub+0x716>
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	0312      	lsls	r2, r2, #12
 8002b2c:	4314      	orrs	r4, r2
 8002b2e:	0324      	lsls	r4, r4, #12
 8002b30:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <__aeabi_dsub+0x358>)
 8002b32:	0b24      	lsrs	r4, r4, #12
 8002b34:	e70d      	b.n	8002952 <__aeabi_dsub+0x146>
 8002b36:	0020      	movs	r0, r4
 8002b38:	f000 fb74 	bl	8003224 <__clzsi2>
 8002b3c:	0001      	movs	r1, r0
 8002b3e:	3118      	adds	r1, #24
 8002b40:	291f      	cmp	r1, #31
 8002b42:	dc00      	bgt.n	8002b46 <__aeabi_dsub+0x33a>
 8002b44:	e6c4      	b.n	80028d0 <__aeabi_dsub+0xc4>
 8002b46:	3808      	subs	r0, #8
 8002b48:	4084      	lsls	r4, r0
 8002b4a:	4643      	mov	r3, r8
 8002b4c:	0020      	movs	r0, r4
 8002b4e:	2400      	movs	r4, #0
 8002b50:	4588      	cmp	r8, r1
 8002b52:	dc00      	bgt.n	8002b56 <__aeabi_dsub+0x34a>
 8002b54:	e6c8      	b.n	80028e8 <__aeabi_dsub+0xdc>
 8002b56:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <__aeabi_dsub+0x35c>)
 8002b58:	1a5b      	subs	r3, r3, r1
 8002b5a:	4010      	ands	r0, r2
 8002b5c:	4698      	mov	r8, r3
 8002b5e:	4681      	mov	r9, r0
 8002b60:	e6d6      	b.n	8002910 <__aeabi_dsub+0x104>
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	000007ff 	.word	0x000007ff
 8002b68:	ff7fffff 	.word	0xff7fffff
 8002b6c:	fffff801 	.word	0xfffff801
 8002b70:	000007fe 	.word	0x000007fe
 8002b74:	430f      	orrs	r7, r1
 8002b76:	1e7a      	subs	r2, r7, #1
 8002b78:	4197      	sbcs	r7, r2
 8002b7a:	e691      	b.n	80028a0 <__aeabi_dsub+0x94>
 8002b7c:	4661      	mov	r1, ip
 8002b7e:	08db      	lsrs	r3, r3, #3
 8002b80:	0749      	lsls	r1, r1, #29
 8002b82:	430b      	orrs	r3, r1
 8002b84:	4661      	mov	r1, ip
 8002b86:	08cc      	lsrs	r4, r1, #3
 8002b88:	e7b8      	b.n	8002afc <__aeabi_dsub+0x2f0>
 8002b8a:	4640      	mov	r0, r8
 8002b8c:	4cd3      	ldr	r4, [pc, #844]	; (8002edc <__aeabi_dsub+0x6d0>)
 8002b8e:	3001      	adds	r0, #1
 8002b90:	4220      	tst	r0, r4
 8002b92:	d000      	beq.n	8002b96 <__aeabi_dsub+0x38a>
 8002b94:	e0a2      	b.n	8002cdc <__aeabi_dsub+0x4d0>
 8002b96:	4640      	mov	r0, r8
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d000      	beq.n	8002b9e <__aeabi_dsub+0x392>
 8002b9c:	e101      	b.n	8002da2 <__aeabi_dsub+0x596>
 8002b9e:	4660      	mov	r0, ip
 8002ba0:	4318      	orrs	r0, r3
 8002ba2:	d100      	bne.n	8002ba6 <__aeabi_dsub+0x39a>
 8002ba4:	e15e      	b.n	8002e64 <__aeabi_dsub+0x658>
 8002ba6:	0008      	movs	r0, r1
 8002ba8:	4338      	orrs	r0, r7
 8002baa:	d000      	beq.n	8002bae <__aeabi_dsub+0x3a2>
 8002bac:	e15f      	b.n	8002e6e <__aeabi_dsub+0x662>
 8002bae:	4661      	mov	r1, ip
 8002bb0:	08db      	lsrs	r3, r3, #3
 8002bb2:	0749      	lsls	r1, r1, #29
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	4661      	mov	r1, ip
 8002bb8:	08cc      	lsrs	r4, r1, #3
 8002bba:	e7a2      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002bbc:	4dc8      	ldr	r5, [pc, #800]	; (8002ee0 <__aeabi_dsub+0x6d4>)
 8002bbe:	42a8      	cmp	r0, r5
 8002bc0:	d100      	bne.n	8002bc4 <__aeabi_dsub+0x3b8>
 8002bc2:	e0cf      	b.n	8002d64 <__aeabi_dsub+0x558>
 8002bc4:	2580      	movs	r5, #128	; 0x80
 8002bc6:	4664      	mov	r4, ip
 8002bc8:	042d      	lsls	r5, r5, #16
 8002bca:	432c      	orrs	r4, r5
 8002bcc:	46a4      	mov	ip, r4
 8002bce:	2a38      	cmp	r2, #56	; 0x38
 8002bd0:	dc56      	bgt.n	8002c80 <__aeabi_dsub+0x474>
 8002bd2:	2a1f      	cmp	r2, #31
 8002bd4:	dd00      	ble.n	8002bd8 <__aeabi_dsub+0x3cc>
 8002bd6:	e0d1      	b.n	8002d7c <__aeabi_dsub+0x570>
 8002bd8:	2520      	movs	r5, #32
 8002bda:	001e      	movs	r6, r3
 8002bdc:	1aad      	subs	r5, r5, r2
 8002bde:	4664      	mov	r4, ip
 8002be0:	40ab      	lsls	r3, r5
 8002be2:	40ac      	lsls	r4, r5
 8002be4:	40d6      	lsrs	r6, r2
 8002be6:	1e5d      	subs	r5, r3, #1
 8002be8:	41ab      	sbcs	r3, r5
 8002bea:	4334      	orrs	r4, r6
 8002bec:	4323      	orrs	r3, r4
 8002bee:	4664      	mov	r4, ip
 8002bf0:	40d4      	lsrs	r4, r2
 8002bf2:	1b09      	subs	r1, r1, r4
 8002bf4:	e049      	b.n	8002c8a <__aeabi_dsub+0x47e>
 8002bf6:	4660      	mov	r0, ip
 8002bf8:	1bdc      	subs	r4, r3, r7
 8002bfa:	1a46      	subs	r6, r0, r1
 8002bfc:	42a3      	cmp	r3, r4
 8002bfe:	4180      	sbcs	r0, r0
 8002c00:	4240      	negs	r0, r0
 8002c02:	4681      	mov	r9, r0
 8002c04:	0030      	movs	r0, r6
 8002c06:	464e      	mov	r6, r9
 8002c08:	1b80      	subs	r0, r0, r6
 8002c0a:	4681      	mov	r9, r0
 8002c0c:	0200      	lsls	r0, r0, #8
 8002c0e:	d476      	bmi.n	8002cfe <__aeabi_dsub+0x4f2>
 8002c10:	464b      	mov	r3, r9
 8002c12:	4323      	orrs	r3, r4
 8002c14:	d000      	beq.n	8002c18 <__aeabi_dsub+0x40c>
 8002c16:	e652      	b.n	80028be <__aeabi_dsub+0xb2>
 8002c18:	2400      	movs	r4, #0
 8002c1a:	2500      	movs	r5, #0
 8002c1c:	e771      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002c1e:	4339      	orrs	r1, r7
 8002c20:	000c      	movs	r4, r1
 8002c22:	1e62      	subs	r2, r4, #1
 8002c24:	4194      	sbcs	r4, r2
 8002c26:	18e4      	adds	r4, r4, r3
 8002c28:	429c      	cmp	r4, r3
 8002c2a:	419b      	sbcs	r3, r3
 8002c2c:	425b      	negs	r3, r3
 8002c2e:	4463      	add	r3, ip
 8002c30:	4699      	mov	r9, r3
 8002c32:	464b      	mov	r3, r9
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	d400      	bmi.n	8002c3a <__aeabi_dsub+0x42e>
 8002c38:	e756      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	469c      	mov	ip, r3
 8002c3e:	4ba8      	ldr	r3, [pc, #672]	; (8002ee0 <__aeabi_dsub+0x6d4>)
 8002c40:	44e0      	add	r8, ip
 8002c42:	4598      	cmp	r8, r3
 8002c44:	d038      	beq.n	8002cb8 <__aeabi_dsub+0x4ac>
 8002c46:	464b      	mov	r3, r9
 8002c48:	48a6      	ldr	r0, [pc, #664]	; (8002ee4 <__aeabi_dsub+0x6d8>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4003      	ands	r3, r0
 8002c4e:	0018      	movs	r0, r3
 8002c50:	0863      	lsrs	r3, r4, #1
 8002c52:	4014      	ands	r4, r2
 8002c54:	431c      	orrs	r4, r3
 8002c56:	07c3      	lsls	r3, r0, #31
 8002c58:	431c      	orrs	r4, r3
 8002c5a:	0843      	lsrs	r3, r0, #1
 8002c5c:	4699      	mov	r9, r3
 8002c5e:	e657      	b.n	8002910 <__aeabi_dsub+0x104>
 8002c60:	0010      	movs	r0, r2
 8002c62:	000e      	movs	r6, r1
 8002c64:	3820      	subs	r0, #32
 8002c66:	40c6      	lsrs	r6, r0
 8002c68:	2a20      	cmp	r2, #32
 8002c6a:	d004      	beq.n	8002c76 <__aeabi_dsub+0x46a>
 8002c6c:	2040      	movs	r0, #64	; 0x40
 8002c6e:	1a82      	subs	r2, r0, r2
 8002c70:	4091      	lsls	r1, r2
 8002c72:	430f      	orrs	r7, r1
 8002c74:	46b9      	mov	r9, r7
 8002c76:	464f      	mov	r7, r9
 8002c78:	1e7a      	subs	r2, r7, #1
 8002c7a:	4197      	sbcs	r7, r2
 8002c7c:	4337      	orrs	r7, r6
 8002c7e:	e60f      	b.n	80028a0 <__aeabi_dsub+0x94>
 8002c80:	4662      	mov	r2, ip
 8002c82:	431a      	orrs	r2, r3
 8002c84:	0013      	movs	r3, r2
 8002c86:	1e5a      	subs	r2, r3, #1
 8002c88:	4193      	sbcs	r3, r2
 8002c8a:	1afc      	subs	r4, r7, r3
 8002c8c:	42a7      	cmp	r7, r4
 8002c8e:	41bf      	sbcs	r7, r7
 8002c90:	427f      	negs	r7, r7
 8002c92:	1bcb      	subs	r3, r1, r7
 8002c94:	4699      	mov	r9, r3
 8002c96:	465d      	mov	r5, fp
 8002c98:	4680      	mov	r8, r0
 8002c9a:	e608      	b.n	80028ae <__aeabi_dsub+0xa2>
 8002c9c:	4666      	mov	r6, ip
 8002c9e:	431e      	orrs	r6, r3
 8002ca0:	d100      	bne.n	8002ca4 <__aeabi_dsub+0x498>
 8002ca2:	e0be      	b.n	8002e22 <__aeabi_dsub+0x616>
 8002ca4:	1e56      	subs	r6, r2, #1
 8002ca6:	2a01      	cmp	r2, #1
 8002ca8:	d100      	bne.n	8002cac <__aeabi_dsub+0x4a0>
 8002caa:	e109      	b.n	8002ec0 <__aeabi_dsub+0x6b4>
 8002cac:	4c8c      	ldr	r4, [pc, #560]	; (8002ee0 <__aeabi_dsub+0x6d4>)
 8002cae:	42a2      	cmp	r2, r4
 8002cb0:	d100      	bne.n	8002cb4 <__aeabi_dsub+0x4a8>
 8002cb2:	e119      	b.n	8002ee8 <__aeabi_dsub+0x6dc>
 8002cb4:	0032      	movs	r2, r6
 8002cb6:	e6c1      	b.n	8002a3c <__aeabi_dsub+0x230>
 8002cb8:	4642      	mov	r2, r8
 8002cba:	2400      	movs	r4, #0
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e648      	b.n	8002952 <__aeabi_dsub+0x146>
 8002cc0:	2020      	movs	r0, #32
 8002cc2:	000c      	movs	r4, r1
 8002cc4:	1a80      	subs	r0, r0, r2
 8002cc6:	003e      	movs	r6, r7
 8002cc8:	4087      	lsls	r7, r0
 8002cca:	4084      	lsls	r4, r0
 8002ccc:	40d6      	lsrs	r6, r2
 8002cce:	1e78      	subs	r0, r7, #1
 8002cd0:	4187      	sbcs	r7, r0
 8002cd2:	40d1      	lsrs	r1, r2
 8002cd4:	4334      	orrs	r4, r6
 8002cd6:	433c      	orrs	r4, r7
 8002cd8:	448c      	add	ip, r1
 8002cda:	e7a4      	b.n	8002c26 <__aeabi_dsub+0x41a>
 8002cdc:	4a80      	ldr	r2, [pc, #512]	; (8002ee0 <__aeabi_dsub+0x6d4>)
 8002cde:	4290      	cmp	r0, r2
 8002ce0:	d100      	bne.n	8002ce4 <__aeabi_dsub+0x4d8>
 8002ce2:	e0e9      	b.n	8002eb8 <__aeabi_dsub+0x6ac>
 8002ce4:	19df      	adds	r7, r3, r7
 8002ce6:	429f      	cmp	r7, r3
 8002ce8:	419b      	sbcs	r3, r3
 8002cea:	4461      	add	r1, ip
 8002cec:	425b      	negs	r3, r3
 8002cee:	18c9      	adds	r1, r1, r3
 8002cf0:	07cc      	lsls	r4, r1, #31
 8002cf2:	087f      	lsrs	r7, r7, #1
 8002cf4:	084b      	lsrs	r3, r1, #1
 8002cf6:	4699      	mov	r9, r3
 8002cf8:	4680      	mov	r8, r0
 8002cfa:	433c      	orrs	r4, r7
 8002cfc:	e6f4      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002cfe:	1afc      	subs	r4, r7, r3
 8002d00:	42a7      	cmp	r7, r4
 8002d02:	41bf      	sbcs	r7, r7
 8002d04:	4663      	mov	r3, ip
 8002d06:	427f      	negs	r7, r7
 8002d08:	1ac9      	subs	r1, r1, r3
 8002d0a:	1bcb      	subs	r3, r1, r7
 8002d0c:	4699      	mov	r9, r3
 8002d0e:	465d      	mov	r5, fp
 8002d10:	e5d5      	b.n	80028be <__aeabi_dsub+0xb2>
 8002d12:	08ff      	lsrs	r7, r7, #3
 8002d14:	074b      	lsls	r3, r1, #29
 8002d16:	465d      	mov	r5, fp
 8002d18:	433b      	orrs	r3, r7
 8002d1a:	08cc      	lsrs	r4, r1, #3
 8002d1c:	e6ee      	b.n	8002afc <__aeabi_dsub+0x2f0>
 8002d1e:	4662      	mov	r2, ip
 8002d20:	431a      	orrs	r2, r3
 8002d22:	d000      	beq.n	8002d26 <__aeabi_dsub+0x51a>
 8002d24:	e082      	b.n	8002e2c <__aeabi_dsub+0x620>
 8002d26:	000b      	movs	r3, r1
 8002d28:	433b      	orrs	r3, r7
 8002d2a:	d11b      	bne.n	8002d64 <__aeabi_dsub+0x558>
 8002d2c:	2480      	movs	r4, #128	; 0x80
 8002d2e:	2500      	movs	r5, #0
 8002d30:	0324      	lsls	r4, r4, #12
 8002d32:	e6f9      	b.n	8002b28 <__aeabi_dsub+0x31c>
 8002d34:	19dc      	adds	r4, r3, r7
 8002d36:	429c      	cmp	r4, r3
 8002d38:	419b      	sbcs	r3, r3
 8002d3a:	4461      	add	r1, ip
 8002d3c:	4689      	mov	r9, r1
 8002d3e:	425b      	negs	r3, r3
 8002d40:	4499      	add	r9, r3
 8002d42:	464b      	mov	r3, r9
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	d444      	bmi.n	8002dd2 <__aeabi_dsub+0x5c6>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	4698      	mov	r8, r3
 8002d4c:	e6cc      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002d4e:	1bdc      	subs	r4, r3, r7
 8002d50:	4662      	mov	r2, ip
 8002d52:	42a3      	cmp	r3, r4
 8002d54:	419b      	sbcs	r3, r3
 8002d56:	1a51      	subs	r1, r2, r1
 8002d58:	425b      	negs	r3, r3
 8002d5a:	1acb      	subs	r3, r1, r3
 8002d5c:	4699      	mov	r9, r3
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4698      	mov	r8, r3
 8002d62:	e5a4      	b.n	80028ae <__aeabi_dsub+0xa2>
 8002d64:	08ff      	lsrs	r7, r7, #3
 8002d66:	074b      	lsls	r3, r1, #29
 8002d68:	465d      	mov	r5, fp
 8002d6a:	433b      	orrs	r3, r7
 8002d6c:	08cc      	lsrs	r4, r1, #3
 8002d6e:	e6d7      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002d70:	4662      	mov	r2, ip
 8002d72:	431a      	orrs	r2, r3
 8002d74:	0014      	movs	r4, r2
 8002d76:	1e63      	subs	r3, r4, #1
 8002d78:	419c      	sbcs	r4, r3
 8002d7a:	e679      	b.n	8002a70 <__aeabi_dsub+0x264>
 8002d7c:	0015      	movs	r5, r2
 8002d7e:	4664      	mov	r4, ip
 8002d80:	3d20      	subs	r5, #32
 8002d82:	40ec      	lsrs	r4, r5
 8002d84:	46a0      	mov	r8, r4
 8002d86:	2a20      	cmp	r2, #32
 8002d88:	d005      	beq.n	8002d96 <__aeabi_dsub+0x58a>
 8002d8a:	2540      	movs	r5, #64	; 0x40
 8002d8c:	4664      	mov	r4, ip
 8002d8e:	1aaa      	subs	r2, r5, r2
 8002d90:	4094      	lsls	r4, r2
 8002d92:	4323      	orrs	r3, r4
 8002d94:	469a      	mov	sl, r3
 8002d96:	4654      	mov	r4, sl
 8002d98:	1e63      	subs	r3, r4, #1
 8002d9a:	419c      	sbcs	r4, r3
 8002d9c:	4643      	mov	r3, r8
 8002d9e:	4323      	orrs	r3, r4
 8002da0:	e773      	b.n	8002c8a <__aeabi_dsub+0x47e>
 8002da2:	4662      	mov	r2, ip
 8002da4:	431a      	orrs	r2, r3
 8002da6:	d023      	beq.n	8002df0 <__aeabi_dsub+0x5e4>
 8002da8:	000a      	movs	r2, r1
 8002daa:	433a      	orrs	r2, r7
 8002dac:	d000      	beq.n	8002db0 <__aeabi_dsub+0x5a4>
 8002dae:	e0a0      	b.n	8002ef2 <__aeabi_dsub+0x6e6>
 8002db0:	4662      	mov	r2, ip
 8002db2:	08db      	lsrs	r3, r3, #3
 8002db4:	0752      	lsls	r2, r2, #29
 8002db6:	4313      	orrs	r3, r2
 8002db8:	4662      	mov	r2, ip
 8002dba:	08d4      	lsrs	r4, r2, #3
 8002dbc:	e6b0      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002dbe:	000b      	movs	r3, r1
 8002dc0:	433b      	orrs	r3, r7
 8002dc2:	d100      	bne.n	8002dc6 <__aeabi_dsub+0x5ba>
 8002dc4:	e728      	b.n	8002c18 <__aeabi_dsub+0x40c>
 8002dc6:	08ff      	lsrs	r7, r7, #3
 8002dc8:	074b      	lsls	r3, r1, #29
 8002dca:	465d      	mov	r5, fp
 8002dcc:	433b      	orrs	r3, r7
 8002dce:	08cc      	lsrs	r4, r1, #3
 8002dd0:	e697      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	4698      	mov	r8, r3
 8002dd6:	e736      	b.n	8002c46 <__aeabi_dsub+0x43a>
 8002dd8:	1afc      	subs	r4, r7, r3
 8002dda:	42a7      	cmp	r7, r4
 8002ddc:	41bf      	sbcs	r7, r7
 8002dde:	4663      	mov	r3, ip
 8002de0:	427f      	negs	r7, r7
 8002de2:	1ac9      	subs	r1, r1, r3
 8002de4:	1bcb      	subs	r3, r1, r7
 8002de6:	4699      	mov	r9, r3
 8002de8:	2301      	movs	r3, #1
 8002dea:	465d      	mov	r5, fp
 8002dec:	4698      	mov	r8, r3
 8002dee:	e55e      	b.n	80028ae <__aeabi_dsub+0xa2>
 8002df0:	074b      	lsls	r3, r1, #29
 8002df2:	08ff      	lsrs	r7, r7, #3
 8002df4:	433b      	orrs	r3, r7
 8002df6:	08cc      	lsrs	r4, r1, #3
 8002df8:	e692      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002dfa:	1bdc      	subs	r4, r3, r7
 8002dfc:	4660      	mov	r0, ip
 8002dfe:	42a3      	cmp	r3, r4
 8002e00:	41b6      	sbcs	r6, r6
 8002e02:	1a40      	subs	r0, r0, r1
 8002e04:	4276      	negs	r6, r6
 8002e06:	1b80      	subs	r0, r0, r6
 8002e08:	4681      	mov	r9, r0
 8002e0a:	0200      	lsls	r0, r0, #8
 8002e0c:	d560      	bpl.n	8002ed0 <__aeabi_dsub+0x6c4>
 8002e0e:	1afc      	subs	r4, r7, r3
 8002e10:	42a7      	cmp	r7, r4
 8002e12:	41bf      	sbcs	r7, r7
 8002e14:	4663      	mov	r3, ip
 8002e16:	427f      	negs	r7, r7
 8002e18:	1ac9      	subs	r1, r1, r3
 8002e1a:	1bcb      	subs	r3, r1, r7
 8002e1c:	4699      	mov	r9, r3
 8002e1e:	465d      	mov	r5, fp
 8002e20:	e576      	b.n	8002910 <__aeabi_dsub+0x104>
 8002e22:	08ff      	lsrs	r7, r7, #3
 8002e24:	074b      	lsls	r3, r1, #29
 8002e26:	433b      	orrs	r3, r7
 8002e28:	08cc      	lsrs	r4, r1, #3
 8002e2a:	e667      	b.n	8002afc <__aeabi_dsub+0x2f0>
 8002e2c:	000a      	movs	r2, r1
 8002e2e:	08db      	lsrs	r3, r3, #3
 8002e30:	433a      	orrs	r2, r7
 8002e32:	d100      	bne.n	8002e36 <__aeabi_dsub+0x62a>
 8002e34:	e66f      	b.n	8002b16 <__aeabi_dsub+0x30a>
 8002e36:	4662      	mov	r2, ip
 8002e38:	0752      	lsls	r2, r2, #29
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	4662      	mov	r2, ip
 8002e3e:	08d4      	lsrs	r4, r2, #3
 8002e40:	2280      	movs	r2, #128	; 0x80
 8002e42:	0312      	lsls	r2, r2, #12
 8002e44:	4214      	tst	r4, r2
 8002e46:	d007      	beq.n	8002e58 <__aeabi_dsub+0x64c>
 8002e48:	08c8      	lsrs	r0, r1, #3
 8002e4a:	4210      	tst	r0, r2
 8002e4c:	d104      	bne.n	8002e58 <__aeabi_dsub+0x64c>
 8002e4e:	465d      	mov	r5, fp
 8002e50:	0004      	movs	r4, r0
 8002e52:	08fb      	lsrs	r3, r7, #3
 8002e54:	0749      	lsls	r1, r1, #29
 8002e56:	430b      	orrs	r3, r1
 8002e58:	0f5a      	lsrs	r2, r3, #29
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	08db      	lsrs	r3, r3, #3
 8002e5e:	0752      	lsls	r2, r2, #29
 8002e60:	4313      	orrs	r3, r2
 8002e62:	e65d      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002e64:	074b      	lsls	r3, r1, #29
 8002e66:	08ff      	lsrs	r7, r7, #3
 8002e68:	433b      	orrs	r3, r7
 8002e6a:	08cc      	lsrs	r4, r1, #3
 8002e6c:	e649      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002e6e:	19dc      	adds	r4, r3, r7
 8002e70:	429c      	cmp	r4, r3
 8002e72:	419b      	sbcs	r3, r3
 8002e74:	4461      	add	r1, ip
 8002e76:	4689      	mov	r9, r1
 8002e78:	425b      	negs	r3, r3
 8002e7a:	4499      	add	r9, r3
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	d400      	bmi.n	8002e84 <__aeabi_dsub+0x678>
 8002e82:	e631      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002e84:	464a      	mov	r2, r9
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <__aeabi_dsub+0x6d8>)
 8002e88:	401a      	ands	r2, r3
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	4691      	mov	r9, r2
 8002e8e:	4698      	mov	r8, r3
 8002e90:	e62a      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002e92:	0016      	movs	r6, r2
 8002e94:	4664      	mov	r4, ip
 8002e96:	3e20      	subs	r6, #32
 8002e98:	40f4      	lsrs	r4, r6
 8002e9a:	46a0      	mov	r8, r4
 8002e9c:	2a20      	cmp	r2, #32
 8002e9e:	d005      	beq.n	8002eac <__aeabi_dsub+0x6a0>
 8002ea0:	2640      	movs	r6, #64	; 0x40
 8002ea2:	4664      	mov	r4, ip
 8002ea4:	1ab2      	subs	r2, r6, r2
 8002ea6:	4094      	lsls	r4, r2
 8002ea8:	4323      	orrs	r3, r4
 8002eaa:	469a      	mov	sl, r3
 8002eac:	4654      	mov	r4, sl
 8002eae:	1e63      	subs	r3, r4, #1
 8002eb0:	419c      	sbcs	r4, r3
 8002eb2:	4643      	mov	r3, r8
 8002eb4:	431c      	orrs	r4, r3
 8002eb6:	e5db      	b.n	8002a70 <__aeabi_dsub+0x264>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	2400      	movs	r4, #0
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e548      	b.n	8002952 <__aeabi_dsub+0x146>
 8002ec0:	19dc      	adds	r4, r3, r7
 8002ec2:	42bc      	cmp	r4, r7
 8002ec4:	41bf      	sbcs	r7, r7
 8002ec6:	4461      	add	r1, ip
 8002ec8:	4689      	mov	r9, r1
 8002eca:	427f      	negs	r7, r7
 8002ecc:	44b9      	add	r9, r7
 8002ece:	e738      	b.n	8002d42 <__aeabi_dsub+0x536>
 8002ed0:	464b      	mov	r3, r9
 8002ed2:	4323      	orrs	r3, r4
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x6cc>
 8002ed6:	e69f      	b.n	8002c18 <__aeabi_dsub+0x40c>
 8002ed8:	e606      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	000007fe 	.word	0x000007fe
 8002ee0:	000007ff 	.word	0x000007ff
 8002ee4:	ff7fffff 	.word	0xff7fffff
 8002ee8:	08ff      	lsrs	r7, r7, #3
 8002eea:	074b      	lsls	r3, r1, #29
 8002eec:	433b      	orrs	r3, r7
 8002eee:	08cc      	lsrs	r4, r1, #3
 8002ef0:	e616      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002ef2:	4662      	mov	r2, ip
 8002ef4:	08db      	lsrs	r3, r3, #3
 8002ef6:	0752      	lsls	r2, r2, #29
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	4662      	mov	r2, ip
 8002efc:	08d4      	lsrs	r4, r2, #3
 8002efe:	2280      	movs	r2, #128	; 0x80
 8002f00:	0312      	lsls	r2, r2, #12
 8002f02:	4214      	tst	r4, r2
 8002f04:	d007      	beq.n	8002f16 <__aeabi_dsub+0x70a>
 8002f06:	08c8      	lsrs	r0, r1, #3
 8002f08:	4210      	tst	r0, r2
 8002f0a:	d104      	bne.n	8002f16 <__aeabi_dsub+0x70a>
 8002f0c:	465d      	mov	r5, fp
 8002f0e:	0004      	movs	r4, r0
 8002f10:	08fb      	lsrs	r3, r7, #3
 8002f12:	0749      	lsls	r1, r1, #29
 8002f14:	430b      	orrs	r3, r1
 8002f16:	0f5a      	lsrs	r2, r3, #29
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	0752      	lsls	r2, r2, #29
 8002f1c:	08db      	lsrs	r3, r3, #3
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	e5fe      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002f22:	2300      	movs	r3, #0
 8002f24:	4a01      	ldr	r2, [pc, #4]	; (8002f2c <__aeabi_dsub+0x720>)
 8002f26:	001c      	movs	r4, r3
 8002f28:	e513      	b.n	8002952 <__aeabi_dsub+0x146>
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	000007ff 	.word	0x000007ff

08002f30 <__aeabi_dcmpun>:
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	0005      	movs	r5, r0
 8002f34:	480c      	ldr	r0, [pc, #48]	; (8002f68 <__aeabi_dcmpun+0x38>)
 8002f36:	031c      	lsls	r4, r3, #12
 8002f38:	0016      	movs	r6, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	030a      	lsls	r2, r1, #12
 8002f3e:	0049      	lsls	r1, r1, #1
 8002f40:	0b12      	lsrs	r2, r2, #12
 8002f42:	0d49      	lsrs	r1, r1, #21
 8002f44:	0b24      	lsrs	r4, r4, #12
 8002f46:	0d5b      	lsrs	r3, r3, #21
 8002f48:	4281      	cmp	r1, r0
 8002f4a:	d008      	beq.n	8002f5e <__aeabi_dcmpun+0x2e>
 8002f4c:	4a06      	ldr	r2, [pc, #24]	; (8002f68 <__aeabi_dcmpun+0x38>)
 8002f4e:	2000      	movs	r0, #0
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d103      	bne.n	8002f5c <__aeabi_dcmpun+0x2c>
 8002f54:	0020      	movs	r0, r4
 8002f56:	4330      	orrs	r0, r6
 8002f58:	1e43      	subs	r3, r0, #1
 8002f5a:	4198      	sbcs	r0, r3
 8002f5c:	bd70      	pop	{r4, r5, r6, pc}
 8002f5e:	2001      	movs	r0, #1
 8002f60:	432a      	orrs	r2, r5
 8002f62:	d1fb      	bne.n	8002f5c <__aeabi_dcmpun+0x2c>
 8002f64:	e7f2      	b.n	8002f4c <__aeabi_dcmpun+0x1c>
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	000007ff 	.word	0x000007ff

08002f6c <__aeabi_d2iz>:
 8002f6c:	000a      	movs	r2, r1
 8002f6e:	b530      	push	{r4, r5, lr}
 8002f70:	4c13      	ldr	r4, [pc, #76]	; (8002fc0 <__aeabi_d2iz+0x54>)
 8002f72:	0053      	lsls	r3, r2, #1
 8002f74:	0309      	lsls	r1, r1, #12
 8002f76:	0005      	movs	r5, r0
 8002f78:	0b09      	lsrs	r1, r1, #12
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	0d5b      	lsrs	r3, r3, #21
 8002f7e:	0fd2      	lsrs	r2, r2, #31
 8002f80:	42a3      	cmp	r3, r4
 8002f82:	dd04      	ble.n	8002f8e <__aeabi_d2iz+0x22>
 8002f84:	480f      	ldr	r0, [pc, #60]	; (8002fc4 <__aeabi_d2iz+0x58>)
 8002f86:	4283      	cmp	r3, r0
 8002f88:	dd02      	ble.n	8002f90 <__aeabi_d2iz+0x24>
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <__aeabi_d2iz+0x5c>)
 8002f8c:	18d0      	adds	r0, r2, r3
 8002f8e:	bd30      	pop	{r4, r5, pc}
 8002f90:	2080      	movs	r0, #128	; 0x80
 8002f92:	0340      	lsls	r0, r0, #13
 8002f94:	4301      	orrs	r1, r0
 8002f96:	480d      	ldr	r0, [pc, #52]	; (8002fcc <__aeabi_d2iz+0x60>)
 8002f98:	1ac0      	subs	r0, r0, r3
 8002f9a:	281f      	cmp	r0, #31
 8002f9c:	dd08      	ble.n	8002fb0 <__aeabi_d2iz+0x44>
 8002f9e:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <__aeabi_d2iz+0x64>)
 8002fa0:	1ac3      	subs	r3, r0, r3
 8002fa2:	40d9      	lsrs	r1, r3
 8002fa4:	000b      	movs	r3, r1
 8002fa6:	4258      	negs	r0, r3
 8002fa8:	2a00      	cmp	r2, #0
 8002faa:	d1f0      	bne.n	8002f8e <__aeabi_d2iz+0x22>
 8002fac:	0018      	movs	r0, r3
 8002fae:	e7ee      	b.n	8002f8e <__aeabi_d2iz+0x22>
 8002fb0:	4c08      	ldr	r4, [pc, #32]	; (8002fd4 <__aeabi_d2iz+0x68>)
 8002fb2:	40c5      	lsrs	r5, r0
 8002fb4:	46a4      	mov	ip, r4
 8002fb6:	4463      	add	r3, ip
 8002fb8:	4099      	lsls	r1, r3
 8002fba:	000b      	movs	r3, r1
 8002fbc:	432b      	orrs	r3, r5
 8002fbe:	e7f2      	b.n	8002fa6 <__aeabi_d2iz+0x3a>
 8002fc0:	000003fe 	.word	0x000003fe
 8002fc4:	0000041d 	.word	0x0000041d
 8002fc8:	7fffffff 	.word	0x7fffffff
 8002fcc:	00000433 	.word	0x00000433
 8002fd0:	00000413 	.word	0x00000413
 8002fd4:	fffffbed 	.word	0xfffffbed

08002fd8 <__aeabi_i2d>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d016      	beq.n	800300c <__aeabi_i2d+0x34>
 8002fde:	17c3      	asrs	r3, r0, #31
 8002fe0:	18c5      	adds	r5, r0, r3
 8002fe2:	405d      	eors	r5, r3
 8002fe4:	0fc4      	lsrs	r4, r0, #31
 8002fe6:	0028      	movs	r0, r5
 8002fe8:	f000 f91c 	bl	8003224 <__clzsi2>
 8002fec:	4a11      	ldr	r2, [pc, #68]	; (8003034 <__aeabi_i2d+0x5c>)
 8002fee:	1a12      	subs	r2, r2, r0
 8002ff0:	280a      	cmp	r0, #10
 8002ff2:	dc16      	bgt.n	8003022 <__aeabi_i2d+0x4a>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	002e      	movs	r6, r5
 8002ff8:	3315      	adds	r3, #21
 8002ffa:	409e      	lsls	r6, r3
 8002ffc:	230b      	movs	r3, #11
 8002ffe:	1a18      	subs	r0, r3, r0
 8003000:	40c5      	lsrs	r5, r0
 8003002:	0552      	lsls	r2, r2, #21
 8003004:	032d      	lsls	r5, r5, #12
 8003006:	0b2d      	lsrs	r5, r5, #12
 8003008:	0d53      	lsrs	r3, r2, #21
 800300a:	e003      	b.n	8003014 <__aeabi_i2d+0x3c>
 800300c:	2400      	movs	r4, #0
 800300e:	2300      	movs	r3, #0
 8003010:	2500      	movs	r5, #0
 8003012:	2600      	movs	r6, #0
 8003014:	051b      	lsls	r3, r3, #20
 8003016:	432b      	orrs	r3, r5
 8003018:	07e4      	lsls	r4, r4, #31
 800301a:	4323      	orrs	r3, r4
 800301c:	0030      	movs	r0, r6
 800301e:	0019      	movs	r1, r3
 8003020:	bd70      	pop	{r4, r5, r6, pc}
 8003022:	380b      	subs	r0, #11
 8003024:	4085      	lsls	r5, r0
 8003026:	0552      	lsls	r2, r2, #21
 8003028:	032d      	lsls	r5, r5, #12
 800302a:	2600      	movs	r6, #0
 800302c:	0b2d      	lsrs	r5, r5, #12
 800302e:	0d53      	lsrs	r3, r2, #21
 8003030:	e7f0      	b.n	8003014 <__aeabi_i2d+0x3c>
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	0000041e 	.word	0x0000041e

08003038 <__aeabi_ui2d>:
 8003038:	b510      	push	{r4, lr}
 800303a:	1e04      	subs	r4, r0, #0
 800303c:	d010      	beq.n	8003060 <__aeabi_ui2d+0x28>
 800303e:	f000 f8f1 	bl	8003224 <__clzsi2>
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <__aeabi_ui2d+0x48>)
 8003044:	1a1b      	subs	r3, r3, r0
 8003046:	280a      	cmp	r0, #10
 8003048:	dc11      	bgt.n	800306e <__aeabi_ui2d+0x36>
 800304a:	220b      	movs	r2, #11
 800304c:	0021      	movs	r1, r4
 800304e:	1a12      	subs	r2, r2, r0
 8003050:	40d1      	lsrs	r1, r2
 8003052:	3015      	adds	r0, #21
 8003054:	030a      	lsls	r2, r1, #12
 8003056:	055b      	lsls	r3, r3, #21
 8003058:	4084      	lsls	r4, r0
 800305a:	0b12      	lsrs	r2, r2, #12
 800305c:	0d5b      	lsrs	r3, r3, #21
 800305e:	e001      	b.n	8003064 <__aeabi_ui2d+0x2c>
 8003060:	2300      	movs	r3, #0
 8003062:	2200      	movs	r2, #0
 8003064:	051b      	lsls	r3, r3, #20
 8003066:	4313      	orrs	r3, r2
 8003068:	0020      	movs	r0, r4
 800306a:	0019      	movs	r1, r3
 800306c:	bd10      	pop	{r4, pc}
 800306e:	0022      	movs	r2, r4
 8003070:	380b      	subs	r0, #11
 8003072:	4082      	lsls	r2, r0
 8003074:	055b      	lsls	r3, r3, #21
 8003076:	0312      	lsls	r2, r2, #12
 8003078:	2400      	movs	r4, #0
 800307a:	0b12      	lsrs	r2, r2, #12
 800307c:	0d5b      	lsrs	r3, r3, #21
 800307e:	e7f1      	b.n	8003064 <__aeabi_ui2d+0x2c>
 8003080:	0000041e 	.word	0x0000041e

08003084 <__aeabi_f2d>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	0043      	lsls	r3, r0, #1
 8003088:	0246      	lsls	r6, r0, #9
 800308a:	0fc4      	lsrs	r4, r0, #31
 800308c:	20fe      	movs	r0, #254	; 0xfe
 800308e:	0e1b      	lsrs	r3, r3, #24
 8003090:	1c59      	adds	r1, r3, #1
 8003092:	0a75      	lsrs	r5, r6, #9
 8003094:	4208      	tst	r0, r1
 8003096:	d00c      	beq.n	80030b2 <__aeabi_f2d+0x2e>
 8003098:	22e0      	movs	r2, #224	; 0xe0
 800309a:	0092      	lsls	r2, r2, #2
 800309c:	4694      	mov	ip, r2
 800309e:	076d      	lsls	r5, r5, #29
 80030a0:	0b36      	lsrs	r6, r6, #12
 80030a2:	4463      	add	r3, ip
 80030a4:	051b      	lsls	r3, r3, #20
 80030a6:	4333      	orrs	r3, r6
 80030a8:	07e4      	lsls	r4, r4, #31
 80030aa:	4323      	orrs	r3, r4
 80030ac:	0028      	movs	r0, r5
 80030ae:	0019      	movs	r1, r3
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d114      	bne.n	80030e0 <__aeabi_f2d+0x5c>
 80030b6:	2d00      	cmp	r5, #0
 80030b8:	d01b      	beq.n	80030f2 <__aeabi_f2d+0x6e>
 80030ba:	0028      	movs	r0, r5
 80030bc:	f000 f8b2 	bl	8003224 <__clzsi2>
 80030c0:	280a      	cmp	r0, #10
 80030c2:	dc1c      	bgt.n	80030fe <__aeabi_f2d+0x7a>
 80030c4:	230b      	movs	r3, #11
 80030c6:	002e      	movs	r6, r5
 80030c8:	1a1b      	subs	r3, r3, r0
 80030ca:	40de      	lsrs	r6, r3
 80030cc:	0003      	movs	r3, r0
 80030ce:	3315      	adds	r3, #21
 80030d0:	409d      	lsls	r5, r3
 80030d2:	4a0e      	ldr	r2, [pc, #56]	; (800310c <__aeabi_f2d+0x88>)
 80030d4:	0336      	lsls	r6, r6, #12
 80030d6:	1a12      	subs	r2, r2, r0
 80030d8:	0552      	lsls	r2, r2, #21
 80030da:	0b36      	lsrs	r6, r6, #12
 80030dc:	0d53      	lsrs	r3, r2, #21
 80030de:	e7e1      	b.n	80030a4 <__aeabi_f2d+0x20>
 80030e0:	2d00      	cmp	r5, #0
 80030e2:	d009      	beq.n	80030f8 <__aeabi_f2d+0x74>
 80030e4:	2280      	movs	r2, #128	; 0x80
 80030e6:	0b36      	lsrs	r6, r6, #12
 80030e8:	0312      	lsls	r2, r2, #12
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <__aeabi_f2d+0x8c>)
 80030ec:	076d      	lsls	r5, r5, #29
 80030ee:	4316      	orrs	r6, r2
 80030f0:	e7d8      	b.n	80030a4 <__aeabi_f2d+0x20>
 80030f2:	2300      	movs	r3, #0
 80030f4:	2600      	movs	r6, #0
 80030f6:	e7d5      	b.n	80030a4 <__aeabi_f2d+0x20>
 80030f8:	2600      	movs	r6, #0
 80030fa:	4b05      	ldr	r3, [pc, #20]	; (8003110 <__aeabi_f2d+0x8c>)
 80030fc:	e7d2      	b.n	80030a4 <__aeabi_f2d+0x20>
 80030fe:	0003      	movs	r3, r0
 8003100:	3b0b      	subs	r3, #11
 8003102:	409d      	lsls	r5, r3
 8003104:	002e      	movs	r6, r5
 8003106:	2500      	movs	r5, #0
 8003108:	e7e3      	b.n	80030d2 <__aeabi_f2d+0x4e>
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	00000389 	.word	0x00000389
 8003110:	000007ff 	.word	0x000007ff

08003114 <__aeabi_d2f>:
 8003114:	0002      	movs	r2, r0
 8003116:	004b      	lsls	r3, r1, #1
 8003118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311a:	0d5b      	lsrs	r3, r3, #21
 800311c:	030c      	lsls	r4, r1, #12
 800311e:	4e3d      	ldr	r6, [pc, #244]	; (8003214 <__aeabi_d2f+0x100>)
 8003120:	0a64      	lsrs	r4, r4, #9
 8003122:	0f40      	lsrs	r0, r0, #29
 8003124:	1c5f      	adds	r7, r3, #1
 8003126:	0fc9      	lsrs	r1, r1, #31
 8003128:	4304      	orrs	r4, r0
 800312a:	00d5      	lsls	r5, r2, #3
 800312c:	4237      	tst	r7, r6
 800312e:	d00a      	beq.n	8003146 <__aeabi_d2f+0x32>
 8003130:	4839      	ldr	r0, [pc, #228]	; (8003218 <__aeabi_d2f+0x104>)
 8003132:	181e      	adds	r6, r3, r0
 8003134:	2efe      	cmp	r6, #254	; 0xfe
 8003136:	dd16      	ble.n	8003166 <__aeabi_d2f+0x52>
 8003138:	20ff      	movs	r0, #255	; 0xff
 800313a:	2400      	movs	r4, #0
 800313c:	05c0      	lsls	r0, r0, #23
 800313e:	4320      	orrs	r0, r4
 8003140:	07c9      	lsls	r1, r1, #31
 8003142:	4308      	orrs	r0, r1
 8003144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <__aeabi_d2f+0x44>
 800314a:	432c      	orrs	r4, r5
 800314c:	d026      	beq.n	800319c <__aeabi_d2f+0x88>
 800314e:	2205      	movs	r2, #5
 8003150:	0192      	lsls	r2, r2, #6
 8003152:	0a54      	lsrs	r4, r2, #9
 8003154:	b2d8      	uxtb	r0, r3
 8003156:	e7f1      	b.n	800313c <__aeabi_d2f+0x28>
 8003158:	4325      	orrs	r5, r4
 800315a:	d0ed      	beq.n	8003138 <__aeabi_d2f+0x24>
 800315c:	2080      	movs	r0, #128	; 0x80
 800315e:	03c0      	lsls	r0, r0, #15
 8003160:	4304      	orrs	r4, r0
 8003162:	20ff      	movs	r0, #255	; 0xff
 8003164:	e7ea      	b.n	800313c <__aeabi_d2f+0x28>
 8003166:	2e00      	cmp	r6, #0
 8003168:	dd1b      	ble.n	80031a2 <__aeabi_d2f+0x8e>
 800316a:	0192      	lsls	r2, r2, #6
 800316c:	1e53      	subs	r3, r2, #1
 800316e:	419a      	sbcs	r2, r3
 8003170:	00e4      	lsls	r4, r4, #3
 8003172:	0f6d      	lsrs	r5, r5, #29
 8003174:	4322      	orrs	r2, r4
 8003176:	432a      	orrs	r2, r5
 8003178:	0753      	lsls	r3, r2, #29
 800317a:	d048      	beq.n	800320e <__aeabi_d2f+0xfa>
 800317c:	230f      	movs	r3, #15
 800317e:	4013      	ands	r3, r2
 8003180:	2b04      	cmp	r3, #4
 8003182:	d000      	beq.n	8003186 <__aeabi_d2f+0x72>
 8003184:	3204      	adds	r2, #4
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	04db      	lsls	r3, r3, #19
 800318a:	4013      	ands	r3, r2
 800318c:	d03f      	beq.n	800320e <__aeabi_d2f+0xfa>
 800318e:	1c70      	adds	r0, r6, #1
 8003190:	2efe      	cmp	r6, #254	; 0xfe
 8003192:	d0d1      	beq.n	8003138 <__aeabi_d2f+0x24>
 8003194:	0192      	lsls	r2, r2, #6
 8003196:	0a54      	lsrs	r4, r2, #9
 8003198:	b2c0      	uxtb	r0, r0
 800319a:	e7cf      	b.n	800313c <__aeabi_d2f+0x28>
 800319c:	2000      	movs	r0, #0
 800319e:	2400      	movs	r4, #0
 80031a0:	e7cc      	b.n	800313c <__aeabi_d2f+0x28>
 80031a2:	0032      	movs	r2, r6
 80031a4:	3217      	adds	r2, #23
 80031a6:	db22      	blt.n	80031ee <__aeabi_d2f+0xda>
 80031a8:	2080      	movs	r0, #128	; 0x80
 80031aa:	0400      	lsls	r0, r0, #16
 80031ac:	4320      	orrs	r0, r4
 80031ae:	241e      	movs	r4, #30
 80031b0:	1ba4      	subs	r4, r4, r6
 80031b2:	2c1f      	cmp	r4, #31
 80031b4:	dd1d      	ble.n	80031f2 <__aeabi_d2f+0xde>
 80031b6:	2202      	movs	r2, #2
 80031b8:	4252      	negs	r2, r2
 80031ba:	1b96      	subs	r6, r2, r6
 80031bc:	0002      	movs	r2, r0
 80031be:	40f2      	lsrs	r2, r6
 80031c0:	0016      	movs	r6, r2
 80031c2:	2c20      	cmp	r4, #32
 80031c4:	d004      	beq.n	80031d0 <__aeabi_d2f+0xbc>
 80031c6:	4a15      	ldr	r2, [pc, #84]	; (800321c <__aeabi_d2f+0x108>)
 80031c8:	4694      	mov	ip, r2
 80031ca:	4463      	add	r3, ip
 80031cc:	4098      	lsls	r0, r3
 80031ce:	4305      	orrs	r5, r0
 80031d0:	002a      	movs	r2, r5
 80031d2:	1e53      	subs	r3, r2, #1
 80031d4:	419a      	sbcs	r2, r3
 80031d6:	4332      	orrs	r2, r6
 80031d8:	2600      	movs	r6, #0
 80031da:	0753      	lsls	r3, r2, #29
 80031dc:	d1ce      	bne.n	800317c <__aeabi_d2f+0x68>
 80031de:	2480      	movs	r4, #128	; 0x80
 80031e0:	0013      	movs	r3, r2
 80031e2:	04e4      	lsls	r4, r4, #19
 80031e4:	2001      	movs	r0, #1
 80031e6:	4023      	ands	r3, r4
 80031e8:	4222      	tst	r2, r4
 80031ea:	d1d3      	bne.n	8003194 <__aeabi_d2f+0x80>
 80031ec:	e7b0      	b.n	8003150 <__aeabi_d2f+0x3c>
 80031ee:	2300      	movs	r3, #0
 80031f0:	e7ad      	b.n	800314e <__aeabi_d2f+0x3a>
 80031f2:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <__aeabi_d2f+0x10c>)
 80031f4:	4694      	mov	ip, r2
 80031f6:	002a      	movs	r2, r5
 80031f8:	40e2      	lsrs	r2, r4
 80031fa:	0014      	movs	r4, r2
 80031fc:	002a      	movs	r2, r5
 80031fe:	4463      	add	r3, ip
 8003200:	409a      	lsls	r2, r3
 8003202:	4098      	lsls	r0, r3
 8003204:	1e55      	subs	r5, r2, #1
 8003206:	41aa      	sbcs	r2, r5
 8003208:	4302      	orrs	r2, r0
 800320a:	4322      	orrs	r2, r4
 800320c:	e7e4      	b.n	80031d8 <__aeabi_d2f+0xc4>
 800320e:	0033      	movs	r3, r6
 8003210:	e79e      	b.n	8003150 <__aeabi_d2f+0x3c>
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	000007fe 	.word	0x000007fe
 8003218:	fffffc80 	.word	0xfffffc80
 800321c:	fffffca2 	.word	0xfffffca2
 8003220:	fffffc82 	.word	0xfffffc82

08003224 <__clzsi2>:
 8003224:	211c      	movs	r1, #28
 8003226:	2301      	movs	r3, #1
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	4298      	cmp	r0, r3
 800322c:	d301      	bcc.n	8003232 <__clzsi2+0xe>
 800322e:	0c00      	lsrs	r0, r0, #16
 8003230:	3910      	subs	r1, #16
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	4298      	cmp	r0, r3
 8003236:	d301      	bcc.n	800323c <__clzsi2+0x18>
 8003238:	0a00      	lsrs	r0, r0, #8
 800323a:	3908      	subs	r1, #8
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	4298      	cmp	r0, r3
 8003240:	d301      	bcc.n	8003246 <__clzsi2+0x22>
 8003242:	0900      	lsrs	r0, r0, #4
 8003244:	3904      	subs	r1, #4
 8003246:	a202      	add	r2, pc, #8	; (adr r2, 8003250 <__clzsi2+0x2c>)
 8003248:	5c10      	ldrb	r0, [r2, r0]
 800324a:	1840      	adds	r0, r0, r1
 800324c:	4770      	bx	lr
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	02020304 	.word	0x02020304
 8003254:	01010101 	.word	0x01010101
	...

08003260 <__clzdi2>:
 8003260:	b510      	push	{r4, lr}
 8003262:	2900      	cmp	r1, #0
 8003264:	d103      	bne.n	800326e <__clzdi2+0xe>
 8003266:	f7ff ffdd 	bl	8003224 <__clzsi2>
 800326a:	3020      	adds	r0, #32
 800326c:	e002      	b.n	8003274 <__clzdi2+0x14>
 800326e:	0008      	movs	r0, r1
 8003270:	f7ff ffd8 	bl	8003224 <__clzsi2>
 8003274:	bd10      	pop	{r4, pc}
 8003276:	46c0      	nop			; (mov r8, r8)

08003278 <pow10_>:
	while(pos<255 && str[pos]!=sym)
		pos++;
	return pos;
}
uint32_t pow10_(uint8_t value)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	0002      	movs	r2, r0
 8003280:	1dfb      	adds	r3, r7, #7
 8003282:	701a      	strb	r2, [r3, #0]
  if (value>0)
 8003284:	1dfb      	adds	r3, r7, #7
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00c      	beq.n	80032a6 <pow10_+0x2e>
  	return 10*pow10_(value-1);
 800328c:	1dfb      	adds	r3, r7, #7
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	3b01      	subs	r3, #1
 8003292:	b2db      	uxtb	r3, r3
 8003294:	0018      	movs	r0, r3
 8003296:	f7ff ffef 	bl	8003278 <pow10_>
 800329a:	0002      	movs	r2, r0
 800329c:	0013      	movs	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	189b      	adds	r3, r3, r2
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	e000      	b.n	80032a8 <pow10_+0x30>
  else
  	return 1;
 80032a6:	2301      	movs	r3, #1
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b002      	add	sp, #8
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <pow16>:

uint32_t pow16(uint8_t value)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	0002      	movs	r2, r0
 80032b8:	1dfb      	adds	r3, r7, #7
 80032ba:	701a      	strb	r2, [r3, #0]
	return 1<<(value*4);
 80032bc:	1dfb      	adds	r3, r7, #7
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	2201      	movs	r2, #1
 80032c4:	409a      	lsls	r2, r3
 80032c6:	0013      	movs	r3, r2
}
 80032c8:	0018      	movs	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b002      	add	sp, #8
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <DecToInt>:
sprintf(resString,"%li.%d",leftPart,rightPart);
return resString;
}

uint32_t DecToInt(uint8_t * string, uint8_t len)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	000a      	movs	r2, r1
 80032da:	1cfb      	adds	r3, r7, #3
 80032dc:	701a      	strb	r2, [r3, #0]
	uint32_t value=0;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
	uint8_t i=0;
 80032e2:	210b      	movs	r1, #11
 80032e4:	187b      	adds	r3, r7, r1
 80032e6:	2200      	movs	r2, #0
 80032e8:	701a      	strb	r2, [r3, #0]
	for(i=0;i<len;i++)
 80032ea:	187b      	adds	r3, r7, r1
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	e031      	b.n	8003356 <DecToInt+0x86>
	if (string[i]>='0' && string[i]<='9')
 80032f2:	210b      	movs	r1, #11
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	18d3      	adds	r3, r2, r3
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b2f      	cmp	r3, #47	; 0x2f
 8003300:	d91e      	bls.n	8003340 <DecToInt+0x70>
 8003302:	187b      	adds	r3, r7, r1
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	18d3      	adds	r3, r2, r3
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b39      	cmp	r3, #57	; 0x39
 800330e:	d817      	bhi.n	8003340 <DecToInt+0x70>
	value+=(string[i]-'0')*pow10_(len-i-1);
 8003310:	187b      	adds	r3, r7, r1
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	18d3      	adds	r3, r2, r3
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	3b30      	subs	r3, #48	; 0x30
 800331c:	001c      	movs	r4, r3
 800331e:	1cfa      	adds	r2, r7, #3
 8003320:	187b      	adds	r3, r7, r1
 8003322:	7812      	ldrb	r2, [r2, #0]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b2db      	uxtb	r3, r3
 800332e:	0018      	movs	r0, r3
 8003330:	f7ff ffa2 	bl	8003278 <pow10_>
 8003334:	0003      	movs	r3, r0
 8003336:	4363      	muls	r3, r4
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	18d3      	adds	r3, r2, r3
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e004      	b.n	800334a <DecToInt+0x7a>
	else
	{
		Error_Handler();
 8003340:	f001 ffb4 	bl	80052ac <Error_Handler>
		return 0xFFFFFFFF;
 8003344:	2301      	movs	r3, #1
 8003346:	425b      	negs	r3, r3
 8003348:	e00d      	b.n	8003366 <DecToInt+0x96>
	for(i=0;i<len;i++)
 800334a:	210b      	movs	r1, #11
 800334c:	187b      	adds	r3, r7, r1
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	187b      	adds	r3, r7, r1
 8003352:	3201      	adds	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	230b      	movs	r3, #11
 8003358:	18fa      	adds	r2, r7, r3
 800335a:	1cfb      	adds	r3, r7, #3
 800335c:	7812      	ldrb	r2, [r2, #0]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d3c6      	bcc.n	80032f2 <DecToInt+0x22>
	}
	return value;
 8003364:	68fb      	ldr	r3, [r7, #12]
}
 8003366:	0018      	movs	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	b005      	add	sp, #20
 800336c:	bd90      	pop	{r4, r7, pc}
	...

08003370 <HexToInt>:

uint32_t HexToInt(uint8_t * string, uint8_t len)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	000a      	movs	r2, r1
 800337a:	1cfb      	adds	r3, r7, #3
 800337c:	701a      	strb	r2, [r3, #0]
	uint32_t value=0;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
	uint32_t tmp=0;
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
	uint8_t i=0;
 8003386:	210f      	movs	r1, #15
 8003388:	187b      	adds	r3, r7, r1
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]

	for(i=0;i<len;i++)
 800338e:	187b      	adds	r3, r7, r1
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	e059      	b.n	800344a <HexToInt+0xda>
	{
		switch (string[i])
 8003396:	230f      	movs	r3, #15
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	18d3      	adds	r3, r2, r3
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	3b30      	subs	r3, #48	; 0x30
 80033a4:	2b36      	cmp	r3, #54	; 0x36
 80033a6:	d834      	bhi.n	8003412 <HexToInt+0xa2>
 80033a8:	009a      	lsls	r2, r3, #2
 80033aa:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <HexToInt+0xf4>)
 80033ac:	18d3      	adds	r3, r2, r3
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	469f      	mov	pc, r3
		{
		case '0': tmp=0; break;
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	e031      	b.n	800341c <HexToInt+0xac>
		case '1': tmp=1; break;
 80033b8:	2301      	movs	r3, #1
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	e02e      	b.n	800341c <HexToInt+0xac>
		case '2': tmp=2; break;
 80033be:	2302      	movs	r3, #2
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	e02b      	b.n	800341c <HexToInt+0xac>
		case '3': tmp=3; break;
 80033c4:	2303      	movs	r3, #3
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	e028      	b.n	800341c <HexToInt+0xac>
		case '4': tmp=4; break;
 80033ca:	2304      	movs	r3, #4
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	e025      	b.n	800341c <HexToInt+0xac>
		case '5': tmp=5; break;
 80033d0:	2305      	movs	r3, #5
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	e022      	b.n	800341c <HexToInt+0xac>
		case '6': tmp=6; break;
 80033d6:	2306      	movs	r3, #6
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	e01f      	b.n	800341c <HexToInt+0xac>
		case '7': tmp=7; break;
 80033dc:	2307      	movs	r3, #7
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	e01c      	b.n	800341c <HexToInt+0xac>
		case '8': tmp=8; break;
 80033e2:	2308      	movs	r3, #8
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	e019      	b.n	800341c <HexToInt+0xac>
		case '9': tmp=9; break;
 80033e8:	2309      	movs	r3, #9
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	e016      	b.n	800341c <HexToInt+0xac>
		case 'A':
		case 'a': tmp=10; break;
 80033ee:	230a      	movs	r3, #10
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	e013      	b.n	800341c <HexToInt+0xac>
		case 'B':
		case 'b': tmp=11; break;
 80033f4:	230b      	movs	r3, #11
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	e010      	b.n	800341c <HexToInt+0xac>
		case 'C':
		case 'c': tmp=12; break;
 80033fa:	230c      	movs	r3, #12
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	e00d      	b.n	800341c <HexToInt+0xac>
		case 'D':
		case 'd': tmp=13; break;
 8003400:	230d      	movs	r3, #13
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	e00a      	b.n	800341c <HexToInt+0xac>
		case 'E':
		case 'e': tmp=14; break;
 8003406:	230e      	movs	r3, #14
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	e007      	b.n	800341c <HexToInt+0xac>
		case 'F':
		case 'f': tmp=15; break;
 800340c:	230f      	movs	r3, #15
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	e004      	b.n	800341c <HexToInt+0xac>
		default:
			Error_Handler();
 8003412:	f001 ff4b 	bl	80052ac <Error_Handler>
			return 0xFFFFFFFF;
 8003416:	2301      	movs	r3, #1
 8003418:	425b      	negs	r3, r3
 800341a:	e01e      	b.n	800345a <HexToInt+0xea>
		}
		value+=tmp*pow16(len-i-1);
 800341c:	1cfa      	adds	r2, r7, #3
 800341e:	240f      	movs	r4, #15
 8003420:	193b      	adds	r3, r7, r4
 8003422:	7812      	ldrb	r2, [r2, #0]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b2db      	uxtb	r3, r3
 800342e:	0018      	movs	r0, r3
 8003430:	f7ff ff3e 	bl	80032b0 <pow16>
 8003434:	0002      	movs	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4353      	muls	r3, r2
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	18d3      	adds	r3, r2, r3
 800343e:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8003440:	193b      	adds	r3, r7, r4
 8003442:	781a      	ldrb	r2, [r3, #0]
 8003444:	193b      	adds	r3, r7, r4
 8003446:	3201      	adds	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	230f      	movs	r3, #15
 800344c:	18fa      	adds	r2, r7, r3
 800344e:	1cfb      	adds	r3, r7, #3
 8003450:	7812      	ldrb	r2, [r2, #0]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d39e      	bcc.n	8003396 <HexToInt+0x26>
	}
	return value;
 8003458:	697b      	ldr	r3, [r7, #20]
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b007      	add	sp, #28
 8003460:	bd90      	pop	{r4, r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	0800e560 	.word	0x0800e560

08003468 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int fd, char *ptr, int len) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000L);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	b29a      	uxth	r2, r3
 8003478:	23fa      	movs	r3, #250	; 0xfa
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	4804      	ldr	r0, [pc, #16]	; (8003490 <_write+0x28>)
 8003480:	f006 fc8a 	bl	8009d98 <HAL_UART_Transmit>
	return len;
 8003484:	687b      	ldr	r3, [r7, #4]
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b004      	add	sp, #16
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	2000036c 	.word	0x2000036c

08003494 <debugLogTime>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 1000);
	return ch;
}

void debugLogTime(char *string) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
	if (settings.debugLevel) {
 800349c:	4b18      	ldr	r3, [pc, #96]	; (8003500 <debugLogTime+0x6c>)
 800349e:	7e1b      	ldrb	r3, [r3, #24]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d029      	beq.n	80034f8 <debugLogTime+0x64>
		uint32_t time = RTC->TR;
 80034a4:	4b17      	ldr	r3, [pc, #92]	; (8003504 <debugLogTime+0x70>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
		printf("\n");
 80034aa:	200a      	movs	r0, #10
 80034ac:	f008 f8fe 	bl	800b6ac <putchar>
		printf("%08lu", HAL_GetTick());
 80034b0:	f003 f942 	bl	8006738 <HAL_GetTick>
 80034b4:	0002      	movs	r2, r0
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <debugLogTime+0x74>)
 80034b8:	0011      	movs	r1, r2
 80034ba:	0018      	movs	r0, r3
 80034bc:	f008 f8dc 	bl	800b678 <iprintf>
		printf(" %02x:%02x:%02x ", (uint16_t) (time >> 16) & 0xFF,
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	001a      	movs	r2, r3
 80034c8:	23ff      	movs	r3, #255	; 0xff
 80034ca:	401a      	ands	r2, r3
 80034cc:	0011      	movs	r1, r2
				(uint16_t) (time >> 8) & 0xFF, (uint16_t) time & 0xFF);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	b29b      	uxth	r3, r3
		printf(" %02x:%02x:%02x ", (uint16_t) (time >> 16) & 0xFF,
 80034d4:	001a      	movs	r2, r3
 80034d6:	23ff      	movs	r3, #255	; 0xff
 80034d8:	401a      	ands	r2, r3
				(uint16_t) (time >> 8) & 0xFF, (uint16_t) time & 0xFF);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	b29b      	uxth	r3, r3
		printf(" %02x:%02x:%02x ", (uint16_t) (time >> 16) & 0xFF,
 80034de:	0018      	movs	r0, r3
 80034e0:	23ff      	movs	r3, #255	; 0xff
 80034e2:	4003      	ands	r3, r0
 80034e4:	4809      	ldr	r0, [pc, #36]	; (800350c <debugLogTime+0x78>)
 80034e6:	f008 f8c7 	bl	800b678 <iprintf>
		printf(string);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	0018      	movs	r0, r3
 80034ee:	f008 f8c3 	bl	800b678 <iprintf>
		printf("\n");
 80034f2:	200a      	movs	r0, #10
 80034f4:	f008 f8da 	bl	800b6ac <putchar>
	}
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b004      	add	sp, #16
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	200004e8 	.word	0x200004e8
 8003504:	40002800 	.word	0x40002800
 8003508:	0800df28 	.word	0x0800df28
 800350c:	0800df30 	.word	0x0800df30

08003510 <debugLog>:

void debugLog(char *string) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	if (settings.debugLevel) {
 8003518:	4b07      	ldr	r3, [pc, #28]	; (8003538 <debugLog+0x28>)
 800351a:	7e1b      	ldrb	r3, [r3, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d006      	beq.n	800352e <debugLog+0x1e>
		printf(string);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	0018      	movs	r0, r3
 8003524:	f008 f8a8 	bl	800b678 <iprintf>
		printf("\n");
 8003528:	200a      	movs	r0, #10
 800352a:	f008 f8bf 	bl	800b6ac <putchar>
	}
}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	46bd      	mov	sp, r7
 8003532:	b002      	add	sp, #8
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	200004e8 	.word	0x200004e8

0800353c <debugLogInt>:

void debugLogInt(char *format, int n) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
	if (settings.debugLevel) {
 8003546:	4b08      	ldr	r3, [pc, #32]	; (8003568 <debugLogInt+0x2c>)
 8003548:	7e1b      	ldrb	r3, [r3, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <debugLogInt+0x24>
		printf(format, n);
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	0011      	movs	r1, r2
 8003554:	0018      	movs	r0, r3
 8003556:	f008 f88f 	bl	800b678 <iprintf>
		printf("\n");
 800355a:	200a      	movs	r0, #10
 800355c:	f008 f8a6 	bl	800b6ac <putchar>
	}
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}
 8003568:	200004e8 	.word	0x200004e8

0800356c <debugLogString>:

void debugLogString(char *format, char *string) {
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
	if (settings.debugLevel) {
 8003576:	4b08      	ldr	r3, [pc, #32]	; (8003598 <debugLogString+0x2c>)
 8003578:	7e1b      	ldrb	r3, [r3, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <debugLogString+0x24>
		printf(format, string);
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	0011      	movs	r1, r2
 8003584:	0018      	movs	r0, r3
 8003586:	f008 f877 	bl	800b678 <iprintf>
		printf("\n");
 800358a:	200a      	movs	r0, #10
 800358c:	f008 f88e 	bl	800b6ac <putchar>
	}
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b002      	add	sp, #8
 8003596:	bd80      	pop	{r7, pc}
 8003598:	200004e8 	.word	0x200004e8

0800359c <getVoltage>:
 * @brief Gets voltage level of MCU Vdd pin
 * Calculates MCU Vdd voltage by internal reference
 * @param None
 * @retval  Volage
 */
float getVoltage() {
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
	uint16_t adc[2];
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc, 2);
 80035a2:	1d39      	adds	r1, r7, #4
 80035a4:	4b15      	ldr	r3, [pc, #84]	; (80035fc <getVoltage+0x60>)
 80035a6:	2202      	movs	r2, #2
 80035a8:	0018      	movs	r0, r3
 80035aa:	f003 fa51 	bl	8006a50 <HAL_ADC_Start_DMA>
	HAL_Delay(5);
 80035ae:	2005      	movs	r0, #5
 80035b0:	f000 fef6 	bl	80043a0 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc, 2);
 80035b4:	1d39      	adds	r1, r7, #4
 80035b6:	4b11      	ldr	r3, [pc, #68]	; (80035fc <getVoltage+0x60>)
 80035b8:	2202      	movs	r2, #2
 80035ba:	0018      	movs	r0, r3
 80035bc:	f003 fa48 	bl	8006a50 <HAL_ADC_Start_DMA>
	HAL_Delay(2);
 80035c0:	2002      	movs	r0, #2
 80035c2:	f000 feed 	bl	80043a0 <HAL_Delay>
	return 3.0f * (float) VREF_CAL_VALUE / (float) adc[1];
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <getVoltage+0x64>)
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7fd ff32 	bl	8001434 <__aeabi_ui2f>
 80035d0:	1c03      	adds	r3, r0, #0
 80035d2:	490c      	ldr	r1, [pc, #48]	; (8003604 <getVoltage+0x68>)
 80035d4:	1c18      	adds	r0, r3, #0
 80035d6:	f7fd fc39 	bl	8000e4c <__aeabi_fmul>
 80035da:	1c03      	adds	r3, r0, #0
 80035dc:	1c1c      	adds	r4, r3, #0
 80035de:	1d3b      	adds	r3, r7, #4
 80035e0:	885b      	ldrh	r3, [r3, #2]
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7fd ff26 	bl	8001434 <__aeabi_ui2f>
 80035e8:	1c03      	adds	r3, r0, #0
 80035ea:	1c19      	adds	r1, r3, #0
 80035ec:	1c20      	adds	r0, r4, #0
 80035ee:	f7fd fa65 	bl	8000abc <__aeabi_fdiv>
 80035f2:	1c03      	adds	r3, r0, #0
}
 80035f4:	1c18      	adds	r0, r3, #0
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b003      	add	sp, #12
 80035fa:	bd90      	pop	{r4, r7, pc}
 80035fc:	2000021c 	.word	0x2000021c
 8003600:	1ff80078 	.word	0x1ff80078
 8003604:	40400000 	.word	0x40400000

08003608 <getTemperature>:
 * @brief Gets Temperature of Node
 * Can be calculated through NTC thermistor or TI IC
 * @param None
 * @retval  Temperature in Celsius
 */
float getTemperature() {
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
	uint16_t adc;
	float Rt = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
	float tKelvin = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]
	float tCelsius = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
#ifdef USE_NTC
	HAL_GPIO_WritePin(TempPower_GPIO_Port, TempPower_Pin, 1);
 800361a:	23a0      	movs	r3, #160	; 0xa0
 800361c:	05db      	lsls	r3, r3, #23
 800361e:	2201      	movs	r2, #1
 8003620:	2102      	movs	r1, #2
 8003622:	0018      	movs	r0, r3
 8003624:	f004 faab 	bl	8007b7e <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) &adc, 1);
 8003628:	1cb9      	adds	r1, r7, #2
 800362a:	4b3e      	ldr	r3, [pc, #248]	; (8003724 <getTemperature+0x11c>)
 800362c:	2201      	movs	r2, #1
 800362e:	0018      	movs	r0, r3
 8003630:	f003 fa0e 	bl	8006a50 <HAL_ADC_Start_DMA>
	HAL_Delay(5);
 8003634:	2005      	movs	r0, #5
 8003636:	f000 feb3 	bl	80043a0 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) &adc, 1);
 800363a:	1cb9      	adds	r1, r7, #2
 800363c:	4b39      	ldr	r3, [pc, #228]	; (8003724 <getTemperature+0x11c>)
 800363e:	2201      	movs	r2, #1
 8003640:	0018      	movs	r0, r3
 8003642:	f003 fa05 	bl	8006a50 <HAL_ADC_Start_DMA>
	HAL_Delay(2);
 8003646:	2002      	movs	r0, #2
 8003648:	f000 feaa 	bl	80043a0 <HAL_Delay>
	Rt = R_BALANCE * (4096.0 / (float) adc - 1.0F);
 800364c:	1cbb      	adds	r3, r7, #2
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	0018      	movs	r0, r3
 8003652:	f7fd feef 	bl	8001434 <__aeabi_ui2f>
 8003656:	1c03      	adds	r3, r0, #0
 8003658:	1c18      	adds	r0, r3, #0
 800365a:	f7ff fd13 	bl	8003084 <__aeabi_f2d>
 800365e:	0002      	movs	r2, r0
 8003660:	000b      	movs	r3, r1
 8003662:	2000      	movs	r0, #0
 8003664:	4930      	ldr	r1, [pc, #192]	; (8003728 <getTemperature+0x120>)
 8003666:	f7fe fa63 	bl	8001b30 <__aeabi_ddiv>
 800366a:	0002      	movs	r2, r0
 800366c:	000b      	movs	r3, r1
 800366e:	0010      	movs	r0, r2
 8003670:	0019      	movs	r1, r3
 8003672:	2200      	movs	r2, #0
 8003674:	4b2d      	ldr	r3, [pc, #180]	; (800372c <getTemperature+0x124>)
 8003676:	f7ff f8c9 	bl	800280c <__aeabi_dsub>
 800367a:	0002      	movs	r2, r0
 800367c:	000b      	movs	r3, r1
 800367e:	0010      	movs	r0, r2
 8003680:	0019      	movs	r1, r3
 8003682:	2200      	movs	r2, #0
 8003684:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <getTemperature+0x128>)
 8003686:	f7fe fe55 	bl	8002334 <__aeabi_dmul>
 800368a:	0002      	movs	r2, r0
 800368c:	000b      	movs	r3, r1
 800368e:	0010      	movs	r0, r2
 8003690:	0019      	movs	r1, r3
 8003692:	f7ff fd3f 	bl	8003114 <__aeabi_d2f>
 8003696:	1c03      	adds	r3, r0, #0
 8003698:	60fb      	str	r3, [r7, #12]
	tKelvin = (BETA * HOME_TEMP)
			/ (BETA + (HOME_TEMP * log(Rt / R_THERMISTOR_DEFAULT)));
 800369a:	4926      	ldr	r1, [pc, #152]	; (8003734 <getTemperature+0x12c>)
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f7fd fa0d 	bl	8000abc <__aeabi_fdiv>
 80036a2:	1c03      	adds	r3, r0, #0
 80036a4:	1c18      	adds	r0, r3, #0
 80036a6:	f7ff fced 	bl	8003084 <__aeabi_f2d>
 80036aa:	0002      	movs	r2, r0
 80036ac:	000b      	movs	r3, r1
 80036ae:	0010      	movs	r0, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	f00a fa2b 	bl	800db0c <log>
 80036b6:	22c0      	movs	r2, #192	; 0xc0
 80036b8:	05d2      	lsls	r2, r2, #23
 80036ba:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <getTemperature+0x130>)
 80036bc:	f7fe fe3a 	bl	8002334 <__aeabi_dmul>
 80036c0:	0002      	movs	r2, r0
 80036c2:	000b      	movs	r3, r1
 80036c4:	0010      	movs	r0, r2
 80036c6:	0019      	movs	r1, r3
 80036c8:	2200      	movs	r2, #0
 80036ca:	4b1c      	ldr	r3, [pc, #112]	; (800373c <getTemperature+0x134>)
 80036cc:	f7fd fef4 	bl	80014b8 <__aeabi_dadd>
 80036d0:	0002      	movs	r2, r0
 80036d2:	000b      	movs	r3, r1
 80036d4:	2080      	movs	r0, #128	; 0x80
 80036d6:	0600      	lsls	r0, r0, #24
 80036d8:	4919      	ldr	r1, [pc, #100]	; (8003740 <getTemperature+0x138>)
 80036da:	f7fe fa29 	bl	8001b30 <__aeabi_ddiv>
 80036de:	0002      	movs	r2, r0
 80036e0:	000b      	movs	r3, r1
	tKelvin = (BETA * HOME_TEMP)
 80036e2:	0010      	movs	r0, r2
 80036e4:	0019      	movs	r1, r3
 80036e6:	f7ff fd15 	bl	8003114 <__aeabi_d2f>
 80036ea:	1c03      	adds	r3, r0, #0
 80036ec:	60bb      	str	r3, [r7, #8]

	tCelsius = tKelvin - 273.15;
 80036ee:	68b8      	ldr	r0, [r7, #8]
 80036f0:	f7ff fcc8 	bl	8003084 <__aeabi_f2d>
 80036f4:	4a13      	ldr	r2, [pc, #76]	; (8003744 <getTemperature+0x13c>)
 80036f6:	4b14      	ldr	r3, [pc, #80]	; (8003748 <getTemperature+0x140>)
 80036f8:	f7ff f888 	bl	800280c <__aeabi_dsub>
 80036fc:	0002      	movs	r2, r0
 80036fe:	000b      	movs	r3, r1
 8003700:	0010      	movs	r0, r2
 8003702:	0019      	movs	r1, r3
 8003704:	f7ff fd06 	bl	8003114 <__aeabi_d2f>
 8003708:	1c03      	adds	r3, r0, #0
 800370a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(TempPower_GPIO_Port, TempPower_Pin, 0);
 800370c:	23a0      	movs	r3, #160	; 0xa0
 800370e:	05db      	lsls	r3, r3, #23
 8003710:	2200      	movs	r2, #0
 8003712:	2102      	movs	r1, #2
 8003714:	0018      	movs	r0, r3
 8003716:	f004 fa32 	bl	8007b7e <HAL_GPIO_WritePin>
#endif
	return tCelsius;
 800371a:	687b      	ldr	r3, [r7, #4]
}
 800371c:	1c18      	adds	r0, r3, #0
 800371e:	46bd      	mov	sp, r7
 8003720:	b004      	add	sp, #16
 8003722:	bd80      	pop	{r7, pc}
 8003724:	2000021c 	.word	0x2000021c
 8003728:	40b00000 	.word	0x40b00000
 800372c:	3ff00000 	.word	0x3ff00000
 8003730:	40c38800 	.word	0x40c38800
 8003734:	461c4000 	.word	0x461c4000
 8003738:	4072a266 	.word	0x4072a266
 800373c:	40aedc00 	.word	0x40aedc00
 8003740:	4131f85c 	.word	0x4131f85c
 8003744:	66666666 	.word	0x66666666
 8003748:	40711266 	.word	0x40711266

0800374c <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	debugLogTime("RTC Interrupt");
 8003754:	4b07      	ldr	r3, [pc, #28]	; (8003774 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8003756:	0018      	movs	r0, r3
 8003758:	f7ff fe9c 	bl	8003494 <debugLogTime>
	lpTimWdCnt = 0;
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
	flag.rtcAlarm = 1;
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_RTCEx_WakeUpTimerEventCallback+0x30>)
 8003764:	781a      	ldrb	r2, [r3, #0]
 8003766:	2101      	movs	r1, #1
 8003768:	430a      	orrs	r2, r1
 800376a:	701a      	strb	r2, [r3, #0]
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}
 8003774:	0800df44 	.word	0x0800df44
 8003778:	20000450 	.word	0x20000450
 800377c:	2000044c 	.word	0x2000044c

08003780 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	if (lpTimWdCnt > (settings.workInterval * 2) / WATCHDOG_INTERVAL) {
 8003788:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <HAL_LPTIM_AutoReloadMatchCallback+0x64>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	001c      	movs	r4, r3
 800378e:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <HAL_LPTIM_AutoReloadMatchCallback+0x68>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	2178      	movs	r1, #120	; 0x78
 8003796:	0018      	movs	r0, r3
 8003798:	f7fc fcd2 	bl	8000140 <__udivsi3>
 800379c:	0003      	movs	r3, r0
 800379e:	429c      	cmp	r4, r3
 80037a0:	d90a      	bls.n	80037b8 <HAL_LPTIM_AutoReloadMatchCallback+0x38>
		debugLogTime("###LP WatchDog activated! Reset MCU!");
 80037a2:	4b12      	ldr	r3, [pc, #72]	; (80037ec <HAL_LPTIM_AutoReloadMatchCallback+0x6c>)
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7ff fe75 	bl	8003494 <debugLogTime>
		SCB->AIRCR |= SCB_AIRCR_SYSRESETREQ_Msk;
 80037aa:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <HAL_LPTIM_AutoReloadMatchCallback+0x70>)
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <HAL_LPTIM_AutoReloadMatchCallback+0x70>)
 80037b0:	2104      	movs	r1, #4
 80037b2:	430a      	orrs	r2, r1
 80037b4:	60da      	str	r2, [r3, #12]
	} else {
		debugLogTime("LP Interrupt");
		debugLogInt("LP Watchdog cnt is %d", ++lpTimWdCnt);
	}
}
 80037b6:	e011      	b.n	80037dc <HAL_LPTIM_AutoReloadMatchCallback+0x5c>
		debugLogTime("LP Interrupt");
 80037b8:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <HAL_LPTIM_AutoReloadMatchCallback+0x74>)
 80037ba:	0018      	movs	r0, r3
 80037bc:	f7ff fe6a 	bl	8003494 <debugLogTime>
		debugLogInt("LP Watchdog cnt is %d", ++lpTimWdCnt);
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <HAL_LPTIM_AutoReloadMatchCallback+0x64>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	3301      	adds	r3, #1
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_LPTIM_AutoReloadMatchCallback+0x64>)
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_LPTIM_AutoReloadMatchCallback+0x64>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	001a      	movs	r2, r3
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_LPTIM_AutoReloadMatchCallback+0x78>)
 80037d4:	0011      	movs	r1, r2
 80037d6:	0018      	movs	r0, r3
 80037d8:	f7ff feb0 	bl	800353c <debugLogInt>
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b003      	add	sp, #12
 80037e2:	bd90      	pop	{r4, r7, pc}
 80037e4:	20000450 	.word	0x20000450
 80037e8:	200004e8 	.word	0x200004e8
 80037ec:	0800df54 	.word	0x0800df54
 80037f0:	e000ed00 	.word	0xe000ed00
 80037f4:	0800df7c 	.word	0x0800df7c
 80037f8:	0800df8c 	.word	0x0800df8c

080037fc <initiateSettings>:
/**
 * @brief Initialises radio handler structure
 * @param None
 * @retval  None
 */
void initiateSettings() {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
	myRadio.sf = settings.sf;
 8003800:	4b15      	ldr	r3, [pc, #84]	; (8003858 <initiateSettings+0x5c>)
 8003802:	7b1a      	ldrb	r2, [r3, #12]
 8003804:	4b15      	ldr	r3, [pc, #84]	; (800385c <initiateSettings+0x60>)
 8003806:	715a      	strb	r2, [r3, #5]
	myRadio.bw = settings.bw;
 8003808:	4b13      	ldr	r3, [pc, #76]	; (8003858 <initiateSettings+0x5c>)
 800380a:	7b5a      	ldrb	r2, [r3, #13]
 800380c:	4b13      	ldr	r3, [pc, #76]	; (800385c <initiateSettings+0x60>)
 800380e:	719a      	strb	r2, [r3, #6]
	myRadio.cr = settings.cr;
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <initiateSettings+0x5c>)
 8003812:	7ada      	ldrb	r2, [r3, #11]
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <initiateSettings+0x60>)
 8003816:	71da      	strb	r2, [r3, #7]
	myRadio.syncWord = settings.sw;
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <initiateSettings+0x5c>)
 800381a:	7b9a      	ldrb	r2, [r3, #14]
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <initiateSettings+0x60>)
 800381e:	739a      	strb	r2, [r3, #14]
	myRadio.frequency = settings.realFrequency / 61.035f;
 8003820:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <initiateSettings+0x5c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	0018      	movs	r0, r3
 8003826:	f7fd fe05 	bl	8001434 <__aeabi_ui2f>
 800382a:	1c03      	adds	r3, r0, #0
 800382c:	490c      	ldr	r1, [pc, #48]	; (8003860 <initiateSettings+0x64>)
 800382e:	1c18      	adds	r0, r3, #0
 8003830:	f7fd f944 	bl	8000abc <__aeabi_fdiv>
 8003834:	1c03      	adds	r3, r0, #0
 8003836:	1c18      	adds	r0, r3, #0
 8003838:	f7fc febe 	bl	80005b8 <__aeabi_f2uiz>
 800383c:	0002      	movs	r2, r0
 800383e:	4b07      	ldr	r3, [pc, #28]	; (800385c <initiateSettings+0x60>)
 8003840:	601a      	str	r2, [r3, #0]
	myRadio.power = settings.power;
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <initiateSettings+0x5c>)
 8003844:	7bda      	ldrb	r2, [r3, #15]
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <initiateSettings+0x60>)
 8003848:	711a      	strb	r2, [r3, #4]
	myRadio.preamble = settings.preamble;
 800384a:	4b03      	ldr	r3, [pc, #12]	; (8003858 <initiateSettings+0x5c>)
 800384c:	891a      	ldrh	r2, [r3, #8]
 800384e:	4b03      	ldr	r3, [pc, #12]	; (800385c <initiateSettings+0x60>)
 8003850:	819a      	strh	r2, [r3, #12]
}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	200004e8 	.word	0x200004e8
 800385c:	20000454 	.word	0x20000454
 8003860:	427423d7 	.word	0x427423d7

08003864 <defaultSettings>:
/**
 * @brief Initializes default node settings
 * @param None
 * @retval None
 */
void defaultSettings() {
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
	settings.nodeNum = 0;
 8003868:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <defaultSettings+0x5c>)
 800386a:	2200      	movs	r2, #0
 800386c:	729a      	strb	r2, [r3, #10]
	settings.workInterval = 600;
 800386e:	4b14      	ldr	r3, [pc, #80]	; (80038c0 <defaultSettings+0x5c>)
 8003870:	2296      	movs	r2, #150	; 0x96
 8003872:	0092      	lsls	r2, r2, #2
 8003874:	605a      	str	r2, [r3, #4]
	settings.voltageTreshold = 2.0f;
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <defaultSettings+0x5c>)
 8003878:	2280      	movs	r2, #128	; 0x80
 800387a:	05d2      	lsls	r2, r2, #23
 800387c:	615a      	str	r2, [r3, #20]
	settings.bw = SX127X_LORA_BW_125KHZ;
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <defaultSettings+0x5c>)
 8003880:	2207      	movs	r2, #7
 8003882:	735a      	strb	r2, [r3, #13]
	settings.cr = SX127X_CR_4_8;
 8003884:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <defaultSettings+0x5c>)
 8003886:	2204      	movs	r2, #4
 8003888:	72da      	strb	r2, [r3, #11]
	settings.sf = SX127X_LORA_SF_12;
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <defaultSettings+0x5c>)
 800388c:	220c      	movs	r2, #12
 800388e:	731a      	strb	r2, [r3, #12]
	settings.sw = 0x1;
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <defaultSettings+0x5c>)
 8003892:	2201      	movs	r2, #1
 8003894:	739a      	strb	r2, [r3, #14]
	settings.power = SX127X_POWER_20DBM;
 8003896:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <defaultSettings+0x5c>)
 8003898:	2214      	movs	r2, #20
 800389a:	73da      	strb	r2, [r3, #15]
	settings.realFrequency = DEF_FREQUENCY;
 800389c:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <defaultSettings+0x5c>)
 800389e:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <defaultSettings+0x60>)
 80038a0:	601a      	str	r2, [r3, #0]
	settings.preamble = 5;
 80038a2:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <defaultSettings+0x5c>)
 80038a4:	2205      	movs	r2, #5
 80038a6:	811a      	strh	r2, [r3, #8]
	settings.useLed = true;
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <defaultSettings+0x5c>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	741a      	strb	r2, [r3, #16]
	settings.debugLevel = 0;
 80038ae:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <defaultSettings+0x5c>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	761a      	strb	r2, [r3, #24]
	initiateSettings();
 80038b4:	f7ff ffa2 	bl	80037fc <initiateSettings>
}
 80038b8:	46c0      	nop			; (mov r8, r8)
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	200004e8 	.word	0x200004e8
 80038c4:	33c8d600 	.word	0x33c8d600

080038c8 <tryEeprom>:
 * @brief Tries to initialize node from data stored in EEPROM
 * if data exist and valid
 * @param None
 * @retval HAL status
 */
HAL_StatusTypeDef tryEeprom() {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
	nodeSettings_t *eepromSettings = (nodeSettings_t*) FLASH_EEPROM_BASE;
 80038ce:	4b34      	ldr	r3, [pc, #208]	; (80039a0 <tryEeprom+0xd8>)
 80038d0:	607b      	str	r3, [r7, #4]
	if (eepromSettings->realFrequency > MIN_FREQUENCY
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a33      	ldr	r2, [pc, #204]	; (80039a4 <tryEeprom+0xdc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d800      	bhi.n	80038de <tryEeprom+0x16>
 80038dc:	e05b      	b.n	8003996 <tryEeprom+0xce>
			&& eepromSettings->realFrequency < MAX_FREQUENCY
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a31      	ldr	r2, [pc, #196]	; (80039a8 <tryEeprom+0xe0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d856      	bhi.n	8003996 <tryEeprom+0xce>
			&& eepromSettings->bw < 10 && eepromSettings->cr < 5
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	7b5b      	ldrb	r3, [r3, #13]
 80038ec:	2b09      	cmp	r3, #9
 80038ee:	d852      	bhi.n	8003996 <tryEeprom+0xce>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	7adb      	ldrb	r3, [r3, #11]
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d84e      	bhi.n	8003996 <tryEeprom+0xce>
			&& eepromSettings->cr > 0 && eepromSettings->sf > 6
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	7adb      	ldrb	r3, [r3, #11]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d04a      	beq.n	8003996 <tryEeprom+0xce>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	7b1b      	ldrb	r3, [r3, #12]
 8003904:	2b06      	cmp	r3, #6
 8003906:	d946      	bls.n	8003996 <tryEeprom+0xce>
			&& eepromSettings->sf < 13 && eepromSettings->power > 9
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	7b1b      	ldrb	r3, [r3, #12]
 800390c:	2b0c      	cmp	r3, #12
 800390e:	d842      	bhi.n	8003996 <tryEeprom+0xce>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7bdb      	ldrb	r3, [r3, #15]
 8003914:	2b09      	cmp	r3, #9
 8003916:	d93e      	bls.n	8003996 <tryEeprom+0xce>
			&& eepromSettings->power < 21 && eepromSettings->sw != 0x34
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	7bdb      	ldrb	r3, [r3, #15]
 800391c:	2b14      	cmp	r3, #20
 800391e:	d83a      	bhi.n	8003996 <tryEeprom+0xce>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	7b9b      	ldrb	r3, [r3, #14]
 8003924:	2b34      	cmp	r3, #52	; 0x34
 8003926:	d036      	beq.n	8003996 <tryEeprom+0xce>
			&& eepromSettings->voltageTreshold >= 1.7f
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	491f      	ldr	r1, [pc, #124]	; (80039ac <tryEeprom+0xe4>)
 800392e:	1c18      	adds	r0, r3, #0
 8003930:	f7fc fdea 	bl	8000508 <__aeabi_fcmpge>
 8003934:	1e03      	subs	r3, r0, #0
 8003936:	d02e      	beq.n	8003996 <tryEeprom+0xce>
			&& eepromSettings->voltageTreshold <= 3.0f
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	491c      	ldr	r1, [pc, #112]	; (80039b0 <tryEeprom+0xe8>)
 800393e:	1c18      	adds	r0, r3, #0
 8003940:	f7fc fdce 	bl	80004e0 <__aeabi_fcmple>
 8003944:	1e03      	subs	r3, r0, #0
 8003946:	d026      	beq.n	8003996 <tryEeprom+0xce>
			&& eepromSettings->workInterval >= MIN_WORK_INTERVAL
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b3b      	cmp	r3, #59	; 0x3b
 800394e:	d922      	bls.n	8003996 <tryEeprom+0xce>
			&& eepromSettings->workInterval <= MAX_WORK_INTERVAL
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <tryEeprom+0xec>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d81d      	bhi.n	8003996 <tryEeprom+0xce>
			&& eepromSettings->preamble > 1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	891b      	ldrh	r3, [r3, #8]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d919      	bls.n	8003996 <tryEeprom+0xce>
			&& eepromSettings->voltageTreshold >= 1.8f
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	4914      	ldr	r1, [pc, #80]	; (80039b8 <tryEeprom+0xf0>)
 8003968:	1c18      	adds	r0, r3, #0
 800396a:	f7fc fdcd 	bl	8000508 <__aeabi_fcmpge>
 800396e:	1e03      	subs	r3, r0, #0
 8003970:	d011      	beq.n	8003996 <tryEeprom+0xce>
			&& eepromSettings->voltageTreshold <= 3.1f) {
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	4911      	ldr	r1, [pc, #68]	; (80039bc <tryEeprom+0xf4>)
 8003978:	1c18      	adds	r0, r3, #0
 800397a:	f7fc fdb1 	bl	80004e0 <__aeabi_fcmple>
 800397e:	1e03      	subs	r3, r0, #0
 8003980:	d009      	beq.n	8003996 <tryEeprom+0xce>
		memcpy((uint8_t*) &settings, (uint8_t*) eepromSettings,
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <tryEeprom+0xf8>)
 8003986:	221c      	movs	r2, #28
 8003988:	0018      	movs	r0, r3
 800398a:	f007 f9f5 	bl	800ad78 <memcpy>
				sizeof(settings));
		initiateSettings();
 800398e:	f7ff ff35 	bl	80037fc <initiateSettings>
		return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <tryEeprom+0xd0>
	}
	return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
}
 8003998:	0018      	movs	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	b002      	add	sp, #8
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	08080000 	.word	0x08080000
 80039a4:	0839b680 	.word	0x0839b680
 80039a8:	3b8b87bf 	.word	0x3b8b87bf
 80039ac:	3fd9999a 	.word	0x3fd9999a
 80039b0:	40400000 	.word	0x40400000
 80039b4:	0000a8c0 	.word	0x0000a8c0
 80039b8:	3fe66666 	.word	0x3fe66666
 80039bc:	40466666 	.word	0x40466666
 80039c0:	200004e8 	.word	0x200004e8

080039c4 <saveSettings>:
 * @brief Saves settings from RAM to EEPROM
 * Saves settings by copying var settings to EEPROM
 * @param None
 * @retval None
 */
void saveSettings(nodeSettings_t *settingsPtr) {
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint32_t *ptr = (uint32_t*) settingsPtr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_DATAEEPROM_Unlock();
 80039d0:	f003 feae 	bl	8007730 <HAL_FLASHEx_DATAEEPROM_Unlock>
	for (i = 0; i < (sizeof(*settingsPtr) + 3) / 4; i++)
 80039d4:	230f      	movs	r3, #15
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	e014      	b.n	8003a08 <saveSettings+0x44>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
		FLASH_EEPROM_BASE + i * 4, *ptr++);
 80039de:	240f      	movs	r4, #15
 80039e0:	193b      	adds	r3, r7, r4
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <saveSettings+0x5c>)
 80039e6:	4694      	mov	ip, r2
 80039e8:	4463      	add	r3, ip
 80039ea:	009b      	lsls	r3, r3, #2
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
 80039ec:	0019      	movs	r1, r3
		FLASH_EEPROM_BASE + i * 4, *ptr++);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	1d1a      	adds	r2, r3, #4
 80039f2:	60ba      	str	r2, [r7, #8]
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	001a      	movs	r2, r3
 80039f8:	2002      	movs	r0, #2
 80039fa:	f003 fed5 	bl	80077a8 <HAL_FLASHEx_DATAEEPROM_Program>
	for (i = 0; i < (sizeof(*settingsPtr) + 3) / 4; i++)
 80039fe:	193b      	adds	r3, r7, r4
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	193b      	adds	r3, r7, r4
 8003a04:	3201      	adds	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
 8003a08:	230f      	movs	r3, #15
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d9e5      	bls.n	80039de <saveSettings+0x1a>
	HAL_FLASHEx_DATAEEPROM_Lock();
 8003a12:	f003 febb 	bl	800778c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b005      	add	sp, #20
 8003a1c:	bd90      	pop	{r4, r7, pc}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	02020000 	.word	0x02020000

08003a24 <setWakeup>:

void setWakeup(uint16_t delay) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	1dbb      	adds	r3, r7, #6
 8003a2e:	801a      	strh	r2, [r3, #0]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, recomendedDelay,
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <setWakeup+0x34>)
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	0019      	movs	r1, r3
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <setWakeup+0x38>)
 8003a38:	2204      	movs	r2, #4
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f005 fbe2 	bl	8009204 <HAL_RTCEx_SetWakeUpTimer_IT>
	RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
	debugLogInt("Setting WakeUp timer to %d seconds", delay);
 8003a40:	1dbb      	adds	r3, r7, #6
 8003a42:	881a      	ldrh	r2, [r3, #0]
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <setWakeup+0x3c>)
 8003a46:	0011      	movs	r1, r2
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f7ff fd77 	bl	800353c <debugLogInt>
}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b002      	add	sp, #8
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	20000014 	.word	0x20000014
 8003a5c:	200002f0 	.word	0x200002f0
 8003a60:	0800dfa4 	.word	0x0800dfa4

08003a64 <sleep>:
 * Switches radio module into sleep mode
 * Switches MCU to Stop mode
 * @param None
 * @retval None
 */
void sleep() {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin | ORANGE_Pin, LED_OFF);
 8003a68:	23c0      	movs	r3, #192	; 0xc0
 8003a6a:	019b      	lsls	r3, r3, #6
 8003a6c:	480b      	ldr	r0, [pc, #44]	; (8003a9c <sleep+0x38>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	0019      	movs	r1, r3
 8003a72:	f004 f884 	bl	8007b7e <HAL_GPIO_WritePin>
	SX127X_sleep(&myRadio);
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <sleep+0x3c>)
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f002 f8bf 	bl	8005bfc <SX127X_sleep>
	HAL_DBGMCU_DisableDBGStopMode();
 8003a7e:	f002 fe65 	bl	800674c <HAL_DBGMCU_DisableDBGStopMode>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <sleep+0x40>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <sleep+0x40>)
 8003a88:	2104      	movs	r1, #4
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003a8e:	2101      	movs	r1, #1
 8003a90:	2001      	movs	r0, #1
 8003a92:	f004 fb99 	bl	80081c8 <HAL_PWR_EnterSTOPMode>

}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	50000400 	.word	0x50000400
 8003aa0:	20000454 	.word	0x20000454
 8003aa4:	40007000 	.word	0x40007000

08003aa8 <sendStatus>:
/**
 * @Sends current status of Node to Base station
 * @param None
 * @retval None
 */
void sendStatus(nodeStatus_t *status, nodeSettings_t *settingsPtr) {
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]

	txMes->adr = settings.nodeNum;
 8003ab2:	4b52      	ldr	r3, [pc, #328]	; (8003bfc <sendStatus+0x154>)
 8003ab4:	7a9a      	ldrb	r2, [r3, #10]
 8003ab6:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <sendStatus+0x158>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	1c11      	adds	r1, r2, #0
 8003abc:	221f      	movs	r2, #31
 8003abe:	400a      	ands	r2, r1
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	00d0      	lsls	r0, r2, #3
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	2107      	movs	r1, #7
 8003ac8:	400a      	ands	r2, r1
 8003aca:	1c11      	adds	r1, r2, #0
 8003acc:	1c02      	adds	r2, r0, #0
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	701a      	strb	r2, [r3, #0]
	txMes->uplink = 1;
 8003ad2:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <sendStatus+0x158>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	781a      	ldrb	r2, [r3, #0]
 8003ad8:	2101      	movs	r1, #1
 8003ada:	430a      	orrs	r2, r1
 8003adc:	701a      	strb	r2, [r3, #0]
	txMes->disarm = status->disarmed;
 8003ade:	4b48      	ldr	r3, [pc, #288]	; (8003c00 <sendStatus+0x158>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	7812      	ldrb	r2, [r2, #0]
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	400a      	ands	r2, r1
 8003aea:	0010      	movs	r0, r2
 8003aec:	785a      	ldrb	r2, [r3, #1]
 8003aee:	2101      	movs	r1, #1
 8003af0:	438a      	bics	r2, r1
 8003af2:	1c11      	adds	r1, r2, #0
 8003af4:	1c02      	adds	r2, r0, #0
 8003af6:	430a      	orrs	r2, r1
 8003af8:	705a      	strb	r2, [r3, #1]
	txMes->message = MSG_UP_ACKNOWLEDGE;
 8003afa:	4b41      	ldr	r3, [pc, #260]	; (8003c00 <sendStatus+0x158>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	781a      	ldrb	r2, [r3, #0]
 8003b00:	2106      	movs	r1, #6
 8003b02:	438a      	bics	r2, r1
 8003b04:	701a      	strb	r2, [r3, #0]
	txMes->opened = status->opened || status->unconfirmedOpening;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	785b      	ldrb	r3, [r3, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <sendStatus+0x6e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	79db      	ldrb	r3, [r3, #7]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <sendStatus+0x72>
 8003b16:	2201      	movs	r2, #1
 8003b18:	e000      	b.n	8003b1c <sendStatus+0x74>
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <sendStatus+0x158>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	1c11      	adds	r1, r2, #0
 8003b22:	2201      	movs	r2, #1
 8003b24:	400a      	ands	r2, r1
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	2101      	movs	r1, #1
 8003b2a:	400a      	ands	r2, r1
 8003b2c:	1890      	adds	r0, r2, r2
 8003b2e:	785a      	ldrb	r2, [r3, #1]
 8003b30:	2102      	movs	r1, #2
 8003b32:	438a      	bics	r2, r1
 8003b34:	1c11      	adds	r1, r2, #0
 8003b36:	1c02      	adds	r2, r0, #0
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	705a      	strb	r2, [r3, #1]
	txMes->powered = status->powered;
 8003b3c:	4b30      	ldr	r3, [pc, #192]	; (8003c00 <sendStatus+0x158>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	7912      	ldrb	r2, [r2, #4]
 8003b44:	2101      	movs	r1, #1
 8003b46:	400a      	ands	r2, r1
 8003b48:	0090      	lsls	r0, r2, #2
 8003b4a:	785a      	ldrb	r2, [r3, #1]
 8003b4c:	2104      	movs	r1, #4
 8003b4e:	438a      	bics	r2, r1
 8003b50:	1c11      	adds	r1, r2, #0
 8003b52:	1c02      	adds	r2, r0, #0
 8003b54:	430a      	orrs	r2, r1
 8003b56:	705a      	strb	r2, [r3, #1]
	txMes->codedTemperature = getTemperature() * 2.0F + 80;
 8003b58:	f7ff fd56 	bl	8003608 <getTemperature>
 8003b5c:	1c03      	adds	r3, r0, #0
 8003b5e:	1c19      	adds	r1, r3, #0
 8003b60:	1c18      	adds	r0, r3, #0
 8003b62:	f7fc fe0d 	bl	8000780 <__aeabi_fadd>
 8003b66:	1c03      	adds	r3, r0, #0
 8003b68:	4926      	ldr	r1, [pc, #152]	; (8003c04 <sendStatus+0x15c>)
 8003b6a:	1c18      	adds	r0, r3, #0
 8003b6c:	f7fc fe08 	bl	8000780 <__aeabi_fadd>
 8003b70:	1c03      	adds	r3, r0, #0
 8003b72:	1c1a      	adds	r2, r3, #0
 8003b74:	4b22      	ldr	r3, [pc, #136]	; (8003c00 <sendStatus+0x158>)
 8003b76:	681c      	ldr	r4, [r3, #0]
 8003b78:	1c10      	adds	r0, r2, #0
 8003b7a:	f7fc fd1d 	bl	80005b8 <__aeabi_f2uiz>
 8003b7e:	0003      	movs	r3, r0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	70a3      	strb	r3, [r4, #2]
	txMes->codedVoltage = ((int) (getVoltage() * 10)) - 19;
 8003b84:	f7ff fd0a 	bl	800359c <getVoltage>
 8003b88:	1c03      	adds	r3, r0, #0
 8003b8a:	491f      	ldr	r1, [pc, #124]	; (8003c08 <sendStatus+0x160>)
 8003b8c:	1c18      	adds	r0, r3, #0
 8003b8e:	f7fd f95d 	bl	8000e4c <__aeabi_fmul>
 8003b92:	1c03      	adds	r3, r0, #0
 8003b94:	1c18      	adds	r0, r3, #0
 8003b96:	f7fd fc2d 	bl	80013f4 <__aeabi_f2iz>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	3b13      	subs	r3, #19
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <sendStatus+0x158>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	1c11      	adds	r1, r2, #0
 8003ba8:	221f      	movs	r2, #31
 8003baa:	400a      	ands	r2, r1
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	00d0      	lsls	r0, r2, #3
 8003bb0:	785a      	ldrb	r2, [r3, #1]
 8003bb2:	2107      	movs	r1, #7
 8003bb4:	400a      	ands	r2, r1
 8003bb6:	1c11      	adds	r1, r2, #0
 8003bb8:	1c02      	adds	r2, r0, #0
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	705a      	strb	r2, [r3, #1]
	status->openedToConfirm = status->opened || status->unconfirmedOpening;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	785b      	ldrb	r3, [r3, #1]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d103      	bne.n	8003bce <sendStatus+0x126>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	79db      	ldrb	r3, [r3, #7]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <sendStatus+0x12a>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <sendStatus+0x12c>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	1c1a      	adds	r2, r3, #0
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	4013      	ands	r3, r2
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	70da      	strb	r2, [r3, #3]
	status->poweredToConfirm = status->powered;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	791a      	ldrb	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	719a      	strb	r2, [r3, #6]
	SX127X_transmitAsync(&myRadio, sizeof(uplinkMessage_t));
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <sendStatus+0x164>)
 8003bea:	2103      	movs	r1, #3
 8003bec:	0018      	movs	r0, r3
 8003bee:	f002 f947 	bl	8005e80 <SX127X_transmitAsync>

}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b003      	add	sp, #12
 8003bf8:	bd90      	pop	{r4, r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	200004e8 	.word	0x200004e8
 8003c00:	20000020 	.word	0x20000020
 8003c04:	42a00000 	.word	0x42a00000
 8003c08:	41200000 	.word	0x41200000
 8003c0c:	20000454 	.word	0x20000454

08003c10 <deinitGpio>:
/**
 * @brief Turns of user pins to decrease power consumption
 * @param None
 * @retval None
 */
void deinitGpio() {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003c16:	1d3b      	adds	r3, r7, #4
 8003c18:	0018      	movs	r0, r3
 8003c1a:	2314      	movs	r3, #20
 8003c1c:	001a      	movs	r2, r3
 8003c1e:	2100      	movs	r1, #0
 8003c20:	f007 f8b3 	bl	800ad8a <memset>

	GPIO_InitStruct.Pin = USER1_Pin | USER2_Pin;
 8003c24:	1d3b      	adds	r3, r7, #4
 8003c26:	22c0      	movs	r2, #192	; 0xc0
 8003c28:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	2200      	movs	r2, #0
 8003c34:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(USER1_GPIO_Port, &GPIO_InitStruct);
 8003c36:	1d3b      	adds	r3, r7, #4
 8003c38:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <deinitGpio+0x3c>)
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	0010      	movs	r0, r2
 8003c3e:	f003 fe0b 	bl	8007858 <HAL_GPIO_Init>
}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b006      	add	sp, #24
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	50000400 	.word	0x50000400

08003c50 <RadioInit>:
 * @brief Configures Radio module, tries to load custom settings from EEPROM
 * if there is no valid data in EEPROM than loads default settings
 * @param None
 * @retval None
 */
void RadioInit() {
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af02      	add	r7, sp, #8
	SX127X_dio_t nss;
	SX127X_dio_t reset;

	SX127X_defaultConfig(&myRadio);
 8003c56:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <RadioInit+0x68>)
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f001 ff59 	bl	8005b10 <SX127X_defaultConfig>
	defaultSettings();
 8003c5e:	f7ff fe01 	bl	8003864 <defaultSettings>
	tryEeprom();
 8003c62:	f7ff fe31 	bl	80038c8 <tryEeprom>
	nss.pin = NSS_Pin;
 8003c66:	2108      	movs	r1, #8
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	601a      	str	r2, [r3, #0]
	nss.port = NSS_GPIO_Port;
 8003c6e:	187b      	adds	r3, r7, r1
 8003c70:	22a0      	movs	r2, #160	; 0xa0
 8003c72:	05d2      	lsls	r2, r2, #23
 8003c74:	605a      	str	r2, [r3, #4]
	reset.pin = RESET_Pin;
 8003c76:	003b      	movs	r3, r7
 8003c78:	2208      	movs	r2, #8
 8003c7a:	601a      	str	r2, [r3, #0]
	reset.port = RESET_GPIO_Port;
 8003c7c:	003b      	movs	r3, r7
 8003c7e:	22a0      	movs	r2, #160	; 0xa0
 8003c80:	05d2      	lsls	r2, r2, #23
 8003c82:	605a      	str	r2, [r3, #4]
	SX127X_PortConfig(&myRadio, reset, nss, &hspi1);
 8003c84:	187b      	adds	r3, r7, r1
 8003c86:	003a      	movs	r2, r7
 8003c88:	4c0b      	ldr	r4, [pc, #44]	; (8003cb8 <RadioInit+0x68>)
 8003c8a:	490c      	ldr	r1, [pc, #48]	; (8003cbc <RadioInit+0x6c>)
 8003c8c:	9101      	str	r1, [sp, #4]
 8003c8e:	4669      	mov	r1, sp
 8003c90:	6858      	ldr	r0, [r3, #4]
 8003c92:	6008      	str	r0, [r1, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6811      	ldr	r1, [r2, #0]
 8003c98:	6852      	ldr	r2, [r2, #4]
 8003c9a:	0020      	movs	r0, r4
 8003c9c:	f001 ff64 	bl	8005b68 <SX127X_PortConfig>
	SX127X_init(&myRadio);
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <RadioInit+0x68>)
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f002 fa02 	bl	80060ac <SX127X_init>
	SX127X_config(&myRadio);
 8003ca8:	4b03      	ldr	r3, [pc, #12]	; (8003cb8 <RadioInit+0x68>)
 8003caa:	0018      	movs	r0, r3
 8003cac:	f001 fe52 	bl	8005954 <SX127X_config>
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b005      	add	sp, #20
 8003cb6:	bd90      	pop	{r4, r7, pc}
 8003cb8:	20000454 	.word	0x20000454
 8003cbc:	20000314 	.word	0x20000314

08003cc0 <ReceivingTest>:
 * Red Led means module hears LoRa signal
 * Green Led means message received (with valid CRC)
 * @param None
 * @retval None
 */
void ReceivingTest() {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
	uint32_t recTime = 0x80000000;
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	60fb      	str	r3, [r7, #12]
	uint32_t recTime1 = 0x80000000;
 8003ccc:	2380      	movs	r3, #128	; 0x80
 8003cce:	061b      	lsls	r3, r3, #24
 8003cd0:	60bb      	str	r3, [r7, #8]
	uint32_t recTime2 = 0x80000000;
 8003cd2:	2380      	movs	r3, #128	; 0x80
 8003cd4:	061b      	lsls	r3, r3, #24
 8003cd6:	607b      	str	r3, [r7, #4]
	bool repeaterMode = false;
 8003cd8:	1cfb      	adds	r3, r7, #3
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
	debugLogTime("Receiving test activated");
 8003cde:	4b5d      	ldr	r3, [pc, #372]	; (8003e54 <ReceivingTest+0x194>)
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7ff fbd7 	bl	8003494 <debugLogTime>
	while (1) {

		SX127X_Routine(&myRadio);
 8003ce6:	4b5c      	ldr	r3, [pc, #368]	; (8003e58 <ReceivingTest+0x198>)
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f002 f8e9 	bl	8005ec0 <SX127X_Routine>
		if (myRadio.readBytes > 0) {
 8003cee:	4b5a      	ldr	r3, [pc, #360]	; (8003e58 <ReceivingTest+0x198>)
 8003cf0:	225d      	movs	r2, #93	; 0x5d
 8003cf2:	5c9b      	ldrb	r3, [r3, r2]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d02b      	beq.n	8003d50 <ReceivingTest+0x90>
			if (myRadio.badCrc == 0) {
 8003cf8:	4b57      	ldr	r3, [pc, #348]	; (8003e58 <ReceivingTest+0x198>)
 8003cfa:	2260      	movs	r2, #96	; 0x60
 8003cfc:	5c9b      	ldrb	r3, [r3, r2]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	4053      	eors	r3, r2
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01f      	beq.n	8003d48 <ReceivingTest+0x88>
				if (myRadio.rxBuf[0] == 255 && myRadio.rxBuf[1] == 255) {
 8003d08:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <ReceivingTest+0x198>)
 8003d0a:	7f5b      	ldrb	r3, [r3, #29]
 8003d0c:	2bff      	cmp	r3, #255	; 0xff
 8003d0e:	d117      	bne.n	8003d40 <ReceivingTest+0x80>
 8003d10:	4b51      	ldr	r3, [pc, #324]	; (8003e58 <ReceivingTest+0x198>)
 8003d12:	7f9b      	ldrb	r3, [r3, #30]
 8003d14:	2bff      	cmp	r3, #255	; 0xff
 8003d16:	d113      	bne.n	8003d40 <ReceivingTest+0x80>
					repeaterMode = true;
 8003d18:	1cfb      	adds	r3, r7, #3
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
					if (myRadio.rxBuf[2] == 1)
 8003d1e:	4b4e      	ldr	r3, [pc, #312]	; (8003e58 <ReceivingTest+0x198>)
 8003d20:	7fdb      	ldrb	r3, [r3, #31]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d103      	bne.n	8003d2e <ReceivingTest+0x6e>
						recTime1 = HAL_GetTick();
 8003d26:	f002 fd07 	bl	8006738 <HAL_GetTick>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	60bb      	str	r3, [r7, #8]
					if (myRadio.rxBuf[2] == 2)
 8003d2e:	4b4a      	ldr	r3, [pc, #296]	; (8003e58 <ReceivingTest+0x198>)
 8003d30:	7fdb      	ldrb	r3, [r3, #31]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d108      	bne.n	8003d48 <ReceivingTest+0x88>
						recTime2 = HAL_GetTick();
 8003d36:	f002 fcff 	bl	8006738 <HAL_GetTick>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	607b      	str	r3, [r7, #4]
					if (myRadio.rxBuf[2] == 2)
 8003d3e:	e003      	b.n	8003d48 <ReceivingTest+0x88>
				} else {
					recTime = HAL_GetTick();
 8003d40:	f002 fcfa 	bl	8006738 <HAL_GetTick>
 8003d44:	0003      	movs	r3, r0
 8003d46:	60fb      	str	r3, [r7, #12]
				}

			}

			myRadio.readBytes = 0;
 8003d48:	4b43      	ldr	r3, [pc, #268]	; (8003e58 <ReceivingTest+0x198>)
 8003d4a:	225d      	movs	r2, #93	; 0x5d
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	5499      	strb	r1, [r3, r2]
		}
		if (repeaterMode) {
 8003d50:	1cfb      	adds	r3, r7, #3
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d051      	beq.n	8003dfc <ReceivingTest+0x13c>
			if (myRadio.signalDetected) {
 8003d58:	4b3f      	ldr	r3, [pc, #252]	; (8003e58 <ReceivingTest+0x198>)
 8003d5a:	7f1b      	ldrb	r3, [r3, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00e      	beq.n	8003d7e <ReceivingTest+0xbe>
				HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	015b      	lsls	r3, r3, #5
 8003d64:	483d      	ldr	r0, [pc, #244]	; (8003e5c <ReceivingTest+0x19c>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	0019      	movs	r1, r3
 8003d6a:	f003 ff08 	bl	8007b7e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BLUE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	019b      	lsls	r3, r3, #6
 8003d72:	483a      	ldr	r0, [pc, #232]	; (8003e5c <ReceivingTest+0x19c>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	0019      	movs	r1, r3
 8003d78:	f003 ff01 	bl	8007b7e <HAL_GPIO_WritePin>
 8003d7c:	e00d      	b.n	8003d9a <ReceivingTest+0xda>
			} else {
				HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	015b      	lsls	r3, r3, #5
 8003d82:	4836      	ldr	r0, [pc, #216]	; (8003e5c <ReceivingTest+0x19c>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	0019      	movs	r1, r3
 8003d88:	f003 fef9 	bl	8007b7e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BLUE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	019b      	lsls	r3, r3, #6
 8003d90:	4832      	ldr	r0, [pc, #200]	; (8003e5c <ReceivingTest+0x19c>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	0019      	movs	r1, r3
 8003d96:	f003 fef2 	bl	8007b7e <HAL_GPIO_WritePin>
			}

			if (HAL_GetTick() - recTime1 < 300)
 8003d9a:	f002 fccd 	bl	8006738 <HAL_GetTick>
 8003d9e:	0002      	movs	r2, r0
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	1ad2      	subs	r2, r2, r3
 8003da4:	2396      	movs	r3, #150	; 0x96
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d207      	bcs.n	8003dbc <ReceivingTest+0xfc>
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	019b      	lsls	r3, r3, #6
 8003db0:	482a      	ldr	r0, [pc, #168]	; (8003e5c <ReceivingTest+0x19c>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	0019      	movs	r1, r3
 8003db6:	f003 fee2 	bl	8007b7e <HAL_GPIO_WritePin>
 8003dba:	e006      	b.n	8003dca <ReceivingTest+0x10a>
			else
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	019b      	lsls	r3, r3, #6
 8003dc0:	4826      	ldr	r0, [pc, #152]	; (8003e5c <ReceivingTest+0x19c>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	0019      	movs	r1, r3
 8003dc6:	f003 feda 	bl	8007b7e <HAL_GPIO_WritePin>
			if (HAL_GetTick() - recTime2 < 300)
 8003dca:	f002 fcb5 	bl	8006738 <HAL_GetTick>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	1ad2      	subs	r2, r2, r3
 8003dd4:	2396      	movs	r3, #150	; 0x96
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d207      	bcs.n	8003dec <ReceivingTest+0x12c>
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, BLUE_Pin, LED_ON);
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	015b      	lsls	r3, r3, #5
 8003de0:	481e      	ldr	r0, [pc, #120]	; (8003e5c <ReceivingTest+0x19c>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	0019      	movs	r1, r3
 8003de6:	f003 feca 	bl	8007b7e <HAL_GPIO_WritePin>
 8003dea:	e77c      	b.n	8003ce6 <ReceivingTest+0x26>
			else
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	015b      	lsls	r3, r3, #5
 8003df0:	481a      	ldr	r0, [pc, #104]	; (8003e5c <ReceivingTest+0x19c>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	0019      	movs	r1, r3
 8003df6:	f003 fec2 	bl	8007b7e <HAL_GPIO_WritePin>
 8003dfa:	e774      	b.n	8003ce6 <ReceivingTest+0x26>
		} else {
			if (myRadio.signalDetected)
 8003dfc:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <ReceivingTest+0x198>)
 8003dfe:	7f1b      	ldrb	r3, [r3, #28]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <ReceivingTest+0x154>
				HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	015b      	lsls	r3, r3, #5
 8003e08:	4814      	ldr	r0, [pc, #80]	; (8003e5c <ReceivingTest+0x19c>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	f003 feb6 	bl	8007b7e <HAL_GPIO_WritePin>
 8003e12:	e006      	b.n	8003e22 <ReceivingTest+0x162>
			else
				HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	015b      	lsls	r3, r3, #5
 8003e18:	4810      	ldr	r0, [pc, #64]	; (8003e5c <ReceivingTest+0x19c>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	f003 feae 	bl	8007b7e <HAL_GPIO_WritePin>
			if (HAL_GetTick() - recTime < 300)
 8003e22:	f002 fc89 	bl	8006738 <HAL_GetTick>
 8003e26:	0002      	movs	r2, r0
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	1ad2      	subs	r2, r2, r3
 8003e2c:	2396      	movs	r3, #150	; 0x96
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d207      	bcs.n	8003e44 <ReceivingTest+0x184>
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	019b      	lsls	r3, r3, #6
 8003e38:	4808      	ldr	r0, [pc, #32]	; (8003e5c <ReceivingTest+0x19c>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	0019      	movs	r1, r3
 8003e3e:	f003 fe9e 	bl	8007b7e <HAL_GPIO_WritePin>
 8003e42:	e750      	b.n	8003ce6 <ReceivingTest+0x26>
			else
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	019b      	lsls	r3, r3, #6
 8003e48:	4804      	ldr	r0, [pc, #16]	; (8003e5c <ReceivingTest+0x19c>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	f003 fe96 	bl	8007b7e <HAL_GPIO_WritePin>
		SX127X_Routine(&myRadio);
 8003e52:	e748      	b.n	8003ce6 <ReceivingTest+0x26>
 8003e54:	0800dfc8 	.word	0x0800dfc8
 8003e58:	20000454 	.word	0x20000454
 8003e5c:	50000400 	.word	0x50000400

08003e60 <PingTest>:
 * Green light means valid response from Base station
 * Red light means transmission in progress
 * @param None
 * @retval None
 */
void PingTest() {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0

	debugLogTime("Ping test activated");
 8003e64:	4b2c      	ldr	r3, [pc, #176]	; (8003f18 <PingTest+0xb8>)
 8003e66:	0018      	movs	r0, r3
 8003e68:	f7ff fb14 	bl	8003494 <debugLogTime>
	while (1) {
		static uint32_t lastTrans;
		static uint32_t recTime;

		SX127X_Routine(&myRadio);
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <PingTest+0xbc>)
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f002 f826 	bl	8005ec0 <SX127X_Routine>

		if (myRadio.readBytes > 0) {
 8003e74:	4b29      	ldr	r3, [pc, #164]	; (8003f1c <PingTest+0xbc>)
 8003e76:	225d      	movs	r2, #93	; 0x5d
 8003e78:	5c9b      	ldrb	r3, [r3, r2]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d010      	beq.n	8003ea0 <PingTest+0x40>
			if (myRadio.badCrc == 0)
 8003e7e:	4b27      	ldr	r3, [pc, #156]	; (8003f1c <PingTest+0xbc>)
 8003e80:	2260      	movs	r2, #96	; 0x60
 8003e82:	5c9b      	ldrb	r3, [r3, r2]
 8003e84:	2201      	movs	r2, #1
 8003e86:	4053      	eors	r3, r2
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <PingTest+0x38>
				recTime = HAL_GetTick();
 8003e8e:	f002 fc53 	bl	8006738 <HAL_GetTick>
 8003e92:	0002      	movs	r2, r0
 8003e94:	4b22      	ldr	r3, [pc, #136]	; (8003f20 <PingTest+0xc0>)
 8003e96:	601a      	str	r2, [r3, #0]
			myRadio.readBytes = 0;
 8003e98:	4b20      	ldr	r3, [pc, #128]	; (8003f1c <PingTest+0xbc>)
 8003e9a:	225d      	movs	r2, #93	; 0x5d
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	5499      	strb	r1, [r3, r2]
		}

		if (HAL_GetTick() - lastTrans > 2000) {
 8003ea0:	f002 fc4a 	bl	8006738 <HAL_GetTick>
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	4b1f      	ldr	r3, [pc, #124]	; (8003f24 <PingTest+0xc4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	1ad2      	subs	r2, r2, r3
 8003eac:	23fa      	movs	r3, #250	; 0xfa
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d904      	bls.n	8003ebe <PingTest+0x5e>
			lastTrans = HAL_GetTick();
 8003eb4:	f002 fc40 	bl	8006738 <HAL_GetTick>
 8003eb8:	0002      	movs	r2, r0
 8003eba:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <PingTest+0xc4>)
 8003ebc:	601a      	str	r2, [r3, #0]
		}
		if (HAL_GetTick() - recTime < 300)
 8003ebe:	f002 fc3b 	bl	8006738 <HAL_GetTick>
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <PingTest+0xc0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	1ad2      	subs	r2, r2, r3
 8003eca:	2396      	movs	r3, #150	; 0x96
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d207      	bcs.n	8003ee2 <PingTest+0x82>
			HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	019b      	lsls	r3, r3, #6
 8003ed6:	4814      	ldr	r0, [pc, #80]	; (8003f28 <PingTest+0xc8>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	0019      	movs	r1, r3
 8003edc:	f003 fe4f 	bl	8007b7e <HAL_GPIO_WritePin>
 8003ee0:	e006      	b.n	8003ef0 <PingTest+0x90>
		else
			HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	019b      	lsls	r3, r3, #6
 8003ee6:	4810      	ldr	r0, [pc, #64]	; (8003f28 <PingTest+0xc8>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	0019      	movs	r1, r3
 8003eec:	f003 fe47 	bl	8007b7e <HAL_GPIO_WritePin>

		if (myRadio.status == TX)
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <PingTest+0xbc>)
 8003ef2:	7c1b      	ldrb	r3, [r3, #16]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d107      	bne.n	8003f08 <PingTest+0xa8>
			HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	015b      	lsls	r3, r3, #5
 8003efc:	480a      	ldr	r0, [pc, #40]	; (8003f28 <PingTest+0xc8>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	0019      	movs	r1, r3
 8003f02:	f003 fe3c 	bl	8007b7e <HAL_GPIO_WritePin>
 8003f06:	e7b1      	b.n	8003e6c <PingTest+0xc>
		else
			HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	015b      	lsls	r3, r3, #5
 8003f0c:	4806      	ldr	r0, [pc, #24]	; (8003f28 <PingTest+0xc8>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	0019      	movs	r1, r3
 8003f12:	f003 fe34 	bl	8007b7e <HAL_GPIO_WritePin>
	while (1) {
 8003f16:	e7a9      	b.n	8003e6c <PingTest+0xc>
 8003f18:	0800dfe4 	.word	0x0800dfe4
 8003f1c:	20000454 	.word	0x20000454
 8003f20:	20000614 	.word	0x20000614
 8003f24:	20000618 	.word	0x20000618
 8003f28:	50000400 	.word	0x50000400

08003f2c <ledRoutine>:
	}
}

void ledRoutine(SX127X_t *module) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	static uint32_t lastBlink = 0;
	if (module->signalDetected && settings.useLed)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	7f1b      	ldrb	r3, [r3, #28]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00b      	beq.n	8003f54 <ledRoutine+0x28>
 8003f3c:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <ledRoutine+0xb0>)
 8003f3e:	7c1b      	ldrb	r3, [r3, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <ledRoutine+0x28>
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	019b      	lsls	r3, r3, #6
 8003f48:	4825      	ldr	r0, [pc, #148]	; (8003fe0 <ledRoutine+0xb4>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	f003 fe16 	bl	8007b7e <HAL_GPIO_WritePin>
 8003f52:	e006      	b.n	8003f62 <ledRoutine+0x36>
	else
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	019b      	lsls	r3, r3, #6
 8003f58:	4821      	ldr	r0, [pc, #132]	; (8003fe0 <ledRoutine+0xb4>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	f003 fe0e 	bl	8007b7e <HAL_GPIO_WritePin>

	if (module->status == TX && settings.useLed)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	7c1b      	ldrb	r3, [r3, #16]
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d10b      	bne.n	8003f82 <ledRoutine+0x56>
 8003f6a:	4b1c      	ldr	r3, [pc, #112]	; (8003fdc <ledRoutine+0xb0>)
 8003f6c:	7c1b      	ldrb	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <ledRoutine+0x56>
		HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	015b      	lsls	r3, r3, #5
 8003f76:	481a      	ldr	r0, [pc, #104]	; (8003fe0 <ledRoutine+0xb4>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	f003 fdff 	bl	8007b7e <HAL_GPIO_WritePin>
 8003f80:	e006      	b.n	8003f90 <ledRoutine+0x64>
	else
		HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003f82:	2380      	movs	r3, #128	; 0x80
 8003f84:	015b      	lsls	r3, r3, #5
 8003f86:	4816      	ldr	r0, [pc, #88]	; (8003fe0 <ledRoutine+0xb4>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	0019      	movs	r1, r3
 8003f8c:	f003 fdf7 	bl	8007b7e <HAL_GPIO_WritePin>

	if (HAL_GetTick() - lastBlink > 5000) {
 8003f90:	f002 fbd2 	bl	8006738 <HAL_GetTick>
 8003f94:	0002      	movs	r2, r0
 8003f96:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <ledRoutine+0xb8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	4a12      	ldr	r2, [pc, #72]	; (8003fe8 <ledRoutine+0xbc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d904      	bls.n	8003fac <ledRoutine+0x80>
		lastBlink = HAL_GetTick();
 8003fa2:	f002 fbc9 	bl	8006738 <HAL_GetTick>
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <ledRoutine+0xb8>)
 8003faa:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GetTick() - lastBlink < 50 && settings.useLed) {
 8003fac:	f002 fbc4 	bl	8006738 <HAL_GetTick>
 8003fb0:	0002      	movs	r2, r0
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <ledRoutine+0xb8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b31      	cmp	r3, #49	; 0x31
 8003fba:	d80a      	bhi.n	8003fd2 <ledRoutine+0xa6>
 8003fbc:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <ledRoutine+0xb0>)
 8003fbe:	7c1b      	ldrb	r3, [r3, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <ledRoutine+0xa6>
		HAL_GPIO_WritePin(BLUE_GPIO_Port, ORANGE_Pin | BLUE_Pin, LED_ON);
 8003fc4:	23c0      	movs	r3, #192	; 0xc0
 8003fc6:	019b      	lsls	r3, r3, #6
 8003fc8:	4805      	ldr	r0, [pc, #20]	; (8003fe0 <ledRoutine+0xb4>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	0019      	movs	r1, r3
 8003fce:	f003 fdd6 	bl	8007b7e <HAL_GPIO_WritePin>
	}

}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b002      	add	sp, #8
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	200004e8 	.word	0x200004e8
 8003fe0:	50000400 	.word	0x50000400
 8003fe4:	2000061c 	.word	0x2000061c
 8003fe8:	00001388 	.word	0x00001388

08003fec <printInfo>:

void printInfo(nodeStatus_t *status, uint32_t tm, uint32_t miss) {
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b089      	sub	sp, #36	; 0x24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
#ifdef DEBUG
	uint32_t time = RTC->TR;
 8003ff8:	4b75      	ldr	r3, [pc, #468]	; (80041d0 <printInfo+0x1e4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	61fb      	str	r3, [r7, #28]
	uint32_t date = RTC->DR;
 8003ffe:	4b74      	ldr	r3, [pc, #464]	; (80041d0 <printInfo+0x1e4>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	61bb      	str	r3, [r7, #24]
	uint32_t tick = HAL_GetTick();
 8004004:	f002 fb98 	bl	8006738 <HAL_GetTick>
 8004008:	0003      	movs	r3, r0
 800400a:	617b      	str	r3, [r7, #20]
	printf("Status requested\n");
 800400c:	4b71      	ldr	r3, [pc, #452]	; (80041d4 <printInfo+0x1e8>)
 800400e:	0018      	movs	r0, r3
 8004010:	f007 fbd2 	bl	800b7b8 <puts>
	printf("SysTick: %10lu\n", tick);
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4b70      	ldr	r3, [pc, #448]	; (80041d8 <printInfo+0x1ec>)
 8004018:	0011      	movs	r1, r2
 800401a:	0018      	movs	r0, r3
 800401c:	f007 fb2c 	bl	800b678 <iprintf>
	printf("System time: %02x:%02x:%02x\n", (uint16_t) (time >> 16) & 0xFF,
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	0c1b      	lsrs	r3, r3, #16
 8004024:	b29b      	uxth	r3, r3
 8004026:	001a      	movs	r2, r3
 8004028:	23ff      	movs	r3, #255	; 0xff
 800402a:	401a      	ands	r2, r3
 800402c:	0011      	movs	r1, r2
			(uint16_t) (time >> 8) & 0xFF, (uint16_t) time & 0xFF);
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	0a1b      	lsrs	r3, r3, #8
 8004032:	b29b      	uxth	r3, r3
	printf("System time: %02x:%02x:%02x\n", (uint16_t) (time >> 16) & 0xFF,
 8004034:	001a      	movs	r2, r3
 8004036:	23ff      	movs	r3, #255	; 0xff
 8004038:	401a      	ands	r2, r3
			(uint16_t) (time >> 8) & 0xFF, (uint16_t) time & 0xFF);
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	b29b      	uxth	r3, r3
	printf("System time: %02x:%02x:%02x\n", (uint16_t) (time >> 16) & 0xFF,
 800403e:	0018      	movs	r0, r3
 8004040:	23ff      	movs	r3, #255	; 0xff
 8004042:	4003      	ands	r3, r0
 8004044:	4865      	ldr	r0, [pc, #404]	; (80041dc <printInfo+0x1f0>)
 8004046:	f007 fb17 	bl	800b678 <iprintf>
	printf("System date: %x.%02x.%x\n", (uint16_t) date & 0xFF,
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	b29b      	uxth	r3, r3
 800404e:	001a      	movs	r2, r3
 8004050:	23ff      	movs	r3, #255	; 0xff
 8004052:	401a      	ands	r2, r3
 8004054:	0011      	movs	r1, r2
			(uint16_t) (date >> 8) & 0x1F,
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	0a1b      	lsrs	r3, r3, #8
 800405a:	b29b      	uxth	r3, r3
	printf("System date: %x.%02x.%x\n", (uint16_t) date & 0xFF,
 800405c:	001a      	movs	r2, r3
 800405e:	231f      	movs	r3, #31
 8004060:	401a      	ands	r2, r3
			((uint16_t) (date >> 16) & 0xFF) + 0x2000);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	0c1b      	lsrs	r3, r3, #16
 8004066:	b29b      	uxth	r3, r3
 8004068:	0018      	movs	r0, r3
 800406a:	23ff      	movs	r3, #255	; 0xff
 800406c:	4003      	ands	r3, r0
	printf("System date: %x.%02x.%x\n", (uint16_t) date & 0xFF,
 800406e:	2080      	movs	r0, #128	; 0x80
 8004070:	0180      	lsls	r0, r0, #6
 8004072:	4684      	mov	ip, r0
 8004074:	4463      	add	r3, ip
 8004076:	485a      	ldr	r0, [pc, #360]	; (80041e0 <printInfo+0x1f4>)
 8004078:	f007 fafe 	bl	800b678 <iprintf>
	printf("Voltage: %d.%02d V\n", (int) getVoltage(),
 800407c:	f7ff fa8e 	bl	800359c <getVoltage>
 8004080:	1c03      	adds	r3, r0, #0
 8004082:	1c18      	adds	r0, r3, #0
 8004084:	f7fd f9b6 	bl	80013f4 <__aeabi_f2iz>
 8004088:	0004      	movs	r4, r0
			((int) (getVoltage() * 100) % 100));
 800408a:	f7ff fa87 	bl	800359c <getVoltage>
 800408e:	1c03      	adds	r3, r0, #0
 8004090:	4954      	ldr	r1, [pc, #336]	; (80041e4 <printInfo+0x1f8>)
 8004092:	1c18      	adds	r0, r3, #0
 8004094:	f7fc feda 	bl	8000e4c <__aeabi_fmul>
 8004098:	1c03      	adds	r3, r0, #0
 800409a:	1c18      	adds	r0, r3, #0
 800409c:	f7fd f9aa 	bl	80013f4 <__aeabi_f2iz>
 80040a0:	0003      	movs	r3, r0
	printf("Voltage: %d.%02d V\n", (int) getVoltage(),
 80040a2:	2164      	movs	r1, #100	; 0x64
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7fc f9bb 	bl	8000420 <__aeabi_idivmod>
 80040aa:	000b      	movs	r3, r1
 80040ac:	001a      	movs	r2, r3
 80040ae:	4b4e      	ldr	r3, [pc, #312]	; (80041e8 <printInfo+0x1fc>)
 80040b0:	0021      	movs	r1, r4
 80040b2:	0018      	movs	r0, r3
 80040b4:	f007 fae0 	bl	800b678 <iprintf>
	printf("Temp: %d.%01d C\n", (int) getTemperature(),
 80040b8:	f7ff faa6 	bl	8003608 <getTemperature>
 80040bc:	1c03      	adds	r3, r0, #0
 80040be:	1c18      	adds	r0, r3, #0
 80040c0:	f7fd f998 	bl	80013f4 <__aeabi_f2iz>
 80040c4:	0004      	movs	r4, r0
			((int) (getTemperature() * 10) % 10));
 80040c6:	f7ff fa9f 	bl	8003608 <getTemperature>
 80040ca:	1c03      	adds	r3, r0, #0
 80040cc:	4947      	ldr	r1, [pc, #284]	; (80041ec <printInfo+0x200>)
 80040ce:	1c18      	adds	r0, r3, #0
 80040d0:	f7fc febc 	bl	8000e4c <__aeabi_fmul>
 80040d4:	1c03      	adds	r3, r0, #0
 80040d6:	1c18      	adds	r0, r3, #0
 80040d8:	f7fd f98c 	bl	80013f4 <__aeabi_f2iz>
 80040dc:	0003      	movs	r3, r0
	printf("Temp: %d.%01d C\n", (int) getTemperature(),
 80040de:	210a      	movs	r1, #10
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7fc f99d 	bl	8000420 <__aeabi_idivmod>
 80040e6:	000b      	movs	r3, r1
 80040e8:	001a      	movs	r2, r3
 80040ea:	4b41      	ldr	r3, [pc, #260]	; (80041f0 <printInfo+0x204>)
 80040ec:	0021      	movs	r1, r4
 80040ee:	0018      	movs	r0, r3
 80040f0:	f007 fac2 	bl	800b678 <iprintf>
	printf("Powered: %s\n", status->powered ? "Yes" : "No");
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	791b      	ldrb	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <printInfo+0x114>
 80040fc:	4b3d      	ldr	r3, [pc, #244]	; (80041f4 <printInfo+0x208>)
 80040fe:	e000      	b.n	8004102 <printInfo+0x116>
 8004100:	4b3d      	ldr	r3, [pc, #244]	; (80041f8 <printInfo+0x20c>)
 8004102:	4a3e      	ldr	r2, [pc, #248]	; (80041fc <printInfo+0x210>)
 8004104:	0019      	movs	r1, r3
 8004106:	0010      	movs	r0, r2
 8004108:	f007 fab6 	bl	800b678 <iprintf>
	printf("Powered to confirm: %s\n", status->poweredToConfirm ? "Yes" : "No");
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	799b      	ldrb	r3, [r3, #6]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <printInfo+0x12c>
 8004114:	4b37      	ldr	r3, [pc, #220]	; (80041f4 <printInfo+0x208>)
 8004116:	e000      	b.n	800411a <printInfo+0x12e>
 8004118:	4b37      	ldr	r3, [pc, #220]	; (80041f8 <printInfo+0x20c>)
 800411a:	4a39      	ldr	r2, [pc, #228]	; (8004200 <printInfo+0x214>)
 800411c:	0019      	movs	r1, r3
 800411e:	0010      	movs	r0, r2
 8004120:	f007 faaa 	bl	800b678 <iprintf>
	printf("Disarmed: %s\n", status->disarmed ? "Yes" : "No");
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <printInfo+0x144>
 800412c:	4b31      	ldr	r3, [pc, #196]	; (80041f4 <printInfo+0x208>)
 800412e:	e000      	b.n	8004132 <printInfo+0x146>
 8004130:	4b31      	ldr	r3, [pc, #196]	; (80041f8 <printInfo+0x20c>)
 8004132:	4a34      	ldr	r2, [pc, #208]	; (8004204 <printInfo+0x218>)
 8004134:	0019      	movs	r1, r3
 8004136:	0010      	movs	r0, r2
 8004138:	f007 fa9e 	bl	800b678 <iprintf>
	printf("Door opened: %s\n", status->opened ? "Yes" : "No");
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	785b      	ldrb	r3, [r3, #1]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <printInfo+0x15c>
 8004144:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <printInfo+0x208>)
 8004146:	e000      	b.n	800414a <printInfo+0x15e>
 8004148:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <printInfo+0x20c>)
 800414a:	4a2f      	ldr	r2, [pc, #188]	; (8004208 <printInfo+0x21c>)
 800414c:	0019      	movs	r1, r3
 800414e:	0010      	movs	r0, r2
 8004150:	f007 fa92 	bl	800b678 <iprintf>
	printf("Opened to confirm: %s\n", status->openedToConfirm ? "Yes" : "No");
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	78db      	ldrb	r3, [r3, #3]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <printInfo+0x174>
 800415c:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <printInfo+0x208>)
 800415e:	e000      	b.n	8004162 <printInfo+0x176>
 8004160:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <printInfo+0x20c>)
 8004162:	4a2a      	ldr	r2, [pc, #168]	; (800420c <printInfo+0x220>)
 8004164:	0019      	movs	r1, r3
 8004166:	0010      	movs	r0, r2
 8004168:	f007 fa86 	bl	800b678 <iprintf>
	printf("Unconfirmed opening: %s\n",
			status->unconfirmedOpening ? "Yes" : "No");
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	79db      	ldrb	r3, [r3, #7]
	printf("Unconfirmed opening: %s\n",
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <printInfo+0x18c>
 8004174:	4b1f      	ldr	r3, [pc, #124]	; (80041f4 <printInfo+0x208>)
 8004176:	e000      	b.n	800417a <printInfo+0x18e>
 8004178:	4b1f      	ldr	r3, [pc, #124]	; (80041f8 <printInfo+0x20c>)
 800417a:	4a25      	ldr	r2, [pc, #148]	; (8004210 <printInfo+0x224>)
 800417c:	0019      	movs	r1, r3
 800417e:	0010      	movs	r0, r2
 8004180:	f007 fa7a 	bl	800b678 <iprintf>
	printf("Radio status: %s\n", statuses[myRadio.status]);
 8004184:	4b23      	ldr	r3, [pc, #140]	; (8004214 <printInfo+0x228>)
 8004186:	7c1b      	ldrb	r3, [r3, #16]
 8004188:	001a      	movs	r2, r3
 800418a:	4b23      	ldr	r3, [pc, #140]	; (8004218 <printInfo+0x22c>)
 800418c:	0092      	lsls	r2, r2, #2
 800418e:	58d2      	ldr	r2, [r2, r3]
 8004190:	4b22      	ldr	r3, [pc, #136]	; (800421c <printInfo+0x230>)
 8004192:	0011      	movs	r1, r2
 8004194:	0018      	movs	r0, r3
 8004196:	f007 fa6f 	bl	800b678 <iprintf>
	printf("Message count: %lu\n", tm);
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	4b20      	ldr	r3, [pc, #128]	; (8004220 <printInfo+0x234>)
 800419e:	0011      	movs	r1, r2
 80041a0:	0018      	movs	r0, r3
 80041a2:	f007 fa69 	bl	800b678 <iprintf>
	printf("Without acknowledge: %lu\n", miss);
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <printInfo+0x238>)
 80041aa:	0011      	movs	r1, r2
 80041ac:	0018      	movs	r0, r3
 80041ae:	f007 fa63 	bl	800b678 <iprintf>
	printf("Displayed in : %lu ms\n", HAL_GetTick() - tick);
 80041b2:	f002 fac1 	bl	8006738 <HAL_GetTick>
 80041b6:	0002      	movs	r2, r0
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	1ad2      	subs	r2, r2, r3
 80041bc:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <printInfo+0x23c>)
 80041be:	0011      	movs	r1, r2
 80041c0:	0018      	movs	r0, r3
 80041c2:	f007 fa59 	bl	800b678 <iprintf>
#endif
}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b009      	add	sp, #36	; 0x24
 80041cc:	bd90      	pop	{r4, r7, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	40002800 	.word	0x40002800
 80041d4:	0800dff8 	.word	0x0800dff8
 80041d8:	0800e00c 	.word	0x0800e00c
 80041dc:	0800e01c 	.word	0x0800e01c
 80041e0:	0800e03c 	.word	0x0800e03c
 80041e4:	42c80000 	.word	0x42c80000
 80041e8:	0800e058 	.word	0x0800e058
 80041ec:	41200000 	.word	0x41200000
 80041f0:	0800e06c 	.word	0x0800e06c
 80041f4:	0800e080 	.word	0x0800e080
 80041f8:	0800e084 	.word	0x0800e084
 80041fc:	0800e088 	.word	0x0800e088
 8004200:	0800e098 	.word	0x0800e098
 8004204:	0800e0b0 	.word	0x0800e0b0
 8004208:	0800e0c0 	.word	0x0800e0c0
 800420c:	0800e0d4 	.word	0x0800e0d4
 8004210:	0800e0ec 	.word	0x0800e0ec
 8004214:	20000454 	.word	0x20000454
 8004218:	20000000 	.word	0x20000000
 800421c:	0800e108 	.word	0x0800e108
 8004220:	0800e11c 	.word	0x0800e11c
 8004224:	0800e130 	.word	0x0800e130
 8004228:	0800e14c 	.word	0x0800e14c

0800422c <showErrorCode>:

void showErrorCode(int errNum) {
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < errNum; i++) {
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	e01a      	b.n	8004270 <showErrorCode+0x44>
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin | BLUE_Pin, 1);
 800423a:	23c0      	movs	r3, #192	; 0xc0
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	4811      	ldr	r0, [pc, #68]	; (8004284 <showErrorCode+0x58>)
 8004240:	2201      	movs	r2, #1
 8004242:	0019      	movs	r1, r3
 8004244:	f003 fc9b 	bl	8007b7e <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8004248:	23fa      	movs	r3, #250	; 0xfa
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	0018      	movs	r0, r3
 800424e:	f000 f8a7 	bl	80043a0 <HAL_Delay>
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin | BLUE_Pin, 0);
 8004252:	23c0      	movs	r3, #192	; 0xc0
 8004254:	019b      	lsls	r3, r3, #6
 8004256:	480b      	ldr	r0, [pc, #44]	; (8004284 <showErrorCode+0x58>)
 8004258:	2200      	movs	r2, #0
 800425a:	0019      	movs	r1, r3
 800425c:	f003 fc8f 	bl	8007b7e <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8004260:	23fa      	movs	r3, #250	; 0xfa
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	0018      	movs	r0, r3
 8004266:	f000 f89b 	bl	80043a0 <HAL_Delay>
	for (int i = 0; i < errNum; i++) {
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3301      	adds	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	429a      	cmp	r2, r3
 8004276:	dbe0      	blt.n	800423a <showErrorCode+0xe>
	}
}
 8004278:	46c0      	nop			; (mov r8, r8)
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	46bd      	mov	sp, r7
 800427e:	b004      	add	sp, #16
 8004280:	bd80      	pop	{r7, pc}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	50000400 	.word	0x50000400

08004288 <startBlink>:
void startBlink() {
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	e016      	b.n	80042c2 <startBlink+0x3a>
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin | BLUE_Pin, 1);
 8004294:	23c0      	movs	r3, #192	; 0xc0
 8004296:	019b      	lsls	r3, r3, #6
 8004298:	4810      	ldr	r0, [pc, #64]	; (80042dc <startBlink+0x54>)
 800429a:	2201      	movs	r2, #1
 800429c:	0019      	movs	r1, r3
 800429e:	f003 fc6e 	bl	8007b7e <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80042a2:	20c8      	movs	r0, #200	; 0xc8
 80042a4:	f000 f87c 	bl	80043a0 <HAL_Delay>
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin | BLUE_Pin, 0);
 80042a8:	23c0      	movs	r3, #192	; 0xc0
 80042aa:	019b      	lsls	r3, r3, #6
 80042ac:	480b      	ldr	r0, [pc, #44]	; (80042dc <startBlink+0x54>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	0019      	movs	r1, r3
 80042b2:	f003 fc64 	bl	8007b7e <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80042b6:	20c8      	movs	r0, #200	; 0xc8
 80042b8:	f000 f872 	bl	80043a0 <HAL_Delay>
	for (int i = 0; i < 3; i++) {
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3301      	adds	r3, #1
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	dde5      	ble.n	8004294 <startBlink+0xc>
	}
	HAL_Delay(500);
 80042c8:	23fa      	movs	r3, #250	; 0xfa
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	0018      	movs	r0, r3
 80042ce:	f000 f867 	bl	80043a0 <HAL_Delay>
}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b002      	add	sp, #8
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	50000400 	.word	0x50000400

080042e0 <showNumber>:

void showNumber() {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
	for (int i = 0; i < settings.nodeNum / 10; i++) {
 80042e6:	2300      	movs	r3, #0
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	e01a      	b.n	8004322 <showNumber+0x42>
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, 1);
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	019b      	lsls	r3, r3, #6
 80042f0:	4829      	ldr	r0, [pc, #164]	; (8004398 <showNumber+0xb8>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	0019      	movs	r1, r3
 80042f6:	f003 fc42 	bl	8007b7e <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80042fa:	23fa      	movs	r3, #250	; 0xfa
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	0018      	movs	r0, r3
 8004300:	f000 f84e 	bl	80043a0 <HAL_Delay>
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, 0);
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	019b      	lsls	r3, r3, #6
 8004308:	4823      	ldr	r0, [pc, #140]	; (8004398 <showNumber+0xb8>)
 800430a:	2200      	movs	r2, #0
 800430c:	0019      	movs	r1, r3
 800430e:	f003 fc36 	bl	8007b7e <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8004312:	23fa      	movs	r3, #250	; 0xfa
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	0018      	movs	r0, r3
 8004318:	f000 f842 	bl	80043a0 <HAL_Delay>
	for (int i = 0; i < settings.nodeNum / 10; i++) {
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3301      	adds	r3, #1
 8004320:	607b      	str	r3, [r7, #4]
 8004322:	4b1e      	ldr	r3, [pc, #120]	; (800439c <showNumber+0xbc>)
 8004324:	7a9b      	ldrb	r3, [r3, #10]
 8004326:	210a      	movs	r1, #10
 8004328:	0018      	movs	r0, r3
 800432a:	f7fb ff09 	bl	8000140 <__udivsi3>
 800432e:	0003      	movs	r3, r0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	001a      	movs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4293      	cmp	r3, r2
 8004338:	dbd8      	blt.n	80042ec <showNumber+0xc>
	}
	for (int i = 0; i < settings.nodeNum % 10; i++) {
 800433a:	2300      	movs	r3, #0
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	e01a      	b.n	8004376 <showNumber+0x96>
		HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, 1);
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	015b      	lsls	r3, r3, #5
 8004344:	4814      	ldr	r0, [pc, #80]	; (8004398 <showNumber+0xb8>)
 8004346:	2201      	movs	r2, #1
 8004348:	0019      	movs	r1, r3
 800434a:	f003 fc18 	bl	8007b7e <HAL_GPIO_WritePin>
		HAL_Delay(800);
 800434e:	23c8      	movs	r3, #200	; 0xc8
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	0018      	movs	r0, r3
 8004354:	f000 f824 	bl	80043a0 <HAL_Delay>
		HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, 0);
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	015b      	lsls	r3, r3, #5
 800435c:	480e      	ldr	r0, [pc, #56]	; (8004398 <showNumber+0xb8>)
 800435e:	2200      	movs	r2, #0
 8004360:	0019      	movs	r1, r3
 8004362:	f003 fc0c 	bl	8007b7e <HAL_GPIO_WritePin>
		HAL_Delay(800);
 8004366:	23c8      	movs	r3, #200	; 0xc8
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	0018      	movs	r0, r3
 800436c:	f000 f818 	bl	80043a0 <HAL_Delay>
	for (int i = 0; i < settings.nodeNum % 10; i++) {
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <showNumber+0xbc>)
 8004378:	7a9b      	ldrb	r3, [r3, #10]
 800437a:	210a      	movs	r1, #10
 800437c:	0018      	movs	r0, r3
 800437e:	f7fb ff65 	bl	800024c <__aeabi_uidivmod>
 8004382:	000b      	movs	r3, r1
 8004384:	b2db      	uxtb	r3, r3
 8004386:	001a      	movs	r2, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	4293      	cmp	r3, r2
 800438c:	dbd8      	blt.n	8004340 <showNumber+0x60>
	}
}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b002      	add	sp, #8
 8004396:	bd80      	pop	{r7, pc}
 8004398:	50000400 	.word	0x50000400
 800439c:	200004e8 	.word	0x200004e8

080043a0 <HAL_Delay>:

void HAL_Delay(uint32_t Delay) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 80043a8:	f002 f9c6 	bl	8006738 <HAL_GetTick>
 80043ac:	0003      	movs	r3, r0
 80043ae:	60bb      	str	r3, [r7, #8]
	uint32_t wait = Delay;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3301      	adds	r3, #1
 80043b8:	d00a      	beq.n	80043d0 <HAL_Delay+0x30>
		wait += (uint32_t) (uwTickFreq);
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <HAL_Delay+0x4c>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	001a      	movs	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	189b      	adds	r3, r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 80043c6:	e003      	b.n	80043d0 <HAL_Delay+0x30>
		HAL_WWDG_Refresh(&hwwdg);
 80043c8:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <HAL_Delay+0x50>)
 80043ca:	0018      	movs	r0, r3
 80043cc:	f006 fc9c 	bl	800ad08 <HAL_WWDG_Refresh>
	while ((HAL_GetTick() - tickstart) < wait) {
 80043d0:	f002 f9b2 	bl	8006738 <HAL_GetTick>
 80043d4:	0002      	movs	r2, r0
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d8f3      	bhi.n	80043c8 <HAL_Delay+0x28>
	}
}
 80043e0:	46c0      	nop			; (mov r8, r8)
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b004      	add	sp, #16
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	2000002c 	.word	0x2000002c
 80043f0:	20000438 	.word	0x20000438

080043f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043fa:	f002 f937 	bl	800666c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043fe:	f000 fc4d 	bl	8004c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004402:	f000 fe51 	bl	80050a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004406:	f000 fe29 	bl	800505c <MX_DMA_Init>
  MX_RTC_Init();
 800440a:	f000 fd69 	bl	8004ee0 <MX_RTC_Init>
  MX_SPI1_Init();
 800440e:	f000 fd9b 	bl	8004f48 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004412:	f000 fdd1 	bl	8004fb8 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8004416:	f000 fcc5 	bl	8004da4 <MX_ADC_Init>
  MX_LPTIM1_Init();
 800441a:	f000 fd37 	bl	8004e8c <MX_LPTIM1_Init>
  MX_WWDG_Init();
 800441e:	f000 fdfb 	bl	8005018 <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */

	initUart(&huart1, &myRadio);
 8004422:	4a56      	ldr	r2, [pc, #344]	; (800457c <main+0x188>)
 8004424:	4b56      	ldr	r3, [pc, #344]	; (8004580 <main+0x18c>)
 8004426:	0011      	movs	r1, r2
 8004428:	0018      	movs	r0, r3
 800442a:	f001 ff3b 	bl	80062a4 <initUart>
	HAL_LPTIM_Counter_Start_IT(&hlptim1, 256 * WATCHDOG_INTERVAL);
 800442e:	23f0      	movs	r3, #240	; 0xf0
 8004430:	01da      	lsls	r2, r3, #7
 8004432:	4b54      	ldr	r3, [pc, #336]	; (8004584 <main+0x190>)
 8004434:	0011      	movs	r1, r2
 8004436:	0018      	movs	r0, r3
 8004438:	f003 fc70 	bl	8007d1c <HAL_LPTIM_Counter_Start_IT>
	printf("<ANv%lx>\n", SOFTWARE_REVISION);
 800443c:	4a52      	ldr	r2, [pc, #328]	; (8004588 <main+0x194>)
 800443e:	4b53      	ldr	r3, [pc, #332]	; (800458c <main+0x198>)
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f007 f918 	bl	800b678 <iprintf>
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk
 8004448:	4b51      	ldr	r3, [pc, #324]	; (8004590 <main+0x19c>)
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	4b50      	ldr	r3, [pc, #320]	; (8004590 <main+0x19c>)
 800444e:	21c0      	movs	r1, #192	; 0xc0
 8004450:	0149      	lsls	r1, r1, #5
 8004452:	430a      	orrs	r2, r1
 8004454:	609a      	str	r2, [r3, #8]
			| DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk;

	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8004456:	4b4f      	ldr	r3, [pc, #316]	; (8004594 <main+0x1a0>)
 8004458:	2100      	movs	r1, #0
 800445a:	0018      	movs	r0, r3
 800445c:	f002 fd24 	bl	8006ea8 <HAL_ADCEx_Calibration_Start>
	RadioInit();
 8004460:	f7ff fbf6 	bl	8003c50 <RadioInit>
	recomendedDelay = settings.workInterval;
 8004464:	4b4c      	ldr	r3, [pc, #304]	; (8004598 <main+0x1a4>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	b29a      	uxth	r2, r3
 800446a:	4b4c      	ldr	r3, [pc, #304]	; (800459c <main+0x1a8>)
 800446c:	801a      	strh	r2, [r3, #0]

	flag.rtcAlarm = 1;
 800446e:	4b4c      	ldr	r3, [pc, #304]	; (80045a0 <main+0x1ac>)
 8004470:	781a      	ldrb	r2, [r3, #0]
 8004472:	2101      	movs	r1, #1
 8004474:	430a      	orrs	r2, r1
 8004476:	701a      	strb	r2, [r3, #0]
	status.poweredConfirmed = HAL_GPIO_ReadPin(extPower_GPIO_Port,
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	005a      	lsls	r2, r3, #1
 800447c:	23a0      	movs	r3, #160	; 0xa0
 800447e:	05db      	lsls	r3, r3, #23
 8004480:	0011      	movs	r1, r2
 8004482:	0018      	movs	r0, r3
 8004484:	f003 fb5e 	bl	8007b44 <HAL_GPIO_ReadPin>
 8004488:	0003      	movs	r3, r0
 800448a:	1e5a      	subs	r2, r3, #1
 800448c:	4193      	sbcs	r3, r2
 800448e:	b2da      	uxtb	r2, r3
 8004490:	4b44      	ldr	r3, [pc, #272]	; (80045a4 <main+0x1b0>)
 8004492:	715a      	strb	r2, [r3, #5]
	extPower_Pin);
	status.openedConfirmed = HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);
 8004494:	23a0      	movs	r3, #160	; 0xa0
 8004496:	05db      	lsls	r3, r3, #23
 8004498:	2101      	movs	r1, #1
 800449a:	0018      	movs	r0, r3
 800449c:	f003 fb52 	bl	8007b44 <HAL_GPIO_ReadPin>
 80044a0:	0003      	movs	r3, r0
 80044a2:	1e5a      	subs	r2, r3, #1
 80044a4:	4193      	sbcs	r3, r2
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	4b3e      	ldr	r3, [pc, #248]	; (80045a4 <main+0x1b0>)
 80044aa:	709a      	strb	r2, [r3, #2]
	HAL_DBGMCU_DisableDBGStopMode();
 80044ac:	f002 f94e 	bl	800674c <HAL_DBGMCU_DisableDBGStopMode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	// PIN MAP: 0-1
	//Receiving test
	if (HAL_GPIO_ReadPin(USER2_GPIO_Port, USER2_Pin) == USER2_ACTIVE
 80044b0:	4b3d      	ldr	r3, [pc, #244]	; (80045a8 <main+0x1b4>)
 80044b2:	2180      	movs	r1, #128	; 0x80
 80044b4:	0018      	movs	r0, r3
 80044b6:	f003 fb45 	bl	8007b44 <HAL_GPIO_ReadPin>
 80044ba:	1e03      	subs	r3, r0, #0
 80044bc:	d10c      	bne.n	80044d8 <main+0xe4>
			&& HAL_GPIO_ReadPin(USER1_GPIO_Port, USER1_Pin) != USER1_ACTIVE) {
 80044be:	4b3a      	ldr	r3, [pc, #232]	; (80045a8 <main+0x1b4>)
 80044c0:	2140      	movs	r1, #64	; 0x40
 80044c2:	0018      	movs	r0, r3
 80044c4:	f003 fb3e 	bl	8007b44 <HAL_GPIO_ReadPin>
 80044c8:	1e03      	subs	r3, r0, #0
 80044ca:	d005      	beq.n	80044d8 <main+0xe4>
		debugLog("Receiving test activated");
 80044cc:	4b37      	ldr	r3, [pc, #220]	; (80045ac <main+0x1b8>)
 80044ce:	0018      	movs	r0, r3
 80044d0:	f7ff f81e 	bl	8003510 <debugLog>
		ReceivingTest();
 80044d4:	f7ff fbf4 	bl	8003cc0 <ReceivingTest>
	}
	//PIN MAP 1-0
	//Ping Test
	if (HAL_GPIO_ReadPin(USER2_GPIO_Port, USER2_Pin) != USER1_ACTIVE
 80044d8:	4b33      	ldr	r3, [pc, #204]	; (80045a8 <main+0x1b4>)
 80044da:	2180      	movs	r1, #128	; 0x80
 80044dc:	0018      	movs	r0, r3
 80044de:	f003 fb31 	bl	8007b44 <HAL_GPIO_ReadPin>
 80044e2:	1e03      	subs	r3, r0, #0
 80044e4:	d00c      	beq.n	8004500 <main+0x10c>
			&& HAL_GPIO_ReadPin(USER1_GPIO_Port, USER1_Pin) == USER1_ACTIVE) {
 80044e6:	4b30      	ldr	r3, [pc, #192]	; (80045a8 <main+0x1b4>)
 80044e8:	2140      	movs	r1, #64	; 0x40
 80044ea:	0018      	movs	r0, r3
 80044ec:	f003 fb2a 	bl	8007b44 <HAL_GPIO_ReadPin>
 80044f0:	1e03      	subs	r3, r0, #0
 80044f2:	d105      	bne.n	8004500 <main+0x10c>
		debugLog("Ping test activated");
 80044f4:	4b2e      	ldr	r3, [pc, #184]	; (80045b0 <main+0x1bc>)
 80044f6:	0018      	movs	r0, r3
 80044f8:	f7ff f80a 	bl	8003510 <debugLog>
		PingTest();
 80044fc:	f7ff fcb0 	bl	8003e60 <PingTest>

	}

	//PIN MAP 1-1 - Don't sleep
	if (HAL_GPIO_ReadPin(USER2_GPIO_Port, USER2_Pin) == USER2_ACTIVE
 8004500:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <main+0x1b4>)
 8004502:	2180      	movs	r1, #128	; 0x80
 8004504:	0018      	movs	r0, r3
 8004506:	f003 fb1d 	bl	8007b44 <HAL_GPIO_ReadPin>
 800450a:	1e03      	subs	r3, r0, #0
 800450c:	d10d      	bne.n	800452a <main+0x136>
			&& HAL_GPIO_ReadPin(USER1_GPIO_Port, USER1_Pin) == USER1_ACTIVE) {
 800450e:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <main+0x1b4>)
 8004510:	2140      	movs	r1, #64	; 0x40
 8004512:	0018      	movs	r0, r3
 8004514:	f003 fb16 	bl	8007b44 <HAL_GPIO_ReadPin>
 8004518:	1e03      	subs	r3, r0, #0
 800451a:	d106      	bne.n	800452a <main+0x136>
		debugLog("Non sleep mode enabled");
 800451c:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <main+0x1c0>)
 800451e:	0018      	movs	r0, r3
 8004520:	f7fe fff6 	bl	8003510 <debugLog>
		dontSleep = true;
 8004524:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <main+0x1c4>)
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
	}

	debugLog("Power on, test starting");
 800452a:	4b24      	ldr	r3, [pc, #144]	; (80045bc <main+0x1c8>)
 800452c:	0018      	movs	r0, r3
 800452e:	f7fe ffef 	bl	8003510 <debugLog>

	if (myRadio.revision == 0) {	//No Radio connection
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <main+0x188>)
 8004534:	2278      	movs	r2, #120	; 0x78
 8004536:	5c9b      	ldrb	r3, [r3, r2]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d107      	bne.n	800454c <main+0x158>
		debugLog("LoRa module:ERROR!");
 800453c:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <main+0x1cc>)
 800453e:	0018      	movs	r0, r3
 8004540:	f7fe ffe6 	bl	8003510 <debugLog>
		showErrorCode(2);
 8004544:	2002      	movs	r0, #2
 8004546:	f7ff fe71 	bl	800422c <showErrorCode>
		while (1)
 800454a:	e7fe      	b.n	800454a <main+0x156>
			;
	}
	debugLogInt("LoRa module: OK, rev: %d", myRadio.revision);
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <main+0x188>)
 800454e:	2278      	movs	r2, #120	; 0x78
 8004550:	5c9b      	ldrb	r3, [r3, r2]
 8004552:	001a      	movs	r2, r3
 8004554:	4b1b      	ldr	r3, [pc, #108]	; (80045c4 <main+0x1d0>)
 8004556:	0011      	movs	r1, r2
 8004558:	0018      	movs	r0, r3
 800455a:	f7fe ffef 	bl	800353c <debugLogInt>

	if ((RCC->CSR & RCC_CSR_LSERDY_Msk) == 0) {	//Crystal failure
 800455e:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <main+0x1d4>)
 8004560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004562:	2380      	movs	r3, #128	; 0x80
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4013      	ands	r3, r2
 8004568:	d132      	bne.n	80045d0 <main+0x1dc>
		debugLog("Crystal: fail!");
 800456a:	4b18      	ldr	r3, [pc, #96]	; (80045cc <main+0x1d8>)
 800456c:	0018      	movs	r0, r3
 800456e:	f7fe ffcf 	bl	8003510 <debugLog>
		showErrorCode(3);
 8004572:	2003      	movs	r0, #3
 8004574:	f7ff fe5a 	bl	800422c <showErrorCode>
		while (1)
 8004578:	e7fe      	b.n	8004578 <main+0x184>
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	20000454 	.word	0x20000454
 8004580:	2000036c 	.word	0x2000036c
 8004584:	200002c0 	.word	0x200002c0
 8004588:	11072022 	.word	0x11072022
 800458c:	0800e164 	.word	0x0800e164
 8004590:	40015800 	.word	0x40015800
 8004594:	2000021c 	.word	0x2000021c
 8004598:	200004e8 	.word	0x200004e8
 800459c:	20000014 	.word	0x20000014
 80045a0:	2000044c 	.word	0x2000044c
 80045a4:	200004e0 	.word	0x200004e0
 80045a8:	50000400 	.word	0x50000400
 80045ac:	0800dfc8 	.word	0x0800dfc8
 80045b0:	0800dfe4 	.word	0x0800dfe4
 80045b4:	0800e170 	.word	0x0800e170
 80045b8:	20000609 	.word	0x20000609
 80045bc:	0800e188 	.word	0x0800e188
 80045c0:	0800e1a0 	.word	0x0800e1a0
 80045c4:	0800e1b4 	.word	0x0800e1b4
 80045c8:	40021000 	.word	0x40021000
 80045cc:	0800e1d0 	.word	0x0800e1d0
			;
	}
	debugLog("Crystal: OK");
 80045d0:	4bdb      	ldr	r3, [pc, #876]	; (8004940 <main+0x54c>)
 80045d2:	0018      	movs	r0, r3
 80045d4:	f7fe ff9c 	bl	8003510 <debugLog>
	startBlink();
 80045d8:	f7ff fe56 	bl	8004288 <startBlink>
	showNumber();
 80045dc:	f7ff fe80 	bl	80042e0 <showNumber>

	deinitGpio();
 80045e0:	f7ff fb16 	bl	8003c10 <deinitGpio>
	flag.rtcAlarm = 1;
 80045e4:	4bd7      	ldr	r3, [pc, #860]	; (8004944 <main+0x550>)
 80045e6:	781a      	ldrb	r2, [r3, #0]
 80045e8:	2101      	movs	r1, #1
 80045ea:	430a      	orrs	r2, r1
 80045ec:	701a      	strb	r2, [r3, #0]
	debugLogInt("Node number: %d ", settings.nodeNum);
 80045ee:	4bd6      	ldr	r3, [pc, #856]	; (8004948 <main+0x554>)
 80045f0:	7a9b      	ldrb	r3, [r3, #10]
 80045f2:	001a      	movs	r2, r3
 80045f4:	4bd5      	ldr	r3, [pc, #852]	; (800494c <main+0x558>)
 80045f6:	0011      	movs	r1, r2
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7fe ff9f 	bl	800353c <debugLogInt>
	debugLogInt("Frequency: %lu", settings.realFrequency);
 80045fe:	4bd2      	ldr	r3, [pc, #840]	; (8004948 <main+0x554>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	001a      	movs	r2, r3
 8004604:	4bd2      	ldr	r3, [pc, #840]	; (8004950 <main+0x55c>)
 8004606:	0011      	movs	r1, r2
 8004608:	0018      	movs	r0, r3
 800460a:	f7fe ff97 	bl	800353c <debugLogInt>
	debugLogInt("Spreading factor: %d", settings.sf);
 800460e:	4bce      	ldr	r3, [pc, #824]	; (8004948 <main+0x554>)
 8004610:	7b1b      	ldrb	r3, [r3, #12]
 8004612:	001a      	movs	r2, r3
 8004614:	4bcf      	ldr	r3, [pc, #828]	; (8004954 <main+0x560>)
 8004616:	0011      	movs	r1, r2
 8004618:	0018      	movs	r0, r3
 800461a:	f7fe ff8f 	bl	800353c <debugLogInt>
	debugLogInt("BandWidth: %d", settings.bw);
 800461e:	4bca      	ldr	r3, [pc, #808]	; (8004948 <main+0x554>)
 8004620:	7b5b      	ldrb	r3, [r3, #13]
 8004622:	001a      	movs	r2, r3
 8004624:	4bcc      	ldr	r3, [pc, #816]	; (8004958 <main+0x564>)
 8004626:	0011      	movs	r1, r2
 8004628:	0018      	movs	r0, r3
 800462a:	f7fe ff87 	bl	800353c <debugLogInt>

	while (1) {
		HAL_WWDG_Refresh(&hwwdg);
 800462e:	4bcb      	ldr	r3, [pc, #812]	; (800495c <main+0x568>)
 8004630:	0018      	movs	r0, r3
 8004632:	f006 fb69 	bl	800ad08 <HAL_WWDG_Refresh>
		temp = getTemperature();
 8004636:	f7fe ffe7 	bl	8003608 <getTemperature>
 800463a:	1c02      	adds	r2, r0, #0
 800463c:	4bc8      	ldr	r3, [pc, #800]	; (8004960 <main+0x56c>)
 800463e:	601a      	str	r2, [r3, #0]
		if (status.powered
 8004640:	4bc8      	ldr	r3, [pc, #800]	; (8004964 <main+0x570>)
 8004642:	791b      	ldrb	r3, [r3, #4]
 8004644:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(extPower_GPIO_Port, extPower_Pin)) {
 8004646:	2380      	movs	r3, #128	; 0x80
 8004648:	005a      	lsls	r2, r3, #1
 800464a:	23a0      	movs	r3, #160	; 0xa0
 800464c:	05db      	lsls	r3, r3, #23
 800464e:	0011      	movs	r1, r2
 8004650:	0018      	movs	r0, r3
 8004652:	f003 fa77 	bl	8007b44 <HAL_GPIO_ReadPin>
 8004656:	0003      	movs	r3, r0
		if (status.powered
 8004658:	429c      	cmp	r4, r3
 800465a:	d012      	beq.n	8004682 <main+0x28e>
			poweredChangeMoment = HAL_GetTick();
 800465c:	f002 f86c 	bl	8006738 <HAL_GetTick>
 8004660:	0002      	movs	r2, r0
 8004662:	4bc1      	ldr	r3, [pc, #772]	; (8004968 <main+0x574>)
 8004664:	601a      	str	r2, [r3, #0]
			status.powered = HAL_GPIO_ReadPin(extPower_GPIO_Port, extPower_Pin);
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	005a      	lsls	r2, r3, #1
 800466a:	23a0      	movs	r3, #160	; 0xa0
 800466c:	05db      	lsls	r3, r3, #23
 800466e:	0011      	movs	r1, r2
 8004670:	0018      	movs	r0, r3
 8004672:	f003 fa67 	bl	8007b44 <HAL_GPIO_ReadPin>
 8004676:	0003      	movs	r3, r0
 8004678:	1e5a      	subs	r2, r3, #1
 800467a:	4193      	sbcs	r3, r2
 800467c:	b2da      	uxtb	r2, r3
 800467e:	4bb9      	ldr	r3, [pc, #740]	; (8004964 <main+0x570>)
 8004680:	711a      	strb	r2, [r3, #4]
		}

		if (flag.statusRequested) {
 8004682:	4bb0      	ldr	r3, [pc, #704]	; (8004944 <main+0x550>)
 8004684:	785b      	ldrb	r3, [r3, #1]
 8004686:	2204      	movs	r2, #4
 8004688:	4013      	ands	r3, r2
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00c      	beq.n	80046aa <main+0x2b6>

			flag.statusRequested = 0;
 8004690:	4bac      	ldr	r3, [pc, #688]	; (8004944 <main+0x550>)
 8004692:	785a      	ldrb	r2, [r3, #1]
 8004694:	2104      	movs	r1, #4
 8004696:	438a      	bics	r2, r1
 8004698:	705a      	strb	r2, [r3, #1]

			printInfo(&status, totalMessages, acknowledgeMiss);
 800469a:	4bb4      	ldr	r3, [pc, #720]	; (800496c <main+0x578>)
 800469c:	6819      	ldr	r1, [r3, #0]
 800469e:	4bb4      	ldr	r3, [pc, #720]	; (8004970 <main+0x57c>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4bb0      	ldr	r3, [pc, #704]	; (8004964 <main+0x570>)
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7ff fca1 	bl	8003fec <printInfo>
		}

		if (flag.rtcAlarm) {
 80046aa:	4ba6      	ldr	r3, [pc, #664]	; (8004944 <main+0x550>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2201      	movs	r2, #1
 80046b0:	4013      	ands	r3, r2
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d015      	beq.n	80046e4 <main+0x2f0>
			flag.rtcAlarm = 0;
 80046b8:	4ba2      	ldr	r3, [pc, #648]	; (8004944 <main+0x550>)
 80046ba:	781a      	ldrb	r2, [r3, #0]
 80046bc:	2101      	movs	r1, #1
 80046be:	438a      	bics	r2, r1
 80046c0:	701a      	strb	r2, [r3, #0]
			if (status.disarmed == 0 || status.powered == 0)
 80046c2:	4ba8      	ldr	r3, [pc, #672]	; (8004964 <main+0x570>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2201      	movs	r2, #1
 80046c8:	4053      	eors	r3, r2
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <main+0x2ea>
 80046d0:	4ba4      	ldr	r3, [pc, #656]	; (8004964 <main+0x570>)
 80046d2:	791b      	ldrb	r3, [r3, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	4053      	eors	r3, r2
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <main+0x2f0>
				triesToSend = MAX_RETRIES;
 80046de:	4ba5      	ldr	r3, [pc, #660]	; (8004974 <main+0x580>)
 80046e0:	2207      	movs	r2, #7
 80046e2:	701a      	strb	r2, [r3, #0]

		}


		if (flag.saveSettings) {
 80046e4:	4b97      	ldr	r3, [pc, #604]	; (8004944 <main+0x550>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2210      	movs	r2, #16
 80046ea:	4013      	ands	r3, r2
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d010      	beq.n	8004714 <main+0x320>
			flag.saveSettings = 0;
 80046f2:	4b94      	ldr	r3, [pc, #592]	; (8004944 <main+0x550>)
 80046f4:	781a      	ldrb	r2, [r3, #0]
 80046f6:	2110      	movs	r1, #16
 80046f8:	438a      	bics	r2, r1
 80046fa:	701a      	strb	r2, [r3, #0]

			debugLogTime("Saving settings to EEPROM");
 80046fc:	4b9e      	ldr	r3, [pc, #632]	; (8004978 <main+0x584>)
 80046fe:	0018      	movs	r0, r3
 8004700:	f7fe fec8 	bl	8003494 <debugLogTime>
			initiateSettings(&settings);
 8004704:	4b90      	ldr	r3, [pc, #576]	; (8004948 <main+0x554>)
 8004706:	0018      	movs	r0, r3
 8004708:	f7ff f878 	bl	80037fc <initiateSettings>
			saveSettings(&settings);
 800470c:	4b8e      	ldr	r3, [pc, #568]	; (8004948 <main+0x554>)
 800470e:	0018      	movs	r0, r3
 8004710:	f7ff f958 	bl	80039c4 <saveSettings>
		}

		if ((status.openedConfirmed != status.opened
 8004714:	4b93      	ldr	r3, [pc, #588]	; (8004964 <main+0x570>)
 8004716:	789a      	ldrb	r2, [r3, #2]
 8004718:	4b92      	ldr	r3, [pc, #584]	; (8004964 <main+0x570>)
 800471a:	785b      	ldrb	r3, [r3, #1]
 800471c:	429a      	cmp	r2, r3
 800471e:	d120      	bne.n	8004762 <main+0x36e>
				|| (status.poweredConfirmed != status.powered
 8004720:	4b90      	ldr	r3, [pc, #576]	; (8004964 <main+0x570>)
 8004722:	795a      	ldrb	r2, [r3, #5]
 8004724:	4b8f      	ldr	r3, [pc, #572]	; (8004964 <main+0x570>)
 8004726:	791b      	ldrb	r3, [r3, #4]
 8004728:	429a      	cmp	r2, r3
 800472a:	d012      	beq.n	8004752 <main+0x35e>
						&& HAL_GetTick() - poweredChangeMoment
 800472c:	f002 f804 	bl	8006738 <HAL_GetTick>
 8004730:	0002      	movs	r2, r0
 8004732:	4b8d      	ldr	r3, [pc, #564]	; (8004968 <main+0x574>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	1ad1      	subs	r1, r2, r3
								> settings.nodeNum * 1200) || triesToSend > 0
 8004738:	4b83      	ldr	r3, [pc, #524]	; (8004948 <main+0x554>)
 800473a:	7a9b      	ldrb	r3, [r3, #10]
 800473c:	001a      	movs	r2, r3
 800473e:	0013      	movs	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	189b      	adds	r3, r3, r2
 8004744:	011a      	lsls	r2, r3, #4
 8004746:	1ad2      	subs	r2, r2, r3
 8004748:	0113      	lsls	r3, r2, #4
 800474a:	001a      	movs	r2, r3
 800474c:	0013      	movs	r3, r2
						&& HAL_GetTick() - poweredChangeMoment
 800474e:	4299      	cmp	r1, r3
 8004750:	d807      	bhi.n	8004762 <main+0x36e>
								> settings.nodeNum * 1200) || triesToSend > 0
 8004752:	4b88      	ldr	r3, [pc, #544]	; (8004974 <main+0x580>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d103      	bne.n	8004762 <main+0x36e>
				|| status.unconfirmedOpening) && !wfa && !status.disarmed
 800475a:	4b82      	ldr	r3, [pc, #520]	; (8004964 <main+0x570>)
 800475c:	79db      	ldrb	r3, [r3, #7]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d056      	beq.n	8004810 <main+0x41c>
 8004762:	4b86      	ldr	r3, [pc, #536]	; (800497c <main+0x588>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2201      	movs	r2, #1
 8004768:	4053      	eors	r3, r2
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d04f      	beq.n	8004810 <main+0x41c>
 8004770:	4b7c      	ldr	r3, [pc, #496]	; (8004964 <main+0x570>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2201      	movs	r2, #1
 8004776:	4053      	eors	r3, r2
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d048      	beq.n	8004810 <main+0x41c>
				&& HAL_GetTick() - myRadio.lastSignalTick
 800477e:	f001 ffdb 	bl	8006738 <HAL_GetTick>
 8004782:	0002      	movs	r2, r0
 8004784:	4b7e      	ldr	r3, [pc, #504]	; (8004980 <main+0x58c>)
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	1ad2      	subs	r2, r2, r3
						> 10 + settings.nodeNum * 20 && myRadio.status != TX) {
 800478a:	4b6f      	ldr	r3, [pc, #444]	; (8004948 <main+0x554>)
 800478c:	7a9b      	ldrb	r3, [r3, #10]
 800478e:	0019      	movs	r1, r3
 8004790:	000b      	movs	r3, r1
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	185b      	adds	r3, r3, r1
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	330a      	adds	r3, #10
				&& HAL_GetTick() - myRadio.lastSignalTick
 800479a:	429a      	cmp	r2, r3
 800479c:	d938      	bls.n	8004810 <main+0x41c>
						> 10 + settings.nodeNum * 20 && myRadio.status != TX) {
 800479e:	4b78      	ldr	r3, [pc, #480]	; (8004980 <main+0x58c>)
 80047a0:	7c1b      	ldrb	r3, [r3, #16]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d034      	beq.n	8004810 <main+0x41c>
			if (status.opened)
 80047a6:	4b6f      	ldr	r3, [pc, #444]	; (8004964 <main+0x570>)
 80047a8:	785b      	ldrb	r3, [r3, #1]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <main+0x3c0>
				status.unconfirmedOpening = true;
 80047ae:	4b6d      	ldr	r3, [pc, #436]	; (8004964 <main+0x570>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	71da      	strb	r2, [r3, #7]
			if (triesToSend)
 80047b4:	4b6f      	ldr	r3, [pc, #444]	; (8004974 <main+0x580>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <main+0x3d4>
				triesToSend--;
 80047bc:	4b6d      	ldr	r3, [pc, #436]	; (8004974 <main+0x580>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	4b6b      	ldr	r3, [pc, #428]	; (8004974 <main+0x580>)
 80047c6:	701a      	strb	r2, [r3, #0]

			debugLogTime("Sending status");
 80047c8:	4b6e      	ldr	r3, [pc, #440]	; (8004984 <main+0x590>)
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7fe fe62 	bl	8003494 <debugLogTime>
			debugLogInt("%d tries left", triesToSend);
 80047d0:	4b68      	ldr	r3, [pc, #416]	; (8004974 <main+0x580>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	001a      	movs	r2, r3
 80047d6:	4b6c      	ldr	r3, [pc, #432]	; (8004988 <main+0x594>)
 80047d8:	0011      	movs	r1, r2
 80047da:	0018      	movs	r0, r3
 80047dc:	f7fe feae 	bl	800353c <debugLogInt>

			totalMessages++;
 80047e0:	4b62      	ldr	r3, [pc, #392]	; (800496c <main+0x578>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	4b61      	ldr	r3, [pc, #388]	; (800496c <main+0x578>)
 80047e8:	601a      	str	r2, [r3, #0]
			lastTransTime = HAL_GetTick();
 80047ea:	f001 ffa5 	bl	8006738 <HAL_GetTick>
 80047ee:	0002      	movs	r2, r0
 80047f0:	4b66      	ldr	r3, [pc, #408]	; (800498c <main+0x598>)
 80047f2:	601a      	str	r2, [r3, #0]
			sendStatus(&status, &settings);
 80047f4:	4a54      	ldr	r2, [pc, #336]	; (8004948 <main+0x554>)
 80047f6:	4b5b      	ldr	r3, [pc, #364]	; (8004964 <main+0x570>)
 80047f8:	0011      	movs	r1, r2
 80047fa:	0018      	movs	r0, r3
 80047fc:	f7ff f954 	bl	8003aa8 <sendStatus>
			wfa = true;
 8004800:	4b5e      	ldr	r3, [pc, #376]	; (800497c <main+0x588>)
 8004802:	2201      	movs	r2, #1
 8004804:	701a      	strb	r2, [r3, #0]
			setWakeup(recomendedDelay);
 8004806:	4b62      	ldr	r3, [pc, #392]	; (8004990 <main+0x59c>)
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	0018      	movs	r0, r3
 800480c:	f7ff f90a 	bl	8003a24 <setWakeup>
		}

		//Got no acknowledge
		if (wfa && HAL_GetTick() - lastTransTime > interval) {
 8004810:	4b5a      	ldr	r3, [pc, #360]	; (800497c <main+0x588>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d03f      	beq.n	8004898 <main+0x4a4>
 8004818:	f001 ff8e 	bl	8006738 <HAL_GetTick>
 800481c:	0002      	movs	r2, r0
 800481e:	4b5b      	ldr	r3, [pc, #364]	; (800498c <main+0x598>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	1ad2      	subs	r2, r2, r3
 8004824:	4b5b      	ldr	r3, [pc, #364]	; (8004994 <main+0x5a0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d935      	bls.n	8004898 <main+0x4a4>
			acknowledgeMiss++;
 800482c:	4b50      	ldr	r3, [pc, #320]	; (8004970 <main+0x57c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	4b4f      	ldr	r3, [pc, #316]	; (8004970 <main+0x57c>)
 8004834:	601a      	str	r2, [r3, #0]
			uint32_t maxInterval = settings.workInterval * 1000 / 3;
 8004836:	4b44      	ldr	r3, [pc, #272]	; (8004948 <main+0x554>)
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	0013      	movs	r3, r2
 800483c:	015b      	lsls	r3, r3, #5
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	189b      	adds	r3, r3, r2
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	2103      	movs	r1, #3
 8004848:	0018      	movs	r0, r3
 800484a:	f7fb fc79 	bl	8000140 <__udivsi3>
 800484e:	0003      	movs	r3, r0
 8004850:	607b      	str	r3, [r7, #4]
			debugLogTime("Got no acknowledge!");
 8004852:	4b51      	ldr	r3, [pc, #324]	; (8004998 <main+0x5a4>)
 8004854:	0018      	movs	r0, r3
 8004856:	f7fe fe1d 	bl	8003494 <debugLogTime>
			wfa = false;
 800485a:	4b48      	ldr	r3, [pc, #288]	; (800497c <main+0x588>)
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
			interval += INTERVAL_STEP + settings.nodeNum * 300;
 8004860:	4b39      	ldr	r3, [pc, #228]	; (8004948 <main+0x554>)
 8004862:	7a9b      	ldrb	r3, [r3, #10]
 8004864:	001a      	movs	r2, r3
 8004866:	0013      	movs	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	189b      	adds	r3, r3, r2
 800486c:	011a      	lsls	r2, r3, #4
 800486e:	1ad2      	subs	r2, r2, r3
 8004870:	0093      	lsls	r3, r2, #2
 8004872:	001a      	movs	r2, r3
 8004874:	0013      	movs	r3, r2
 8004876:	001a      	movs	r2, r3
 8004878:	4b46      	ldr	r3, [pc, #280]	; (8004994 <main+0x5a0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	18d3      	adds	r3, r2, r3
 800487e:	22fa      	movs	r2, #250	; 0xfa
 8004880:	0092      	lsls	r2, r2, #2
 8004882:	189a      	adds	r2, r3, r2
 8004884:	4b43      	ldr	r3, [pc, #268]	; (8004994 <main+0x5a0>)
 8004886:	601a      	str	r2, [r3, #0]
			interval = (interval > maxInterval) ? maxInterval : interval;
 8004888:	4b42      	ldr	r3, [pc, #264]	; (8004994 <main+0x5a0>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4293      	cmp	r3, r2
 8004890:	d900      	bls.n	8004894 <main+0x4a0>
 8004892:	0013      	movs	r3, r2
 8004894:	4a3f      	ldr	r2, [pc, #252]	; (8004994 <main+0x5a0>)
 8004896:	6013      	str	r3, [r2, #0]
		}

		checkUart();
 8004898:	f001 fd16 	bl	80062c8 <checkUart>

		if (flag.readConfig) {
 800489c:	4b29      	ldr	r3, [pc, #164]	; (8004944 <main+0x550>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2220      	movs	r2, #32
 80048a2:	4013      	ands	r3, r2
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <main+0x4c8>
			flag.readConfig = 0;
 80048aa:	4b26      	ldr	r3, [pc, #152]	; (8004944 <main+0x550>)
 80048ac:	781a      	ldrb	r2, [r3, #0]
 80048ae:	2120      	movs	r1, #32
 80048b0:	438a      	bics	r2, r1
 80048b2:	701a      	strb	r2, [r3, #0]

			sendConfig(&settings);
 80048b4:	4b24      	ldr	r3, [pc, #144]	; (8004948 <main+0x554>)
 80048b6:	0018      	movs	r0, r3
 80048b8:	f001 fe3a 	bl	8006530 <sendConfig>
		}

		if (myRadio.readBytes > 0) {
 80048bc:	4b30      	ldr	r3, [pc, #192]	; (8004980 <main+0x58c>)
 80048be:	225d      	movs	r2, #93	; 0x5d
 80048c0:	5c9b      	ldrb	r3, [r3, r2]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d100      	bne.n	80048c8 <main+0x4d4>
 80048c6:	e157      	b.n	8004b78 <main+0x784>
			debugLogTime("Got message...");
 80048c8:	4b34      	ldr	r3, [pc, #208]	; (800499c <main+0x5a8>)
 80048ca:	0018      	movs	r0, r3
 80048cc:	f7fe fde2 	bl	8003494 <debugLogTime>
			if (myRadio.badCrc == 1) {
 80048d0:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <main+0x58c>)
 80048d2:	2260      	movs	r2, #96	; 0x60
 80048d4:	5c9b      	ldrb	r3, [r3, r2]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <main+0x4f8>
				debugLog("Bad CRC!");
 80048da:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <main+0x5ac>)
 80048dc:	0018      	movs	r0, r3
 80048de:	f7fe fe17 	bl	8003510 <debugLog>
				myRadio.readBytes = 0;
 80048e2:	4b27      	ldr	r3, [pc, #156]	; (8004980 <main+0x58c>)
 80048e4:	225d      	movs	r2, #93	; 0x5d
 80048e6:	2100      	movs	r1, #0
 80048e8:	5499      	strb	r1, [r3, r2]
 80048ea:	e141      	b.n	8004b70 <main+0x77c>
			} else if (rxMes->uplink == 0 && rxMes->adr == settings.nodeNum) {
 80048ec:	4b2d      	ldr	r3, [pc, #180]	; (80049a4 <main+0x5b0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2201      	movs	r2, #1
 80048f4:	4013      	ands	r3, r2
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d000      	beq.n	80048fe <main+0x50a>
 80048fc:	e104      	b.n	8004b08 <main+0x714>
 80048fe:	4b29      	ldr	r3, [pc, #164]	; (80049a4 <main+0x5b0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	0edb      	lsrs	r3, r3, #27
 8004908:	b2db      	uxtb	r3, r3
 800490a:	001a      	movs	r2, r3
 800490c:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <main+0x554>)
 800490e:	7a9b      	ldrb	r3, [r3, #10]
 8004910:	429a      	cmp	r2, r3
 8004912:	d000      	beq.n	8004916 <main+0x522>
 8004914:	e0f8      	b.n	8004b08 <main+0x714>
				if (status.disarmed != rxMes->disarm)
 8004916:	4b13      	ldr	r3, [pc, #76]	; (8004964 <main+0x570>)
 8004918:	781a      	ldrb	r2, [r3, #0]
 800491a:	4b22      	ldr	r3, [pc, #136]	; (80049a4 <main+0x5b0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	785b      	ldrb	r3, [r3, #1]
 8004920:	07db      	lsls	r3, r3, #31
 8004922:	0fdb      	lsrs	r3, r3, #31
 8004924:	b2db      	uxtb	r3, r3
 8004926:	429a      	cmp	r2, r3
 8004928:	d046      	beq.n	80049b8 <main+0x5c4>
					debugLogString("Disarmed changed to %s",
							rxMes->disarm ? "Yes" : "No");
 800492a:	4b1e      	ldr	r3, [pc, #120]	; (80049a4 <main+0x5b0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	2201      	movs	r2, #1
 8004932:	4013      	ands	r3, r2
 8004934:	b2db      	uxtb	r3, r3
					debugLogString("Disarmed changed to %s",
 8004936:	2b00      	cmp	r3, #0
 8004938:	d038      	beq.n	80049ac <main+0x5b8>
 800493a:	4b1b      	ldr	r3, [pc, #108]	; (80049a8 <main+0x5b4>)
 800493c:	e037      	b.n	80049ae <main+0x5ba>
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	0800e1e0 	.word	0x0800e1e0
 8004944:	2000044c 	.word	0x2000044c
 8004948:	200004e8 	.word	0x200004e8
 800494c:	0800e1ec 	.word	0x0800e1ec
 8004950:	0800e200 	.word	0x0800e200
 8004954:	0800e210 	.word	0x0800e210
 8004958:	0800e228 	.word	0x0800e228
 800495c:	20000438 	.word	0x20000438
 8004960:	200004dc 	.word	0x200004dc
 8004964:	200004e0 	.word	0x200004e0
 8004968:	200004d8 	.word	0x200004d8
 800496c:	2000060c 	.word	0x2000060c
 8004970:	20000610 	.word	0x20000610
 8004974:	20000608 	.word	0x20000608
 8004978:	0800e238 	.word	0x0800e238
 800497c:	2000060a 	.word	0x2000060a
 8004980:	20000454 	.word	0x20000454
 8004984:	0800e254 	.word	0x0800e254
 8004988:	0800e264 	.word	0x0800e264
 800498c:	20000504 	.word	0x20000504
 8004990:	20000014 	.word	0x20000014
 8004994:	2000001c 	.word	0x2000001c
 8004998:	0800e274 	.word	0x0800e274
 800499c:	0800e288 	.word	0x0800e288
 80049a0:	0800e298 	.word	0x0800e298
 80049a4:	20000018 	.word	0x20000018
 80049a8:	0800e080 	.word	0x0800e080
 80049ac:	4ba5      	ldr	r3, [pc, #660]	; (8004c44 <main+0x850>)
 80049ae:	4aa6      	ldr	r2, [pc, #664]	; (8004c48 <main+0x854>)
 80049b0:	0019      	movs	r1, r3
 80049b2:	0010      	movs	r0, r2
 80049b4:	f7fe fdda 	bl	800356c <debugLogString>

				status.disarmed = rxMes->disarm;
 80049b8:	4ba4      	ldr	r3, [pc, #656]	; (8004c4c <main+0x858>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	785b      	ldrb	r3, [r3, #1]
 80049be:	07db      	lsls	r3, r3, #31
 80049c0:	0fdb      	lsrs	r3, r3, #31
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	1e5a      	subs	r2, r3, #1
 80049c6:	4193      	sbcs	r3, r2
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	4ba1      	ldr	r3, [pc, #644]	; (8004c50 <main+0x85c>)
 80049cc:	701a      	strb	r2, [r3, #0]
				if (rxMes->codedDelayMSB || rxMes->codedDelayLSB) {
 80049ce:	4b9f      	ldr	r3, [pc, #636]	; (8004c4c <main+0x858>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	785b      	ldrb	r3, [r3, #1]
 80049d4:	2201      	movs	r2, #1
 80049d6:	4393      	bics	r3, r2
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d104      	bne.n	80049e8 <main+0x5f4>
 80049de:	4b9b      	ldr	r3, [pc, #620]	; (8004c4c <main+0x858>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	789b      	ldrb	r3, [r3, #2]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d031      	beq.n	8004a4c <main+0x658>

					recomendedDelay = rxMes->codedDelayLSB
 80049e8:	4b98      	ldr	r3, [pc, #608]	; (8004c4c <main+0x858>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	789b      	ldrb	r3, [r3, #2]
 80049ee:	b29a      	uxth	r2, r3
							+ (rxMes->codedDelayMSB << 8);
 80049f0:	4b96      	ldr	r3, [pc, #600]	; (8004c4c <main+0x858>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	061b      	lsls	r3, r3, #24
 80049f8:	0e5b      	lsrs	r3, r3, #25
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	18d3      	adds	r3, r2, r3
 8004a04:	b29a      	uxth	r2, r3
					recomendedDelay = rxMes->codedDelayLSB
 8004a06:	4b93      	ldr	r3, [pc, #588]	; (8004c54 <main+0x860>)
 8004a08:	801a      	strh	r2, [r3, #0]
					if (recomendedDelay > 2 * settings.workInterval) {
 8004a0a:	4b92      	ldr	r3, [pc, #584]	; (8004c54 <main+0x860>)
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	001a      	movs	r2, r3
 8004a10:	4b91      	ldr	r3, [pc, #580]	; (8004c58 <main+0x864>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d90f      	bls.n	8004a3a <main+0x646>
						debugLogInt(
 8004a1a:	4b8e      	ldr	r3, [pc, #568]	; (8004c54 <main+0x860>)
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	001a      	movs	r2, r3
 8004a20:	4b8e      	ldr	r3, [pc, #568]	; (8004c5c <main+0x868>)
 8004a22:	0011      	movs	r1, r2
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7fe fd89 	bl	800353c <debugLogInt>
								"###Recommended delay is too high(%u), returning to 2x work Interval",
								recomendedDelay);
						recomendedDelay = 2 * settings.workInterval;
 8004a2a:	4b8b      	ldr	r3, [pc, #556]	; (8004c58 <main+0x864>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	18db      	adds	r3, r3, r3
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	4b87      	ldr	r3, [pc, #540]	; (8004c54 <main+0x860>)
 8004a36:	801a      	strh	r2, [r3, #0]
					if (recomendedDelay > 2 * settings.workInterval) {
 8004a38:	e016      	b.n	8004a68 <main+0x674>
					} else
						debugLogInt("Recommended delay set to %u",
 8004a3a:	4b86      	ldr	r3, [pc, #536]	; (8004c54 <main+0x860>)
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	001a      	movs	r2, r3
 8004a40:	4b87      	ldr	r3, [pc, #540]	; (8004c60 <main+0x86c>)
 8004a42:	0011      	movs	r1, r2
 8004a44:	0018      	movs	r0, r3
 8004a46:	f7fe fd79 	bl	800353c <debugLogInt>
					if (recomendedDelay > 2 * settings.workInterval) {
 8004a4a:	e00d      	b.n	8004a68 <main+0x674>
								recomendedDelay);
				} else {
					debugLogInt("Recommended returned to %u",
							(uint16_t) settings.workInterval);
 8004a4c:	4b82      	ldr	r3, [pc, #520]	; (8004c58 <main+0x864>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	b29b      	uxth	r3, r3
					debugLogInt("Recommended returned to %u",
 8004a52:	001a      	movs	r2, r3
 8004a54:	4b83      	ldr	r3, [pc, #524]	; (8004c64 <main+0x870>)
 8004a56:	0011      	movs	r1, r2
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7fe fd6f 	bl	800353c <debugLogInt>
					recomendedDelay = settings.workInterval;
 8004a5e:	4b7e      	ldr	r3, [pc, #504]	; (8004c58 <main+0x864>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	4b7b      	ldr	r3, [pc, #492]	; (8004c54 <main+0x860>)
 8004a66:	801a      	strh	r2, [r3, #0]
				}
				setWakeup(recomendedDelay);
 8004a68:	4b7a      	ldr	r3, [pc, #488]	; (8004c54 <main+0x860>)
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7fe ffd9 	bl	8003a24 <setWakeup>
				if (rxMes->message == MSG_DOWN_REQUEST) //Request current status
 8004a72:	4b76      	ldr	r3, [pc, #472]	; (8004c4c <main+0x858>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2206      	movs	r2, #6
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d11c      	bne.n	8004abc <main+0x6c8>
				{
					debugLog("Status requested...sending");
 8004a82:	4b79      	ldr	r3, [pc, #484]	; (8004c68 <main+0x874>)
 8004a84:	0018      	movs	r0, r3
 8004a86:	f7fe fd43 	bl	8003510 <debugLog>
					totalMessages++;
 8004a8a:	4b78      	ldr	r3, [pc, #480]	; (8004c6c <main+0x878>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	4b76      	ldr	r3, [pc, #472]	; (8004c6c <main+0x878>)
 8004a92:	601a      	str	r2, [r3, #0]
					lastTransTime = HAL_GetTick();
 8004a94:	f001 fe50 	bl	8006738 <HAL_GetTick>
 8004a98:	0002      	movs	r2, r0
 8004a9a:	4b75      	ldr	r3, [pc, #468]	; (8004c70 <main+0x87c>)
 8004a9c:	601a      	str	r2, [r3, #0]
					sendStatus(&status, &settings);
 8004a9e:	4a6e      	ldr	r2, [pc, #440]	; (8004c58 <main+0x864>)
 8004aa0:	4b6b      	ldr	r3, [pc, #428]	; (8004c50 <main+0x85c>)
 8004aa2:	0011      	movs	r1, r2
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f7fe ffff 	bl	8003aa8 <sendStatus>
					wfa = true;
 8004aaa:	4b72      	ldr	r3, [pc, #456]	; (8004c74 <main+0x880>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	701a      	strb	r2, [r3, #0]
					setWakeup(recomendedDelay);
 8004ab0:	4b68      	ldr	r3, [pc, #416]	; (8004c54 <main+0x860>)
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7fe ffb5 	bl	8003a24 <setWakeup>
				if (rxMes->message == MSG_DOWN_REQUEST) //Request current status
 8004aba:	e058      	b.n	8004b6e <main+0x77a>
				}

				else if (rxMes->message == MSG_DOWN_ACKNOWLEDGE) {
 8004abc:	4b63      	ldr	r3, [pc, #396]	; (8004c4c <main+0x858>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2206      	movs	r2, #6
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d150      	bne.n	8004b6e <main+0x77a>
					debugLog("Acknowledge received");
 8004acc:	4b6a      	ldr	r3, [pc, #424]	; (8004c78 <main+0x884>)
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f7fe fd1e 	bl	8003510 <debugLog>
					if (status.openedToConfirm == 1)
 8004ad4:	4b5e      	ldr	r3, [pc, #376]	; (8004c50 <main+0x85c>)
 8004ad6:	78db      	ldrb	r3, [r3, #3]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <main+0x6ee>
						status.unconfirmedOpening = 0;
 8004adc:	4b5c      	ldr	r3, [pc, #368]	; (8004c50 <main+0x85c>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	71da      	strb	r2, [r3, #7]
					status.openedConfirmed = status.openedToConfirm;
 8004ae2:	4b5b      	ldr	r3, [pc, #364]	; (8004c50 <main+0x85c>)
 8004ae4:	78da      	ldrb	r2, [r3, #3]
 8004ae6:	4b5a      	ldr	r3, [pc, #360]	; (8004c50 <main+0x85c>)
 8004ae8:	709a      	strb	r2, [r3, #2]
					status.poweredConfirmed = status.poweredToConfirm;
 8004aea:	4b59      	ldr	r3, [pc, #356]	; (8004c50 <main+0x85c>)
 8004aec:	799a      	ldrb	r2, [r3, #6]
 8004aee:	4b58      	ldr	r3, [pc, #352]	; (8004c50 <main+0x85c>)
 8004af0:	715a      	strb	r2, [r3, #5]
					wfa = false;
 8004af2:	4b60      	ldr	r3, [pc, #384]	; (8004c74 <main+0x880>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]
					interval = DEFAULT_INTERVAL;
 8004af8:	4b60      	ldr	r3, [pc, #384]	; (8004c7c <main+0x888>)
 8004afa:	22fa      	movs	r2, #250	; 0xfa
 8004afc:	00d2      	lsls	r2, r2, #3
 8004afe:	601a      	str	r2, [r3, #0]
					triesToSend = 0;
 8004b00:	4b5f      	ldr	r3, [pc, #380]	; (8004c80 <main+0x88c>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
				if (rxMes->message == MSG_DOWN_REQUEST) //Request current status
 8004b06:	e032      	b.n	8004b6e <main+0x77a>

				}
			} else {

				if (rxMes->uplink == 0) {
 8004b08:	4b50      	ldr	r3, [pc, #320]	; (8004c4c <main+0x858>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	4013      	ands	r3, r2
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d11d      	bne.n	8004b54 <main+0x760>
					debugLogInt("It's for %d", rxMes->adr);
 8004b18:	4b4c      	ldr	r3, [pc, #304]	; (8004c4c <main+0x858>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	061b      	lsls	r3, r3, #24
 8004b20:	0edb      	lsrs	r3, r3, #27
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	001a      	movs	r2, r3
 8004b26:	4b57      	ldr	r3, [pc, #348]	; (8004c84 <main+0x890>)
 8004b28:	0011      	movs	r1, r2
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f7fe fd06 	bl	800353c <debugLogInt>
					debugLogInt("Delay for it: %d",
							rxMes->codedDelayLSB + (rxMes->codedDelayMSB << 8));
 8004b30:	4b46      	ldr	r3, [pc, #280]	; (8004c4c <main+0x858>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	789b      	ldrb	r3, [r3, #2]
 8004b36:	001a      	movs	r2, r3
 8004b38:	4b44      	ldr	r3, [pc, #272]	; (8004c4c <main+0x858>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	785b      	ldrb	r3, [r3, #1]
 8004b3e:	061b      	lsls	r3, r3, #24
 8004b40:	0e5b      	lsrs	r3, r3, #25
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	021b      	lsls	r3, r3, #8
					debugLogInt("Delay for it: %d",
 8004b46:	18d2      	adds	r2, r2, r3
 8004b48:	4b4f      	ldr	r3, [pc, #316]	; (8004c88 <main+0x894>)
 8004b4a:	0011      	movs	r1, r2
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f7fe fcf5 	bl	800353c <debugLogInt>
 8004b52:	e00d      	b.n	8004b70 <main+0x77c>
				} else {
					debugLogInt("It's from %d", rxMes->adr);
 8004b54:	4b3d      	ldr	r3, [pc, #244]	; (8004c4c <main+0x858>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	061b      	lsls	r3, r3, #24
 8004b5c:	0edb      	lsrs	r3, r3, #27
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	001a      	movs	r2, r3
 8004b62:	4b4a      	ldr	r3, [pc, #296]	; (8004c8c <main+0x898>)
 8004b64:	0011      	movs	r1, r2
 8004b66:	0018      	movs	r0, r3
 8004b68:	f7fe fce8 	bl	800353c <debugLogInt>
 8004b6c:	e000      	b.n	8004b70 <main+0x77c>
				if (rxMes->message == MSG_DOWN_REQUEST) //Request current status
 8004b6e:	46c0      	nop			; (mov r8, r8)
				}
			}
			myRadio.readBytes = 0;
 8004b70:	4b47      	ldr	r3, [pc, #284]	; (8004c90 <main+0x89c>)
 8004b72:	225d      	movs	r2, #93	; 0x5d
 8004b74:	2100      	movs	r1, #0
 8004b76:	5499      	strb	r1, [r3, r2]
		}

		SX127X_Routine(&myRadio);
 8004b78:	4b45      	ldr	r3, [pc, #276]	; (8004c90 <main+0x89c>)
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f001 f9a0 	bl	8005ec0 <SX127X_Routine>

		ledRoutine(&myRadio);
 8004b80:	4b43      	ldr	r3, [pc, #268]	; (8004c90 <main+0x89c>)
 8004b82:	0018      	movs	r0, r3
 8004b84:	f7ff f9d2 	bl	8003f2c <ledRoutine>

		status.opened = HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin)
 8004b88:	23a0      	movs	r3, #160	; 0xa0
 8004b8a:	05db      	lsls	r3, r3, #23
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f002 ffd8 	bl	8007b44 <HAL_GPIO_ReadPin>
 8004b94:	1e03      	subs	r3, r0, #0
				|| status.unconfirmedOpening;
 8004b96:	d103      	bne.n	8004ba0 <main+0x7ac>
 8004b98:	4b2d      	ldr	r3, [pc, #180]	; (8004c50 <main+0x85c>)
 8004b9a:	79db      	ldrb	r3, [r3, #7]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <main+0x7b0>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <main+0x7b2>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	1c1a      	adds	r2, r3, #0
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4013      	ands	r3, r2
 8004bac:	b2da      	uxtb	r2, r3
		status.opened = HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin)
 8004bae:	4b28      	ldr	r3, [pc, #160]	; (8004c50 <main+0x85c>)
 8004bb0:	705a      	strb	r2, [r3, #1]
		status.powered = HAL_GPIO_ReadPin(extPower_GPIO_Port, extPower_Pin);
 8004bb2:	2380      	movs	r3, #128	; 0x80
 8004bb4:	005a      	lsls	r2, r3, #1
 8004bb6:	23a0      	movs	r3, #160	; 0xa0
 8004bb8:	05db      	lsls	r3, r3, #23
 8004bba:	0011      	movs	r1, r2
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f002 ffc1 	bl	8007b44 <HAL_GPIO_ReadPin>
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	1e5a      	subs	r2, r3, #1
 8004bc6:	4193      	sbcs	r3, r2
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	4b21      	ldr	r3, [pc, #132]	; (8004c50 <main+0x85c>)
 8004bcc:	711a      	strb	r2, [r3, #4]
		if (!status.powered && !wfa && !myRadio.TXrequest
 8004bce:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <main+0x85c>)
 8004bd0:	791b      	ldrb	r3, [r3, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	4053      	eors	r3, r2
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d100      	bne.n	8004bde <main+0x7ea>
 8004bdc:	e527      	b.n	800462e <main+0x23a>
 8004bde:	4b25      	ldr	r3, [pc, #148]	; (8004c74 <main+0x880>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2201      	movs	r2, #1
 8004be4:	4053      	eors	r3, r2
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d100      	bne.n	8004bee <main+0x7fa>
 8004bec:	e51f      	b.n	800462e <main+0x23a>
 8004bee:	4b28      	ldr	r3, [pc, #160]	; (8004c90 <main+0x89c>)
 8004bf0:	7c5b      	ldrb	r3, [r3, #17]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4053      	eors	r3, r2
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d100      	bne.n	8004bfe <main+0x80a>
 8004bfc:	e517      	b.n	800462e <main+0x23a>
				&& status.powered == status.poweredConfirmed
 8004bfe:	4b14      	ldr	r3, [pc, #80]	; (8004c50 <main+0x85c>)
 8004c00:	791a      	ldrb	r2, [r3, #4]
 8004c02:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <main+0x85c>)
 8004c04:	795b      	ldrb	r3, [r3, #5]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d000      	beq.n	8004c0c <main+0x818>
 8004c0a:	e510      	b.n	800462e <main+0x23a>
				&& status.opened == status.openedConfirmed && !dontSleep
 8004c0c:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <main+0x85c>)
 8004c0e:	785a      	ldrb	r2, [r3, #1]
 8004c10:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <main+0x85c>)
 8004c12:	789b      	ldrb	r3, [r3, #2]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d000      	beq.n	8004c1a <main+0x826>
 8004c18:	e509      	b.n	800462e <main+0x23a>
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <main+0x8a0>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	4053      	eors	r3, r2
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d100      	bne.n	8004c2a <main+0x836>
 8004c28:	e501      	b.n	800462e <main+0x23a>
				&& triesToSend < 1) {
 8004c2a:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <main+0x88c>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d000      	beq.n	8004c34 <main+0x840>
 8004c32:	e4fc      	b.n	800462e <main+0x23a>
			debugLogTime("Sleep...");
 8004c34:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <main+0x8a4>)
 8004c36:	0018      	movs	r0, r3
 8004c38:	f7fe fc2c 	bl	8003494 <debugLogTime>
			sleep();
 8004c3c:	f7fe ff12 	bl	8003a64 <sleep>
		HAL_WWDG_Refresh(&hwwdg);
 8004c40:	e4f5      	b.n	800462e <main+0x23a>
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	0800e084 	.word	0x0800e084
 8004c48:	0800e2a4 	.word	0x0800e2a4
 8004c4c:	20000018 	.word	0x20000018
 8004c50:	200004e0 	.word	0x200004e0
 8004c54:	20000014 	.word	0x20000014
 8004c58:	200004e8 	.word	0x200004e8
 8004c5c:	0800e2bc 	.word	0x0800e2bc
 8004c60:	0800e300 	.word	0x0800e300
 8004c64:	0800e31c 	.word	0x0800e31c
 8004c68:	0800e338 	.word	0x0800e338
 8004c6c:	2000060c 	.word	0x2000060c
 8004c70:	20000504 	.word	0x20000504
 8004c74:	2000060a 	.word	0x2000060a
 8004c78:	0800e354 	.word	0x0800e354
 8004c7c:	2000001c 	.word	0x2000001c
 8004c80:	20000608 	.word	0x20000608
 8004c84:	0800e36c 	.word	0x0800e36c
 8004c88:	0800e378 	.word	0x0800e378
 8004c8c:	0800e38c 	.word	0x0800e38c
 8004c90:	20000454 	.word	0x20000454
 8004c94:	20000609 	.word	0x20000609
 8004c98:	0800e39c 	.word	0x0800e39c

08004c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b09b      	sub	sp, #108	; 0x6c
 8004ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ca2:	2434      	movs	r4, #52	; 0x34
 8004ca4:	193b      	adds	r3, r7, r4
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	2334      	movs	r3, #52	; 0x34
 8004caa:	001a      	movs	r2, r3
 8004cac:	2100      	movs	r1, #0
 8004cae:	f006 f86c 	bl	800ad8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	2314      	movs	r3, #20
 8004cba:	001a      	movs	r2, r3
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	f006 f864 	bl	800ad8a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cc2:	1d3b      	adds	r3, r7, #4
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	231c      	movs	r3, #28
 8004cc8:	001a      	movs	r2, r3
 8004cca:	2100      	movs	r1, #0
 8004ccc:	f006 f85d 	bl	800ad8a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cd0:	4b31      	ldr	r3, [pc, #196]	; (8004d98 <SystemClock_Config+0xfc>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a31      	ldr	r2, [pc, #196]	; (8004d9c <SystemClock_Config+0x100>)
 8004cd6:	401a      	ands	r2, r3
 8004cd8:	4b2f      	ldr	r3, [pc, #188]	; (8004d98 <SystemClock_Config+0xfc>)
 8004cda:	2180      	movs	r1, #128	; 0x80
 8004cdc:	0109      	lsls	r1, r1, #4
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004ce2:	f003 fa63 	bl	80081ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8004ce6:	4b2e      	ldr	r3, [pc, #184]	; (8004da0 <SystemClock_Config+0x104>)
 8004ce8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cea:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <SystemClock_Config+0x104>)
 8004cec:	21c0      	movs	r1, #192	; 0xc0
 8004cee:	0149      	lsls	r1, r1, #5
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8004cf4:	193b      	adds	r3, r7, r4
 8004cf6:	2214      	movs	r2, #20
 8004cf8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004cfa:	193b      	adds	r3, r7, r4
 8004cfc:	2280      	movs	r2, #128	; 0x80
 8004cfe:	0052      	lsls	r2, r2, #1
 8004d00:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004d02:	0021      	movs	r1, r4
 8004d04:	187b      	adds	r3, r7, r1
 8004d06:	2201      	movs	r2, #1
 8004d08:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004d0a:	187b      	adds	r3, r7, r1
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8004d10:	187b      	adds	r3, r7, r1
 8004d12:	22a0      	movs	r2, #160	; 0xa0
 8004d14:	0212      	lsls	r2, r2, #8
 8004d16:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004d18:	187b      	adds	r3, r7, r1
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d1e:	187b      	adds	r3, r7, r1
 8004d20:	0018      	movs	r0, r3
 8004d22:	f003 faad 	bl	8008280 <HAL_RCC_OscConfig>
 8004d26:	1e03      	subs	r3, r0, #0
 8004d28:	d001      	beq.n	8004d2e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8004d2a:	f000 fabf 	bl	80052ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d2e:	2120      	movs	r1, #32
 8004d30:	187b      	adds	r3, r7, r1
 8004d32:	220f      	movs	r2, #15
 8004d34:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8004d36:	187b      	adds	r3, r7, r1
 8004d38:	2200      	movs	r2, #0
 8004d3a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d3c:	187b      	adds	r3, r7, r1
 8004d3e:	2200      	movs	r2, #0
 8004d40:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d42:	187b      	adds	r3, r7, r1
 8004d44:	2200      	movs	r2, #0
 8004d46:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d48:	187b      	adds	r3, r7, r1
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004d4e:	187b      	adds	r3, r7, r1
 8004d50:	2100      	movs	r1, #0
 8004d52:	0018      	movs	r0, r3
 8004d54:	f003 fdfe 	bl	8008954 <HAL_RCC_ClockConfig>
 8004d58:	1e03      	subs	r3, r0, #0
 8004d5a:	d001      	beq.n	8004d60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004d5c:	f000 faa6 	bl	80052ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC
 8004d60:	1d3b      	adds	r3, r7, #4
 8004d62:	22a1      	movs	r2, #161	; 0xa1
 8004d64:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004d66:	1d3b      	adds	r3, r7, #4
 8004d68:	2200      	movs	r2, #0
 8004d6a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004d6c:	1d3b      	adds	r3, r7, #4
 8004d6e:	2280      	movs	r2, #128	; 0x80
 8004d70:	0252      	lsls	r2, r2, #9
 8004d72:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8004d74:	1d3b      	adds	r3, r7, #4
 8004d76:	22c0      	movs	r2, #192	; 0xc0
 8004d78:	0312      	lsls	r2, r2, #12
 8004d7a:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d7c:	1d3b      	adds	r3, r7, #4
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f004 f80c 	bl	8008d9c <HAL_RCCEx_PeriphCLKConfig>
 8004d84:	1e03      	subs	r3, r0, #0
 8004d86:	d001      	beq.n	8004d8c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8004d88:	f000 fa90 	bl	80052ac <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8004d8c:	f004 f93c 	bl	8009008 <HAL_RCCEx_EnableLSECSS>
}
 8004d90:	46c0      	nop			; (mov r8, r8)
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b01b      	add	sp, #108	; 0x6c
 8004d96:	bd90      	pop	{r4, r7, pc}
 8004d98:	40007000 	.word	0x40007000
 8004d9c:	ffffe7ff 	.word	0xffffe7ff
 8004da0:	40021000 	.word	0x40021000

08004da4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004daa:	003b      	movs	r3, r7
 8004dac:	0018      	movs	r0, r3
 8004dae:	2308      	movs	r3, #8
 8004db0:	001a      	movs	r2, r3
 8004db2:	2100      	movs	r1, #0
 8004db4:	f005 ffe9 	bl	800ad8a <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004db8:	4b30      	ldr	r3, [pc, #192]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004dba:	4a31      	ldr	r2, [pc, #196]	; (8004e80 <MX_ADC_Init+0xdc>)
 8004dbc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004dbe:	4b2f      	ldr	r3, [pc, #188]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004dc6:	22c0      	movs	r2, #192	; 0xc0
 8004dc8:	0612      	lsls	r2, r2, #24
 8004dca:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004dcc:	4b2b      	ldr	r3, [pc, #172]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8004dd2:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004dd4:	2207      	movs	r2, #7
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004dd8:	4b28      	ldr	r3, [pc, #160]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004dde:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004de4:	4b25      	ldr	r3, [pc, #148]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004de6:	2220      	movs	r2, #32
 8004de8:	2100      	movs	r1, #0
 8004dea:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004dec:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004dee:	2221      	movs	r2, #33	; 0x21
 8004df0:	2100      	movs	r1, #0
 8004df2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004df4:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004dfa:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004dfc:	22c2      	movs	r2, #194	; 0xc2
 8004dfe:	32ff      	adds	r2, #255	; 0xff
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004e02:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004e04:	222c      	movs	r2, #44	; 0x2c
 8004e06:	2100      	movs	r1, #0
 8004e08:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e0a:	4b1c      	ldr	r3, [pc, #112]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004e16:	4b19      	ldr	r3, [pc, #100]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8004e1c:	4b17      	ldr	r3, [pc, #92]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004e22:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004e28:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f001 fc9c 	bl	8006768 <HAL_ADC_Init>
 8004e30:	1e03      	subs	r3, r0, #0
 8004e32:	d001      	beq.n	8004e38 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004e34:	f000 fa3a 	bl	80052ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004e38:	003b      	movs	r3, r7
 8004e3a:	4a12      	ldr	r2, [pc, #72]	; (8004e84 <MX_ADC_Init+0xe0>)
 8004e3c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004e3e:	003b      	movs	r3, r7
 8004e40:	2280      	movs	r2, #128	; 0x80
 8004e42:	0152      	lsls	r2, r2, #5
 8004e44:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004e46:	003a      	movs	r2, r7
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004e4a:	0011      	movs	r1, r2
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f001 fe99 	bl	8006b84 <HAL_ADC_ConfigChannel>
 8004e52:	1e03      	subs	r3, r0, #0
 8004e54:	d001      	beq.n	8004e5a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004e56:	f000 fa29 	bl	80052ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004e5a:	003b      	movs	r3, r7
 8004e5c:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <MX_ADC_Init+0xe4>)
 8004e5e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004e60:	003a      	movs	r2, r7
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <MX_ADC_Init+0xd8>)
 8004e64:	0011      	movs	r1, r2
 8004e66:	0018      	movs	r0, r3
 8004e68:	f001 fe8c 	bl	8006b84 <HAL_ADC_ConfigChannel>
 8004e6c:	1e03      	subs	r3, r0, #0
 8004e6e:	d001      	beq.n	8004e74 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8004e70:	f000 fa1c 	bl	80052ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004e74:	46c0      	nop			; (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b002      	add	sp, #8
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	2000021c 	.word	0x2000021c
 8004e80:	40012400 	.word	0x40012400
 8004e84:	08000004 	.word	0x08000004
 8004e88:	44020000 	.word	0x44020000

08004e8c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8004e90:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <MX_LPTIM1_Init+0x48>)
 8004e92:	4a11      	ldr	r2, [pc, #68]	; (8004ed8 <MX_LPTIM1_Init+0x4c>)
 8004e94:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8004e96:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <MX_LPTIM1_Init+0x48>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8004e9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <MX_LPTIM1_Init+0x48>)
 8004e9e:	22e0      	movs	r2, #224	; 0xe0
 8004ea0:	0112      	lsls	r2, r2, #4
 8004ea2:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <MX_LPTIM1_Init+0x48>)
 8004ea6:	4a0d      	ldr	r2, [pc, #52]	; (8004edc <MX_LPTIM1_Init+0x50>)
 8004ea8:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <MX_LPTIM1_Init+0x48>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8004eb0:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <MX_LPTIM1_Init+0x48>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8004eb6:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <MX_LPTIM1_Init+0x48>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <MX_LPTIM1_Init+0x48>)
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f002 fea0 	bl	8007c04 <HAL_LPTIM_Init>
 8004ec4:	1e03      	subs	r3, r0, #0
 8004ec6:	d001      	beq.n	8004ecc <MX_LPTIM1_Init+0x40>
  {
    Error_Handler();
 8004ec8:	f000 f9f0 	bl	80052ac <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	200002c0 	.word	0x200002c0
 8004ed8:	40007c00 	.word	0x40007c00
 8004edc:	0000ffff 	.word	0x0000ffff

08004ee0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004ee4:	4b16      	ldr	r3, [pc, #88]	; (8004f40 <MX_RTC_Init+0x60>)
 8004ee6:	4a17      	ldr	r2, [pc, #92]	; (8004f44 <MX_RTC_Init+0x64>)
 8004ee8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004eea:	4b15      	ldr	r3, [pc, #84]	; (8004f40 <MX_RTC_Init+0x60>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004ef0:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <MX_RTC_Init+0x60>)
 8004ef2:	227f      	movs	r2, #127	; 0x7f
 8004ef4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004ef6:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <MX_RTC_Init+0x60>)
 8004ef8:	22ff      	movs	r2, #255	; 0xff
 8004efa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <MX_RTC_Init+0x60>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004f02:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <MX_RTC_Init+0x60>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004f08:	4b0d      	ldr	r3, [pc, #52]	; (8004f40 <MX_RTC_Init+0x60>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <MX_RTC_Init+0x60>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <MX_RTC_Init+0x60>)
 8004f16:	0018      	movs	r0, r3
 8004f18:	f004 f884 	bl	8009024 <HAL_RTC_Init>
 8004f1c:	1e03      	subs	r3, r0, #0
 8004f1e:	d001      	beq.n	8004f24 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8004f20:	f000 f9c4 	bl	80052ac <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <MX_RTC_Init+0x60>)
 8004f26:	2204      	movs	r2, #4
 8004f28:	213c      	movs	r1, #60	; 0x3c
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f004 f96a 	bl	8009204 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004f30:	1e03      	subs	r3, r0, #0
 8004f32:	d001      	beq.n	8004f38 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8004f34:	f000 f9ba 	bl	80052ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004f38:	46c0      	nop			; (mov r8, r8)
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	200002f0 	.word	0x200002f0
 8004f44:	40002800 	.word	0x40002800

08004f48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004f4c:	4b18      	ldr	r3, [pc, #96]	; (8004fb0 <MX_SPI1_Init+0x68>)
 8004f4e:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <MX_SPI1_Init+0x6c>)
 8004f50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f52:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <MX_SPI1_Init+0x68>)
 8004f54:	2282      	movs	r2, #130	; 0x82
 8004f56:	0052      	lsls	r2, r2, #1
 8004f58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f5a:	4b15      	ldr	r3, [pc, #84]	; (8004fb0 <MX_SPI1_Init+0x68>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f60:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <MX_SPI1_Init+0x68>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f66:	4b12      	ldr	r3, [pc, #72]	; (8004fb0 <MX_SPI1_Init+0x68>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f6c:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <MX_SPI1_Init+0x68>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f72:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <MX_SPI1_Init+0x68>)
 8004f74:	2280      	movs	r2, #128	; 0x80
 8004f76:	0092      	lsls	r2, r2, #2
 8004f78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <MX_SPI1_Init+0x68>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f80:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <MX_SPI1_Init+0x68>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f86:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <MX_SPI1_Init+0x68>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f8c:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <MX_SPI1_Init+0x68>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004f92:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <MX_SPI1_Init+0x68>)
 8004f94:	2207      	movs	r2, #7
 8004f96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <MX_SPI1_Init+0x68>)
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f004 fa22 	bl	80093e4 <HAL_SPI_Init>
 8004fa0:	1e03      	subs	r3, r0, #0
 8004fa2:	d001      	beq.n	8004fa8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004fa4:	f000 f982 	bl	80052ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004fa8:	46c0      	nop			; (mov r8, r8)
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	20000314 	.word	0x20000314
 8004fb4:	40013000 	.word	0x40013000

08004fb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004fbc:	4b14      	ldr	r3, [pc, #80]	; (8005010 <MX_USART1_UART_Init+0x58>)
 8004fbe:	4a15      	ldr	r2, [pc, #84]	; (8005014 <MX_USART1_UART_Init+0x5c>)
 8004fc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004fc2:	4b13      	ldr	r3, [pc, #76]	; (8005010 <MX_USART1_UART_Init+0x58>)
 8004fc4:	22e1      	movs	r2, #225	; 0xe1
 8004fc6:	0252      	lsls	r2, r2, #9
 8004fc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004fca:	4b11      	ldr	r3, [pc, #68]	; (8005010 <MX_USART1_UART_Init+0x58>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004fd0:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <MX_USART1_UART_Init+0x58>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <MX_USART1_UART_Init+0x58>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004fdc:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <MX_USART1_UART_Init+0x58>)
 8004fde:	220c      	movs	r2, #12
 8004fe0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <MX_USART1_UART_Init+0x58>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fe8:	4b09      	ldr	r3, [pc, #36]	; (8005010 <MX_USART1_UART_Init+0x58>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fee:	4b08      	ldr	r3, [pc, #32]	; (8005010 <MX_USART1_UART_Init+0x58>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <MX_USART1_UART_Init+0x58>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <MX_USART1_UART_Init+0x58>)
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f004 fe77 	bl	8009cf0 <HAL_UART_Init>
 8005002:	1e03      	subs	r3, r0, #0
 8005004:	d001      	beq.n	800500a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005006:	f000 f951 	bl	80052ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	2000036c 	.word	0x2000036c
 8005014:	40013800 	.word	0x40013800

08005018 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <MX_WWDG_Init+0x3c>)
 800501e:	4a0e      	ldr	r2, [pc, #56]	; (8005058 <MX_WWDG_Init+0x40>)
 8005020:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 8005022:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <MX_WWDG_Init+0x3c>)
 8005024:	22c0      	movs	r2, #192	; 0xc0
 8005026:	0052      	lsls	r2, r2, #1
 8005028:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 127;
 800502a:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <MX_WWDG_Init+0x3c>)
 800502c:	227f      	movs	r2, #127	; 0x7f
 800502e:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 127;
 8005030:	4b08      	ldr	r3, [pc, #32]	; (8005054 <MX_WWDG_Init+0x3c>)
 8005032:	227f      	movs	r2, #127	; 0x7f
 8005034:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8005036:	4b07      	ldr	r3, [pc, #28]	; (8005054 <MX_WWDG_Init+0x3c>)
 8005038:	2200      	movs	r2, #0
 800503a:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <MX_WWDG_Init+0x3c>)
 800503e:	0018      	movs	r0, r3
 8005040:	f005 fe3d 	bl	800acbe <HAL_WWDG_Init>
 8005044:	1e03      	subs	r3, r0, #0
 8005046:	d001      	beq.n	800504c <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 8005048:	f000 f930 	bl	80052ac <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	20000438 	.word	0x20000438
 8005058:	40002c00 	.word	0x40002c00

0800505c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005062:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <MX_DMA_Init+0x48>)
 8005064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005066:	4b0f      	ldr	r3, [pc, #60]	; (80050a4 <MX_DMA_Init+0x48>)
 8005068:	2101      	movs	r1, #1
 800506a:	430a      	orrs	r2, r1
 800506c:	631a      	str	r2, [r3, #48]	; 0x30
 800506e:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <MX_DMA_Init+0x48>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	2201      	movs	r2, #1
 8005074:	4013      	ands	r3, r2
 8005076:	607b      	str	r3, [r7, #4]
 8005078:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800507a:	2200      	movs	r2, #0
 800507c:	2100      	movs	r1, #0
 800507e:	2009      	movs	r0, #9
 8005080:	f002 f85c 	bl	800713c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005084:	2009      	movs	r0, #9
 8005086:	f002 f86e 	bl	8007166 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800508a:	2200      	movs	r2, #0
 800508c:	2100      	movs	r1, #0
 800508e:	200a      	movs	r0, #10
 8005090:	f002 f854 	bl	800713c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8005094:	200a      	movs	r0, #10
 8005096:	f002 f866 	bl	8007166 <HAL_NVIC_EnableIRQ>

}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	46bd      	mov	sp, r7
 800509e:	b002      	add	sp, #8
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	40021000 	.word	0x40021000

080050a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80050a8:	b590      	push	{r4, r7, lr}
 80050aa:	b08b      	sub	sp, #44	; 0x2c
 80050ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ae:	2414      	movs	r4, #20
 80050b0:	193b      	adds	r3, r7, r4
 80050b2:	0018      	movs	r0, r3
 80050b4:	2314      	movs	r3, #20
 80050b6:	001a      	movs	r2, r3
 80050b8:	2100      	movs	r1, #0
 80050ba:	f005 fe66 	bl	800ad8a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050be:	4b76      	ldr	r3, [pc, #472]	; (8005298 <MX_GPIO_Init+0x1f0>)
 80050c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c2:	4b75      	ldr	r3, [pc, #468]	; (8005298 <MX_GPIO_Init+0x1f0>)
 80050c4:	2104      	movs	r1, #4
 80050c6:	430a      	orrs	r2, r1
 80050c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80050ca:	4b73      	ldr	r3, [pc, #460]	; (8005298 <MX_GPIO_Init+0x1f0>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	2204      	movs	r2, #4
 80050d0:	4013      	ands	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80050d6:	4b70      	ldr	r3, [pc, #448]	; (8005298 <MX_GPIO_Init+0x1f0>)
 80050d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050da:	4b6f      	ldr	r3, [pc, #444]	; (8005298 <MX_GPIO_Init+0x1f0>)
 80050dc:	2180      	movs	r1, #128	; 0x80
 80050de:	430a      	orrs	r2, r1
 80050e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80050e2:	4b6d      	ldr	r3, [pc, #436]	; (8005298 <MX_GPIO_Init+0x1f0>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	2280      	movs	r2, #128	; 0x80
 80050e8:	4013      	ands	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ee:	4b6a      	ldr	r3, [pc, #424]	; (8005298 <MX_GPIO_Init+0x1f0>)
 80050f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f2:	4b69      	ldr	r3, [pc, #420]	; (8005298 <MX_GPIO_Init+0x1f0>)
 80050f4:	2101      	movs	r1, #1
 80050f6:	430a      	orrs	r2, r1
 80050f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80050fa:	4b67      	ldr	r3, [pc, #412]	; (8005298 <MX_GPIO_Init+0x1f0>)
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	2201      	movs	r2, #1
 8005100:	4013      	ands	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]
 8005104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005106:	4b64      	ldr	r3, [pc, #400]	; (8005298 <MX_GPIO_Init+0x1f0>)
 8005108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510a:	4b63      	ldr	r3, [pc, #396]	; (8005298 <MX_GPIO_Init+0x1f0>)
 800510c:	2102      	movs	r1, #2
 800510e:	430a      	orrs	r2, r1
 8005110:	62da      	str	r2, [r3, #44]	; 0x2c
 8005112:	4b61      	ldr	r3, [pc, #388]	; (8005298 <MX_GPIO_Init+0x1f0>)
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	2202      	movs	r2, #2
 8005118:	4013      	ands	r3, r2
 800511a:	607b      	str	r3, [r7, #4]
 800511c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TempPower_Pin|RESET_Pin|NSS_Pin, GPIO_PIN_RESET);
 800511e:	23a0      	movs	r3, #160	; 0xa0
 8005120:	05db      	lsls	r3, r3, #23
 8005122:	2200      	movs	r2, #0
 8005124:	211a      	movs	r1, #26
 8005126:	0018      	movs	r0, r3
 8005128:	f002 fd29 	bl	8007b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_Pin|ORANGE_Pin, GPIO_PIN_RESET);
 800512c:	23c0      	movs	r3, #192	; 0xc0
 800512e:	019b      	lsls	r3, r3, #6
 8005130:	485a      	ldr	r0, [pc, #360]	; (800529c <MX_GPIO_Init+0x1f4>)
 8005132:	2200      	movs	r2, #0
 8005134:	0019      	movs	r1, r3
 8005136:	f002 fd22 	bl	8007b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800513a:	193b      	adds	r3, r7, r4
 800513c:	2280      	movs	r2, #128	; 0x80
 800513e:	0192      	lsls	r2, r2, #6
 8005140:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005142:	193b      	adds	r3, r7, r4
 8005144:	2203      	movs	r2, #3
 8005146:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005148:	193b      	adds	r3, r7, r4
 800514a:	2200      	movs	r2, #0
 800514c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800514e:	193b      	adds	r3, r7, r4
 8005150:	4a53      	ldr	r2, [pc, #332]	; (80052a0 <MX_GPIO_Init+0x1f8>)
 8005152:	0019      	movs	r1, r3
 8005154:	0010      	movs	r0, r2
 8005156:	f002 fb7f 	bl	8007858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800515a:	193b      	adds	r3, r7, r4
 800515c:	2203      	movs	r2, #3
 800515e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005160:	193b      	adds	r3, r7, r4
 8005162:	2203      	movs	r2, #3
 8005164:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005166:	193b      	adds	r3, r7, r4
 8005168:	2200      	movs	r2, #0
 800516a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800516c:	193b      	adds	r3, r7, r4
 800516e:	4a4d      	ldr	r2, [pc, #308]	; (80052a4 <MX_GPIO_Init+0x1fc>)
 8005170:	0019      	movs	r1, r3
 8005172:	0010      	movs	r0, r2
 8005174:	f002 fb70 	bl	8007858 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin extPower_Pin */
  GPIO_InitStruct.Pin = D1_Pin|extPower_Pin;
 8005178:	193b      	adds	r3, r7, r4
 800517a:	2202      	movs	r2, #2
 800517c:	32ff      	adds	r2, #255	; 0xff
 800517e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005180:	193b      	adds	r3, r7, r4
 8005182:	22c4      	movs	r2, #196	; 0xc4
 8005184:	0392      	lsls	r2, r2, #14
 8005186:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005188:	193b      	adds	r3, r7, r4
 800518a:	2202      	movs	r2, #2
 800518c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800518e:	193a      	adds	r2, r7, r4
 8005190:	23a0      	movs	r3, #160	; 0xa0
 8005192:	05db      	lsls	r3, r3, #23
 8005194:	0011      	movs	r1, r2
 8005196:	0018      	movs	r0, r3
 8005198:	f002 fb5e 	bl	8007858 <HAL_GPIO_Init>

  /*Configure GPIO pin : TempPower_Pin */
  GPIO_InitStruct.Pin = TempPower_Pin;
 800519c:	193b      	adds	r3, r7, r4
 800519e:	2202      	movs	r2, #2
 80051a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051a2:	193b      	adds	r3, r7, r4
 80051a4:	2201      	movs	r2, #1
 80051a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	193b      	adds	r3, r7, r4
 80051aa:	2200      	movs	r2, #0
 80051ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ae:	193b      	adds	r3, r7, r4
 80051b0:	2200      	movs	r2, #0
 80051b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TempPower_GPIO_Port, &GPIO_InitStruct);
 80051b4:	193a      	adds	r2, r7, r4
 80051b6:	23a0      	movs	r3, #160	; 0xa0
 80051b8:	05db      	lsls	r3, r3, #23
 80051ba:	0011      	movs	r1, r2
 80051bc:	0018      	movs	r0, r3
 80051be:	f002 fb4b 	bl	8007858 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin;
 80051c2:	193b      	adds	r3, r7, r4
 80051c4:	2218      	movs	r2, #24
 80051c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051c8:	193b      	adds	r3, r7, r4
 80051ca:	2201      	movs	r2, #1
 80051cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ce:	193b      	adds	r3, r7, r4
 80051d0:	2200      	movs	r2, #0
 80051d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051d4:	193b      	adds	r3, r7, r4
 80051d6:	2202      	movs	r2, #2
 80051d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051da:	193a      	adds	r2, r7, r4
 80051dc:	23a0      	movs	r3, #160	; 0xa0
 80051de:	05db      	lsls	r3, r3, #23
 80051e0:	0011      	movs	r1, r2
 80051e2:	0018      	movs	r0, r3
 80051e4:	f002 fb38 	bl	8007858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB14 PB15 PB3
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80051e8:	193b      	adds	r3, r7, r4
 80051ea:	4a2f      	ldr	r2, [pc, #188]	; (80052a8 <MX_GPIO_Init+0x200>)
 80051ec:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051ee:	193b      	adds	r3, r7, r4
 80051f0:	2203      	movs	r2, #3
 80051f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f4:	193b      	adds	r3, r7, r4
 80051f6:	2200      	movs	r2, #0
 80051f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051fa:	193b      	adds	r3, r7, r4
 80051fc:	4a27      	ldr	r2, [pc, #156]	; (800529c <MX_GPIO_Init+0x1f4>)
 80051fe:	0019      	movs	r1, r3
 8005200:	0010      	movs	r0, r2
 8005202:	f002 fb29 	bl	8007858 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUE_Pin ORANGE_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin|ORANGE_Pin;
 8005206:	0021      	movs	r1, r4
 8005208:	187b      	adds	r3, r7, r1
 800520a:	22c0      	movs	r2, #192	; 0xc0
 800520c:	0192      	lsls	r2, r2, #6
 800520e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005210:	000c      	movs	r4, r1
 8005212:	193b      	adds	r3, r7, r4
 8005214:	2201      	movs	r2, #1
 8005216:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005218:	193b      	adds	r3, r7, r4
 800521a:	2200      	movs	r2, #0
 800521c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800521e:	193b      	adds	r3, r7, r4
 8005220:	2200      	movs	r2, #0
 8005222:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005224:	193b      	adds	r3, r7, r4
 8005226:	4a1d      	ldr	r2, [pc, #116]	; (800529c <MX_GPIO_Init+0x1f4>)
 8005228:	0019      	movs	r1, r3
 800522a:	0010      	movs	r0, r2
 800522c:	f002 fb14 	bl	8007858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8005230:	193b      	adds	r3, r7, r4
 8005232:	2298      	movs	r2, #152	; 0x98
 8005234:	0212      	lsls	r2, r2, #8
 8005236:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005238:	193b      	adds	r3, r7, r4
 800523a:	2203      	movs	r2, #3
 800523c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523e:	193b      	adds	r3, r7, r4
 8005240:	2200      	movs	r2, #0
 8005242:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005244:	193a      	adds	r2, r7, r4
 8005246:	23a0      	movs	r3, #160	; 0xa0
 8005248:	05db      	lsls	r3, r3, #23
 800524a:	0011      	movs	r1, r2
 800524c:	0018      	movs	r0, r3
 800524e:	f002 fb03 	bl	8007858 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER1_Pin USER2_Pin */
  GPIO_InitStruct.Pin = USER1_Pin|USER2_Pin;
 8005252:	193b      	adds	r3, r7, r4
 8005254:	22c0      	movs	r2, #192	; 0xc0
 8005256:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005258:	193b      	adds	r3, r7, r4
 800525a:	2200      	movs	r2, #0
 800525c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800525e:	193b      	adds	r3, r7, r4
 8005260:	2201      	movs	r2, #1
 8005262:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005264:	193b      	adds	r3, r7, r4
 8005266:	4a0d      	ldr	r2, [pc, #52]	; (800529c <MX_GPIO_Init+0x1f4>)
 8005268:	0019      	movs	r1, r3
 800526a:	0010      	movs	r0, r2
 800526c:	f002 faf4 	bl	8007858 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8005270:	2200      	movs	r2, #0
 8005272:	2101      	movs	r1, #1
 8005274:	2005      	movs	r0, #5
 8005276:	f001 ff61 	bl	800713c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800527a:	2005      	movs	r0, #5
 800527c:	f001 ff73 	bl	8007166 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8005280:	2200      	movs	r2, #0
 8005282:	2101      	movs	r1, #1
 8005284:	2007      	movs	r0, #7
 8005286:	f001 ff59 	bl	800713c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800528a:	2007      	movs	r0, #7
 800528c:	f001 ff6b 	bl	8007166 <HAL_NVIC_EnableIRQ>

}
 8005290:	46c0      	nop			; (mov r8, r8)
 8005292:	46bd      	mov	sp, r7
 8005294:	b00b      	add	sp, #44	; 0x2c
 8005296:	bd90      	pop	{r4, r7, pc}
 8005298:	40021000 	.word	0x40021000
 800529c:	50000400 	.word	0x50000400
 80052a0:	50000800 	.word	0x50000800
 80052a4:	50001c00 	.word	0x50001c00
 80052a8:	0000cf3f 	.word	0x0000cf3f

080052ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	debugLog("Error!");
 80052b0:	4b03      	ldr	r3, [pc, #12]	; (80052c0 <Error_Handler+0x14>)
 80052b2:	0018      	movs	r0, r3
 80052b4:	f7fe f92c 	bl	8003510 <debugLog>
  /* USER CODE END Error_Handler_Debug */
}
 80052b8:	46c0      	nop			; (mov r8, r8)
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	0800e3a8 	.word	0x0800e3a8

080052c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052c8:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <HAL_MspInit+0x24>)
 80052ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <HAL_MspInit+0x24>)
 80052ce:	2101      	movs	r1, #1
 80052d0:	430a      	orrs	r2, r1
 80052d2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80052d4:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <HAL_MspInit+0x24>)
 80052d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <HAL_MspInit+0x24>)
 80052da:	2180      	movs	r1, #128	; 0x80
 80052dc:	0549      	lsls	r1, r1, #21
 80052de:	430a      	orrs	r2, r1
 80052e0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40021000 	.word	0x40021000

080052ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80052ec:	b590      	push	{r4, r7, lr}
 80052ee:	b089      	sub	sp, #36	; 0x24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f4:	240c      	movs	r4, #12
 80052f6:	193b      	adds	r3, r7, r4
 80052f8:	0018      	movs	r0, r3
 80052fa:	2314      	movs	r3, #20
 80052fc:	001a      	movs	r2, r3
 80052fe:	2100      	movs	r1, #0
 8005300:	f005 fd43 	bl	800ad8a <memset>
  if(hadc->Instance==ADC1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a2a      	ldr	r2, [pc, #168]	; (80053b4 <HAL_ADC_MspInit+0xc8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d14d      	bne.n	80053aa <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800530e:	4b2a      	ldr	r3, [pc, #168]	; (80053b8 <HAL_ADC_MspInit+0xcc>)
 8005310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005312:	4b29      	ldr	r3, [pc, #164]	; (80053b8 <HAL_ADC_MspInit+0xcc>)
 8005314:	2180      	movs	r1, #128	; 0x80
 8005316:	0089      	lsls	r1, r1, #2
 8005318:	430a      	orrs	r2, r1
 800531a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800531c:	4b26      	ldr	r3, [pc, #152]	; (80053b8 <HAL_ADC_MspInit+0xcc>)
 800531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005320:	4b25      	ldr	r3, [pc, #148]	; (80053b8 <HAL_ADC_MspInit+0xcc>)
 8005322:	2101      	movs	r1, #1
 8005324:	430a      	orrs	r2, r1
 8005326:	62da      	str	r2, [r3, #44]	; 0x2c
 8005328:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <HAL_ADC_MspInit+0xcc>)
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	2201      	movs	r2, #1
 800532e:	4013      	ands	r3, r2
 8005330:	60bb      	str	r3, [r7, #8]
 8005332:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = TempSensor_Pin;
 8005334:	193b      	adds	r3, r7, r4
 8005336:	2204      	movs	r2, #4
 8005338:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800533a:	193b      	adds	r3, r7, r4
 800533c:	2203      	movs	r2, #3
 800533e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005340:	193b      	adds	r3, r7, r4
 8005342:	2200      	movs	r2, #0
 8005344:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(TempSensor_GPIO_Port, &GPIO_InitStruct);
 8005346:	193a      	adds	r2, r7, r4
 8005348:	23a0      	movs	r3, #160	; 0xa0
 800534a:	05db      	lsls	r3, r3, #23
 800534c:	0011      	movs	r1, r2
 800534e:	0018      	movs	r0, r3
 8005350:	f002 fa82 	bl	8007858 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8005354:	4b19      	ldr	r3, [pc, #100]	; (80053bc <HAL_ADC_MspInit+0xd0>)
 8005356:	4a1a      	ldr	r2, [pc, #104]	; (80053c0 <HAL_ADC_MspInit+0xd4>)
 8005358:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800535a:	4b18      	ldr	r3, [pc, #96]	; (80053bc <HAL_ADC_MspInit+0xd0>)
 800535c:	2200      	movs	r2, #0
 800535e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005360:	4b16      	ldr	r3, [pc, #88]	; (80053bc <HAL_ADC_MspInit+0xd0>)
 8005362:	2200      	movs	r2, #0
 8005364:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8005366:	4b15      	ldr	r3, [pc, #84]	; (80053bc <HAL_ADC_MspInit+0xd0>)
 8005368:	2200      	movs	r2, #0
 800536a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800536c:	4b13      	ldr	r3, [pc, #76]	; (80053bc <HAL_ADC_MspInit+0xd0>)
 800536e:	2280      	movs	r2, #128	; 0x80
 8005370:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005372:	4b12      	ldr	r3, [pc, #72]	; (80053bc <HAL_ADC_MspInit+0xd0>)
 8005374:	2280      	movs	r2, #128	; 0x80
 8005376:	0052      	lsls	r2, r2, #1
 8005378:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800537a:	4b10      	ldr	r3, [pc, #64]	; (80053bc <HAL_ADC_MspInit+0xd0>)
 800537c:	2280      	movs	r2, #128	; 0x80
 800537e:	00d2      	lsls	r2, r2, #3
 8005380:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8005382:	4b0e      	ldr	r3, [pc, #56]	; (80053bc <HAL_ADC_MspInit+0xd0>)
 8005384:	2200      	movs	r2, #0
 8005386:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8005388:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <HAL_ADC_MspInit+0xd0>)
 800538a:	2200      	movs	r2, #0
 800538c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800538e:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_ADC_MspInit+0xd0>)
 8005390:	0018      	movs	r0, r3
 8005392:	f001 ff05 	bl	80071a0 <HAL_DMA_Init>
 8005396:	1e03      	subs	r3, r0, #0
 8005398:	d001      	beq.n	800539e <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800539a:	f7ff ff87 	bl	80052ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a06      	ldr	r2, [pc, #24]	; (80053bc <HAL_ADC_MspInit+0xd0>)
 80053a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80053a4:	4b05      	ldr	r3, [pc, #20]	; (80053bc <HAL_ADC_MspInit+0xd0>)
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b009      	add	sp, #36	; 0x24
 80053b0:	bd90      	pop	{r4, r7, pc}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	40012400 	.word	0x40012400
 80053b8:	40021000 	.word	0x40021000
 80053bc:	20000278 	.word	0x20000278
 80053c0:	40020008 	.word	0x40020008

080053c4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <HAL_LPTIM_MspInit+0x38>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d10e      	bne.n	80053f4 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <HAL_LPTIM_MspInit+0x3c>)
 80053d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <HAL_LPTIM_MspInit+0x3c>)
 80053dc:	2180      	movs	r1, #128	; 0x80
 80053de:	0609      	lsls	r1, r1, #24
 80053e0:	430a      	orrs	r2, r1
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);
 80053e4:	2200      	movs	r2, #0
 80053e6:	2101      	movs	r1, #1
 80053e8:	200d      	movs	r0, #13
 80053ea:	f001 fea7 	bl	800713c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80053ee:	200d      	movs	r0, #13
 80053f0:	f001 feb9 	bl	8007166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80053f4:	46c0      	nop			; (mov r8, r8)
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b002      	add	sp, #8
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	40007c00 	.word	0x40007c00
 8005400:	40021000 	.word	0x40021000

08005404 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a0a      	ldr	r2, [pc, #40]	; (800543c <HAL_RTC_MspInit+0x38>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d10e      	bne.n	8005434 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005416:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <HAL_RTC_MspInit+0x3c>)
 8005418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800541a:	4b09      	ldr	r3, [pc, #36]	; (8005440 <HAL_RTC_MspInit+0x3c>)
 800541c:	2180      	movs	r1, #128	; 0x80
 800541e:	02c9      	lsls	r1, r1, #11
 8005420:	430a      	orrs	r2, r1
 8005422:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8005424:	2200      	movs	r2, #0
 8005426:	2100      	movs	r1, #0
 8005428:	2002      	movs	r0, #2
 800542a:	f001 fe87 	bl	800713c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800542e:	2002      	movs	r0, #2
 8005430:	f001 fe99 	bl	8007166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005434:	46c0      	nop			; (mov r8, r8)
 8005436:	46bd      	mov	sp, r7
 8005438:	b002      	add	sp, #8
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40002800 	.word	0x40002800
 8005440:	40021000 	.word	0x40021000

08005444 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005444:	b590      	push	{r4, r7, lr}
 8005446:	b089      	sub	sp, #36	; 0x24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800544c:	240c      	movs	r4, #12
 800544e:	193b      	adds	r3, r7, r4
 8005450:	0018      	movs	r0, r3
 8005452:	2314      	movs	r3, #20
 8005454:	001a      	movs	r2, r3
 8005456:	2100      	movs	r1, #0
 8005458:	f005 fc97 	bl	800ad8a <memset>
  if(hspi->Instance==SPI1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <HAL_SPI_MspInit+0x80>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d129      	bne.n	80054ba <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005466:	4b18      	ldr	r3, [pc, #96]	; (80054c8 <HAL_SPI_MspInit+0x84>)
 8005468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800546a:	4b17      	ldr	r3, [pc, #92]	; (80054c8 <HAL_SPI_MspInit+0x84>)
 800546c:	2180      	movs	r1, #128	; 0x80
 800546e:	0149      	lsls	r1, r1, #5
 8005470:	430a      	orrs	r2, r1
 8005472:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005474:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <HAL_SPI_MspInit+0x84>)
 8005476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005478:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <HAL_SPI_MspInit+0x84>)
 800547a:	2101      	movs	r1, #1
 800547c:	430a      	orrs	r2, r1
 800547e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005480:	4b11      	ldr	r3, [pc, #68]	; (80054c8 <HAL_SPI_MspInit+0x84>)
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	2201      	movs	r2, #1
 8005486:	4013      	ands	r3, r2
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800548c:	0021      	movs	r1, r4
 800548e:	187b      	adds	r3, r7, r1
 8005490:	22e0      	movs	r2, #224	; 0xe0
 8005492:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005494:	187b      	adds	r3, r7, r1
 8005496:	2202      	movs	r2, #2
 8005498:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549a:	187b      	adds	r3, r7, r1
 800549c:	2200      	movs	r2, #0
 800549e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a0:	187b      	adds	r3, r7, r1
 80054a2:	2203      	movs	r2, #3
 80054a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80054a6:	187b      	adds	r3, r7, r1
 80054a8:	2200      	movs	r2, #0
 80054aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ac:	187a      	adds	r2, r7, r1
 80054ae:	23a0      	movs	r3, #160	; 0xa0
 80054b0:	05db      	lsls	r3, r3, #23
 80054b2:	0011      	movs	r1, r2
 80054b4:	0018      	movs	r0, r3
 80054b6:	f002 f9cf 	bl	8007858 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	46bd      	mov	sp, r7
 80054be:	b009      	add	sp, #36	; 0x24
 80054c0:	bd90      	pop	{r4, r7, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	40013000 	.word	0x40013000
 80054c8:	40021000 	.word	0x40021000

080054cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b089      	sub	sp, #36	; 0x24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d4:	240c      	movs	r4, #12
 80054d6:	193b      	adds	r3, r7, r4
 80054d8:	0018      	movs	r0, r3
 80054da:	2314      	movs	r3, #20
 80054dc:	001a      	movs	r2, r3
 80054de:	2100      	movs	r1, #0
 80054e0:	f005 fc53 	bl	800ad8a <memset>
  if(huart->Instance==USART1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a2d      	ldr	r2, [pc, #180]	; (80055a0 <HAL_UART_MspInit+0xd4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d153      	bne.n	8005596 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80054ee:	4b2d      	ldr	r3, [pc, #180]	; (80055a4 <HAL_UART_MspInit+0xd8>)
 80054f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f2:	4b2c      	ldr	r3, [pc, #176]	; (80055a4 <HAL_UART_MspInit+0xd8>)
 80054f4:	2180      	movs	r1, #128	; 0x80
 80054f6:	01c9      	lsls	r1, r1, #7
 80054f8:	430a      	orrs	r2, r1
 80054fa:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054fc:	4b29      	ldr	r3, [pc, #164]	; (80055a4 <HAL_UART_MspInit+0xd8>)
 80054fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005500:	4b28      	ldr	r3, [pc, #160]	; (80055a4 <HAL_UART_MspInit+0xd8>)
 8005502:	2101      	movs	r1, #1
 8005504:	430a      	orrs	r2, r1
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c
 8005508:	4b26      	ldr	r3, [pc, #152]	; (80055a4 <HAL_UART_MspInit+0xd8>)
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	2201      	movs	r2, #1
 800550e:	4013      	ands	r3, r2
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005514:	193b      	adds	r3, r7, r4
 8005516:	22c0      	movs	r2, #192	; 0xc0
 8005518:	00d2      	lsls	r2, r2, #3
 800551a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800551c:	0021      	movs	r1, r4
 800551e:	187b      	adds	r3, r7, r1
 8005520:	2202      	movs	r2, #2
 8005522:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005524:	187b      	adds	r3, r7, r1
 8005526:	2200      	movs	r2, #0
 8005528:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800552a:	187b      	adds	r3, r7, r1
 800552c:	2203      	movs	r2, #3
 800552e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8005530:	187b      	adds	r3, r7, r1
 8005532:	2204      	movs	r2, #4
 8005534:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005536:	187a      	adds	r2, r7, r1
 8005538:	23a0      	movs	r3, #160	; 0xa0
 800553a:	05db      	lsls	r3, r3, #23
 800553c:	0011      	movs	r1, r2
 800553e:	0018      	movs	r0, r3
 8005540:	f002 f98a 	bl	8007858 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8005544:	4b18      	ldr	r3, [pc, #96]	; (80055a8 <HAL_UART_MspInit+0xdc>)
 8005546:	4a19      	ldr	r2, [pc, #100]	; (80055ac <HAL_UART_MspInit+0xe0>)
 8005548:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 800554a:	4b17      	ldr	r3, [pc, #92]	; (80055a8 <HAL_UART_MspInit+0xdc>)
 800554c:	2203      	movs	r2, #3
 800554e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005550:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <HAL_UART_MspInit+0xdc>)
 8005552:	2200      	movs	r2, #0
 8005554:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005556:	4b14      	ldr	r3, [pc, #80]	; (80055a8 <HAL_UART_MspInit+0xdc>)
 8005558:	2200      	movs	r2, #0
 800555a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800555c:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <HAL_UART_MspInit+0xdc>)
 800555e:	2280      	movs	r2, #128	; 0x80
 8005560:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005562:	4b11      	ldr	r3, [pc, #68]	; (80055a8 <HAL_UART_MspInit+0xdc>)
 8005564:	2200      	movs	r2, #0
 8005566:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005568:	4b0f      	ldr	r3, [pc, #60]	; (80055a8 <HAL_UART_MspInit+0xdc>)
 800556a:	2200      	movs	r2, #0
 800556c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800556e:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <HAL_UART_MspInit+0xdc>)
 8005570:	2220      	movs	r2, #32
 8005572:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005574:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <HAL_UART_MspInit+0xdc>)
 8005576:	2200      	movs	r2, #0
 8005578:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <HAL_UART_MspInit+0xdc>)
 800557c:	0018      	movs	r0, r3
 800557e:	f001 fe0f 	bl	80071a0 <HAL_DMA_Init>
 8005582:	1e03      	subs	r3, r0, #0
 8005584:	d001      	beq.n	800558a <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8005586:	f7ff fe91 	bl	80052ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a06      	ldr	r2, [pc, #24]	; (80055a8 <HAL_UART_MspInit+0xdc>)
 800558e:	671a      	str	r2, [r3, #112]	; 0x70
 8005590:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <HAL_UART_MspInit+0xdc>)
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	46bd      	mov	sp, r7
 800559a:	b009      	add	sp, #36	; 0x24
 800559c:	bd90      	pop	{r4, r7, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	40013800 	.word	0x40013800
 80055a4:	40021000 	.word	0x40021000
 80055a8:	200003f0 	.word	0x200003f0
 80055ac:	40020030 	.word	0x40020030

080055b0 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a06      	ldr	r2, [pc, #24]	; (80055d8 <HAL_WWDG_MspInit+0x28>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d106      	bne.n	80055d0 <HAL_WWDG_MspInit+0x20>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 80055c2:	4b06      	ldr	r3, [pc, #24]	; (80055dc <HAL_WWDG_MspInit+0x2c>)
 80055c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c6:	4b05      	ldr	r3, [pc, #20]	; (80055dc <HAL_WWDG_MspInit+0x2c>)
 80055c8:	2180      	movs	r1, #128	; 0x80
 80055ca:	0109      	lsls	r1, r1, #4
 80055cc:	430a      	orrs	r2, r1
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 80055d0:	46c0      	nop			; (mov r8, r8)
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b002      	add	sp, #8
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40002c00 	.word	0x40002c00
 80055dc:	40021000 	.word	0x40021000

080055e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80055e4:	e7fe      	b.n	80055e4 <NMI_Handler+0x4>

080055e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055ea:	e7fe      	b.n	80055ea <HardFault_Handler+0x4>

080055ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80055f0:	46c0      	nop			; (mov r8, r8)
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005604:	f001 f886 	bl	8006714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005608:	46c0      	nop			; (mov r8, r8)
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8005614:	4b03      	ldr	r3, [pc, #12]	; (8005624 <RTC_IRQHandler+0x14>)
 8005616:	0018      	movs	r0, r3
 8005618:	f003 feba 	bl	8009390 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800561c:	46c0      	nop			; (mov r8, r8)
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	200002f0 	.word	0x200002f0

08005628 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D1_Pin);
 800562c:	2001      	movs	r0, #1
 800562e:	f002 fac3 	bl	8007bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(extPower_Pin);
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	0018      	movs	r0, r3
 8005642:	f002 fab9 	bl	8007bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8005650:	4b03      	ldr	r3, [pc, #12]	; (8005660 <DMA1_Channel1_IRQHandler+0x14>)
 8005652:	0018      	movs	r0, r3
 8005654:	f001 fe82 	bl	800735c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005658:	46c0      	nop			; (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	20000278 	.word	0x20000278

08005664 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005668:	4b03      	ldr	r3, [pc, #12]	; (8005678 <DMA1_Channel2_3_IRQHandler+0x14>)
 800566a:	0018      	movs	r0, r3
 800566c:	f001 fe76 	bl	800735c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005670:	46c0      	nop			; (mov r8, r8)
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	200003f0 	.word	0x200003f0

0800567c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8005680:	4b03      	ldr	r3, [pc, #12]	; (8005690 <LPTIM1_IRQHandler+0x14>)
 8005682:	0018      	movs	r0, r3
 8005684:	f002 fbc0 	bl	8007e08 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8005688:	46c0      	nop			; (mov r8, r8)
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	200002c0 	.word	0x200002c0

08005694 <SX127X_SetNSS>:
 */
#include "main.h"

#ifndef USE_LL
__weak void SX127X_SetNSS(SX127X_t *module, GPIO_PinState state)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	000a      	movs	r2, r1
 800569e:	1cfb      	adds	r3, r7, #3
 80056a0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(module->nss.port, module->nss.pin, state);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056aa:	b299      	uxth	r1, r3
 80056ac:	1cfb      	adds	r3, r7, #3
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	001a      	movs	r2, r3
 80056b2:	f002 fa64 	bl	8007b7e <HAL_GPIO_WritePin>
}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	46bd      	mov	sp, r7
 80056ba:	b002      	add	sp, #8
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <SX127X_Reset>:

__weak void SX127X_Reset(SX127X_t *module)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
	SX127X_SetNSS(module, 1);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2101      	movs	r1, #1
 80056cc:	0018      	movs	r0, r3
 80056ce:	f7ff ffe1 	bl	8005694 <SX127X_SetNSS>
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_RESET);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2200      	movs	r2, #0
 80056de:	0019      	movs	r1, r3
 80056e0:	f002 fa4d 	bl	8007b7e <HAL_GPIO_WritePin>

	SX127X_delayMicro(1000);
 80056e4:	23fa      	movs	r3, #250	; 0xfa
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	0018      	movs	r0, r3
 80056ea:	f000 fcc1 	bl	8006070 <SX127X_delayMicro>

	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2201      	movs	r2, #1
 80056fa:	0019      	movs	r1, r3
 80056fc:	f002 fa3f 	bl	8007b7e <HAL_GPIO_WritePin>

	SX127X_delayMicro(6000);
 8005700:	4b03      	ldr	r3, [pc, #12]	; (8005710 <SX127X_Reset+0x50>)
 8005702:	0018      	movs	r0, r3
 8005704:	f000 fcb4 	bl	8006070 <SX127X_delayMicro>
}
 8005708:	46c0      	nop			; (mov r8, r8)
 800570a:	46bd      	mov	sp, r7
 800570c:	b002      	add	sp, #8
 800570e:	bd80      	pop	{r7, pc}
 8005710:	00001770 	.word	0x00001770

08005714 <SX127X_SPICommand>:

__weak void SX127X_SPICommand(SX127X_t *module, uint8_t cmd)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	000a      	movs	r2, r1
 800571e:	1cfb      	adds	r3, r7, #3
 8005720:	701a      	strb	r2, [r3, #0]
	SX127X_SetNSS(module, 0);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2100      	movs	r1, #0
 8005726:	0018      	movs	r0, r3
 8005728:	f7ff ffb4 	bl	8005694 <SX127X_SetNSS>
	HAL_SPI_Transmit(module->spi, &cmd, 1, 1000);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005730:	23fa      	movs	r3, #250	; 0xfa
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	1cf9      	adds	r1, r7, #3
 8005736:	2201      	movs	r2, #1
 8005738:	f003 fee8 	bl	800950c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->spi) != HAL_SPI_STATE_READY)
 800573c:	46c0      	nop			; (mov r8, r8)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005742:	0018      	movs	r0, r3
 8005744:	f004 f9f3 	bl	8009b2e <HAL_SPI_GetState>
 8005748:	0003      	movs	r3, r0
 800574a:	2b01      	cmp	r3, #1
 800574c:	d1f7      	bne.n	800573e <SX127X_SPICommand+0x2a>
		;
}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	46c0      	nop			; (mov r8, r8)
 8005752:	46bd      	mov	sp, r7
 8005754:	b002      	add	sp, #8
 8005756:	bd80      	pop	{r7, pc}

08005758 <SX127X_SPIReadByte>:

__weak uint8_t SX127X_SPIReadByte(SX127X_t *module)
{
 8005758:	b5b0      	push	{r4, r5, r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af02      	add	r7, sp, #8
 800575e:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8005760:	250f      	movs	r5, #15
 8005762:	197b      	adds	r3, r7, r5
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
	uint8_t rxByte = 0x00;
 8005768:	240e      	movs	r4, #14
 800576a:	193b      	adds	r3, r7, r4
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]

	SX127X_SetNSS(module, 0);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2100      	movs	r1, #0
 8005774:	0018      	movs	r0, r3
 8005776:	f7ff ff8d 	bl	8005694 <SX127X_SetNSS>
	HAL_SPI_TransmitReceive(module->spi, &txByte, &rxByte, 1, 1000);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800577e:	193a      	adds	r2, r7, r4
 8005780:	1979      	adds	r1, r7, r5
 8005782:	23fa      	movs	r3, #250	; 0xfa
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	2301      	movs	r3, #1
 800578a:	f004 f815 	bl	80097b8 <HAL_SPI_TransmitReceive>
	return rxByte;
 800578e:	193b      	adds	r3, r7, r4
 8005790:	781b      	ldrb	r3, [r3, #0]
}
 8005792:	0018      	movs	r0, r3
 8005794:	46bd      	mov	sp, r7
 8005796:	b004      	add	sp, #16
 8005798:	bdb0      	pop	{r4, r5, r7, pc}

0800579a <SX127X_SPIRead>:
//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX127X_SPIRead(SX127X_t *module, uint8_t addr)
{
 800579a:	b5b0      	push	{r4, r5, r7, lr}
 800579c:	b084      	sub	sp, #16
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	000a      	movs	r2, r1
 80057a4:	1cfb      	adds	r3, r7, #3
 80057a6:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	SX127X_SPICommand(module, addr);
 80057a8:	1cfb      	adds	r3, r7, #3
 80057aa:	781a      	ldrb	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	0011      	movs	r1, r2
 80057b0:	0018      	movs	r0, r3
 80057b2:	f7ff ffaf 	bl	8005714 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 80057b6:	250f      	movs	r5, #15
 80057b8:	197c      	adds	r4, r7, r5
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	0018      	movs	r0, r3
 80057be:	f7ff ffcb 	bl	8005758 <SX127X_SPIReadByte>
 80057c2:	0003      	movs	r3, r0
 80057c4:	7023      	strb	r3, [r4, #0]
	SX127X_SetNSS(module, 1);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2101      	movs	r1, #1
 80057ca:	0018      	movs	r0, r3
 80057cc:	f7ff ff62 	bl	8005694 <SX127X_SetNSS>
	return tmp;
 80057d0:	197b      	adds	r3, r7, r5
 80057d2:	781b      	ldrb	r3, [r3, #0]
}
 80057d4:	0018      	movs	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	b004      	add	sp, #16
 80057da:	bdb0      	pop	{r4, r5, r7, pc}

080057dc <SX127X_SPIWrite>:

void SX127X_SPIWrite(SX127X_t *module, uint8_t addr, uint8_t cmd)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	0008      	movs	r0, r1
 80057e6:	0011      	movs	r1, r2
 80057e8:	1cfb      	adds	r3, r7, #3
 80057ea:	1c02      	adds	r2, r0, #0
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	1cbb      	adds	r3, r7, #2
 80057f0:	1c0a      	adds	r2, r1, #0
 80057f2:	701a      	strb	r2, [r3, #0]
	SX127X_SetNSS(module, 0);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2100      	movs	r1, #0
 80057f8:	0018      	movs	r0, r3
 80057fa:	f7ff ff4b 	bl	8005694 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 80057fe:	1cfb      	adds	r3, r7, #3
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2280      	movs	r2, #128	; 0x80
 8005804:	4252      	negs	r2, r2
 8005806:	4313      	orrs	r3, r2
 8005808:	b2da      	uxtb	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	0011      	movs	r1, r2
 800580e:	0018      	movs	r0, r3
 8005810:	f7ff ff80 	bl	8005714 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005814:	1cbb      	adds	r3, r7, #2
 8005816:	781a      	ldrb	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	0011      	movs	r1, r2
 800581c:	0018      	movs	r0, r3
 800581e:	f7ff ff79 	bl	8005714 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2101      	movs	r1, #1
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff ff34 	bl	8005694 <SX127X_SetNSS>
}
 800582c:	46c0      	nop			; (mov r8, r8)
 800582e:	46bd      	mov	sp, r7
 8005830:	b002      	add	sp, #8
 8005832:	bd80      	pop	{r7, pc}

08005834 <SX127X_SPIBurstRead>:

void SX127X_SPIBurstRead(SX127X_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length)
{
 8005834:	b5b0      	push	{r4, r5, r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	0008      	movs	r0, r1
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	0019      	movs	r1, r3
 8005842:	240b      	movs	r4, #11
 8005844:	193b      	adds	r3, r7, r4
 8005846:	1c02      	adds	r2, r0, #0
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	200a      	movs	r0, #10
 800584c:	183b      	adds	r3, r7, r0
 800584e:	1c0a      	adds	r2, r1, #0
 8005850:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	if (length <= 1)
 8005852:	183b      	adds	r3, r7, r0
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d92e      	bls.n	80058b8 <SX127X_SPIBurstRead+0x84>
		return;
	else
	{
		SX127X_SetNSS(module, 0);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2100      	movs	r1, #0
 800585e:	0018      	movs	r0, r3
 8005860:	f7ff ff18 	bl	8005694 <SX127X_SetNSS>
		SX127X_SPICommand(module, addr);
 8005864:	193b      	adds	r3, r7, r4
 8005866:	781a      	ldrb	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	0011      	movs	r1, r2
 800586c:	0018      	movs	r0, r3
 800586e:	f7ff ff51 	bl	8005714 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 8005872:	2317      	movs	r3, #23
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	e00f      	b.n	800589c <SX127X_SPIBurstRead+0x68>
		{
			*(rxBuf + i) = SX127X_SPIReadByte(module);
 800587c:	2517      	movs	r5, #23
 800587e:	197b      	adds	r3, r7, r5
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	18d4      	adds	r4, r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	0018      	movs	r0, r3
 800588a:	f7ff ff65 	bl	8005758 <SX127X_SPIReadByte>
 800588e:	0003      	movs	r3, r0
 8005890:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++)
 8005892:	197b      	adds	r3, r7, r5
 8005894:	781a      	ldrb	r2, [r3, #0]
 8005896:	197b      	adds	r3, r7, r5
 8005898:	3201      	adds	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	2317      	movs	r3, #23
 800589e:	18fa      	adds	r2, r7, r3
 80058a0:	230a      	movs	r3, #10
 80058a2:	18fb      	adds	r3, r7, r3
 80058a4:	7812      	ldrb	r2, [r2, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d3e7      	bcc.n	800587c <SX127X_SPIBurstRead+0x48>
		}
		SX127X_SetNSS(module, 1);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2101      	movs	r1, #1
 80058b0:	0018      	movs	r0, r3
 80058b2:	f7ff feef 	bl	8005694 <SX127X_SetNSS>
 80058b6:	e000      	b.n	80058ba <SX127X_SPIBurstRead+0x86>
		return;
 80058b8:	46c0      	nop			; (mov r8, r8)
	}
}
 80058ba:	46bd      	mov	sp, r7
 80058bc:	b006      	add	sp, #24
 80058be:	bdb0      	pop	{r4, r5, r7, pc}

080058c0 <SX127X_SPIBurstWrite>:

void SX127X_SPIBurstWrite(SX127X_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length)
{
 80058c0:	b590      	push	{r4, r7, lr}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	0008      	movs	r0, r1
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	0019      	movs	r1, r3
 80058ce:	240b      	movs	r4, #11
 80058d0:	193b      	adds	r3, r7, r4
 80058d2:	1c02      	adds	r2, r0, #0
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	200a      	movs	r0, #10
 80058d8:	183b      	adds	r3, r7, r0
 80058da:	1c0a      	adds	r2, r1, #0
 80058dc:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	if (length <= 1)
 80058de:	183b      	adds	r3, r7, r0
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d932      	bls.n	800594c <SX127X_SPIBurstWrite+0x8c>
		return;
	else
	{
		SX127X_SetNSS(module, 0);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2100      	movs	r1, #0
 80058ea:	0018      	movs	r0, r3
 80058ec:	f7ff fed2 	bl	8005694 <SX127X_SetNSS>
		SX127X_SPICommand(module, addr | 0x80);
 80058f0:	193b      	adds	r3, r7, r4
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2280      	movs	r2, #128	; 0x80
 80058f6:	4252      	negs	r2, r2
 80058f8:	4313      	orrs	r3, r2
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	0011      	movs	r1, r2
 8005900:	0018      	movs	r0, r3
 8005902:	f7ff ff07 	bl	8005714 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 8005906:	2317      	movs	r3, #23
 8005908:	18fb      	adds	r3, r7, r3
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e00f      	b.n	8005930 <SX127X_SPIBurstWrite+0x70>
		{
			SX127X_SPICommand(module, *(txBuf + i));
 8005910:	2417      	movs	r4, #23
 8005912:	193b      	adds	r3, r7, r4
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	18d3      	adds	r3, r2, r3
 800591a:	781a      	ldrb	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	0011      	movs	r1, r2
 8005920:	0018      	movs	r0, r3
 8005922:	f7ff fef7 	bl	8005714 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 8005926:	193b      	adds	r3, r7, r4
 8005928:	781a      	ldrb	r2, [r3, #0]
 800592a:	193b      	adds	r3, r7, r4
 800592c:	3201      	adds	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	2317      	movs	r3, #23
 8005932:	18fa      	adds	r2, r7, r3
 8005934:	230a      	movs	r3, #10
 8005936:	18fb      	adds	r3, r7, r3
 8005938:	7812      	ldrb	r2, [r2, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d3e7      	bcc.n	8005910 <SX127X_SPIBurstWrite+0x50>
		}
		SX127X_SetNSS(module, 1);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2101      	movs	r1, #1
 8005944:	0018      	movs	r0, r3
 8005946:	f7ff fea5 	bl	8005694 <SX127X_SetNSS>
 800594a:	e000      	b.n	800594e <SX127X_SPIBurstWrite+0x8e>
		return;
 800594c:	46c0      	nop			; (mov r8, r8)
	}
}
 800594e:	46bd      	mov	sp, r7
 8005950:	b007      	add	sp, #28
 8005952:	bd90      	pop	{r4, r7, pc}

08005954 <SX127X_config>:

void SX127X_config(SX127X_t *module)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
	SX127X_sleep(module); //Change modem mode Must in Sleep mode
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	0018      	movs	r0, r3
 8005960:	f000 f94c 	bl	8005bfc <SX127X_sleep>

	SX127X_SPIWrite(module, LR_RegFrMsb, (module->frequency >> 16) & 0xFF);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	0c1b      	lsrs	r3, r3, #16
 800596a:	b2da      	uxtb	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2106      	movs	r1, #6
 8005970:	0018      	movs	r0, r3
 8005972:	f7ff ff33 	bl	80057dc <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegFrMid, (module->frequency >> 8) & 0xFF);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	b2da      	uxtb	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2107      	movs	r1, #7
 8005982:	0018      	movs	r0, r3
 8005984:	f7ff ff2a 	bl	80057dc <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegFrLsb, (module->frequency) & 0xFF);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	b2da      	uxtb	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2108      	movs	r1, #8
 8005992:	0018      	movs	r0, r3
 8005994:	f7ff ff22 	bl	80057dc <SX127X_SPIWrite>

	//setting base parameter
	SX127X_SPIWrite(module, LR_RegPaConfig, 0xF0 | (module->power - 5)); //Setting output power parameter
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	791b      	ldrb	r3, [r3, #4]
 800599c:	3b05      	subs	r3, #5
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	b25b      	sxtb	r3, r3
 80059a2:	2210      	movs	r2, #16
 80059a4:	4252      	negs	r2, r2
 80059a6:	4313      	orrs	r3, r2
 80059a8:	b25b      	sxtb	r3, r3
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2109      	movs	r1, #9
 80059b0:	0018      	movs	r0, r3
 80059b2:	f7ff ff13 	bl	80057dc <SX127X_SPIWrite>

	SX127X_SPIWrite(module, LR_RegOcp, 0x32);	//OCP to 150 mA
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2232      	movs	r2, #50	; 0x32
 80059ba:	210b      	movs	r1, #11
 80059bc:	0018      	movs	r0, r3
 80059be:	f7ff ff0d 	bl	80057dc <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegLna, 0x23);	//LNA to full gain
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2223      	movs	r2, #35	; 0x23
 80059c6:	210c      	movs	r1, #12
 80059c8:	0018      	movs	r0, r3
 80059ca:	f7ff ff07 	bl	80057dc <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	799b      	ldrb	r3, [r3, #6]
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	b2da      	uxtb	r2, r3
			(module->cr << 1)) +         //Coding rate
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	79db      	ldrb	r3, [r3, #7]
 80059da:	18db      	adds	r3, r3, r3
 80059dc:	b2db      	uxtb	r3, r3
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 80059de:	18d3      	adds	r3, r2, r3
 80059e0:	b2da      	uxtb	r2, r3
			(module->implicitHeader & 1)); //Implicit header flag
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	7a9b      	ldrb	r3, [r3, #10]
 80059e6:	2101      	movs	r1, #1
 80059e8:	400b      	ands	r3, r1
 80059ea:	b2db      	uxtb	r3, r3
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 80059ec:	18d3      	adds	r3, r2, r3
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	211d      	movs	r1, #29
 80059f4:	0018      	movs	r0, r3
 80059f6:	f7ff fef1 	bl	80057dc <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	795b      	ldrb	r3, [r3, #5]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	b2da      	uxtb	r2, r3
			(module->crcEnable << 2) +     //CRC enable flag
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	7a5b      	ldrb	r3, [r3, #9]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	b2db      	uxtb	r3, r3
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 8005a0a:	18d3      	adds	r3, r2, r3
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	3303      	adds	r3, #3
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	211e      	movs	r1, #30
 8005a16:	0018      	movs	r0, r3
 8005a18:	f7ff fee0 	bl	80057dc <SX127X_SPIWrite>
			0x3));                       //RX Time-Out MSB (always max)

	SX127X_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RX symb Timeout = 0x3FF(Max)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	22ff      	movs	r2, #255	; 0xff
 8005a20:	211f      	movs	r1, #31
 8005a22:	0018      	movs	r0, r3
 8005a24:	f7ff feda 	bl	80057dc <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPreambleMsb, (module->preamble >> 8) & 0xFF); //RegPreambleMsb
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	899b      	ldrh	r3, [r3, #12]
 8005a2c:	0a1b      	lsrs	r3, r3, #8
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2120      	movs	r1, #32
 8005a36:	0018      	movs	r0, r3
 8005a38:	f7ff fed0 	bl	80057dc <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPreambleLsb, module->preamble & 0xFF); //RegPreambleLsb
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	899b      	ldrh	r3, [r3, #12]
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2121      	movs	r1, #33	; 0x21
 8005a46:	0018      	movs	r0, r3
 8005a48:	f7ff fec8 	bl	80057dc <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //Payload lenght
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	7a1a      	ldrb	r2, [r3, #8]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2122      	movs	r1, #34	; 0x22
 8005a54:	0018      	movs	r0, r3
 8005a56:	f7ff fec1 	bl	80057dc <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegSyncWord, module->syncWord);  //Sync word
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	7b9a      	ldrb	r2, [r3, #14]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2139      	movs	r1, #57	; 0x39
 8005a62:	0018      	movs	r0, r3
 8005a64:	f7ff feba 	bl	80057dc <SX127X_SPIWrite>
	module->readBytes = 0;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	225d      	movs	r2, #93	; 0x5d
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	5499      	strb	r1, [r3, r2]

	/*** Sensitivity correction for 500kHz BW (see Errata) ***/
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2142      	movs	r1, #66	; 0x42
 8005a74:	0018      	movs	r0, r3
 8005a76:	f7ff fe90 	bl	800579a <SX127X_SPIRead>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	0019      	movs	r1, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2278      	movs	r2, #120	; 0x78
 8005a82:	5499      	strb	r1, [r3, r2]
	if (module->bw == SX127X_LORA_BW_500KHZ && module->revision == 0x12)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	799b      	ldrb	r3, [r3, #6]
 8005a88:	2b09      	cmp	r3, #9
 8005a8a:	d130      	bne.n	8005aee <SX127X_config+0x19a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2278      	movs	r2, #120	; 0x78
 8005a90:	5c9b      	ldrb	r3, [r3, r2]
 8005a92:	2b12      	cmp	r3, #18
 8005a94:	d12b      	bne.n	8005aee <SX127X_config+0x19a>
	{
		if (module->frequency > SX127X_FREQ_820MHZ
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a19      	ldr	r2, [pc, #100]	; (8005b00 <SX127X_config+0x1ac>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d910      	bls.n	8005ac2 <SX127X_config+0x16e>
				&& module->frequency < SX127X_FREQ_1020MHZ)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a17      	ldr	r2, [pc, #92]	; (8005b04 <SX127X_config+0x1b0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d80b      	bhi.n	8005ac2 <SX127X_config+0x16e>
		{
			SX127X_SPIWrite(module, 0x36, 0x2);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2202      	movs	r2, #2
 8005aae:	2136      	movs	r1, #54	; 0x36
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f7ff fe93 	bl	80057dc <SX127X_SPIWrite>
			SX127X_SPIWrite(module, 0x3A, 0x64);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2264      	movs	r2, #100	; 0x64
 8005aba:	213a      	movs	r1, #58	; 0x3a
 8005abc:	0018      	movs	r0, r3
 8005abe:	f7ff fe8d 	bl	80057dc <SX127X_SPIWrite>

		}
		if (module->frequency > SX127X_FREQ_410MHZ
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a10      	ldr	r2, [pc, #64]	; (8005b08 <SX127X_config+0x1b4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d910      	bls.n	8005aee <SX127X_config+0x19a>
				&& module->frequency < SX127X_FREQ_525MHZ)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a0e      	ldr	r2, [pc, #56]	; (8005b0c <SX127X_config+0x1b8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d80b      	bhi.n	8005aee <SX127X_config+0x19a>
		{
			SX127X_SPIWrite(module, 0x36, 0x3);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2203      	movs	r2, #3
 8005ada:	2136      	movs	r1, #54	; 0x36
 8005adc:	0018      	movs	r0, r3
 8005ade:	f7ff fe7d 	bl	80057dc <SX127X_SPIWrite>
			SX127X_SPIWrite(module, 0x3A, 0x7F);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	227f      	movs	r2, #127	; 0x7f
 8005ae6:	213a      	movs	r1, #58	; 0x3a
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7ff fe77 	bl	80057dc <SX127X_SPIWrite>

		}

	}
	SX127X_standby(module); //Entry standby mode
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	0018      	movs	r0, r3
 8005af2:	f000 f863 	bl	8005bbc <SX127X_standby>
}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b002      	add	sp, #8
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	00cd0022 	.word	0x00cd0022
 8005b04:	00ff0029 	.word	0x00ff0029
 8005b08:	00668011 	.word	0x00668011
 8005b0c:	00834015 	.word	0x00834015

08005b10 <SX127X_defaultConfig>:

void SX127X_defaultConfig(SX127X_t *module)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
	module->bw = SX127X_LORA_BW_125KHZ;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2207      	movs	r2, #7
 8005b1c:	719a      	strb	r2, [r3, #6]
	module->cr = SX127X_CR_4_8;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2204      	movs	r2, #4
 8005b22:	71da      	strb	r2, [r3, #7]
	module->crcEnable = 1;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	725a      	strb	r2, [r3, #9]
	module->frequency = SX127X_FREQ_DEFAULT;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a0d      	ldr	r2, [pc, #52]	; (8005b64 <SX127X_defaultConfig+0x54>)
 8005b2e:	601a      	str	r2, [r3, #0]
	module->implicitHeader = 1;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	729a      	strb	r2, [r3, #10]
	module->len = 3;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2203      	movs	r2, #3
 8005b3a:	721a      	strb	r2, [r3, #8]
	module->power = SX127X_POWER_20DBM;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2214      	movs	r2, #20
 8005b40:	711a      	strb	r2, [r3, #4]
	module->preamble = 5;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2205      	movs	r2, #5
 8005b46:	819a      	strh	r2, [r3, #12]
	module->sf = SX127X_LORA_SF_12;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	220c      	movs	r2, #12
 8005b4c:	715a      	strb	r2, [r3, #5]
	module->syncWord = 0x1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	739a      	strb	r2, [r3, #14]
	module->alwaysRX = 1;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	73da      	strb	r2, [r3, #15]
}
 8005b5a:	46c0      	nop			; (mov r8, r8)
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	b002      	add	sp, #8
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	00d94024 	.word	0x00d94024

08005b68 <SX127X_PortConfig>:

void SX127X_PortConfig(SX127X_t *module, SX127X_dio_t reset, SX127X_dio_t nss,
		SPI_HandleTypeDef *hspi)
{
 8005b68:	b082      	sub	sp, #8
 8005b6a:	b590      	push	{r4, r7, lr}
 8005b6c:	b085      	sub	sp, #20
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	1d38      	adds	r0, r7, #4
 8005b74:	6001      	str	r1, [r0, #0]
 8005b76:	6042      	str	r2, [r0, #4]
 8005b78:	2204      	movs	r2, #4
 8005b7a:	2118      	movs	r1, #24
 8005b7c:	1852      	adds	r2, r2, r1
 8005b7e:	2008      	movs	r0, #8
 8005b80:	4684      	mov	ip, r0
 8005b82:	44bc      	add	ip, r7
 8005b84:	4462      	add	r2, ip
 8005b86:	6013      	str	r3, [r2, #0]
	module->reset = reset;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	1d3a      	adds	r2, r7, #4
 8005b8c:	3364      	adds	r3, #100	; 0x64
 8005b8e:	ca11      	ldmia	r2!, {r0, r4}
 8005b90:	c311      	stmia	r3!, {r0, r4}
	module->nss = nss;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2204      	movs	r2, #4
 8005b96:	1852      	adds	r2, r2, r1
 8005b98:	2108      	movs	r1, #8
 8005b9a:	468c      	mov	ip, r1
 8005b9c:	44bc      	add	ip, r7
 8005b9e:	4462      	add	r2, ip
 8005ba0:	336c      	adds	r3, #108	; 0x6c
 8005ba2:	ca03      	ldmia	r2!, {r0, r1}
 8005ba4:	c303      	stmia	r3!, {r0, r1}
	module->spi = hspi;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005baa:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005bac:	46c0      	nop			; (mov r8, r8)
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b005      	add	sp, #20
 8005bb2:	bc90      	pop	{r4, r7}
 8005bb4:	bc08      	pop	{r3}
 8005bb6:	b002      	add	sp, #8
 8005bb8:	4718      	bx	r3
	...

08005bbc <SX127X_standby>:

void SX127X_standby(SX127X_t *module)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a0b      	ldr	r2, [pc, #44]	; (8005bf8 <SX127X_standby+0x3c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d806      	bhi.n	8005bdc <SX127X_standby+0x20>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x89);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2289      	movs	r2, #137	; 0x89
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f7ff fe01 	bl	80057dc <SX127X_SPIWrite>
 8005bda:	e005      	b.n	8005be8 <SX127X_standby+0x2c>
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x81);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2281      	movs	r2, #129	; 0x81
 8005be0:	2101      	movs	r1, #1
 8005be2:	0018      	movs	r0, r3
 8005be4:	f7ff fdfa 	bl	80057dc <SX127X_SPIWrite>
	module->status = STANDBY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	741a      	strb	r2, [r3, #16]
}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b002      	add	sp, #8
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	00834015 	.word	0x00834015

08005bfc <SX127X_sleep>:

void SX127X_sleep(SX127X_t *module)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a0b      	ldr	r2, [pc, #44]	; (8005c38 <SX127X_sleep+0x3c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d806      	bhi.n	8005c1c <SX127X_sleep+0x20>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x88);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2288      	movs	r2, #136	; 0x88
 8005c12:	2101      	movs	r1, #1
 8005c14:	0018      	movs	r0, r3
 8005c16:	f7ff fde1 	bl	80057dc <SX127X_SPIWrite>
 8005c1a:	e005      	b.n	8005c28 <SX127X_sleep+0x2c>
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x80);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2280      	movs	r2, #128	; 0x80
 8005c20:	2101      	movs	r1, #1
 8005c22:	0018      	movs	r0, r3
 8005c24:	f7ff fdda 	bl	80057dc <SX127X_SPIWrite>
	module->status = SLEEP;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	741a      	strb	r2, [r3, #16]
}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	46bd      	mov	sp, r7
 8005c32:	b002      	add	sp, #8
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	00834015 	.word	0x00834015

08005c3c <SX127X_clearIrq>:

void SX127X_clearIrq(SX127X_t *module)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	SX127X_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	22ff      	movs	r2, #255	; 0xff
 8005c48:	2112      	movs	r1, #18
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f7ff fdc6 	bl	80057dc <SX127X_SPIWrite>
}
 8005c50:	46c0      	nop			; (mov r8, r8)
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b002      	add	sp, #8
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <SX127X_startRx>:

int SX127X_startRx(SX127X_t *module, uint32_t timeout)
{
 8005c58:	b5b0      	push	{r4, r5, r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	uint8_t addr;
	SX127X_config(module);		//Setting base parameter
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	0018      	movs	r0, r3
 8005c66:	f7ff fe75 	bl	8005954 <SX127X_config>
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2284      	movs	r2, #132	; 0x84
 8005c6e:	214d      	movs	r1, #77	; 0x4d
 8005c70:	0018      	movs	r0, r3
 8005c72:	f7ff fdb3 	bl	80057dc <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00);	//No FHSS
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2124      	movs	r1, #36	; 0x24
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f7ff fdad 	bl	80057dc <SX127X_SPIWrite>
	SX127X_clearIrq(module);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	0018      	movs	r0, r3
 8005c86:	f7ff ffd9 	bl	8005c3c <SX127X_clearIrq>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	7a1a      	ldrb	r2, [r3, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2122      	movs	r1, #34	; 0x22
 8005c92:	0018      	movs	r0, r3
 8005c94:	f7ff fda2 	bl	80057dc <SX127X_SPIWrite>
	addr = SX127X_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8005c98:	250f      	movs	r5, #15
 8005c9a:	197c      	adds	r4, r7, r5
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	210f      	movs	r1, #15
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f7ff fd7a 	bl	800579a <SX127X_SPIRead>
 8005ca6:	0003      	movs	r3, r0
 8005ca8:	7023      	strb	r3, [r4, #0]
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8005caa:	197b      	adds	r3, r7, r5
 8005cac:	781a      	ldrb	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	210d      	movs	r1, #13
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	f7ff fd92 	bl	80057dc <SX127X_SPIWrite>
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1f      	ldr	r2, [pc, #124]	; (8005d3c <SX127X_startRx+0xe4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d806      	bhi.n	8005cd0 <SX127X_startRx+0x78>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8d);	//Cont RX Mode & LF
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	228d      	movs	r2, #141	; 0x8d
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f7ff fd87 	bl	80057dc <SX127X_SPIWrite>
 8005cce:	e005      	b.n	8005cdc <SX127X_startRx+0x84>
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x85);	    //Cont RX Mode & HF
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2285      	movs	r2, #133	; 0x85
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f7ff fd80 	bl	80057dc <SX127X_SPIWrite>
	module->readBytes = 0;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	225d      	movs	r2, #93	; 0x5d
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	5499      	strb	r1, [r3, r2]

	while (1)
	{
		uint8_t status = SX127X_SPIRead(module, LR_RegModemStat);
 8005ce4:	250e      	movs	r5, #14
 8005ce6:	197c      	adds	r4, r7, r5
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2118      	movs	r1, #24
 8005cec:	0018      	movs	r0, r3
 8005cee:	f7ff fd54 	bl	800579a <SX127X_SPIRead>
 8005cf2:	0003      	movs	r3, r0
 8005cf4:	7023      	strb	r3, [r4, #0]
		if (status & 0x04)
 8005cf6:	197b      	adds	r3, r7, r5
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d004      	beq.n	8005d0a <SX127X_startRx+0xb2>
		{	//Rx-on going RegModemStat
			module->status = RX;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2204      	movs	r2, #4
 8005d04:	741a      	strb	r2, [r3, #16]
			return 1;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e013      	b.n	8005d32 <SX127X_startRx+0xda>
		}

		if (--timeout == 0)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	603b      	str	r3, [r7, #0]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <SX127X_startRx+0xd2>
		{
			SX127X_Reset(module);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f7ff fcd1 	bl	80056c0 <SX127X_Reset>
			SX127X_config(module);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	0018      	movs	r0, r3
 8005d22:	f7ff fe17 	bl	8005954 <SX127X_config>
			return 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e003      	b.n	8005d32 <SX127X_startRx+0xda>
		}

		HAL_Delay(1);
 8005d2a:	2001      	movs	r0, #1
 8005d2c:	f7fe fb38 	bl	80043a0 <HAL_Delay>
	{
 8005d30:	e7d8      	b.n	8005ce4 <SX127X_startRx+0x8c>
	}
}
 8005d32:	0018      	movs	r0, r3
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b004      	add	sp, #16
 8005d38:	bdb0      	pop	{r4, r5, r7, pc}
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	00834015 	.word	0x00834015

08005d40 <SX127X_receive>:

uint8_t SX127X_receive(SX127X_t *module)
{
 8005d40:	b5b0      	push	{r4, r5, r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;
	memset(module->rxBuf, 0x00, SX127X_MAX_PACKET);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	331d      	adds	r3, #29
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	2100      	movs	r1, #0
 8005d50:	0018      	movs	r0, r3
 8005d52:	f005 f81a 	bl	800ad8a <memset>

	addr = SX127X_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8005d56:	250e      	movs	r5, #14
 8005d58:	197c      	adds	r4, r7, r5
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2110      	movs	r1, #16
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f7ff fd1b 	bl	800579a <SX127X_SPIRead>
 8005d64:	0003      	movs	r3, r0
 8005d66:	7023      	strb	r3, [r4, #0]
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8005d68:	197b      	adds	r3, r7, r5
 8005d6a:	781a      	ldrb	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	210d      	movs	r1, #13
 8005d70:	0018      	movs	r0, r3
 8005d72:	f7ff fd33 	bl	80057dc <SX127X_SPIWrite>
	if (module->sf == SX127X_LORA_SF_6)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	795b      	ldrb	r3, [r3, #5]
 8005d7a:	2b06      	cmp	r3, #6
 8005d7c:	d105      	bne.n	8005d8a <SX127X_receive+0x4a>
		packet_size = module->len;
 8005d7e:	230f      	movs	r3, #15
 8005d80:	18fb      	adds	r3, r7, r3
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	7a12      	ldrb	r2, [r2, #8]
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	e008      	b.n	8005d9c <SX127X_receive+0x5c>
	else
		packet_size = SX127X_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8005d8a:	230f      	movs	r3, #15
 8005d8c:	18fc      	adds	r4, r7, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2113      	movs	r1, #19
 8005d92:	0018      	movs	r0, r3
 8005d94:	f7ff fd01 	bl	800579a <SX127X_SPIRead>
 8005d98:	0003      	movs	r3, r0
 8005d9a:	7023      	strb	r3, [r4, #0]
	SX127X_SPIBurstRead(module, 0x00, module->rxBuf, packet_size);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	331d      	adds	r3, #29
 8005da0:	001a      	movs	r2, r3
 8005da2:	240f      	movs	r4, #15
 8005da4:	193b      	adds	r3, r7, r4
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	2100      	movs	r1, #0
 8005dac:	f7ff fd42 	bl	8005834 <SX127X_SPIBurstRead>
	module->readBytes = packet_size;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	193a      	adds	r2, r7, r4
 8005db4:	215d      	movs	r1, #93	; 0x5d
 8005db6:	7812      	ldrb	r2, [r2, #0]
 8005db8:	545a      	strb	r2, [r3, r1]
	return module->readBytes;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	225d      	movs	r2, #93	; 0x5d
 8005dbe:	5c9b      	ldrb	r3, [r3, r2]
}
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b004      	add	sp, #16
 8005dc6:	bdb0      	pop	{r4, r5, r7, pc}

08005dc8 <SX127X_startTransmission>:

void SX127X_startTransmission(SX127X_t *module)
{
 8005dc8:	b5b0      	push	{r4, r5, r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	SX127X_config(module); //setting base parameter
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f7ff fdbe 	bl	8005954 <SX127X_config>
	module->status = TX;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2203      	movs	r2, #3
 8005ddc:	741a      	strb	r2, [r3, #16]
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2287      	movs	r2, #135	; 0x87
 8005de2:	214d      	movs	r1, #77	; 0x4d
 8005de4:	0018      	movs	r0, r3
 8005de6:	f7ff fcf9 	bl	80057dc <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	2124      	movs	r1, #36	; 0x24
 8005df0:	0018      	movs	r0, r3
 8005df2:	f7ff fcf3 	bl	80057dc <SX127X_SPIWrite>
	SX127X_clearIrq(module);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f7ff ff1f 	bl	8005c3c <SX127X_clearIrq>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //RegPayloadLength 21byte
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	7a1a      	ldrb	r2, [r3, #8]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2122      	movs	r1, #34	; 0x22
 8005e06:	0018      	movs	r0, r3
 8005e08:	f7ff fce8 	bl	80057dc <SX127X_SPIWrite>
	addr = SX127X_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8005e0c:	250f      	movs	r5, #15
 8005e0e:	197c      	adds	r4, r7, r5
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	210e      	movs	r1, #14
 8005e14:	0018      	movs	r0, r3
 8005e16:	f7ff fcc0 	bl	800579a <SX127X_SPIRead>
 8005e1a:	0003      	movs	r3, r0
 8005e1c:	7023      	strb	r3, [r4, #0]
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8005e1e:	197b      	adds	r3, r7, r5
 8005e20:	781a      	ldrb	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	210d      	movs	r1, #13
 8005e26:	0018      	movs	r0, r3
 8005e28:	f7ff fcd8 	bl	80057dc <SX127X_SPIWrite>
	SX127X_SPIBurstWrite(module, 0x00, module->txBuf, module->len);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	333d      	adds	r3, #61	; 0x3d
 8005e30:	001a      	movs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	7a1b      	ldrb	r3, [r3, #8]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	2100      	movs	r1, #0
 8005e3a:	f7ff fd41 	bl	80058c0 <SX127X_SPIBurstWrite>
	module->lastTransTick = HAL_GetTick();
 8005e3e:	f000 fc7b 	bl	8006738 <HAL_GetTick>
 8005e42:	0002      	movs	r2, r0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	615a      	str	r2, [r3, #20]
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a0b      	ldr	r2, [pc, #44]	; (8005e7c <SX127X_startTransmission+0xb4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d806      	bhi.n	8005e60 <SX127X_startTransmission+0x98>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode LF
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	228b      	movs	r2, #139	; 0x8b
 8005e56:	2101      	movs	r1, #1
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f7ff fcbf 	bl	80057dc <SX127X_SPIWrite>
 8005e5e:	e005      	b.n	8005e6c <SX127X_startTransmission+0xa4>
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x83);	//Tx Mode HF
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2283      	movs	r2, #131	; 0x83
 8005e64:	2101      	movs	r1, #1
 8005e66:	0018      	movs	r0, r3
 8005e68:	f7ff fcb8 	bl	80057dc <SX127X_SPIWrite>
	module->TXrequest = 0;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	745a      	strb	r2, [r3, #17]

}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b004      	add	sp, #16
 8005e78:	bdb0      	pop	{r4, r5, r7, pc}
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	00834015 	.word	0x00834015

08005e80 <SX127X_transmitAsync>:

HAL_StatusTypeDef SX127X_transmitAsync(SX127X_t *module, uint8_t lenght)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	000a      	movs	r2, r1
 8005e8a:	1cfb      	adds	r3, r7, #3
 8005e8c:	701a      	strb	r2, [r3, #0]
	if (module->TXrequest == 0 && module->status != TX)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	7c5b      	ldrb	r3, [r3, #17]
 8005e92:	2201      	movs	r2, #1
 8005e94:	4053      	eors	r3, r2
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00c      	beq.n	8005eb6 <SX127X_transmitAsync+0x36>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	7c1b      	ldrb	r3, [r3, #16]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d008      	beq.n	8005eb6 <SX127X_transmitAsync+0x36>
	{
		module->len = lenght;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	1cfa      	adds	r2, r7, #3
 8005ea8:	7812      	ldrb	r2, [r2, #0]
 8005eaa:	721a      	strb	r2, [r3, #8]
		module->TXrequest = 1;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	745a      	strb	r2, [r3, #17]

		return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e000      	b.n	8005eb8 <SX127X_transmitAsync+0x38>
	}
	else
		return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
}
 8005eb8:	0018      	movs	r0, r3
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b002      	add	sp, #8
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <SX127X_Routine>:

void SX127X_Routine(SX127X_t *module)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

	SX127X_readStatus(module);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	0018      	movs	r0, r3
 8005ecc:	f000 f894 	bl	8005ff8 <SX127X_readStatus>
	SX127X_readIrq(module);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f000 f8ba 	bl	800604c <SX127X_readIrq>

	if (module->status == UNINITIALISED)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	7c1b      	ldrb	r3, [r3, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d107      	bne.n	8005ef0 <SX127X_Routine+0x30>
	{
		SX127X_Reset(module);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f7ff fbec 	bl	80056c0 <SX127X_Reset>
		SX127X_config(module);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	0018      	movs	r0, r3
 8005eec:	f7ff fd32 	bl	8005954 <SX127X_config>
	}

	if ((module->status == SLEEP || module->status == STANDBY)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	7c1b      	ldrb	r3, [r3, #16]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d003      	beq.n	8005f00 <SX127X_Routine+0x40>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	7c1b      	ldrb	r3, [r3, #16]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d10a      	bne.n	8005f16 <SX127X_Routine+0x56>
			&& module->alwaysRX)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	7bdb      	ldrb	r3, [r3, #15]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d006      	beq.n	8005f16 <SX127X_Routine+0x56>
		SX127X_startRx(module, 1000);
 8005f08:	23fa      	movs	r3, #250	; 0xfa
 8005f0a:	009a      	lsls	r2, r3, #2
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	0011      	movs	r1, r2
 8005f10:	0018      	movs	r0, r3
 8005f12:	f7ff fea1 	bl	8005c58 <SX127X_startRx>

	if (module->TXrequest && (module->modemStatus & MODEM_STATUS_SIG_DET) == 0)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	7c5b      	ldrb	r3, [r3, #17]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <SX127X_Routine+0x74>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	225f      	movs	r2, #95	; 0x5f
 8005f22:	5c9b      	ldrb	r3, [r3, r2]
 8005f24:	001a      	movs	r2, r3
 8005f26:	2301      	movs	r3, #1
 8005f28:	4013      	ands	r3, r2
 8005f2a:	d103      	bne.n	8005f34 <SX127X_Routine+0x74>
		SX127X_startTransmission(module);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f7ff ff4a 	bl	8005dc8 <SX127X_startTransmission>

	SX127X_readIrq(module);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	0018      	movs	r0, r3
 8005f38:	f000 f888 	bl	800604c <SX127X_readIrq>
	if (module->irq & IRQ_TX_DONE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	225e      	movs	r2, #94	; 0x5e
 8005f40:	5c9b      	ldrb	r3, [r3, r2]
 8005f42:	001a      	movs	r2, r3
 8005f44:	2308      	movs	r3, #8
 8005f46:	4013      	ands	r3, r2
 8005f48:	d008      	beq.n	8005f5c <SX127X_Routine+0x9c>
	{
		SX127X_clearIrq(module);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f7ff fe75 	bl	8005c3c <SX127X_clearIrq>
		SX127X_startRx(module, 100);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2164      	movs	r1, #100	; 0x64
 8005f56:	0018      	movs	r0, r3
 8005f58:	f7ff fe7e 	bl	8005c58 <SX127X_startRx>
	}

	if (module->irq & IRQ_RX_DONE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	225e      	movs	r2, #94	; 0x5e
 8005f60:	5c9b      	ldrb	r3, [r3, r2]
 8005f62:	001a      	movs	r2, r3
 8005f64:	2340      	movs	r3, #64	; 0x40
 8005f66:	4013      	ands	r3, r2
 8005f68:	d013      	beq.n	8005f92 <SX127X_Routine+0xd2>
	{
		module->badCrc = (module->irq & IRQ_CRC_ERROR) >> 5;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	225e      	movs	r2, #94	; 0x5e
 8005f6e:	5c9b      	ldrb	r3, [r3, r2]
 8005f70:	115b      	asrs	r3, r3, #5
 8005f72:	2201      	movs	r2, #1
 8005f74:	4013      	ands	r3, r2
 8005f76:	1e5a      	subs	r2, r3, #1
 8005f78:	4193      	sbcs	r3, r2
 8005f7a:	b2d9      	uxtb	r1, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2260      	movs	r2, #96	; 0x60
 8005f80:	5499      	strb	r1, [r3, r2]
		SX127X_receive(module);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	0018      	movs	r0, r3
 8005f86:	f7ff fedb 	bl	8005d40 <SX127X_receive>
		SX127X_clearIrq(module);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f7ff fe55 	bl	8005c3c <SX127X_clearIrq>
	}

	if (((SX127X_SPIRead(module, 0x1D)) != (module->bw << 4 | module->cr << 1 | module->implicitHeader))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	211d      	movs	r1, #29
 8005f96:	0018      	movs	r0, r3
 8005f98:	f7ff fbff 	bl	800579a <SX127X_SPIRead>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	0019      	movs	r1, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	799b      	ldrb	r3, [r3, #6]
 8005fa4:	011a      	lsls	r2, r3, #4
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	79db      	ldrb	r3, [r3, #7]
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	4313      	orrs	r3, r2
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	7a92      	ldrb	r2, [r2, #10]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	4299      	cmp	r1, r3
 8005fb6:	d108      	bne.n	8005fca <SX127X_Routine+0x10a>
			|| (HAL_GetTick() - module->watchdogTick > 120000)) //Watchdog
 8005fb8:	f000 fbbe 	bl	8006738 <HAL_GetTick>
 8005fbc:	0002      	movs	r2, r0
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	4a0b      	ldr	r2, [pc, #44]	; (8005ff4 <SX127X_Routine+0x134>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d90f      	bls.n	8005fea <SX127X_Routine+0x12a>
	{
		module->wdCounter++;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2280      	movs	r2, #128	; 0x80
 8005fce:	5a9b      	ldrh	r3, [r3, r2]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	b299      	uxth	r1, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2280      	movs	r2, #128	; 0x80
 8005fd8:	5299      	strh	r1, [r3, r2]
		module->watchdogTick = HAL_GetTick();
 8005fda:	f000 fbad 	bl	8006738 <HAL_GetTick>
 8005fde:	0002      	movs	r2, r0
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	67da      	str	r2, [r3, #124]	; 0x7c
		module->status = UNINITIALISED;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	741a      	strb	r2, [r3, #16]
	}
}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b002      	add	sp, #8
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	0001d4c0 	.word	0x0001d4c0

08005ff8 <SX127X_readStatus>:
	else
		return -ret;
}

void SX127X_readStatus(SX127X_t *module)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	module->modemStatus = SX127X_SPIRead(module, LR_RegModemStat);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2118      	movs	r1, #24
 8006004:	0018      	movs	r0, r3
 8006006:	f7ff fbc8 	bl	800579a <SX127X_SPIRead>
 800600a:	0003      	movs	r3, r0
 800600c:	0019      	movs	r1, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	225f      	movs	r2, #95	; 0x5f
 8006012:	5499      	strb	r1, [r3, r2]
	if (module->modemStatus & MODEM_STATUS_SIG_DET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	225f      	movs	r2, #95	; 0x5f
 8006018:	5c9b      	ldrb	r3, [r3, r2]
 800601a:	001a      	movs	r2, r3
 800601c:	2301      	movs	r3, #1
 800601e:	4013      	ands	r3, r2
 8006020:	d00d      	beq.n	800603e <SX127X_readStatus+0x46>
	{
		module->signalDetected = true;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	771a      	strb	r2, [r3, #28]
		module->lastSignalTick = HAL_GetTick();
 8006028:	f000 fb86 	bl	8006738 <HAL_GetTick>
 800602c:	0002      	movs	r2, r0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	619a      	str	r2, [r3, #24]
		module->watchdogTick = HAL_GetTick();
 8006032:	f000 fb81 	bl	8006738 <HAL_GetTick>
 8006036:	0002      	movs	r2, r0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	67da      	str	r2, [r3, #124]	; 0x7c
	}
	else
		module->signalDetected = false;
}
 800603c:	e002      	b.n	8006044 <SX127X_readStatus+0x4c>
		module->signalDetected = false;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
}
 8006044:	46c0      	nop			; (mov r8, r8)
 8006046:	46bd      	mov	sp, r7
 8006048:	b002      	add	sp, #8
 800604a:	bd80      	pop	{r7, pc}

0800604c <SX127X_readIrq>:

void SX127X_readIrq(SX127X_t *module)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	module->irq = SX127X_SPIRead(module, LR_RegIrqFlags);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2112      	movs	r1, #18
 8006058:	0018      	movs	r0, r3
 800605a:	f7ff fb9e 	bl	800579a <SX127X_SPIRead>
 800605e:	0003      	movs	r3, r0
 8006060:	0019      	movs	r1, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	225e      	movs	r2, #94	; 0x5e
 8006066:	5499      	strb	r1, [r3, r2]
}
 8006068:	46c0      	nop			; (mov r8, r8)
 800606a:	46bd      	mov	sp, r7
 800606c:	b002      	add	sp, #8
 800606e:	bd80      	pop	{r7, pc}

08006070 <SX127X_delayMicro>:

void SX127X_delayMicro(uint32_t micros)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 5;
 8006078:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <SX127X_delayMicro+0x34>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	490a      	ldr	r1, [pc, #40]	; (80060a8 <SX127X_delayMicro+0x38>)
 800607e:	0018      	movs	r0, r3
 8006080:	f7fa f85e 	bl	8000140 <__udivsi3>
 8006084:	0003      	movs	r3, r0
 8006086:	001a      	movs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4353      	muls	r3, r2
 800608c:	607b      	str	r3, [r7, #4]
	while (micros--)
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	1e5a      	subs	r2, r3, #1
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1fa      	bne.n	8006090 <SX127X_delayMicro+0x20>
		;
}
 800609a:	46c0      	nop			; (mov r8, r8)
 800609c:	46c0      	nop			; (mov r8, r8)
 800609e:	46bd      	mov	sp, r7
 80060a0:	b002      	add	sp, #8
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20000024 	.word	0x20000024
 80060a8:	004c4b40 	.word	0x004c4b40

080060ac <SX127X_init>:
{
	return SX127X_SPIRead(module, LR_RegWideBandRSSI);
}

void SX127X_init(SX127X_t *module)
{
 80060ac:	b590      	push	{r4, r7, lr}
 80060ae:	b08b      	sub	sp, #44	; 0x2c
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
	uint8_t buf[32];
	SX127X_Reset(module);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	0018      	movs	r0, r3
 80060b8:	f7ff fb02 	bl	80056c0 <SX127X_Reset>
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2142      	movs	r1, #66	; 0x42
 80060c0:	0018      	movs	r0, r3
 80060c2:	f7ff fb6a 	bl	800579a <SX127X_SPIRead>
 80060c6:	0003      	movs	r3, r0
 80060c8:	0019      	movs	r1, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2278      	movs	r2, #120	; 0x78
 80060ce:	5499      	strb	r1, [r3, r2]
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2142      	movs	r1, #66	; 0x42
 80060d4:	0018      	movs	r0, r3
 80060d6:	f7ff fb60 	bl	800579a <SX127X_SPIRead>
 80060da:	0003      	movs	r3, r0
 80060dc:	0019      	movs	r1, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2278      	movs	r2, #120	; 0x78
 80060e2:	5499      	strb	r1, [r3, r2]
	SX127X_readAllRegisters(module, buf);
 80060e4:	2408      	movs	r4, #8
 80060e6:	193a      	adds	r2, r7, r4
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	0011      	movs	r1, r2
 80060ec:	0018      	movs	r0, r3
 80060ee:	f000 f811 	bl	8006114 <SX127X_readAllRegisters>
	if (buf[1]==9 && buf[2]==26)
 80060f2:	0022      	movs	r2, r4
 80060f4:	18bb      	adds	r3, r7, r2
 80060f6:	785b      	ldrb	r3, [r3, #1]
 80060f8:	2b09      	cmp	r3, #9
 80060fa:	d107      	bne.n	800610c <SX127X_init+0x60>
 80060fc:	18bb      	adds	r3, r7, r2
 80060fe:	789b      	ldrb	r3, [r3, #2]
 8006100:	2b1a      	cmp	r3, #26
 8006102:	d103      	bne.n	800610c <SX127X_init+0x60>
		module->connected=true;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2261      	movs	r2, #97	; 0x61
 8006108:	2101      	movs	r1, #1
 800610a:	5499      	strb	r1, [r3, r2]
}
 800610c:	46c0      	nop			; (mov r8, r8)
 800610e:	46bd      	mov	sp, r7
 8006110:	b00b      	add	sp, #44	; 0x2c
 8006112:	bd90      	pop	{r4, r7, pc}

08006114 <SX127X_readAllRegisters>:

void SX127X_readAllRegisters(SX127X_t *module, uint8_t *buf)
{
 8006114:	b590      	push	{r4, r7, lr}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
	int i = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
	for (i = 1; i < 32; i++)
 8006122:	2301      	movs	r3, #1
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	e00d      	b.n	8006144 <SX127X_readAllRegisters+0x30>
	{
		buf[i] = SX127X_SPIRead(module, i);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	b2d9      	uxtb	r1, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	18d4      	adds	r4, r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	0018      	movs	r0, r3
 8006136:	f7ff fb30 	bl	800579a <SX127X_SPIRead>
 800613a:	0003      	movs	r3, r0
 800613c:	7023      	strb	r3, [r4, #0]
	for (i = 1; i < 32; i++)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3301      	adds	r3, #1
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b1f      	cmp	r3, #31
 8006148:	ddee      	ble.n	8006128 <SX127X_readAllRegisters+0x14>
	}
}
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	46c0      	nop			; (mov r8, r8)
 800614e:	46bd      	mov	sp, r7
 8006150:	b005      	add	sp, #20
 8006152:	bd90      	pop	{r4, r7, pc}

08006154 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
	return 1;
 8006158:	2301      	movs	r3, #1
}
 800615a:	0018      	movs	r0, r3
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <_kill>:

int _kill(int pid, int sig)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800616a:	f004 fddb 	bl	800ad24 <__errno>
 800616e:	0003      	movs	r3, r0
 8006170:	2216      	movs	r2, #22
 8006172:	601a      	str	r2, [r3, #0]
	return -1;
 8006174:	2301      	movs	r3, #1
 8006176:	425b      	negs	r3, r3
}
 8006178:	0018      	movs	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	b002      	add	sp, #8
 800617e:	bd80      	pop	{r7, pc}

08006180 <_exit>:

void _exit (int status)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006188:	2301      	movs	r3, #1
 800618a:	425a      	negs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	0011      	movs	r1, r2
 8006190:	0018      	movs	r0, r3
 8006192:	f7ff ffe5 	bl	8006160 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006196:	e7fe      	b.n	8006196 <_exit+0x16>

08006198 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	e00a      	b.n	80061c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80061aa:	e000      	b.n	80061ae <_read+0x16>
 80061ac:	bf00      	nop
 80061ae:	0001      	movs	r1, r0
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	60ba      	str	r2, [r7, #8]
 80061b6:	b2ca      	uxtb	r2, r1
 80061b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	3301      	adds	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	dbf0      	blt.n	80061aa <_read+0x12>
	}

return len;
 80061c8:	687b      	ldr	r3, [r7, #4]
}
 80061ca:	0018      	movs	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	b006      	add	sp, #24
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
	return -1;
 80061da:	2301      	movs	r3, #1
 80061dc:	425b      	negs	r3, r3
}
 80061de:	0018      	movs	r0, r3
 80061e0:	46bd      	mov	sp, r7
 80061e2:	b002      	add	sp, #8
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b082      	sub	sp, #8
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2280      	movs	r2, #128	; 0x80
 80061f4:	0192      	lsls	r2, r2, #6
 80061f6:	605a      	str	r2, [r3, #4]
	return 0;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	0018      	movs	r0, r3
 80061fc:	46bd      	mov	sp, r7
 80061fe:	b002      	add	sp, #8
 8006200:	bd80      	pop	{r7, pc}

08006202 <_isatty>:

int _isatty(int file)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
	return 1;
 800620a:	2301      	movs	r3, #1
}
 800620c:	0018      	movs	r0, r3
 800620e:	46bd      	mov	sp, r7
 8006210:	b002      	add	sp, #8
 8006212:	bd80      	pop	{r7, pc}

08006214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
	return 0;
 8006220:	2300      	movs	r3, #0
}
 8006222:	0018      	movs	r0, r3
 8006224:	46bd      	mov	sp, r7
 8006226:	b004      	add	sp, #16
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006234:	4a14      	ldr	r2, [pc, #80]	; (8006288 <_sbrk+0x5c>)
 8006236:	4b15      	ldr	r3, [pc, #84]	; (800628c <_sbrk+0x60>)
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006240:	4b13      	ldr	r3, [pc, #76]	; (8006290 <_sbrk+0x64>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d102      	bne.n	800624e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006248:	4b11      	ldr	r3, [pc, #68]	; (8006290 <_sbrk+0x64>)
 800624a:	4a12      	ldr	r2, [pc, #72]	; (8006294 <_sbrk+0x68>)
 800624c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800624e:	4b10      	ldr	r3, [pc, #64]	; (8006290 <_sbrk+0x64>)
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	18d3      	adds	r3, r2, r3
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	429a      	cmp	r2, r3
 800625a:	d207      	bcs.n	800626c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800625c:	f004 fd62 	bl	800ad24 <__errno>
 8006260:	0003      	movs	r3, r0
 8006262:	220c      	movs	r2, #12
 8006264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006266:	2301      	movs	r3, #1
 8006268:	425b      	negs	r3, r3
 800626a:	e009      	b.n	8006280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800626c:	4b08      	ldr	r3, [pc, #32]	; (8006290 <_sbrk+0x64>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006272:	4b07      	ldr	r3, [pc, #28]	; (8006290 <_sbrk+0x64>)
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	18d2      	adds	r2, r2, r3
 800627a:	4b05      	ldr	r3, [pc, #20]	; (8006290 <_sbrk+0x64>)
 800627c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800627e:	68fb      	ldr	r3, [r7, #12]
}
 8006280:	0018      	movs	r0, r3
 8006282:	46bd      	mov	sp, r7
 8006284:	b006      	add	sp, #24
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20002000 	.word	0x20002000
 800628c:	00000400 	.word	0x00000400
 8006290:	20000620 	.word	0x20000620
 8006294:	20000678 	.word	0x20000678

08006298 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800629c:	46c0      	nop			; (mov r8, r8)
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <initUart>:
uint8_t data;
uint8_t tempMessage[32];
uint8_t tempPos = 0;
uint16_t currentPos = 0;

void initUart(UART_HandleTypeDef *huart, SX127X_t *myRadioHandler) {
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
	//HAL_UART_Receive_IT(huart, &data, 1);
	HAL_UART_Receive_DMA(huart, uartBuffer, UART_BUFFER_SIZE);
 80062ae:	2380      	movs	r3, #128	; 0x80
 80062b0:	005a      	lsls	r2, r3, #1
 80062b2:	4904      	ldr	r1, [pc, #16]	; (80062c4 <initUart+0x20>)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	0018      	movs	r0, r3
 80062b8:	f003 fe16 	bl	8009ee8 <HAL_UART_Receive_DMA>
}
 80062bc:	46c0      	nop			; (mov r8, r8)
 80062be:	46bd      	mov	sp, r7
 80062c0:	b002      	add	sp, #8
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	20000508 	.word	0x20000508

080062c8 <checkUart>:

void checkUart() {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
	if (uartBuffer[currentPos]) {
 80062cc:	4b20      	ldr	r3, [pc, #128]	; (8006350 <checkUart+0x88>)
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	001a      	movs	r2, r3
 80062d2:	4b20      	ldr	r3, [pc, #128]	; (8006354 <checkUart+0x8c>)
 80062d4:	5c9b      	ldrb	r3, [r3, r2]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d036      	beq.n	8006348 <checkUart+0x80>
		if (uartBuffer[currentPos] == '<')
 80062da:	4b1d      	ldr	r3, [pc, #116]	; (8006350 <checkUart+0x88>)
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	001a      	movs	r2, r3
 80062e0:	4b1c      	ldr	r3, [pc, #112]	; (8006354 <checkUart+0x8c>)
 80062e2:	5c9b      	ldrb	r3, [r3, r2]
 80062e4:	2b3c      	cmp	r3, #60	; 0x3c
 80062e6:	d103      	bne.n	80062f0 <checkUart+0x28>
			tempPos = 0;
 80062e8:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <checkUart+0x90>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	e01a      	b.n	8006326 <checkUart+0x5e>
		else if (uartBuffer[currentPos] == '>')
 80062f0:	4b17      	ldr	r3, [pc, #92]	; (8006350 <checkUart+0x88>)
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	001a      	movs	r2, r3
 80062f6:	4b17      	ldr	r3, [pc, #92]	; (8006354 <checkUart+0x8c>)
 80062f8:	5c9b      	ldrb	r3, [r3, r2]
 80062fa:	2b3e      	cmp	r3, #62	; 0x3e
 80062fc:	d105      	bne.n	800630a <checkUart+0x42>
			handleMessage(tempPos);
 80062fe:	4b16      	ldr	r3, [pc, #88]	; (8006358 <checkUart+0x90>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	0018      	movs	r0, r3
 8006304:	f000 f82c 	bl	8006360 <handleMessage>
 8006308:	e00d      	b.n	8006326 <checkUart+0x5e>
		else
			tempMessage[tempPos++] = uartBuffer[currentPos];
 800630a:	4b11      	ldr	r3, [pc, #68]	; (8006350 <checkUart+0x88>)
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	0019      	movs	r1, r3
 8006310:	4b11      	ldr	r3, [pc, #68]	; (8006358 <checkUart+0x90>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	b2d0      	uxtb	r0, r2
 8006318:	4a0f      	ldr	r2, [pc, #60]	; (8006358 <checkUart+0x90>)
 800631a:	7010      	strb	r0, [r2, #0]
 800631c:	001a      	movs	r2, r3
 800631e:	4b0d      	ldr	r3, [pc, #52]	; (8006354 <checkUart+0x8c>)
 8006320:	5c59      	ldrb	r1, [r3, r1]
 8006322:	4b0e      	ldr	r3, [pc, #56]	; (800635c <checkUart+0x94>)
 8006324:	5499      	strb	r1, [r3, r2]

		uartBuffer[currentPos++] = 0;
 8006326:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <checkUart+0x88>)
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	b291      	uxth	r1, r2
 800632e:	4a08      	ldr	r2, [pc, #32]	; (8006350 <checkUart+0x88>)
 8006330:	8011      	strh	r1, [r2, #0]
 8006332:	001a      	movs	r2, r3
 8006334:	4b07      	ldr	r3, [pc, #28]	; (8006354 <checkUart+0x8c>)
 8006336:	2100      	movs	r1, #0
 8006338:	5499      	strb	r1, [r3, r2]
		if (currentPos>=UART_BUFFER_SIZE) currentPos = 0;
 800633a:	4b05      	ldr	r3, [pc, #20]	; (8006350 <checkUart+0x88>)
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	2bff      	cmp	r3, #255	; 0xff
 8006340:	d902      	bls.n	8006348 <checkUart+0x80>
 8006342:	4b03      	ldr	r3, [pc, #12]	; (8006350 <checkUart+0x88>)
 8006344:	2200      	movs	r2, #0
 8006346:	801a      	strh	r2, [r3, #0]
	}

}
 8006348:	46c0      	nop			; (mov r8, r8)
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	20000646 	.word	0x20000646
 8006354:	20000508 	.word	0x20000508
 8006358:	20000644 	.word	0x20000644
 800635c:	20000624 	.word	0x20000624

08006360 <handleMessage>:
void handleMessage(uint8_t len) {
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	0002      	movs	r2, r0
 8006368:	1dfb      	adds	r3, r7, #7
 800636a:	701a      	strb	r2, [r3, #0]

	uint8_t l = len - 1;
 800636c:	2317      	movs	r3, #23
 800636e:	18fb      	adds	r3, r7, r3
 8006370:	1dfa      	adds	r2, r7, #7
 8006372:	7812      	ldrb	r2, [r2, #0]
 8006374:	3a01      	subs	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]
	uint8_t *ptr = tempMessage + 1;
 8006378:	4b65      	ldr	r3, [pc, #404]	; (8006510 <handleMessage+0x1b0>)
 800637a:	613b      	str	r3, [r7, #16]
	uint32_t tmp;

	switch (tempMessage[0]) {
 800637c:	4b65      	ldr	r3, [pc, #404]	; (8006514 <handleMessage+0x1b4>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	3b31      	subs	r3, #49	; 0x31
 8006382:	2b3d      	cmp	r3, #61	; 0x3d
 8006384:	d900      	bls.n	8006388 <handleMessage+0x28>
 8006386:	e0b8      	b.n	80064fa <handleMessage+0x19a>
 8006388:	009a      	lsls	r2, r3, #2
 800638a:	4b63      	ldr	r3, [pc, #396]	; (8006518 <handleMessage+0x1b8>)
 800638c:	18d3      	adds	r3, r2, r3
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	469f      	mov	pc, r3
	case UART_FREQUENCY:
		tmp = DecToInt(ptr, l);
 8006392:	2317      	movs	r3, #23
 8006394:	18fb      	adds	r3, r7, r3
 8006396:	781a      	ldrb	r2, [r3, #0]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	0011      	movs	r1, r2
 800639c:	0018      	movs	r0, r3
 800639e:	f7fc ff97 	bl	80032d0 <DecToInt>
 80063a2:	0003      	movs	r3, r0
 80063a4:	60fb      	str	r3, [r7, #12]
		settings.realFrequency = tmp;
 80063a6:	4b5d      	ldr	r3, [pc, #372]	; (800651c <handleMessage+0x1bc>)
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	601a      	str	r2, [r3, #0]
		break;
 80063ac:	e0ac      	b.n	8006508 <handleMessage+0x1a8>

	case UART_SF:
		tmp = DecToInt(ptr, l);
 80063ae:	2317      	movs	r3, #23
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	781a      	ldrb	r2, [r3, #0]
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	0011      	movs	r1, r2
 80063b8:	0018      	movs	r0, r3
 80063ba:	f7fc ff89 	bl	80032d0 <DecToInt>
 80063be:	0003      	movs	r3, r0
 80063c0:	60fb      	str	r3, [r7, #12]
		settings.sf = tmp;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	4b55      	ldr	r3, [pc, #340]	; (800651c <handleMessage+0x1bc>)
 80063c8:	731a      	strb	r2, [r3, #12]
		break;
 80063ca:	e09d      	b.n	8006508 <handleMessage+0x1a8>

	case UART_BW:
		tmp = DecToInt(ptr, l);
 80063cc:	2317      	movs	r3, #23
 80063ce:	18fb      	adds	r3, r7, r3
 80063d0:	781a      	ldrb	r2, [r3, #0]
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	0011      	movs	r1, r2
 80063d6:	0018      	movs	r0, r3
 80063d8:	f7fc ff7a 	bl	80032d0 <DecToInt>
 80063dc:	0003      	movs	r3, r0
 80063de:	60fb      	str	r3, [r7, #12]
		settings.bw = tmp;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	4b4d      	ldr	r3, [pc, #308]	; (800651c <handleMessage+0x1bc>)
 80063e6:	735a      	strb	r2, [r3, #13]
		break;
 80063e8:	e08e      	b.n	8006508 <handleMessage+0x1a8>

	case UART_SYNCWORD:
		tmp = HexToInt(ptr, l);
 80063ea:	2317      	movs	r3, #23
 80063ec:	18fb      	adds	r3, r7, r3
 80063ee:	781a      	ldrb	r2, [r3, #0]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	0011      	movs	r1, r2
 80063f4:	0018      	movs	r0, r3
 80063f6:	f7fc ffbb 	bl	8003370 <HexToInt>
 80063fa:	0003      	movs	r3, r0
 80063fc:	60fb      	str	r3, [r7, #12]
		settings.sw = tmp;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	b2da      	uxtb	r2, r3
 8006402:	4b46      	ldr	r3, [pc, #280]	; (800651c <handleMessage+0x1bc>)
 8006404:	739a      	strb	r2, [r3, #14]
		break;
 8006406:	e07f      	b.n	8006508 <handleMessage+0x1a8>

	case UART_PREAMBLE:
		tmp = DecToInt(ptr, l);
 8006408:	2317      	movs	r3, #23
 800640a:	18fb      	adds	r3, r7, r3
 800640c:	781a      	ldrb	r2, [r3, #0]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	0011      	movs	r1, r2
 8006412:	0018      	movs	r0, r3
 8006414:	f7fc ff5c 	bl	80032d0 <DecToInt>
 8006418:	0003      	movs	r3, r0
 800641a:	60fb      	str	r3, [r7, #12]
		settings.preamble = tmp;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	b29a      	uxth	r2, r3
 8006420:	4b3e      	ldr	r3, [pc, #248]	; (800651c <handleMessage+0x1bc>)
 8006422:	811a      	strh	r2, [r3, #8]
		break;
 8006424:	e070      	b.n	8006508 <handleMessage+0x1a8>

	case UART_CR:
		tmp = DecToInt(ptr, l);
 8006426:	2317      	movs	r3, #23
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	781a      	ldrb	r2, [r3, #0]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	0011      	movs	r1, r2
 8006430:	0018      	movs	r0, r3
 8006432:	f7fc ff4d 	bl	80032d0 <DecToInt>
 8006436:	0003      	movs	r3, r0
 8006438:	60fb      	str	r3, [r7, #12]
		settings.cr = tmp;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	b2da      	uxtb	r2, r3
 800643e:	4b37      	ldr	r3, [pc, #220]	; (800651c <handleMessage+0x1bc>)
 8006440:	72da      	strb	r2, [r3, #11]
		break;
 8006442:	e061      	b.n	8006508 <handleMessage+0x1a8>

	case UART_POWER:
		tmp = DecToInt(ptr, l);
 8006444:	2317      	movs	r3, #23
 8006446:	18fb      	adds	r3, r7, r3
 8006448:	781a      	ldrb	r2, [r3, #0]
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	0011      	movs	r1, r2
 800644e:	0018      	movs	r0, r3
 8006450:	f7fc ff3e 	bl	80032d0 <DecToInt>
 8006454:	0003      	movs	r3, r0
 8006456:	60fb      	str	r3, [r7, #12]
		settings.power = tmp;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	b2da      	uxtb	r2, r3
 800645c:	4b2f      	ldr	r3, [pc, #188]	; (800651c <handleMessage+0x1bc>)
 800645e:	73da      	strb	r2, [r3, #15]
		break;
 8006460:	e052      	b.n	8006508 <handleMessage+0x1a8>

	case UART_NODENUM:
		settings.nodeNum = DecToInt(ptr, l);
 8006462:	2317      	movs	r3, #23
 8006464:	18fb      	adds	r3, r7, r3
 8006466:	781a      	ldrb	r2, [r3, #0]
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	0011      	movs	r1, r2
 800646c:	0018      	movs	r0, r3
 800646e:	f7fc ff2f 	bl	80032d0 <DecToInt>
 8006472:	0003      	movs	r3, r0
 8006474:	b2da      	uxtb	r2, r3
 8006476:	4b29      	ldr	r3, [pc, #164]	; (800651c <handleMessage+0x1bc>)
 8006478:	729a      	strb	r2, [r3, #10]
		break;
 800647a:	e045      	b.n	8006508 <handleMessage+0x1a8>

	case UART_WORKING_INTERVAL:
		settings.workInterval = DecToInt(ptr, l);
 800647c:	2317      	movs	r3, #23
 800647e:	18fb      	adds	r3, r7, r3
 8006480:	781a      	ldrb	r2, [r3, #0]
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	0011      	movs	r1, r2
 8006486:	0018      	movs	r0, r3
 8006488:	f7fc ff22 	bl	80032d0 <DecToInt>
 800648c:	0002      	movs	r2, r0
 800648e:	4b23      	ldr	r3, [pc, #140]	; (800651c <handleMessage+0x1bc>)
 8006490:	605a      	str	r2, [r3, #4]
		break;
 8006492:	e039      	b.n	8006508 <handleMessage+0x1a8>

	case UART_USELED:
		settings.useLed = DecToInt(ptr, l);
 8006494:	2317      	movs	r3, #23
 8006496:	18fb      	adds	r3, r7, r3
 8006498:	781a      	ldrb	r2, [r3, #0]
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	0011      	movs	r1, r2
 800649e:	0018      	movs	r0, r3
 80064a0:	f7fc ff16 	bl	80032d0 <DecToInt>
 80064a4:	0003      	movs	r3, r0
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	4b1c      	ldr	r3, [pc, #112]	; (800651c <handleMessage+0x1bc>)
 80064aa:	741a      	strb	r2, [r3, #16]
		break;
 80064ac:	e02c      	b.n	8006508 <handleMessage+0x1a8>

	case UART_SAVE:
		flag.saveSettings = 1;
 80064ae:	4b1c      	ldr	r3, [pc, #112]	; (8006520 <handleMessage+0x1c0>)
 80064b0:	781a      	ldrb	r2, [r3, #0]
 80064b2:	2110      	movs	r1, #16
 80064b4:	430a      	orrs	r2, r1
 80064b6:	701a      	strb	r2, [r3, #0]
		break;
 80064b8:	e026      	b.n	8006508 <handleMessage+0x1a8>

	case UART_READ:
		flag.readConfig = 1;
 80064ba:	4b19      	ldr	r3, [pc, #100]	; (8006520 <handleMessage+0x1c0>)
 80064bc:	781a      	ldrb	r2, [r3, #0]
 80064be:	2120      	movs	r1, #32
 80064c0:	430a      	orrs	r2, r1
 80064c2:	701a      	strb	r2, [r3, #0]
		break;
 80064c4:	e020      	b.n	8006508 <handleMessage+0x1a8>

	case UART_CALL:
		printf("<ANv%lx>\n", SOFTWARE_REVISION);
 80064c6:	4a17      	ldr	r2, [pc, #92]	; (8006524 <handleMessage+0x1c4>)
 80064c8:	4b17      	ldr	r3, [pc, #92]	; (8006528 <handleMessage+0x1c8>)
 80064ca:	0011      	movs	r1, r2
 80064cc:	0018      	movs	r0, r3
 80064ce:	f005 f8d3 	bl	800b678 <iprintf>
		break;
 80064d2:	e019      	b.n	8006508 <handleMessage+0x1a8>

	case UART_STATUS:
		flag.statusRequested = 1;
 80064d4:	4b12      	ldr	r3, [pc, #72]	; (8006520 <handleMessage+0x1c0>)
 80064d6:	785a      	ldrb	r2, [r3, #1]
 80064d8:	2104      	movs	r1, #4
 80064da:	430a      	orrs	r2, r1
 80064dc:	705a      	strb	r2, [r3, #1]
		break;
 80064de:	e013      	b.n	8006508 <handleMessage+0x1a8>

	case UART_DEBUG:
		settings.debugLevel = DecToInt(ptr, l);
 80064e0:	2317      	movs	r3, #23
 80064e2:	18fb      	adds	r3, r7, r3
 80064e4:	781a      	ldrb	r2, [r3, #0]
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	0011      	movs	r1, r2
 80064ea:	0018      	movs	r0, r3
 80064ec:	f7fc fef0 	bl	80032d0 <DecToInt>
 80064f0:	0003      	movs	r3, r0
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	4b09      	ldr	r3, [pc, #36]	; (800651c <handleMessage+0x1bc>)
 80064f6:	761a      	strb	r2, [r3, #24]
		break;
 80064f8:	e006      	b.n	8006508 <handleMessage+0x1a8>

	default:
		printf("Bad format!");
 80064fa:	4b0c      	ldr	r3, [pc, #48]	; (800652c <handleMessage+0x1cc>)
 80064fc:	0018      	movs	r0, r3
 80064fe:	f005 f8bb 	bl	800b678 <iprintf>
		Error_Handler();
 8006502:	f7fe fed3 	bl	80052ac <Error_Handler>
		break;
 8006506:	46c0      	nop			; (mov r8, r8)

	}
}
 8006508:	46c0      	nop			; (mov r8, r8)
 800650a:	46bd      	mov	sp, r7
 800650c:	b006      	add	sp, #24
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20000625 	.word	0x20000625
 8006514:	20000624 	.word	0x20000624
 8006518:	0800e660 	.word	0x0800e660
 800651c:	200004e8 	.word	0x200004e8
 8006520:	2000044c 	.word	0x2000044c
 8006524:	11072022 	.word	0x11072022
 8006528:	0800e3b0 	.word	0x0800e3b0
 800652c:	0800e3bc 	.word	0x0800e3bc

08006530 <sendConfig>:

void sendConfig() {
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
	printf("<1%lu>\n", settings.realFrequency);
 8006534:	4b2c      	ldr	r3, [pc, #176]	; (80065e8 <sendConfig+0xb8>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	4b2c      	ldr	r3, [pc, #176]	; (80065ec <sendConfig+0xbc>)
 800653a:	0011      	movs	r1, r2
 800653c:	0018      	movs	r0, r3
 800653e:	f005 f89b 	bl	800b678 <iprintf>
	printf("<2%u>\n", settings.sf);
 8006542:	4b29      	ldr	r3, [pc, #164]	; (80065e8 <sendConfig+0xb8>)
 8006544:	7b1b      	ldrb	r3, [r3, #12]
 8006546:	001a      	movs	r2, r3
 8006548:	4b29      	ldr	r3, [pc, #164]	; (80065f0 <sendConfig+0xc0>)
 800654a:	0011      	movs	r1, r2
 800654c:	0018      	movs	r0, r3
 800654e:	f005 f893 	bl	800b678 <iprintf>
	printf("<3%u>\n", settings.bw);
 8006552:	4b25      	ldr	r3, [pc, #148]	; (80065e8 <sendConfig+0xb8>)
 8006554:	7b5b      	ldrb	r3, [r3, #13]
 8006556:	001a      	movs	r2, r3
 8006558:	4b26      	ldr	r3, [pc, #152]	; (80065f4 <sendConfig+0xc4>)
 800655a:	0011      	movs	r1, r2
 800655c:	0018      	movs	r0, r3
 800655e:	f005 f88b 	bl	800b678 <iprintf>
	printf("<4%X>\n", settings.sw);
 8006562:	4b21      	ldr	r3, [pc, #132]	; (80065e8 <sendConfig+0xb8>)
 8006564:	7b9b      	ldrb	r3, [r3, #14]
 8006566:	001a      	movs	r2, r3
 8006568:	4b23      	ldr	r3, [pc, #140]	; (80065f8 <sendConfig+0xc8>)
 800656a:	0011      	movs	r1, r2
 800656c:	0018      	movs	r0, r3
 800656e:	f005 f883 	bl	800b678 <iprintf>
	printf("<5%u>\n", settings.power);
 8006572:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <sendConfig+0xb8>)
 8006574:	7bdb      	ldrb	r3, [r3, #15]
 8006576:	001a      	movs	r2, r3
 8006578:	4b20      	ldr	r3, [pc, #128]	; (80065fc <sendConfig+0xcc>)
 800657a:	0011      	movs	r1, r2
 800657c:	0018      	movs	r0, r3
 800657e:	f005 f87b 	bl	800b678 <iprintf>
	printf("<8%u>\n", settings.preamble);
 8006582:	4b19      	ldr	r3, [pc, #100]	; (80065e8 <sendConfig+0xb8>)
 8006584:	891b      	ldrh	r3, [r3, #8]
 8006586:	001a      	movs	r2, r3
 8006588:	4b1d      	ldr	r3, [pc, #116]	; (8006600 <sendConfig+0xd0>)
 800658a:	0011      	movs	r1, r2
 800658c:	0018      	movs	r0, r3
 800658e:	f005 f873 	bl	800b678 <iprintf>
	printf("<9%u>\n", settings.cr);
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <sendConfig+0xb8>)
 8006594:	7adb      	ldrb	r3, [r3, #11]
 8006596:	001a      	movs	r2, r3
 8006598:	4b1a      	ldr	r3, [pc, #104]	; (8006604 <sendConfig+0xd4>)
 800659a:	0011      	movs	r1, r2
 800659c:	0018      	movs	r0, r3
 800659e:	f005 f86b 	bl	800b678 <iprintf>
	printf("<n%u>\n", settings.nodeNum);
 80065a2:	4b11      	ldr	r3, [pc, #68]	; (80065e8 <sendConfig+0xb8>)
 80065a4:	7a9b      	ldrb	r3, [r3, #10]
 80065a6:	001a      	movs	r2, r3
 80065a8:	4b17      	ldr	r3, [pc, #92]	; (8006608 <sendConfig+0xd8>)
 80065aa:	0011      	movs	r1, r2
 80065ac:	0018      	movs	r0, r3
 80065ae:	f005 f863 	bl	800b678 <iprintf>
	printf("<i%lu>\n", settings.workInterval);
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <sendConfig+0xb8>)
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	4b15      	ldr	r3, [pc, #84]	; (800660c <sendConfig+0xdc>)
 80065b8:	0011      	movs	r1, r2
 80065ba:	0018      	movs	r0, r3
 80065bc:	f005 f85c 	bl	800b678 <iprintf>
	printf("<L%u>\n", settings.useLed);
 80065c0:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <sendConfig+0xb8>)
 80065c2:	7c1b      	ldrb	r3, [r3, #16]
 80065c4:	001a      	movs	r2, r3
 80065c6:	4b12      	ldr	r3, [pc, #72]	; (8006610 <sendConfig+0xe0>)
 80065c8:	0011      	movs	r1, r2
 80065ca:	0018      	movs	r0, r3
 80065cc:	f005 f854 	bl	800b678 <iprintf>
	printf("<d%u>\n", settings.debugLevel);
 80065d0:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <sendConfig+0xb8>)
 80065d2:	7e1b      	ldrb	r3, [r3, #24]
 80065d4:	001a      	movs	r2, r3
 80065d6:	4b0f      	ldr	r3, [pc, #60]	; (8006614 <sendConfig+0xe4>)
 80065d8:	0011      	movs	r1, r2
 80065da:	0018      	movs	r0, r3
 80065dc:	f005 f84c 	bl	800b678 <iprintf>
}
 80065e0:	46c0      	nop			; (mov r8, r8)
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	200004e8 	.word	0x200004e8
 80065ec:	0800e3c8 	.word	0x0800e3c8
 80065f0:	0800e3d0 	.word	0x0800e3d0
 80065f4:	0800e3d8 	.word	0x0800e3d8
 80065f8:	0800e3e0 	.word	0x0800e3e0
 80065fc:	0800e3e8 	.word	0x0800e3e8
 8006600:	0800e3f0 	.word	0x0800e3f0
 8006604:	0800e3f8 	.word	0x0800e3f8
 8006608:	0800e400 	.word	0x0800e400
 800660c:	0800e408 	.word	0x0800e408
 8006610:	0800e410 	.word	0x0800e410
 8006614:	0800e418 	.word	0x0800e418

08006618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006618:	480d      	ldr	r0, [pc, #52]	; (8006650 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800661a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800661c:	480d      	ldr	r0, [pc, #52]	; (8006654 <LoopForever+0x6>)
  ldr r1, =_edata
 800661e:	490e      	ldr	r1, [pc, #56]	; (8006658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006620:	4a0e      	ldr	r2, [pc, #56]	; (800665c <LoopForever+0xe>)
  movs r3, #0
 8006622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006624:	e002      	b.n	800662c <LoopCopyDataInit>

08006626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800662a:	3304      	adds	r3, #4

0800662c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800662c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800662e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006630:	d3f9      	bcc.n	8006626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006632:	4a0b      	ldr	r2, [pc, #44]	; (8006660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006634:	4c0b      	ldr	r4, [pc, #44]	; (8006664 <LoopForever+0x16>)
  movs r3, #0
 8006636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006638:	e001      	b.n	800663e <LoopFillZerobss>

0800663a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800663a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800663c:	3204      	adds	r2, #4

0800663e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800663e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006640:	d3fb      	bcc.n	800663a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006642:	f7ff fe29 	bl	8006298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006646:	f004 fb73 	bl	800ad30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800664a:	f7fd fed3 	bl	80043f4 <main>

0800664e <LoopForever>:

LoopForever:
    b LoopForever
 800664e:	e7fe      	b.n	800664e <LoopForever>
   ldr   r0, =_estack
 8006650:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8006654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006658:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800665c:	0800eb8c 	.word	0x0800eb8c
  ldr r2, =_sbss
 8006660:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8006664:	20000674 	.word	0x20000674

08006668 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006668:	e7fe      	b.n	8006668 <ADC1_COMP_IRQHandler>
	...

0800666c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006672:	1dfb      	adds	r3, r7, #7
 8006674:	2200      	movs	r2, #0
 8006676:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8006678:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <HAL_Init+0x3c>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <HAL_Init+0x3c>)
 800667e:	2140      	movs	r1, #64	; 0x40
 8006680:	430a      	orrs	r2, r1
 8006682:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006684:	2000      	movs	r0, #0
 8006686:	f000 f811 	bl	80066ac <HAL_InitTick>
 800668a:	1e03      	subs	r3, r0, #0
 800668c:	d003      	beq.n	8006696 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800668e:	1dfb      	adds	r3, r7, #7
 8006690:	2201      	movs	r2, #1
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	e001      	b.n	800669a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006696:	f7fe fe15 	bl	80052c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800669a:	1dfb      	adds	r3, r7, #7
 800669c:	781b      	ldrb	r3, [r3, #0]
}
 800669e:	0018      	movs	r0, r3
 80066a0:	46bd      	mov	sp, r7
 80066a2:	b002      	add	sp, #8
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	46c0      	nop			; (mov r8, r8)
 80066a8:	40022000 	.word	0x40022000

080066ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066ac:	b590      	push	{r4, r7, lr}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80066b4:	4b14      	ldr	r3, [pc, #80]	; (8006708 <HAL_InitTick+0x5c>)
 80066b6:	681c      	ldr	r4, [r3, #0]
 80066b8:	4b14      	ldr	r3, [pc, #80]	; (800670c <HAL_InitTick+0x60>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	0019      	movs	r1, r3
 80066be:	23fa      	movs	r3, #250	; 0xfa
 80066c0:	0098      	lsls	r0, r3, #2
 80066c2:	f7f9 fd3d 	bl	8000140 <__udivsi3>
 80066c6:	0003      	movs	r3, r0
 80066c8:	0019      	movs	r1, r3
 80066ca:	0020      	movs	r0, r4
 80066cc:	f7f9 fd38 	bl	8000140 <__udivsi3>
 80066d0:	0003      	movs	r3, r0
 80066d2:	0018      	movs	r0, r3
 80066d4:	f000 fd57 	bl	8007186 <HAL_SYSTICK_Config>
 80066d8:	1e03      	subs	r3, r0, #0
 80066da:	d001      	beq.n	80066e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e00f      	b.n	8006700 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d80b      	bhi.n	80066fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	2301      	movs	r3, #1
 80066ea:	425b      	negs	r3, r3
 80066ec:	2200      	movs	r2, #0
 80066ee:	0018      	movs	r0, r3
 80066f0:	f000 fd24 	bl	800713c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80066f4:	4b06      	ldr	r3, [pc, #24]	; (8006710 <HAL_InitTick+0x64>)
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	e000      	b.n	8006700 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
}
 8006700:	0018      	movs	r0, r3
 8006702:	46bd      	mov	sp, r7
 8006704:	b003      	add	sp, #12
 8006706:	bd90      	pop	{r4, r7, pc}
 8006708:	20000024 	.word	0x20000024
 800670c:	2000002c 	.word	0x2000002c
 8006710:	20000028 	.word	0x20000028

08006714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006718:	4b05      	ldr	r3, [pc, #20]	; (8006730 <HAL_IncTick+0x1c>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	001a      	movs	r2, r3
 800671e:	4b05      	ldr	r3, [pc, #20]	; (8006734 <HAL_IncTick+0x20>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	18d2      	adds	r2, r2, r3
 8006724:	4b03      	ldr	r3, [pc, #12]	; (8006734 <HAL_IncTick+0x20>)
 8006726:	601a      	str	r2, [r3, #0]
}
 8006728:	46c0      	nop			; (mov r8, r8)
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	2000002c 	.word	0x2000002c
 8006734:	20000648 	.word	0x20000648

08006738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  return uwTick;
 800673c:	4b02      	ldr	r3, [pc, #8]	; (8006748 <HAL_GetTick+0x10>)
 800673e:	681b      	ldr	r3, [r3, #0]
}
 8006740:	0018      	movs	r0, r3
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	20000648 	.word	0x20000648

0800674c <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006750:	4b04      	ldr	r3, [pc, #16]	; (8006764 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	4b03      	ldr	r3, [pc, #12]	; (8006764 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8006756:	2102      	movs	r1, #2
 8006758:	438a      	bics	r2, r1
 800675a:	605a      	str	r2, [r3, #4]
}
 800675c:	46c0      	nop			; (mov r8, r8)
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	40015800 	.word	0x40015800

08006768 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e159      	b.n	8006a2e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2250      	movs	r2, #80	; 0x50
 800678c:	2100      	movs	r1, #0
 800678e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	0018      	movs	r0, r3
 8006794:	f7fe fdaa 	bl	80052ec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679c:	2210      	movs	r2, #16
 800679e:	4013      	ands	r3, r2
 80067a0:	2b10      	cmp	r3, #16
 80067a2:	d005      	beq.n	80067b0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2204      	movs	r2, #4
 80067ac:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80067ae:	d00b      	beq.n	80067c8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b4:	2210      	movs	r2, #16
 80067b6:	431a      	orrs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2250      	movs	r2, #80	; 0x50
 80067c0:	2100      	movs	r1, #0
 80067c2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e132      	b.n	8006a2e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067cc:	4a9a      	ldr	r2, [pc, #616]	; (8006a38 <HAL_ADC_Init+0x2d0>)
 80067ce:	4013      	ands	r3, r2
 80067d0:	2202      	movs	r2, #2
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2203      	movs	r2, #3
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d108      	bne.n	80067f8 <HAL_ADC_Init+0x90>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2201      	movs	r2, #1
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <HAL_ADC_Init+0x90>
 80067f4:	2301      	movs	r3, #1
 80067f6:	e000      	b.n	80067fa <HAL_ADC_Init+0x92>
 80067f8:	2300      	movs	r3, #0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d149      	bne.n	8006892 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	23c0      	movs	r3, #192	; 0xc0
 8006804:	061b      	lsls	r3, r3, #24
 8006806:	429a      	cmp	r2, r3
 8006808:	d00b      	beq.n	8006822 <HAL_ADC_Init+0xba>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	2380      	movs	r3, #128	; 0x80
 8006810:	05db      	lsls	r3, r3, #23
 8006812:	429a      	cmp	r2, r3
 8006814:	d005      	beq.n	8006822 <HAL_ADC_Init+0xba>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	2380      	movs	r3, #128	; 0x80
 800681c:	061b      	lsls	r3, r3, #24
 800681e:	429a      	cmp	r2, r3
 8006820:	d111      	bne.n	8006846 <HAL_ADC_Init+0xde>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691a      	ldr	r2, [r3, #16]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	0092      	lsls	r2, r2, #2
 800682e:	0892      	lsrs	r2, r2, #2
 8006830:	611a      	str	r2, [r3, #16]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6919      	ldr	r1, [r3, #16]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	611a      	str	r2, [r3, #16]
 8006844:	e014      	b.n	8006870 <HAL_ADC_Init+0x108>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691a      	ldr	r2, [r3, #16]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	0092      	lsls	r2, r2, #2
 8006852:	0892      	lsrs	r2, r2, #2
 8006854:	611a      	str	r2, [r3, #16]
 8006856:	4b79      	ldr	r3, [pc, #484]	; (8006a3c <HAL_ADC_Init+0x2d4>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b78      	ldr	r3, [pc, #480]	; (8006a3c <HAL_ADC_Init+0x2d4>)
 800685c:	4978      	ldr	r1, [pc, #480]	; (8006a40 <HAL_ADC_Init+0x2d8>)
 800685e:	400a      	ands	r2, r1
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	4b76      	ldr	r3, [pc, #472]	; (8006a3c <HAL_ADC_Init+0x2d4>)
 8006864:	6819      	ldr	r1, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	4b74      	ldr	r3, [pc, #464]	; (8006a3c <HAL_ADC_Init+0x2d4>)
 800686c:	430a      	orrs	r2, r1
 800686e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2118      	movs	r1, #24
 800687c:	438a      	bics	r2, r1
 800687e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68d9      	ldr	r1, [r3, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8006892:	4b6a      	ldr	r3, [pc, #424]	; (8006a3c <HAL_ADC_Init+0x2d4>)
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	4b69      	ldr	r3, [pc, #420]	; (8006a3c <HAL_ADC_Init+0x2d4>)
 8006898:	496a      	ldr	r1, [pc, #424]	; (8006a44 <HAL_ADC_Init+0x2dc>)
 800689a:	400a      	ands	r2, r1
 800689c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800689e:	4b67      	ldr	r3, [pc, #412]	; (8006a3c <HAL_ADC_Init+0x2d4>)
 80068a0:	6819      	ldr	r1, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a6:	065a      	lsls	r2, r3, #25
 80068a8:	4b64      	ldr	r3, [pc, #400]	; (8006a3c <HAL_ADC_Init+0x2d4>)
 80068aa:	430a      	orrs	r2, r1
 80068ac:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	2380      	movs	r3, #128	; 0x80
 80068b6:	055b      	lsls	r3, r3, #21
 80068b8:	4013      	ands	r3, r2
 80068ba:	d108      	bne.n	80068ce <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2180      	movs	r1, #128	; 0x80
 80068c8:	0549      	lsls	r1, r1, #21
 80068ca:	430a      	orrs	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	495b      	ldr	r1, [pc, #364]	; (8006a48 <HAL_ADC_Init+0x2e0>)
 80068da:	400a      	ands	r2, r1
 80068dc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68d9      	ldr	r1, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d101      	bne.n	80068f4 <HAL_ADC_Init+0x18c>
 80068f0:	2304      	movs	r3, #4
 80068f2:	e000      	b.n	80068f6 <HAL_ADC_Init+0x18e>
 80068f4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80068f6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2020      	movs	r0, #32
 80068fc:	5c1b      	ldrb	r3, [r3, r0]
 80068fe:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006900:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	202c      	movs	r0, #44	; 0x2c
 8006906:	5c1b      	ldrb	r3, [r3, r0]
 8006908:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800690a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006910:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8006918:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006920:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800692e:	23c2      	movs	r3, #194	; 0xc2
 8006930:	33ff      	adds	r3, #255	; 0xff
 8006932:	429a      	cmp	r2, r3
 8006934:	d00b      	beq.n	800694e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68d9      	ldr	r1, [r3, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006944:	431a      	orrs	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2221      	movs	r2, #33	; 0x21
 8006952:	5c9b      	ldrb	r3, [r3, r2]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d11a      	bne.n	800698e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2220      	movs	r2, #32
 800695c:	5c9b      	ldrb	r3, [r3, r2]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2180      	movs	r1, #128	; 0x80
 800696e:	0249      	lsls	r1, r1, #9
 8006970:	430a      	orrs	r2, r1
 8006972:	60da      	str	r2, [r3, #12]
 8006974:	e00b      	b.n	800698e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697a:	2220      	movs	r2, #32
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006986:	2201      	movs	r2, #1
 8006988:	431a      	orrs	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006992:	2b01      	cmp	r3, #1
 8006994:	d11f      	bne.n	80069d6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	492a      	ldr	r1, [pc, #168]	; (8006a4c <HAL_ADC_Init+0x2e4>)
 80069a2:	400a      	ands	r2, r1
 80069a4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6919      	ldr	r1, [r3, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80069b4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80069ba:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691a      	ldr	r2, [r3, #16]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2101      	movs	r1, #1
 80069d0:	430a      	orrs	r2, r1
 80069d2:	611a      	str	r2, [r3, #16]
 80069d4:	e00e      	b.n	80069f4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2201      	movs	r2, #1
 80069de:	4013      	ands	r3, r2
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d107      	bne.n	80069f4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691a      	ldr	r2, [r3, #16]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2101      	movs	r1, #1
 80069f0:	438a      	bics	r2, r1
 80069f2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695a      	ldr	r2, [r3, #20]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2107      	movs	r1, #7
 8006a00:	438a      	bics	r2, r1
 8006a02:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6959      	ldr	r1, [r3, #20]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	2203      	movs	r2, #3
 8006a22:	4393      	bics	r3, r2
 8006a24:	2201      	movs	r2, #1
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	0018      	movs	r0, r3
 8006a30:	46bd      	mov	sp, r7
 8006a32:	b002      	add	sp, #8
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	fffffefd 	.word	0xfffffefd
 8006a3c:	40012708 	.word	0x40012708
 8006a40:	ffc3ffff 	.word	0xffc3ffff
 8006a44:	fdffffff 	.word	0xfdffffff
 8006a48:	fffe0219 	.word	0xfffe0219
 8006a4c:	fffffc03 	.word	0xfffffc03

08006a50 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a5c:	2317      	movs	r3, #23
 8006a5e:	18fb      	adds	r3, r7, r3
 8006a60:	2200      	movs	r2, #0
 8006a62:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	2204      	movs	r2, #4
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	d15e      	bne.n	8006b2e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2250      	movs	r2, #80	; 0x50
 8006a74:	5c9b      	ldrb	r3, [r3, r2]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <HAL_ADC_Start_DMA+0x2e>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	e05e      	b.n	8006b3c <HAL_ADC_Start_DMA+0xec>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2250      	movs	r2, #80	; 0x50
 8006a82:	2101      	movs	r1, #1
 8006a84:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2101      	movs	r1, #1
 8006a92:	430a      	orrs	r2, r1
 8006a94:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d007      	beq.n	8006aae <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006a9e:	2317      	movs	r3, #23
 8006aa0:	18fc      	adds	r4, r7, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f000 f8f3 	bl	8006c90 <ADC_Enable>
 8006aaa:	0003      	movs	r3, r0
 8006aac:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006aae:	2317      	movs	r3, #23
 8006ab0:	18fb      	adds	r3, r7, r3
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d13e      	bne.n	8006b36 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abc:	4a21      	ldr	r2, [pc, #132]	; (8006b44 <HAL_ADC_Start_DMA+0xf4>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2280      	movs	r2, #128	; 0x80
 8006ac2:	0052      	lsls	r2, r2, #1
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2250      	movs	r2, #80	; 0x50
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006adc:	4a1a      	ldr	r2, [pc, #104]	; (8006b48 <HAL_ADC_Start_DMA+0xf8>)
 8006ade:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae4:	4a19      	ldr	r2, [pc, #100]	; (8006b4c <HAL_ADC_Start_DMA+0xfc>)
 8006ae6:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aec:	4a18      	ldr	r2, [pc, #96]	; (8006b50 <HAL_ADC_Start_DMA+0x100>)
 8006aee:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	221c      	movs	r2, #28
 8006af6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2110      	movs	r1, #16
 8006b04:	430a      	orrs	r2, r1
 8006b06:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3340      	adds	r3, #64	; 0x40
 8006b12:	0019      	movs	r1, r3
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f000 fbba 	bl	8007290 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2104      	movs	r1, #4
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	609a      	str	r2, [r3, #8]
 8006b2c:	e003      	b.n	8006b36 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006b2e:	2317      	movs	r3, #23
 8006b30:	18fb      	adds	r3, r7, r3
 8006b32:	2202      	movs	r2, #2
 8006b34:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006b36:	2317      	movs	r3, #23
 8006b38:	18fb      	adds	r3, r7, r3
 8006b3a:	781b      	ldrb	r3, [r3, #0]
}
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b007      	add	sp, #28
 8006b42:	bd90      	pop	{r4, r7, pc}
 8006b44:	fffff0fe 	.word	0xfffff0fe
 8006b48:	08006d61 	.word	0x08006d61
 8006b4c:	08006e15 	.word	0x08006e15
 8006b50:	08006e33 	.word	0x08006e33

08006b54 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006b5c:	46c0      	nop			; (mov r8, r8)
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	b002      	add	sp, #8
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006b6c:	46c0      	nop			; (mov r8, r8)
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	b002      	add	sp, #8
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006b7c:	46c0      	nop			; (mov r8, r8)
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	b002      	add	sp, #8
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2250      	movs	r2, #80	; 0x50
 8006b92:	5c9b      	ldrb	r3, [r3, r2]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_ADC_ConfigChannel+0x18>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e06c      	b.n	8006c76 <HAL_ADC_ConfigChannel+0xf2>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2250      	movs	r2, #80	; 0x50
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	2204      	movs	r2, #4
 8006bac:	4013      	ands	r3, r2
 8006bae:	d00b      	beq.n	8006bc8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2250      	movs	r2, #80	; 0x50
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e056      	b.n	8006c76 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	4a2c      	ldr	r2, [pc, #176]	; (8006c80 <HAL_ADC_ConfigChannel+0xfc>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d028      	beq.n	8006c24 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	035b      	lsls	r3, r3, #13
 8006bde:	0b5a      	lsrs	r2, r3, #13
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	2380      	movs	r3, #128	; 0x80
 8006bee:	02db      	lsls	r3, r3, #11
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d009      	beq.n	8006c08 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006bf4:	4b23      	ldr	r3, [pc, #140]	; (8006c84 <HAL_ADC_ConfigChannel+0x100>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	4b22      	ldr	r3, [pc, #136]	; (8006c84 <HAL_ADC_ConfigChannel+0x100>)
 8006bfa:	2180      	movs	r1, #128	; 0x80
 8006bfc:	0409      	lsls	r1, r1, #16
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006c02:	200a      	movs	r0, #10
 8006c04:	f000 f930 	bl	8006e68 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	2380      	movs	r3, #128	; 0x80
 8006c0e:	029b      	lsls	r3, r3, #10
 8006c10:	4013      	ands	r3, r2
 8006c12:	d02b      	beq.n	8006c6c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006c14:	4b1b      	ldr	r3, [pc, #108]	; (8006c84 <HAL_ADC_ConfigChannel+0x100>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <HAL_ADC_ConfigChannel+0x100>)
 8006c1a:	2180      	movs	r1, #128	; 0x80
 8006c1c:	03c9      	lsls	r1, r1, #15
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	e023      	b.n	8006c6c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	035b      	lsls	r3, r3, #13
 8006c30:	0b5b      	lsrs	r3, r3, #13
 8006c32:	43d9      	mvns	r1, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	400a      	ands	r2, r1
 8006c3a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	02db      	lsls	r3, r3, #11
 8006c44:	4013      	ands	r3, r2
 8006c46:	d005      	beq.n	8006c54 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006c48:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <HAL_ADC_ConfigChannel+0x100>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	4b0d      	ldr	r3, [pc, #52]	; (8006c84 <HAL_ADC_ConfigChannel+0x100>)
 8006c4e:	490e      	ldr	r1, [pc, #56]	; (8006c88 <HAL_ADC_ConfigChannel+0x104>)
 8006c50:	400a      	ands	r2, r1
 8006c52:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	2380      	movs	r3, #128	; 0x80
 8006c5a:	029b      	lsls	r3, r3, #10
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d005      	beq.n	8006c6c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006c60:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <HAL_ADC_ConfigChannel+0x100>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <HAL_ADC_ConfigChannel+0x100>)
 8006c66:	4909      	ldr	r1, [pc, #36]	; (8006c8c <HAL_ADC_ConfigChannel+0x108>)
 8006c68:	400a      	ands	r2, r1
 8006c6a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2250      	movs	r2, #80	; 0x50
 8006c70:	2100      	movs	r1, #0
 8006c72:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	0018      	movs	r0, r3
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	b002      	add	sp, #8
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	46c0      	nop			; (mov r8, r8)
 8006c80:	00001001 	.word	0x00001001
 8006c84:	40012708 	.word	0x40012708
 8006c88:	ff7fffff 	.word	0xff7fffff
 8006c8c:	ffbfffff 	.word	0xffbfffff

08006c90 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	2203      	movs	r2, #3
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d108      	bne.n	8006cbc <ADC_Enable+0x2c>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <ADC_Enable+0x2c>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e000      	b.n	8006cbe <ADC_Enable+0x2e>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d146      	bne.n	8006d50 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	4a24      	ldr	r2, [pc, #144]	; (8006d5c <ADC_Enable+0xcc>)
 8006cca:	4013      	ands	r3, r2
 8006ccc:	d00d      	beq.n	8006cea <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd2:	2210      	movs	r2, #16
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cde:	2201      	movs	r2, #1
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e033      	b.n	8006d52 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	f000 f8b4 	bl	8006e68 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d00:	f7ff fd1a 	bl	8006738 <HAL_GetTick>
 8006d04:	0003      	movs	r3, r0
 8006d06:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006d08:	e01b      	b.n	8006d42 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006d0a:	f7ff fd15 	bl	8006738 <HAL_GetTick>
 8006d0e:	0002      	movs	r2, r0
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b0a      	cmp	r3, #10
 8006d16:	d914      	bls.n	8006d42 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	4013      	ands	r3, r2
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d00d      	beq.n	8006d42 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2a:	2210      	movs	r2, #16
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d36:	2201      	movs	r2, #1
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e007      	b.n	8006d52 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d1dc      	bne.n	8006d0a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	0018      	movs	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b004      	add	sp, #16
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	80000017 	.word	0x80000017

08006d60 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d72:	2250      	movs	r2, #80	; 0x50
 8006d74:	4013      	ands	r3, r2
 8006d76:	d141      	bne.n	8006dfc <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7c:	2280      	movs	r2, #128	; 0x80
 8006d7e:	0092      	lsls	r2, r2, #2
 8006d80:	431a      	orrs	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	23c0      	movs	r3, #192	; 0xc0
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	4013      	ands	r3, r2
 8006d92:	d12e      	bne.n	8006df2 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d129      	bne.n	8006df2 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2208      	movs	r2, #8
 8006da6:	4013      	ands	r3, r2
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d122      	bne.n	8006df2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	2204      	movs	r2, #4
 8006db4:	4013      	ands	r3, r2
 8006db6:	d110      	bne.n	8006dda <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	210c      	movs	r1, #12
 8006dc4:	438a      	bics	r2, r1
 8006dc6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dcc:	4a10      	ldr	r2, [pc, #64]	; (8006e10 <ADC_DMAConvCplt+0xb0>)
 8006dce:	4013      	ands	r3, r2
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	655a      	str	r2, [r3, #84]	; 0x54
 8006dd8:	e00b      	b.n	8006df2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dde:	2220      	movs	r2, #32
 8006de0:	431a      	orrs	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dea:	2201      	movs	r2, #1
 8006dec:	431a      	orrs	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	0018      	movs	r0, r3
 8006df6:	f7ff fead 	bl	8006b54 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006dfa:	e005      	b.n	8006e08 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	0010      	movs	r0, r2
 8006e06:	4798      	blx	r3
}
 8006e08:	46c0      	nop			; (mov r8, r8)
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	b004      	add	sp, #16
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	fffffefe 	.word	0xfffffefe

08006e14 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	0018      	movs	r0, r3
 8006e26:	f7ff fe9d 	bl	8006b64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	b004      	add	sp, #16
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e44:	2240      	movs	r2, #64	; 0x40
 8006e46:	431a      	orrs	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e50:	2204      	movs	r2, #4
 8006e52:	431a      	orrs	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	f7ff fe8a 	bl	8006b74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e60:	46c0      	nop			; (mov r8, r8)
 8006e62:	46bd      	mov	sp, r7
 8006e64:	b004      	add	sp, #16
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006e70:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <ADC_DelayMicroSecond+0x38>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	490b      	ldr	r1, [pc, #44]	; (8006ea4 <ADC_DelayMicroSecond+0x3c>)
 8006e76:	0018      	movs	r0, r3
 8006e78:	f7f9 f962 	bl	8000140 <__udivsi3>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	001a      	movs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4353      	muls	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8006e86:	e002      	b.n	8006e8e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1f9      	bne.n	8006e88 <ADC_DelayMicroSecond+0x20>
  } 
}
 8006e94:	46c0      	nop			; (mov r8, r8)
 8006e96:	46c0      	nop			; (mov r8, r8)
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	b004      	add	sp, #16
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	46c0      	nop			; (mov r8, r8)
 8006ea0:	20000024 	.word	0x20000024
 8006ea4:	000f4240 	.word	0x000f4240

08006ea8 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006eb2:	2317      	movs	r3, #23
 8006eb4:	18fb      	adds	r3, r7, r3
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2250      	movs	r2, #80	; 0x50
 8006ec6:	5c9b      	ldrb	r3, [r3, r2]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_ADCEx_Calibration_Start+0x28>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e083      	b.n	8006fd8 <HAL_ADCEx_Calibration_Start+0x130>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2250      	movs	r2, #80	; 0x50
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2203      	movs	r2, #3
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d108      	bne.n	8006ef8 <HAL_ADCEx_Calibration_Start+0x50>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2201      	movs	r2, #1
 8006eee:	4013      	ands	r3, r2
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_ADCEx_Calibration_Start+0x50>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <HAL_ADCEx_Calibration_Start+0x52>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d15b      	bne.n	8006fb6 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f02:	4a37      	ldr	r2, [pc, #220]	; (8006fe0 <HAL_ADCEx_Calibration_Start+0x138>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	2202      	movs	r2, #2
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	2203      	movs	r2, #3
 8006f16:	4013      	ands	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2103      	movs	r1, #3
 8006f26:	438a      	bics	r2, r1
 8006f28:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2180      	movs	r1, #128	; 0x80
 8006f36:	0609      	lsls	r1, r1, #24
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006f3c:	f7ff fbfc 	bl	8006738 <HAL_GetTick>
 8006f40:	0003      	movs	r3, r0
 8006f42:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006f44:	e01d      	b.n	8006f82 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006f46:	f7ff fbf7 	bl	8006738 <HAL_GetTick>
 8006f4a:	0002      	movs	r2, r0
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b0a      	cmp	r3, #10
 8006f52:	d916      	bls.n	8006f82 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	0fdb      	lsrs	r3, r3, #31
 8006f5c:	07da      	lsls	r2, r3, #31
 8006f5e:	2380      	movs	r3, #128	; 0x80
 8006f60:	061b      	lsls	r3, r3, #24
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d10d      	bne.n	8006f82 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6a:	2212      	movs	r2, #18
 8006f6c:	4393      	bics	r3, r2
 8006f6e:	2210      	movs	r2, #16
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2250      	movs	r2, #80	; 0x50
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e02a      	b.n	8006fd8 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	0fdb      	lsrs	r3, r3, #31
 8006f8a:	07da      	lsls	r2, r3, #31
 8006f8c:	2380      	movs	r3, #128	; 0x80
 8006f8e:	061b      	lsls	r3, r3, #24
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d0d8      	beq.n	8006f46 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68d9      	ldr	r1, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa8:	2203      	movs	r2, #3
 8006faa:	4393      	bics	r3, r2
 8006fac:	2201      	movs	r2, #1
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	655a      	str	r2, [r3, #84]	; 0x54
 8006fb4:	e009      	b.n	8006fca <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fba:	2220      	movs	r2, #32
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8006fc2:	2317      	movs	r3, #23
 8006fc4:	18fb      	adds	r3, r7, r3
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2250      	movs	r2, #80	; 0x50
 8006fce:	2100      	movs	r1, #0
 8006fd0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006fd2:	2317      	movs	r3, #23
 8006fd4:	18fb      	adds	r3, r7, r3
 8006fd6:	781b      	ldrb	r3, [r3, #0]
}
 8006fd8:	0018      	movs	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	b006      	add	sp, #24
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	fffffefd 	.word	0xfffffefd

08006fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	0002      	movs	r2, r0
 8006fec:	1dfb      	adds	r3, r7, #7
 8006fee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006ff0:	1dfb      	adds	r3, r7, #7
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ff6:	d809      	bhi.n	800700c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ff8:	1dfb      	adds	r3, r7, #7
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	001a      	movs	r2, r3
 8006ffe:	231f      	movs	r3, #31
 8007000:	401a      	ands	r2, r3
 8007002:	4b04      	ldr	r3, [pc, #16]	; (8007014 <__NVIC_EnableIRQ+0x30>)
 8007004:	2101      	movs	r1, #1
 8007006:	4091      	lsls	r1, r2
 8007008:	000a      	movs	r2, r1
 800700a:	601a      	str	r2, [r3, #0]
  }
}
 800700c:	46c0      	nop			; (mov r8, r8)
 800700e:	46bd      	mov	sp, r7
 8007010:	b002      	add	sp, #8
 8007012:	bd80      	pop	{r7, pc}
 8007014:	e000e100 	.word	0xe000e100

08007018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007018:	b590      	push	{r4, r7, lr}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	0002      	movs	r2, r0
 8007020:	6039      	str	r1, [r7, #0]
 8007022:	1dfb      	adds	r3, r7, #7
 8007024:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007026:	1dfb      	adds	r3, r7, #7
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b7f      	cmp	r3, #127	; 0x7f
 800702c:	d828      	bhi.n	8007080 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800702e:	4a2f      	ldr	r2, [pc, #188]	; (80070ec <__NVIC_SetPriority+0xd4>)
 8007030:	1dfb      	adds	r3, r7, #7
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	b25b      	sxtb	r3, r3
 8007036:	089b      	lsrs	r3, r3, #2
 8007038:	33c0      	adds	r3, #192	; 0xc0
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	589b      	ldr	r3, [r3, r2]
 800703e:	1dfa      	adds	r2, r7, #7
 8007040:	7812      	ldrb	r2, [r2, #0]
 8007042:	0011      	movs	r1, r2
 8007044:	2203      	movs	r2, #3
 8007046:	400a      	ands	r2, r1
 8007048:	00d2      	lsls	r2, r2, #3
 800704a:	21ff      	movs	r1, #255	; 0xff
 800704c:	4091      	lsls	r1, r2
 800704e:	000a      	movs	r2, r1
 8007050:	43d2      	mvns	r2, r2
 8007052:	401a      	ands	r2, r3
 8007054:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	019b      	lsls	r3, r3, #6
 800705a:	22ff      	movs	r2, #255	; 0xff
 800705c:	401a      	ands	r2, r3
 800705e:	1dfb      	adds	r3, r7, #7
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	0018      	movs	r0, r3
 8007064:	2303      	movs	r3, #3
 8007066:	4003      	ands	r3, r0
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800706c:	481f      	ldr	r0, [pc, #124]	; (80070ec <__NVIC_SetPriority+0xd4>)
 800706e:	1dfb      	adds	r3, r7, #7
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	b25b      	sxtb	r3, r3
 8007074:	089b      	lsrs	r3, r3, #2
 8007076:	430a      	orrs	r2, r1
 8007078:	33c0      	adds	r3, #192	; 0xc0
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800707e:	e031      	b.n	80070e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007080:	4a1b      	ldr	r2, [pc, #108]	; (80070f0 <__NVIC_SetPriority+0xd8>)
 8007082:	1dfb      	adds	r3, r7, #7
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	0019      	movs	r1, r3
 8007088:	230f      	movs	r3, #15
 800708a:	400b      	ands	r3, r1
 800708c:	3b08      	subs	r3, #8
 800708e:	089b      	lsrs	r3, r3, #2
 8007090:	3306      	adds	r3, #6
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	18d3      	adds	r3, r2, r3
 8007096:	3304      	adds	r3, #4
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	1dfa      	adds	r2, r7, #7
 800709c:	7812      	ldrb	r2, [r2, #0]
 800709e:	0011      	movs	r1, r2
 80070a0:	2203      	movs	r2, #3
 80070a2:	400a      	ands	r2, r1
 80070a4:	00d2      	lsls	r2, r2, #3
 80070a6:	21ff      	movs	r1, #255	; 0xff
 80070a8:	4091      	lsls	r1, r2
 80070aa:	000a      	movs	r2, r1
 80070ac:	43d2      	mvns	r2, r2
 80070ae:	401a      	ands	r2, r3
 80070b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	019b      	lsls	r3, r3, #6
 80070b6:	22ff      	movs	r2, #255	; 0xff
 80070b8:	401a      	ands	r2, r3
 80070ba:	1dfb      	adds	r3, r7, #7
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	0018      	movs	r0, r3
 80070c0:	2303      	movs	r3, #3
 80070c2:	4003      	ands	r3, r0
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070c8:	4809      	ldr	r0, [pc, #36]	; (80070f0 <__NVIC_SetPriority+0xd8>)
 80070ca:	1dfb      	adds	r3, r7, #7
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	001c      	movs	r4, r3
 80070d0:	230f      	movs	r3, #15
 80070d2:	4023      	ands	r3, r4
 80070d4:	3b08      	subs	r3, #8
 80070d6:	089b      	lsrs	r3, r3, #2
 80070d8:	430a      	orrs	r2, r1
 80070da:	3306      	adds	r3, #6
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	18c3      	adds	r3, r0, r3
 80070e0:	3304      	adds	r3, #4
 80070e2:	601a      	str	r2, [r3, #0]
}
 80070e4:	46c0      	nop			; (mov r8, r8)
 80070e6:	46bd      	mov	sp, r7
 80070e8:	b003      	add	sp, #12
 80070ea:	bd90      	pop	{r4, r7, pc}
 80070ec:	e000e100 	.word	0xe000e100
 80070f0:	e000ed00 	.word	0xe000ed00

080070f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	1e5a      	subs	r2, r3, #1
 8007100:	2380      	movs	r3, #128	; 0x80
 8007102:	045b      	lsls	r3, r3, #17
 8007104:	429a      	cmp	r2, r3
 8007106:	d301      	bcc.n	800710c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007108:	2301      	movs	r3, #1
 800710a:	e010      	b.n	800712e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800710c:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <SysTick_Config+0x44>)
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	3a01      	subs	r2, #1
 8007112:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007114:	2301      	movs	r3, #1
 8007116:	425b      	negs	r3, r3
 8007118:	2103      	movs	r1, #3
 800711a:	0018      	movs	r0, r3
 800711c:	f7ff ff7c 	bl	8007018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <SysTick_Config+0x44>)
 8007122:	2200      	movs	r2, #0
 8007124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007126:	4b04      	ldr	r3, [pc, #16]	; (8007138 <SysTick_Config+0x44>)
 8007128:	2207      	movs	r2, #7
 800712a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800712c:	2300      	movs	r3, #0
}
 800712e:	0018      	movs	r0, r3
 8007130:	46bd      	mov	sp, r7
 8007132:	b002      	add	sp, #8
 8007134:	bd80      	pop	{r7, pc}
 8007136:	46c0      	nop			; (mov r8, r8)
 8007138:	e000e010 	.word	0xe000e010

0800713c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	607a      	str	r2, [r7, #4]
 8007146:	210f      	movs	r1, #15
 8007148:	187b      	adds	r3, r7, r1
 800714a:	1c02      	adds	r2, r0, #0
 800714c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	187b      	adds	r3, r7, r1
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	b25b      	sxtb	r3, r3
 8007156:	0011      	movs	r1, r2
 8007158:	0018      	movs	r0, r3
 800715a:	f7ff ff5d 	bl	8007018 <__NVIC_SetPriority>
}
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	46bd      	mov	sp, r7
 8007162:	b004      	add	sp, #16
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	0002      	movs	r2, r0
 800716e:	1dfb      	adds	r3, r7, #7
 8007170:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007172:	1dfb      	adds	r3, r7, #7
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	b25b      	sxtb	r3, r3
 8007178:	0018      	movs	r0, r3
 800717a:	f7ff ff33 	bl	8006fe4 <__NVIC_EnableIRQ>
}
 800717e:	46c0      	nop			; (mov r8, r8)
 8007180:	46bd      	mov	sp, r7
 8007182:	b002      	add	sp, #8
 8007184:	bd80      	pop	{r7, pc}

08007186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	0018      	movs	r0, r3
 8007192:	f7ff ffaf 	bl	80070f4 <SysTick_Config>
 8007196:	0003      	movs	r3, r0
}
 8007198:	0018      	movs	r0, r3
 800719a:	46bd      	mov	sp, r7
 800719c:	b002      	add	sp, #8
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e061      	b.n	8007276 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a32      	ldr	r2, [pc, #200]	; (8007280 <HAL_DMA_Init+0xe0>)
 80071b8:	4694      	mov	ip, r2
 80071ba:	4463      	add	r3, ip
 80071bc:	2114      	movs	r1, #20
 80071be:	0018      	movs	r0, r3
 80071c0:	f7f8 ffbe 	bl	8000140 <__udivsi3>
 80071c4:	0003      	movs	r3, r0
 80071c6:	009a      	lsls	r2, r3, #2
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a2d      	ldr	r2, [pc, #180]	; (8007284 <HAL_DMA_Init+0xe4>)
 80071d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2225      	movs	r2, #37	; 0x25
 80071d6:	2102      	movs	r1, #2
 80071d8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4a28      	ldr	r2, [pc, #160]	; (8007288 <HAL_DMA_Init+0xe8>)
 80071e6:	4013      	ands	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80071f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800720a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	4313      	orrs	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	2380      	movs	r3, #128	; 0x80
 8007226:	01db      	lsls	r3, r3, #7
 8007228:	429a      	cmp	r2, r3
 800722a:	d018      	beq.n	800725e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800722c:	4b17      	ldr	r3, [pc, #92]	; (800728c <HAL_DMA_Init+0xec>)
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007234:	211c      	movs	r1, #28
 8007236:	400b      	ands	r3, r1
 8007238:	210f      	movs	r1, #15
 800723a:	4099      	lsls	r1, r3
 800723c:	000b      	movs	r3, r1
 800723e:	43d9      	mvns	r1, r3
 8007240:	4b12      	ldr	r3, [pc, #72]	; (800728c <HAL_DMA_Init+0xec>)
 8007242:	400a      	ands	r2, r1
 8007244:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007246:	4b11      	ldr	r3, [pc, #68]	; (800728c <HAL_DMA_Init+0xec>)
 8007248:	6819      	ldr	r1, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	201c      	movs	r0, #28
 8007254:	4003      	ands	r3, r0
 8007256:	409a      	lsls	r2, r3
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <HAL_DMA_Init+0xec>)
 800725a:	430a      	orrs	r2, r1
 800725c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2225      	movs	r2, #37	; 0x25
 8007268:	2101      	movs	r1, #1
 800726a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2224      	movs	r2, #36	; 0x24
 8007270:	2100      	movs	r1, #0
 8007272:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	0018      	movs	r0, r3
 8007278:	46bd      	mov	sp, r7
 800727a:	b004      	add	sp, #16
 800727c:	bd80      	pop	{r7, pc}
 800727e:	46c0      	nop			; (mov r8, r8)
 8007280:	bffdfff8 	.word	0xbffdfff8
 8007284:	40020000 	.word	0x40020000
 8007288:	ffff800f 	.word	0xffff800f
 800728c:	400200a8 	.word	0x400200a8

08007290 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800729e:	2317      	movs	r3, #23
 80072a0:	18fb      	adds	r3, r7, r3
 80072a2:	2200      	movs	r2, #0
 80072a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2224      	movs	r2, #36	; 0x24
 80072aa:	5c9b      	ldrb	r3, [r3, r2]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_DMA_Start_IT+0x24>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e04f      	b.n	8007354 <HAL_DMA_Start_IT+0xc4>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2224      	movs	r2, #36	; 0x24
 80072b8:	2101      	movs	r1, #1
 80072ba:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2225      	movs	r2, #37	; 0x25
 80072c0:	5c9b      	ldrb	r3, [r3, r2]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d13a      	bne.n	800733e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2225      	movs	r2, #37	; 0x25
 80072cc:	2102      	movs	r1, #2
 80072ce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2101      	movs	r1, #1
 80072e2:	438a      	bics	r2, r1
 80072e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	68b9      	ldr	r1, [r7, #8]
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 f8e3 	bl	80074b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d008      	beq.n	800730c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	210e      	movs	r1, #14
 8007306:	430a      	orrs	r2, r1
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	e00f      	b.n	800732c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2104      	movs	r1, #4
 8007318:	438a      	bics	r2, r1
 800731a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	210a      	movs	r1, #10
 8007328:	430a      	orrs	r2, r1
 800732a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2101      	movs	r1, #1
 8007338:	430a      	orrs	r2, r1
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	e007      	b.n	800734e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2224      	movs	r2, #36	; 0x24
 8007342:	2100      	movs	r1, #0
 8007344:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007346:	2317      	movs	r3, #23
 8007348:	18fb      	adds	r3, r7, r3
 800734a:	2202      	movs	r2, #2
 800734c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800734e:	2317      	movs	r3, #23
 8007350:	18fb      	adds	r3, r7, r3
 8007352:	781b      	ldrb	r3, [r3, #0]
}
 8007354:	0018      	movs	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	b006      	add	sp, #24
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007378:	221c      	movs	r2, #28
 800737a:	4013      	ands	r3, r2
 800737c:	2204      	movs	r2, #4
 800737e:	409a      	lsls	r2, r3
 8007380:	0013      	movs	r3, r2
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	4013      	ands	r3, r2
 8007386:	d026      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x7a>
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2204      	movs	r2, #4
 800738c:	4013      	ands	r3, r2
 800738e:	d022      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2220      	movs	r2, #32
 8007398:	4013      	ands	r3, r2
 800739a:	d107      	bne.n	80073ac <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2104      	movs	r1, #4
 80073a8:	438a      	bics	r2, r1
 80073aa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b0:	221c      	movs	r2, #28
 80073b2:	401a      	ands	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	2104      	movs	r1, #4
 80073ba:	4091      	lsls	r1, r2
 80073bc:	000a      	movs	r2, r1
 80073be:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d100      	bne.n	80073ca <HAL_DMA_IRQHandler+0x6e>
 80073c8:	e071      	b.n	80074ae <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	0010      	movs	r0, r2
 80073d2:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80073d4:	e06b      	b.n	80074ae <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073da:	221c      	movs	r2, #28
 80073dc:	4013      	ands	r3, r2
 80073de:	2202      	movs	r2, #2
 80073e0:	409a      	lsls	r2, r3
 80073e2:	0013      	movs	r3, r2
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	4013      	ands	r3, r2
 80073e8:	d02d      	beq.n	8007446 <HAL_DMA_IRQHandler+0xea>
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2202      	movs	r2, #2
 80073ee:	4013      	ands	r3, r2
 80073f0:	d029      	beq.n	8007446 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2220      	movs	r2, #32
 80073fa:	4013      	ands	r3, r2
 80073fc:	d10b      	bne.n	8007416 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	210a      	movs	r1, #10
 800740a:	438a      	bics	r2, r1
 800740c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2225      	movs	r2, #37	; 0x25
 8007412:	2101      	movs	r1, #1
 8007414:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	221c      	movs	r2, #28
 800741c:	401a      	ands	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	2102      	movs	r1, #2
 8007424:	4091      	lsls	r1, r2
 8007426:	000a      	movs	r2, r1
 8007428:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2224      	movs	r2, #36	; 0x24
 800742e:	2100      	movs	r1, #0
 8007430:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d039      	beq.n	80074ae <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	0010      	movs	r0, r2
 8007442:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007444:	e033      	b.n	80074ae <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744a:	221c      	movs	r2, #28
 800744c:	4013      	ands	r3, r2
 800744e:	2208      	movs	r2, #8
 8007450:	409a      	lsls	r2, r3
 8007452:	0013      	movs	r3, r2
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4013      	ands	r3, r2
 8007458:	d02a      	beq.n	80074b0 <HAL_DMA_IRQHandler+0x154>
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2208      	movs	r2, #8
 800745e:	4013      	ands	r3, r2
 8007460:	d026      	beq.n	80074b0 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	210e      	movs	r1, #14
 800746e:	438a      	bics	r2, r1
 8007470:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007476:	221c      	movs	r2, #28
 8007478:	401a      	ands	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747e:	2101      	movs	r1, #1
 8007480:	4091      	lsls	r1, r2
 8007482:	000a      	movs	r2, r1
 8007484:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2225      	movs	r2, #37	; 0x25
 8007490:	2101      	movs	r1, #1
 8007492:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2224      	movs	r2, #36	; 0x24
 8007498:	2100      	movs	r1, #0
 800749a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d005      	beq.n	80074b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	0010      	movs	r0, r2
 80074ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	46c0      	nop			; (mov r8, r8)
}
 80074b2:	46bd      	mov	sp, r7
 80074b4:	b004      	add	sp, #16
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ca:	221c      	movs	r2, #28
 80074cc:	401a      	ands	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	2101      	movs	r1, #1
 80074d4:	4091      	lsls	r1, r2
 80074d6:	000a      	movs	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	2b10      	cmp	r3, #16
 80074e8:	d108      	bne.n	80074fc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80074fa:	e007      	b.n	800750c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	60da      	str	r2, [r3, #12]
}
 800750c:	46c0      	nop			; (mov r8, r8)
 800750e:	46bd      	mov	sp, r7
 8007510:	b004      	add	sp, #16
 8007512:	bd80      	pop	{r7, pc}

08007514 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800751c:	f7ff f90c 	bl	8006738 <HAL_GetTick>
 8007520:	0003      	movs	r3, r0
 8007522:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007524:	e00f      	b.n	8007546 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3301      	adds	r3, #1
 800752a:	d00c      	beq.n	8007546 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d007      	beq.n	8007542 <FLASH_WaitForLastOperation+0x2e>
 8007532:	f7ff f901 	bl	8006738 <HAL_GetTick>
 8007536:	0002      	movs	r2, r0
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	429a      	cmp	r2, r3
 8007540:	d201      	bcs.n	8007546 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e052      	b.n	80075ec <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007546:	4b2b      	ldr	r3, [pc, #172]	; (80075f4 <FLASH_WaitForLastOperation+0xe0>)
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	2201      	movs	r2, #1
 800754c:	4013      	ands	r3, r2
 800754e:	2b01      	cmp	r3, #1
 8007550:	d0e9      	beq.n	8007526 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007552:	4b28      	ldr	r3, [pc, #160]	; (80075f4 <FLASH_WaitForLastOperation+0xe0>)
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	2202      	movs	r2, #2
 8007558:	4013      	ands	r3, r2
 800755a:	2b02      	cmp	r3, #2
 800755c:	d102      	bne.n	8007564 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800755e:	4b25      	ldr	r3, [pc, #148]	; (80075f4 <FLASH_WaitForLastOperation+0xe0>)
 8007560:	2202      	movs	r2, #2
 8007562:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8007564:	4b23      	ldr	r3, [pc, #140]	; (80075f4 <FLASH_WaitForLastOperation+0xe0>)
 8007566:	699a      	ldr	r2, [r3, #24]
 8007568:	2380      	movs	r3, #128	; 0x80
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	401a      	ands	r2, r3
 800756e:	2380      	movs	r3, #128	; 0x80
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	429a      	cmp	r2, r3
 8007574:	d035      	beq.n	80075e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8007576:	4b1f      	ldr	r3, [pc, #124]	; (80075f4 <FLASH_WaitForLastOperation+0xe0>)
 8007578:	699a      	ldr	r2, [r3, #24]
 800757a:	2380      	movs	r3, #128	; 0x80
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8007580:	2380      	movs	r3, #128	; 0x80
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	429a      	cmp	r2, r3
 8007586:	d02c      	beq.n	80075e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8007588:	4b1a      	ldr	r3, [pc, #104]	; (80075f4 <FLASH_WaitForLastOperation+0xe0>)
 800758a:	699a      	ldr	r2, [r3, #24]
 800758c:	2380      	movs	r3, #128	; 0x80
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8007592:	2380      	movs	r3, #128	; 0x80
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	429a      	cmp	r2, r3
 8007598:	d023      	beq.n	80075e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800759a:	4b16      	ldr	r3, [pc, #88]	; (80075f4 <FLASH_WaitForLastOperation+0xe0>)
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	2380      	movs	r3, #128	; 0x80
 80075a0:	011b      	lsls	r3, r3, #4
 80075a2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	011b      	lsls	r3, r3, #4
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d01a      	beq.n	80075e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80075ac:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <FLASH_WaitForLastOperation+0xe0>)
 80075ae:	699a      	ldr	r2, [r3, #24]
 80075b0:	2380      	movs	r3, #128	; 0x80
 80075b2:	019b      	lsls	r3, r3, #6
 80075b4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80075b6:	2380      	movs	r3, #128	; 0x80
 80075b8:	019b      	lsls	r3, r3, #6
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d011      	beq.n	80075e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80075be:	4b0d      	ldr	r3, [pc, #52]	; (80075f4 <FLASH_WaitForLastOperation+0xe0>)
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	2380      	movs	r3, #128	; 0x80
 80075c4:	029b      	lsls	r3, r3, #10
 80075c6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80075c8:	2380      	movs	r3, #128	; 0x80
 80075ca:	029b      	lsls	r3, r3, #10
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d008      	beq.n	80075e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80075d0:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <FLASH_WaitForLastOperation+0xe0>)
 80075d2:	699a      	ldr	r2, [r3, #24]
 80075d4:	2380      	movs	r3, #128	; 0x80
 80075d6:	025b      	lsls	r3, r3, #9
 80075d8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80075da:	2380      	movs	r3, #128	; 0x80
 80075dc:	025b      	lsls	r3, r3, #9
 80075de:	429a      	cmp	r2, r3
 80075e0:	d103      	bne.n	80075ea <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80075e2:	f000 f809 	bl	80075f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	0018      	movs	r0, r3
 80075ee:	46bd      	mov	sp, r7
 80075f0:	b004      	add	sp, #16
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	40022000 	.word	0x40022000

080075f8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8007602:	4b49      	ldr	r3, [pc, #292]	; (8007728 <FLASH_SetErrorCode+0x130>)
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	2380      	movs	r3, #128	; 0x80
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	401a      	ands	r2, r3
 800760c:	2380      	movs	r3, #128	; 0x80
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	429a      	cmp	r2, r3
 8007612:	d10a      	bne.n	800762a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007614:	4b45      	ldr	r3, [pc, #276]	; (800772c <FLASH_SetErrorCode+0x134>)
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	2202      	movs	r2, #2
 800761a:	431a      	orrs	r2, r3
 800761c:	4b43      	ldr	r3, [pc, #268]	; (800772c <FLASH_SetErrorCode+0x134>)
 800761e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2280      	movs	r2, #128	; 0x80
 8007624:	0052      	lsls	r2, r2, #1
 8007626:	4313      	orrs	r3, r2
 8007628:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800762a:	4b3f      	ldr	r3, [pc, #252]	; (8007728 <FLASH_SetErrorCode+0x130>)
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	2380      	movs	r3, #128	; 0x80
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	401a      	ands	r2, r3
 8007634:	2380      	movs	r3, #128	; 0x80
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	429a      	cmp	r2, r3
 800763a:	d10a      	bne.n	8007652 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800763c:	4b3b      	ldr	r3, [pc, #236]	; (800772c <FLASH_SetErrorCode+0x134>)
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	2201      	movs	r2, #1
 8007642:	431a      	orrs	r2, r3
 8007644:	4b39      	ldr	r3, [pc, #228]	; (800772c <FLASH_SetErrorCode+0x134>)
 8007646:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2280      	movs	r2, #128	; 0x80
 800764c:	0092      	lsls	r2, r2, #2
 800764e:	4313      	orrs	r3, r2
 8007650:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8007652:	4b35      	ldr	r3, [pc, #212]	; (8007728 <FLASH_SetErrorCode+0x130>)
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	2380      	movs	r3, #128	; 0x80
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	401a      	ands	r2, r3
 800765c:	2380      	movs	r3, #128	; 0x80
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	429a      	cmp	r2, r3
 8007662:	d10a      	bne.n	800767a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8007664:	4b31      	ldr	r3, [pc, #196]	; (800772c <FLASH_SetErrorCode+0x134>)
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	2208      	movs	r2, #8
 800766a:	431a      	orrs	r2, r3
 800766c:	4b2f      	ldr	r3, [pc, #188]	; (800772c <FLASH_SetErrorCode+0x134>)
 800766e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2280      	movs	r2, #128	; 0x80
 8007674:	00d2      	lsls	r2, r2, #3
 8007676:	4313      	orrs	r3, r2
 8007678:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800767a:	4b2b      	ldr	r3, [pc, #172]	; (8007728 <FLASH_SetErrorCode+0x130>)
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	2380      	movs	r3, #128	; 0x80
 8007680:	011b      	lsls	r3, r3, #4
 8007682:	401a      	ands	r2, r3
 8007684:	2380      	movs	r3, #128	; 0x80
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	429a      	cmp	r2, r3
 800768a:	d10a      	bne.n	80076a2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800768c:	4b27      	ldr	r3, [pc, #156]	; (800772c <FLASH_SetErrorCode+0x134>)
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	2204      	movs	r2, #4
 8007692:	431a      	orrs	r2, r3
 8007694:	4b25      	ldr	r3, [pc, #148]	; (800772c <FLASH_SetErrorCode+0x134>)
 8007696:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2280      	movs	r2, #128	; 0x80
 800769c:	0112      	lsls	r2, r2, #4
 800769e:	4313      	orrs	r3, r2
 80076a0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80076a2:	4b21      	ldr	r3, [pc, #132]	; (8007728 <FLASH_SetErrorCode+0x130>)
 80076a4:	699a      	ldr	r2, [r3, #24]
 80076a6:	2380      	movs	r3, #128	; 0x80
 80076a8:	019b      	lsls	r3, r3, #6
 80076aa:	401a      	ands	r2, r3
 80076ac:	2380      	movs	r3, #128	; 0x80
 80076ae:	019b      	lsls	r3, r3, #6
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d10a      	bne.n	80076ca <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80076b4:	4b1d      	ldr	r3, [pc, #116]	; (800772c <FLASH_SetErrorCode+0x134>)
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	2210      	movs	r2, #16
 80076ba:	431a      	orrs	r2, r3
 80076bc:	4b1b      	ldr	r3, [pc, #108]	; (800772c <FLASH_SetErrorCode+0x134>)
 80076be:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2280      	movs	r2, #128	; 0x80
 80076c4:	0192      	lsls	r2, r2, #6
 80076c6:	4313      	orrs	r3, r2
 80076c8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80076ca:	4b17      	ldr	r3, [pc, #92]	; (8007728 <FLASH_SetErrorCode+0x130>)
 80076cc:	699a      	ldr	r2, [r3, #24]
 80076ce:	2380      	movs	r3, #128	; 0x80
 80076d0:	029b      	lsls	r3, r3, #10
 80076d2:	401a      	ands	r2, r3
 80076d4:	2380      	movs	r3, #128	; 0x80
 80076d6:	029b      	lsls	r3, r3, #10
 80076d8:	429a      	cmp	r2, r3
 80076da:	d109      	bne.n	80076f0 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80076dc:	4b13      	ldr	r3, [pc, #76]	; (800772c <FLASH_SetErrorCode+0x134>)
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	2220      	movs	r2, #32
 80076e2:	431a      	orrs	r2, r3
 80076e4:	4b11      	ldr	r3, [pc, #68]	; (800772c <FLASH_SetErrorCode+0x134>)
 80076e6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	4313      	orrs	r3, r2
 80076ee:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80076f0:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <FLASH_SetErrorCode+0x130>)
 80076f2:	699a      	ldr	r2, [r3, #24]
 80076f4:	2380      	movs	r3, #128	; 0x80
 80076f6:	025b      	lsls	r3, r3, #9
 80076f8:	401a      	ands	r2, r3
 80076fa:	2380      	movs	r3, #128	; 0x80
 80076fc:	025b      	lsls	r3, r3, #9
 80076fe:	429a      	cmp	r2, r3
 8007700:	d10a      	bne.n	8007718 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8007702:	4b0a      	ldr	r3, [pc, #40]	; (800772c <FLASH_SetErrorCode+0x134>)
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	2240      	movs	r2, #64	; 0x40
 8007708:	431a      	orrs	r2, r3
 800770a:	4b08      	ldr	r3, [pc, #32]	; (800772c <FLASH_SetErrorCode+0x134>)
 800770c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2280      	movs	r2, #128	; 0x80
 8007712:	0252      	lsls	r2, r2, #9
 8007714:	4313      	orrs	r3, r2
 8007716:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007718:	4b03      	ldr	r3, [pc, #12]	; (8007728 <FLASH_SetErrorCode+0x130>)
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	619a      	str	r2, [r3, #24]
}  
 800771e:	46c0      	nop			; (mov r8, r8)
 8007720:	46bd      	mov	sp, r7
 8007722:	b002      	add	sp, #8
 8007724:	bd80      	pop	{r7, pc}
 8007726:	46c0      	nop			; (mov r8, r8)
 8007728:	40022000 	.word	0x40022000
 800772c:	2000064c 	.word	0x2000064c

08007730 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8007736:	4b12      	ldr	r3, [pc, #72]	; (8007780 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	4013      	ands	r3, r2
 800773e:	d019      	beq.n	8007774 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007740:	f3ef 8310 	mrs	r3, PRIMASK
 8007744:	607b      	str	r3, [r7, #4]
  return(result);
 8007746:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8007748:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800774a:	b672      	cpsid	i
}
 800774c:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800774e:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8007750:	4a0c      	ldr	r2, [pc, #48]	; (8007784 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8007752:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8007754:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8007756:	4a0c      	ldr	r2, [pc, #48]	; (8007788 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8007758:	60da      	str	r2, [r3, #12]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f383 8810 	msr	PRIMASK, r3
}
 8007764:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8007766:	4b06      	ldr	r3, [pc, #24]	; (8007780 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	4013      	ands	r3, r2
 800776e:	d001      	beq.n	8007774 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e000      	b.n	8007776 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8007774:	2300      	movs	r3, #0
}
 8007776:	0018      	movs	r0, r3
 8007778:	46bd      	mov	sp, r7
 800777a:	b004      	add	sp, #16
 800777c:	bd80      	pop	{r7, pc}
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	40022000 	.word	0x40022000
 8007784:	89abcdef 	.word	0x89abcdef
 8007788:	02030405 	.word	0x02030405

0800778c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8007790:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	4b03      	ldr	r3, [pc, #12]	; (80077a4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8007796:	2101      	movs	r1, #1
 8007798:	430a      	orrs	r2, r1
 800779a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	0018      	movs	r0, r3
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	40022000 	.word	0x40022000

080077a8 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80077a8:	b5b0      	push	{r4, r5, r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80077b4:	2317      	movs	r3, #23
 80077b6:	18fb      	adds	r3, r7, r3
 80077b8:	2201      	movs	r2, #1
 80077ba:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80077bc:	4b24      	ldr	r3, [pc, #144]	; (8007850 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80077be:	7c1b      	ldrb	r3, [r3, #16]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e03e      	b.n	8007846 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80077c8:	4b21      	ldr	r3, [pc, #132]	; (8007850 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80077ca:	2201      	movs	r2, #1
 80077cc:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80077ce:	2517      	movs	r5, #23
 80077d0:	197c      	adds	r4, r7, r5
 80077d2:	4b20      	ldr	r3, [pc, #128]	; (8007854 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80077d4:	0018      	movs	r0, r3
 80077d6:	f7ff fe9d 	bl	8007514 <FLASH_WaitForLastOperation>
 80077da:	0003      	movs	r3, r0
 80077dc:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80077de:	197b      	adds	r3, r7, r5
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d129      	bne.n	800783a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80077e6:	4b1a      	ldr	r3, [pc, #104]	; (8007850 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d103      	bne.n	80077fa <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	e013      	b.n	8007822 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d104      	bne.n	800780a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	b292      	uxth	r2, r2
 8007806:	801a      	strh	r2, [r3, #0]
 8007808:	e00b      	b.n	8007822 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	701a      	strb	r2, [r3, #0]
 8007818:	e003      	b.n	8007822 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800781a:	2317      	movs	r3, #23
 800781c:	18fb      	adds	r3, r7, r3
 800781e:	2201      	movs	r2, #1
 8007820:	701a      	strb	r2, [r3, #0]
    }

    if (status != HAL_OK)
 8007822:	2217      	movs	r2, #23
 8007824:	18bb      	adds	r3, r7, r2
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d006      	beq.n	800783a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800782c:	18bc      	adds	r4, r7, r2
 800782e:	4b09      	ldr	r3, [pc, #36]	; (8007854 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8007830:	0018      	movs	r0, r3
 8007832:	f7ff fe6f 	bl	8007514 <FLASH_WaitForLastOperation>
 8007836:	0003      	movs	r3, r0
 8007838:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800783a:	4b05      	ldr	r3, [pc, #20]	; (8007850 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800783c:	2200      	movs	r2, #0
 800783e:	741a      	strb	r2, [r3, #16]

  return status;
 8007840:	2317      	movs	r3, #23
 8007842:	18fb      	adds	r3, r7, r3
 8007844:	781b      	ldrb	r3, [r3, #0]
}
 8007846:	0018      	movs	r0, r3
 8007848:	46bd      	mov	sp, r7
 800784a:	b006      	add	sp, #24
 800784c:	bdb0      	pop	{r4, r5, r7, pc}
 800784e:	46c0      	nop			; (mov r8, r8)
 8007850:	2000064c 	.word	0x2000064c
 8007854:	0000c350 	.word	0x0000c350

08007858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007862:	2300      	movs	r3, #0
 8007864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007866:	2300      	movs	r3, #0
 8007868:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800786a:	2300      	movs	r3, #0
 800786c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800786e:	e14f      	b.n	8007b10 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2101      	movs	r1, #1
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	4091      	lsls	r1, r2
 800787a:	000a      	movs	r2, r1
 800787c:	4013      	ands	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d100      	bne.n	8007888 <HAL_GPIO_Init+0x30>
 8007886:	e140      	b.n	8007b0a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	2203      	movs	r2, #3
 800788e:	4013      	ands	r3, r2
 8007890:	2b01      	cmp	r3, #1
 8007892:	d005      	beq.n	80078a0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	2203      	movs	r2, #3
 800789a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800789c:	2b02      	cmp	r3, #2
 800789e:	d130      	bne.n	8007902 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	2203      	movs	r2, #3
 80078ac:	409a      	lsls	r2, r3
 80078ae:	0013      	movs	r3, r2
 80078b0:	43da      	mvns	r2, r3
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	4013      	ands	r3, r2
 80078b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	68da      	ldr	r2, [r3, #12]
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	409a      	lsls	r2, r3
 80078c2:	0013      	movs	r3, r2
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078d6:	2201      	movs	r2, #1
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	409a      	lsls	r2, r3
 80078dc:	0013      	movs	r3, r2
 80078de:	43da      	mvns	r2, r3
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	4013      	ands	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	091b      	lsrs	r3, r3, #4
 80078ec:	2201      	movs	r2, #1
 80078ee:	401a      	ands	r2, r3
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	409a      	lsls	r2, r3
 80078f4:	0013      	movs	r3, r2
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	2203      	movs	r2, #3
 8007908:	4013      	ands	r3, r2
 800790a:	2b03      	cmp	r3, #3
 800790c:	d017      	beq.n	800793e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	2203      	movs	r2, #3
 800791a:	409a      	lsls	r2, r3
 800791c:	0013      	movs	r3, r2
 800791e:	43da      	mvns	r2, r3
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	4013      	ands	r3, r2
 8007924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	689a      	ldr	r2, [r3, #8]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	409a      	lsls	r2, r3
 8007930:	0013      	movs	r3, r2
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	4313      	orrs	r3, r2
 8007936:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2203      	movs	r2, #3
 8007944:	4013      	ands	r3, r2
 8007946:	2b02      	cmp	r3, #2
 8007948:	d123      	bne.n	8007992 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	08da      	lsrs	r2, r3, #3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3208      	adds	r2, #8
 8007952:	0092      	lsls	r2, r2, #2
 8007954:	58d3      	ldr	r3, [r2, r3]
 8007956:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2207      	movs	r2, #7
 800795c:	4013      	ands	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	220f      	movs	r2, #15
 8007962:	409a      	lsls	r2, r3
 8007964:	0013      	movs	r3, r2
 8007966:	43da      	mvns	r2, r3
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	4013      	ands	r3, r2
 800796c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	691a      	ldr	r2, [r3, #16]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2107      	movs	r1, #7
 8007976:	400b      	ands	r3, r1
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	409a      	lsls	r2, r3
 800797c:	0013      	movs	r3, r2
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	4313      	orrs	r3, r2
 8007982:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	08da      	lsrs	r2, r3, #3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3208      	adds	r2, #8
 800798c:	0092      	lsls	r2, r2, #2
 800798e:	6939      	ldr	r1, [r7, #16]
 8007990:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	2203      	movs	r2, #3
 800799e:	409a      	lsls	r2, r3
 80079a0:	0013      	movs	r3, r2
 80079a2:	43da      	mvns	r2, r3
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4013      	ands	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2203      	movs	r2, #3
 80079b0:	401a      	ands	r2, r3
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	409a      	lsls	r2, r3
 80079b8:	0013      	movs	r3, r2
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	4313      	orrs	r3, r2
 80079be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	23c0      	movs	r3, #192	; 0xc0
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	4013      	ands	r3, r2
 80079d0:	d100      	bne.n	80079d4 <HAL_GPIO_Init+0x17c>
 80079d2:	e09a      	b.n	8007b0a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079d4:	4b54      	ldr	r3, [pc, #336]	; (8007b28 <HAL_GPIO_Init+0x2d0>)
 80079d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079d8:	4b53      	ldr	r3, [pc, #332]	; (8007b28 <HAL_GPIO_Init+0x2d0>)
 80079da:	2101      	movs	r1, #1
 80079dc:	430a      	orrs	r2, r1
 80079de:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80079e0:	4a52      	ldr	r2, [pc, #328]	; (8007b2c <HAL_GPIO_Init+0x2d4>)
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	089b      	lsrs	r3, r3, #2
 80079e6:	3302      	adds	r3, #2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	589b      	ldr	r3, [r3, r2]
 80079ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2203      	movs	r2, #3
 80079f2:	4013      	ands	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	220f      	movs	r2, #15
 80079f8:	409a      	lsls	r2, r3
 80079fa:	0013      	movs	r3, r2
 80079fc:	43da      	mvns	r2, r3
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	4013      	ands	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	23a0      	movs	r3, #160	; 0xa0
 8007a08:	05db      	lsls	r3, r3, #23
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d019      	beq.n	8007a42 <HAL_GPIO_Init+0x1ea>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a47      	ldr	r2, [pc, #284]	; (8007b30 <HAL_GPIO_Init+0x2d8>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d013      	beq.n	8007a3e <HAL_GPIO_Init+0x1e6>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a46      	ldr	r2, [pc, #280]	; (8007b34 <HAL_GPIO_Init+0x2dc>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00d      	beq.n	8007a3a <HAL_GPIO_Init+0x1e2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a45      	ldr	r2, [pc, #276]	; (8007b38 <HAL_GPIO_Init+0x2e0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d007      	beq.n	8007a36 <HAL_GPIO_Init+0x1de>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a44      	ldr	r2, [pc, #272]	; (8007b3c <HAL_GPIO_Init+0x2e4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d101      	bne.n	8007a32 <HAL_GPIO_Init+0x1da>
 8007a2e:	2305      	movs	r3, #5
 8007a30:	e008      	b.n	8007a44 <HAL_GPIO_Init+0x1ec>
 8007a32:	2306      	movs	r3, #6
 8007a34:	e006      	b.n	8007a44 <HAL_GPIO_Init+0x1ec>
 8007a36:	2303      	movs	r3, #3
 8007a38:	e004      	b.n	8007a44 <HAL_GPIO_Init+0x1ec>
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	e002      	b.n	8007a44 <HAL_GPIO_Init+0x1ec>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e000      	b.n	8007a44 <HAL_GPIO_Init+0x1ec>
 8007a42:	2300      	movs	r3, #0
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	2103      	movs	r1, #3
 8007a48:	400a      	ands	r2, r1
 8007a4a:	0092      	lsls	r2, r2, #2
 8007a4c:	4093      	lsls	r3, r2
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a54:	4935      	ldr	r1, [pc, #212]	; (8007b2c <HAL_GPIO_Init+0x2d4>)
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	089b      	lsrs	r3, r3, #2
 8007a5a:	3302      	adds	r3, #2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a62:	4b37      	ldr	r3, [pc, #220]	; (8007b40 <HAL_GPIO_Init+0x2e8>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	43da      	mvns	r2, r3
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	2380      	movs	r3, #128	; 0x80
 8007a78:	025b      	lsls	r3, r3, #9
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	d003      	beq.n	8007a86 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007a86:	4b2e      	ldr	r3, [pc, #184]	; (8007b40 <HAL_GPIO_Init+0x2e8>)
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007a8c:	4b2c      	ldr	r3, [pc, #176]	; (8007b40 <HAL_GPIO_Init+0x2e8>)
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	43da      	mvns	r2, r3
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	4013      	ands	r3, r2
 8007a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	2380      	movs	r3, #128	; 0x80
 8007aa2:	029b      	lsls	r3, r3, #10
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	d003      	beq.n	8007ab0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007ab0:	4b23      	ldr	r3, [pc, #140]	; (8007b40 <HAL_GPIO_Init+0x2e8>)
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007ab6:	4b22      	ldr	r3, [pc, #136]	; (8007b40 <HAL_GPIO_Init+0x2e8>)
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	43da      	mvns	r2, r3
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	2380      	movs	r3, #128	; 0x80
 8007acc:	035b      	lsls	r3, r3, #13
 8007ace:	4013      	ands	r3, r2
 8007ad0:	d003      	beq.n	8007ada <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007ada:	4b19      	ldr	r3, [pc, #100]	; (8007b40 <HAL_GPIO_Init+0x2e8>)
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007ae0:	4b17      	ldr	r3, [pc, #92]	; (8007b40 <HAL_GPIO_Init+0x2e8>)
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	43da      	mvns	r2, r3
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	4013      	ands	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	2380      	movs	r3, #128	; 0x80
 8007af6:	039b      	lsls	r3, r3, #14
 8007af8:	4013      	ands	r3, r2
 8007afa:	d003      	beq.n	8007b04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007b04:	4b0e      	ldr	r3, [pc, #56]	; (8007b40 <HAL_GPIO_Init+0x2e8>)
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	40da      	lsrs	r2, r3
 8007b18:	1e13      	subs	r3, r2, #0
 8007b1a:	d000      	beq.n	8007b1e <HAL_GPIO_Init+0x2c6>
 8007b1c:	e6a8      	b.n	8007870 <HAL_GPIO_Init+0x18>
  }
}
 8007b1e:	46c0      	nop			; (mov r8, r8)
 8007b20:	46c0      	nop			; (mov r8, r8)
 8007b22:	46bd      	mov	sp, r7
 8007b24:	b006      	add	sp, #24
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	40021000 	.word	0x40021000
 8007b2c:	40010000 	.word	0x40010000
 8007b30:	50000400 	.word	0x50000400
 8007b34:	50000800 	.word	0x50000800
 8007b38:	50000c00 	.word	0x50000c00
 8007b3c:	50001c00 	.word	0x50001c00
 8007b40:	40010400 	.word	0x40010400

08007b44 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	000a      	movs	r2, r1
 8007b4e:	1cbb      	adds	r3, r7, #2
 8007b50:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	1cba      	adds	r2, r7, #2
 8007b58:	8812      	ldrh	r2, [r2, #0]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	d004      	beq.n	8007b68 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007b5e:	230f      	movs	r3, #15
 8007b60:	18fb      	adds	r3, r7, r3
 8007b62:	2201      	movs	r2, #1
 8007b64:	701a      	strb	r2, [r3, #0]
 8007b66:	e003      	b.n	8007b70 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b68:	230f      	movs	r3, #15
 8007b6a:	18fb      	adds	r3, r7, r3
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007b70:	230f      	movs	r3, #15
 8007b72:	18fb      	adds	r3, r7, r3
 8007b74:	781b      	ldrb	r3, [r3, #0]
}
 8007b76:	0018      	movs	r0, r3
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	b004      	add	sp, #16
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b082      	sub	sp, #8
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	0008      	movs	r0, r1
 8007b88:	0011      	movs	r1, r2
 8007b8a:	1cbb      	adds	r3, r7, #2
 8007b8c:	1c02      	adds	r2, r0, #0
 8007b8e:	801a      	strh	r2, [r3, #0]
 8007b90:	1c7b      	adds	r3, r7, #1
 8007b92:	1c0a      	adds	r2, r1, #0
 8007b94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b96:	1c7b      	adds	r3, r7, #1
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b9e:	1cbb      	adds	r3, r7, #2
 8007ba0:	881a      	ldrh	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007ba6:	e003      	b.n	8007bb0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007ba8:	1cbb      	adds	r3, r7, #2
 8007baa:	881a      	ldrh	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007bb0:	46c0      	nop			; (mov r8, r8)
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	b002      	add	sp, #8
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	0002      	movs	r2, r0
 8007bc0:	1dbb      	adds	r3, r7, #6
 8007bc2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007bc4:	4b09      	ldr	r3, [pc, #36]	; (8007bec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	1dba      	adds	r2, r7, #6
 8007bca:	8812      	ldrh	r2, [r2, #0]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	d008      	beq.n	8007be2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007bd0:	4b06      	ldr	r3, [pc, #24]	; (8007bec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007bd2:	1dba      	adds	r2, r7, #6
 8007bd4:	8812      	ldrh	r2, [r2, #0]
 8007bd6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007bd8:	1dbb      	adds	r3, r7, #6
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f000 f807 	bl	8007bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007be2:	46c0      	nop			; (mov r8, r8)
 8007be4:	46bd      	mov	sp, r7
 8007be6:	b002      	add	sp, #8
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	46c0      	nop			; (mov r8, r8)
 8007bec:	40010400 	.word	0x40010400

08007bf0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	0002      	movs	r2, r0
 8007bf8:	1dbb      	adds	r3, r7, #6
 8007bfa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007bfc:	46c0      	nop			; (mov r8, r8)
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	b002      	add	sp, #8
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e078      	b.n	8007d08 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	222e      	movs	r2, #46	; 0x2e
 8007c1a:	5c9b      	ldrb	r3, [r3, r2]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d107      	bne.n	8007c32 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	222d      	movs	r2, #45	; 0x2d
 8007c26:	2100      	movs	r1, #0
 8007c28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	0018      	movs	r0, r3
 8007c2e:	f7fd fbc9 	bl	80053c4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	222e      	movs	r2, #46	; 0x2e
 8007c36:	2102      	movs	r1, #2
 8007c38:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d005      	beq.n	8007c56 <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c4e:	2380      	movs	r3, #128	; 0x80
 8007c50:	041b      	lsls	r3, r3, #16
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d103      	bne.n	8007c5e <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	221e      	movs	r2, #30
 8007c5a:	4393      	bics	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	4a2b      	ldr	r2, [pc, #172]	; (8007d10 <HAL_LPTIM_Init+0x10c>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d003      	beq.n	8007c70 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4a2a      	ldr	r2, [pc, #168]	; (8007d14 <HAL_LPTIM_Init+0x110>)
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4a29      	ldr	r2, [pc, #164]	; (8007d18 <HAL_LPTIM_Init+0x114>)
 8007c74:	4013      	ands	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007c80:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007c86:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007c8c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8007c92:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d107      	bne.n	8007cb2 <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007caa:	4313      	orrs	r3, r2
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d005      	beq.n	8007cc6 <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cbe:	2380      	movs	r3, #128	; 0x80
 8007cc0:	041b      	lsls	r3, r3, #16
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d107      	bne.n	8007cd6 <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	4a0d      	ldr	r2, [pc, #52]	; (8007d10 <HAL_LPTIM_Init+0x10c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00a      	beq.n	8007cf6 <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007ce8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007cee:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	222e      	movs	r2, #46	; 0x2e
 8007d02:	2101      	movs	r1, #1
 8007d04:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	0018      	movs	r0, r3
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	b004      	add	sp, #16
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	0000ffff 	.word	0x0000ffff
 8007d14:	ffff1f3f 	.word	0xffff1f3f
 8007d18:	ff19f1fe 	.word	0xff19f1fe

08007d1c <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	222e      	movs	r2, #46	; 0x2e
 8007d2a:	2102      	movs	r1, #2
 8007d2c:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007d2e:	4b34      	ldr	r3, [pc, #208]	; (8007e00 <HAL_LPTIM_Counter_Start_IT+0xe4>)
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b33      	ldr	r3, [pc, #204]	; (8007e00 <HAL_LPTIM_Counter_Start_IT+0xe4>)
 8007d34:	2180      	movs	r1, #128	; 0x80
 8007d36:	0589      	lsls	r1, r1, #22
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d00d      	beq.n	8007d60 <HAL_LPTIM_Counter_Start_IT+0x44>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d48:	2380      	movs	r3, #128	; 0x80
 8007d4a:	041b      	lsls	r3, r3, #16
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d107      	bne.n	8007d60 <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	492a      	ldr	r1, [pc, #168]	; (8007e04 <HAL_LPTIM_Counter_Start_IT+0xe8>)
 8007d5c:	400a      	ands	r2, r1
 8007d5e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	691a      	ldr	r2, [r3, #16]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2210      	movs	r2, #16
 8007d76:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2110      	movs	r1, #16
 8007d84:	0018      	movs	r0, r3
 8007d86:	f000 f91d 	bl	8007fc4 <LPTIM_WaitForFlag>
 8007d8a:	0003      	movs	r3, r0
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d101      	bne.n	8007d94 <HAL_LPTIM_Counter_Start_IT+0x78>
  {
    return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e031      	b.n	8007df8 <HAL_LPTIM_Counter_Start_IT+0xdc>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	0018      	movs	r0, r3
 8007d98:	f000 f94c 	bl	8008034 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	0018      	movs	r0, r3
 8007da0:	f000 f904 	bl	8007fac <HAL_LPTIM_GetState>
 8007da4:	0003      	movs	r3, r0
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d101      	bne.n	8007dae <HAL_LPTIM_Counter_Start_IT+0x92>
  {
    return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e024      	b.n	8007df8 <HAL_LPTIM_Counter_Start_IT+0xdc>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	689a      	ldr	r2, [r3, #8]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2110      	movs	r1, #16
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	689a      	ldr	r2, [r3, #8]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2102      	movs	r1, #2
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	691a      	ldr	r2, [r3, #16]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2101      	movs	r1, #1
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	691a      	ldr	r2, [r3, #16]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2104      	movs	r1, #4
 8007dea:	430a      	orrs	r2, r1
 8007dec:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	222e      	movs	r2, #46	; 0x2e
 8007df2:	2101      	movs	r1, #1
 8007df4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	0018      	movs	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	b002      	add	sp, #8
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	40010400 	.word	0x40010400
 8007e04:	fffff1ff 	.word	0xfffff1ff

08007e08 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2201      	movs	r2, #1
 8007e18:	4013      	ands	r3, r2
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d10e      	bne.n	8007e3c <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	2201      	movs	r2, #1
 8007e26:	4013      	ands	r3, r2
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d107      	bne.n	8007e3c <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2201      	movs	r2, #1
 8007e32:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	0018      	movs	r0, r3
 8007e38:	f000 f888 	bl	8007f4c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2202      	movs	r2, #2
 8007e44:	4013      	ands	r3, r2
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d10e      	bne.n	8007e68 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	2202      	movs	r2, #2
 8007e52:	4013      	ands	r3, r2
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d107      	bne.n	8007e68 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	0018      	movs	r0, r3
 8007e64:	f7fb fc8c 	bl	8003780 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2204      	movs	r2, #4
 8007e70:	4013      	ands	r3, r2
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d10e      	bne.n	8007e94 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	2204      	movs	r2, #4
 8007e7e:	4013      	ands	r3, r2
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d107      	bne.n	8007e94 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2204      	movs	r2, #4
 8007e8a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	0018      	movs	r0, r3
 8007e90:	f000 f864 	bl	8007f5c <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2208      	movs	r2, #8
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	2b08      	cmp	r3, #8
 8007ea0:	d10e      	bne.n	8007ec0 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	2208      	movs	r2, #8
 8007eaa:	4013      	ands	r3, r2
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d107      	bne.n	8007ec0 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2208      	movs	r2, #8
 8007eb6:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	0018      	movs	r0, r3
 8007ebc:	f000 f856 	bl	8007f6c <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2210      	movs	r2, #16
 8007ec8:	4013      	ands	r3, r2
 8007eca:	2b10      	cmp	r3, #16
 8007ecc:	d10e      	bne.n	8007eec <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	2210      	movs	r2, #16
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	2b10      	cmp	r3, #16
 8007eda:	d107      	bne.n	8007eec <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2210      	movs	r2, #16
 8007ee2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	f000 f848 	bl	8007f7c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	2b20      	cmp	r3, #32
 8007ef8:	d10e      	bne.n	8007f18 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	2220      	movs	r2, #32
 8007f02:	4013      	ands	r3, r2
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d107      	bne.n	8007f18 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	0018      	movs	r0, r3
 8007f14:	f000 f83a 	bl	8007f8c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2240      	movs	r2, #64	; 0x40
 8007f20:	4013      	ands	r3, r2
 8007f22:	2b40      	cmp	r3, #64	; 0x40
 8007f24:	d10e      	bne.n	8007f44 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	2240      	movs	r2, #64	; 0x40
 8007f2e:	4013      	ands	r3, r2
 8007f30:	2b40      	cmp	r3, #64	; 0x40
 8007f32:	d107      	bne.n	8007f44 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2240      	movs	r2, #64	; 0x40
 8007f3a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	0018      	movs	r0, r3
 8007f40:	f000 f82c 	bl	8007f9c <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f44:	46c0      	nop			; (mov r8, r8)
 8007f46:	46bd      	mov	sp, r7
 8007f48:	b002      	add	sp, #8
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8007f54:	46c0      	nop			; (mov r8, r8)
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b002      	add	sp, #8
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8007f64:	46c0      	nop			; (mov r8, r8)
 8007f66:	46bd      	mov	sp, r7
 8007f68:	b002      	add	sp, #8
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8007f74:	46c0      	nop			; (mov r8, r8)
 8007f76:	46bd      	mov	sp, r7
 8007f78:	b002      	add	sp, #8
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8007f84:	46c0      	nop			; (mov r8, r8)
 8007f86:	46bd      	mov	sp, r7
 8007f88:	b002      	add	sp, #8
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8007f94:	46c0      	nop			; (mov r8, r8)
 8007f96:	46bd      	mov	sp, r7
 8007f98:	b002      	add	sp, #8
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8007fa4:	46c0      	nop			; (mov r8, r8)
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	b002      	add	sp, #8
 8007faa:	bd80      	pop	{r7, pc}

08007fac <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	222e      	movs	r2, #46	; 0x2e
 8007fb8:	5c9b      	ldrb	r3, [r3, r2]
 8007fba:	b2db      	uxtb	r3, r3
}
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	b002      	add	sp, #8
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8007fce:	230f      	movs	r3, #15
 8007fd0:	18fb      	adds	r3, r7, r3
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8007fd6:	4b15      	ldr	r3, [pc, #84]	; (800802c <LPTIM_WaitForFlag+0x68>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4915      	ldr	r1, [pc, #84]	; (8008030 <LPTIM_WaitForFlag+0x6c>)
 8007fdc:	0018      	movs	r0, r3
 8007fde:	f7f8 f8af 	bl	8000140 <__udivsi3>
 8007fe2:	0003      	movs	r3, r0
 8007fe4:	001a      	movs	r2, r3
 8007fe6:	0013      	movs	r3, r2
 8007fe8:	015b      	lsls	r3, r3, #5
 8007fea:	1a9b      	subs	r3, r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	189b      	adds	r3, r3, r2
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d103      	bne.n	8008008 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8008000:	230f      	movs	r3, #15
 8008002:	18fb      	adds	r3, r7, r3
 8008004:	2203      	movs	r2, #3
 8008006:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	4013      	ands	r3, r2
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	d002      	beq.n	800801e <LPTIM_WaitForFlag+0x5a>
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1ea      	bne.n	8007ff4 <LPTIM_WaitForFlag+0x30>

  return result;
 800801e:	230f      	movs	r3, #15
 8008020:	18fb      	adds	r3, r7, r3
 8008022:	781b      	ldrb	r3, [r3, #0]
}
 8008024:	0018      	movs	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	b004      	add	sp, #16
 800802a:	bd80      	pop	{r7, pc}
 800802c:	20000024 	.word	0x20000024
 8008030:	00004e20 	.word	0x00004e20

08008034 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b088      	sub	sp, #32
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800803c:	2300      	movs	r3, #0
 800803e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008040:	b672      	cpsid	i
}
 8008042:	46c0      	nop			; (mov r8, r8)

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	001a      	movs	r2, r3
 800804a:	4b55      	ldr	r3, [pc, #340]	; (80081a0 <LPTIM_Disable+0x16c>)
 800804c:	429a      	cmp	r2, r3
 800804e:	d106      	bne.n	800805e <LPTIM_Disable+0x2a>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008050:	4b54      	ldr	r3, [pc, #336]	; (80081a4 <LPTIM_Disable+0x170>)
 8008052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008054:	23c0      	movs	r3, #192	; 0xc0
 8008056:	031b      	lsls	r3, r3, #12
 8008058:	4013      	ands	r3, r2
 800805a:	61fb      	str	r3, [r7, #28]
      break;
 800805c:	e000      	b.n	8008060 <LPTIM_Disable+0x2c>
    default:
      break;
 800805e:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	001a      	movs	r2, r3
 8008086:	4b46      	ldr	r3, [pc, #280]	; (80081a0 <LPTIM_Disable+0x16c>)
 8008088:	429a      	cmp	r2, r3
 800808a:	d10d      	bne.n	80080a8 <LPTIM_Disable+0x74>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800808c:	4b45      	ldr	r3, [pc, #276]	; (80081a4 <LPTIM_Disable+0x170>)
 800808e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008090:	4b44      	ldr	r3, [pc, #272]	; (80081a4 <LPTIM_Disable+0x170>)
 8008092:	2180      	movs	r1, #128	; 0x80
 8008094:	0609      	lsls	r1, r1, #24
 8008096:	430a      	orrs	r2, r1
 8008098:	629a      	str	r2, [r3, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800809a:	4b42      	ldr	r3, [pc, #264]	; (80081a4 <LPTIM_Disable+0x170>)
 800809c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800809e:	4b41      	ldr	r3, [pc, #260]	; (80081a4 <LPTIM_Disable+0x170>)
 80080a0:	0052      	lsls	r2, r2, #1
 80080a2:	0852      	lsrs	r2, r2, #1
 80080a4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80080a6:	e000      	b.n	80080aa <LPTIM_Disable+0x76>
    default:
      break;
 80080a8:	46c0      	nop			; (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d102      	bne.n	80080b6 <LPTIM_Disable+0x82>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d05b      	beq.n	800816e <LPTIM_Disable+0x13a>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	001a      	movs	r2, r3
 80080bc:	4b38      	ldr	r3, [pc, #224]	; (80081a0 <LPTIM_Disable+0x16c>)
 80080be:	429a      	cmp	r2, r3
 80080c0:	d106      	bne.n	80080d0 <LPTIM_Disable+0x9c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80080c2:	4b38      	ldr	r3, [pc, #224]	; (80081a4 <LPTIM_Disable+0x170>)
 80080c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080c6:	4b37      	ldr	r3, [pc, #220]	; (80081a4 <LPTIM_Disable+0x170>)
 80080c8:	4937      	ldr	r1, [pc, #220]	; (80081a8 <LPTIM_Disable+0x174>)
 80080ca:	400a      	ands	r2, r1
 80080cc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80080ce:	e000      	b.n	80080d2 <LPTIM_Disable+0x9e>
      default:
        break;
 80080d0:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01b      	beq.n	8008110 <LPTIM_Disable+0xdc>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691a      	ldr	r2, [r3, #16]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2101      	movs	r1, #1
 80080e4:	430a      	orrs	r2, r1
 80080e6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2108      	movs	r1, #8
 80080f4:	0018      	movs	r0, r3
 80080f6:	f7ff ff65 	bl	8007fc4 <LPTIM_WaitForFlag>
 80080fa:	0003      	movs	r3, r0
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d103      	bne.n	8008108 <LPTIM_Disable+0xd4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	222e      	movs	r2, #46	; 0x2e
 8008104:	2103      	movs	r1, #3
 8008106:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2208      	movs	r2, #8
 800810e:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d01b      	beq.n	800814e <LPTIM_Disable+0x11a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2101      	movs	r1, #1
 8008122:	430a      	orrs	r2, r1
 8008124:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2110      	movs	r1, #16
 8008132:	0018      	movs	r0, r3
 8008134:	f7ff ff46 	bl	8007fc4 <LPTIM_WaitForFlag>
 8008138:	0003      	movs	r3, r0
 800813a:	2b03      	cmp	r3, #3
 800813c:	d103      	bne.n	8008146 <LPTIM_Disable+0x112>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	222e      	movs	r2, #46	; 0x2e
 8008142:	2103      	movs	r1, #3
 8008144:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2210      	movs	r2, #16
 800814c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	001a      	movs	r2, r3
 8008154:	4b12      	ldr	r3, [pc, #72]	; (80081a0 <LPTIM_Disable+0x16c>)
 8008156:	429a      	cmp	r2, r3
 8008158:	d10b      	bne.n	8008172 <LPTIM_Disable+0x13e>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800815a:	4b12      	ldr	r3, [pc, #72]	; (80081a4 <LPTIM_Disable+0x170>)
 800815c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815e:	4a12      	ldr	r2, [pc, #72]	; (80081a8 <LPTIM_Disable+0x174>)
 8008160:	4013      	ands	r3, r2
 8008162:	0019      	movs	r1, r3
 8008164:	4b0f      	ldr	r3, [pc, #60]	; (80081a4 <LPTIM_Disable+0x170>)
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	430a      	orrs	r2, r1
 800816a:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800816c:	e002      	b.n	8008174 <LPTIM_Disable+0x140>
      default:
        break;
    }
  }
 800816e:	46c0      	nop			; (mov r8, r8)
 8008170:	e000      	b.n	8008174 <LPTIM_Disable+0x140>
        break;
 8008172:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691a      	ldr	r2, [r3, #16]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2101      	movs	r1, #1
 8008180:	438a      	bics	r2, r1
 8008182:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	69ba      	ldr	r2, [r7, #24]
 800818a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8008194:	b662      	cpsie	i
}
 8008196:	46c0      	nop			; (mov r8, r8)

  __enable_irq();
}
 8008198:	46c0      	nop			; (mov r8, r8)
 800819a:	46bd      	mov	sp, r7
 800819c:	b008      	add	sp, #32
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	40007c00 	.word	0x40007c00
 80081a4:	40021000 	.word	0x40021000
 80081a8:	fff3ffff 	.word	0xfff3ffff

080081ac <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80081b0:	4b04      	ldr	r3, [pc, #16]	; (80081c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80081b6:	2180      	movs	r1, #128	; 0x80
 80081b8:	0049      	lsls	r1, r1, #1
 80081ba:	430a      	orrs	r2, r1
 80081bc:	601a      	str	r2, [r3, #0]
}
 80081be:	46c0      	nop			; (mov r8, r8)
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	40007000 	.word	0x40007000

080081c8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	000a      	movs	r2, r1
 80081d2:	1cfb      	adds	r3, r7, #3
 80081d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80081da:	4b25      	ldr	r3, [pc, #148]	; (8008270 <HAL_PWR_EnterSTOPMode+0xa8>)
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	2380      	movs	r3, #128	; 0x80
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4013      	ands	r3, r2
 80081e4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80081e6:	4b23      	ldr	r3, [pc, #140]	; (8008274 <HAL_PWR_EnterSTOPMode+0xac>)
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	2201      	movs	r2, #1
 80081ec:	4013      	ands	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d008      	beq.n	8008208 <HAL_PWR_EnterSTOPMode+0x40>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d005      	beq.n	8008208 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80081fc:	4b1c      	ldr	r3, [pc, #112]	; (8008270 <HAL_PWR_EnterSTOPMode+0xa8>)
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	4b1b      	ldr	r3, [pc, #108]	; (8008270 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008202:	491d      	ldr	r1, [pc, #116]	; (8008278 <HAL_PWR_EnterSTOPMode+0xb0>)
 8008204:	400a      	ands	r2, r1
 8008206:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008208:	4b19      	ldr	r3, [pc, #100]	; (8008270 <HAL_PWR_EnterSTOPMode+0xa8>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2203      	movs	r2, #3
 8008212:	4393      	bics	r3, r2
 8008214:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4313      	orrs	r3, r2
 800821c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800821e:	4b14      	ldr	r3, [pc, #80]	; (8008270 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008224:	4b15      	ldr	r3, [pc, #84]	; (800827c <HAL_PWR_EnterSTOPMode+0xb4>)
 8008226:	691a      	ldr	r2, [r3, #16]
 8008228:	4b14      	ldr	r3, [pc, #80]	; (800827c <HAL_PWR_EnterSTOPMode+0xb4>)
 800822a:	2104      	movs	r1, #4
 800822c:	430a      	orrs	r2, r1
 800822e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008230:	1cfb      	adds	r3, r7, #3
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d101      	bne.n	800823c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008238:	bf30      	wfi
 800823a:	e002      	b.n	8008242 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800823c:	bf40      	sev
    __WFE();
 800823e:	bf20      	wfe
    __WFE();
 8008240:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008242:	4b0e      	ldr	r3, [pc, #56]	; (800827c <HAL_PWR_EnterSTOPMode+0xb4>)
 8008244:	691a      	ldr	r2, [r3, #16]
 8008246:	4b0d      	ldr	r3, [pc, #52]	; (800827c <HAL_PWR_EnterSTOPMode+0xb4>)
 8008248:	2104      	movs	r1, #4
 800824a:	438a      	bics	r2, r1
 800824c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d009      	beq.n	8008268 <HAL_PWR_EnterSTOPMode+0xa0>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d006      	beq.n	8008268 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800825a:	4b05      	ldr	r3, [pc, #20]	; (8008270 <HAL_PWR_EnterSTOPMode+0xa8>)
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	4b04      	ldr	r3, [pc, #16]	; (8008270 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008260:	2180      	movs	r1, #128	; 0x80
 8008262:	0089      	lsls	r1, r1, #2
 8008264:	430a      	orrs	r2, r1
 8008266:	601a      	str	r2, [r3, #0]
  }
}
 8008268:	46c0      	nop			; (mov r8, r8)
 800826a:	46bd      	mov	sp, r7
 800826c:	b006      	add	sp, #24
 800826e:	bd80      	pop	{r7, pc}
 8008270:	40007000 	.word	0x40007000
 8008274:	40010000 	.word	0x40010000
 8008278:	fffffdff 	.word	0xfffffdff
 800827c:	e000ed00 	.word	0xe000ed00

08008280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008280:	b5b0      	push	{r4, r5, r7, lr}
 8008282:	b08a      	sub	sp, #40	; 0x28
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d102      	bne.n	8008294 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f000 fb5a 	bl	8008948 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008294:	4bce      	ldr	r3, [pc, #824]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	220c      	movs	r2, #12
 800829a:	4013      	ands	r3, r2
 800829c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800829e:	4bcc      	ldr	r3, [pc, #816]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80082a0:	68da      	ldr	r2, [r3, #12]
 80082a2:	2380      	movs	r3, #128	; 0x80
 80082a4:	025b      	lsls	r3, r3, #9
 80082a6:	4013      	ands	r3, r2
 80082a8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2201      	movs	r2, #1
 80082b0:	4013      	ands	r3, r2
 80082b2:	d100      	bne.n	80082b6 <HAL_RCC_OscConfig+0x36>
 80082b4:	e07c      	b.n	80083b0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	2b08      	cmp	r3, #8
 80082ba:	d007      	beq.n	80082cc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	2b0c      	cmp	r3, #12
 80082c0:	d111      	bne.n	80082e6 <HAL_RCC_OscConfig+0x66>
 80082c2:	69fa      	ldr	r2, [r7, #28]
 80082c4:	2380      	movs	r3, #128	; 0x80
 80082c6:	025b      	lsls	r3, r3, #9
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d10c      	bne.n	80082e6 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082cc:	4bc0      	ldr	r3, [pc, #768]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	2380      	movs	r3, #128	; 0x80
 80082d2:	029b      	lsls	r3, r3, #10
 80082d4:	4013      	ands	r3, r2
 80082d6:	d100      	bne.n	80082da <HAL_RCC_OscConfig+0x5a>
 80082d8:	e069      	b.n	80083ae <HAL_RCC_OscConfig+0x12e>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d165      	bne.n	80083ae <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e330      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	2380      	movs	r3, #128	; 0x80
 80082ec:	025b      	lsls	r3, r3, #9
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d107      	bne.n	8008302 <HAL_RCC_OscConfig+0x82>
 80082f2:	4bb7      	ldr	r3, [pc, #732]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	4bb6      	ldr	r3, [pc, #728]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80082f8:	2180      	movs	r1, #128	; 0x80
 80082fa:	0249      	lsls	r1, r1, #9
 80082fc:	430a      	orrs	r2, r1
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	e027      	b.n	8008352 <HAL_RCC_OscConfig+0xd2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	23a0      	movs	r3, #160	; 0xa0
 8008308:	02db      	lsls	r3, r3, #11
 800830a:	429a      	cmp	r2, r3
 800830c:	d10e      	bne.n	800832c <HAL_RCC_OscConfig+0xac>
 800830e:	4bb0      	ldr	r3, [pc, #704]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	4baf      	ldr	r3, [pc, #700]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008314:	2180      	movs	r1, #128	; 0x80
 8008316:	02c9      	lsls	r1, r1, #11
 8008318:	430a      	orrs	r2, r1
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	4bac      	ldr	r3, [pc, #688]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	4bab      	ldr	r3, [pc, #684]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008322:	2180      	movs	r1, #128	; 0x80
 8008324:	0249      	lsls	r1, r1, #9
 8008326:	430a      	orrs	r2, r1
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	e012      	b.n	8008352 <HAL_RCC_OscConfig+0xd2>
 800832c:	4ba8      	ldr	r3, [pc, #672]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	4ba7      	ldr	r3, [pc, #668]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008332:	49a8      	ldr	r1, [pc, #672]	; (80085d4 <HAL_RCC_OscConfig+0x354>)
 8008334:	400a      	ands	r2, r1
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	4ba5      	ldr	r3, [pc, #660]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	2380      	movs	r3, #128	; 0x80
 800833e:	025b      	lsls	r3, r3, #9
 8008340:	4013      	ands	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4ba2      	ldr	r3, [pc, #648]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	4ba1      	ldr	r3, [pc, #644]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 800834c:	49a2      	ldr	r1, [pc, #648]	; (80085d8 <HAL_RCC_OscConfig+0x358>)
 800834e:	400a      	ands	r2, r1
 8008350:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d014      	beq.n	8008384 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800835a:	f7fe f9ed 	bl	8006738 <HAL_GetTick>
 800835e:	0003      	movs	r3, r0
 8008360:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008362:	e008      	b.n	8008376 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008364:	f7fe f9e8 	bl	8006738 <HAL_GetTick>
 8008368:	0002      	movs	r2, r0
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b64      	cmp	r3, #100	; 0x64
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e2e8      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008376:	4b96      	ldr	r3, [pc, #600]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	2380      	movs	r3, #128	; 0x80
 800837c:	029b      	lsls	r3, r3, #10
 800837e:	4013      	ands	r3, r2
 8008380:	d0f0      	beq.n	8008364 <HAL_RCC_OscConfig+0xe4>
 8008382:	e015      	b.n	80083b0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008384:	f7fe f9d8 	bl	8006738 <HAL_GetTick>
 8008388:	0003      	movs	r3, r0
 800838a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800838c:	e008      	b.n	80083a0 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800838e:	f7fe f9d3 	bl	8006738 <HAL_GetTick>
 8008392:	0002      	movs	r2, r0
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b64      	cmp	r3, #100	; 0x64
 800839a:	d901      	bls.n	80083a0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e2d3      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083a0:	4b8b      	ldr	r3, [pc, #556]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	2380      	movs	r3, #128	; 0x80
 80083a6:	029b      	lsls	r3, r3, #10
 80083a8:	4013      	ands	r3, r2
 80083aa:	d1f0      	bne.n	800838e <HAL_RCC_OscConfig+0x10e>
 80083ac:	e000      	b.n	80083b0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2202      	movs	r2, #2
 80083b6:	4013      	ands	r3, r2
 80083b8:	d100      	bne.n	80083bc <HAL_RCC_OscConfig+0x13c>
 80083ba:	e08b      	b.n	80084d4 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d005      	beq.n	80083d4 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	2b0c      	cmp	r3, #12
 80083cc:	d13e      	bne.n	800844c <HAL_RCC_OscConfig+0x1cc>
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d13b      	bne.n	800844c <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80083d4:	4b7e      	ldr	r3, [pc, #504]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2204      	movs	r2, #4
 80083da:	4013      	ands	r3, r2
 80083dc:	d004      	beq.n	80083e8 <HAL_RCC_OscConfig+0x168>
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e2af      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083e8:	4b79      	ldr	r3, [pc, #484]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	4a7b      	ldr	r2, [pc, #492]	; (80085dc <HAL_RCC_OscConfig+0x35c>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	0019      	movs	r1, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	021a      	lsls	r2, r3, #8
 80083f8:	4b75      	ldr	r3, [pc, #468]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80083fe:	4b74      	ldr	r3, [pc, #464]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2209      	movs	r2, #9
 8008404:	4393      	bics	r3, r2
 8008406:	0019      	movs	r1, r3
 8008408:	4b71      	ldr	r3, [pc, #452]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	430a      	orrs	r2, r1
 800840e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008410:	f000 fbe8 	bl	8008be4 <HAL_RCC_GetSysClockFreq>
 8008414:	0001      	movs	r1, r0
 8008416:	4b6e      	ldr	r3, [pc, #440]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	091b      	lsrs	r3, r3, #4
 800841c:	220f      	movs	r2, #15
 800841e:	4013      	ands	r3, r2
 8008420:	4a6f      	ldr	r2, [pc, #444]	; (80085e0 <HAL_RCC_OscConfig+0x360>)
 8008422:	5cd3      	ldrb	r3, [r2, r3]
 8008424:	000a      	movs	r2, r1
 8008426:	40da      	lsrs	r2, r3
 8008428:	4b6e      	ldr	r3, [pc, #440]	; (80085e4 <HAL_RCC_OscConfig+0x364>)
 800842a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800842c:	4b6e      	ldr	r3, [pc, #440]	; (80085e8 <HAL_RCC_OscConfig+0x368>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2513      	movs	r5, #19
 8008432:	197c      	adds	r4, r7, r5
 8008434:	0018      	movs	r0, r3
 8008436:	f7fe f939 	bl	80066ac <HAL_InitTick>
 800843a:	0003      	movs	r3, r0
 800843c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800843e:	197b      	adds	r3, r7, r5
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d046      	beq.n	80084d4 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8008446:	197b      	adds	r3, r7, r5
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	e27d      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d027      	beq.n	80084a2 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008452:	4b5f      	ldr	r3, [pc, #380]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2209      	movs	r2, #9
 8008458:	4393      	bics	r3, r2
 800845a:	0019      	movs	r1, r3
 800845c:	4b5c      	ldr	r3, [pc, #368]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	430a      	orrs	r2, r1
 8008462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008464:	f7fe f968 	bl	8006738 <HAL_GetTick>
 8008468:	0003      	movs	r3, r0
 800846a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800846c:	e008      	b.n	8008480 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800846e:	f7fe f963 	bl	8006738 <HAL_GetTick>
 8008472:	0002      	movs	r2, r0
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	2b02      	cmp	r3, #2
 800847a:	d901      	bls.n	8008480 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e263      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008480:	4b53      	ldr	r3, [pc, #332]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2204      	movs	r2, #4
 8008486:	4013      	ands	r3, r2
 8008488:	d0f1      	beq.n	800846e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800848a:	4b51      	ldr	r3, [pc, #324]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	4a53      	ldr	r2, [pc, #332]	; (80085dc <HAL_RCC_OscConfig+0x35c>)
 8008490:	4013      	ands	r3, r2
 8008492:	0019      	movs	r1, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	021a      	lsls	r2, r3, #8
 800849a:	4b4d      	ldr	r3, [pc, #308]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 800849c:	430a      	orrs	r2, r1
 800849e:	605a      	str	r2, [r3, #4]
 80084a0:	e018      	b.n	80084d4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084a2:	4b4b      	ldr	r3, [pc, #300]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	4b4a      	ldr	r3, [pc, #296]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80084a8:	2101      	movs	r1, #1
 80084aa:	438a      	bics	r2, r1
 80084ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ae:	f7fe f943 	bl	8006738 <HAL_GetTick>
 80084b2:	0003      	movs	r3, r0
 80084b4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084b6:	e008      	b.n	80084ca <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084b8:	f7fe f93e 	bl	8006738 <HAL_GetTick>
 80084bc:	0002      	movs	r2, r0
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d901      	bls.n	80084ca <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e23e      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084ca:	4b41      	ldr	r3, [pc, #260]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2204      	movs	r2, #4
 80084d0:	4013      	ands	r3, r2
 80084d2:	d1f1      	bne.n	80084b8 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2210      	movs	r2, #16
 80084da:	4013      	ands	r3, r2
 80084dc:	d100      	bne.n	80084e0 <HAL_RCC_OscConfig+0x260>
 80084de:	e0a1      	b.n	8008624 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d140      	bne.n	8008568 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80084e6:	4b3a      	ldr	r3, [pc, #232]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	2380      	movs	r3, #128	; 0x80
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4013      	ands	r3, r2
 80084f0:	d005      	beq.n	80084fe <HAL_RCC_OscConfig+0x27e>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e224      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084fe:	4b34      	ldr	r3, [pc, #208]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	4a3a      	ldr	r2, [pc, #232]	; (80085ec <HAL_RCC_OscConfig+0x36c>)
 8008504:	4013      	ands	r3, r2
 8008506:	0019      	movs	r1, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1a      	ldr	r2, [r3, #32]
 800850c:	4b30      	ldr	r3, [pc, #192]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 800850e:	430a      	orrs	r2, r1
 8008510:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008512:	4b2f      	ldr	r3, [pc, #188]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	021b      	lsls	r3, r3, #8
 8008518:	0a19      	lsrs	r1, r3, #8
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	061a      	lsls	r2, r3, #24
 8008520:	4b2b      	ldr	r3, [pc, #172]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008522:	430a      	orrs	r2, r1
 8008524:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	0b5b      	lsrs	r3, r3, #13
 800852c:	3301      	adds	r3, #1
 800852e:	2280      	movs	r2, #128	; 0x80
 8008530:	0212      	lsls	r2, r2, #8
 8008532:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008534:	4b26      	ldr	r3, [pc, #152]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	091b      	lsrs	r3, r3, #4
 800853a:	210f      	movs	r1, #15
 800853c:	400b      	ands	r3, r1
 800853e:	4928      	ldr	r1, [pc, #160]	; (80085e0 <HAL_RCC_OscConfig+0x360>)
 8008540:	5ccb      	ldrb	r3, [r1, r3]
 8008542:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008544:	4b27      	ldr	r3, [pc, #156]	; (80085e4 <HAL_RCC_OscConfig+0x364>)
 8008546:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8008548:	4b27      	ldr	r3, [pc, #156]	; (80085e8 <HAL_RCC_OscConfig+0x368>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2513      	movs	r5, #19
 800854e:	197c      	adds	r4, r7, r5
 8008550:	0018      	movs	r0, r3
 8008552:	f7fe f8ab 	bl	80066ac <HAL_InitTick>
 8008556:	0003      	movs	r3, r0
 8008558:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800855a:	197b      	adds	r3, r7, r5
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d060      	beq.n	8008624 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8008562:	197b      	adds	r3, r7, r5
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	e1ef      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d03f      	beq.n	80085f0 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008570:	4b17      	ldr	r3, [pc, #92]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	4b16      	ldr	r3, [pc, #88]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 8008576:	2180      	movs	r1, #128	; 0x80
 8008578:	0049      	lsls	r1, r1, #1
 800857a:	430a      	orrs	r2, r1
 800857c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800857e:	f7fe f8db 	bl	8006738 <HAL_GetTick>
 8008582:	0003      	movs	r3, r0
 8008584:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008586:	e008      	b.n	800859a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008588:	f7fe f8d6 	bl	8006738 <HAL_GetTick>
 800858c:	0002      	movs	r2, r0
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b02      	cmp	r3, #2
 8008594:	d901      	bls.n	800859a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e1d6      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800859a:	4b0d      	ldr	r3, [pc, #52]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	2380      	movs	r3, #128	; 0x80
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4013      	ands	r3, r2
 80085a4:	d0f0      	beq.n	8008588 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085a6:	4b0a      	ldr	r3, [pc, #40]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	4a10      	ldr	r2, [pc, #64]	; (80085ec <HAL_RCC_OscConfig+0x36c>)
 80085ac:	4013      	ands	r3, r2
 80085ae:	0019      	movs	r1, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a1a      	ldr	r2, [r3, #32]
 80085b4:	4b06      	ldr	r3, [pc, #24]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80085b6:	430a      	orrs	r2, r1
 80085b8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085ba:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	021b      	lsls	r3, r3, #8
 80085c0:	0a19      	lsrs	r1, r3, #8
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	061a      	lsls	r2, r3, #24
 80085c8:	4b01      	ldr	r3, [pc, #4]	; (80085d0 <HAL_RCC_OscConfig+0x350>)
 80085ca:	430a      	orrs	r2, r1
 80085cc:	605a      	str	r2, [r3, #4]
 80085ce:	e029      	b.n	8008624 <HAL_RCC_OscConfig+0x3a4>
 80085d0:	40021000 	.word	0x40021000
 80085d4:	fffeffff 	.word	0xfffeffff
 80085d8:	fffbffff 	.word	0xfffbffff
 80085dc:	ffffe0ff 	.word	0xffffe0ff
 80085e0:	0800e63c 	.word	0x0800e63c
 80085e4:	20000024 	.word	0x20000024
 80085e8:	20000028 	.word	0x20000028
 80085ec:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80085f0:	4bbe      	ldr	r3, [pc, #760]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	4bbd      	ldr	r3, [pc, #756]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 80085f6:	49be      	ldr	r1, [pc, #760]	; (80088f0 <HAL_RCC_OscConfig+0x670>)
 80085f8:	400a      	ands	r2, r1
 80085fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085fc:	f7fe f89c 	bl	8006738 <HAL_GetTick>
 8008600:	0003      	movs	r3, r0
 8008602:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008604:	e008      	b.n	8008618 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008606:	f7fe f897 	bl	8006738 <HAL_GetTick>
 800860a:	0002      	movs	r2, r0
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	2b02      	cmp	r3, #2
 8008612:	d901      	bls.n	8008618 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e197      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008618:	4bb4      	ldr	r3, [pc, #720]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	2380      	movs	r3, #128	; 0x80
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4013      	ands	r3, r2
 8008622:	d1f0      	bne.n	8008606 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2208      	movs	r2, #8
 800862a:	4013      	ands	r3, r2
 800862c:	d036      	beq.n	800869c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d019      	beq.n	800866a <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008636:	4bad      	ldr	r3, [pc, #692]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800863a:	4bac      	ldr	r3, [pc, #688]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 800863c:	2101      	movs	r1, #1
 800863e:	430a      	orrs	r2, r1
 8008640:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008642:	f7fe f879 	bl	8006738 <HAL_GetTick>
 8008646:	0003      	movs	r3, r0
 8008648:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800864a:	e008      	b.n	800865e <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800864c:	f7fe f874 	bl	8006738 <HAL_GetTick>
 8008650:	0002      	movs	r2, r0
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e174      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800865e:	4ba3      	ldr	r3, [pc, #652]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008662:	2202      	movs	r2, #2
 8008664:	4013      	ands	r3, r2
 8008666:	d0f1      	beq.n	800864c <HAL_RCC_OscConfig+0x3cc>
 8008668:	e018      	b.n	800869c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800866a:	4ba0      	ldr	r3, [pc, #640]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 800866c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800866e:	4b9f      	ldr	r3, [pc, #636]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008670:	2101      	movs	r1, #1
 8008672:	438a      	bics	r2, r1
 8008674:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008676:	f7fe f85f 	bl	8006738 <HAL_GetTick>
 800867a:	0003      	movs	r3, r0
 800867c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800867e:	e008      	b.n	8008692 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008680:	f7fe f85a 	bl	8006738 <HAL_GetTick>
 8008684:	0002      	movs	r2, r0
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	2b02      	cmp	r3, #2
 800868c:	d901      	bls.n	8008692 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e15a      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008692:	4b96      	ldr	r3, [pc, #600]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008696:	2202      	movs	r2, #2
 8008698:	4013      	ands	r3, r2
 800869a:	d1f1      	bne.n	8008680 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2204      	movs	r2, #4
 80086a2:	4013      	ands	r3, r2
 80086a4:	d100      	bne.n	80086a8 <HAL_RCC_OscConfig+0x428>
 80086a6:	e0ae      	b.n	8008806 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086a8:	2027      	movs	r0, #39	; 0x27
 80086aa:	183b      	adds	r3, r7, r0
 80086ac:	2200      	movs	r2, #0
 80086ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086b0:	4b8e      	ldr	r3, [pc, #568]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 80086b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086b4:	2380      	movs	r3, #128	; 0x80
 80086b6:	055b      	lsls	r3, r3, #21
 80086b8:	4013      	ands	r3, r2
 80086ba:	d109      	bne.n	80086d0 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086bc:	4b8b      	ldr	r3, [pc, #556]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 80086be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086c0:	4b8a      	ldr	r3, [pc, #552]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 80086c2:	2180      	movs	r1, #128	; 0x80
 80086c4:	0549      	lsls	r1, r1, #21
 80086c6:	430a      	orrs	r2, r1
 80086c8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80086ca:	183b      	adds	r3, r7, r0
 80086cc:	2201      	movs	r2, #1
 80086ce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086d0:	4b88      	ldr	r3, [pc, #544]	; (80088f4 <HAL_RCC_OscConfig+0x674>)
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	2380      	movs	r3, #128	; 0x80
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	4013      	ands	r3, r2
 80086da:	d11a      	bne.n	8008712 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80086dc:	4b85      	ldr	r3, [pc, #532]	; (80088f4 <HAL_RCC_OscConfig+0x674>)
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	4b84      	ldr	r3, [pc, #528]	; (80088f4 <HAL_RCC_OscConfig+0x674>)
 80086e2:	2180      	movs	r1, #128	; 0x80
 80086e4:	0049      	lsls	r1, r1, #1
 80086e6:	430a      	orrs	r2, r1
 80086e8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086ea:	f7fe f825 	bl	8006738 <HAL_GetTick>
 80086ee:	0003      	movs	r3, r0
 80086f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086f2:	e008      	b.n	8008706 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086f4:	f7fe f820 	bl	8006738 <HAL_GetTick>
 80086f8:	0002      	movs	r2, r0
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	2b64      	cmp	r3, #100	; 0x64
 8008700:	d901      	bls.n	8008706 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e120      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008706:	4b7b      	ldr	r3, [pc, #492]	; (80088f4 <HAL_RCC_OscConfig+0x674>)
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	2380      	movs	r3, #128	; 0x80
 800870c:	005b      	lsls	r3, r3, #1
 800870e:	4013      	ands	r3, r2
 8008710:	d0f0      	beq.n	80086f4 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	689a      	ldr	r2, [r3, #8]
 8008716:	2380      	movs	r3, #128	; 0x80
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	429a      	cmp	r2, r3
 800871c:	d107      	bne.n	800872e <HAL_RCC_OscConfig+0x4ae>
 800871e:	4b73      	ldr	r3, [pc, #460]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008722:	4b72      	ldr	r3, [pc, #456]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008724:	2180      	movs	r1, #128	; 0x80
 8008726:	0049      	lsls	r1, r1, #1
 8008728:	430a      	orrs	r2, r1
 800872a:	651a      	str	r2, [r3, #80]	; 0x50
 800872c:	e031      	b.n	8008792 <HAL_RCC_OscConfig+0x512>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10c      	bne.n	8008750 <HAL_RCC_OscConfig+0x4d0>
 8008736:	4b6d      	ldr	r3, [pc, #436]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800873a:	4b6c      	ldr	r3, [pc, #432]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 800873c:	496c      	ldr	r1, [pc, #432]	; (80088f0 <HAL_RCC_OscConfig+0x670>)
 800873e:	400a      	ands	r2, r1
 8008740:	651a      	str	r2, [r3, #80]	; 0x50
 8008742:	4b6a      	ldr	r3, [pc, #424]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008746:	4b69      	ldr	r3, [pc, #420]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008748:	496b      	ldr	r1, [pc, #428]	; (80088f8 <HAL_RCC_OscConfig+0x678>)
 800874a:	400a      	ands	r2, r1
 800874c:	651a      	str	r2, [r3, #80]	; 0x50
 800874e:	e020      	b.n	8008792 <HAL_RCC_OscConfig+0x512>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	23a0      	movs	r3, #160	; 0xa0
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	429a      	cmp	r2, r3
 800875a:	d10e      	bne.n	800877a <HAL_RCC_OscConfig+0x4fa>
 800875c:	4b63      	ldr	r3, [pc, #396]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 800875e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008760:	4b62      	ldr	r3, [pc, #392]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008762:	2180      	movs	r1, #128	; 0x80
 8008764:	00c9      	lsls	r1, r1, #3
 8008766:	430a      	orrs	r2, r1
 8008768:	651a      	str	r2, [r3, #80]	; 0x50
 800876a:	4b60      	ldr	r3, [pc, #384]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 800876c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800876e:	4b5f      	ldr	r3, [pc, #380]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008770:	2180      	movs	r1, #128	; 0x80
 8008772:	0049      	lsls	r1, r1, #1
 8008774:	430a      	orrs	r2, r1
 8008776:	651a      	str	r2, [r3, #80]	; 0x50
 8008778:	e00b      	b.n	8008792 <HAL_RCC_OscConfig+0x512>
 800877a:	4b5c      	ldr	r3, [pc, #368]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 800877c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800877e:	4b5b      	ldr	r3, [pc, #364]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008780:	495b      	ldr	r1, [pc, #364]	; (80088f0 <HAL_RCC_OscConfig+0x670>)
 8008782:	400a      	ands	r2, r1
 8008784:	651a      	str	r2, [r3, #80]	; 0x50
 8008786:	4b59      	ldr	r3, [pc, #356]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800878a:	4b58      	ldr	r3, [pc, #352]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 800878c:	495a      	ldr	r1, [pc, #360]	; (80088f8 <HAL_RCC_OscConfig+0x678>)
 800878e:	400a      	ands	r2, r1
 8008790:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d015      	beq.n	80087c6 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800879a:	f7fd ffcd 	bl	8006738 <HAL_GetTick>
 800879e:	0003      	movs	r3, r0
 80087a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087a2:	e009      	b.n	80087b8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087a4:	f7fd ffc8 	bl	8006738 <HAL_GetTick>
 80087a8:	0002      	movs	r2, r0
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	4a53      	ldr	r2, [pc, #332]	; (80088fc <HAL_RCC_OscConfig+0x67c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e0c7      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087b8:	4b4c      	ldr	r3, [pc, #304]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 80087ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087bc:	2380      	movs	r3, #128	; 0x80
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4013      	ands	r3, r2
 80087c2:	d0ef      	beq.n	80087a4 <HAL_RCC_OscConfig+0x524>
 80087c4:	e014      	b.n	80087f0 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087c6:	f7fd ffb7 	bl	8006738 <HAL_GetTick>
 80087ca:	0003      	movs	r3, r0
 80087cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087ce:	e009      	b.n	80087e4 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087d0:	f7fd ffb2 	bl	8006738 <HAL_GetTick>
 80087d4:	0002      	movs	r2, r0
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	4a48      	ldr	r2, [pc, #288]	; (80088fc <HAL_RCC_OscConfig+0x67c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d901      	bls.n	80087e4 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e0b1      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087e4:	4b41      	ldr	r3, [pc, #260]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 80087e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087e8:	2380      	movs	r3, #128	; 0x80
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4013      	ands	r3, r2
 80087ee:	d1ef      	bne.n	80087d0 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80087f0:	2327      	movs	r3, #39	; 0x27
 80087f2:	18fb      	adds	r3, r7, r3
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d105      	bne.n	8008806 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087fa:	4b3c      	ldr	r3, [pc, #240]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 80087fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087fe:	4b3b      	ldr	r3, [pc, #236]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008800:	493f      	ldr	r1, [pc, #252]	; (8008900 <HAL_RCC_OscConfig+0x680>)
 8008802:	400a      	ands	r2, r1
 8008804:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	2b00      	cmp	r3, #0
 800880c:	d100      	bne.n	8008810 <HAL_RCC_OscConfig+0x590>
 800880e:	e09a      	b.n	8008946 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	2b0c      	cmp	r3, #12
 8008814:	d064      	beq.n	80088e0 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881a:	2b02      	cmp	r3, #2
 800881c:	d145      	bne.n	80088aa <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800881e:	4b33      	ldr	r3, [pc, #204]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	4b32      	ldr	r3, [pc, #200]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008824:	4937      	ldr	r1, [pc, #220]	; (8008904 <HAL_RCC_OscConfig+0x684>)
 8008826:	400a      	ands	r2, r1
 8008828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800882a:	f7fd ff85 	bl	8006738 <HAL_GetTick>
 800882e:	0003      	movs	r3, r0
 8008830:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008832:	e008      	b.n	8008846 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008834:	f7fd ff80 	bl	8006738 <HAL_GetTick>
 8008838:	0002      	movs	r2, r0
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b02      	cmp	r3, #2
 8008840:	d901      	bls.n	8008846 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e080      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008846:	4b29      	ldr	r3, [pc, #164]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	2380      	movs	r3, #128	; 0x80
 800884c:	049b      	lsls	r3, r3, #18
 800884e:	4013      	ands	r3, r2
 8008850:	d1f0      	bne.n	8008834 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008852:	4b26      	ldr	r3, [pc, #152]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	4a2c      	ldr	r2, [pc, #176]	; (8008908 <HAL_RCC_OscConfig+0x688>)
 8008858:	4013      	ands	r3, r2
 800885a:	0019      	movs	r1, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008864:	431a      	orrs	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	431a      	orrs	r2, r3
 800886c:	4b1f      	ldr	r3, [pc, #124]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 800886e:	430a      	orrs	r2, r1
 8008870:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008872:	4b1e      	ldr	r3, [pc, #120]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	4b1d      	ldr	r3, [pc, #116]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 8008878:	2180      	movs	r1, #128	; 0x80
 800887a:	0449      	lsls	r1, r1, #17
 800887c:	430a      	orrs	r2, r1
 800887e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008880:	f7fd ff5a 	bl	8006738 <HAL_GetTick>
 8008884:	0003      	movs	r3, r0
 8008886:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008888:	e008      	b.n	800889c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800888a:	f7fd ff55 	bl	8006738 <HAL_GetTick>
 800888e:	0002      	movs	r2, r0
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b02      	cmp	r3, #2
 8008896:	d901      	bls.n	800889c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e055      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800889c:	4b13      	ldr	r3, [pc, #76]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	2380      	movs	r3, #128	; 0x80
 80088a2:	049b      	lsls	r3, r3, #18
 80088a4:	4013      	ands	r3, r2
 80088a6:	d0f0      	beq.n	800888a <HAL_RCC_OscConfig+0x60a>
 80088a8:	e04d      	b.n	8008946 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088aa:	4b10      	ldr	r3, [pc, #64]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 80088b0:	4914      	ldr	r1, [pc, #80]	; (8008904 <HAL_RCC_OscConfig+0x684>)
 80088b2:	400a      	ands	r2, r1
 80088b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b6:	f7fd ff3f 	bl	8006738 <HAL_GetTick>
 80088ba:	0003      	movs	r3, r0
 80088bc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80088be:	e008      	b.n	80088d2 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088c0:	f7fd ff3a 	bl	8006738 <HAL_GetTick>
 80088c4:	0002      	movs	r2, r0
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d901      	bls.n	80088d2 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e03a      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80088d2:	4b06      	ldr	r3, [pc, #24]	; (80088ec <HAL_RCC_OscConfig+0x66c>)
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	2380      	movs	r3, #128	; 0x80
 80088d8:	049b      	lsls	r3, r3, #18
 80088da:	4013      	ands	r3, r2
 80088dc:	d1f0      	bne.n	80088c0 <HAL_RCC_OscConfig+0x640>
 80088de:	e032      	b.n	8008946 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d111      	bne.n	800890c <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e02d      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
 80088ec:	40021000 	.word	0x40021000
 80088f0:	fffffeff 	.word	0xfffffeff
 80088f4:	40007000 	.word	0x40007000
 80088f8:	fffffbff 	.word	0xfffffbff
 80088fc:	00001388 	.word	0x00001388
 8008900:	efffffff 	.word	0xefffffff
 8008904:	feffffff 	.word	0xfeffffff
 8008908:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800890c:	4b10      	ldr	r3, [pc, #64]	; (8008950 <HAL_RCC_OscConfig+0x6d0>)
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008912:	69fa      	ldr	r2, [r7, #28]
 8008914:	2380      	movs	r3, #128	; 0x80
 8008916:	025b      	lsls	r3, r3, #9
 8008918:	401a      	ands	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891e:	429a      	cmp	r2, r3
 8008920:	d10f      	bne.n	8008942 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008922:	69fa      	ldr	r2, [r7, #28]
 8008924:	23f0      	movs	r3, #240	; 0xf0
 8008926:	039b      	lsls	r3, r3, #14
 8008928:	401a      	ands	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800892e:	429a      	cmp	r2, r3
 8008930:	d107      	bne.n	8008942 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008932:	69fa      	ldr	r2, [r7, #28]
 8008934:	23c0      	movs	r3, #192	; 0xc0
 8008936:	041b      	lsls	r3, r3, #16
 8008938:	401a      	ands	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800893e:	429a      	cmp	r2, r3
 8008940:	d001      	beq.n	8008946 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e000      	b.n	8008948 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	0018      	movs	r0, r3
 800894a:	46bd      	mov	sp, r7
 800894c:	b00a      	add	sp, #40	; 0x28
 800894e:	bdb0      	pop	{r4, r5, r7, pc}
 8008950:	40021000 	.word	0x40021000

08008954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008954:	b5b0      	push	{r4, r5, r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e128      	b.n	8008bba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008968:	4b96      	ldr	r3, [pc, #600]	; (8008bc4 <HAL_RCC_ClockConfig+0x270>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2201      	movs	r2, #1
 800896e:	4013      	ands	r3, r2
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	429a      	cmp	r2, r3
 8008974:	d91e      	bls.n	80089b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008976:	4b93      	ldr	r3, [pc, #588]	; (8008bc4 <HAL_RCC_ClockConfig+0x270>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2201      	movs	r2, #1
 800897c:	4393      	bics	r3, r2
 800897e:	0019      	movs	r1, r3
 8008980:	4b90      	ldr	r3, [pc, #576]	; (8008bc4 <HAL_RCC_ClockConfig+0x270>)
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008988:	f7fd fed6 	bl	8006738 <HAL_GetTick>
 800898c:	0003      	movs	r3, r0
 800898e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008990:	e009      	b.n	80089a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008992:	f7fd fed1 	bl	8006738 <HAL_GetTick>
 8008996:	0002      	movs	r2, r0
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	4a8a      	ldr	r2, [pc, #552]	; (8008bc8 <HAL_RCC_ClockConfig+0x274>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e109      	b.n	8008bba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089a6:	4b87      	ldr	r3, [pc, #540]	; (8008bc4 <HAL_RCC_ClockConfig+0x270>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2201      	movs	r2, #1
 80089ac:	4013      	ands	r3, r2
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d1ee      	bne.n	8008992 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2202      	movs	r2, #2
 80089ba:	4013      	ands	r3, r2
 80089bc:	d009      	beq.n	80089d2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089be:	4b83      	ldr	r3, [pc, #524]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	22f0      	movs	r2, #240	; 0xf0
 80089c4:	4393      	bics	r3, r2
 80089c6:	0019      	movs	r1, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689a      	ldr	r2, [r3, #8]
 80089cc:	4b7f      	ldr	r3, [pc, #508]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 80089ce:	430a      	orrs	r2, r1
 80089d0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2201      	movs	r2, #1
 80089d8:	4013      	ands	r3, r2
 80089da:	d100      	bne.n	80089de <HAL_RCC_ClockConfig+0x8a>
 80089dc:	e089      	b.n	8008af2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d107      	bne.n	80089f6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089e6:	4b79      	ldr	r3, [pc, #484]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	2380      	movs	r3, #128	; 0x80
 80089ec:	029b      	lsls	r3, r3, #10
 80089ee:	4013      	ands	r3, r2
 80089f0:	d120      	bne.n	8008a34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e0e1      	b.n	8008bba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d107      	bne.n	8008a0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089fe:	4b73      	ldr	r3, [pc, #460]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	2380      	movs	r3, #128	; 0x80
 8008a04:	049b      	lsls	r3, r3, #18
 8008a06:	4013      	ands	r3, r2
 8008a08:	d114      	bne.n	8008a34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e0d5      	b.n	8008bba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d106      	bne.n	8008a24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a16:	4b6d      	ldr	r3, [pc, #436]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2204      	movs	r2, #4
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	d109      	bne.n	8008a34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e0ca      	b.n	8008bba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008a24:	4b69      	ldr	r3, [pc, #420]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	2380      	movs	r3, #128	; 0x80
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	d101      	bne.n	8008a34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e0c2      	b.n	8008bba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a34:	4b65      	ldr	r3, [pc, #404]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	2203      	movs	r2, #3
 8008a3a:	4393      	bics	r3, r2
 8008a3c:	0019      	movs	r1, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	4b62      	ldr	r3, [pc, #392]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 8008a44:	430a      	orrs	r2, r1
 8008a46:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a48:	f7fd fe76 	bl	8006738 <HAL_GetTick>
 8008a4c:	0003      	movs	r3, r0
 8008a4e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d111      	bne.n	8008a7c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a58:	e009      	b.n	8008a6e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a5a:	f7fd fe6d 	bl	8006738 <HAL_GetTick>
 8008a5e:	0002      	movs	r2, r0
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	4a58      	ldr	r2, [pc, #352]	; (8008bc8 <HAL_RCC_ClockConfig+0x274>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d901      	bls.n	8008a6e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e0a5      	b.n	8008bba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a6e:	4b57      	ldr	r3, [pc, #348]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	220c      	movs	r2, #12
 8008a74:	4013      	ands	r3, r2
 8008a76:	2b08      	cmp	r3, #8
 8008a78:	d1ef      	bne.n	8008a5a <HAL_RCC_ClockConfig+0x106>
 8008a7a:	e03a      	b.n	8008af2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	2b03      	cmp	r3, #3
 8008a82:	d111      	bne.n	8008aa8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a84:	e009      	b.n	8008a9a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a86:	f7fd fe57 	bl	8006738 <HAL_GetTick>
 8008a8a:	0002      	movs	r2, r0
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	4a4d      	ldr	r2, [pc, #308]	; (8008bc8 <HAL_RCC_ClockConfig+0x274>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d901      	bls.n	8008a9a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e08f      	b.n	8008bba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a9a:	4b4c      	ldr	r3, [pc, #304]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	220c      	movs	r2, #12
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	2b0c      	cmp	r3, #12
 8008aa4:	d1ef      	bne.n	8008a86 <HAL_RCC_ClockConfig+0x132>
 8008aa6:	e024      	b.n	8008af2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d11b      	bne.n	8008ae8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ab0:	e009      	b.n	8008ac6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ab2:	f7fd fe41 	bl	8006738 <HAL_GetTick>
 8008ab6:	0002      	movs	r2, r0
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	4a42      	ldr	r2, [pc, #264]	; (8008bc8 <HAL_RCC_ClockConfig+0x274>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d901      	bls.n	8008ac6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e079      	b.n	8008bba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ac6:	4b41      	ldr	r3, [pc, #260]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	220c      	movs	r2, #12
 8008acc:	4013      	ands	r3, r2
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d1ef      	bne.n	8008ab2 <HAL_RCC_ClockConfig+0x15e>
 8008ad2:	e00e      	b.n	8008af2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ad4:	f7fd fe30 	bl	8006738 <HAL_GetTick>
 8008ad8:	0002      	movs	r2, r0
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	4a3a      	ldr	r2, [pc, #232]	; (8008bc8 <HAL_RCC_ClockConfig+0x274>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d901      	bls.n	8008ae8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e068      	b.n	8008bba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008ae8:	4b38      	ldr	r3, [pc, #224]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	220c      	movs	r2, #12
 8008aee:	4013      	ands	r3, r2
 8008af0:	d1f0      	bne.n	8008ad4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008af2:	4b34      	ldr	r3, [pc, #208]	; (8008bc4 <HAL_RCC_ClockConfig+0x270>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2201      	movs	r2, #1
 8008af8:	4013      	ands	r3, r2
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d21e      	bcs.n	8008b3e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b00:	4b30      	ldr	r3, [pc, #192]	; (8008bc4 <HAL_RCC_ClockConfig+0x270>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2201      	movs	r2, #1
 8008b06:	4393      	bics	r3, r2
 8008b08:	0019      	movs	r1, r3
 8008b0a:	4b2e      	ldr	r3, [pc, #184]	; (8008bc4 <HAL_RCC_ClockConfig+0x270>)
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008b12:	f7fd fe11 	bl	8006738 <HAL_GetTick>
 8008b16:	0003      	movs	r3, r0
 8008b18:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b1a:	e009      	b.n	8008b30 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b1c:	f7fd fe0c 	bl	8006738 <HAL_GetTick>
 8008b20:	0002      	movs	r2, r0
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	4a28      	ldr	r2, [pc, #160]	; (8008bc8 <HAL_RCC_ClockConfig+0x274>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d901      	bls.n	8008b30 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e044      	b.n	8008bba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b30:	4b24      	ldr	r3, [pc, #144]	; (8008bc4 <HAL_RCC_ClockConfig+0x270>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2201      	movs	r2, #1
 8008b36:	4013      	ands	r3, r2
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d1ee      	bne.n	8008b1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2204      	movs	r2, #4
 8008b44:	4013      	ands	r3, r2
 8008b46:	d009      	beq.n	8008b5c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b48:	4b20      	ldr	r3, [pc, #128]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	4a20      	ldr	r2, [pc, #128]	; (8008bd0 <HAL_RCC_ClockConfig+0x27c>)
 8008b4e:	4013      	ands	r3, r2
 8008b50:	0019      	movs	r1, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	4b1d      	ldr	r3, [pc, #116]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2208      	movs	r2, #8
 8008b62:	4013      	ands	r3, r2
 8008b64:	d00a      	beq.n	8008b7c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008b66:	4b19      	ldr	r3, [pc, #100]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	4a1a      	ldr	r2, [pc, #104]	; (8008bd4 <HAL_RCC_ClockConfig+0x280>)
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	0019      	movs	r1, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	00da      	lsls	r2, r3, #3
 8008b76:	4b15      	ldr	r3, [pc, #84]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b7c:	f000 f832 	bl	8008be4 <HAL_RCC_GetSysClockFreq>
 8008b80:	0001      	movs	r1, r0
 8008b82:	4b12      	ldr	r3, [pc, #72]	; (8008bcc <HAL_RCC_ClockConfig+0x278>)
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	091b      	lsrs	r3, r3, #4
 8008b88:	220f      	movs	r2, #15
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	4a12      	ldr	r2, [pc, #72]	; (8008bd8 <HAL_RCC_ClockConfig+0x284>)
 8008b8e:	5cd3      	ldrb	r3, [r2, r3]
 8008b90:	000a      	movs	r2, r1
 8008b92:	40da      	lsrs	r2, r3
 8008b94:	4b11      	ldr	r3, [pc, #68]	; (8008bdc <HAL_RCC_ClockConfig+0x288>)
 8008b96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008b98:	4b11      	ldr	r3, [pc, #68]	; (8008be0 <HAL_RCC_ClockConfig+0x28c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	250b      	movs	r5, #11
 8008b9e:	197c      	adds	r4, r7, r5
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f7fd fd83 	bl	80066ac <HAL_InitTick>
 8008ba6:	0003      	movs	r3, r0
 8008ba8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008baa:	197b      	adds	r3, r7, r5
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d002      	beq.n	8008bb8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8008bb2:	197b      	adds	r3, r7, r5
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	e000      	b.n	8008bba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	0018      	movs	r0, r3
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	b004      	add	sp, #16
 8008bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8008bc2:	46c0      	nop			; (mov r8, r8)
 8008bc4:	40022000 	.word	0x40022000
 8008bc8:	00001388 	.word	0x00001388
 8008bcc:	40021000 	.word	0x40021000
 8008bd0:	fffff8ff 	.word	0xfffff8ff
 8008bd4:	ffffc7ff 	.word	0xffffc7ff
 8008bd8:	0800e63c 	.word	0x0800e63c
 8008bdc:	20000024 	.word	0x20000024
 8008be0:	20000028 	.word	0x20000028

08008be4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008be4:	b5b0      	push	{r4, r5, r7, lr}
 8008be6:	b08e      	sub	sp, #56	; 0x38
 8008be8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008bea:	4b4c      	ldr	r3, [pc, #304]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x138>)
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	2b0c      	cmp	r3, #12
 8008bf8:	d014      	beq.n	8008c24 <HAL_RCC_GetSysClockFreq+0x40>
 8008bfa:	d900      	bls.n	8008bfe <HAL_RCC_GetSysClockFreq+0x1a>
 8008bfc:	e07b      	b.n	8008cf6 <HAL_RCC_GetSysClockFreq+0x112>
 8008bfe:	2b04      	cmp	r3, #4
 8008c00:	d002      	beq.n	8008c08 <HAL_RCC_GetSysClockFreq+0x24>
 8008c02:	2b08      	cmp	r3, #8
 8008c04:	d00b      	beq.n	8008c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8008c06:	e076      	b.n	8008cf6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008c08:	4b44      	ldr	r3, [pc, #272]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x138>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2210      	movs	r2, #16
 8008c0e:	4013      	ands	r3, r2
 8008c10:	d002      	beq.n	8008c18 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008c12:	4b43      	ldr	r3, [pc, #268]	; (8008d20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008c14:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008c16:	e07c      	b.n	8008d12 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8008c18:	4b42      	ldr	r3, [pc, #264]	; (8008d24 <HAL_RCC_GetSysClockFreq+0x140>)
 8008c1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008c1c:	e079      	b.n	8008d12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008c1e:	4b42      	ldr	r3, [pc, #264]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x144>)
 8008c20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008c22:	e076      	b.n	8008d12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c26:	0c9a      	lsrs	r2, r3, #18
 8008c28:	230f      	movs	r3, #15
 8008c2a:	401a      	ands	r2, r3
 8008c2c:	4b3f      	ldr	r3, [pc, #252]	; (8008d2c <HAL_RCC_GetSysClockFreq+0x148>)
 8008c2e:	5c9b      	ldrb	r3, [r3, r2]
 8008c30:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c34:	0d9a      	lsrs	r2, r3, #22
 8008c36:	2303      	movs	r3, #3
 8008c38:	4013      	ands	r3, r2
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c3e:	4b37      	ldr	r3, [pc, #220]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x138>)
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	2380      	movs	r3, #128	; 0x80
 8008c44:	025b      	lsls	r3, r3, #9
 8008c46:	4013      	ands	r3, r2
 8008c48:	d01a      	beq.n	8008c80 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	61bb      	str	r3, [r7, #24]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61fb      	str	r3, [r7, #28]
 8008c52:	4a35      	ldr	r2, [pc, #212]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x144>)
 8008c54:	2300      	movs	r3, #0
 8008c56:	69b8      	ldr	r0, [r7, #24]
 8008c58:	69f9      	ldr	r1, [r7, #28]
 8008c5a:	f7f7 fc7f 	bl	800055c <__aeabi_lmul>
 8008c5e:	0002      	movs	r2, r0
 8008c60:	000b      	movs	r3, r1
 8008c62:	0010      	movs	r0, r2
 8008c64:	0019      	movs	r1, r3
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c68:	613b      	str	r3, [r7, #16]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	617b      	str	r3, [r7, #20]
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f7f7 fc53 	bl	800051c <__aeabi_uldivmod>
 8008c76:	0002      	movs	r2, r0
 8008c78:	000b      	movs	r3, r1
 8008c7a:	0013      	movs	r3, r2
 8008c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c7e:	e037      	b.n	8008cf0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008c80:	4b26      	ldr	r3, [pc, #152]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x138>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2210      	movs	r2, #16
 8008c86:	4013      	ands	r3, r2
 8008c88:	d01a      	beq.n	8008cc0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	60bb      	str	r3, [r7, #8]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	4a23      	ldr	r2, [pc, #140]	; (8008d20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008c94:	2300      	movs	r3, #0
 8008c96:	68b8      	ldr	r0, [r7, #8]
 8008c98:	68f9      	ldr	r1, [r7, #12]
 8008c9a:	f7f7 fc5f 	bl	800055c <__aeabi_lmul>
 8008c9e:	0002      	movs	r2, r0
 8008ca0:	000b      	movs	r3, r1
 8008ca2:	0010      	movs	r0, r2
 8008ca4:	0019      	movs	r1, r3
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	603b      	str	r3, [r7, #0]
 8008caa:	2300      	movs	r3, #0
 8008cac:	607b      	str	r3, [r7, #4]
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f7f7 fc33 	bl	800051c <__aeabi_uldivmod>
 8008cb6:	0002      	movs	r2, r0
 8008cb8:	000b      	movs	r3, r1
 8008cba:	0013      	movs	r3, r2
 8008cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cbe:	e017      	b.n	8008cf0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	0018      	movs	r0, r3
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	0019      	movs	r1, r3
 8008cc8:	4a16      	ldr	r2, [pc, #88]	; (8008d24 <HAL_RCC_GetSysClockFreq+0x140>)
 8008cca:	2300      	movs	r3, #0
 8008ccc:	f7f7 fc46 	bl	800055c <__aeabi_lmul>
 8008cd0:	0002      	movs	r2, r0
 8008cd2:	000b      	movs	r3, r1
 8008cd4:	0010      	movs	r0, r2
 8008cd6:	0019      	movs	r1, r3
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	001c      	movs	r4, r3
 8008cdc:	2300      	movs	r3, #0
 8008cde:	001d      	movs	r5, r3
 8008ce0:	0022      	movs	r2, r4
 8008ce2:	002b      	movs	r3, r5
 8008ce4:	f7f7 fc1a 	bl	800051c <__aeabi_uldivmod>
 8008ce8:	0002      	movs	r2, r0
 8008cea:	000b      	movs	r3, r1
 8008cec:	0013      	movs	r3, r2
 8008cee:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8008cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008cf4:	e00d      	b.n	8008d12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008cf6:	4b09      	ldr	r3, [pc, #36]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x138>)
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	0b5b      	lsrs	r3, r3, #13
 8008cfc:	2207      	movs	r2, #7
 8008cfe:	4013      	ands	r3, r2
 8008d00:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	3301      	adds	r3, #1
 8008d06:	2280      	movs	r2, #128	; 0x80
 8008d08:	0212      	lsls	r2, r2, #8
 8008d0a:	409a      	lsls	r2, r3
 8008d0c:	0013      	movs	r3, r2
 8008d0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008d10:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8008d14:	0018      	movs	r0, r3
 8008d16:	46bd      	mov	sp, r7
 8008d18:	b00e      	add	sp, #56	; 0x38
 8008d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8008d1c:	40021000 	.word	0x40021000
 8008d20:	003d0900 	.word	0x003d0900
 8008d24:	00f42400 	.word	0x00f42400
 8008d28:	007a1200 	.word	0x007a1200
 8008d2c:	0800e654 	.word	0x0800e654

08008d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d34:	4b02      	ldr	r3, [pc, #8]	; (8008d40 <HAL_RCC_GetHCLKFreq+0x10>)
 8008d36:	681b      	ldr	r3, [r3, #0]
}
 8008d38:	0018      	movs	r0, r3
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	46c0      	nop			; (mov r8, r8)
 8008d40:	20000024 	.word	0x20000024

08008d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008d48:	f7ff fff2 	bl	8008d30 <HAL_RCC_GetHCLKFreq>
 8008d4c:	0001      	movs	r1, r0
 8008d4e:	4b06      	ldr	r3, [pc, #24]	; (8008d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	0a1b      	lsrs	r3, r3, #8
 8008d54:	2207      	movs	r2, #7
 8008d56:	4013      	ands	r3, r2
 8008d58:	4a04      	ldr	r2, [pc, #16]	; (8008d6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d5a:	5cd3      	ldrb	r3, [r2, r3]
 8008d5c:	40d9      	lsrs	r1, r3
 8008d5e:	000b      	movs	r3, r1
}
 8008d60:	0018      	movs	r0, r3
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	40021000 	.word	0x40021000
 8008d6c:	0800e64c 	.word	0x0800e64c

08008d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008d74:	f7ff ffdc 	bl	8008d30 <HAL_RCC_GetHCLKFreq>
 8008d78:	0001      	movs	r1, r0
 8008d7a:	4b06      	ldr	r3, [pc, #24]	; (8008d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	0adb      	lsrs	r3, r3, #11
 8008d80:	2207      	movs	r2, #7
 8008d82:	4013      	ands	r3, r2
 8008d84:	4a04      	ldr	r2, [pc, #16]	; (8008d98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008d86:	5cd3      	ldrb	r3, [r2, r3]
 8008d88:	40d9      	lsrs	r1, r3
 8008d8a:	000b      	movs	r3, r1
}
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	46c0      	nop			; (mov r8, r8)
 8008d94:	40021000 	.word	0x40021000
 8008d98:	0800e64c 	.word	0x0800e64c

08008d9c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8008da4:	2017      	movs	r0, #23
 8008da6:	183b      	adds	r3, r7, r0
 8008da8:	2200      	movs	r2, #0
 8008daa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2220      	movs	r2, #32
 8008db2:	4013      	ands	r3, r2
 8008db4:	d100      	bne.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8008db6:	e0c2      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008db8:	4b89      	ldr	r3, [pc, #548]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dbc:	2380      	movs	r3, #128	; 0x80
 8008dbe:	055b      	lsls	r3, r3, #21
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	d109      	bne.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dc4:	4b86      	ldr	r3, [pc, #536]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dc8:	4b85      	ldr	r3, [pc, #532]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008dca:	2180      	movs	r1, #128	; 0x80
 8008dcc:	0549      	lsls	r1, r1, #21
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008dd2:	183b      	adds	r3, r7, r0
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dd8:	4b82      	ldr	r3, [pc, #520]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	2380      	movs	r3, #128	; 0x80
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	4013      	ands	r3, r2
 8008de2:	d11a      	bne.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008de4:	4b7f      	ldr	r3, [pc, #508]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	4b7e      	ldr	r3, [pc, #504]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008dea:	2180      	movs	r1, #128	; 0x80
 8008dec:	0049      	lsls	r1, r1, #1
 8008dee:	430a      	orrs	r2, r1
 8008df0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008df2:	f7fd fca1 	bl	8006738 <HAL_GetTick>
 8008df6:	0003      	movs	r3, r0
 8008df8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dfa:	e008      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dfc:	f7fd fc9c 	bl	8006738 <HAL_GetTick>
 8008e00:	0002      	movs	r2, r0
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2b64      	cmp	r3, #100	; 0x64
 8008e08:	d901      	bls.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e0e3      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e0e:	4b75      	ldr	r3, [pc, #468]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	2380      	movs	r3, #128	; 0x80
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	4013      	ands	r3, r2
 8008e18:	d0f0      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008e1a:	4b71      	ldr	r3, [pc, #452]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	23c0      	movs	r3, #192	; 0xc0
 8008e20:	039b      	lsls	r3, r3, #14
 8008e22:	4013      	ands	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	23c0      	movs	r3, #192	; 0xc0
 8008e2c:	039b      	lsls	r3, r3, #14
 8008e2e:	4013      	ands	r3, r2
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d013      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	23c0      	movs	r3, #192	; 0xc0
 8008e3c:	029b      	lsls	r3, r3, #10
 8008e3e:	401a      	ands	r2, r3
 8008e40:	23c0      	movs	r3, #192	; 0xc0
 8008e42:	029b      	lsls	r3, r3, #10
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d10a      	bne.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e48:	4b65      	ldr	r3, [pc, #404]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	2380      	movs	r3, #128	; 0x80
 8008e4e:	029b      	lsls	r3, r3, #10
 8008e50:	401a      	ands	r2, r3
 8008e52:	2380      	movs	r3, #128	; 0x80
 8008e54:	029b      	lsls	r3, r3, #10
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d101      	bne.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e0bb      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008e5e:	4b60      	ldr	r3, [pc, #384]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008e60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e62:	23c0      	movs	r3, #192	; 0xc0
 8008e64:	029b      	lsls	r3, r3, #10
 8008e66:	4013      	ands	r3, r2
 8008e68:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d03b      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	23c0      	movs	r3, #192	; 0xc0
 8008e76:	029b      	lsls	r3, r3, #10
 8008e78:	4013      	ands	r3, r2
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d033      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2220      	movs	r2, #32
 8008e86:	4013      	ands	r3, r2
 8008e88:	d02e      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8008e8a:	4b55      	ldr	r3, [pc, #340]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e8e:	4a56      	ldr	r2, [pc, #344]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008e90:	4013      	ands	r3, r2
 8008e92:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008e94:	4b52      	ldr	r3, [pc, #328]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e98:	4b51      	ldr	r3, [pc, #324]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008e9a:	2180      	movs	r1, #128	; 0x80
 8008e9c:	0309      	lsls	r1, r1, #12
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ea2:	4b4f      	ldr	r3, [pc, #316]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ea6:	4b4e      	ldr	r3, [pc, #312]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008ea8:	4950      	ldr	r1, [pc, #320]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008eaa:	400a      	ands	r2, r1
 8008eac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008eae:	4b4c      	ldr	r3, [pc, #304]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	2380      	movs	r3, #128	; 0x80
 8008eb8:	005b      	lsls	r3, r3, #1
 8008eba:	4013      	ands	r3, r2
 8008ebc:	d014      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ebe:	f7fd fc3b 	bl	8006738 <HAL_GetTick>
 8008ec2:	0003      	movs	r3, r0
 8008ec4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ec6:	e009      	b.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ec8:	f7fd fc36 	bl	8006738 <HAL_GetTick>
 8008ecc:	0002      	movs	r2, r0
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	4a47      	ldr	r2, [pc, #284]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d901      	bls.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e07c      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008edc:	4b40      	ldr	r3, [pc, #256]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008ede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ee0:	2380      	movs	r3, #128	; 0x80
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	d0ef      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	23c0      	movs	r3, #192	; 0xc0
 8008eee:	029b      	lsls	r3, r3, #10
 8008ef0:	401a      	ands	r2, r3
 8008ef2:	23c0      	movs	r3, #192	; 0xc0
 8008ef4:	029b      	lsls	r3, r3, #10
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d10c      	bne.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8008efa:	4b39      	ldr	r3, [pc, #228]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a3d      	ldr	r2, [pc, #244]	; (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	0019      	movs	r1, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685a      	ldr	r2, [r3, #4]
 8008f08:	23c0      	movs	r3, #192	; 0xc0
 8008f0a:	039b      	lsls	r3, r3, #14
 8008f0c:	401a      	ands	r2, r3
 8008f0e:	4b34      	ldr	r3, [pc, #208]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008f10:	430a      	orrs	r2, r1
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	4b32      	ldr	r3, [pc, #200]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008f16:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	23c0      	movs	r3, #192	; 0xc0
 8008f1e:	029b      	lsls	r3, r3, #10
 8008f20:	401a      	ands	r2, r3
 8008f22:	4b2f      	ldr	r3, [pc, #188]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008f24:	430a      	orrs	r2, r1
 8008f26:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008f28:	2317      	movs	r3, #23
 8008f2a:	18fb      	adds	r3, r7, r3
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d105      	bne.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f32:	4b2b      	ldr	r3, [pc, #172]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f36:	4b2a      	ldr	r3, [pc, #168]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008f38:	492f      	ldr	r1, [pc, #188]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008f3a:	400a      	ands	r2, r1
 8008f3c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2201      	movs	r2, #1
 8008f44:	4013      	ands	r3, r2
 8008f46:	d009      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f48:	4b25      	ldr	r3, [pc, #148]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4c:	2203      	movs	r2, #3
 8008f4e:	4393      	bics	r3, r2
 8008f50:	0019      	movs	r1, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	689a      	ldr	r2, [r3, #8]
 8008f56:	4b22      	ldr	r3, [pc, #136]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2202      	movs	r2, #2
 8008f62:	4013      	ands	r3, r2
 8008f64:	d009      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f66:	4b1e      	ldr	r3, [pc, #120]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f6a:	220c      	movs	r2, #12
 8008f6c:	4393      	bics	r3, r2
 8008f6e:	0019      	movs	r1, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68da      	ldr	r2, [r3, #12]
 8008f74:	4b1a      	ldr	r3, [pc, #104]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008f76:	430a      	orrs	r2, r1
 8008f78:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2204      	movs	r2, #4
 8008f80:	4013      	ands	r3, r2
 8008f82:	d009      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f84:	4b16      	ldr	r3, [pc, #88]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f88:	4a1c      	ldr	r2, [pc, #112]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	0019      	movs	r1, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	691a      	ldr	r2, [r3, #16]
 8008f92:	4b13      	ldr	r3, [pc, #76]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008f94:	430a      	orrs	r2, r1
 8008f96:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2208      	movs	r2, #8
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	d009      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa6:	4a16      	ldr	r2, [pc, #88]	; (8009000 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008fa8:	4013      	ands	r3, r2
 8008faa:	0019      	movs	r1, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	695a      	ldr	r2, [r3, #20]
 8008fb0:	4b0b      	ldr	r3, [pc, #44]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2280      	movs	r2, #128	; 0x80
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	d009      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008fc0:	4b07      	ldr	r3, [pc, #28]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc4:	4a0f      	ldr	r2, [pc, #60]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	0019      	movs	r1, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	699a      	ldr	r2, [r3, #24]
 8008fce:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	0018      	movs	r0, r3
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	b006      	add	sp, #24
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	46c0      	nop			; (mov r8, r8)
 8008fe0:	40021000 	.word	0x40021000
 8008fe4:	40007000 	.word	0x40007000
 8008fe8:	fffcffff 	.word	0xfffcffff
 8008fec:	fff7ffff 	.word	0xfff7ffff
 8008ff0:	00001388 	.word	0x00001388
 8008ff4:	ffcfffff 	.word	0xffcfffff
 8008ff8:	efffffff 	.word	0xefffffff
 8008ffc:	fffff3ff 	.word	0xfffff3ff
 8009000:	ffffcfff 	.word	0xffffcfff
 8009004:	fff3ffff 	.word	0xfff3ffff

08009008 <HAL_RCCEx_EnableLSECSS>:
/**
  * @brief  Enables the LSE Clock Security System.
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSECSSON) ;
 800900c:	4b04      	ldr	r3, [pc, #16]	; (8009020 <HAL_RCCEx_EnableLSECSS+0x18>)
 800900e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009010:	4b03      	ldr	r3, [pc, #12]	; (8009020 <HAL_RCCEx_EnableLSECSS+0x18>)
 8009012:	2180      	movs	r1, #128	; 0x80
 8009014:	0189      	lsls	r1, r1, #6
 8009016:	430a      	orrs	r2, r1
 8009018:	651a      	str	r2, [r3, #80]	; 0x50
}
 800901a:	46c0      	nop			; (mov r8, r8)
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	40021000 	.word	0x40021000

08009024 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e08e      	b.n	8009154 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2221      	movs	r2, #33	; 0x21
 800903a:	5c9b      	ldrb	r3, [r3, r2]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d107      	bne.n	8009052 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2220      	movs	r2, #32
 8009046:	2100      	movs	r1, #0
 8009048:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	0018      	movs	r0, r3
 800904e:	f7fc f9d9 	bl	8005404 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2221      	movs	r2, #33	; 0x21
 8009056:	2102      	movs	r1, #2
 8009058:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	22ca      	movs	r2, #202	; 0xca
 8009060:	625a      	str	r2, [r3, #36]	; 0x24
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2253      	movs	r2, #83	; 0x53
 8009068:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	0018      	movs	r0, r3
 800906e:	f000 f89e 	bl	80091ae <RTC_EnterInitMode>
 8009072:	1e03      	subs	r3, r0, #0
 8009074:	d009      	beq.n	800908a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	22ff      	movs	r2, #255	; 0xff
 800907c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2221      	movs	r2, #33	; 0x21
 8009082:	2104      	movs	r1, #4
 8009084:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e064      	b.n	8009154 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4931      	ldr	r1, [pc, #196]	; (800915c <HAL_RTC_Init+0x138>)
 8009096:	400a      	ands	r2, r1
 8009098:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6899      	ldr	r1, [r3, #8]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	431a      	orrs	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	430a      	orrs	r2, r1
 80090b6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	68d2      	ldr	r2, [r2, #12]
 80090c0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6919      	ldr	r1, [r3, #16]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	041a      	lsls	r2, r3, #16
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68da      	ldr	r2, [r3, #12]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2180      	movs	r1, #128	; 0x80
 80090e2:	438a      	bics	r2, r1
 80090e4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2103      	movs	r1, #3
 80090f2:	438a      	bics	r2, r1
 80090f4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	69da      	ldr	r2, [r3, #28]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	695b      	ldr	r3, [r3, #20]
 8009104:	431a      	orrs	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	430a      	orrs	r2, r1
 800910c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	2220      	movs	r2, #32
 8009116:	4013      	ands	r3, r2
 8009118:	d113      	bne.n	8009142 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	0018      	movs	r0, r3
 800911e:	f000 f81f 	bl	8009160 <HAL_RTC_WaitForSynchro>
 8009122:	1e03      	subs	r3, r0, #0
 8009124:	d00d      	beq.n	8009142 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	22ff      	movs	r2, #255	; 0xff
 800912c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2221      	movs	r2, #33	; 0x21
 8009132:	2104      	movs	r1, #4
 8009134:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2220      	movs	r2, #32
 800913a:	2100      	movs	r1, #0
 800913c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e008      	b.n	8009154 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	22ff      	movs	r2, #255	; 0xff
 8009148:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2221      	movs	r2, #33	; 0x21
 800914e:	2101      	movs	r1, #1
 8009150:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009152:	2300      	movs	r3, #0
  }
}
 8009154:	0018      	movs	r0, r3
 8009156:	46bd      	mov	sp, r7
 8009158:	b002      	add	sp, #8
 800915a:	bd80      	pop	{r7, pc}
 800915c:	ff8fffbf 	.word	0xff8fffbf

08009160 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	21a0      	movs	r1, #160	; 0xa0
 8009174:	438a      	bics	r2, r1
 8009176:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009178:	f7fd fade 	bl	8006738 <HAL_GetTick>
 800917c:	0003      	movs	r3, r0
 800917e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009180:	e00a      	b.n	8009198 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009182:	f7fd fad9 	bl	8006738 <HAL_GetTick>
 8009186:	0002      	movs	r2, r0
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	1ad2      	subs	r2, r2, r3
 800918c:	23fa      	movs	r3, #250	; 0xfa
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	429a      	cmp	r2, r3
 8009192:	d901      	bls.n	8009198 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e006      	b.n	80091a6 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	2220      	movs	r2, #32
 80091a0:	4013      	ands	r3, r2
 80091a2:	d0ee      	beq.n	8009182 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	0018      	movs	r0, r3
 80091a8:	46bd      	mov	sp, r7
 80091aa:	b004      	add	sp, #16
 80091ac:	bd80      	pop	{r7, pc}

080091ae <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	2240      	movs	r2, #64	; 0x40
 80091be:	4013      	ands	r3, r2
 80091c0:	d11a      	bne.n	80091f8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2201      	movs	r2, #1
 80091c8:	4252      	negs	r2, r2
 80091ca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80091cc:	f7fd fab4 	bl	8006738 <HAL_GetTick>
 80091d0:	0003      	movs	r3, r0
 80091d2:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80091d4:	e00a      	b.n	80091ec <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80091d6:	f7fd faaf 	bl	8006738 <HAL_GetTick>
 80091da:	0002      	movs	r2, r0
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	1ad2      	subs	r2, r2, r3
 80091e0:	23fa      	movs	r3, #250	; 0xfa
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d901      	bls.n	80091ec <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e006      	b.n	80091fa <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	2240      	movs	r2, #64	; 0x40
 80091f4:	4013      	ands	r3, r2
 80091f6:	d0ee      	beq.n	80091d6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	0018      	movs	r0, r3
 80091fc:	46bd      	mov	sp, r7
 80091fe:	b004      	add	sp, #16
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2220      	movs	r2, #32
 8009214:	5c9b      	ldrb	r3, [r3, r2]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800921a:	2302      	movs	r3, #2
 800921c:	e0ad      	b.n	800937a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2220      	movs	r2, #32
 8009222:	2101      	movs	r1, #1
 8009224:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2221      	movs	r2, #33	; 0x21
 800922a:	2102      	movs	r1, #2
 800922c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	22ca      	movs	r2, #202	; 0xca
 8009234:	625a      	str	r2, [r3, #36]	; 0x24
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2253      	movs	r2, #83	; 0x53
 800923c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	2380      	movs	r3, #128	; 0x80
 8009246:	00db      	lsls	r3, r3, #3
 8009248:	4013      	ands	r3, r2
 800924a:	d021      	beq.n	8009290 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 800924c:	f7fd fa74 	bl	8006738 <HAL_GetTick>
 8009250:	0003      	movs	r3, r0
 8009252:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009254:	e016      	b.n	8009284 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009256:	f7fd fa6f 	bl	8006738 <HAL_GetTick>
 800925a:	0002      	movs	r2, r0
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	1ad2      	subs	r2, r2, r3
 8009260:	23fa      	movs	r3, #250	; 0xfa
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	429a      	cmp	r2, r3
 8009266:	d90d      	bls.n	8009284 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	22ff      	movs	r2, #255	; 0xff
 800926e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2221      	movs	r2, #33	; 0x21
 8009274:	2103      	movs	r1, #3
 8009276:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2220      	movs	r2, #32
 800927c:	2100      	movs	r1, #0
 800927e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e07a      	b.n	800937a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	2204      	movs	r2, #4
 800928c:	4013      	ands	r3, r2
 800928e:	d1e2      	bne.n	8009256 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	689a      	ldr	r2, [r3, #8]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	493a      	ldr	r1, [pc, #232]	; (8009384 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800929c:	400a      	ands	r2, r1
 800929e:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	22ff      	movs	r2, #255	; 0xff
 80092a8:	401a      	ands	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4936      	ldr	r1, [pc, #216]	; (8009388 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 80092b0:	430a      	orrs	r2, r1
 80092b2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80092b4:	f7fd fa40 	bl	8006738 <HAL_GetTick>
 80092b8:	0003      	movs	r3, r0
 80092ba:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80092bc:	e016      	b.n	80092ec <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80092be:	f7fd fa3b 	bl	8006738 <HAL_GetTick>
 80092c2:	0002      	movs	r2, r0
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	1ad2      	subs	r2, r2, r3
 80092c8:	23fa      	movs	r3, #250	; 0xfa
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d90d      	bls.n	80092ec <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	22ff      	movs	r2, #255	; 0xff
 80092d6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2221      	movs	r2, #33	; 0x21
 80092dc:	2103      	movs	r1, #3
 80092de:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2220      	movs	r2, #32
 80092e4:	2100      	movs	r1, #0
 80092e6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e046      	b.n	800937a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	2204      	movs	r2, #4
 80092f4:	4013      	ands	r3, r2
 80092f6:	d0e2      	beq.n	80092be <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	689a      	ldr	r2, [r3, #8]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2107      	movs	r1, #7
 800930c:	438a      	bics	r2, r1
 800930e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6899      	ldr	r1, [r3, #8]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	430a      	orrs	r2, r1
 800931e:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009320:	4b1a      	ldr	r3, [pc, #104]	; (800938c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	4b19      	ldr	r3, [pc, #100]	; (800938c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8009326:	2180      	movs	r1, #128	; 0x80
 8009328:	0349      	lsls	r1, r1, #13
 800932a:	430a      	orrs	r2, r1
 800932c:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800932e:	4b17      	ldr	r3, [pc, #92]	; (800938c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8009330:	689a      	ldr	r2, [r3, #8]
 8009332:	4b16      	ldr	r3, [pc, #88]	; (800938c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8009334:	2180      	movs	r1, #128	; 0x80
 8009336:	0349      	lsls	r1, r1, #13
 8009338:	430a      	orrs	r2, r1
 800933a:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689a      	ldr	r2, [r3, #8]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2180      	movs	r1, #128	; 0x80
 8009348:	01c9      	lsls	r1, r1, #7
 800934a:	430a      	orrs	r2, r1
 800934c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2180      	movs	r1, #128	; 0x80
 800935a:	00c9      	lsls	r1, r1, #3
 800935c:	430a      	orrs	r2, r1
 800935e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	22ff      	movs	r2, #255	; 0xff
 8009366:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2221      	movs	r2, #33	; 0x21
 800936c:	2101      	movs	r1, #1
 800936e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2220      	movs	r2, #32
 8009374:	2100      	movs	r1, #0
 8009376:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	0018      	movs	r0, r3
 800937c:	46bd      	mov	sp, r7
 800937e:	b006      	add	sp, #24
 8009380:	bd80      	pop	{r7, pc}
 8009382:	46c0      	nop			; (mov r8, r8)
 8009384:	fffffbff 	.word	0xfffffbff
 8009388:	fffffb7f 	.word	0xfffffb7f
 800938c:	40010400 	.word	0x40010400

08009390 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68da      	ldr	r2, [r3, #12]
 800939e:	2380      	movs	r3, #128	; 0x80
 80093a0:	00db      	lsls	r3, r3, #3
 80093a2:	4013      	ands	r3, r2
 80093a4:	d00d      	beq.n	80093c2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	0018      	movs	r0, r3
 80093aa:	f7fa f9cf 	bl	800374c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	22ff      	movs	r2, #255	; 0xff
 80093b6:	401a      	ands	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4907      	ldr	r1, [pc, #28]	; (80093dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 80093be:	430a      	orrs	r2, r1
 80093c0:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80093c2:	4b07      	ldr	r3, [pc, #28]	; (80093e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 80093c4:	2280      	movs	r2, #128	; 0x80
 80093c6:	0352      	lsls	r2, r2, #13
 80093c8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2221      	movs	r2, #33	; 0x21
 80093ce:	2101      	movs	r1, #1
 80093d0:	5499      	strb	r1, [r3, r2]
}
 80093d2:	46c0      	nop			; (mov r8, r8)
 80093d4:	46bd      	mov	sp, r7
 80093d6:	b002      	add	sp, #8
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	46c0      	nop			; (mov r8, r8)
 80093dc:	fffffb7f 	.word	0xfffffb7f
 80093e0:	40010400 	.word	0x40010400

080093e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e083      	b.n	80094fe <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d109      	bne.n	8009412 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685a      	ldr	r2, [r3, #4]
 8009402:	2382      	movs	r3, #130	; 0x82
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	429a      	cmp	r2, r3
 8009408:	d009      	beq.n	800941e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	61da      	str	r2, [r3, #28]
 8009410:	e005      	b.n	800941e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2251      	movs	r2, #81	; 0x51
 8009428:	5c9b      	ldrb	r3, [r3, r2]
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	d107      	bne.n	8009440 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2250      	movs	r2, #80	; 0x50
 8009434:	2100      	movs	r1, #0
 8009436:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	0018      	movs	r0, r3
 800943c:	f7fc f802 	bl	8005444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2251      	movs	r2, #81	; 0x51
 8009444:	2102      	movs	r1, #2
 8009446:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2140      	movs	r1, #64	; 0x40
 8009454:	438a      	bics	r2, r1
 8009456:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	2382      	movs	r3, #130	; 0x82
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	401a      	ands	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6899      	ldr	r1, [r3, #8]
 8009466:	2384      	movs	r3, #132	; 0x84
 8009468:	021b      	lsls	r3, r3, #8
 800946a:	400b      	ands	r3, r1
 800946c:	431a      	orrs	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68d9      	ldr	r1, [r3, #12]
 8009472:	2380      	movs	r3, #128	; 0x80
 8009474:	011b      	lsls	r3, r3, #4
 8009476:	400b      	ands	r3, r1
 8009478:	431a      	orrs	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	2102      	movs	r1, #2
 8009480:	400b      	ands	r3, r1
 8009482:	431a      	orrs	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	695b      	ldr	r3, [r3, #20]
 8009488:	2101      	movs	r1, #1
 800948a:	400b      	ands	r3, r1
 800948c:	431a      	orrs	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6999      	ldr	r1, [r3, #24]
 8009492:	2380      	movs	r3, #128	; 0x80
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	400b      	ands	r3, r1
 8009498:	431a      	orrs	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	2138      	movs	r1, #56	; 0x38
 80094a0:	400b      	ands	r3, r1
 80094a2:	431a      	orrs	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	2180      	movs	r1, #128	; 0x80
 80094aa:	400b      	ands	r3, r1
 80094ac:	431a      	orrs	r2, r3
 80094ae:	0011      	movs	r1, r2
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094b4:	2380      	movs	r3, #128	; 0x80
 80094b6:	019b      	lsls	r3, r3, #6
 80094b8:	401a      	ands	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	0c1b      	lsrs	r3, r3, #16
 80094c8:	2204      	movs	r2, #4
 80094ca:	4013      	ands	r3, r2
 80094cc:	0019      	movs	r1, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d2:	2210      	movs	r2, #16
 80094d4:	401a      	ands	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	430a      	orrs	r2, r1
 80094dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69da      	ldr	r2, [r3, #28]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4907      	ldr	r1, [pc, #28]	; (8009508 <HAL_SPI_Init+0x124>)
 80094ea:	400a      	ands	r2, r1
 80094ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2251      	movs	r2, #81	; 0x51
 80094f8:	2101      	movs	r1, #1
 80094fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	0018      	movs	r0, r3
 8009500:	46bd      	mov	sp, r7
 8009502:	b002      	add	sp, #8
 8009504:	bd80      	pop	{r7, pc}
 8009506:	46c0      	nop			; (mov r8, r8)
 8009508:	fffff7ff 	.word	0xfffff7ff

0800950c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b088      	sub	sp, #32
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	1dbb      	adds	r3, r7, #6
 800951a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800951c:	231f      	movs	r3, #31
 800951e:	18fb      	adds	r3, r7, r3
 8009520:	2200      	movs	r2, #0
 8009522:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2250      	movs	r2, #80	; 0x50
 8009528:	5c9b      	ldrb	r3, [r3, r2]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d101      	bne.n	8009532 <HAL_SPI_Transmit+0x26>
 800952e:	2302      	movs	r3, #2
 8009530:	e13e      	b.n	80097b0 <HAL_SPI_Transmit+0x2a4>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2250      	movs	r2, #80	; 0x50
 8009536:	2101      	movs	r1, #1
 8009538:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800953a:	f7fd f8fd 	bl	8006738 <HAL_GetTick>
 800953e:	0003      	movs	r3, r0
 8009540:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009542:	2316      	movs	r3, #22
 8009544:	18fb      	adds	r3, r7, r3
 8009546:	1dba      	adds	r2, r7, #6
 8009548:	8812      	ldrh	r2, [r2, #0]
 800954a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2251      	movs	r2, #81	; 0x51
 8009550:	5c9b      	ldrb	r3, [r3, r2]
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b01      	cmp	r3, #1
 8009556:	d004      	beq.n	8009562 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009558:	231f      	movs	r3, #31
 800955a:	18fb      	adds	r3, r7, r3
 800955c:	2202      	movs	r2, #2
 800955e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009560:	e11b      	b.n	800979a <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d003      	beq.n	8009570 <HAL_SPI_Transmit+0x64>
 8009568:	1dbb      	adds	r3, r7, #6
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d104      	bne.n	800957a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009570:	231f      	movs	r3, #31
 8009572:	18fb      	adds	r3, r7, r3
 8009574:	2201      	movs	r2, #1
 8009576:	701a      	strb	r2, [r3, #0]
    goto error;
 8009578:	e10f      	b.n	800979a <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2251      	movs	r2, #81	; 0x51
 800957e:	2103      	movs	r1, #3
 8009580:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	1dba      	adds	r2, r7, #6
 8009592:	8812      	ldrh	r2, [r2, #0]
 8009594:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	1dba      	adds	r2, r7, #6
 800959a:	8812      	ldrh	r2, [r2, #0]
 800959c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	2380      	movs	r3, #128	; 0x80
 80095c2:	021b      	lsls	r3, r3, #8
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d110      	bne.n	80095ea <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2140      	movs	r1, #64	; 0x40
 80095d4:	438a      	bics	r2, r1
 80095d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2180      	movs	r1, #128	; 0x80
 80095e4:	01c9      	lsls	r1, r1, #7
 80095e6:	430a      	orrs	r2, r1
 80095e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2240      	movs	r2, #64	; 0x40
 80095f2:	4013      	ands	r3, r2
 80095f4:	2b40      	cmp	r3, #64	; 0x40
 80095f6:	d007      	beq.n	8009608 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2140      	movs	r1, #64	; 0x40
 8009604:	430a      	orrs	r2, r1
 8009606:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	68da      	ldr	r2, [r3, #12]
 800960c:	2380      	movs	r3, #128	; 0x80
 800960e:	011b      	lsls	r3, r3, #4
 8009610:	429a      	cmp	r2, r3
 8009612:	d14e      	bne.n	80096b2 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d004      	beq.n	8009626 <HAL_SPI_Transmit+0x11a>
 800961c:	2316      	movs	r3, #22
 800961e:	18fb      	adds	r3, r7, r3
 8009620:	881b      	ldrh	r3, [r3, #0]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d13f      	bne.n	80096a6 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962a:	881a      	ldrh	r2, [r3, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009636:	1c9a      	adds	r2, r3, #2
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009640:	b29b      	uxth	r3, r3
 8009642:	3b01      	subs	r3, #1
 8009644:	b29a      	uxth	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800964a:	e02c      	b.n	80096a6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	2202      	movs	r2, #2
 8009654:	4013      	ands	r3, r2
 8009656:	2b02      	cmp	r3, #2
 8009658:	d112      	bne.n	8009680 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965e:	881a      	ldrh	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966a:	1c9a      	adds	r2, r3, #2
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009674:	b29b      	uxth	r3, r3
 8009676:	3b01      	subs	r3, #1
 8009678:	b29a      	uxth	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	86da      	strh	r2, [r3, #54]	; 0x36
 800967e:	e012      	b.n	80096a6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009680:	f7fd f85a 	bl	8006738 <HAL_GetTick>
 8009684:	0002      	movs	r2, r0
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	429a      	cmp	r2, r3
 800968e:	d802      	bhi.n	8009696 <HAL_SPI_Transmit+0x18a>
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	3301      	adds	r3, #1
 8009694:	d102      	bne.n	800969c <HAL_SPI_Transmit+0x190>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d104      	bne.n	80096a6 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 800969c:	231f      	movs	r3, #31
 800969e:	18fb      	adds	r3, r7, r3
 80096a0:	2203      	movs	r2, #3
 80096a2:	701a      	strb	r2, [r3, #0]
          goto error;
 80096a4:	e079      	b.n	800979a <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1cd      	bne.n	800964c <HAL_SPI_Transmit+0x140>
 80096b0:	e04f      	b.n	8009752 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d004      	beq.n	80096c4 <HAL_SPI_Transmit+0x1b8>
 80096ba:	2316      	movs	r3, #22
 80096bc:	18fb      	adds	r3, r7, r3
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d141      	bne.n	8009748 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	330c      	adds	r3, #12
 80096ce:	7812      	ldrb	r2, [r2, #0]
 80096d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80096ea:	e02d      	b.n	8009748 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	2202      	movs	r2, #2
 80096f4:	4013      	ands	r3, r2
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d113      	bne.n	8009722 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	330c      	adds	r3, #12
 8009704:	7812      	ldrb	r2, [r2, #0]
 8009706:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970c:	1c5a      	adds	r2, r3, #1
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009716:	b29b      	uxth	r3, r3
 8009718:	3b01      	subs	r3, #1
 800971a:	b29a      	uxth	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009720:	e012      	b.n	8009748 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009722:	f7fd f809 	bl	8006738 <HAL_GetTick>
 8009726:	0002      	movs	r2, r0
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	429a      	cmp	r2, r3
 8009730:	d802      	bhi.n	8009738 <HAL_SPI_Transmit+0x22c>
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	3301      	adds	r3, #1
 8009736:	d102      	bne.n	800973e <HAL_SPI_Transmit+0x232>
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d104      	bne.n	8009748 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 800973e:	231f      	movs	r3, #31
 8009740:	18fb      	adds	r3, r7, r3
 8009742:	2203      	movs	r2, #3
 8009744:	701a      	strb	r2, [r3, #0]
          goto error;
 8009746:	e028      	b.n	800979a <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800974c:	b29b      	uxth	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1cc      	bne.n	80096ec <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	0018      	movs	r0, r3
 800975a:	f000 fa83 	bl	8009c64 <SPI_EndRxTxTransaction>
 800975e:	1e03      	subs	r3, r0, #0
 8009760:	d002      	beq.n	8009768 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2220      	movs	r2, #32
 8009766:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10a      	bne.n	8009786 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009770:	2300      	movs	r3, #0
 8009772:	613b      	str	r3, [r7, #16]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	613b      	str	r3, [r7, #16]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	613b      	str	r3, [r7, #16]
 8009784:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800978a:	2b00      	cmp	r3, #0
 800978c:	d004      	beq.n	8009798 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 800978e:	231f      	movs	r3, #31
 8009790:	18fb      	adds	r3, r7, r3
 8009792:	2201      	movs	r2, #1
 8009794:	701a      	strb	r2, [r3, #0]
 8009796:	e000      	b.n	800979a <HAL_SPI_Transmit+0x28e>
  }

error:
 8009798:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2251      	movs	r2, #81	; 0x51
 800979e:	2101      	movs	r1, #1
 80097a0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2250      	movs	r2, #80	; 0x50
 80097a6:	2100      	movs	r1, #0
 80097a8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80097aa:	231f      	movs	r3, #31
 80097ac:	18fb      	adds	r3, r7, r3
 80097ae:	781b      	ldrb	r3, [r3, #0]
}
 80097b0:	0018      	movs	r0, r3
 80097b2:	46bd      	mov	sp, r7
 80097b4:	b008      	add	sp, #32
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08c      	sub	sp, #48	; 0x30
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	001a      	movs	r2, r3
 80097c6:	1cbb      	adds	r3, r7, #2
 80097c8:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80097ca:	2301      	movs	r3, #1
 80097cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80097ce:	232b      	movs	r3, #43	; 0x2b
 80097d0:	18fb      	adds	r3, r7, r3
 80097d2:	2200      	movs	r2, #0
 80097d4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2250      	movs	r2, #80	; 0x50
 80097da:	5c9b      	ldrb	r3, [r3, r2]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d101      	bne.n	80097e4 <HAL_SPI_TransmitReceive+0x2c>
 80097e0:	2302      	movs	r3, #2
 80097e2:	e1a0      	b.n	8009b26 <HAL_SPI_TransmitReceive+0x36e>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2250      	movs	r2, #80	; 0x50
 80097e8:	2101      	movs	r1, #1
 80097ea:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097ec:	f7fc ffa4 	bl	8006738 <HAL_GetTick>
 80097f0:	0003      	movs	r3, r0
 80097f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80097f4:	2023      	movs	r0, #35	; 0x23
 80097f6:	183b      	adds	r3, r7, r0
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	2151      	movs	r1, #81	; 0x51
 80097fc:	5c52      	ldrb	r2, [r2, r1]
 80097fe:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009806:	231a      	movs	r3, #26
 8009808:	18fb      	adds	r3, r7, r3
 800980a:	1cba      	adds	r2, r7, #2
 800980c:	8812      	ldrh	r2, [r2, #0]
 800980e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009810:	183b      	adds	r3, r7, r0
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d011      	beq.n	800983c <HAL_SPI_TransmitReceive+0x84>
 8009818:	69fa      	ldr	r2, [r7, #28]
 800981a:	2382      	movs	r3, #130	; 0x82
 800981c:	005b      	lsls	r3, r3, #1
 800981e:	429a      	cmp	r2, r3
 8009820:	d107      	bne.n	8009832 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d103      	bne.n	8009832 <HAL_SPI_TransmitReceive+0x7a>
 800982a:	183b      	adds	r3, r7, r0
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	2b04      	cmp	r3, #4
 8009830:	d004      	beq.n	800983c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8009832:	232b      	movs	r3, #43	; 0x2b
 8009834:	18fb      	adds	r3, r7, r3
 8009836:	2202      	movs	r2, #2
 8009838:	701a      	strb	r2, [r3, #0]
    goto error;
 800983a:	e169      	b.n	8009b10 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d006      	beq.n	8009850 <HAL_SPI_TransmitReceive+0x98>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d003      	beq.n	8009850 <HAL_SPI_TransmitReceive+0x98>
 8009848:	1cbb      	adds	r3, r7, #2
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d104      	bne.n	800985a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8009850:	232b      	movs	r3, #43	; 0x2b
 8009852:	18fb      	adds	r3, r7, r3
 8009854:	2201      	movs	r2, #1
 8009856:	701a      	strb	r2, [r3, #0]
    goto error;
 8009858:	e15a      	b.n	8009b10 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2251      	movs	r2, #81	; 0x51
 800985e:	5c9b      	ldrb	r3, [r3, r2]
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b04      	cmp	r3, #4
 8009864:	d003      	beq.n	800986e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2251      	movs	r2, #81	; 0x51
 800986a:	2105      	movs	r1, #5
 800986c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	1cba      	adds	r2, r7, #2
 800987e:	8812      	ldrh	r2, [r2, #0]
 8009880:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	1cba      	adds	r2, r7, #2
 8009886:	8812      	ldrh	r2, [r2, #0]
 8009888:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	1cba      	adds	r2, r7, #2
 8009894:	8812      	ldrh	r2, [r2, #0]
 8009896:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	1cba      	adds	r2, r7, #2
 800989c:	8812      	ldrh	r2, [r2, #0]
 800989e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2240      	movs	r2, #64	; 0x40
 80098b4:	4013      	ands	r3, r2
 80098b6:	2b40      	cmp	r3, #64	; 0x40
 80098b8:	d007      	beq.n	80098ca <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2140      	movs	r1, #64	; 0x40
 80098c6:	430a      	orrs	r2, r1
 80098c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	2380      	movs	r3, #128	; 0x80
 80098d0:	011b      	lsls	r3, r3, #4
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d000      	beq.n	80098d8 <HAL_SPI_TransmitReceive+0x120>
 80098d6:	e07a      	b.n	80099ce <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d004      	beq.n	80098ea <HAL_SPI_TransmitReceive+0x132>
 80098e0:	231a      	movs	r3, #26
 80098e2:	18fb      	adds	r3, r7, r3
 80098e4:	881b      	ldrh	r3, [r3, #0]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d166      	bne.n	80099b8 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ee:	881a      	ldrh	r2, [r3, #0]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fa:	1c9a      	adds	r2, r3, #2
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009904:	b29b      	uxth	r3, r3
 8009906:	3b01      	subs	r3, #1
 8009908:	b29a      	uxth	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800990e:	e053      	b.n	80099b8 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	2202      	movs	r2, #2
 8009918:	4013      	ands	r3, r2
 800991a:	2b02      	cmp	r3, #2
 800991c:	d11b      	bne.n	8009956 <HAL_SPI_TransmitReceive+0x19e>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009922:	b29b      	uxth	r3, r3
 8009924:	2b00      	cmp	r3, #0
 8009926:	d016      	beq.n	8009956 <HAL_SPI_TransmitReceive+0x19e>
 8009928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992a:	2b01      	cmp	r3, #1
 800992c:	d113      	bne.n	8009956 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009932:	881a      	ldrh	r2, [r3, #0]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993e:	1c9a      	adds	r2, r3, #2
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009948:	b29b      	uxth	r3, r3
 800994a:	3b01      	subs	r3, #1
 800994c:	b29a      	uxth	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009952:	2300      	movs	r3, #0
 8009954:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	2201      	movs	r2, #1
 800995e:	4013      	ands	r3, r2
 8009960:	2b01      	cmp	r3, #1
 8009962:	d119      	bne.n	8009998 <HAL_SPI_TransmitReceive+0x1e0>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009968:	b29b      	uxth	r3, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d014      	beq.n	8009998 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68da      	ldr	r2, [r3, #12]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009978:	b292      	uxth	r2, r2
 800997a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009980:	1c9a      	adds	r2, r3, #2
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800998a:	b29b      	uxth	r3, r3
 800998c:	3b01      	subs	r3, #1
 800998e:	b29a      	uxth	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009994:	2301      	movs	r3, #1
 8009996:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009998:	f7fc fece 	bl	8006738 <HAL_GetTick>
 800999c:	0002      	movs	r2, r0
 800999e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d807      	bhi.n	80099b8 <HAL_SPI_TransmitReceive+0x200>
 80099a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099aa:	3301      	adds	r3, #1
 80099ac:	d004      	beq.n	80099b8 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80099ae:	232b      	movs	r3, #43	; 0x2b
 80099b0:	18fb      	adds	r3, r7, r3
 80099b2:	2203      	movs	r2, #3
 80099b4:	701a      	strb	r2, [r3, #0]
        goto error;
 80099b6:	e0ab      	b.n	8009b10 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099bc:	b29b      	uxth	r3, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1a6      	bne.n	8009910 <HAL_SPI_TransmitReceive+0x158>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1a1      	bne.n	8009910 <HAL_SPI_TransmitReceive+0x158>
 80099cc:	e07f      	b.n	8009ace <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d005      	beq.n	80099e2 <HAL_SPI_TransmitReceive+0x22a>
 80099d6:	231a      	movs	r3, #26
 80099d8:	18fb      	adds	r3, r7, r3
 80099da:	881b      	ldrh	r3, [r3, #0]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d000      	beq.n	80099e2 <HAL_SPI_TransmitReceive+0x22a>
 80099e0:	e06b      	b.n	8009aba <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	330c      	adds	r3, #12
 80099ec:	7812      	ldrb	r2, [r2, #0]
 80099ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f4:	1c5a      	adds	r2, r3, #1
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	3b01      	subs	r3, #1
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a08:	e057      	b.n	8009aba <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	2202      	movs	r2, #2
 8009a12:	4013      	ands	r3, r2
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d11c      	bne.n	8009a52 <HAL_SPI_TransmitReceive+0x29a>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d017      	beq.n	8009a52 <HAL_SPI_TransmitReceive+0x29a>
 8009a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d114      	bne.n	8009a52 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	330c      	adds	r3, #12
 8009a32:	7812      	ldrb	r2, [r2, #0]
 8009a34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	3b01      	subs	r3, #1
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d119      	bne.n	8009a94 <HAL_SPI_TransmitReceive+0x2dc>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d014      	beq.n	8009a94 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68da      	ldr	r2, [r3, #12]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a74:	b2d2      	uxtb	r2, r2
 8009a76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7c:	1c5a      	adds	r2, r3, #1
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a90:	2301      	movs	r3, #1
 8009a92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a94:	f7fc fe50 	bl	8006738 <HAL_GetTick>
 8009a98:	0002      	movs	r2, r0
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d802      	bhi.n	8009aaa <HAL_SPI_TransmitReceive+0x2f2>
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	d102      	bne.n	8009ab0 <HAL_SPI_TransmitReceive+0x2f8>
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d104      	bne.n	8009aba <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8009ab0:	232b      	movs	r3, #43	; 0x2b
 8009ab2:	18fb      	adds	r3, r7, r3
 8009ab4:	2203      	movs	r2, #3
 8009ab6:	701a      	strb	r2, [r3, #0]
        goto error;
 8009ab8:	e02a      	b.n	8009b10 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1a2      	bne.n	8009a0a <HAL_SPI_TransmitReceive+0x252>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d19d      	bne.n	8009a0a <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	0018      	movs	r0, r3
 8009ad6:	f000 f8c5 	bl	8009c64 <SPI_EndRxTxTransaction>
 8009ada:	1e03      	subs	r3, r0, #0
 8009adc:	d007      	beq.n	8009aee <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8009ade:	232b      	movs	r3, #43	; 0x2b
 8009ae0:	18fb      	adds	r3, r7, r3
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2220      	movs	r2, #32
 8009aea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009aec:	e010      	b.n	8009b10 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10b      	bne.n	8009b0e <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009af6:	2300      	movs	r3, #0
 8009af8:	617b      	str	r3, [r7, #20]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	617b      	str	r3, [r7, #20]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	617b      	str	r3, [r7, #20]
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	e000      	b.n	8009b10 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8009b0e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2251      	movs	r2, #81	; 0x51
 8009b14:	2101      	movs	r1, #1
 8009b16:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2250      	movs	r2, #80	; 0x50
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009b20:	232b      	movs	r3, #43	; 0x2b
 8009b22:	18fb      	adds	r3, r7, r3
 8009b24:	781b      	ldrb	r3, [r3, #0]
}
 8009b26:	0018      	movs	r0, r3
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	b00c      	add	sp, #48	; 0x30
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b082      	sub	sp, #8
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2251      	movs	r2, #81	; 0x51
 8009b3a:	5c9b      	ldrb	r3, [r3, r2]
 8009b3c:	b2db      	uxtb	r3, r3
}
 8009b3e:	0018      	movs	r0, r3
 8009b40:	46bd      	mov	sp, r7
 8009b42:	b002      	add	sp, #8
 8009b44:	bd80      	pop	{r7, pc}
	...

08009b48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	603b      	str	r3, [r7, #0]
 8009b54:	1dfb      	adds	r3, r7, #7
 8009b56:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b58:	f7fc fdee 	bl	8006738 <HAL_GetTick>
 8009b5c:	0002      	movs	r2, r0
 8009b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b60:	1a9b      	subs	r3, r3, r2
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	18d3      	adds	r3, r2, r3
 8009b66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b68:	f7fc fde6 	bl	8006738 <HAL_GetTick>
 8009b6c:	0003      	movs	r3, r0
 8009b6e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b70:	4b3a      	ldr	r3, [pc, #232]	; (8009c5c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	015b      	lsls	r3, r3, #5
 8009b76:	0d1b      	lsrs	r3, r3, #20
 8009b78:	69fa      	ldr	r2, [r7, #28]
 8009b7a:	4353      	muls	r3, r2
 8009b7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b7e:	e058      	b.n	8009c32 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	3301      	adds	r3, #1
 8009b84:	d055      	beq.n	8009c32 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b86:	f7fc fdd7 	bl	8006738 <HAL_GetTick>
 8009b8a:	0002      	movs	r2, r0
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	69fa      	ldr	r2, [r7, #28]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d902      	bls.n	8009b9c <SPI_WaitFlagStateUntilTimeout+0x54>
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d142      	bne.n	8009c22 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	685a      	ldr	r2, [r3, #4]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	21e0      	movs	r1, #224	; 0xe0
 8009ba8:	438a      	bics	r2, r1
 8009baa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	2382      	movs	r3, #130	; 0x82
 8009bb2:	005b      	lsls	r3, r3, #1
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d113      	bne.n	8009be0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	689a      	ldr	r2, [r3, #8]
 8009bbc:	2380      	movs	r3, #128	; 0x80
 8009bbe:	021b      	lsls	r3, r3, #8
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d005      	beq.n	8009bd0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	689a      	ldr	r2, [r3, #8]
 8009bc8:	2380      	movs	r3, #128	; 0x80
 8009bca:	00db      	lsls	r3, r3, #3
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d107      	bne.n	8009be0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2140      	movs	r1, #64	; 0x40
 8009bdc:	438a      	bics	r2, r1
 8009bde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009be4:	2380      	movs	r3, #128	; 0x80
 8009be6:	019b      	lsls	r3, r3, #6
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d110      	bne.n	8009c0e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	491a      	ldr	r1, [pc, #104]	; (8009c60 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009bf8:	400a      	ands	r2, r1
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2180      	movs	r1, #128	; 0x80
 8009c08:	0189      	lsls	r1, r1, #6
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2251      	movs	r2, #81	; 0x51
 8009c12:	2101      	movs	r1, #1
 8009c14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2250      	movs	r2, #80	; 0x50
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e017      	b.n	8009c52 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d101      	bne.n	8009c2c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	425a      	negs	r2, r3
 8009c42:	4153      	adcs	r3, r2
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	001a      	movs	r2, r3
 8009c48:	1dfb      	adds	r3, r7, #7
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d197      	bne.n	8009b80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	0018      	movs	r0, r3
 8009c54:	46bd      	mov	sp, r7
 8009c56:	b008      	add	sp, #32
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	46c0      	nop			; (mov r8, r8)
 8009c5c:	20000024 	.word	0x20000024
 8009c60:	ffffdfff 	.word	0xffffdfff

08009c64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b088      	sub	sp, #32
 8009c68:	af02      	add	r7, sp, #8
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c70:	4b1d      	ldr	r3, [pc, #116]	; (8009ce8 <SPI_EndRxTxTransaction+0x84>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	491d      	ldr	r1, [pc, #116]	; (8009cec <SPI_EndRxTxTransaction+0x88>)
 8009c76:	0018      	movs	r0, r3
 8009c78:	f7f6 fa62 	bl	8000140 <__udivsi3>
 8009c7c:	0003      	movs	r3, r0
 8009c7e:	001a      	movs	r2, r3
 8009c80:	0013      	movs	r3, r2
 8009c82:	015b      	lsls	r3, r3, #5
 8009c84:	1a9b      	subs	r3, r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	189b      	adds	r3, r3, r2
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	2382      	movs	r3, #130	; 0x82
 8009c94:	005b      	lsls	r3, r3, #1
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d112      	bne.n	8009cc0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	0013      	movs	r3, r2
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	2180      	movs	r1, #128	; 0x80
 8009ca8:	f7ff ff4e 	bl	8009b48 <SPI_WaitFlagStateUntilTimeout>
 8009cac:	1e03      	subs	r3, r0, #0
 8009cae:	d016      	beq.n	8009cde <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cb4:	2220      	movs	r2, #32
 8009cb6:	431a      	orrs	r2, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e00f      	b.n	8009ce0 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00a      	beq.n	8009cdc <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	2280      	movs	r2, #128	; 0x80
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	2b80      	cmp	r3, #128	; 0x80
 8009cd8:	d0f2      	beq.n	8009cc0 <SPI_EndRxTxTransaction+0x5c>
 8009cda:	e000      	b.n	8009cde <SPI_EndRxTxTransaction+0x7a>
        break;
 8009cdc:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	b006      	add	sp, #24
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	20000024 	.word	0x20000024
 8009cec:	016e3600 	.word	0x016e3600

08009cf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e044      	b.n	8009d8c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d107      	bne.n	8009d1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2274      	movs	r2, #116	; 0x74
 8009d0e:	2100      	movs	r1, #0
 8009d10:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	0018      	movs	r0, r3
 8009d16:	f7fb fbd9 	bl	80054cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2224      	movs	r2, #36	; 0x24
 8009d1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	438a      	bics	r2, r1
 8009d2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	0018      	movs	r0, r3
 8009d34:	f000 f964 	bl	800a000 <UART_SetConfig>
 8009d38:	0003      	movs	r3, r0
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d101      	bne.n	8009d42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e024      	b.n	8009d8c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f000 fbdb 	bl	800a508 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	490d      	ldr	r1, [pc, #52]	; (8009d94 <HAL_UART_Init+0xa4>)
 8009d5e:	400a      	ands	r2, r1
 8009d60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	689a      	ldr	r2, [r3, #8]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	212a      	movs	r1, #42	; 0x2a
 8009d6e:	438a      	bics	r2, r1
 8009d70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	0018      	movs	r0, r3
 8009d86:	f000 fc73 	bl	800a670 <UART_CheckIdleState>
 8009d8a:	0003      	movs	r3, r0
}
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	b002      	add	sp, #8
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	ffffb7ff 	.word	0xffffb7ff

08009d98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08a      	sub	sp, #40	; 0x28
 8009d9c:	af02      	add	r7, sp, #8
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	603b      	str	r3, [r7, #0]
 8009da4:	1dbb      	adds	r3, r7, #6
 8009da6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dac:	2b20      	cmp	r3, #32
 8009dae:	d000      	beq.n	8009db2 <HAL_UART_Transmit+0x1a>
 8009db0:	e095      	b.n	8009ede <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d003      	beq.n	8009dc0 <HAL_UART_Transmit+0x28>
 8009db8:	1dbb      	adds	r3, r7, #6
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e08d      	b.n	8009ee0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	689a      	ldr	r2, [r3, #8]
 8009dc8:	2380      	movs	r3, #128	; 0x80
 8009dca:	015b      	lsls	r3, r3, #5
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d109      	bne.n	8009de4 <HAL_UART_Transmit+0x4c>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d105      	bne.n	8009de4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	4013      	ands	r3, r2
 8009dde:	d001      	beq.n	8009de4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	e07d      	b.n	8009ee0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2274      	movs	r2, #116	; 0x74
 8009de8:	5c9b      	ldrb	r3, [r3, r2]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d101      	bne.n	8009df2 <HAL_UART_Transmit+0x5a>
 8009dee:	2302      	movs	r3, #2
 8009df0:	e076      	b.n	8009ee0 <HAL_UART_Transmit+0x148>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2274      	movs	r2, #116	; 0x74
 8009df6:	2101      	movs	r1, #1
 8009df8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2280      	movs	r2, #128	; 0x80
 8009dfe:	2100      	movs	r1, #0
 8009e00:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2221      	movs	r2, #33	; 0x21
 8009e06:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e08:	f7fc fc96 	bl	8006738 <HAL_GetTick>
 8009e0c:	0003      	movs	r3, r0
 8009e0e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	1dba      	adds	r2, r7, #6
 8009e14:	2150      	movs	r1, #80	; 0x50
 8009e16:	8812      	ldrh	r2, [r2, #0]
 8009e18:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	1dba      	adds	r2, r7, #6
 8009e1e:	2152      	movs	r1, #82	; 0x52
 8009e20:	8812      	ldrh	r2, [r2, #0]
 8009e22:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	689a      	ldr	r2, [r3, #8]
 8009e28:	2380      	movs	r3, #128	; 0x80
 8009e2a:	015b      	lsls	r3, r3, #5
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d108      	bne.n	8009e42 <HAL_UART_Transmit+0xaa>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d104      	bne.n	8009e42 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	61bb      	str	r3, [r7, #24]
 8009e40:	e003      	b.n	8009e4a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e46:	2300      	movs	r3, #0
 8009e48:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2274      	movs	r2, #116	; 0x74
 8009e4e:	2100      	movs	r1, #0
 8009e50:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8009e52:	e02c      	b.n	8009eae <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	0013      	movs	r3, r2
 8009e5e:	2200      	movs	r2, #0
 8009e60:	2180      	movs	r1, #128	; 0x80
 8009e62:	f000 fc4d 	bl	800a700 <UART_WaitOnFlagUntilTimeout>
 8009e66:	1e03      	subs	r3, r0, #0
 8009e68:	d001      	beq.n	8009e6e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	e038      	b.n	8009ee0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10b      	bne.n	8009e8c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	881b      	ldrh	r3, [r3, #0]
 8009e78:	001a      	movs	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	05d2      	lsls	r2, r2, #23
 8009e80:	0dd2      	lsrs	r2, r2, #23
 8009e82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	3302      	adds	r3, #2
 8009e88:	61bb      	str	r3, [r7, #24]
 8009e8a:	e007      	b.n	8009e9c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	781a      	ldrb	r2, [r3, #0]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2252      	movs	r2, #82	; 0x52
 8009ea0:	5a9b      	ldrh	r3, [r3, r2]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	b299      	uxth	r1, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2252      	movs	r2, #82	; 0x52
 8009eac:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2252      	movs	r2, #82	; 0x52
 8009eb2:	5a9b      	ldrh	r3, [r3, r2]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1cc      	bne.n	8009e54 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	0013      	movs	r3, r2
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2140      	movs	r1, #64	; 0x40
 8009ec8:	f000 fc1a 	bl	800a700 <UART_WaitOnFlagUntilTimeout>
 8009ecc:	1e03      	subs	r3, r0, #0
 8009ece:	d001      	beq.n	8009ed4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e005      	b.n	8009ee0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	e000      	b.n	8009ee0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8009ede:	2302      	movs	r3, #2
  }
}
 8009ee0:	0018      	movs	r0, r3
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	b008      	add	sp, #32
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b088      	sub	sp, #32
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	1dbb      	adds	r3, r7, #6
 8009ef4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009efa:	2b20      	cmp	r3, #32
 8009efc:	d155      	bne.n	8009faa <HAL_UART_Receive_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d003      	beq.n	8009f0c <HAL_UART_Receive_DMA+0x24>
 8009f04:	1dbb      	adds	r3, r7, #6
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e04d      	b.n	8009fac <HAL_UART_Receive_DMA+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	689a      	ldr	r2, [r3, #8]
 8009f14:	2380      	movs	r3, #128	; 0x80
 8009f16:	015b      	lsls	r3, r3, #5
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d109      	bne.n	8009f30 <HAL_UART_Receive_DMA+0x48>
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d105      	bne.n	8009f30 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	2201      	movs	r2, #1
 8009f28:	4013      	ands	r3, r2
 8009f2a:	d001      	beq.n	8009f30 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e03d      	b.n	8009fac <HAL_UART_Receive_DMA+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2274      	movs	r2, #116	; 0x74
 8009f34:	5c9b      	ldrb	r3, [r3, r2]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d101      	bne.n	8009f3e <HAL_UART_Receive_DMA+0x56>
 8009f3a:	2302      	movs	r3, #2
 8009f3c:	e036      	b.n	8009fac <HAL_UART_Receive_DMA+0xc4>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2274      	movs	r2, #116	; 0x74
 8009f42:	2101      	movs	r1, #1
 8009f44:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a18      	ldr	r2, [pc, #96]	; (8009fb4 <HAL_UART_Receive_DMA+0xcc>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d020      	beq.n	8009f98 <HAL_UART_Receive_DMA+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	2380      	movs	r3, #128	; 0x80
 8009f5e:	041b      	lsls	r3, r3, #16
 8009f60:	4013      	ands	r3, r2
 8009f62:	d019      	beq.n	8009f98 <HAL_UART_Receive_DMA+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f64:	f3ef 8310 	mrs	r3, PRIMASK
 8009f68:	613b      	str	r3, [r7, #16]
  return(result);
 8009f6a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f6c:	61fb      	str	r3, [r7, #28]
 8009f6e:	2301      	movs	r3, #1
 8009f70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f383 8810 	msr	PRIMASK, r3
}
 8009f78:	46c0      	nop			; (mov r8, r8)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2180      	movs	r1, #128	; 0x80
 8009f86:	04c9      	lsls	r1, r1, #19
 8009f88:	430a      	orrs	r2, r1
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	f383 8810 	msr	PRIMASK, r3
}
 8009f96:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009f98:	1dbb      	adds	r3, r7, #6
 8009f9a:	881a      	ldrh	r2, [r3, #0]
 8009f9c:	68b9      	ldr	r1, [r7, #8]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	0018      	movs	r0, r3
 8009fa2:	f000 fc71 	bl	800a888 <UART_Start_Receive_DMA>
 8009fa6:	0003      	movs	r3, r0
 8009fa8:	e000      	b.n	8009fac <HAL_UART_Receive_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8009faa:	2302      	movs	r3, #2
  }
}
 8009fac:	0018      	movs	r0, r3
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	b008      	add	sp, #32
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	40004800 	.word	0x40004800

08009fb8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009fc0:	46c0      	nop			; (mov r8, r8)
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	b002      	add	sp, #8
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009fd0:	46c0      	nop			; (mov r8, r8)
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	b002      	add	sp, #8
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009fe0:	46c0      	nop			; (mov r8, r8)
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	b002      	add	sp, #8
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	000a      	movs	r2, r1
 8009ff2:	1cbb      	adds	r3, r7, #2
 8009ff4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ff6:	46c0      	nop			; (mov r8, r8)
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	b002      	add	sp, #8
 8009ffc:	bd80      	pop	{r7, pc}
	...

0800a000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a000:	b5b0      	push	{r4, r5, r7, lr}
 800a002:	b08e      	sub	sp, #56	; 0x38
 800a004:	af00      	add	r7, sp, #0
 800a006:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a008:	231a      	movs	r3, #26
 800a00a:	2218      	movs	r2, #24
 800a00c:	189b      	adds	r3, r3, r2
 800a00e:	19db      	adds	r3, r3, r7
 800a010:	2200      	movs	r2, #0
 800a012:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	689a      	ldr	r2, [r3, #8]
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	431a      	orrs	r2, r3
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	695b      	ldr	r3, [r3, #20]
 800a022:	431a      	orrs	r2, r3
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	4313      	orrs	r3, r2
 800a02a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4ac6      	ldr	r2, [pc, #792]	; (800a34c <UART_SetConfig+0x34c>)
 800a034:	4013      	ands	r3, r2
 800a036:	0019      	movs	r1, r3
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a03e:	430a      	orrs	r2, r1
 800a040:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	4ac1      	ldr	r2, [pc, #772]	; (800a350 <UART_SetConfig+0x350>)
 800a04a:	4013      	ands	r3, r2
 800a04c:	0019      	movs	r1, r3
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	68da      	ldr	r2, [r3, #12]
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4abb      	ldr	r2, [pc, #748]	; (800a354 <UART_SetConfig+0x354>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d004      	beq.n	800a074 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a070:	4313      	orrs	r3, r2
 800a072:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	4ab7      	ldr	r2, [pc, #732]	; (800a358 <UART_SetConfig+0x358>)
 800a07c:	4013      	ands	r3, r2
 800a07e:	0019      	movs	r1, r3
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a086:	430a      	orrs	r2, r1
 800a088:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4ab3      	ldr	r2, [pc, #716]	; (800a35c <UART_SetConfig+0x35c>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d131      	bne.n	800a0f8 <UART_SetConfig+0xf8>
 800a094:	4bb2      	ldr	r3, [pc, #712]	; (800a360 <UART_SetConfig+0x360>)
 800a096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a098:	2203      	movs	r2, #3
 800a09a:	4013      	ands	r3, r2
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d01d      	beq.n	800a0dc <UART_SetConfig+0xdc>
 800a0a0:	d823      	bhi.n	800a0ea <UART_SetConfig+0xea>
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d00c      	beq.n	800a0c0 <UART_SetConfig+0xc0>
 800a0a6:	d820      	bhi.n	800a0ea <UART_SetConfig+0xea>
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <UART_SetConfig+0xb2>
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d00e      	beq.n	800a0ce <UART_SetConfig+0xce>
 800a0b0:	e01b      	b.n	800a0ea <UART_SetConfig+0xea>
 800a0b2:	231b      	movs	r3, #27
 800a0b4:	2218      	movs	r2, #24
 800a0b6:	189b      	adds	r3, r3, r2
 800a0b8:	19db      	adds	r3, r3, r7
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	701a      	strb	r2, [r3, #0]
 800a0be:	e09c      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a0c0:	231b      	movs	r3, #27
 800a0c2:	2218      	movs	r2, #24
 800a0c4:	189b      	adds	r3, r3, r2
 800a0c6:	19db      	adds	r3, r3, r7
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	701a      	strb	r2, [r3, #0]
 800a0cc:	e095      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a0ce:	231b      	movs	r3, #27
 800a0d0:	2218      	movs	r2, #24
 800a0d2:	189b      	adds	r3, r3, r2
 800a0d4:	19db      	adds	r3, r3, r7
 800a0d6:	2204      	movs	r2, #4
 800a0d8:	701a      	strb	r2, [r3, #0]
 800a0da:	e08e      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a0dc:	231b      	movs	r3, #27
 800a0de:	2218      	movs	r2, #24
 800a0e0:	189b      	adds	r3, r3, r2
 800a0e2:	19db      	adds	r3, r3, r7
 800a0e4:	2208      	movs	r2, #8
 800a0e6:	701a      	strb	r2, [r3, #0]
 800a0e8:	e087      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a0ea:	231b      	movs	r3, #27
 800a0ec:	2218      	movs	r2, #24
 800a0ee:	189b      	adds	r3, r3, r2
 800a0f0:	19db      	adds	r3, r3, r7
 800a0f2:	2210      	movs	r2, #16
 800a0f4:	701a      	strb	r2, [r3, #0]
 800a0f6:	e080      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a99      	ldr	r2, [pc, #612]	; (800a364 <UART_SetConfig+0x364>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d131      	bne.n	800a166 <UART_SetConfig+0x166>
 800a102:	4b97      	ldr	r3, [pc, #604]	; (800a360 <UART_SetConfig+0x360>)
 800a104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a106:	220c      	movs	r2, #12
 800a108:	4013      	ands	r3, r2
 800a10a:	2b0c      	cmp	r3, #12
 800a10c:	d01d      	beq.n	800a14a <UART_SetConfig+0x14a>
 800a10e:	d823      	bhi.n	800a158 <UART_SetConfig+0x158>
 800a110:	2b08      	cmp	r3, #8
 800a112:	d00c      	beq.n	800a12e <UART_SetConfig+0x12e>
 800a114:	d820      	bhi.n	800a158 <UART_SetConfig+0x158>
 800a116:	2b00      	cmp	r3, #0
 800a118:	d002      	beq.n	800a120 <UART_SetConfig+0x120>
 800a11a:	2b04      	cmp	r3, #4
 800a11c:	d00e      	beq.n	800a13c <UART_SetConfig+0x13c>
 800a11e:	e01b      	b.n	800a158 <UART_SetConfig+0x158>
 800a120:	231b      	movs	r3, #27
 800a122:	2218      	movs	r2, #24
 800a124:	189b      	adds	r3, r3, r2
 800a126:	19db      	adds	r3, r3, r7
 800a128:	2200      	movs	r2, #0
 800a12a:	701a      	strb	r2, [r3, #0]
 800a12c:	e065      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a12e:	231b      	movs	r3, #27
 800a130:	2218      	movs	r2, #24
 800a132:	189b      	adds	r3, r3, r2
 800a134:	19db      	adds	r3, r3, r7
 800a136:	2202      	movs	r2, #2
 800a138:	701a      	strb	r2, [r3, #0]
 800a13a:	e05e      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a13c:	231b      	movs	r3, #27
 800a13e:	2218      	movs	r2, #24
 800a140:	189b      	adds	r3, r3, r2
 800a142:	19db      	adds	r3, r3, r7
 800a144:	2204      	movs	r2, #4
 800a146:	701a      	strb	r2, [r3, #0]
 800a148:	e057      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a14a:	231b      	movs	r3, #27
 800a14c:	2218      	movs	r2, #24
 800a14e:	189b      	adds	r3, r3, r2
 800a150:	19db      	adds	r3, r3, r7
 800a152:	2208      	movs	r2, #8
 800a154:	701a      	strb	r2, [r3, #0]
 800a156:	e050      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a158:	231b      	movs	r3, #27
 800a15a:	2218      	movs	r2, #24
 800a15c:	189b      	adds	r3, r3, r2
 800a15e:	19db      	adds	r3, r3, r7
 800a160:	2210      	movs	r2, #16
 800a162:	701a      	strb	r2, [r3, #0]
 800a164:	e049      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a7a      	ldr	r2, [pc, #488]	; (800a354 <UART_SetConfig+0x354>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d13e      	bne.n	800a1ee <UART_SetConfig+0x1ee>
 800a170:	4b7b      	ldr	r3, [pc, #492]	; (800a360 <UART_SetConfig+0x360>)
 800a172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a174:	23c0      	movs	r3, #192	; 0xc0
 800a176:	011b      	lsls	r3, r3, #4
 800a178:	4013      	ands	r3, r2
 800a17a:	22c0      	movs	r2, #192	; 0xc0
 800a17c:	0112      	lsls	r2, r2, #4
 800a17e:	4293      	cmp	r3, r2
 800a180:	d027      	beq.n	800a1d2 <UART_SetConfig+0x1d2>
 800a182:	22c0      	movs	r2, #192	; 0xc0
 800a184:	0112      	lsls	r2, r2, #4
 800a186:	4293      	cmp	r3, r2
 800a188:	d82a      	bhi.n	800a1e0 <UART_SetConfig+0x1e0>
 800a18a:	2280      	movs	r2, #128	; 0x80
 800a18c:	0112      	lsls	r2, r2, #4
 800a18e:	4293      	cmp	r3, r2
 800a190:	d011      	beq.n	800a1b6 <UART_SetConfig+0x1b6>
 800a192:	2280      	movs	r2, #128	; 0x80
 800a194:	0112      	lsls	r2, r2, #4
 800a196:	4293      	cmp	r3, r2
 800a198:	d822      	bhi.n	800a1e0 <UART_SetConfig+0x1e0>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d004      	beq.n	800a1a8 <UART_SetConfig+0x1a8>
 800a19e:	2280      	movs	r2, #128	; 0x80
 800a1a0:	00d2      	lsls	r2, r2, #3
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d00e      	beq.n	800a1c4 <UART_SetConfig+0x1c4>
 800a1a6:	e01b      	b.n	800a1e0 <UART_SetConfig+0x1e0>
 800a1a8:	231b      	movs	r3, #27
 800a1aa:	2218      	movs	r2, #24
 800a1ac:	189b      	adds	r3, r3, r2
 800a1ae:	19db      	adds	r3, r3, r7
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	701a      	strb	r2, [r3, #0]
 800a1b4:	e021      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a1b6:	231b      	movs	r3, #27
 800a1b8:	2218      	movs	r2, #24
 800a1ba:	189b      	adds	r3, r3, r2
 800a1bc:	19db      	adds	r3, r3, r7
 800a1be:	2202      	movs	r2, #2
 800a1c0:	701a      	strb	r2, [r3, #0]
 800a1c2:	e01a      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a1c4:	231b      	movs	r3, #27
 800a1c6:	2218      	movs	r2, #24
 800a1c8:	189b      	adds	r3, r3, r2
 800a1ca:	19db      	adds	r3, r3, r7
 800a1cc:	2204      	movs	r2, #4
 800a1ce:	701a      	strb	r2, [r3, #0]
 800a1d0:	e013      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a1d2:	231b      	movs	r3, #27
 800a1d4:	2218      	movs	r2, #24
 800a1d6:	189b      	adds	r3, r3, r2
 800a1d8:	19db      	adds	r3, r3, r7
 800a1da:	2208      	movs	r2, #8
 800a1dc:	701a      	strb	r2, [r3, #0]
 800a1de:	e00c      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a1e0:	231b      	movs	r3, #27
 800a1e2:	2218      	movs	r2, #24
 800a1e4:	189b      	adds	r3, r3, r2
 800a1e6:	19db      	adds	r3, r3, r7
 800a1e8:	2210      	movs	r2, #16
 800a1ea:	701a      	strb	r2, [r3, #0]
 800a1ec:	e005      	b.n	800a1fa <UART_SetConfig+0x1fa>
 800a1ee:	231b      	movs	r3, #27
 800a1f0:	2218      	movs	r2, #24
 800a1f2:	189b      	adds	r3, r3, r2
 800a1f4:	19db      	adds	r3, r3, r7
 800a1f6:	2210      	movs	r2, #16
 800a1f8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a55      	ldr	r2, [pc, #340]	; (800a354 <UART_SetConfig+0x354>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d000      	beq.n	800a206 <UART_SetConfig+0x206>
 800a204:	e084      	b.n	800a310 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a206:	231b      	movs	r3, #27
 800a208:	2218      	movs	r2, #24
 800a20a:	189b      	adds	r3, r3, r2
 800a20c:	19db      	adds	r3, r3, r7
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	2b08      	cmp	r3, #8
 800a212:	d01d      	beq.n	800a250 <UART_SetConfig+0x250>
 800a214:	dc20      	bgt.n	800a258 <UART_SetConfig+0x258>
 800a216:	2b04      	cmp	r3, #4
 800a218:	d015      	beq.n	800a246 <UART_SetConfig+0x246>
 800a21a:	dc1d      	bgt.n	800a258 <UART_SetConfig+0x258>
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <UART_SetConfig+0x226>
 800a220:	2b02      	cmp	r3, #2
 800a222:	d005      	beq.n	800a230 <UART_SetConfig+0x230>
 800a224:	e018      	b.n	800a258 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a226:	f7fe fd8d 	bl	8008d44 <HAL_RCC_GetPCLK1Freq>
 800a22a:	0003      	movs	r3, r0
 800a22c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a22e:	e01c      	b.n	800a26a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a230:	4b4b      	ldr	r3, [pc, #300]	; (800a360 <UART_SetConfig+0x360>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2210      	movs	r2, #16
 800a236:	4013      	ands	r3, r2
 800a238:	d002      	beq.n	800a240 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a23a:	4b4b      	ldr	r3, [pc, #300]	; (800a368 <UART_SetConfig+0x368>)
 800a23c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a23e:	e014      	b.n	800a26a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800a240:	4b4a      	ldr	r3, [pc, #296]	; (800a36c <UART_SetConfig+0x36c>)
 800a242:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a244:	e011      	b.n	800a26a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a246:	f7fe fccd 	bl	8008be4 <HAL_RCC_GetSysClockFreq>
 800a24a:	0003      	movs	r3, r0
 800a24c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a24e:	e00c      	b.n	800a26a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a250:	2380      	movs	r3, #128	; 0x80
 800a252:	021b      	lsls	r3, r3, #8
 800a254:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a256:	e008      	b.n	800a26a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800a258:	2300      	movs	r3, #0
 800a25a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a25c:	231a      	movs	r3, #26
 800a25e:	2218      	movs	r2, #24
 800a260:	189b      	adds	r3, r3, r2
 800a262:	19db      	adds	r3, r3, r7
 800a264:	2201      	movs	r2, #1
 800a266:	701a      	strb	r2, [r3, #0]
        break;
 800a268:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d100      	bne.n	800a272 <UART_SetConfig+0x272>
 800a270:	e133      	b.n	800a4da <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	0013      	movs	r3, r2
 800a278:	005b      	lsls	r3, r3, #1
 800a27a:	189b      	adds	r3, r3, r2
 800a27c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a27e:	429a      	cmp	r2, r3
 800a280:	d305      	bcc.n	800a28e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d906      	bls.n	800a29c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800a28e:	231a      	movs	r3, #26
 800a290:	2218      	movs	r2, #24
 800a292:	189b      	adds	r3, r3, r2
 800a294:	19db      	adds	r3, r3, r7
 800a296:	2201      	movs	r2, #1
 800a298:	701a      	strb	r2, [r3, #0]
 800a29a:	e11e      	b.n	800a4da <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29e:	613b      	str	r3, [r7, #16]
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	617b      	str	r3, [r7, #20]
 800a2a4:	6939      	ldr	r1, [r7, #16]
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	000b      	movs	r3, r1
 800a2aa:	0e1b      	lsrs	r3, r3, #24
 800a2ac:	0010      	movs	r0, r2
 800a2ae:	0205      	lsls	r5, r0, #8
 800a2b0:	431d      	orrs	r5, r3
 800a2b2:	000b      	movs	r3, r1
 800a2b4:	021c      	lsls	r4, r3, #8
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	085b      	lsrs	r3, r3, #1
 800a2bc:	60bb      	str	r3, [r7, #8]
 800a2be:	2300      	movs	r3, #0
 800a2c0:	60fb      	str	r3, [r7, #12]
 800a2c2:	68b8      	ldr	r0, [r7, #8]
 800a2c4:	68f9      	ldr	r1, [r7, #12]
 800a2c6:	1900      	adds	r0, r0, r4
 800a2c8:	4169      	adcs	r1, r5
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	603b      	str	r3, [r7, #0]
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	607b      	str	r3, [r7, #4]
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f7f6 f920 	bl	800051c <__aeabi_uldivmod>
 800a2dc:	0002      	movs	r2, r0
 800a2de:	000b      	movs	r3, r1
 800a2e0:	0013      	movs	r3, r2
 800a2e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2e6:	23c0      	movs	r3, #192	; 0xc0
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d309      	bcc.n	800a302 <UART_SetConfig+0x302>
 800a2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2f0:	2380      	movs	r3, #128	; 0x80
 800a2f2:	035b      	lsls	r3, r3, #13
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d204      	bcs.n	800a302 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2fe:	60da      	str	r2, [r3, #12]
 800a300:	e0eb      	b.n	800a4da <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 800a302:	231a      	movs	r3, #26
 800a304:	2218      	movs	r2, #24
 800a306:	189b      	adds	r3, r3, r2
 800a308:	19db      	adds	r3, r3, r7
 800a30a:	2201      	movs	r2, #1
 800a30c:	701a      	strb	r2, [r3, #0]
 800a30e:	e0e4      	b.n	800a4da <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	69da      	ldr	r2, [r3, #28]
 800a314:	2380      	movs	r3, #128	; 0x80
 800a316:	021b      	lsls	r3, r3, #8
 800a318:	429a      	cmp	r2, r3
 800a31a:	d000      	beq.n	800a31e <UART_SetConfig+0x31e>
 800a31c:	e086      	b.n	800a42c <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 800a31e:	231b      	movs	r3, #27
 800a320:	2218      	movs	r2, #24
 800a322:	189b      	adds	r3, r3, r2
 800a324:	19db      	adds	r3, r3, r7
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	2b08      	cmp	r3, #8
 800a32a:	d837      	bhi.n	800a39c <UART_SetConfig+0x39c>
 800a32c:	009a      	lsls	r2, r3, #2
 800a32e:	4b10      	ldr	r3, [pc, #64]	; (800a370 <UART_SetConfig+0x370>)
 800a330:	18d3      	adds	r3, r2, r3
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a336:	f7fe fd05 	bl	8008d44 <HAL_RCC_GetPCLK1Freq>
 800a33a:	0003      	movs	r3, r0
 800a33c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a33e:	e036      	b.n	800a3ae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a340:	f7fe fd16 	bl	8008d70 <HAL_RCC_GetPCLK2Freq>
 800a344:	0003      	movs	r3, r0
 800a346:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a348:	e031      	b.n	800a3ae <UART_SetConfig+0x3ae>
 800a34a:	46c0      	nop			; (mov r8, r8)
 800a34c:	efff69f3 	.word	0xefff69f3
 800a350:	ffffcfff 	.word	0xffffcfff
 800a354:	40004800 	.word	0x40004800
 800a358:	fffff4ff 	.word	0xfffff4ff
 800a35c:	40013800 	.word	0x40013800
 800a360:	40021000 	.word	0x40021000
 800a364:	40004400 	.word	0x40004400
 800a368:	003d0900 	.word	0x003d0900
 800a36c:	00f42400 	.word	0x00f42400
 800a370:	0800e758 	.word	0x0800e758
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a374:	4b60      	ldr	r3, [pc, #384]	; (800a4f8 <UART_SetConfig+0x4f8>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2210      	movs	r2, #16
 800a37a:	4013      	ands	r3, r2
 800a37c:	d002      	beq.n	800a384 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a37e:	4b5f      	ldr	r3, [pc, #380]	; (800a4fc <UART_SetConfig+0x4fc>)
 800a380:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a382:	e014      	b.n	800a3ae <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 800a384:	4b5e      	ldr	r3, [pc, #376]	; (800a500 <UART_SetConfig+0x500>)
 800a386:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a388:	e011      	b.n	800a3ae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a38a:	f7fe fc2b 	bl	8008be4 <HAL_RCC_GetSysClockFreq>
 800a38e:	0003      	movs	r3, r0
 800a390:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a392:	e00c      	b.n	800a3ae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a394:	2380      	movs	r3, #128	; 0x80
 800a396:	021b      	lsls	r3, r3, #8
 800a398:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a39a:	e008      	b.n	800a3ae <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 800a39c:	2300      	movs	r3, #0
 800a39e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a3a0:	231a      	movs	r3, #26
 800a3a2:	2218      	movs	r2, #24
 800a3a4:	189b      	adds	r3, r3, r2
 800a3a6:	19db      	adds	r3, r3, r7
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	701a      	strb	r2, [r3, #0]
        break;
 800a3ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d100      	bne.n	800a3b6 <UART_SetConfig+0x3b6>
 800a3b4:	e091      	b.n	800a4da <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b8:	005a      	lsls	r2, r3, #1
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	085b      	lsrs	r3, r3, #1
 800a3c0:	18d2      	adds	r2, r2, r3
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	0019      	movs	r1, r3
 800a3c8:	0010      	movs	r0, r2
 800a3ca:	f7f5 feb9 	bl	8000140 <__udivsi3>
 800a3ce:	0003      	movs	r3, r0
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d6:	2b0f      	cmp	r3, #15
 800a3d8:	d921      	bls.n	800a41e <UART_SetConfig+0x41e>
 800a3da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3dc:	2380      	movs	r3, #128	; 0x80
 800a3de:	025b      	lsls	r3, r3, #9
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d21c      	bcs.n	800a41e <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	200e      	movs	r0, #14
 800a3ea:	2418      	movs	r4, #24
 800a3ec:	1903      	adds	r3, r0, r4
 800a3ee:	19db      	adds	r3, r3, r7
 800a3f0:	210f      	movs	r1, #15
 800a3f2:	438a      	bics	r2, r1
 800a3f4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f8:	085b      	lsrs	r3, r3, #1
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	2207      	movs	r2, #7
 800a3fe:	4013      	ands	r3, r2
 800a400:	b299      	uxth	r1, r3
 800a402:	1903      	adds	r3, r0, r4
 800a404:	19db      	adds	r3, r3, r7
 800a406:	1902      	adds	r2, r0, r4
 800a408:	19d2      	adds	r2, r2, r7
 800a40a:	8812      	ldrh	r2, [r2, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	1902      	adds	r2, r0, r4
 800a416:	19d2      	adds	r2, r2, r7
 800a418:	8812      	ldrh	r2, [r2, #0]
 800a41a:	60da      	str	r2, [r3, #12]
 800a41c:	e05d      	b.n	800a4da <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 800a41e:	231a      	movs	r3, #26
 800a420:	2218      	movs	r2, #24
 800a422:	189b      	adds	r3, r3, r2
 800a424:	19db      	adds	r3, r3, r7
 800a426:	2201      	movs	r2, #1
 800a428:	701a      	strb	r2, [r3, #0]
 800a42a:	e056      	b.n	800a4da <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a42c:	231b      	movs	r3, #27
 800a42e:	2218      	movs	r2, #24
 800a430:	189b      	adds	r3, r3, r2
 800a432:	19db      	adds	r3, r3, r7
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	2b08      	cmp	r3, #8
 800a438:	d822      	bhi.n	800a480 <UART_SetConfig+0x480>
 800a43a:	009a      	lsls	r2, r3, #2
 800a43c:	4b31      	ldr	r3, [pc, #196]	; (800a504 <UART_SetConfig+0x504>)
 800a43e:	18d3      	adds	r3, r2, r3
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a444:	f7fe fc7e 	bl	8008d44 <HAL_RCC_GetPCLK1Freq>
 800a448:	0003      	movs	r3, r0
 800a44a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a44c:	e021      	b.n	800a492 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a44e:	f7fe fc8f 	bl	8008d70 <HAL_RCC_GetPCLK2Freq>
 800a452:	0003      	movs	r3, r0
 800a454:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a456:	e01c      	b.n	800a492 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a458:	4b27      	ldr	r3, [pc, #156]	; (800a4f8 <UART_SetConfig+0x4f8>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2210      	movs	r2, #16
 800a45e:	4013      	ands	r3, r2
 800a460:	d002      	beq.n	800a468 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a462:	4b26      	ldr	r3, [pc, #152]	; (800a4fc <UART_SetConfig+0x4fc>)
 800a464:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a466:	e014      	b.n	800a492 <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 800a468:	4b25      	ldr	r3, [pc, #148]	; (800a500 <UART_SetConfig+0x500>)
 800a46a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a46c:	e011      	b.n	800a492 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a46e:	f7fe fbb9 	bl	8008be4 <HAL_RCC_GetSysClockFreq>
 800a472:	0003      	movs	r3, r0
 800a474:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a476:	e00c      	b.n	800a492 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a478:	2380      	movs	r3, #128	; 0x80
 800a47a:	021b      	lsls	r3, r3, #8
 800a47c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a47e:	e008      	b.n	800a492 <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 800a480:	2300      	movs	r3, #0
 800a482:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a484:	231a      	movs	r3, #26
 800a486:	2218      	movs	r2, #24
 800a488:	189b      	adds	r3, r3, r2
 800a48a:	19db      	adds	r3, r3, r7
 800a48c:	2201      	movs	r2, #1
 800a48e:	701a      	strb	r2, [r3, #0]
        break;
 800a490:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800a492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a494:	2b00      	cmp	r3, #0
 800a496:	d020      	beq.n	800a4da <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	085a      	lsrs	r2, r3, #1
 800a49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a0:	18d2      	adds	r2, r2, r3
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	0019      	movs	r1, r3
 800a4a8:	0010      	movs	r0, r2
 800a4aa:	f7f5 fe49 	bl	8000140 <__udivsi3>
 800a4ae:	0003      	movs	r3, r0
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	2b0f      	cmp	r3, #15
 800a4b8:	d909      	bls.n	800a4ce <UART_SetConfig+0x4ce>
 800a4ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4bc:	2380      	movs	r3, #128	; 0x80
 800a4be:	025b      	lsls	r3, r3, #9
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d204      	bcs.n	800a4ce <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4ca:	60da      	str	r2, [r3, #12]
 800a4cc:	e005      	b.n	800a4da <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 800a4ce:	231a      	movs	r3, #26
 800a4d0:	2218      	movs	r2, #24
 800a4d2:	189b      	adds	r3, r3, r2
 800a4d4:	19db      	adds	r3, r3, r7
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a4e6:	231a      	movs	r3, #26
 800a4e8:	2218      	movs	r2, #24
 800a4ea:	189b      	adds	r3, r3, r2
 800a4ec:	19db      	adds	r3, r3, r7
 800a4ee:	781b      	ldrb	r3, [r3, #0]
}
 800a4f0:	0018      	movs	r0, r3
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	b00e      	add	sp, #56	; 0x38
 800a4f6:	bdb0      	pop	{r4, r5, r7, pc}
 800a4f8:	40021000 	.word	0x40021000
 800a4fc:	003d0900 	.word	0x003d0900
 800a500:	00f42400 	.word	0x00f42400
 800a504:	0800e77c 	.word	0x0800e77c

0800a508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a514:	2201      	movs	r2, #1
 800a516:	4013      	ands	r3, r2
 800a518:	d00b      	beq.n	800a532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	4a4a      	ldr	r2, [pc, #296]	; (800a64c <UART_AdvFeatureConfig+0x144>)
 800a522:	4013      	ands	r3, r2
 800a524:	0019      	movs	r1, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	430a      	orrs	r2, r1
 800a530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a536:	2202      	movs	r2, #2
 800a538:	4013      	ands	r3, r2
 800a53a:	d00b      	beq.n	800a554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	4a43      	ldr	r2, [pc, #268]	; (800a650 <UART_AdvFeatureConfig+0x148>)
 800a544:	4013      	ands	r3, r2
 800a546:	0019      	movs	r1, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	430a      	orrs	r2, r1
 800a552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	2204      	movs	r2, #4
 800a55a:	4013      	ands	r3, r2
 800a55c:	d00b      	beq.n	800a576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	4a3b      	ldr	r2, [pc, #236]	; (800a654 <UART_AdvFeatureConfig+0x14c>)
 800a566:	4013      	ands	r3, r2
 800a568:	0019      	movs	r1, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	430a      	orrs	r2, r1
 800a574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	2208      	movs	r2, #8
 800a57c:	4013      	ands	r3, r2
 800a57e:	d00b      	beq.n	800a598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	4a34      	ldr	r2, [pc, #208]	; (800a658 <UART_AdvFeatureConfig+0x150>)
 800a588:	4013      	ands	r3, r2
 800a58a:	0019      	movs	r1, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	430a      	orrs	r2, r1
 800a596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59c:	2210      	movs	r2, #16
 800a59e:	4013      	ands	r3, r2
 800a5a0:	d00b      	beq.n	800a5ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	4a2c      	ldr	r2, [pc, #176]	; (800a65c <UART_AdvFeatureConfig+0x154>)
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	0019      	movs	r1, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	430a      	orrs	r2, r1
 800a5b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5be:	2220      	movs	r2, #32
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	d00b      	beq.n	800a5dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	4a25      	ldr	r2, [pc, #148]	; (800a660 <UART_AdvFeatureConfig+0x158>)
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	0019      	movs	r1, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e0:	2240      	movs	r2, #64	; 0x40
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	d01d      	beq.n	800a622 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	4a1d      	ldr	r2, [pc, #116]	; (800a664 <UART_AdvFeatureConfig+0x15c>)
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	0019      	movs	r1, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a602:	2380      	movs	r3, #128	; 0x80
 800a604:	035b      	lsls	r3, r3, #13
 800a606:	429a      	cmp	r2, r3
 800a608:	d10b      	bne.n	800a622 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	4a15      	ldr	r2, [pc, #84]	; (800a668 <UART_AdvFeatureConfig+0x160>)
 800a612:	4013      	ands	r3, r2
 800a614:	0019      	movs	r1, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	430a      	orrs	r2, r1
 800a620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a626:	2280      	movs	r2, #128	; 0x80
 800a628:	4013      	ands	r3, r2
 800a62a:	d00b      	beq.n	800a644 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	4a0e      	ldr	r2, [pc, #56]	; (800a66c <UART_AdvFeatureConfig+0x164>)
 800a634:	4013      	ands	r3, r2
 800a636:	0019      	movs	r1, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	430a      	orrs	r2, r1
 800a642:	605a      	str	r2, [r3, #4]
  }
}
 800a644:	46c0      	nop			; (mov r8, r8)
 800a646:	46bd      	mov	sp, r7
 800a648:	b002      	add	sp, #8
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	fffdffff 	.word	0xfffdffff
 800a650:	fffeffff 	.word	0xfffeffff
 800a654:	fffbffff 	.word	0xfffbffff
 800a658:	ffff7fff 	.word	0xffff7fff
 800a65c:	ffffefff 	.word	0xffffefff
 800a660:	ffffdfff 	.word	0xffffdfff
 800a664:	ffefffff 	.word	0xffefffff
 800a668:	ff9fffff 	.word	0xff9fffff
 800a66c:	fff7ffff 	.word	0xfff7ffff

0800a670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af02      	add	r7, sp, #8
 800a676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2280      	movs	r2, #128	; 0x80
 800a67c:	2100      	movs	r1, #0
 800a67e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a680:	f7fc f85a 	bl	8006738 <HAL_GetTick>
 800a684:	0003      	movs	r3, r0
 800a686:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2208      	movs	r2, #8
 800a690:	4013      	ands	r3, r2
 800a692:	2b08      	cmp	r3, #8
 800a694:	d10c      	bne.n	800a6b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2280      	movs	r2, #128	; 0x80
 800a69a:	0391      	lsls	r1, r2, #14
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	4a17      	ldr	r2, [pc, #92]	; (800a6fc <UART_CheckIdleState+0x8c>)
 800a6a0:	9200      	str	r2, [sp, #0]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f000 f82c 	bl	800a700 <UART_WaitOnFlagUntilTimeout>
 800a6a8:	1e03      	subs	r3, r0, #0
 800a6aa:	d001      	beq.n	800a6b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e021      	b.n	800a6f4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2204      	movs	r2, #4
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	2b04      	cmp	r3, #4
 800a6bc:	d10c      	bne.n	800a6d8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2280      	movs	r2, #128	; 0x80
 800a6c2:	03d1      	lsls	r1, r2, #15
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	4a0d      	ldr	r2, [pc, #52]	; (800a6fc <UART_CheckIdleState+0x8c>)
 800a6c8:	9200      	str	r2, [sp, #0]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f000 f818 	bl	800a700 <UART_WaitOnFlagUntilTimeout>
 800a6d0:	1e03      	subs	r3, r0, #0
 800a6d2:	d001      	beq.n	800a6d8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	e00d      	b.n	800a6f4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2220      	movs	r2, #32
 800a6dc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2220      	movs	r2, #32
 800a6e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2274      	movs	r2, #116	; 0x74
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	b004      	add	sp, #16
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	01ffffff 	.word	0x01ffffff

0800a700 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b094      	sub	sp, #80	; 0x50
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	603b      	str	r3, [r7, #0]
 800a70c:	1dfb      	adds	r3, r7, #7
 800a70e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a710:	e0a3      	b.n	800a85a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a714:	3301      	adds	r3, #1
 800a716:	d100      	bne.n	800a71a <UART_WaitOnFlagUntilTimeout+0x1a>
 800a718:	e09f      	b.n	800a85a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a71a:	f7fc f80d 	bl	8006738 <HAL_GetTick>
 800a71e:	0002      	movs	r2, r0
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	1ad3      	subs	r3, r2, r3
 800a724:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a726:	429a      	cmp	r2, r3
 800a728:	d302      	bcc.n	800a730 <UART_WaitOnFlagUntilTimeout+0x30>
 800a72a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d13d      	bne.n	800a7ac <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a730:	f3ef 8310 	mrs	r3, PRIMASK
 800a734:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800a736:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a738:	647b      	str	r3, [r7, #68]	; 0x44
 800a73a:	2301      	movs	r3, #1
 800a73c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a740:	f383 8810 	msr	PRIMASK, r3
}
 800a744:	46c0      	nop			; (mov r8, r8)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	494c      	ldr	r1, [pc, #304]	; (800a884 <UART_WaitOnFlagUntilTimeout+0x184>)
 800a752:	400a      	ands	r2, r1
 800a754:	601a      	str	r2, [r3, #0]
 800a756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a758:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	f383 8810 	msr	PRIMASK, r3
}
 800a760:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a762:	f3ef 8310 	mrs	r3, PRIMASK
 800a766:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800a768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a76a:	643b      	str	r3, [r7, #64]	; 0x40
 800a76c:	2301      	movs	r3, #1
 800a76e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a772:	f383 8810 	msr	PRIMASK, r3
}
 800a776:	46c0      	nop			; (mov r8, r8)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	689a      	ldr	r2, [r3, #8]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2101      	movs	r1, #1
 800a784:	438a      	bics	r2, r1
 800a786:	609a      	str	r2, [r3, #8]
 800a788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a78a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a78e:	f383 8810 	msr	PRIMASK, r3
}
 800a792:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2220      	movs	r2, #32
 800a798:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2220      	movs	r2, #32
 800a79e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2274      	movs	r2, #116	; 0x74
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a7a8:	2303      	movs	r3, #3
 800a7aa:	e067      	b.n	800a87c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2204      	movs	r2, #4
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	d050      	beq.n	800a85a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	69da      	ldr	r2, [r3, #28]
 800a7be:	2380      	movs	r3, #128	; 0x80
 800a7c0:	011b      	lsls	r3, r3, #4
 800a7c2:	401a      	ands	r2, r3
 800a7c4:	2380      	movs	r3, #128	; 0x80
 800a7c6:	011b      	lsls	r3, r3, #4
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d146      	bne.n	800a85a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2280      	movs	r2, #128	; 0x80
 800a7d2:	0112      	lsls	r2, r2, #4
 800a7d4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7d6:	f3ef 8310 	mrs	r3, PRIMASK
 800a7da:	613b      	str	r3, [r7, #16]
  return(result);
 800a7dc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a7de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	f383 8810 	msr	PRIMASK, r3
}
 800a7ea:	46c0      	nop			; (mov r8, r8)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4923      	ldr	r1, [pc, #140]	; (800a884 <UART_WaitOnFlagUntilTimeout+0x184>)
 800a7f8:	400a      	ands	r2, r1
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	f383 8810 	msr	PRIMASK, r3
}
 800a806:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a808:	f3ef 8310 	mrs	r3, PRIMASK
 800a80c:	61fb      	str	r3, [r7, #28]
  return(result);
 800a80e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a810:	64bb      	str	r3, [r7, #72]	; 0x48
 800a812:	2301      	movs	r3, #1
 800a814:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a816:	6a3b      	ldr	r3, [r7, #32]
 800a818:	f383 8810 	msr	PRIMASK, r3
}
 800a81c:	46c0      	nop			; (mov r8, r8)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2101      	movs	r1, #1
 800a82a:	438a      	bics	r2, r1
 800a82c:	609a      	str	r2, [r3, #8]
 800a82e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a830:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a834:	f383 8810 	msr	PRIMASK, r3
}
 800a838:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2220      	movs	r2, #32
 800a83e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2220      	movs	r2, #32
 800a844:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2280      	movs	r2, #128	; 0x80
 800a84a:	2120      	movs	r1, #32
 800a84c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2274      	movs	r2, #116	; 0x74
 800a852:	2100      	movs	r1, #0
 800a854:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a856:	2303      	movs	r3, #3
 800a858:	e010      	b.n	800a87c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	69db      	ldr	r3, [r3, #28]
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	4013      	ands	r3, r2
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	425a      	negs	r2, r3
 800a86a:	4153      	adcs	r3, r2
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	001a      	movs	r2, r3
 800a870:	1dfb      	adds	r3, r7, #7
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	429a      	cmp	r2, r3
 800a876:	d100      	bne.n	800a87a <UART_WaitOnFlagUntilTimeout+0x17a>
 800a878:	e74b      	b.n	800a712 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	0018      	movs	r0, r3
 800a87e:	46bd      	mov	sp, r7
 800a880:	b014      	add	sp, #80	; 0x50
 800a882:	bd80      	pop	{r7, pc}
 800a884:	fffffe5f 	.word	0xfffffe5f

0800a888 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b090      	sub	sp, #64	; 0x40
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	1dbb      	adds	r3, r7, #6
 800a894:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	1dba      	adds	r2, r7, #6
 800a8a0:	2158      	movs	r1, #88	; 0x58
 800a8a2:	8812      	ldrh	r2, [r2, #0]
 800a8a4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2280      	movs	r2, #128	; 0x80
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2222      	movs	r2, #34	; 0x22
 800a8b2:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d02b      	beq.n	800a914 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c0:	4a3f      	ldr	r2, [pc, #252]	; (800a9c0 <UART_Start_Receive_DMA+0x138>)
 800a8c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c8:	4a3e      	ldr	r2, [pc, #248]	; (800a9c4 <UART_Start_Receive_DMA+0x13c>)
 800a8ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8d0:	4a3d      	ldr	r2, [pc, #244]	; (800a9c8 <UART_Start_Receive_DMA+0x140>)
 800a8d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8d8:	2200      	movs	r2, #0
 800a8da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	3324      	adds	r3, #36	; 0x24
 800a8e6:	0019      	movs	r1, r3
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ec:	001a      	movs	r2, r3
 800a8ee:	1dbb      	adds	r3, r7, #6
 800a8f0:	881b      	ldrh	r3, [r3, #0]
 800a8f2:	f7fc fccd 	bl	8007290 <HAL_DMA_Start_IT>
 800a8f6:	1e03      	subs	r3, r0, #0
 800a8f8:	d00c      	beq.n	800a914 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2280      	movs	r2, #128	; 0x80
 800a8fe:	2110      	movs	r1, #16
 800a900:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2274      	movs	r2, #116	; 0x74
 800a906:	2100      	movs	r1, #0
 800a908:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2220      	movs	r2, #32
 800a90e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	e050      	b.n	800a9b6 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2274      	movs	r2, #116	; 0x74
 800a918:	2100      	movs	r1, #0
 800a91a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a91c:	f3ef 8310 	mrs	r3, PRIMASK
 800a920:	613b      	str	r3, [r7, #16]
  return(result);
 800a922:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a924:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a926:	2301      	movs	r3, #1
 800a928:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f383 8810 	msr	PRIMASK, r3
}
 800a930:	46c0      	nop			; (mov r8, r8)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2180      	movs	r1, #128	; 0x80
 800a93e:	0049      	lsls	r1, r1, #1
 800a940:	430a      	orrs	r2, r1
 800a942:	601a      	str	r2, [r3, #0]
 800a944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a946:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	f383 8810 	msr	PRIMASK, r3
}
 800a94e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a950:	f3ef 8310 	mrs	r3, PRIMASK
 800a954:	61fb      	str	r3, [r7, #28]
  return(result);
 800a956:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a958:	63bb      	str	r3, [r7, #56]	; 0x38
 800a95a:	2301      	movs	r3, #1
 800a95c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	f383 8810 	msr	PRIMASK, r3
}
 800a964:	46c0      	nop			; (mov r8, r8)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	689a      	ldr	r2, [r3, #8]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2101      	movs	r1, #1
 800a972:	430a      	orrs	r2, r1
 800a974:	609a      	str	r2, [r3, #8]
 800a976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a978:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97c:	f383 8810 	msr	PRIMASK, r3
}
 800a980:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a982:	f3ef 8310 	mrs	r3, PRIMASK
 800a986:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800a988:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a98a:	637b      	str	r3, [r7, #52]	; 0x34
 800a98c:	2301      	movs	r3, #1
 800a98e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a992:	f383 8810 	msr	PRIMASK, r3
}
 800a996:	46c0      	nop			; (mov r8, r8)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	689a      	ldr	r2, [r3, #8]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2140      	movs	r1, #64	; 0x40
 800a9a4:	430a      	orrs	r2, r1
 800a9a6:	609a      	str	r2, [r3, #8]
 800a9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9aa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ae:	f383 8810 	msr	PRIMASK, r3
}
 800a9b2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	0018      	movs	r0, r3
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	b010      	add	sp, #64	; 0x40
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	46c0      	nop			; (mov r8, r8)
 800a9c0:	0800aad9 	.word	0x0800aad9
 800a9c4:	0800ac01 	.word	0x0800ac01
 800a9c8:	0800ac3d 	.word	0x0800ac3d

0800a9cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a9d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9da:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a9dc:	617b      	str	r3, [r7, #20]
 800a9de:	2301      	movs	r3, #1
 800a9e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f383 8810 	msr	PRIMASK, r3
}
 800a9e8:	46c0      	nop			; (mov r8, r8)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	21c0      	movs	r1, #192	; 0xc0
 800a9f6:	438a      	bics	r2, r1
 800a9f8:	601a      	str	r2, [r3, #0]
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	f383 8810 	msr	PRIMASK, r3
}
 800aa04:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2220      	movs	r2, #32
 800aa0a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800aa0c:	46c0      	nop			; (mov r8, r8)
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	b006      	add	sp, #24
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b08e      	sub	sp, #56	; 0x38
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa1c:	f3ef 8310 	mrs	r3, PRIMASK
 800aa20:	617b      	str	r3, [r7, #20]
  return(result);
 800aa22:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa24:	637b      	str	r3, [r7, #52]	; 0x34
 800aa26:	2301      	movs	r3, #1
 800aa28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	f383 8810 	msr	PRIMASK, r3
}
 800aa30:	46c0      	nop			; (mov r8, r8)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4925      	ldr	r1, [pc, #148]	; (800aad4 <UART_EndRxTransfer+0xc0>)
 800aa3e:	400a      	ands	r2, r1
 800aa40:	601a      	str	r2, [r3, #0]
 800aa42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	f383 8810 	msr	PRIMASK, r3
}
 800aa4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa4e:	f3ef 8310 	mrs	r3, PRIMASK
 800aa52:	623b      	str	r3, [r7, #32]
  return(result);
 800aa54:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa56:	633b      	str	r3, [r7, #48]	; 0x30
 800aa58:	2301      	movs	r3, #1
 800aa5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	f383 8810 	msr	PRIMASK, r3
}
 800aa62:	46c0      	nop			; (mov r8, r8)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	689a      	ldr	r2, [r3, #8]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2101      	movs	r1, #1
 800aa70:	438a      	bics	r2, r1
 800aa72:	609a      	str	r2, [r3, #8]
 800aa74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7a:	f383 8810 	msr	PRIMASK, r3
}
 800aa7e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d118      	bne.n	800aaba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa88:	f3ef 8310 	mrs	r3, PRIMASK
 800aa8c:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa8e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa92:	2301      	movs	r3, #1
 800aa94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f383 8810 	msr	PRIMASK, r3
}
 800aa9c:	46c0      	nop			; (mov r8, r8)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2110      	movs	r1, #16
 800aaaa:	438a      	bics	r2, r1
 800aaac:	601a      	str	r2, [r3, #0]
 800aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	f383 8810 	msr	PRIMASK, r3
}
 800aab8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2220      	movs	r2, #32
 800aabe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	665a      	str	r2, [r3, #100]	; 0x64
}
 800aacc:	46c0      	nop			; (mov r8, r8)
 800aace:	46bd      	mov	sp, r7
 800aad0:	b00e      	add	sp, #56	; 0x38
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	fffffedf 	.word	0xfffffedf

0800aad8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b094      	sub	sp, #80	; 0x50
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2220      	movs	r2, #32
 800aaee:	4013      	ands	r3, r2
 800aaf0:	d16e      	bne.n	800abd0 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 800aaf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaf4:	225a      	movs	r2, #90	; 0x5a
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aafa:	f3ef 8310 	mrs	r3, PRIMASK
 800aafe:	61bb      	str	r3, [r7, #24]
  return(result);
 800ab00:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab02:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab04:	2301      	movs	r3, #1
 800ab06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	f383 8810 	msr	PRIMASK, r3
}
 800ab0e:	46c0      	nop			; (mov r8, r8)
 800ab10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4938      	ldr	r1, [pc, #224]	; (800abfc <UART_DMAReceiveCplt+0x124>)
 800ab1c:	400a      	ands	r2, r1
 800ab1e:	601a      	str	r2, [r3, #0]
 800ab20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab24:	6a3b      	ldr	r3, [r7, #32]
 800ab26:	f383 8810 	msr	PRIMASK, r3
}
 800ab2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab30:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800ab32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab34:	647b      	str	r3, [r7, #68]	; 0x44
 800ab36:	2301      	movs	r3, #1
 800ab38:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3c:	f383 8810 	msr	PRIMASK, r3
}
 800ab40:	46c0      	nop			; (mov r8, r8)
 800ab42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	689a      	ldr	r2, [r3, #8]
 800ab48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2101      	movs	r1, #1
 800ab4e:	438a      	bics	r2, r1
 800ab50:	609a      	str	r2, [r3, #8]
 800ab52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab54:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab58:	f383 8810 	msr	PRIMASK, r3
}
 800ab5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab5e:	f3ef 8310 	mrs	r3, PRIMASK
 800ab62:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800ab64:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab66:	643b      	str	r3, [r7, #64]	; 0x40
 800ab68:	2301      	movs	r3, #1
 800ab6a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab6e:	f383 8810 	msr	PRIMASK, r3
}
 800ab72:	46c0      	nop			; (mov r8, r8)
 800ab74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	689a      	ldr	r2, [r3, #8]
 800ab7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2140      	movs	r1, #64	; 0x40
 800ab80:	438a      	bics	r2, r1
 800ab82:	609a      	str	r2, [r3, #8]
 800ab84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab86:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8a:	f383 8810 	msr	PRIMASK, r3
}
 800ab8e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab92:	2220      	movs	r2, #32
 800ab94:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d118      	bne.n	800abd0 <UART_DMAReceiveCplt+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab9e:	f3ef 8310 	mrs	r3, PRIMASK
 800aba2:	60fb      	str	r3, [r7, #12]
  return(result);
 800aba4:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aba8:	2301      	movs	r3, #1
 800abaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	f383 8810 	msr	PRIMASK, r3
}
 800abb2:	46c0      	nop			; (mov r8, r8)
 800abb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2110      	movs	r1, #16
 800abc0:	438a      	bics	r2, r1
 800abc2:	601a      	str	r2, [r3, #0]
 800abc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	f383 8810 	msr	PRIMASK, r3
}
 800abce:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d108      	bne.n	800abea <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abda:	2258      	movs	r2, #88	; 0x58
 800abdc:	5a9a      	ldrh	r2, [r3, r2]
 800abde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abe0:	0011      	movs	r1, r2
 800abe2:	0018      	movs	r0, r3
 800abe4:	f7ff fa00 	bl	8009fe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abe8:	e003      	b.n	800abf2 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800abea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abec:	0018      	movs	r0, r3
 800abee:	f7ff f9e3 	bl	8009fb8 <HAL_UART_RxCpltCallback>
}
 800abf2:	46c0      	nop			; (mov r8, r8)
 800abf4:	46bd      	mov	sp, r7
 800abf6:	b014      	add	sp, #80	; 0x50
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	46c0      	nop			; (mov r8, r8)
 800abfc:	fffffeff 	.word	0xfffffeff

0800ac00 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac0c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d10a      	bne.n	800ac2c <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2258      	movs	r2, #88	; 0x58
 800ac1a:	5a9b      	ldrh	r3, [r3, r2]
 800ac1c:	085b      	lsrs	r3, r3, #1
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	0011      	movs	r1, r2
 800ac24:	0018      	movs	r0, r3
 800ac26:	f7ff f9df 	bl	8009fe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac2a:	e003      	b.n	800ac34 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	0018      	movs	r0, r3
 800ac30:	f7ff f9ca 	bl	8009fc8 <HAL_UART_RxHalfCpltCallback>
}
 800ac34:	46c0      	nop			; (mov r8, r8)
 800ac36:	46bd      	mov	sp, r7
 800ac38:	b004      	add	sp, #16
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac48:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac54:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	2280      	movs	r2, #128	; 0x80
 800ac5e:	4013      	ands	r3, r2
 800ac60:	2b80      	cmp	r3, #128	; 0x80
 800ac62:	d10a      	bne.n	800ac7a <UART_DMAError+0x3e>
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	2b21      	cmp	r3, #33	; 0x21
 800ac68:	d107      	bne.n	800ac7a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	2252      	movs	r2, #82	; 0x52
 800ac6e:	2100      	movs	r1, #0
 800ac70:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	0018      	movs	r0, r3
 800ac76:	f7ff fea9 	bl	800a9cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	2240      	movs	r2, #64	; 0x40
 800ac82:	4013      	ands	r3, r2
 800ac84:	2b40      	cmp	r3, #64	; 0x40
 800ac86:	d10a      	bne.n	800ac9e <UART_DMAError+0x62>
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2b22      	cmp	r3, #34	; 0x22
 800ac8c:	d107      	bne.n	800ac9e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	225a      	movs	r2, #90	; 0x5a
 800ac92:	2100      	movs	r1, #0
 800ac94:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	0018      	movs	r0, r3
 800ac9a:	f7ff febb 	bl	800aa14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2280      	movs	r2, #128	; 0x80
 800aca2:	589b      	ldr	r3, [r3, r2]
 800aca4:	2210      	movs	r2, #16
 800aca6:	431a      	orrs	r2, r3
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	2180      	movs	r1, #128	; 0x80
 800acac:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	0018      	movs	r0, r3
 800acb2:	f7ff f991 	bl	8009fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acb6:	46c0      	nop			; (mov r8, r8)
 800acb8:	46bd      	mov	sp, r7
 800acba:	b006      	add	sp, #24
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b082      	sub	sp, #8
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d101      	bne.n	800acd0 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	e017      	b.n	800ad00 <HAL_WWDG_Init+0x42>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	0018      	movs	r0, r3
 800acd4:	f7fa fc6c 	bl	80055b0 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	68da      	ldr	r2, [r3, #12]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2180      	movs	r1, #128	; 0x80
 800ace2:	430a      	orrs	r2, r1
 800ace4:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	691a      	ldr	r2, [r3, #16]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	431a      	orrs	r2, r3
 800acf0:	0011      	movs	r1, r2
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	689a      	ldr	r2, [r3, #8]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	430a      	orrs	r2, r1
 800acfc:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	0018      	movs	r0, r3
 800ad02:	46bd      	mov	sp, r7
 800ad04:	b002      	add	sp, #8
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	68d2      	ldr	r2, [r2, #12]
 800ad18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	0018      	movs	r0, r3
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	b002      	add	sp, #8
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <__errno>:
 800ad24:	4b01      	ldr	r3, [pc, #4]	; (800ad2c <__errno+0x8>)
 800ad26:	6818      	ldr	r0, [r3, #0]
 800ad28:	4770      	bx	lr
 800ad2a:	46c0      	nop			; (mov r8, r8)
 800ad2c:	20000030 	.word	0x20000030

0800ad30 <__libc_init_array>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	2600      	movs	r6, #0
 800ad34:	4d0c      	ldr	r5, [pc, #48]	; (800ad68 <__libc_init_array+0x38>)
 800ad36:	4c0d      	ldr	r4, [pc, #52]	; (800ad6c <__libc_init_array+0x3c>)
 800ad38:	1b64      	subs	r4, r4, r5
 800ad3a:	10a4      	asrs	r4, r4, #2
 800ad3c:	42a6      	cmp	r6, r4
 800ad3e:	d109      	bne.n	800ad54 <__libc_init_array+0x24>
 800ad40:	2600      	movs	r6, #0
 800ad42:	f003 f8cf 	bl	800dee4 <_init>
 800ad46:	4d0a      	ldr	r5, [pc, #40]	; (800ad70 <__libc_init_array+0x40>)
 800ad48:	4c0a      	ldr	r4, [pc, #40]	; (800ad74 <__libc_init_array+0x44>)
 800ad4a:	1b64      	subs	r4, r4, r5
 800ad4c:	10a4      	asrs	r4, r4, #2
 800ad4e:	42a6      	cmp	r6, r4
 800ad50:	d105      	bne.n	800ad5e <__libc_init_array+0x2e>
 800ad52:	bd70      	pop	{r4, r5, r6, pc}
 800ad54:	00b3      	lsls	r3, r6, #2
 800ad56:	58eb      	ldr	r3, [r5, r3]
 800ad58:	4798      	blx	r3
 800ad5a:	3601      	adds	r6, #1
 800ad5c:	e7ee      	b.n	800ad3c <__libc_init_array+0xc>
 800ad5e:	00b3      	lsls	r3, r6, #2
 800ad60:	58eb      	ldr	r3, [r5, r3]
 800ad62:	4798      	blx	r3
 800ad64:	3601      	adds	r6, #1
 800ad66:	e7f2      	b.n	800ad4e <__libc_init_array+0x1e>
 800ad68:	0800eb84 	.word	0x0800eb84
 800ad6c:	0800eb84 	.word	0x0800eb84
 800ad70:	0800eb84 	.word	0x0800eb84
 800ad74:	0800eb88 	.word	0x0800eb88

0800ad78 <memcpy>:
 800ad78:	2300      	movs	r3, #0
 800ad7a:	b510      	push	{r4, lr}
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d100      	bne.n	800ad82 <memcpy+0xa>
 800ad80:	bd10      	pop	{r4, pc}
 800ad82:	5ccc      	ldrb	r4, [r1, r3]
 800ad84:	54c4      	strb	r4, [r0, r3]
 800ad86:	3301      	adds	r3, #1
 800ad88:	e7f8      	b.n	800ad7c <memcpy+0x4>

0800ad8a <memset>:
 800ad8a:	0003      	movs	r3, r0
 800ad8c:	1882      	adds	r2, r0, r2
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d100      	bne.n	800ad94 <memset+0xa>
 800ad92:	4770      	bx	lr
 800ad94:	7019      	strb	r1, [r3, #0]
 800ad96:	3301      	adds	r3, #1
 800ad98:	e7f9      	b.n	800ad8e <memset+0x4>

0800ad9a <__cvt>:
 800ad9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad9c:	001e      	movs	r6, r3
 800ad9e:	2300      	movs	r3, #0
 800ada0:	0014      	movs	r4, r2
 800ada2:	b08b      	sub	sp, #44	; 0x2c
 800ada4:	429e      	cmp	r6, r3
 800ada6:	da04      	bge.n	800adb2 <__cvt+0x18>
 800ada8:	2180      	movs	r1, #128	; 0x80
 800adaa:	0609      	lsls	r1, r1, #24
 800adac:	1873      	adds	r3, r6, r1
 800adae:	001e      	movs	r6, r3
 800adb0:	232d      	movs	r3, #45	; 0x2d
 800adb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800adb4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800adb6:	7013      	strb	r3, [r2, #0]
 800adb8:	2320      	movs	r3, #32
 800adba:	2203      	movs	r2, #3
 800adbc:	439f      	bics	r7, r3
 800adbe:	2f46      	cmp	r7, #70	; 0x46
 800adc0:	d007      	beq.n	800add2 <__cvt+0x38>
 800adc2:	003b      	movs	r3, r7
 800adc4:	3b45      	subs	r3, #69	; 0x45
 800adc6:	4259      	negs	r1, r3
 800adc8:	414b      	adcs	r3, r1
 800adca:	9910      	ldr	r1, [sp, #64]	; 0x40
 800adcc:	3a01      	subs	r2, #1
 800adce:	18cb      	adds	r3, r1, r3
 800add0:	9310      	str	r3, [sp, #64]	; 0x40
 800add2:	ab09      	add	r3, sp, #36	; 0x24
 800add4:	9304      	str	r3, [sp, #16]
 800add6:	ab08      	add	r3, sp, #32
 800add8:	9303      	str	r3, [sp, #12]
 800adda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800addc:	9200      	str	r2, [sp, #0]
 800adde:	9302      	str	r3, [sp, #8]
 800ade0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ade2:	0022      	movs	r2, r4
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	0033      	movs	r3, r6
 800ade8:	f000 fe4a 	bl	800ba80 <_dtoa_r>
 800adec:	0005      	movs	r5, r0
 800adee:	2f47      	cmp	r7, #71	; 0x47
 800adf0:	d102      	bne.n	800adf8 <__cvt+0x5e>
 800adf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800adf4:	07db      	lsls	r3, r3, #31
 800adf6:	d528      	bpl.n	800ae4a <__cvt+0xb0>
 800adf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adfa:	18eb      	adds	r3, r5, r3
 800adfc:	9307      	str	r3, [sp, #28]
 800adfe:	2f46      	cmp	r7, #70	; 0x46
 800ae00:	d114      	bne.n	800ae2c <__cvt+0x92>
 800ae02:	782b      	ldrb	r3, [r5, #0]
 800ae04:	2b30      	cmp	r3, #48	; 0x30
 800ae06:	d10c      	bne.n	800ae22 <__cvt+0x88>
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	0020      	movs	r0, r4
 800ae0e:	0031      	movs	r1, r6
 800ae10:	f7f5 fb1c 	bl	800044c <__aeabi_dcmpeq>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d104      	bne.n	800ae22 <__cvt+0x88>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae1c:	1a9b      	subs	r3, r3, r2
 800ae1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae20:	6013      	str	r3, [r2, #0]
 800ae22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae24:	9a07      	ldr	r2, [sp, #28]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	18d3      	adds	r3, r2, r3
 800ae2a:	9307      	str	r3, [sp, #28]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	2300      	movs	r3, #0
 800ae30:	0020      	movs	r0, r4
 800ae32:	0031      	movs	r1, r6
 800ae34:	f7f5 fb0a 	bl	800044c <__aeabi_dcmpeq>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d001      	beq.n	800ae40 <__cvt+0xa6>
 800ae3c:	9b07      	ldr	r3, [sp, #28]
 800ae3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae40:	2230      	movs	r2, #48	; 0x30
 800ae42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae44:	9907      	ldr	r1, [sp, #28]
 800ae46:	428b      	cmp	r3, r1
 800ae48:	d306      	bcc.n	800ae58 <__cvt+0xbe>
 800ae4a:	0028      	movs	r0, r5
 800ae4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ae50:	1b5b      	subs	r3, r3, r5
 800ae52:	6013      	str	r3, [r2, #0]
 800ae54:	b00b      	add	sp, #44	; 0x2c
 800ae56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae58:	1c59      	adds	r1, r3, #1
 800ae5a:	9109      	str	r1, [sp, #36]	; 0x24
 800ae5c:	701a      	strb	r2, [r3, #0]
 800ae5e:	e7f0      	b.n	800ae42 <__cvt+0xa8>

0800ae60 <__exponent>:
 800ae60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae62:	1c83      	adds	r3, r0, #2
 800ae64:	b087      	sub	sp, #28
 800ae66:	9303      	str	r3, [sp, #12]
 800ae68:	0005      	movs	r5, r0
 800ae6a:	000c      	movs	r4, r1
 800ae6c:	232b      	movs	r3, #43	; 0x2b
 800ae6e:	7002      	strb	r2, [r0, #0]
 800ae70:	2900      	cmp	r1, #0
 800ae72:	da01      	bge.n	800ae78 <__exponent+0x18>
 800ae74:	424c      	negs	r4, r1
 800ae76:	3302      	adds	r3, #2
 800ae78:	706b      	strb	r3, [r5, #1]
 800ae7a:	2c09      	cmp	r4, #9
 800ae7c:	dd31      	ble.n	800aee2 <__exponent+0x82>
 800ae7e:	270a      	movs	r7, #10
 800ae80:	ab04      	add	r3, sp, #16
 800ae82:	1dde      	adds	r6, r3, #7
 800ae84:	0020      	movs	r0, r4
 800ae86:	0039      	movs	r1, r7
 800ae88:	9601      	str	r6, [sp, #4]
 800ae8a:	f7f5 fac9 	bl	8000420 <__aeabi_idivmod>
 800ae8e:	3e01      	subs	r6, #1
 800ae90:	3130      	adds	r1, #48	; 0x30
 800ae92:	0020      	movs	r0, r4
 800ae94:	7031      	strb	r1, [r6, #0]
 800ae96:	0039      	movs	r1, r7
 800ae98:	9402      	str	r4, [sp, #8]
 800ae9a:	f7f5 f9db 	bl	8000254 <__divsi3>
 800ae9e:	9b02      	ldr	r3, [sp, #8]
 800aea0:	0004      	movs	r4, r0
 800aea2:	2b63      	cmp	r3, #99	; 0x63
 800aea4:	dcee      	bgt.n	800ae84 <__exponent+0x24>
 800aea6:	9b01      	ldr	r3, [sp, #4]
 800aea8:	3430      	adds	r4, #48	; 0x30
 800aeaa:	1e9a      	subs	r2, r3, #2
 800aeac:	0013      	movs	r3, r2
 800aeae:	9903      	ldr	r1, [sp, #12]
 800aeb0:	7014      	strb	r4, [r2, #0]
 800aeb2:	a804      	add	r0, sp, #16
 800aeb4:	3007      	adds	r0, #7
 800aeb6:	4298      	cmp	r0, r3
 800aeb8:	d80e      	bhi.n	800aed8 <__exponent+0x78>
 800aeba:	ab04      	add	r3, sp, #16
 800aebc:	3307      	adds	r3, #7
 800aebe:	2000      	movs	r0, #0
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d804      	bhi.n	800aece <__exponent+0x6e>
 800aec4:	ab04      	add	r3, sp, #16
 800aec6:	3009      	adds	r0, #9
 800aec8:	18c0      	adds	r0, r0, r3
 800aeca:	9b01      	ldr	r3, [sp, #4]
 800aecc:	1ac0      	subs	r0, r0, r3
 800aece:	9b03      	ldr	r3, [sp, #12]
 800aed0:	1818      	adds	r0, r3, r0
 800aed2:	1b40      	subs	r0, r0, r5
 800aed4:	b007      	add	sp, #28
 800aed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed8:	7818      	ldrb	r0, [r3, #0]
 800aeda:	3301      	adds	r3, #1
 800aedc:	7008      	strb	r0, [r1, #0]
 800aede:	3101      	adds	r1, #1
 800aee0:	e7e7      	b.n	800aeb2 <__exponent+0x52>
 800aee2:	2330      	movs	r3, #48	; 0x30
 800aee4:	18e4      	adds	r4, r4, r3
 800aee6:	70ab      	strb	r3, [r5, #2]
 800aee8:	1d28      	adds	r0, r5, #4
 800aeea:	70ec      	strb	r4, [r5, #3]
 800aeec:	e7f1      	b.n	800aed2 <__exponent+0x72>
	...

0800aef0 <_printf_float>:
 800aef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aef2:	b095      	sub	sp, #84	; 0x54
 800aef4:	000c      	movs	r4, r1
 800aef6:	9209      	str	r2, [sp, #36]	; 0x24
 800aef8:	001e      	movs	r6, r3
 800aefa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800aefc:	0007      	movs	r7, r0
 800aefe:	f001 fda7 	bl	800ca50 <_localeconv_r>
 800af02:	6803      	ldr	r3, [r0, #0]
 800af04:	0018      	movs	r0, r3
 800af06:	930c      	str	r3, [sp, #48]	; 0x30
 800af08:	f7f5 f8fe 	bl	8000108 <strlen>
 800af0c:	2300      	movs	r3, #0
 800af0e:	9312      	str	r3, [sp, #72]	; 0x48
 800af10:	7e23      	ldrb	r3, [r4, #24]
 800af12:	2207      	movs	r2, #7
 800af14:	930a      	str	r3, [sp, #40]	; 0x28
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	900e      	str	r0, [sp, #56]	; 0x38
 800af1a:	930d      	str	r3, [sp, #52]	; 0x34
 800af1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800af1e:	682b      	ldr	r3, [r5, #0]
 800af20:	05c9      	lsls	r1, r1, #23
 800af22:	d547      	bpl.n	800afb4 <_printf_float+0xc4>
 800af24:	189b      	adds	r3, r3, r2
 800af26:	4393      	bics	r3, r2
 800af28:	001a      	movs	r2, r3
 800af2a:	3208      	adds	r2, #8
 800af2c:	602a      	str	r2, [r5, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	64a2      	str	r2, [r4, #72]	; 0x48
 800af34:	64e3      	str	r3, [r4, #76]	; 0x4c
 800af36:	2201      	movs	r2, #1
 800af38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800af3a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800af3c:	930b      	str	r3, [sp, #44]	; 0x2c
 800af3e:	006b      	lsls	r3, r5, #1
 800af40:	085b      	lsrs	r3, r3, #1
 800af42:	930f      	str	r3, [sp, #60]	; 0x3c
 800af44:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800af46:	4ba7      	ldr	r3, [pc, #668]	; (800b1e4 <_printf_float+0x2f4>)
 800af48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800af4a:	4252      	negs	r2, r2
 800af4c:	f7f7 fff0 	bl	8002f30 <__aeabi_dcmpun>
 800af50:	2800      	cmp	r0, #0
 800af52:	d131      	bne.n	800afb8 <_printf_float+0xc8>
 800af54:	2201      	movs	r2, #1
 800af56:	4ba3      	ldr	r3, [pc, #652]	; (800b1e4 <_printf_float+0x2f4>)
 800af58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800af5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800af5c:	4252      	negs	r2, r2
 800af5e:	f7f5 fa85 	bl	800046c <__aeabi_dcmple>
 800af62:	2800      	cmp	r0, #0
 800af64:	d128      	bne.n	800afb8 <_printf_float+0xc8>
 800af66:	2200      	movs	r2, #0
 800af68:	2300      	movs	r3, #0
 800af6a:	0029      	movs	r1, r5
 800af6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800af6e:	f7f5 fa73 	bl	8000458 <__aeabi_dcmplt>
 800af72:	2800      	cmp	r0, #0
 800af74:	d003      	beq.n	800af7e <_printf_float+0x8e>
 800af76:	0023      	movs	r3, r4
 800af78:	222d      	movs	r2, #45	; 0x2d
 800af7a:	3343      	adds	r3, #67	; 0x43
 800af7c:	701a      	strb	r2, [r3, #0]
 800af7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af80:	4d99      	ldr	r5, [pc, #612]	; (800b1e8 <_printf_float+0x2f8>)
 800af82:	2b47      	cmp	r3, #71	; 0x47
 800af84:	d900      	bls.n	800af88 <_printf_float+0x98>
 800af86:	4d99      	ldr	r5, [pc, #612]	; (800b1ec <_printf_float+0x2fc>)
 800af88:	2303      	movs	r3, #3
 800af8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af8c:	6123      	str	r3, [r4, #16]
 800af8e:	3301      	adds	r3, #1
 800af90:	439a      	bics	r2, r3
 800af92:	2300      	movs	r3, #0
 800af94:	6022      	str	r2, [r4, #0]
 800af96:	930b      	str	r3, [sp, #44]	; 0x2c
 800af98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af9a:	0021      	movs	r1, r4
 800af9c:	0038      	movs	r0, r7
 800af9e:	9600      	str	r6, [sp, #0]
 800afa0:	aa13      	add	r2, sp, #76	; 0x4c
 800afa2:	f000 f9e7 	bl	800b374 <_printf_common>
 800afa6:	1c43      	adds	r3, r0, #1
 800afa8:	d000      	beq.n	800afac <_printf_float+0xbc>
 800afaa:	e0a2      	b.n	800b0f2 <_printf_float+0x202>
 800afac:	2001      	movs	r0, #1
 800afae:	4240      	negs	r0, r0
 800afb0:	b015      	add	sp, #84	; 0x54
 800afb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afb4:	3307      	adds	r3, #7
 800afb6:	e7b6      	b.n	800af26 <_printf_float+0x36>
 800afb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afba:	002b      	movs	r3, r5
 800afbc:	0010      	movs	r0, r2
 800afbe:	0029      	movs	r1, r5
 800afc0:	f7f7 ffb6 	bl	8002f30 <__aeabi_dcmpun>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d00b      	beq.n	800afe0 <_printf_float+0xf0>
 800afc8:	2d00      	cmp	r5, #0
 800afca:	da03      	bge.n	800afd4 <_printf_float+0xe4>
 800afcc:	0023      	movs	r3, r4
 800afce:	222d      	movs	r2, #45	; 0x2d
 800afd0:	3343      	adds	r3, #67	; 0x43
 800afd2:	701a      	strb	r2, [r3, #0]
 800afd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd6:	4d86      	ldr	r5, [pc, #536]	; (800b1f0 <_printf_float+0x300>)
 800afd8:	2b47      	cmp	r3, #71	; 0x47
 800afda:	d9d5      	bls.n	800af88 <_printf_float+0x98>
 800afdc:	4d85      	ldr	r5, [pc, #532]	; (800b1f4 <_printf_float+0x304>)
 800afde:	e7d3      	b.n	800af88 <_printf_float+0x98>
 800afe0:	2220      	movs	r2, #32
 800afe2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800afe4:	6863      	ldr	r3, [r4, #4]
 800afe6:	4391      	bics	r1, r2
 800afe8:	910f      	str	r1, [sp, #60]	; 0x3c
 800afea:	1c5a      	adds	r2, r3, #1
 800afec:	d149      	bne.n	800b082 <_printf_float+0x192>
 800afee:	3307      	adds	r3, #7
 800aff0:	6063      	str	r3, [r4, #4]
 800aff2:	2380      	movs	r3, #128	; 0x80
 800aff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aff6:	00db      	lsls	r3, r3, #3
 800aff8:	4313      	orrs	r3, r2
 800affa:	2200      	movs	r2, #0
 800affc:	9206      	str	r2, [sp, #24]
 800affe:	aa12      	add	r2, sp, #72	; 0x48
 800b000:	9205      	str	r2, [sp, #20]
 800b002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b004:	a908      	add	r1, sp, #32
 800b006:	9204      	str	r2, [sp, #16]
 800b008:	aa11      	add	r2, sp, #68	; 0x44
 800b00a:	9203      	str	r2, [sp, #12]
 800b00c:	2223      	movs	r2, #35	; 0x23
 800b00e:	6023      	str	r3, [r4, #0]
 800b010:	9301      	str	r3, [sp, #4]
 800b012:	6863      	ldr	r3, [r4, #4]
 800b014:	1852      	adds	r2, r2, r1
 800b016:	9202      	str	r2, [sp, #8]
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	0038      	movs	r0, r7
 800b01c:	002b      	movs	r3, r5
 800b01e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b020:	f7ff febb 	bl	800ad9a <__cvt>
 800b024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b026:	0005      	movs	r5, r0
 800b028:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b02a:	2b47      	cmp	r3, #71	; 0x47
 800b02c:	d108      	bne.n	800b040 <_printf_float+0x150>
 800b02e:	1ccb      	adds	r3, r1, #3
 800b030:	db02      	blt.n	800b038 <_printf_float+0x148>
 800b032:	6863      	ldr	r3, [r4, #4]
 800b034:	4299      	cmp	r1, r3
 800b036:	dd48      	ble.n	800b0ca <_printf_float+0x1da>
 800b038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b03a:	3b02      	subs	r3, #2
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	930a      	str	r3, [sp, #40]	; 0x28
 800b040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b042:	2b65      	cmp	r3, #101	; 0x65
 800b044:	d824      	bhi.n	800b090 <_printf_float+0x1a0>
 800b046:	0020      	movs	r0, r4
 800b048:	001a      	movs	r2, r3
 800b04a:	3901      	subs	r1, #1
 800b04c:	3050      	adds	r0, #80	; 0x50
 800b04e:	9111      	str	r1, [sp, #68]	; 0x44
 800b050:	f7ff ff06 	bl	800ae60 <__exponent>
 800b054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b056:	900b      	str	r0, [sp, #44]	; 0x2c
 800b058:	1813      	adds	r3, r2, r0
 800b05a:	6123      	str	r3, [r4, #16]
 800b05c:	2a01      	cmp	r2, #1
 800b05e:	dc02      	bgt.n	800b066 <_printf_float+0x176>
 800b060:	6822      	ldr	r2, [r4, #0]
 800b062:	07d2      	lsls	r2, r2, #31
 800b064:	d501      	bpl.n	800b06a <_printf_float+0x17a>
 800b066:	3301      	adds	r3, #1
 800b068:	6123      	str	r3, [r4, #16]
 800b06a:	2323      	movs	r3, #35	; 0x23
 800b06c:	aa08      	add	r2, sp, #32
 800b06e:	189b      	adds	r3, r3, r2
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d100      	bne.n	800b078 <_printf_float+0x188>
 800b076:	e78f      	b.n	800af98 <_printf_float+0xa8>
 800b078:	0023      	movs	r3, r4
 800b07a:	222d      	movs	r2, #45	; 0x2d
 800b07c:	3343      	adds	r3, #67	; 0x43
 800b07e:	701a      	strb	r2, [r3, #0]
 800b080:	e78a      	b.n	800af98 <_printf_float+0xa8>
 800b082:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b084:	2a47      	cmp	r2, #71	; 0x47
 800b086:	d1b4      	bne.n	800aff2 <_printf_float+0x102>
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1b2      	bne.n	800aff2 <_printf_float+0x102>
 800b08c:	3301      	adds	r3, #1
 800b08e:	e7af      	b.n	800aff0 <_printf_float+0x100>
 800b090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b092:	2b66      	cmp	r3, #102	; 0x66
 800b094:	d11b      	bne.n	800b0ce <_printf_float+0x1de>
 800b096:	6863      	ldr	r3, [r4, #4]
 800b098:	2900      	cmp	r1, #0
 800b09a:	dd0d      	ble.n	800b0b8 <_printf_float+0x1c8>
 800b09c:	6121      	str	r1, [r4, #16]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d102      	bne.n	800b0a8 <_printf_float+0x1b8>
 800b0a2:	6822      	ldr	r2, [r4, #0]
 800b0a4:	07d2      	lsls	r2, r2, #31
 800b0a6:	d502      	bpl.n	800b0ae <_printf_float+0x1be>
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	1859      	adds	r1, r3, r1
 800b0ac:	6121      	str	r1, [r4, #16]
 800b0ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0b0:	65a3      	str	r3, [r4, #88]	; 0x58
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0b6:	e7d8      	b.n	800b06a <_printf_float+0x17a>
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d103      	bne.n	800b0c4 <_printf_float+0x1d4>
 800b0bc:	2201      	movs	r2, #1
 800b0be:	6821      	ldr	r1, [r4, #0]
 800b0c0:	4211      	tst	r1, r2
 800b0c2:	d000      	beq.n	800b0c6 <_printf_float+0x1d6>
 800b0c4:	1c9a      	adds	r2, r3, #2
 800b0c6:	6122      	str	r2, [r4, #16]
 800b0c8:	e7f1      	b.n	800b0ae <_printf_float+0x1be>
 800b0ca:	2367      	movs	r3, #103	; 0x67
 800b0cc:	930a      	str	r3, [sp, #40]	; 0x28
 800b0ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	db06      	blt.n	800b0e4 <_printf_float+0x1f4>
 800b0d6:	6822      	ldr	r2, [r4, #0]
 800b0d8:	6123      	str	r3, [r4, #16]
 800b0da:	07d2      	lsls	r2, r2, #31
 800b0dc:	d5e7      	bpl.n	800b0ae <_printf_float+0x1be>
 800b0de:	3301      	adds	r3, #1
 800b0e0:	6123      	str	r3, [r4, #16]
 800b0e2:	e7e4      	b.n	800b0ae <_printf_float+0x1be>
 800b0e4:	2101      	movs	r1, #1
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	dc01      	bgt.n	800b0ee <_printf_float+0x1fe>
 800b0ea:	1849      	adds	r1, r1, r1
 800b0ec:	1ac9      	subs	r1, r1, r3
 800b0ee:	1852      	adds	r2, r2, r1
 800b0f0:	e7e9      	b.n	800b0c6 <_printf_float+0x1d6>
 800b0f2:	6822      	ldr	r2, [r4, #0]
 800b0f4:	0553      	lsls	r3, r2, #21
 800b0f6:	d407      	bmi.n	800b108 <_printf_float+0x218>
 800b0f8:	6923      	ldr	r3, [r4, #16]
 800b0fa:	002a      	movs	r2, r5
 800b0fc:	0038      	movs	r0, r7
 800b0fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b100:	47b0      	blx	r6
 800b102:	1c43      	adds	r3, r0, #1
 800b104:	d128      	bne.n	800b158 <_printf_float+0x268>
 800b106:	e751      	b.n	800afac <_printf_float+0xbc>
 800b108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b10a:	2b65      	cmp	r3, #101	; 0x65
 800b10c:	d800      	bhi.n	800b110 <_printf_float+0x220>
 800b10e:	e0e1      	b.n	800b2d4 <_printf_float+0x3e4>
 800b110:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b112:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b114:	2200      	movs	r2, #0
 800b116:	2300      	movs	r3, #0
 800b118:	f7f5 f998 	bl	800044c <__aeabi_dcmpeq>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d031      	beq.n	800b184 <_printf_float+0x294>
 800b120:	2301      	movs	r3, #1
 800b122:	0038      	movs	r0, r7
 800b124:	4a34      	ldr	r2, [pc, #208]	; (800b1f8 <_printf_float+0x308>)
 800b126:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b128:	47b0      	blx	r6
 800b12a:	1c43      	adds	r3, r0, #1
 800b12c:	d100      	bne.n	800b130 <_printf_float+0x240>
 800b12e:	e73d      	b.n	800afac <_printf_float+0xbc>
 800b130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b132:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b134:	4293      	cmp	r3, r2
 800b136:	db02      	blt.n	800b13e <_printf_float+0x24e>
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	07db      	lsls	r3, r3, #31
 800b13c:	d50c      	bpl.n	800b158 <_printf_float+0x268>
 800b13e:	0038      	movs	r0, r7
 800b140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b144:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b146:	47b0      	blx	r6
 800b148:	2500      	movs	r5, #0
 800b14a:	1c43      	adds	r3, r0, #1
 800b14c:	d100      	bne.n	800b150 <_printf_float+0x260>
 800b14e:	e72d      	b.n	800afac <_printf_float+0xbc>
 800b150:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b152:	3b01      	subs	r3, #1
 800b154:	42ab      	cmp	r3, r5
 800b156:	dc0a      	bgt.n	800b16e <_printf_float+0x27e>
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	079b      	lsls	r3, r3, #30
 800b15c:	d500      	bpl.n	800b160 <_printf_float+0x270>
 800b15e:	e106      	b.n	800b36e <_printf_float+0x47e>
 800b160:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b162:	68e0      	ldr	r0, [r4, #12]
 800b164:	4298      	cmp	r0, r3
 800b166:	db00      	blt.n	800b16a <_printf_float+0x27a>
 800b168:	e722      	b.n	800afb0 <_printf_float+0xc0>
 800b16a:	0018      	movs	r0, r3
 800b16c:	e720      	b.n	800afb0 <_printf_float+0xc0>
 800b16e:	0022      	movs	r2, r4
 800b170:	2301      	movs	r3, #1
 800b172:	0038      	movs	r0, r7
 800b174:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b176:	321a      	adds	r2, #26
 800b178:	47b0      	blx	r6
 800b17a:	1c43      	adds	r3, r0, #1
 800b17c:	d100      	bne.n	800b180 <_printf_float+0x290>
 800b17e:	e715      	b.n	800afac <_printf_float+0xbc>
 800b180:	3501      	adds	r5, #1
 800b182:	e7e5      	b.n	800b150 <_printf_float+0x260>
 800b184:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b186:	2b00      	cmp	r3, #0
 800b188:	dc38      	bgt.n	800b1fc <_printf_float+0x30c>
 800b18a:	2301      	movs	r3, #1
 800b18c:	0038      	movs	r0, r7
 800b18e:	4a1a      	ldr	r2, [pc, #104]	; (800b1f8 <_printf_float+0x308>)
 800b190:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b192:	47b0      	blx	r6
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d100      	bne.n	800b19a <_printf_float+0x2aa>
 800b198:	e708      	b.n	800afac <_printf_float+0xbc>
 800b19a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b19c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	d102      	bne.n	800b1a8 <_printf_float+0x2b8>
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	07db      	lsls	r3, r3, #31
 800b1a6:	d5d7      	bpl.n	800b158 <_printf_float+0x268>
 800b1a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1aa:	0038      	movs	r0, r7
 800b1ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1b0:	47b0      	blx	r6
 800b1b2:	1c43      	adds	r3, r0, #1
 800b1b4:	d100      	bne.n	800b1b8 <_printf_float+0x2c8>
 800b1b6:	e6f9      	b.n	800afac <_printf_float+0xbc>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	930a      	str	r3, [sp, #40]	; 0x28
 800b1bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1c0:	425b      	negs	r3, r3
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	dc01      	bgt.n	800b1ca <_printf_float+0x2da>
 800b1c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1c8:	e797      	b.n	800b0fa <_printf_float+0x20a>
 800b1ca:	0022      	movs	r2, r4
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	0038      	movs	r0, r7
 800b1d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1d2:	321a      	adds	r2, #26
 800b1d4:	47b0      	blx	r6
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	d100      	bne.n	800b1dc <_printf_float+0x2ec>
 800b1da:	e6e7      	b.n	800afac <_printf_float+0xbc>
 800b1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1de:	3301      	adds	r3, #1
 800b1e0:	e7eb      	b.n	800b1ba <_printf_float+0x2ca>
 800b1e2:	46c0      	nop			; (mov r8, r8)
 800b1e4:	7fefffff 	.word	0x7fefffff
 800b1e8:	0800e7a4 	.word	0x0800e7a4
 800b1ec:	0800e7a8 	.word	0x0800e7a8
 800b1f0:	0800e7ac 	.word	0x0800e7ac
 800b1f4:	0800e7b0 	.word	0x0800e7b0
 800b1f8:	0800e7b4 	.word	0x0800e7b4
 800b1fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b200:	920a      	str	r2, [sp, #40]	; 0x28
 800b202:	429a      	cmp	r2, r3
 800b204:	dd00      	ble.n	800b208 <_printf_float+0x318>
 800b206:	930a      	str	r3, [sp, #40]	; 0x28
 800b208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	dc3c      	bgt.n	800b288 <_printf_float+0x398>
 800b20e:	2300      	movs	r3, #0
 800b210:	930d      	str	r3, [sp, #52]	; 0x34
 800b212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b214:	43db      	mvns	r3, r3
 800b216:	17db      	asrs	r3, r3, #31
 800b218:	930f      	str	r3, [sp, #60]	; 0x3c
 800b21a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b21c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b21e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b222:	4013      	ands	r3, r2
 800b224:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b226:	1ad3      	subs	r3, r2, r3
 800b228:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b22a:	4293      	cmp	r3, r2
 800b22c:	dc34      	bgt.n	800b298 <_printf_float+0x3a8>
 800b22e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b230:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b232:	4293      	cmp	r3, r2
 800b234:	db3d      	blt.n	800b2b2 <_printf_float+0x3c2>
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	07db      	lsls	r3, r3, #31
 800b23a:	d43a      	bmi.n	800b2b2 <_printf_float+0x3c2>
 800b23c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b23e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b240:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	1a52      	subs	r2, r2, r1
 800b246:	920a      	str	r2, [sp, #40]	; 0x28
 800b248:	429a      	cmp	r2, r3
 800b24a:	dd00      	ble.n	800b24e <_printf_float+0x35e>
 800b24c:	930a      	str	r3, [sp, #40]	; 0x28
 800b24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b250:	2b00      	cmp	r3, #0
 800b252:	dc36      	bgt.n	800b2c2 <_printf_float+0x3d2>
 800b254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b256:	2500      	movs	r5, #0
 800b258:	43db      	mvns	r3, r3
 800b25a:	17db      	asrs	r3, r3, #31
 800b25c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b25e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b260:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b262:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b264:	1a9b      	subs	r3, r3, r2
 800b266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b268:	400a      	ands	r2, r1
 800b26a:	1a9b      	subs	r3, r3, r2
 800b26c:	42ab      	cmp	r3, r5
 800b26e:	dc00      	bgt.n	800b272 <_printf_float+0x382>
 800b270:	e772      	b.n	800b158 <_printf_float+0x268>
 800b272:	0022      	movs	r2, r4
 800b274:	2301      	movs	r3, #1
 800b276:	0038      	movs	r0, r7
 800b278:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b27a:	321a      	adds	r2, #26
 800b27c:	47b0      	blx	r6
 800b27e:	1c43      	adds	r3, r0, #1
 800b280:	d100      	bne.n	800b284 <_printf_float+0x394>
 800b282:	e693      	b.n	800afac <_printf_float+0xbc>
 800b284:	3501      	adds	r5, #1
 800b286:	e7ea      	b.n	800b25e <_printf_float+0x36e>
 800b288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b28a:	002a      	movs	r2, r5
 800b28c:	0038      	movs	r0, r7
 800b28e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b290:	47b0      	blx	r6
 800b292:	1c43      	adds	r3, r0, #1
 800b294:	d1bb      	bne.n	800b20e <_printf_float+0x31e>
 800b296:	e689      	b.n	800afac <_printf_float+0xbc>
 800b298:	0022      	movs	r2, r4
 800b29a:	2301      	movs	r3, #1
 800b29c:	0038      	movs	r0, r7
 800b29e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2a0:	321a      	adds	r2, #26
 800b2a2:	47b0      	blx	r6
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	d100      	bne.n	800b2aa <_printf_float+0x3ba>
 800b2a8:	e680      	b.n	800afac <_printf_float+0xbc>
 800b2aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	930d      	str	r3, [sp, #52]	; 0x34
 800b2b0:	e7b3      	b.n	800b21a <_printf_float+0x32a>
 800b2b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2b4:	0038      	movs	r0, r7
 800b2b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2ba:	47b0      	blx	r6
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d1bd      	bne.n	800b23c <_printf_float+0x34c>
 800b2c0:	e674      	b.n	800afac <_printf_float+0xbc>
 800b2c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2c4:	0038      	movs	r0, r7
 800b2c6:	18ea      	adds	r2, r5, r3
 800b2c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2cc:	47b0      	blx	r6
 800b2ce:	1c43      	adds	r3, r0, #1
 800b2d0:	d1c0      	bne.n	800b254 <_printf_float+0x364>
 800b2d2:	e66b      	b.n	800afac <_printf_float+0xbc>
 800b2d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	dc02      	bgt.n	800b2e0 <_printf_float+0x3f0>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	421a      	tst	r2, r3
 800b2de:	d034      	beq.n	800b34a <_printf_float+0x45a>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	002a      	movs	r2, r5
 800b2e4:	0038      	movs	r0, r7
 800b2e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2e8:	47b0      	blx	r6
 800b2ea:	1c43      	adds	r3, r0, #1
 800b2ec:	d100      	bne.n	800b2f0 <_printf_float+0x400>
 800b2ee:	e65d      	b.n	800afac <_printf_float+0xbc>
 800b2f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2f2:	0038      	movs	r0, r7
 800b2f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2f8:	47b0      	blx	r6
 800b2fa:	1c43      	adds	r3, r0, #1
 800b2fc:	d100      	bne.n	800b300 <_printf_float+0x410>
 800b2fe:	e655      	b.n	800afac <_printf_float+0xbc>
 800b300:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b302:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b304:	2200      	movs	r2, #0
 800b306:	2300      	movs	r3, #0
 800b308:	f7f5 f8a0 	bl	800044c <__aeabi_dcmpeq>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d11a      	bne.n	800b346 <_printf_float+0x456>
 800b310:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b312:	1c6a      	adds	r2, r5, #1
 800b314:	3b01      	subs	r3, #1
 800b316:	0038      	movs	r0, r7
 800b318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b31a:	47b0      	blx	r6
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	d10e      	bne.n	800b33e <_printf_float+0x44e>
 800b320:	e644      	b.n	800afac <_printf_float+0xbc>
 800b322:	0022      	movs	r2, r4
 800b324:	2301      	movs	r3, #1
 800b326:	0038      	movs	r0, r7
 800b328:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b32a:	321a      	adds	r2, #26
 800b32c:	47b0      	blx	r6
 800b32e:	1c43      	adds	r3, r0, #1
 800b330:	d100      	bne.n	800b334 <_printf_float+0x444>
 800b332:	e63b      	b.n	800afac <_printf_float+0xbc>
 800b334:	3501      	adds	r5, #1
 800b336:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b338:	3b01      	subs	r3, #1
 800b33a:	42ab      	cmp	r3, r5
 800b33c:	dcf1      	bgt.n	800b322 <_printf_float+0x432>
 800b33e:	0022      	movs	r2, r4
 800b340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b342:	3250      	adds	r2, #80	; 0x50
 800b344:	e6da      	b.n	800b0fc <_printf_float+0x20c>
 800b346:	2500      	movs	r5, #0
 800b348:	e7f5      	b.n	800b336 <_printf_float+0x446>
 800b34a:	002a      	movs	r2, r5
 800b34c:	e7e3      	b.n	800b316 <_printf_float+0x426>
 800b34e:	0022      	movs	r2, r4
 800b350:	2301      	movs	r3, #1
 800b352:	0038      	movs	r0, r7
 800b354:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b356:	3219      	adds	r2, #25
 800b358:	47b0      	blx	r6
 800b35a:	1c43      	adds	r3, r0, #1
 800b35c:	d100      	bne.n	800b360 <_printf_float+0x470>
 800b35e:	e625      	b.n	800afac <_printf_float+0xbc>
 800b360:	3501      	adds	r5, #1
 800b362:	68e3      	ldr	r3, [r4, #12]
 800b364:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b366:	1a9b      	subs	r3, r3, r2
 800b368:	42ab      	cmp	r3, r5
 800b36a:	dcf0      	bgt.n	800b34e <_printf_float+0x45e>
 800b36c:	e6f8      	b.n	800b160 <_printf_float+0x270>
 800b36e:	2500      	movs	r5, #0
 800b370:	e7f7      	b.n	800b362 <_printf_float+0x472>
 800b372:	46c0      	nop			; (mov r8, r8)

0800b374 <_printf_common>:
 800b374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b376:	0015      	movs	r5, r2
 800b378:	9301      	str	r3, [sp, #4]
 800b37a:	688a      	ldr	r2, [r1, #8]
 800b37c:	690b      	ldr	r3, [r1, #16]
 800b37e:	000c      	movs	r4, r1
 800b380:	9000      	str	r0, [sp, #0]
 800b382:	4293      	cmp	r3, r2
 800b384:	da00      	bge.n	800b388 <_printf_common+0x14>
 800b386:	0013      	movs	r3, r2
 800b388:	0022      	movs	r2, r4
 800b38a:	602b      	str	r3, [r5, #0]
 800b38c:	3243      	adds	r2, #67	; 0x43
 800b38e:	7812      	ldrb	r2, [r2, #0]
 800b390:	2a00      	cmp	r2, #0
 800b392:	d001      	beq.n	800b398 <_printf_common+0x24>
 800b394:	3301      	adds	r3, #1
 800b396:	602b      	str	r3, [r5, #0]
 800b398:	6823      	ldr	r3, [r4, #0]
 800b39a:	069b      	lsls	r3, r3, #26
 800b39c:	d502      	bpl.n	800b3a4 <_printf_common+0x30>
 800b39e:	682b      	ldr	r3, [r5, #0]
 800b3a0:	3302      	adds	r3, #2
 800b3a2:	602b      	str	r3, [r5, #0]
 800b3a4:	6822      	ldr	r2, [r4, #0]
 800b3a6:	2306      	movs	r3, #6
 800b3a8:	0017      	movs	r7, r2
 800b3aa:	401f      	ands	r7, r3
 800b3ac:	421a      	tst	r2, r3
 800b3ae:	d027      	beq.n	800b400 <_printf_common+0x8c>
 800b3b0:	0023      	movs	r3, r4
 800b3b2:	3343      	adds	r3, #67	; 0x43
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	1e5a      	subs	r2, r3, #1
 800b3b8:	4193      	sbcs	r3, r2
 800b3ba:	6822      	ldr	r2, [r4, #0]
 800b3bc:	0692      	lsls	r2, r2, #26
 800b3be:	d430      	bmi.n	800b422 <_printf_common+0xae>
 800b3c0:	0022      	movs	r2, r4
 800b3c2:	9901      	ldr	r1, [sp, #4]
 800b3c4:	9800      	ldr	r0, [sp, #0]
 800b3c6:	9e08      	ldr	r6, [sp, #32]
 800b3c8:	3243      	adds	r2, #67	; 0x43
 800b3ca:	47b0      	blx	r6
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	d025      	beq.n	800b41c <_printf_common+0xa8>
 800b3d0:	2306      	movs	r3, #6
 800b3d2:	6820      	ldr	r0, [r4, #0]
 800b3d4:	682a      	ldr	r2, [r5, #0]
 800b3d6:	68e1      	ldr	r1, [r4, #12]
 800b3d8:	2500      	movs	r5, #0
 800b3da:	4003      	ands	r3, r0
 800b3dc:	2b04      	cmp	r3, #4
 800b3de:	d103      	bne.n	800b3e8 <_printf_common+0x74>
 800b3e0:	1a8d      	subs	r5, r1, r2
 800b3e2:	43eb      	mvns	r3, r5
 800b3e4:	17db      	asrs	r3, r3, #31
 800b3e6:	401d      	ands	r5, r3
 800b3e8:	68a3      	ldr	r3, [r4, #8]
 800b3ea:	6922      	ldr	r2, [r4, #16]
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	dd01      	ble.n	800b3f4 <_printf_common+0x80>
 800b3f0:	1a9b      	subs	r3, r3, r2
 800b3f2:	18ed      	adds	r5, r5, r3
 800b3f4:	2700      	movs	r7, #0
 800b3f6:	42bd      	cmp	r5, r7
 800b3f8:	d120      	bne.n	800b43c <_printf_common+0xc8>
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	e010      	b.n	800b420 <_printf_common+0xac>
 800b3fe:	3701      	adds	r7, #1
 800b400:	68e3      	ldr	r3, [r4, #12]
 800b402:	682a      	ldr	r2, [r5, #0]
 800b404:	1a9b      	subs	r3, r3, r2
 800b406:	42bb      	cmp	r3, r7
 800b408:	ddd2      	ble.n	800b3b0 <_printf_common+0x3c>
 800b40a:	0022      	movs	r2, r4
 800b40c:	2301      	movs	r3, #1
 800b40e:	9901      	ldr	r1, [sp, #4]
 800b410:	9800      	ldr	r0, [sp, #0]
 800b412:	9e08      	ldr	r6, [sp, #32]
 800b414:	3219      	adds	r2, #25
 800b416:	47b0      	blx	r6
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	d1f0      	bne.n	800b3fe <_printf_common+0x8a>
 800b41c:	2001      	movs	r0, #1
 800b41e:	4240      	negs	r0, r0
 800b420:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b422:	2030      	movs	r0, #48	; 0x30
 800b424:	18e1      	adds	r1, r4, r3
 800b426:	3143      	adds	r1, #67	; 0x43
 800b428:	7008      	strb	r0, [r1, #0]
 800b42a:	0021      	movs	r1, r4
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	3145      	adds	r1, #69	; 0x45
 800b430:	7809      	ldrb	r1, [r1, #0]
 800b432:	18a2      	adds	r2, r4, r2
 800b434:	3243      	adds	r2, #67	; 0x43
 800b436:	3302      	adds	r3, #2
 800b438:	7011      	strb	r1, [r2, #0]
 800b43a:	e7c1      	b.n	800b3c0 <_printf_common+0x4c>
 800b43c:	0022      	movs	r2, r4
 800b43e:	2301      	movs	r3, #1
 800b440:	9901      	ldr	r1, [sp, #4]
 800b442:	9800      	ldr	r0, [sp, #0]
 800b444:	9e08      	ldr	r6, [sp, #32]
 800b446:	321a      	adds	r2, #26
 800b448:	47b0      	blx	r6
 800b44a:	1c43      	adds	r3, r0, #1
 800b44c:	d0e6      	beq.n	800b41c <_printf_common+0xa8>
 800b44e:	3701      	adds	r7, #1
 800b450:	e7d1      	b.n	800b3f6 <_printf_common+0x82>
	...

0800b454 <_printf_i>:
 800b454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b456:	b08b      	sub	sp, #44	; 0x2c
 800b458:	9206      	str	r2, [sp, #24]
 800b45a:	000a      	movs	r2, r1
 800b45c:	3243      	adds	r2, #67	; 0x43
 800b45e:	9307      	str	r3, [sp, #28]
 800b460:	9005      	str	r0, [sp, #20]
 800b462:	9204      	str	r2, [sp, #16]
 800b464:	7e0a      	ldrb	r2, [r1, #24]
 800b466:	000c      	movs	r4, r1
 800b468:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b46a:	2a78      	cmp	r2, #120	; 0x78
 800b46c:	d807      	bhi.n	800b47e <_printf_i+0x2a>
 800b46e:	2a62      	cmp	r2, #98	; 0x62
 800b470:	d809      	bhi.n	800b486 <_printf_i+0x32>
 800b472:	2a00      	cmp	r2, #0
 800b474:	d100      	bne.n	800b478 <_printf_i+0x24>
 800b476:	e0c1      	b.n	800b5fc <_printf_i+0x1a8>
 800b478:	2a58      	cmp	r2, #88	; 0x58
 800b47a:	d100      	bne.n	800b47e <_printf_i+0x2a>
 800b47c:	e08c      	b.n	800b598 <_printf_i+0x144>
 800b47e:	0026      	movs	r6, r4
 800b480:	3642      	adds	r6, #66	; 0x42
 800b482:	7032      	strb	r2, [r6, #0]
 800b484:	e022      	b.n	800b4cc <_printf_i+0x78>
 800b486:	0010      	movs	r0, r2
 800b488:	3863      	subs	r0, #99	; 0x63
 800b48a:	2815      	cmp	r0, #21
 800b48c:	d8f7      	bhi.n	800b47e <_printf_i+0x2a>
 800b48e:	f7f4 fe4d 	bl	800012c <__gnu_thumb1_case_shi>
 800b492:	0016      	.short	0x0016
 800b494:	fff6001f 	.word	0xfff6001f
 800b498:	fff6fff6 	.word	0xfff6fff6
 800b49c:	001ffff6 	.word	0x001ffff6
 800b4a0:	fff6fff6 	.word	0xfff6fff6
 800b4a4:	fff6fff6 	.word	0xfff6fff6
 800b4a8:	003600a8 	.word	0x003600a8
 800b4ac:	fff6009a 	.word	0xfff6009a
 800b4b0:	00b9fff6 	.word	0x00b9fff6
 800b4b4:	0036fff6 	.word	0x0036fff6
 800b4b8:	fff6fff6 	.word	0xfff6fff6
 800b4bc:	009e      	.short	0x009e
 800b4be:	0026      	movs	r6, r4
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	3642      	adds	r6, #66	; 0x42
 800b4c4:	1d11      	adds	r1, r2, #4
 800b4c6:	6019      	str	r1, [r3, #0]
 800b4c8:	6813      	ldr	r3, [r2, #0]
 800b4ca:	7033      	strb	r3, [r6, #0]
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e0a7      	b.n	800b620 <_printf_i+0x1cc>
 800b4d0:	6808      	ldr	r0, [r1, #0]
 800b4d2:	6819      	ldr	r1, [r3, #0]
 800b4d4:	1d0a      	adds	r2, r1, #4
 800b4d6:	0605      	lsls	r5, r0, #24
 800b4d8:	d50b      	bpl.n	800b4f2 <_printf_i+0x9e>
 800b4da:	680d      	ldr	r5, [r1, #0]
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	2d00      	cmp	r5, #0
 800b4e0:	da03      	bge.n	800b4ea <_printf_i+0x96>
 800b4e2:	232d      	movs	r3, #45	; 0x2d
 800b4e4:	9a04      	ldr	r2, [sp, #16]
 800b4e6:	426d      	negs	r5, r5
 800b4e8:	7013      	strb	r3, [r2, #0]
 800b4ea:	4b61      	ldr	r3, [pc, #388]	; (800b670 <_printf_i+0x21c>)
 800b4ec:	270a      	movs	r7, #10
 800b4ee:	9303      	str	r3, [sp, #12]
 800b4f0:	e01b      	b.n	800b52a <_printf_i+0xd6>
 800b4f2:	680d      	ldr	r5, [r1, #0]
 800b4f4:	601a      	str	r2, [r3, #0]
 800b4f6:	0641      	lsls	r1, r0, #25
 800b4f8:	d5f1      	bpl.n	800b4de <_printf_i+0x8a>
 800b4fa:	b22d      	sxth	r5, r5
 800b4fc:	e7ef      	b.n	800b4de <_printf_i+0x8a>
 800b4fe:	680d      	ldr	r5, [r1, #0]
 800b500:	6819      	ldr	r1, [r3, #0]
 800b502:	1d08      	adds	r0, r1, #4
 800b504:	6018      	str	r0, [r3, #0]
 800b506:	062e      	lsls	r6, r5, #24
 800b508:	d501      	bpl.n	800b50e <_printf_i+0xba>
 800b50a:	680d      	ldr	r5, [r1, #0]
 800b50c:	e003      	b.n	800b516 <_printf_i+0xc2>
 800b50e:	066d      	lsls	r5, r5, #25
 800b510:	d5fb      	bpl.n	800b50a <_printf_i+0xb6>
 800b512:	680d      	ldr	r5, [r1, #0]
 800b514:	b2ad      	uxth	r5, r5
 800b516:	4b56      	ldr	r3, [pc, #344]	; (800b670 <_printf_i+0x21c>)
 800b518:	2708      	movs	r7, #8
 800b51a:	9303      	str	r3, [sp, #12]
 800b51c:	2a6f      	cmp	r2, #111	; 0x6f
 800b51e:	d000      	beq.n	800b522 <_printf_i+0xce>
 800b520:	3702      	adds	r7, #2
 800b522:	0023      	movs	r3, r4
 800b524:	2200      	movs	r2, #0
 800b526:	3343      	adds	r3, #67	; 0x43
 800b528:	701a      	strb	r2, [r3, #0]
 800b52a:	6863      	ldr	r3, [r4, #4]
 800b52c:	60a3      	str	r3, [r4, #8]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	db03      	blt.n	800b53a <_printf_i+0xe6>
 800b532:	2204      	movs	r2, #4
 800b534:	6821      	ldr	r1, [r4, #0]
 800b536:	4391      	bics	r1, r2
 800b538:	6021      	str	r1, [r4, #0]
 800b53a:	2d00      	cmp	r5, #0
 800b53c:	d102      	bne.n	800b544 <_printf_i+0xf0>
 800b53e:	9e04      	ldr	r6, [sp, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00c      	beq.n	800b55e <_printf_i+0x10a>
 800b544:	9e04      	ldr	r6, [sp, #16]
 800b546:	0028      	movs	r0, r5
 800b548:	0039      	movs	r1, r7
 800b54a:	f7f4 fe7f 	bl	800024c <__aeabi_uidivmod>
 800b54e:	9b03      	ldr	r3, [sp, #12]
 800b550:	3e01      	subs	r6, #1
 800b552:	5c5b      	ldrb	r3, [r3, r1]
 800b554:	7033      	strb	r3, [r6, #0]
 800b556:	002b      	movs	r3, r5
 800b558:	0005      	movs	r5, r0
 800b55a:	429f      	cmp	r7, r3
 800b55c:	d9f3      	bls.n	800b546 <_printf_i+0xf2>
 800b55e:	2f08      	cmp	r7, #8
 800b560:	d109      	bne.n	800b576 <_printf_i+0x122>
 800b562:	6823      	ldr	r3, [r4, #0]
 800b564:	07db      	lsls	r3, r3, #31
 800b566:	d506      	bpl.n	800b576 <_printf_i+0x122>
 800b568:	6863      	ldr	r3, [r4, #4]
 800b56a:	6922      	ldr	r2, [r4, #16]
 800b56c:	4293      	cmp	r3, r2
 800b56e:	dc02      	bgt.n	800b576 <_printf_i+0x122>
 800b570:	2330      	movs	r3, #48	; 0x30
 800b572:	3e01      	subs	r6, #1
 800b574:	7033      	strb	r3, [r6, #0]
 800b576:	9b04      	ldr	r3, [sp, #16]
 800b578:	1b9b      	subs	r3, r3, r6
 800b57a:	6123      	str	r3, [r4, #16]
 800b57c:	9b07      	ldr	r3, [sp, #28]
 800b57e:	0021      	movs	r1, r4
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	9805      	ldr	r0, [sp, #20]
 800b584:	9b06      	ldr	r3, [sp, #24]
 800b586:	aa09      	add	r2, sp, #36	; 0x24
 800b588:	f7ff fef4 	bl	800b374 <_printf_common>
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	d14c      	bne.n	800b62a <_printf_i+0x1d6>
 800b590:	2001      	movs	r0, #1
 800b592:	4240      	negs	r0, r0
 800b594:	b00b      	add	sp, #44	; 0x2c
 800b596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b598:	3145      	adds	r1, #69	; 0x45
 800b59a:	700a      	strb	r2, [r1, #0]
 800b59c:	4a34      	ldr	r2, [pc, #208]	; (800b670 <_printf_i+0x21c>)
 800b59e:	9203      	str	r2, [sp, #12]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	6821      	ldr	r1, [r4, #0]
 800b5a4:	ca20      	ldmia	r2!, {r5}
 800b5a6:	601a      	str	r2, [r3, #0]
 800b5a8:	0608      	lsls	r0, r1, #24
 800b5aa:	d516      	bpl.n	800b5da <_printf_i+0x186>
 800b5ac:	07cb      	lsls	r3, r1, #31
 800b5ae:	d502      	bpl.n	800b5b6 <_printf_i+0x162>
 800b5b0:	2320      	movs	r3, #32
 800b5b2:	4319      	orrs	r1, r3
 800b5b4:	6021      	str	r1, [r4, #0]
 800b5b6:	2710      	movs	r7, #16
 800b5b8:	2d00      	cmp	r5, #0
 800b5ba:	d1b2      	bne.n	800b522 <_printf_i+0xce>
 800b5bc:	2320      	movs	r3, #32
 800b5be:	6822      	ldr	r2, [r4, #0]
 800b5c0:	439a      	bics	r2, r3
 800b5c2:	6022      	str	r2, [r4, #0]
 800b5c4:	e7ad      	b.n	800b522 <_printf_i+0xce>
 800b5c6:	2220      	movs	r2, #32
 800b5c8:	6809      	ldr	r1, [r1, #0]
 800b5ca:	430a      	orrs	r2, r1
 800b5cc:	6022      	str	r2, [r4, #0]
 800b5ce:	0022      	movs	r2, r4
 800b5d0:	2178      	movs	r1, #120	; 0x78
 800b5d2:	3245      	adds	r2, #69	; 0x45
 800b5d4:	7011      	strb	r1, [r2, #0]
 800b5d6:	4a27      	ldr	r2, [pc, #156]	; (800b674 <_printf_i+0x220>)
 800b5d8:	e7e1      	b.n	800b59e <_printf_i+0x14a>
 800b5da:	0648      	lsls	r0, r1, #25
 800b5dc:	d5e6      	bpl.n	800b5ac <_printf_i+0x158>
 800b5de:	b2ad      	uxth	r5, r5
 800b5e0:	e7e4      	b.n	800b5ac <_printf_i+0x158>
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	680d      	ldr	r5, [r1, #0]
 800b5e6:	1d10      	adds	r0, r2, #4
 800b5e8:	6949      	ldr	r1, [r1, #20]
 800b5ea:	6018      	str	r0, [r3, #0]
 800b5ec:	6813      	ldr	r3, [r2, #0]
 800b5ee:	062e      	lsls	r6, r5, #24
 800b5f0:	d501      	bpl.n	800b5f6 <_printf_i+0x1a2>
 800b5f2:	6019      	str	r1, [r3, #0]
 800b5f4:	e002      	b.n	800b5fc <_printf_i+0x1a8>
 800b5f6:	066d      	lsls	r5, r5, #25
 800b5f8:	d5fb      	bpl.n	800b5f2 <_printf_i+0x19e>
 800b5fa:	8019      	strh	r1, [r3, #0]
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	9e04      	ldr	r6, [sp, #16]
 800b600:	6123      	str	r3, [r4, #16]
 800b602:	e7bb      	b.n	800b57c <_printf_i+0x128>
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	1d11      	adds	r1, r2, #4
 800b608:	6019      	str	r1, [r3, #0]
 800b60a:	6816      	ldr	r6, [r2, #0]
 800b60c:	2100      	movs	r1, #0
 800b60e:	0030      	movs	r0, r6
 800b610:	6862      	ldr	r2, [r4, #4]
 800b612:	f001 fa9b 	bl	800cb4c <memchr>
 800b616:	2800      	cmp	r0, #0
 800b618:	d001      	beq.n	800b61e <_printf_i+0x1ca>
 800b61a:	1b80      	subs	r0, r0, r6
 800b61c:	6060      	str	r0, [r4, #4]
 800b61e:	6863      	ldr	r3, [r4, #4]
 800b620:	6123      	str	r3, [r4, #16]
 800b622:	2300      	movs	r3, #0
 800b624:	9a04      	ldr	r2, [sp, #16]
 800b626:	7013      	strb	r3, [r2, #0]
 800b628:	e7a8      	b.n	800b57c <_printf_i+0x128>
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	0032      	movs	r2, r6
 800b62e:	9906      	ldr	r1, [sp, #24]
 800b630:	9805      	ldr	r0, [sp, #20]
 800b632:	9d07      	ldr	r5, [sp, #28]
 800b634:	47a8      	blx	r5
 800b636:	1c43      	adds	r3, r0, #1
 800b638:	d0aa      	beq.n	800b590 <_printf_i+0x13c>
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	079b      	lsls	r3, r3, #30
 800b63e:	d415      	bmi.n	800b66c <_printf_i+0x218>
 800b640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b642:	68e0      	ldr	r0, [r4, #12]
 800b644:	4298      	cmp	r0, r3
 800b646:	daa5      	bge.n	800b594 <_printf_i+0x140>
 800b648:	0018      	movs	r0, r3
 800b64a:	e7a3      	b.n	800b594 <_printf_i+0x140>
 800b64c:	0022      	movs	r2, r4
 800b64e:	2301      	movs	r3, #1
 800b650:	9906      	ldr	r1, [sp, #24]
 800b652:	9805      	ldr	r0, [sp, #20]
 800b654:	9e07      	ldr	r6, [sp, #28]
 800b656:	3219      	adds	r2, #25
 800b658:	47b0      	blx	r6
 800b65a:	1c43      	adds	r3, r0, #1
 800b65c:	d098      	beq.n	800b590 <_printf_i+0x13c>
 800b65e:	3501      	adds	r5, #1
 800b660:	68e3      	ldr	r3, [r4, #12]
 800b662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b664:	1a9b      	subs	r3, r3, r2
 800b666:	42ab      	cmp	r3, r5
 800b668:	dcf0      	bgt.n	800b64c <_printf_i+0x1f8>
 800b66a:	e7e9      	b.n	800b640 <_printf_i+0x1ec>
 800b66c:	2500      	movs	r5, #0
 800b66e:	e7f7      	b.n	800b660 <_printf_i+0x20c>
 800b670:	0800e7b6 	.word	0x0800e7b6
 800b674:	0800e7c7 	.word	0x0800e7c7

0800b678 <iprintf>:
 800b678:	b40f      	push	{r0, r1, r2, r3}
 800b67a:	4b0b      	ldr	r3, [pc, #44]	; (800b6a8 <iprintf+0x30>)
 800b67c:	b513      	push	{r0, r1, r4, lr}
 800b67e:	681c      	ldr	r4, [r3, #0]
 800b680:	2c00      	cmp	r4, #0
 800b682:	d005      	beq.n	800b690 <iprintf+0x18>
 800b684:	69a3      	ldr	r3, [r4, #24]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d102      	bne.n	800b690 <iprintf+0x18>
 800b68a:	0020      	movs	r0, r4
 800b68c:	f001 f940 	bl	800c910 <__sinit>
 800b690:	ab05      	add	r3, sp, #20
 800b692:	0020      	movs	r0, r4
 800b694:	9a04      	ldr	r2, [sp, #16]
 800b696:	68a1      	ldr	r1, [r4, #8]
 800b698:	9301      	str	r3, [sp, #4]
 800b69a:	f001 ff35 	bl	800d508 <_vfiprintf_r>
 800b69e:	bc16      	pop	{r1, r2, r4}
 800b6a0:	bc08      	pop	{r3}
 800b6a2:	b004      	add	sp, #16
 800b6a4:	4718      	bx	r3
 800b6a6:	46c0      	nop			; (mov r8, r8)
 800b6a8:	20000030 	.word	0x20000030

0800b6ac <putchar>:
 800b6ac:	4b08      	ldr	r3, [pc, #32]	; (800b6d0 <putchar+0x24>)
 800b6ae:	b570      	push	{r4, r5, r6, lr}
 800b6b0:	681c      	ldr	r4, [r3, #0]
 800b6b2:	0005      	movs	r5, r0
 800b6b4:	2c00      	cmp	r4, #0
 800b6b6:	d005      	beq.n	800b6c4 <putchar+0x18>
 800b6b8:	69a3      	ldr	r3, [r4, #24]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d102      	bne.n	800b6c4 <putchar+0x18>
 800b6be:	0020      	movs	r0, r4
 800b6c0:	f001 f926 	bl	800c910 <__sinit>
 800b6c4:	0029      	movs	r1, r5
 800b6c6:	0020      	movs	r0, r4
 800b6c8:	68a2      	ldr	r2, [r4, #8]
 800b6ca:	f002 f857 	bl	800d77c <_putc_r>
 800b6ce:	bd70      	pop	{r4, r5, r6, pc}
 800b6d0:	20000030 	.word	0x20000030

0800b6d4 <_puts_r>:
 800b6d4:	b570      	push	{r4, r5, r6, lr}
 800b6d6:	0005      	movs	r5, r0
 800b6d8:	000e      	movs	r6, r1
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d004      	beq.n	800b6e8 <_puts_r+0x14>
 800b6de:	6983      	ldr	r3, [r0, #24]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d101      	bne.n	800b6e8 <_puts_r+0x14>
 800b6e4:	f001 f914 	bl	800c910 <__sinit>
 800b6e8:	69ab      	ldr	r3, [r5, #24]
 800b6ea:	68ac      	ldr	r4, [r5, #8]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d102      	bne.n	800b6f6 <_puts_r+0x22>
 800b6f0:	0028      	movs	r0, r5
 800b6f2:	f001 f90d 	bl	800c910 <__sinit>
 800b6f6:	4b2d      	ldr	r3, [pc, #180]	; (800b7ac <_puts_r+0xd8>)
 800b6f8:	429c      	cmp	r4, r3
 800b6fa:	d122      	bne.n	800b742 <_puts_r+0x6e>
 800b6fc:	686c      	ldr	r4, [r5, #4]
 800b6fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b700:	07db      	lsls	r3, r3, #31
 800b702:	d405      	bmi.n	800b710 <_puts_r+0x3c>
 800b704:	89a3      	ldrh	r3, [r4, #12]
 800b706:	059b      	lsls	r3, r3, #22
 800b708:	d402      	bmi.n	800b710 <_puts_r+0x3c>
 800b70a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b70c:	f001 f9a5 	bl	800ca5a <__retarget_lock_acquire_recursive>
 800b710:	89a3      	ldrh	r3, [r4, #12]
 800b712:	071b      	lsls	r3, r3, #28
 800b714:	d502      	bpl.n	800b71c <_puts_r+0x48>
 800b716:	6923      	ldr	r3, [r4, #16]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d129      	bne.n	800b770 <_puts_r+0x9c>
 800b71c:	0021      	movs	r1, r4
 800b71e:	0028      	movs	r0, r5
 800b720:	f000 f8aa 	bl	800b878 <__swsetup_r>
 800b724:	2800      	cmp	r0, #0
 800b726:	d023      	beq.n	800b770 <_puts_r+0x9c>
 800b728:	2501      	movs	r5, #1
 800b72a:	426d      	negs	r5, r5
 800b72c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b72e:	07db      	lsls	r3, r3, #31
 800b730:	d405      	bmi.n	800b73e <_puts_r+0x6a>
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	059b      	lsls	r3, r3, #22
 800b736:	d402      	bmi.n	800b73e <_puts_r+0x6a>
 800b738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b73a:	f001 f98f 	bl	800ca5c <__retarget_lock_release_recursive>
 800b73e:	0028      	movs	r0, r5
 800b740:	bd70      	pop	{r4, r5, r6, pc}
 800b742:	4b1b      	ldr	r3, [pc, #108]	; (800b7b0 <_puts_r+0xdc>)
 800b744:	429c      	cmp	r4, r3
 800b746:	d101      	bne.n	800b74c <_puts_r+0x78>
 800b748:	68ac      	ldr	r4, [r5, #8]
 800b74a:	e7d8      	b.n	800b6fe <_puts_r+0x2a>
 800b74c:	4b19      	ldr	r3, [pc, #100]	; (800b7b4 <_puts_r+0xe0>)
 800b74e:	429c      	cmp	r4, r3
 800b750:	d1d5      	bne.n	800b6fe <_puts_r+0x2a>
 800b752:	68ec      	ldr	r4, [r5, #12]
 800b754:	e7d3      	b.n	800b6fe <_puts_r+0x2a>
 800b756:	3601      	adds	r6, #1
 800b758:	60a3      	str	r3, [r4, #8]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	da04      	bge.n	800b768 <_puts_r+0x94>
 800b75e:	69a2      	ldr	r2, [r4, #24]
 800b760:	429a      	cmp	r2, r3
 800b762:	dc16      	bgt.n	800b792 <_puts_r+0xbe>
 800b764:	290a      	cmp	r1, #10
 800b766:	d014      	beq.n	800b792 <_puts_r+0xbe>
 800b768:	6823      	ldr	r3, [r4, #0]
 800b76a:	1c5a      	adds	r2, r3, #1
 800b76c:	6022      	str	r2, [r4, #0]
 800b76e:	7019      	strb	r1, [r3, #0]
 800b770:	68a3      	ldr	r3, [r4, #8]
 800b772:	7831      	ldrb	r1, [r6, #0]
 800b774:	3b01      	subs	r3, #1
 800b776:	2900      	cmp	r1, #0
 800b778:	d1ed      	bne.n	800b756 <_puts_r+0x82>
 800b77a:	60a3      	str	r3, [r4, #8]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	da0f      	bge.n	800b7a0 <_puts_r+0xcc>
 800b780:	0028      	movs	r0, r5
 800b782:	0022      	movs	r2, r4
 800b784:	310a      	adds	r1, #10
 800b786:	f000 f821 	bl	800b7cc <__swbuf_r>
 800b78a:	250a      	movs	r5, #10
 800b78c:	1c43      	adds	r3, r0, #1
 800b78e:	d1cd      	bne.n	800b72c <_puts_r+0x58>
 800b790:	e7ca      	b.n	800b728 <_puts_r+0x54>
 800b792:	0022      	movs	r2, r4
 800b794:	0028      	movs	r0, r5
 800b796:	f000 f819 	bl	800b7cc <__swbuf_r>
 800b79a:	1c43      	adds	r3, r0, #1
 800b79c:	d1e8      	bne.n	800b770 <_puts_r+0x9c>
 800b79e:	e7c3      	b.n	800b728 <_puts_r+0x54>
 800b7a0:	250a      	movs	r5, #10
 800b7a2:	6823      	ldr	r3, [r4, #0]
 800b7a4:	1c5a      	adds	r2, r3, #1
 800b7a6:	6022      	str	r2, [r4, #0]
 800b7a8:	701d      	strb	r5, [r3, #0]
 800b7aa:	e7bf      	b.n	800b72c <_puts_r+0x58>
 800b7ac:	0800e888 	.word	0x0800e888
 800b7b0:	0800e8a8 	.word	0x0800e8a8
 800b7b4:	0800e868 	.word	0x0800e868

0800b7b8 <puts>:
 800b7b8:	b510      	push	{r4, lr}
 800b7ba:	4b03      	ldr	r3, [pc, #12]	; (800b7c8 <puts+0x10>)
 800b7bc:	0001      	movs	r1, r0
 800b7be:	6818      	ldr	r0, [r3, #0]
 800b7c0:	f7ff ff88 	bl	800b6d4 <_puts_r>
 800b7c4:	bd10      	pop	{r4, pc}
 800b7c6:	46c0      	nop			; (mov r8, r8)
 800b7c8:	20000030 	.word	0x20000030

0800b7cc <__swbuf_r>:
 800b7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ce:	0005      	movs	r5, r0
 800b7d0:	000e      	movs	r6, r1
 800b7d2:	0014      	movs	r4, r2
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d004      	beq.n	800b7e2 <__swbuf_r+0x16>
 800b7d8:	6983      	ldr	r3, [r0, #24]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d101      	bne.n	800b7e2 <__swbuf_r+0x16>
 800b7de:	f001 f897 	bl	800c910 <__sinit>
 800b7e2:	4b22      	ldr	r3, [pc, #136]	; (800b86c <__swbuf_r+0xa0>)
 800b7e4:	429c      	cmp	r4, r3
 800b7e6:	d12e      	bne.n	800b846 <__swbuf_r+0x7a>
 800b7e8:	686c      	ldr	r4, [r5, #4]
 800b7ea:	69a3      	ldr	r3, [r4, #24]
 800b7ec:	60a3      	str	r3, [r4, #8]
 800b7ee:	89a3      	ldrh	r3, [r4, #12]
 800b7f0:	071b      	lsls	r3, r3, #28
 800b7f2:	d532      	bpl.n	800b85a <__swbuf_r+0x8e>
 800b7f4:	6923      	ldr	r3, [r4, #16]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d02f      	beq.n	800b85a <__swbuf_r+0x8e>
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	6922      	ldr	r2, [r4, #16]
 800b7fe:	b2f7      	uxtb	r7, r6
 800b800:	1a98      	subs	r0, r3, r2
 800b802:	6963      	ldr	r3, [r4, #20]
 800b804:	b2f6      	uxtb	r6, r6
 800b806:	4283      	cmp	r3, r0
 800b808:	dc05      	bgt.n	800b816 <__swbuf_r+0x4a>
 800b80a:	0021      	movs	r1, r4
 800b80c:	0028      	movs	r0, r5
 800b80e:	f000 ffdd 	bl	800c7cc <_fflush_r>
 800b812:	2800      	cmp	r0, #0
 800b814:	d127      	bne.n	800b866 <__swbuf_r+0x9a>
 800b816:	68a3      	ldr	r3, [r4, #8]
 800b818:	3001      	adds	r0, #1
 800b81a:	3b01      	subs	r3, #1
 800b81c:	60a3      	str	r3, [r4, #8]
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	1c5a      	adds	r2, r3, #1
 800b822:	6022      	str	r2, [r4, #0]
 800b824:	701f      	strb	r7, [r3, #0]
 800b826:	6963      	ldr	r3, [r4, #20]
 800b828:	4283      	cmp	r3, r0
 800b82a:	d004      	beq.n	800b836 <__swbuf_r+0x6a>
 800b82c:	89a3      	ldrh	r3, [r4, #12]
 800b82e:	07db      	lsls	r3, r3, #31
 800b830:	d507      	bpl.n	800b842 <__swbuf_r+0x76>
 800b832:	2e0a      	cmp	r6, #10
 800b834:	d105      	bne.n	800b842 <__swbuf_r+0x76>
 800b836:	0021      	movs	r1, r4
 800b838:	0028      	movs	r0, r5
 800b83a:	f000 ffc7 	bl	800c7cc <_fflush_r>
 800b83e:	2800      	cmp	r0, #0
 800b840:	d111      	bne.n	800b866 <__swbuf_r+0x9a>
 800b842:	0030      	movs	r0, r6
 800b844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b846:	4b0a      	ldr	r3, [pc, #40]	; (800b870 <__swbuf_r+0xa4>)
 800b848:	429c      	cmp	r4, r3
 800b84a:	d101      	bne.n	800b850 <__swbuf_r+0x84>
 800b84c:	68ac      	ldr	r4, [r5, #8]
 800b84e:	e7cc      	b.n	800b7ea <__swbuf_r+0x1e>
 800b850:	4b08      	ldr	r3, [pc, #32]	; (800b874 <__swbuf_r+0xa8>)
 800b852:	429c      	cmp	r4, r3
 800b854:	d1c9      	bne.n	800b7ea <__swbuf_r+0x1e>
 800b856:	68ec      	ldr	r4, [r5, #12]
 800b858:	e7c7      	b.n	800b7ea <__swbuf_r+0x1e>
 800b85a:	0021      	movs	r1, r4
 800b85c:	0028      	movs	r0, r5
 800b85e:	f000 f80b 	bl	800b878 <__swsetup_r>
 800b862:	2800      	cmp	r0, #0
 800b864:	d0c9      	beq.n	800b7fa <__swbuf_r+0x2e>
 800b866:	2601      	movs	r6, #1
 800b868:	4276      	negs	r6, r6
 800b86a:	e7ea      	b.n	800b842 <__swbuf_r+0x76>
 800b86c:	0800e888 	.word	0x0800e888
 800b870:	0800e8a8 	.word	0x0800e8a8
 800b874:	0800e868 	.word	0x0800e868

0800b878 <__swsetup_r>:
 800b878:	4b37      	ldr	r3, [pc, #220]	; (800b958 <__swsetup_r+0xe0>)
 800b87a:	b570      	push	{r4, r5, r6, lr}
 800b87c:	681d      	ldr	r5, [r3, #0]
 800b87e:	0006      	movs	r6, r0
 800b880:	000c      	movs	r4, r1
 800b882:	2d00      	cmp	r5, #0
 800b884:	d005      	beq.n	800b892 <__swsetup_r+0x1a>
 800b886:	69ab      	ldr	r3, [r5, #24]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d102      	bne.n	800b892 <__swsetup_r+0x1a>
 800b88c:	0028      	movs	r0, r5
 800b88e:	f001 f83f 	bl	800c910 <__sinit>
 800b892:	4b32      	ldr	r3, [pc, #200]	; (800b95c <__swsetup_r+0xe4>)
 800b894:	429c      	cmp	r4, r3
 800b896:	d10f      	bne.n	800b8b8 <__swsetup_r+0x40>
 800b898:	686c      	ldr	r4, [r5, #4]
 800b89a:	230c      	movs	r3, #12
 800b89c:	5ee2      	ldrsh	r2, [r4, r3]
 800b89e:	b293      	uxth	r3, r2
 800b8a0:	0711      	lsls	r1, r2, #28
 800b8a2:	d42d      	bmi.n	800b900 <__swsetup_r+0x88>
 800b8a4:	06d9      	lsls	r1, r3, #27
 800b8a6:	d411      	bmi.n	800b8cc <__swsetup_r+0x54>
 800b8a8:	2309      	movs	r3, #9
 800b8aa:	2001      	movs	r0, #1
 800b8ac:	6033      	str	r3, [r6, #0]
 800b8ae:	3337      	adds	r3, #55	; 0x37
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	81a3      	strh	r3, [r4, #12]
 800b8b4:	4240      	negs	r0, r0
 800b8b6:	bd70      	pop	{r4, r5, r6, pc}
 800b8b8:	4b29      	ldr	r3, [pc, #164]	; (800b960 <__swsetup_r+0xe8>)
 800b8ba:	429c      	cmp	r4, r3
 800b8bc:	d101      	bne.n	800b8c2 <__swsetup_r+0x4a>
 800b8be:	68ac      	ldr	r4, [r5, #8]
 800b8c0:	e7eb      	b.n	800b89a <__swsetup_r+0x22>
 800b8c2:	4b28      	ldr	r3, [pc, #160]	; (800b964 <__swsetup_r+0xec>)
 800b8c4:	429c      	cmp	r4, r3
 800b8c6:	d1e8      	bne.n	800b89a <__swsetup_r+0x22>
 800b8c8:	68ec      	ldr	r4, [r5, #12]
 800b8ca:	e7e6      	b.n	800b89a <__swsetup_r+0x22>
 800b8cc:	075b      	lsls	r3, r3, #29
 800b8ce:	d513      	bpl.n	800b8f8 <__swsetup_r+0x80>
 800b8d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8d2:	2900      	cmp	r1, #0
 800b8d4:	d008      	beq.n	800b8e8 <__swsetup_r+0x70>
 800b8d6:	0023      	movs	r3, r4
 800b8d8:	3344      	adds	r3, #68	; 0x44
 800b8da:	4299      	cmp	r1, r3
 800b8dc:	d002      	beq.n	800b8e4 <__swsetup_r+0x6c>
 800b8de:	0030      	movs	r0, r6
 800b8e0:	f001 fd08 	bl	800d2f4 <_free_r>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	6363      	str	r3, [r4, #52]	; 0x34
 800b8e8:	2224      	movs	r2, #36	; 0x24
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	4393      	bics	r3, r2
 800b8ee:	81a3      	strh	r3, [r4, #12]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	6063      	str	r3, [r4, #4]
 800b8f4:	6923      	ldr	r3, [r4, #16]
 800b8f6:	6023      	str	r3, [r4, #0]
 800b8f8:	2308      	movs	r3, #8
 800b8fa:	89a2      	ldrh	r2, [r4, #12]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	81a3      	strh	r3, [r4, #12]
 800b900:	6923      	ldr	r3, [r4, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10b      	bne.n	800b91e <__swsetup_r+0xa6>
 800b906:	21a0      	movs	r1, #160	; 0xa0
 800b908:	2280      	movs	r2, #128	; 0x80
 800b90a:	89a3      	ldrh	r3, [r4, #12]
 800b90c:	0089      	lsls	r1, r1, #2
 800b90e:	0092      	lsls	r2, r2, #2
 800b910:	400b      	ands	r3, r1
 800b912:	4293      	cmp	r3, r2
 800b914:	d003      	beq.n	800b91e <__swsetup_r+0xa6>
 800b916:	0021      	movs	r1, r4
 800b918:	0030      	movs	r0, r6
 800b91a:	f001 f8c9 	bl	800cab0 <__smakebuf_r>
 800b91e:	220c      	movs	r2, #12
 800b920:	5ea3      	ldrsh	r3, [r4, r2]
 800b922:	2001      	movs	r0, #1
 800b924:	001a      	movs	r2, r3
 800b926:	b299      	uxth	r1, r3
 800b928:	4002      	ands	r2, r0
 800b92a:	4203      	tst	r3, r0
 800b92c:	d00f      	beq.n	800b94e <__swsetup_r+0xd6>
 800b92e:	2200      	movs	r2, #0
 800b930:	60a2      	str	r2, [r4, #8]
 800b932:	6962      	ldr	r2, [r4, #20]
 800b934:	4252      	negs	r2, r2
 800b936:	61a2      	str	r2, [r4, #24]
 800b938:	2000      	movs	r0, #0
 800b93a:	6922      	ldr	r2, [r4, #16]
 800b93c:	4282      	cmp	r2, r0
 800b93e:	d1ba      	bne.n	800b8b6 <__swsetup_r+0x3e>
 800b940:	060a      	lsls	r2, r1, #24
 800b942:	d5b8      	bpl.n	800b8b6 <__swsetup_r+0x3e>
 800b944:	2240      	movs	r2, #64	; 0x40
 800b946:	4313      	orrs	r3, r2
 800b948:	81a3      	strh	r3, [r4, #12]
 800b94a:	3801      	subs	r0, #1
 800b94c:	e7b3      	b.n	800b8b6 <__swsetup_r+0x3e>
 800b94e:	0788      	lsls	r0, r1, #30
 800b950:	d400      	bmi.n	800b954 <__swsetup_r+0xdc>
 800b952:	6962      	ldr	r2, [r4, #20]
 800b954:	60a2      	str	r2, [r4, #8]
 800b956:	e7ef      	b.n	800b938 <__swsetup_r+0xc0>
 800b958:	20000030 	.word	0x20000030
 800b95c:	0800e888 	.word	0x0800e888
 800b960:	0800e8a8 	.word	0x0800e8a8
 800b964:	0800e868 	.word	0x0800e868

0800b968 <quorem>:
 800b968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b96a:	0006      	movs	r6, r0
 800b96c:	690b      	ldr	r3, [r1, #16]
 800b96e:	6932      	ldr	r2, [r6, #16]
 800b970:	b087      	sub	sp, #28
 800b972:	2000      	movs	r0, #0
 800b974:	9103      	str	r1, [sp, #12]
 800b976:	429a      	cmp	r2, r3
 800b978:	db65      	blt.n	800ba46 <quorem+0xde>
 800b97a:	3b01      	subs	r3, #1
 800b97c:	009c      	lsls	r4, r3, #2
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	000b      	movs	r3, r1
 800b982:	3314      	adds	r3, #20
 800b984:	9305      	str	r3, [sp, #20]
 800b986:	191b      	adds	r3, r3, r4
 800b988:	9304      	str	r3, [sp, #16]
 800b98a:	0033      	movs	r3, r6
 800b98c:	3314      	adds	r3, #20
 800b98e:	9302      	str	r3, [sp, #8]
 800b990:	191c      	adds	r4, r3, r4
 800b992:	9b04      	ldr	r3, [sp, #16]
 800b994:	6827      	ldr	r7, [r4, #0]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	0038      	movs	r0, r7
 800b99a:	1c5d      	adds	r5, r3, #1
 800b99c:	0029      	movs	r1, r5
 800b99e:	9301      	str	r3, [sp, #4]
 800b9a0:	f7f4 fbce 	bl	8000140 <__udivsi3>
 800b9a4:	9001      	str	r0, [sp, #4]
 800b9a6:	42af      	cmp	r7, r5
 800b9a8:	d324      	bcc.n	800b9f4 <quorem+0x8c>
 800b9aa:	2500      	movs	r5, #0
 800b9ac:	46ac      	mov	ip, r5
 800b9ae:	9802      	ldr	r0, [sp, #8]
 800b9b0:	9f05      	ldr	r7, [sp, #20]
 800b9b2:	cf08      	ldmia	r7!, {r3}
 800b9b4:	9a01      	ldr	r2, [sp, #4]
 800b9b6:	b299      	uxth	r1, r3
 800b9b8:	4351      	muls	r1, r2
 800b9ba:	0c1b      	lsrs	r3, r3, #16
 800b9bc:	4353      	muls	r3, r2
 800b9be:	1949      	adds	r1, r1, r5
 800b9c0:	0c0a      	lsrs	r2, r1, #16
 800b9c2:	189b      	adds	r3, r3, r2
 800b9c4:	6802      	ldr	r2, [r0, #0]
 800b9c6:	b289      	uxth	r1, r1
 800b9c8:	b292      	uxth	r2, r2
 800b9ca:	4462      	add	r2, ip
 800b9cc:	1a52      	subs	r2, r2, r1
 800b9ce:	6801      	ldr	r1, [r0, #0]
 800b9d0:	0c1d      	lsrs	r5, r3, #16
 800b9d2:	0c09      	lsrs	r1, r1, #16
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	1acb      	subs	r3, r1, r3
 800b9d8:	1411      	asrs	r1, r2, #16
 800b9da:	185b      	adds	r3, r3, r1
 800b9dc:	1419      	asrs	r1, r3, #16
 800b9de:	b292      	uxth	r2, r2
 800b9e0:	041b      	lsls	r3, r3, #16
 800b9e2:	431a      	orrs	r2, r3
 800b9e4:	9b04      	ldr	r3, [sp, #16]
 800b9e6:	468c      	mov	ip, r1
 800b9e8:	c004      	stmia	r0!, {r2}
 800b9ea:	42bb      	cmp	r3, r7
 800b9ec:	d2e1      	bcs.n	800b9b2 <quorem+0x4a>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d030      	beq.n	800ba56 <quorem+0xee>
 800b9f4:	0030      	movs	r0, r6
 800b9f6:	9903      	ldr	r1, [sp, #12]
 800b9f8:	f001 fb38 	bl	800d06c <__mcmp>
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	db21      	blt.n	800ba44 <quorem+0xdc>
 800ba00:	0030      	movs	r0, r6
 800ba02:	2400      	movs	r4, #0
 800ba04:	9b01      	ldr	r3, [sp, #4]
 800ba06:	9903      	ldr	r1, [sp, #12]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	9301      	str	r3, [sp, #4]
 800ba0c:	3014      	adds	r0, #20
 800ba0e:	3114      	adds	r1, #20
 800ba10:	6803      	ldr	r3, [r0, #0]
 800ba12:	c920      	ldmia	r1!, {r5}
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	1914      	adds	r4, r2, r4
 800ba18:	b2aa      	uxth	r2, r5
 800ba1a:	1aa2      	subs	r2, r4, r2
 800ba1c:	0c1b      	lsrs	r3, r3, #16
 800ba1e:	0c2d      	lsrs	r5, r5, #16
 800ba20:	1414      	asrs	r4, r2, #16
 800ba22:	1b5b      	subs	r3, r3, r5
 800ba24:	191b      	adds	r3, r3, r4
 800ba26:	141c      	asrs	r4, r3, #16
 800ba28:	b292      	uxth	r2, r2
 800ba2a:	041b      	lsls	r3, r3, #16
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	c008      	stmia	r0!, {r3}
 800ba30:	9b04      	ldr	r3, [sp, #16]
 800ba32:	428b      	cmp	r3, r1
 800ba34:	d2ec      	bcs.n	800ba10 <quorem+0xa8>
 800ba36:	9b00      	ldr	r3, [sp, #0]
 800ba38:	9a02      	ldr	r2, [sp, #8]
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	18d3      	adds	r3, r2, r3
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	2a00      	cmp	r2, #0
 800ba42:	d015      	beq.n	800ba70 <quorem+0x108>
 800ba44:	9801      	ldr	r0, [sp, #4]
 800ba46:	b007      	add	sp, #28
 800ba48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d106      	bne.n	800ba5e <quorem+0xf6>
 800ba50:	9b00      	ldr	r3, [sp, #0]
 800ba52:	3b01      	subs	r3, #1
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	9b02      	ldr	r3, [sp, #8]
 800ba58:	3c04      	subs	r4, #4
 800ba5a:	42a3      	cmp	r3, r4
 800ba5c:	d3f5      	bcc.n	800ba4a <quorem+0xe2>
 800ba5e:	9b00      	ldr	r3, [sp, #0]
 800ba60:	6133      	str	r3, [r6, #16]
 800ba62:	e7c7      	b.n	800b9f4 <quorem+0x8c>
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	2a00      	cmp	r2, #0
 800ba68:	d106      	bne.n	800ba78 <quorem+0x110>
 800ba6a:	9a00      	ldr	r2, [sp, #0]
 800ba6c:	3a01      	subs	r2, #1
 800ba6e:	9200      	str	r2, [sp, #0]
 800ba70:	9a02      	ldr	r2, [sp, #8]
 800ba72:	3b04      	subs	r3, #4
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d3f5      	bcc.n	800ba64 <quorem+0xfc>
 800ba78:	9b00      	ldr	r3, [sp, #0]
 800ba7a:	6133      	str	r3, [r6, #16]
 800ba7c:	e7e2      	b.n	800ba44 <quorem+0xdc>
	...

0800ba80 <_dtoa_r>:
 800ba80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba82:	b09d      	sub	sp, #116	; 0x74
 800ba84:	9202      	str	r2, [sp, #8]
 800ba86:	9303      	str	r3, [sp, #12]
 800ba88:	9b02      	ldr	r3, [sp, #8]
 800ba8a:	9c03      	ldr	r4, [sp, #12]
 800ba8c:	9308      	str	r3, [sp, #32]
 800ba8e:	9409      	str	r4, [sp, #36]	; 0x24
 800ba90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ba92:	0007      	movs	r7, r0
 800ba94:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800ba96:	2c00      	cmp	r4, #0
 800ba98:	d10e      	bne.n	800bab8 <_dtoa_r+0x38>
 800ba9a:	2010      	movs	r0, #16
 800ba9c:	f001 f84c 	bl	800cb38 <malloc>
 800baa0:	1e02      	subs	r2, r0, #0
 800baa2:	6278      	str	r0, [r7, #36]	; 0x24
 800baa4:	d104      	bne.n	800bab0 <_dtoa_r+0x30>
 800baa6:	21ea      	movs	r1, #234	; 0xea
 800baa8:	4bc7      	ldr	r3, [pc, #796]	; (800bdc8 <_dtoa_r+0x348>)
 800baaa:	48c8      	ldr	r0, [pc, #800]	; (800bdcc <_dtoa_r+0x34c>)
 800baac:	f001 ff22 	bl	800d8f4 <__assert_func>
 800bab0:	6044      	str	r4, [r0, #4]
 800bab2:	6084      	str	r4, [r0, #8]
 800bab4:	6004      	str	r4, [r0, #0]
 800bab6:	60c4      	str	r4, [r0, #12]
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	6819      	ldr	r1, [r3, #0]
 800babc:	2900      	cmp	r1, #0
 800babe:	d00a      	beq.n	800bad6 <_dtoa_r+0x56>
 800bac0:	685a      	ldr	r2, [r3, #4]
 800bac2:	2301      	movs	r3, #1
 800bac4:	4093      	lsls	r3, r2
 800bac6:	604a      	str	r2, [r1, #4]
 800bac8:	608b      	str	r3, [r1, #8]
 800baca:	0038      	movs	r0, r7
 800bacc:	f001 f88e 	bl	800cbec <_Bfree>
 800bad0:	2200      	movs	r2, #0
 800bad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad4:	601a      	str	r2, [r3, #0]
 800bad6:	9b03      	ldr	r3, [sp, #12]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	da20      	bge.n	800bb1e <_dtoa_r+0x9e>
 800badc:	2301      	movs	r3, #1
 800bade:	602b      	str	r3, [r5, #0]
 800bae0:	9b03      	ldr	r3, [sp, #12]
 800bae2:	005b      	lsls	r3, r3, #1
 800bae4:	085b      	lsrs	r3, r3, #1
 800bae6:	9309      	str	r3, [sp, #36]	; 0x24
 800bae8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800baea:	4bb9      	ldr	r3, [pc, #740]	; (800bdd0 <_dtoa_r+0x350>)
 800baec:	4ab8      	ldr	r2, [pc, #736]	; (800bdd0 <_dtoa_r+0x350>)
 800baee:	402b      	ands	r3, r5
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d117      	bne.n	800bb24 <_dtoa_r+0xa4>
 800baf4:	4bb7      	ldr	r3, [pc, #732]	; (800bdd4 <_dtoa_r+0x354>)
 800baf6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800baf8:	0328      	lsls	r0, r5, #12
 800bafa:	6013      	str	r3, [r2, #0]
 800bafc:	9b02      	ldr	r3, [sp, #8]
 800bafe:	0b00      	lsrs	r0, r0, #12
 800bb00:	4318      	orrs	r0, r3
 800bb02:	d101      	bne.n	800bb08 <_dtoa_r+0x88>
 800bb04:	f000 fdbf 	bl	800c686 <_dtoa_r+0xc06>
 800bb08:	48b3      	ldr	r0, [pc, #716]	; (800bdd8 <_dtoa_r+0x358>)
 800bb0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bb0c:	9006      	str	r0, [sp, #24]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d002      	beq.n	800bb18 <_dtoa_r+0x98>
 800bb12:	4bb2      	ldr	r3, [pc, #712]	; (800bddc <_dtoa_r+0x35c>)
 800bb14:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bb16:	6013      	str	r3, [r2, #0]
 800bb18:	9806      	ldr	r0, [sp, #24]
 800bb1a:	b01d      	add	sp, #116	; 0x74
 800bb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb1e:	2300      	movs	r3, #0
 800bb20:	602b      	str	r3, [r5, #0]
 800bb22:	e7e1      	b.n	800bae8 <_dtoa_r+0x68>
 800bb24:	9b08      	ldr	r3, [sp, #32]
 800bb26:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bb28:	9312      	str	r3, [sp, #72]	; 0x48
 800bb2a:	9413      	str	r4, [sp, #76]	; 0x4c
 800bb2c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bb2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bb30:	2200      	movs	r2, #0
 800bb32:	2300      	movs	r3, #0
 800bb34:	f7f4 fc8a 	bl	800044c <__aeabi_dcmpeq>
 800bb38:	1e04      	subs	r4, r0, #0
 800bb3a:	d009      	beq.n	800bb50 <_dtoa_r+0xd0>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bb40:	6013      	str	r3, [r2, #0]
 800bb42:	4ba7      	ldr	r3, [pc, #668]	; (800bde0 <_dtoa_r+0x360>)
 800bb44:	9306      	str	r3, [sp, #24]
 800bb46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d0e5      	beq.n	800bb18 <_dtoa_r+0x98>
 800bb4c:	4ba5      	ldr	r3, [pc, #660]	; (800bde4 <_dtoa_r+0x364>)
 800bb4e:	e7e1      	b.n	800bb14 <_dtoa_r+0x94>
 800bb50:	ab1a      	add	r3, sp, #104	; 0x68
 800bb52:	9301      	str	r3, [sp, #4]
 800bb54:	ab1b      	add	r3, sp, #108	; 0x6c
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	0038      	movs	r0, r7
 800bb5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bb5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb5e:	f001 fb39 	bl	800d1d4 <__d2b>
 800bb62:	006e      	lsls	r6, r5, #1
 800bb64:	9005      	str	r0, [sp, #20]
 800bb66:	0d76      	lsrs	r6, r6, #21
 800bb68:	d100      	bne.n	800bb6c <_dtoa_r+0xec>
 800bb6a:	e07c      	b.n	800bc66 <_dtoa_r+0x1e6>
 800bb6c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bb6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bb70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb72:	4a9d      	ldr	r2, [pc, #628]	; (800bde8 <_dtoa_r+0x368>)
 800bb74:	031b      	lsls	r3, r3, #12
 800bb76:	0b1b      	lsrs	r3, r3, #12
 800bb78:	431a      	orrs	r2, r3
 800bb7a:	0011      	movs	r1, r2
 800bb7c:	4b9b      	ldr	r3, [pc, #620]	; (800bdec <_dtoa_r+0x36c>)
 800bb7e:	9418      	str	r4, [sp, #96]	; 0x60
 800bb80:	18f6      	adds	r6, r6, r3
 800bb82:	2200      	movs	r2, #0
 800bb84:	4b9a      	ldr	r3, [pc, #616]	; (800bdf0 <_dtoa_r+0x370>)
 800bb86:	f7f6 fe41 	bl	800280c <__aeabi_dsub>
 800bb8a:	4a9a      	ldr	r2, [pc, #616]	; (800bdf4 <_dtoa_r+0x374>)
 800bb8c:	4b9a      	ldr	r3, [pc, #616]	; (800bdf8 <_dtoa_r+0x378>)
 800bb8e:	f7f6 fbd1 	bl	8002334 <__aeabi_dmul>
 800bb92:	4a9a      	ldr	r2, [pc, #616]	; (800bdfc <_dtoa_r+0x37c>)
 800bb94:	4b9a      	ldr	r3, [pc, #616]	; (800be00 <_dtoa_r+0x380>)
 800bb96:	f7f5 fc8f 	bl	80014b8 <__aeabi_dadd>
 800bb9a:	0004      	movs	r4, r0
 800bb9c:	0030      	movs	r0, r6
 800bb9e:	000d      	movs	r5, r1
 800bba0:	f7f7 fa1a 	bl	8002fd8 <__aeabi_i2d>
 800bba4:	4a97      	ldr	r2, [pc, #604]	; (800be04 <_dtoa_r+0x384>)
 800bba6:	4b98      	ldr	r3, [pc, #608]	; (800be08 <_dtoa_r+0x388>)
 800bba8:	f7f6 fbc4 	bl	8002334 <__aeabi_dmul>
 800bbac:	0002      	movs	r2, r0
 800bbae:	000b      	movs	r3, r1
 800bbb0:	0020      	movs	r0, r4
 800bbb2:	0029      	movs	r1, r5
 800bbb4:	f7f5 fc80 	bl	80014b8 <__aeabi_dadd>
 800bbb8:	0004      	movs	r4, r0
 800bbba:	000d      	movs	r5, r1
 800bbbc:	f7f7 f9d6 	bl	8002f6c <__aeabi_d2iz>
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	9002      	str	r0, [sp, #8]
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	0020      	movs	r0, r4
 800bbc8:	0029      	movs	r1, r5
 800bbca:	f7f4 fc45 	bl	8000458 <__aeabi_dcmplt>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d00b      	beq.n	800bbea <_dtoa_r+0x16a>
 800bbd2:	9802      	ldr	r0, [sp, #8]
 800bbd4:	f7f7 fa00 	bl	8002fd8 <__aeabi_i2d>
 800bbd8:	002b      	movs	r3, r5
 800bbda:	0022      	movs	r2, r4
 800bbdc:	f7f4 fc36 	bl	800044c <__aeabi_dcmpeq>
 800bbe0:	4243      	negs	r3, r0
 800bbe2:	4158      	adcs	r0, r3
 800bbe4:	9b02      	ldr	r3, [sp, #8]
 800bbe6:	1a1b      	subs	r3, r3, r0
 800bbe8:	9302      	str	r3, [sp, #8]
 800bbea:	2301      	movs	r3, #1
 800bbec:	9316      	str	r3, [sp, #88]	; 0x58
 800bbee:	9b02      	ldr	r3, [sp, #8]
 800bbf0:	2b16      	cmp	r3, #22
 800bbf2:	d80f      	bhi.n	800bc14 <_dtoa_r+0x194>
 800bbf4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bbf6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bbf8:	00da      	lsls	r2, r3, #3
 800bbfa:	4b84      	ldr	r3, [pc, #528]	; (800be0c <_dtoa_r+0x38c>)
 800bbfc:	189b      	adds	r3, r3, r2
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	f7f4 fc29 	bl	8000458 <__aeabi_dcmplt>
 800bc06:	2800      	cmp	r0, #0
 800bc08:	d049      	beq.n	800bc9e <_dtoa_r+0x21e>
 800bc0a:	9b02      	ldr	r3, [sp, #8]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	9302      	str	r3, [sp, #8]
 800bc10:	2300      	movs	r3, #0
 800bc12:	9316      	str	r3, [sp, #88]	; 0x58
 800bc14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bc16:	1b9e      	subs	r6, r3, r6
 800bc18:	2300      	movs	r3, #0
 800bc1a:	930a      	str	r3, [sp, #40]	; 0x28
 800bc1c:	0033      	movs	r3, r6
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	930d      	str	r3, [sp, #52]	; 0x34
 800bc22:	d504      	bpl.n	800bc2e <_dtoa_r+0x1ae>
 800bc24:	2301      	movs	r3, #1
 800bc26:	1b9b      	subs	r3, r3, r6
 800bc28:	930a      	str	r3, [sp, #40]	; 0x28
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	930d      	str	r3, [sp, #52]	; 0x34
 800bc2e:	9b02      	ldr	r3, [sp, #8]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	db36      	blt.n	800bca2 <_dtoa_r+0x222>
 800bc34:	9a02      	ldr	r2, [sp, #8]
 800bc36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc38:	4694      	mov	ip, r2
 800bc3a:	4463      	add	r3, ip
 800bc3c:	930d      	str	r3, [sp, #52]	; 0x34
 800bc3e:	2300      	movs	r3, #0
 800bc40:	9215      	str	r2, [sp, #84]	; 0x54
 800bc42:	930e      	str	r3, [sp, #56]	; 0x38
 800bc44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc46:	2401      	movs	r4, #1
 800bc48:	2b09      	cmp	r3, #9
 800bc4a:	d864      	bhi.n	800bd16 <_dtoa_r+0x296>
 800bc4c:	2b05      	cmp	r3, #5
 800bc4e:	dd02      	ble.n	800bc56 <_dtoa_r+0x1d6>
 800bc50:	2400      	movs	r4, #0
 800bc52:	3b04      	subs	r3, #4
 800bc54:	9322      	str	r3, [sp, #136]	; 0x88
 800bc56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc58:	1e98      	subs	r0, r3, #2
 800bc5a:	2803      	cmp	r0, #3
 800bc5c:	d864      	bhi.n	800bd28 <_dtoa_r+0x2a8>
 800bc5e:	f7f4 fa5b 	bl	8000118 <__gnu_thumb1_case_uqi>
 800bc62:	3829      	.short	0x3829
 800bc64:	5836      	.short	0x5836
 800bc66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bc68:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bc6a:	189e      	adds	r6, r3, r2
 800bc6c:	4b68      	ldr	r3, [pc, #416]	; (800be10 <_dtoa_r+0x390>)
 800bc6e:	18f2      	adds	r2, r6, r3
 800bc70:	2a20      	cmp	r2, #32
 800bc72:	dd0f      	ble.n	800bc94 <_dtoa_r+0x214>
 800bc74:	2340      	movs	r3, #64	; 0x40
 800bc76:	1a9b      	subs	r3, r3, r2
 800bc78:	409d      	lsls	r5, r3
 800bc7a:	4b66      	ldr	r3, [pc, #408]	; (800be14 <_dtoa_r+0x394>)
 800bc7c:	9802      	ldr	r0, [sp, #8]
 800bc7e:	18f3      	adds	r3, r6, r3
 800bc80:	40d8      	lsrs	r0, r3
 800bc82:	4328      	orrs	r0, r5
 800bc84:	f7f7 f9d8 	bl	8003038 <__aeabi_ui2d>
 800bc88:	2301      	movs	r3, #1
 800bc8a:	4c63      	ldr	r4, [pc, #396]	; (800be18 <_dtoa_r+0x398>)
 800bc8c:	3e01      	subs	r6, #1
 800bc8e:	1909      	adds	r1, r1, r4
 800bc90:	9318      	str	r3, [sp, #96]	; 0x60
 800bc92:	e776      	b.n	800bb82 <_dtoa_r+0x102>
 800bc94:	2320      	movs	r3, #32
 800bc96:	9802      	ldr	r0, [sp, #8]
 800bc98:	1a9b      	subs	r3, r3, r2
 800bc9a:	4098      	lsls	r0, r3
 800bc9c:	e7f2      	b.n	800bc84 <_dtoa_r+0x204>
 800bc9e:	9016      	str	r0, [sp, #88]	; 0x58
 800bca0:	e7b8      	b.n	800bc14 <_dtoa_r+0x194>
 800bca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bca4:	9a02      	ldr	r2, [sp, #8]
 800bca6:	1a9b      	subs	r3, r3, r2
 800bca8:	930a      	str	r3, [sp, #40]	; 0x28
 800bcaa:	4253      	negs	r3, r2
 800bcac:	930e      	str	r3, [sp, #56]	; 0x38
 800bcae:	2300      	movs	r3, #0
 800bcb0:	9315      	str	r3, [sp, #84]	; 0x54
 800bcb2:	e7c7      	b.n	800bc44 <_dtoa_r+0x1c4>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bcba:	930c      	str	r3, [sp, #48]	; 0x30
 800bcbc:	9307      	str	r3, [sp, #28]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	dc13      	bgt.n	800bcea <_dtoa_r+0x26a>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	001a      	movs	r2, r3
 800bcc6:	930c      	str	r3, [sp, #48]	; 0x30
 800bcc8:	9307      	str	r3, [sp, #28]
 800bcca:	9223      	str	r2, [sp, #140]	; 0x8c
 800bccc:	e00d      	b.n	800bcea <_dtoa_r+0x26a>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e7f1      	b.n	800bcb6 <_dtoa_r+0x236>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800bcd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcd8:	4694      	mov	ip, r2
 800bcda:	9b02      	ldr	r3, [sp, #8]
 800bcdc:	4463      	add	r3, ip
 800bcde:	930c      	str	r3, [sp, #48]	; 0x30
 800bce0:	3301      	adds	r3, #1
 800bce2:	9307      	str	r3, [sp, #28]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	dc00      	bgt.n	800bcea <_dtoa_r+0x26a>
 800bce8:	2301      	movs	r3, #1
 800bcea:	2200      	movs	r2, #0
 800bcec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcee:	6042      	str	r2, [r0, #4]
 800bcf0:	3204      	adds	r2, #4
 800bcf2:	0015      	movs	r5, r2
 800bcf4:	3514      	adds	r5, #20
 800bcf6:	6841      	ldr	r1, [r0, #4]
 800bcf8:	429d      	cmp	r5, r3
 800bcfa:	d919      	bls.n	800bd30 <_dtoa_r+0x2b0>
 800bcfc:	0038      	movs	r0, r7
 800bcfe:	f000 ff31 	bl	800cb64 <_Balloc>
 800bd02:	9006      	str	r0, [sp, #24]
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d117      	bne.n	800bd38 <_dtoa_r+0x2b8>
 800bd08:	21d5      	movs	r1, #213	; 0xd5
 800bd0a:	0002      	movs	r2, r0
 800bd0c:	4b43      	ldr	r3, [pc, #268]	; (800be1c <_dtoa_r+0x39c>)
 800bd0e:	0049      	lsls	r1, r1, #1
 800bd10:	e6cb      	b.n	800baaa <_dtoa_r+0x2a>
 800bd12:	2301      	movs	r3, #1
 800bd14:	e7de      	b.n	800bcd4 <_dtoa_r+0x254>
 800bd16:	2300      	movs	r3, #0
 800bd18:	940f      	str	r4, [sp, #60]	; 0x3c
 800bd1a:	9322      	str	r3, [sp, #136]	; 0x88
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	930c      	str	r3, [sp, #48]	; 0x30
 800bd20:	9307      	str	r3, [sp, #28]
 800bd22:	2200      	movs	r2, #0
 800bd24:	3313      	adds	r3, #19
 800bd26:	e7d0      	b.n	800bcca <_dtoa_r+0x24a>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd2c:	3b02      	subs	r3, #2
 800bd2e:	e7f6      	b.n	800bd1e <_dtoa_r+0x29e>
 800bd30:	3101      	adds	r1, #1
 800bd32:	6041      	str	r1, [r0, #4]
 800bd34:	0052      	lsls	r2, r2, #1
 800bd36:	e7dc      	b.n	800bcf2 <_dtoa_r+0x272>
 800bd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3a:	9a06      	ldr	r2, [sp, #24]
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	9b07      	ldr	r3, [sp, #28]
 800bd40:	2b0e      	cmp	r3, #14
 800bd42:	d900      	bls.n	800bd46 <_dtoa_r+0x2c6>
 800bd44:	e0eb      	b.n	800bf1e <_dtoa_r+0x49e>
 800bd46:	2c00      	cmp	r4, #0
 800bd48:	d100      	bne.n	800bd4c <_dtoa_r+0x2cc>
 800bd4a:	e0e8      	b.n	800bf1e <_dtoa_r+0x49e>
 800bd4c:	9b02      	ldr	r3, [sp, #8]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	dd68      	ble.n	800be24 <_dtoa_r+0x3a4>
 800bd52:	001a      	movs	r2, r3
 800bd54:	210f      	movs	r1, #15
 800bd56:	4b2d      	ldr	r3, [pc, #180]	; (800be0c <_dtoa_r+0x38c>)
 800bd58:	400a      	ands	r2, r1
 800bd5a:	00d2      	lsls	r2, r2, #3
 800bd5c:	189b      	adds	r3, r3, r2
 800bd5e:	681d      	ldr	r5, [r3, #0]
 800bd60:	685e      	ldr	r6, [r3, #4]
 800bd62:	9b02      	ldr	r3, [sp, #8]
 800bd64:	111c      	asrs	r4, r3, #4
 800bd66:	2302      	movs	r3, #2
 800bd68:	9310      	str	r3, [sp, #64]	; 0x40
 800bd6a:	9b02      	ldr	r3, [sp, #8]
 800bd6c:	05db      	lsls	r3, r3, #23
 800bd6e:	d50b      	bpl.n	800bd88 <_dtoa_r+0x308>
 800bd70:	4b2b      	ldr	r3, [pc, #172]	; (800be20 <_dtoa_r+0x3a0>)
 800bd72:	400c      	ands	r4, r1
 800bd74:	6a1a      	ldr	r2, [r3, #32]
 800bd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd78:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bd7a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bd7c:	f7f5 fed8 	bl	8001b30 <__aeabi_ddiv>
 800bd80:	2303      	movs	r3, #3
 800bd82:	9008      	str	r0, [sp, #32]
 800bd84:	9109      	str	r1, [sp, #36]	; 0x24
 800bd86:	9310      	str	r3, [sp, #64]	; 0x40
 800bd88:	4b25      	ldr	r3, [pc, #148]	; (800be20 <_dtoa_r+0x3a0>)
 800bd8a:	9314      	str	r3, [sp, #80]	; 0x50
 800bd8c:	2c00      	cmp	r4, #0
 800bd8e:	d108      	bne.n	800bda2 <_dtoa_r+0x322>
 800bd90:	9808      	ldr	r0, [sp, #32]
 800bd92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd94:	002a      	movs	r2, r5
 800bd96:	0033      	movs	r3, r6
 800bd98:	f7f5 feca 	bl	8001b30 <__aeabi_ddiv>
 800bd9c:	9008      	str	r0, [sp, #32]
 800bd9e:	9109      	str	r1, [sp, #36]	; 0x24
 800bda0:	e05c      	b.n	800be5c <_dtoa_r+0x3dc>
 800bda2:	2301      	movs	r3, #1
 800bda4:	421c      	tst	r4, r3
 800bda6:	d00b      	beq.n	800bdc0 <_dtoa_r+0x340>
 800bda8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdaa:	0028      	movs	r0, r5
 800bdac:	3301      	adds	r3, #1
 800bdae:	9310      	str	r3, [sp, #64]	; 0x40
 800bdb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bdb2:	0031      	movs	r1, r6
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	f7f6 fabc 	bl	8002334 <__aeabi_dmul>
 800bdbc:	0005      	movs	r5, r0
 800bdbe:	000e      	movs	r6, r1
 800bdc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bdc2:	1064      	asrs	r4, r4, #1
 800bdc4:	3308      	adds	r3, #8
 800bdc6:	e7e0      	b.n	800bd8a <_dtoa_r+0x30a>
 800bdc8:	0800e7e5 	.word	0x0800e7e5
 800bdcc:	0800e7fc 	.word	0x0800e7fc
 800bdd0:	7ff00000 	.word	0x7ff00000
 800bdd4:	0000270f 	.word	0x0000270f
 800bdd8:	0800e7e1 	.word	0x0800e7e1
 800bddc:	0800e7e4 	.word	0x0800e7e4
 800bde0:	0800e7b4 	.word	0x0800e7b4
 800bde4:	0800e7b5 	.word	0x0800e7b5
 800bde8:	3ff00000 	.word	0x3ff00000
 800bdec:	fffffc01 	.word	0xfffffc01
 800bdf0:	3ff80000 	.word	0x3ff80000
 800bdf4:	636f4361 	.word	0x636f4361
 800bdf8:	3fd287a7 	.word	0x3fd287a7
 800bdfc:	8b60c8b3 	.word	0x8b60c8b3
 800be00:	3fc68a28 	.word	0x3fc68a28
 800be04:	509f79fb 	.word	0x509f79fb
 800be08:	3fd34413 	.word	0x3fd34413
 800be0c:	0800e950 	.word	0x0800e950
 800be10:	00000432 	.word	0x00000432
 800be14:	00000412 	.word	0x00000412
 800be18:	fe100000 	.word	0xfe100000
 800be1c:	0800e857 	.word	0x0800e857
 800be20:	0800e928 	.word	0x0800e928
 800be24:	2302      	movs	r3, #2
 800be26:	9310      	str	r3, [sp, #64]	; 0x40
 800be28:	9b02      	ldr	r3, [sp, #8]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d016      	beq.n	800be5c <_dtoa_r+0x3dc>
 800be2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800be30:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800be32:	425c      	negs	r4, r3
 800be34:	230f      	movs	r3, #15
 800be36:	4ab6      	ldr	r2, [pc, #728]	; (800c110 <_dtoa_r+0x690>)
 800be38:	4023      	ands	r3, r4
 800be3a:	00db      	lsls	r3, r3, #3
 800be3c:	18d3      	adds	r3, r2, r3
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	f7f6 fa77 	bl	8002334 <__aeabi_dmul>
 800be46:	2601      	movs	r6, #1
 800be48:	2300      	movs	r3, #0
 800be4a:	9008      	str	r0, [sp, #32]
 800be4c:	9109      	str	r1, [sp, #36]	; 0x24
 800be4e:	4db1      	ldr	r5, [pc, #708]	; (800c114 <_dtoa_r+0x694>)
 800be50:	1124      	asrs	r4, r4, #4
 800be52:	2c00      	cmp	r4, #0
 800be54:	d000      	beq.n	800be58 <_dtoa_r+0x3d8>
 800be56:	e094      	b.n	800bf82 <_dtoa_r+0x502>
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d19f      	bne.n	800bd9c <_dtoa_r+0x31c>
 800be5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d100      	bne.n	800be64 <_dtoa_r+0x3e4>
 800be62:	e09b      	b.n	800bf9c <_dtoa_r+0x51c>
 800be64:	9c08      	ldr	r4, [sp, #32]
 800be66:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800be68:	2200      	movs	r2, #0
 800be6a:	0020      	movs	r0, r4
 800be6c:	0029      	movs	r1, r5
 800be6e:	4baa      	ldr	r3, [pc, #680]	; (800c118 <_dtoa_r+0x698>)
 800be70:	f7f4 faf2 	bl	8000458 <__aeabi_dcmplt>
 800be74:	2800      	cmp	r0, #0
 800be76:	d100      	bne.n	800be7a <_dtoa_r+0x3fa>
 800be78:	e090      	b.n	800bf9c <_dtoa_r+0x51c>
 800be7a:	9b07      	ldr	r3, [sp, #28]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d100      	bne.n	800be82 <_dtoa_r+0x402>
 800be80:	e08c      	b.n	800bf9c <_dtoa_r+0x51c>
 800be82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be84:	2b00      	cmp	r3, #0
 800be86:	dd46      	ble.n	800bf16 <_dtoa_r+0x496>
 800be88:	9b02      	ldr	r3, [sp, #8]
 800be8a:	2200      	movs	r2, #0
 800be8c:	0020      	movs	r0, r4
 800be8e:	0029      	movs	r1, r5
 800be90:	1e5e      	subs	r6, r3, #1
 800be92:	4ba2      	ldr	r3, [pc, #648]	; (800c11c <_dtoa_r+0x69c>)
 800be94:	f7f6 fa4e 	bl	8002334 <__aeabi_dmul>
 800be98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be9a:	9008      	str	r0, [sp, #32]
 800be9c:	9109      	str	r1, [sp, #36]	; 0x24
 800be9e:	3301      	adds	r3, #1
 800bea0:	9310      	str	r3, [sp, #64]	; 0x40
 800bea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bea4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bea6:	9c08      	ldr	r4, [sp, #32]
 800bea8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800beaa:	9314      	str	r3, [sp, #80]	; 0x50
 800beac:	f7f7 f894 	bl	8002fd8 <__aeabi_i2d>
 800beb0:	0022      	movs	r2, r4
 800beb2:	002b      	movs	r3, r5
 800beb4:	f7f6 fa3e 	bl	8002334 <__aeabi_dmul>
 800beb8:	2200      	movs	r2, #0
 800beba:	4b99      	ldr	r3, [pc, #612]	; (800c120 <_dtoa_r+0x6a0>)
 800bebc:	f7f5 fafc 	bl	80014b8 <__aeabi_dadd>
 800bec0:	9010      	str	r0, [sp, #64]	; 0x40
 800bec2:	9111      	str	r1, [sp, #68]	; 0x44
 800bec4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bec6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bec8:	9208      	str	r2, [sp, #32]
 800beca:	9309      	str	r3, [sp, #36]	; 0x24
 800becc:	4a95      	ldr	r2, [pc, #596]	; (800c124 <_dtoa_r+0x6a4>)
 800bece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bed0:	4694      	mov	ip, r2
 800bed2:	4463      	add	r3, ip
 800bed4:	9317      	str	r3, [sp, #92]	; 0x5c
 800bed6:	9309      	str	r3, [sp, #36]	; 0x24
 800bed8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d161      	bne.n	800bfa2 <_dtoa_r+0x522>
 800bede:	2200      	movs	r2, #0
 800bee0:	0020      	movs	r0, r4
 800bee2:	0029      	movs	r1, r5
 800bee4:	4b90      	ldr	r3, [pc, #576]	; (800c128 <_dtoa_r+0x6a8>)
 800bee6:	f7f6 fc91 	bl	800280c <__aeabi_dsub>
 800beea:	9a08      	ldr	r2, [sp, #32]
 800beec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800beee:	0004      	movs	r4, r0
 800bef0:	000d      	movs	r5, r1
 800bef2:	f7f4 fac5 	bl	8000480 <__aeabi_dcmpgt>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d000      	beq.n	800befc <_dtoa_r+0x47c>
 800befa:	e2af      	b.n	800c45c <_dtoa_r+0x9dc>
 800befc:	488b      	ldr	r0, [pc, #556]	; (800c12c <_dtoa_r+0x6ac>)
 800befe:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bf00:	4684      	mov	ip, r0
 800bf02:	4461      	add	r1, ip
 800bf04:	000b      	movs	r3, r1
 800bf06:	0020      	movs	r0, r4
 800bf08:	0029      	movs	r1, r5
 800bf0a:	9a08      	ldr	r2, [sp, #32]
 800bf0c:	f7f4 faa4 	bl	8000458 <__aeabi_dcmplt>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d000      	beq.n	800bf16 <_dtoa_r+0x496>
 800bf14:	e29f      	b.n	800c456 <_dtoa_r+0x9d6>
 800bf16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf18:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800bf1a:	9308      	str	r3, [sp, #32]
 800bf1c:	9409      	str	r4, [sp, #36]	; 0x24
 800bf1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	da00      	bge.n	800bf26 <_dtoa_r+0x4a6>
 800bf24:	e172      	b.n	800c20c <_dtoa_r+0x78c>
 800bf26:	9a02      	ldr	r2, [sp, #8]
 800bf28:	2a0e      	cmp	r2, #14
 800bf2a:	dd00      	ble.n	800bf2e <_dtoa_r+0x4ae>
 800bf2c:	e16e      	b.n	800c20c <_dtoa_r+0x78c>
 800bf2e:	4b78      	ldr	r3, [pc, #480]	; (800c110 <_dtoa_r+0x690>)
 800bf30:	00d2      	lsls	r2, r2, #3
 800bf32:	189b      	adds	r3, r3, r2
 800bf34:	685c      	ldr	r4, [r3, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	930a      	str	r3, [sp, #40]	; 0x28
 800bf3a:	940b      	str	r4, [sp, #44]	; 0x2c
 800bf3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	db00      	blt.n	800bf44 <_dtoa_r+0x4c4>
 800bf42:	e0f7      	b.n	800c134 <_dtoa_r+0x6b4>
 800bf44:	9b07      	ldr	r3, [sp, #28]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	dd00      	ble.n	800bf4c <_dtoa_r+0x4cc>
 800bf4a:	e0f3      	b.n	800c134 <_dtoa_r+0x6b4>
 800bf4c:	d000      	beq.n	800bf50 <_dtoa_r+0x4d0>
 800bf4e:	e282      	b.n	800c456 <_dtoa_r+0x9d6>
 800bf50:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf54:	2200      	movs	r2, #0
 800bf56:	4b74      	ldr	r3, [pc, #464]	; (800c128 <_dtoa_r+0x6a8>)
 800bf58:	f7f6 f9ec 	bl	8002334 <__aeabi_dmul>
 800bf5c:	9a08      	ldr	r2, [sp, #32]
 800bf5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf60:	f7f4 fa98 	bl	8000494 <__aeabi_dcmpge>
 800bf64:	9e07      	ldr	r6, [sp, #28]
 800bf66:	0035      	movs	r5, r6
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d000      	beq.n	800bf6e <_dtoa_r+0x4ee>
 800bf6c:	e259      	b.n	800c422 <_dtoa_r+0x9a2>
 800bf6e:	9b06      	ldr	r3, [sp, #24]
 800bf70:	9a06      	ldr	r2, [sp, #24]
 800bf72:	3301      	adds	r3, #1
 800bf74:	9308      	str	r3, [sp, #32]
 800bf76:	2331      	movs	r3, #49	; 0x31
 800bf78:	7013      	strb	r3, [r2, #0]
 800bf7a:	9b02      	ldr	r3, [sp, #8]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	9302      	str	r3, [sp, #8]
 800bf80:	e254      	b.n	800c42c <_dtoa_r+0x9ac>
 800bf82:	4234      	tst	r4, r6
 800bf84:	d007      	beq.n	800bf96 <_dtoa_r+0x516>
 800bf86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf88:	3301      	adds	r3, #1
 800bf8a:	9310      	str	r3, [sp, #64]	; 0x40
 800bf8c:	682a      	ldr	r2, [r5, #0]
 800bf8e:	686b      	ldr	r3, [r5, #4]
 800bf90:	f7f6 f9d0 	bl	8002334 <__aeabi_dmul>
 800bf94:	0033      	movs	r3, r6
 800bf96:	1064      	asrs	r4, r4, #1
 800bf98:	3508      	adds	r5, #8
 800bf9a:	e75a      	b.n	800be52 <_dtoa_r+0x3d2>
 800bf9c:	9e02      	ldr	r6, [sp, #8]
 800bf9e:	9b07      	ldr	r3, [sp, #28]
 800bfa0:	e780      	b.n	800bea4 <_dtoa_r+0x424>
 800bfa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfa4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bfa6:	1e5a      	subs	r2, r3, #1
 800bfa8:	4b59      	ldr	r3, [pc, #356]	; (800c110 <_dtoa_r+0x690>)
 800bfaa:	00d2      	lsls	r2, r2, #3
 800bfac:	189b      	adds	r3, r3, r2
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	2900      	cmp	r1, #0
 800bfb4:	d051      	beq.n	800c05a <_dtoa_r+0x5da>
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	495d      	ldr	r1, [pc, #372]	; (800c130 <_dtoa_r+0x6b0>)
 800bfba:	f7f5 fdb9 	bl	8001b30 <__aeabi_ddiv>
 800bfbe:	9a08      	ldr	r2, [sp, #32]
 800bfc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc2:	f7f6 fc23 	bl	800280c <__aeabi_dsub>
 800bfc6:	9a06      	ldr	r2, [sp, #24]
 800bfc8:	9b06      	ldr	r3, [sp, #24]
 800bfca:	4694      	mov	ip, r2
 800bfcc:	9317      	str	r3, [sp, #92]	; 0x5c
 800bfce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfd0:	9010      	str	r0, [sp, #64]	; 0x40
 800bfd2:	9111      	str	r1, [sp, #68]	; 0x44
 800bfd4:	4463      	add	r3, ip
 800bfd6:	9319      	str	r3, [sp, #100]	; 0x64
 800bfd8:	0029      	movs	r1, r5
 800bfda:	0020      	movs	r0, r4
 800bfdc:	f7f6 ffc6 	bl	8002f6c <__aeabi_d2iz>
 800bfe0:	9014      	str	r0, [sp, #80]	; 0x50
 800bfe2:	f7f6 fff9 	bl	8002fd8 <__aeabi_i2d>
 800bfe6:	0002      	movs	r2, r0
 800bfe8:	000b      	movs	r3, r1
 800bfea:	0020      	movs	r0, r4
 800bfec:	0029      	movs	r1, r5
 800bfee:	f7f6 fc0d 	bl	800280c <__aeabi_dsub>
 800bff2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bff4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bff6:	3301      	adds	r3, #1
 800bff8:	9308      	str	r3, [sp, #32]
 800bffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bffc:	0004      	movs	r4, r0
 800bffe:	3330      	adds	r3, #48	; 0x30
 800c000:	7013      	strb	r3, [r2, #0]
 800c002:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c004:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c006:	000d      	movs	r5, r1
 800c008:	f7f4 fa26 	bl	8000458 <__aeabi_dcmplt>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	d175      	bne.n	800c0fc <_dtoa_r+0x67c>
 800c010:	0022      	movs	r2, r4
 800c012:	002b      	movs	r3, r5
 800c014:	2000      	movs	r0, #0
 800c016:	4940      	ldr	r1, [pc, #256]	; (800c118 <_dtoa_r+0x698>)
 800c018:	f7f6 fbf8 	bl	800280c <__aeabi_dsub>
 800c01c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c01e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c020:	f7f4 fa1a 	bl	8000458 <__aeabi_dcmplt>
 800c024:	2800      	cmp	r0, #0
 800c026:	d000      	beq.n	800c02a <_dtoa_r+0x5aa>
 800c028:	e0d2      	b.n	800c1d0 <_dtoa_r+0x750>
 800c02a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c02c:	9a08      	ldr	r2, [sp, #32]
 800c02e:	4293      	cmp	r3, r2
 800c030:	d100      	bne.n	800c034 <_dtoa_r+0x5b4>
 800c032:	e770      	b.n	800bf16 <_dtoa_r+0x496>
 800c034:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c036:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c038:	2200      	movs	r2, #0
 800c03a:	4b38      	ldr	r3, [pc, #224]	; (800c11c <_dtoa_r+0x69c>)
 800c03c:	f7f6 f97a 	bl	8002334 <__aeabi_dmul>
 800c040:	4b36      	ldr	r3, [pc, #216]	; (800c11c <_dtoa_r+0x69c>)
 800c042:	9010      	str	r0, [sp, #64]	; 0x40
 800c044:	9111      	str	r1, [sp, #68]	; 0x44
 800c046:	2200      	movs	r2, #0
 800c048:	0020      	movs	r0, r4
 800c04a:	0029      	movs	r1, r5
 800c04c:	f7f6 f972 	bl	8002334 <__aeabi_dmul>
 800c050:	9b08      	ldr	r3, [sp, #32]
 800c052:	0004      	movs	r4, r0
 800c054:	000d      	movs	r5, r1
 800c056:	9317      	str	r3, [sp, #92]	; 0x5c
 800c058:	e7be      	b.n	800bfd8 <_dtoa_r+0x558>
 800c05a:	9808      	ldr	r0, [sp, #32]
 800c05c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c05e:	f7f6 f969 	bl	8002334 <__aeabi_dmul>
 800c062:	9a06      	ldr	r2, [sp, #24]
 800c064:	9b06      	ldr	r3, [sp, #24]
 800c066:	4694      	mov	ip, r2
 800c068:	9308      	str	r3, [sp, #32]
 800c06a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c06c:	9010      	str	r0, [sp, #64]	; 0x40
 800c06e:	9111      	str	r1, [sp, #68]	; 0x44
 800c070:	4463      	add	r3, ip
 800c072:	9319      	str	r3, [sp, #100]	; 0x64
 800c074:	0029      	movs	r1, r5
 800c076:	0020      	movs	r0, r4
 800c078:	f7f6 ff78 	bl	8002f6c <__aeabi_d2iz>
 800c07c:	9017      	str	r0, [sp, #92]	; 0x5c
 800c07e:	f7f6 ffab 	bl	8002fd8 <__aeabi_i2d>
 800c082:	0002      	movs	r2, r0
 800c084:	000b      	movs	r3, r1
 800c086:	0020      	movs	r0, r4
 800c088:	0029      	movs	r1, r5
 800c08a:	f7f6 fbbf 	bl	800280c <__aeabi_dsub>
 800c08e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c090:	9a08      	ldr	r2, [sp, #32]
 800c092:	3330      	adds	r3, #48	; 0x30
 800c094:	7013      	strb	r3, [r2, #0]
 800c096:	0013      	movs	r3, r2
 800c098:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c09a:	3301      	adds	r3, #1
 800c09c:	0004      	movs	r4, r0
 800c09e:	000d      	movs	r5, r1
 800c0a0:	9308      	str	r3, [sp, #32]
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d12c      	bne.n	800c100 <_dtoa_r+0x680>
 800c0a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c0a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c0aa:	9a06      	ldr	r2, [sp, #24]
 800c0ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0ae:	4694      	mov	ip, r2
 800c0b0:	4463      	add	r3, ip
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	9308      	str	r3, [sp, #32]
 800c0b6:	4b1e      	ldr	r3, [pc, #120]	; (800c130 <_dtoa_r+0x6b0>)
 800c0b8:	f7f5 f9fe 	bl	80014b8 <__aeabi_dadd>
 800c0bc:	0002      	movs	r2, r0
 800c0be:	000b      	movs	r3, r1
 800c0c0:	0020      	movs	r0, r4
 800c0c2:	0029      	movs	r1, r5
 800c0c4:	f7f4 f9dc 	bl	8000480 <__aeabi_dcmpgt>
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d000      	beq.n	800c0ce <_dtoa_r+0x64e>
 800c0cc:	e080      	b.n	800c1d0 <_dtoa_r+0x750>
 800c0ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c0d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0d2:	2000      	movs	r0, #0
 800c0d4:	4916      	ldr	r1, [pc, #88]	; (800c130 <_dtoa_r+0x6b0>)
 800c0d6:	f7f6 fb99 	bl	800280c <__aeabi_dsub>
 800c0da:	0002      	movs	r2, r0
 800c0dc:	000b      	movs	r3, r1
 800c0de:	0020      	movs	r0, r4
 800c0e0:	0029      	movs	r1, r5
 800c0e2:	f7f4 f9b9 	bl	8000458 <__aeabi_dcmplt>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	d100      	bne.n	800c0ec <_dtoa_r+0x66c>
 800c0ea:	e714      	b.n	800bf16 <_dtoa_r+0x496>
 800c0ec:	9b08      	ldr	r3, [sp, #32]
 800c0ee:	001a      	movs	r2, r3
 800c0f0:	3a01      	subs	r2, #1
 800c0f2:	9208      	str	r2, [sp, #32]
 800c0f4:	7812      	ldrb	r2, [r2, #0]
 800c0f6:	2a30      	cmp	r2, #48	; 0x30
 800c0f8:	d0f8      	beq.n	800c0ec <_dtoa_r+0x66c>
 800c0fa:	9308      	str	r3, [sp, #32]
 800c0fc:	9602      	str	r6, [sp, #8]
 800c0fe:	e055      	b.n	800c1ac <_dtoa_r+0x72c>
 800c100:	2200      	movs	r2, #0
 800c102:	4b06      	ldr	r3, [pc, #24]	; (800c11c <_dtoa_r+0x69c>)
 800c104:	f7f6 f916 	bl	8002334 <__aeabi_dmul>
 800c108:	0004      	movs	r4, r0
 800c10a:	000d      	movs	r5, r1
 800c10c:	e7b2      	b.n	800c074 <_dtoa_r+0x5f4>
 800c10e:	46c0      	nop			; (mov r8, r8)
 800c110:	0800e950 	.word	0x0800e950
 800c114:	0800e928 	.word	0x0800e928
 800c118:	3ff00000 	.word	0x3ff00000
 800c11c:	40240000 	.word	0x40240000
 800c120:	401c0000 	.word	0x401c0000
 800c124:	fcc00000 	.word	0xfcc00000
 800c128:	40140000 	.word	0x40140000
 800c12c:	7cc00000 	.word	0x7cc00000
 800c130:	3fe00000 	.word	0x3fe00000
 800c134:	9b07      	ldr	r3, [sp, #28]
 800c136:	9e06      	ldr	r6, [sp, #24]
 800c138:	3b01      	subs	r3, #1
 800c13a:	199b      	adds	r3, r3, r6
 800c13c:	930c      	str	r3, [sp, #48]	; 0x30
 800c13e:	9c08      	ldr	r4, [sp, #32]
 800c140:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c146:	0020      	movs	r0, r4
 800c148:	0029      	movs	r1, r5
 800c14a:	f7f5 fcf1 	bl	8001b30 <__aeabi_ddiv>
 800c14e:	f7f6 ff0d 	bl	8002f6c <__aeabi_d2iz>
 800c152:	9007      	str	r0, [sp, #28]
 800c154:	f7f6 ff40 	bl	8002fd8 <__aeabi_i2d>
 800c158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c15c:	f7f6 f8ea 	bl	8002334 <__aeabi_dmul>
 800c160:	0002      	movs	r2, r0
 800c162:	000b      	movs	r3, r1
 800c164:	0020      	movs	r0, r4
 800c166:	0029      	movs	r1, r5
 800c168:	f7f6 fb50 	bl	800280c <__aeabi_dsub>
 800c16c:	0033      	movs	r3, r6
 800c16e:	9a07      	ldr	r2, [sp, #28]
 800c170:	3601      	adds	r6, #1
 800c172:	3230      	adds	r2, #48	; 0x30
 800c174:	701a      	strb	r2, [r3, #0]
 800c176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c178:	9608      	str	r6, [sp, #32]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d139      	bne.n	800c1f2 <_dtoa_r+0x772>
 800c17e:	0002      	movs	r2, r0
 800c180:	000b      	movs	r3, r1
 800c182:	f7f5 f999 	bl	80014b8 <__aeabi_dadd>
 800c186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c18a:	0004      	movs	r4, r0
 800c18c:	000d      	movs	r5, r1
 800c18e:	f7f4 f977 	bl	8000480 <__aeabi_dcmpgt>
 800c192:	2800      	cmp	r0, #0
 800c194:	d11b      	bne.n	800c1ce <_dtoa_r+0x74e>
 800c196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c19a:	0020      	movs	r0, r4
 800c19c:	0029      	movs	r1, r5
 800c19e:	f7f4 f955 	bl	800044c <__aeabi_dcmpeq>
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	d002      	beq.n	800c1ac <_dtoa_r+0x72c>
 800c1a6:	9b07      	ldr	r3, [sp, #28]
 800c1a8:	07db      	lsls	r3, r3, #31
 800c1aa:	d410      	bmi.n	800c1ce <_dtoa_r+0x74e>
 800c1ac:	0038      	movs	r0, r7
 800c1ae:	9905      	ldr	r1, [sp, #20]
 800c1b0:	f000 fd1c 	bl	800cbec <_Bfree>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	9a08      	ldr	r2, [sp, #32]
 800c1b8:	9802      	ldr	r0, [sp, #8]
 800c1ba:	7013      	strb	r3, [r2, #0]
 800c1bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c1be:	3001      	adds	r0, #1
 800c1c0:	6018      	str	r0, [r3, #0]
 800c1c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d100      	bne.n	800c1ca <_dtoa_r+0x74a>
 800c1c8:	e4a6      	b.n	800bb18 <_dtoa_r+0x98>
 800c1ca:	601a      	str	r2, [r3, #0]
 800c1cc:	e4a4      	b.n	800bb18 <_dtoa_r+0x98>
 800c1ce:	9e02      	ldr	r6, [sp, #8]
 800c1d0:	9b08      	ldr	r3, [sp, #32]
 800c1d2:	9308      	str	r3, [sp, #32]
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	781a      	ldrb	r2, [r3, #0]
 800c1d8:	2a39      	cmp	r2, #57	; 0x39
 800c1da:	d106      	bne.n	800c1ea <_dtoa_r+0x76a>
 800c1dc:	9a06      	ldr	r2, [sp, #24]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d1f7      	bne.n	800c1d2 <_dtoa_r+0x752>
 800c1e2:	2230      	movs	r2, #48	; 0x30
 800c1e4:	9906      	ldr	r1, [sp, #24]
 800c1e6:	3601      	adds	r6, #1
 800c1e8:	700a      	strb	r2, [r1, #0]
 800c1ea:	781a      	ldrb	r2, [r3, #0]
 800c1ec:	3201      	adds	r2, #1
 800c1ee:	701a      	strb	r2, [r3, #0]
 800c1f0:	e784      	b.n	800c0fc <_dtoa_r+0x67c>
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	4baa      	ldr	r3, [pc, #680]	; (800c4a0 <_dtoa_r+0xa20>)
 800c1f6:	f7f6 f89d 	bl	8002334 <__aeabi_dmul>
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	0004      	movs	r4, r0
 800c200:	000d      	movs	r5, r1
 800c202:	f7f4 f923 	bl	800044c <__aeabi_dcmpeq>
 800c206:	2800      	cmp	r0, #0
 800c208:	d09b      	beq.n	800c142 <_dtoa_r+0x6c2>
 800c20a:	e7cf      	b.n	800c1ac <_dtoa_r+0x72c>
 800c20c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c20e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c210:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c212:	2d00      	cmp	r5, #0
 800c214:	d012      	beq.n	800c23c <_dtoa_r+0x7bc>
 800c216:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c218:	2a01      	cmp	r2, #1
 800c21a:	dc66      	bgt.n	800c2ea <_dtoa_r+0x86a>
 800c21c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c21e:	2a00      	cmp	r2, #0
 800c220:	d05d      	beq.n	800c2de <_dtoa_r+0x85e>
 800c222:	4aa0      	ldr	r2, [pc, #640]	; (800c4a4 <_dtoa_r+0xa24>)
 800c224:	189b      	adds	r3, r3, r2
 800c226:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c228:	2101      	movs	r1, #1
 800c22a:	18d2      	adds	r2, r2, r3
 800c22c:	920a      	str	r2, [sp, #40]	; 0x28
 800c22e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c230:	0038      	movs	r0, r7
 800c232:	18d3      	adds	r3, r2, r3
 800c234:	930d      	str	r3, [sp, #52]	; 0x34
 800c236:	f000 fd89 	bl	800cd4c <__i2b>
 800c23a:	0005      	movs	r5, r0
 800c23c:	2c00      	cmp	r4, #0
 800c23e:	dd0e      	ble.n	800c25e <_dtoa_r+0x7de>
 800c240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c242:	2b00      	cmp	r3, #0
 800c244:	dd0b      	ble.n	800c25e <_dtoa_r+0x7de>
 800c246:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c248:	0023      	movs	r3, r4
 800c24a:	4294      	cmp	r4, r2
 800c24c:	dd00      	ble.n	800c250 <_dtoa_r+0x7d0>
 800c24e:	0013      	movs	r3, r2
 800c250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c252:	1ae4      	subs	r4, r4, r3
 800c254:	1ad2      	subs	r2, r2, r3
 800c256:	920a      	str	r2, [sp, #40]	; 0x28
 800c258:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	930d      	str	r3, [sp, #52]	; 0x34
 800c25e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c260:	2b00      	cmp	r3, #0
 800c262:	d01f      	beq.n	800c2a4 <_dtoa_r+0x824>
 800c264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c266:	2b00      	cmp	r3, #0
 800c268:	d054      	beq.n	800c314 <_dtoa_r+0x894>
 800c26a:	2e00      	cmp	r6, #0
 800c26c:	dd11      	ble.n	800c292 <_dtoa_r+0x812>
 800c26e:	0029      	movs	r1, r5
 800c270:	0032      	movs	r2, r6
 800c272:	0038      	movs	r0, r7
 800c274:	f000 fe30 	bl	800ced8 <__pow5mult>
 800c278:	9a05      	ldr	r2, [sp, #20]
 800c27a:	0001      	movs	r1, r0
 800c27c:	0005      	movs	r5, r0
 800c27e:	0038      	movs	r0, r7
 800c280:	f000 fd7a 	bl	800cd78 <__multiply>
 800c284:	9905      	ldr	r1, [sp, #20]
 800c286:	9014      	str	r0, [sp, #80]	; 0x50
 800c288:	0038      	movs	r0, r7
 800c28a:	f000 fcaf 	bl	800cbec <_Bfree>
 800c28e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c290:	9305      	str	r3, [sp, #20]
 800c292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c294:	1b9a      	subs	r2, r3, r6
 800c296:	42b3      	cmp	r3, r6
 800c298:	d004      	beq.n	800c2a4 <_dtoa_r+0x824>
 800c29a:	0038      	movs	r0, r7
 800c29c:	9905      	ldr	r1, [sp, #20]
 800c29e:	f000 fe1b 	bl	800ced8 <__pow5mult>
 800c2a2:	9005      	str	r0, [sp, #20]
 800c2a4:	2101      	movs	r1, #1
 800c2a6:	0038      	movs	r0, r7
 800c2a8:	f000 fd50 	bl	800cd4c <__i2b>
 800c2ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2ae:	0006      	movs	r6, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	dd31      	ble.n	800c318 <_dtoa_r+0x898>
 800c2b4:	001a      	movs	r2, r3
 800c2b6:	0001      	movs	r1, r0
 800c2b8:	0038      	movs	r0, r7
 800c2ba:	f000 fe0d 	bl	800ced8 <__pow5mult>
 800c2be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c2c0:	0006      	movs	r6, r0
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	dd2d      	ble.n	800c322 <_dtoa_r+0x8a2>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	930e      	str	r3, [sp, #56]	; 0x38
 800c2ca:	6933      	ldr	r3, [r6, #16]
 800c2cc:	3303      	adds	r3, #3
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	18f3      	adds	r3, r6, r3
 800c2d2:	6858      	ldr	r0, [r3, #4]
 800c2d4:	f000 fcf2 	bl	800ccbc <__hi0bits>
 800c2d8:	2320      	movs	r3, #32
 800c2da:	1a18      	subs	r0, r3, r0
 800c2dc:	e039      	b.n	800c352 <_dtoa_r+0x8d2>
 800c2de:	2336      	movs	r3, #54	; 0x36
 800c2e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c2e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c2e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c2e6:	1a9b      	subs	r3, r3, r2
 800c2e8:	e79d      	b.n	800c226 <_dtoa_r+0x7a6>
 800c2ea:	9b07      	ldr	r3, [sp, #28]
 800c2ec:	1e5e      	subs	r6, r3, #1
 800c2ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2f0:	42b3      	cmp	r3, r6
 800c2f2:	db07      	blt.n	800c304 <_dtoa_r+0x884>
 800c2f4:	1b9e      	subs	r6, r3, r6
 800c2f6:	9b07      	ldr	r3, [sp, #28]
 800c2f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	da93      	bge.n	800c226 <_dtoa_r+0x7a6>
 800c2fe:	1ae4      	subs	r4, r4, r3
 800c300:	2300      	movs	r3, #0
 800c302:	e790      	b.n	800c226 <_dtoa_r+0x7a6>
 800c304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c306:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c308:	1af3      	subs	r3, r6, r3
 800c30a:	18d3      	adds	r3, r2, r3
 800c30c:	960e      	str	r6, [sp, #56]	; 0x38
 800c30e:	9315      	str	r3, [sp, #84]	; 0x54
 800c310:	2600      	movs	r6, #0
 800c312:	e7f0      	b.n	800c2f6 <_dtoa_r+0x876>
 800c314:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c316:	e7c0      	b.n	800c29a <_dtoa_r+0x81a>
 800c318:	2300      	movs	r3, #0
 800c31a:	930e      	str	r3, [sp, #56]	; 0x38
 800c31c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c31e:	2b01      	cmp	r3, #1
 800c320:	dc13      	bgt.n	800c34a <_dtoa_r+0x8ca>
 800c322:	2300      	movs	r3, #0
 800c324:	930e      	str	r3, [sp, #56]	; 0x38
 800c326:	9b08      	ldr	r3, [sp, #32]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10e      	bne.n	800c34a <_dtoa_r+0x8ca>
 800c32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c32e:	031b      	lsls	r3, r3, #12
 800c330:	d10b      	bne.n	800c34a <_dtoa_r+0x8ca>
 800c332:	4b5d      	ldr	r3, [pc, #372]	; (800c4a8 <_dtoa_r+0xa28>)
 800c334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c336:	4213      	tst	r3, r2
 800c338:	d007      	beq.n	800c34a <_dtoa_r+0x8ca>
 800c33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c33c:	3301      	adds	r3, #1
 800c33e:	930a      	str	r3, [sp, #40]	; 0x28
 800c340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c342:	3301      	adds	r3, #1
 800c344:	930d      	str	r3, [sp, #52]	; 0x34
 800c346:	2301      	movs	r3, #1
 800c348:	930e      	str	r3, [sp, #56]	; 0x38
 800c34a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c34c:	2001      	movs	r0, #1
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1bb      	bne.n	800c2ca <_dtoa_r+0x84a>
 800c352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c354:	221f      	movs	r2, #31
 800c356:	1818      	adds	r0, r3, r0
 800c358:	0003      	movs	r3, r0
 800c35a:	4013      	ands	r3, r2
 800c35c:	4210      	tst	r0, r2
 800c35e:	d046      	beq.n	800c3ee <_dtoa_r+0x96e>
 800c360:	3201      	adds	r2, #1
 800c362:	1ad2      	subs	r2, r2, r3
 800c364:	2a04      	cmp	r2, #4
 800c366:	dd3f      	ble.n	800c3e8 <_dtoa_r+0x968>
 800c368:	221c      	movs	r2, #28
 800c36a:	1ad3      	subs	r3, r2, r3
 800c36c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c36e:	18e4      	adds	r4, r4, r3
 800c370:	18d2      	adds	r2, r2, r3
 800c372:	920a      	str	r2, [sp, #40]	; 0x28
 800c374:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c376:	18d3      	adds	r3, r2, r3
 800c378:	930d      	str	r3, [sp, #52]	; 0x34
 800c37a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	dd05      	ble.n	800c38c <_dtoa_r+0x90c>
 800c380:	001a      	movs	r2, r3
 800c382:	0038      	movs	r0, r7
 800c384:	9905      	ldr	r1, [sp, #20]
 800c386:	f000 fe03 	bl	800cf90 <__lshift>
 800c38a:	9005      	str	r0, [sp, #20]
 800c38c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c38e:	2b00      	cmp	r3, #0
 800c390:	dd05      	ble.n	800c39e <_dtoa_r+0x91e>
 800c392:	0031      	movs	r1, r6
 800c394:	001a      	movs	r2, r3
 800c396:	0038      	movs	r0, r7
 800c398:	f000 fdfa 	bl	800cf90 <__lshift>
 800c39c:	0006      	movs	r6, r0
 800c39e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d026      	beq.n	800c3f2 <_dtoa_r+0x972>
 800c3a4:	0031      	movs	r1, r6
 800c3a6:	9805      	ldr	r0, [sp, #20]
 800c3a8:	f000 fe60 	bl	800d06c <__mcmp>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	da20      	bge.n	800c3f2 <_dtoa_r+0x972>
 800c3b0:	9b02      	ldr	r3, [sp, #8]
 800c3b2:	220a      	movs	r2, #10
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	9302      	str	r3, [sp, #8]
 800c3b8:	0038      	movs	r0, r7
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	9905      	ldr	r1, [sp, #20]
 800c3be:	f000 fc39 	bl	800cc34 <__multadd>
 800c3c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3c4:	9005      	str	r0, [sp, #20]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d100      	bne.n	800c3cc <_dtoa_r+0x94c>
 800c3ca:	e166      	b.n	800c69a <_dtoa_r+0xc1a>
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	0029      	movs	r1, r5
 800c3d0:	220a      	movs	r2, #10
 800c3d2:	0038      	movs	r0, r7
 800c3d4:	f000 fc2e 	bl	800cc34 <__multadd>
 800c3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3da:	0005      	movs	r5, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dc47      	bgt.n	800c470 <_dtoa_r+0x9f0>
 800c3e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	dc0d      	bgt.n	800c402 <_dtoa_r+0x982>
 800c3e6:	e043      	b.n	800c470 <_dtoa_r+0x9f0>
 800c3e8:	2a04      	cmp	r2, #4
 800c3ea:	d0c6      	beq.n	800c37a <_dtoa_r+0x8fa>
 800c3ec:	0013      	movs	r3, r2
 800c3ee:	331c      	adds	r3, #28
 800c3f0:	e7bc      	b.n	800c36c <_dtoa_r+0x8ec>
 800c3f2:	9b07      	ldr	r3, [sp, #28]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	dc35      	bgt.n	800c464 <_dtoa_r+0x9e4>
 800c3f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	dd32      	ble.n	800c464 <_dtoa_r+0x9e4>
 800c3fe:	9b07      	ldr	r3, [sp, #28]
 800c400:	930c      	str	r3, [sp, #48]	; 0x30
 800c402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10c      	bne.n	800c422 <_dtoa_r+0x9a2>
 800c408:	0031      	movs	r1, r6
 800c40a:	2205      	movs	r2, #5
 800c40c:	0038      	movs	r0, r7
 800c40e:	f000 fc11 	bl	800cc34 <__multadd>
 800c412:	0006      	movs	r6, r0
 800c414:	0001      	movs	r1, r0
 800c416:	9805      	ldr	r0, [sp, #20]
 800c418:	f000 fe28 	bl	800d06c <__mcmp>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	dd00      	ble.n	800c422 <_dtoa_r+0x9a2>
 800c420:	e5a5      	b.n	800bf6e <_dtoa_r+0x4ee>
 800c422:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c424:	43db      	mvns	r3, r3
 800c426:	9302      	str	r3, [sp, #8]
 800c428:	9b06      	ldr	r3, [sp, #24]
 800c42a:	9308      	str	r3, [sp, #32]
 800c42c:	2400      	movs	r4, #0
 800c42e:	0031      	movs	r1, r6
 800c430:	0038      	movs	r0, r7
 800c432:	f000 fbdb 	bl	800cbec <_Bfree>
 800c436:	2d00      	cmp	r5, #0
 800c438:	d100      	bne.n	800c43c <_dtoa_r+0x9bc>
 800c43a:	e6b7      	b.n	800c1ac <_dtoa_r+0x72c>
 800c43c:	2c00      	cmp	r4, #0
 800c43e:	d005      	beq.n	800c44c <_dtoa_r+0x9cc>
 800c440:	42ac      	cmp	r4, r5
 800c442:	d003      	beq.n	800c44c <_dtoa_r+0x9cc>
 800c444:	0021      	movs	r1, r4
 800c446:	0038      	movs	r0, r7
 800c448:	f000 fbd0 	bl	800cbec <_Bfree>
 800c44c:	0029      	movs	r1, r5
 800c44e:	0038      	movs	r0, r7
 800c450:	f000 fbcc 	bl	800cbec <_Bfree>
 800c454:	e6aa      	b.n	800c1ac <_dtoa_r+0x72c>
 800c456:	2600      	movs	r6, #0
 800c458:	0035      	movs	r5, r6
 800c45a:	e7e2      	b.n	800c422 <_dtoa_r+0x9a2>
 800c45c:	9602      	str	r6, [sp, #8]
 800c45e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c460:	0035      	movs	r5, r6
 800c462:	e584      	b.n	800bf6e <_dtoa_r+0x4ee>
 800c464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c466:	2b00      	cmp	r3, #0
 800c468:	d100      	bne.n	800c46c <_dtoa_r+0x9ec>
 800c46a:	e0ce      	b.n	800c60a <_dtoa_r+0xb8a>
 800c46c:	9b07      	ldr	r3, [sp, #28]
 800c46e:	930c      	str	r3, [sp, #48]	; 0x30
 800c470:	2c00      	cmp	r4, #0
 800c472:	dd05      	ble.n	800c480 <_dtoa_r+0xa00>
 800c474:	0029      	movs	r1, r5
 800c476:	0022      	movs	r2, r4
 800c478:	0038      	movs	r0, r7
 800c47a:	f000 fd89 	bl	800cf90 <__lshift>
 800c47e:	0005      	movs	r5, r0
 800c480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c482:	0028      	movs	r0, r5
 800c484:	2b00      	cmp	r3, #0
 800c486:	d022      	beq.n	800c4ce <_dtoa_r+0xa4e>
 800c488:	0038      	movs	r0, r7
 800c48a:	6869      	ldr	r1, [r5, #4]
 800c48c:	f000 fb6a 	bl	800cb64 <_Balloc>
 800c490:	1e04      	subs	r4, r0, #0
 800c492:	d10f      	bne.n	800c4b4 <_dtoa_r+0xa34>
 800c494:	0002      	movs	r2, r0
 800c496:	4b05      	ldr	r3, [pc, #20]	; (800c4ac <_dtoa_r+0xa2c>)
 800c498:	4905      	ldr	r1, [pc, #20]	; (800c4b0 <_dtoa_r+0xa30>)
 800c49a:	f7ff fb06 	bl	800baaa <_dtoa_r+0x2a>
 800c49e:	46c0      	nop			; (mov r8, r8)
 800c4a0:	40240000 	.word	0x40240000
 800c4a4:	00000433 	.word	0x00000433
 800c4a8:	7ff00000 	.word	0x7ff00000
 800c4ac:	0800e857 	.word	0x0800e857
 800c4b0:	000002ea 	.word	0x000002ea
 800c4b4:	0029      	movs	r1, r5
 800c4b6:	692b      	ldr	r3, [r5, #16]
 800c4b8:	310c      	adds	r1, #12
 800c4ba:	1c9a      	adds	r2, r3, #2
 800c4bc:	0092      	lsls	r2, r2, #2
 800c4be:	300c      	adds	r0, #12
 800c4c0:	f7fe fc5a 	bl	800ad78 <memcpy>
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	0021      	movs	r1, r4
 800c4c8:	0038      	movs	r0, r7
 800c4ca:	f000 fd61 	bl	800cf90 <__lshift>
 800c4ce:	9b06      	ldr	r3, [sp, #24]
 800c4d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	189b      	adds	r3, r3, r2
 800c4d8:	2201      	movs	r2, #1
 800c4da:	002c      	movs	r4, r5
 800c4dc:	0005      	movs	r5, r0
 800c4de:	9314      	str	r3, [sp, #80]	; 0x50
 800c4e0:	9b08      	ldr	r3, [sp, #32]
 800c4e2:	4013      	ands	r3, r2
 800c4e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4e6:	0031      	movs	r1, r6
 800c4e8:	9805      	ldr	r0, [sp, #20]
 800c4ea:	f7ff fa3d 	bl	800b968 <quorem>
 800c4ee:	0003      	movs	r3, r0
 800c4f0:	0021      	movs	r1, r4
 800c4f2:	3330      	adds	r3, #48	; 0x30
 800c4f4:	900d      	str	r0, [sp, #52]	; 0x34
 800c4f6:	9805      	ldr	r0, [sp, #20]
 800c4f8:	9307      	str	r3, [sp, #28]
 800c4fa:	f000 fdb7 	bl	800d06c <__mcmp>
 800c4fe:	002a      	movs	r2, r5
 800c500:	900e      	str	r0, [sp, #56]	; 0x38
 800c502:	0031      	movs	r1, r6
 800c504:	0038      	movs	r0, r7
 800c506:	f000 fdcd 	bl	800d0a4 <__mdiff>
 800c50a:	68c3      	ldr	r3, [r0, #12]
 800c50c:	9008      	str	r0, [sp, #32]
 800c50e:	9310      	str	r3, [sp, #64]	; 0x40
 800c510:	2301      	movs	r3, #1
 800c512:	930c      	str	r3, [sp, #48]	; 0x30
 800c514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c516:	2b00      	cmp	r3, #0
 800c518:	d104      	bne.n	800c524 <_dtoa_r+0xaa4>
 800c51a:	0001      	movs	r1, r0
 800c51c:	9805      	ldr	r0, [sp, #20]
 800c51e:	f000 fda5 	bl	800d06c <__mcmp>
 800c522:	900c      	str	r0, [sp, #48]	; 0x30
 800c524:	0038      	movs	r0, r7
 800c526:	9908      	ldr	r1, [sp, #32]
 800c528:	f000 fb60 	bl	800cbec <_Bfree>
 800c52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c52e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c530:	3301      	adds	r3, #1
 800c532:	9308      	str	r3, [sp, #32]
 800c534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c536:	4313      	orrs	r3, r2
 800c538:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c53a:	4313      	orrs	r3, r2
 800c53c:	d10c      	bne.n	800c558 <_dtoa_r+0xad8>
 800c53e:	9b07      	ldr	r3, [sp, #28]
 800c540:	2b39      	cmp	r3, #57	; 0x39
 800c542:	d026      	beq.n	800c592 <_dtoa_r+0xb12>
 800c544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c546:	2b00      	cmp	r3, #0
 800c548:	dd02      	ble.n	800c550 <_dtoa_r+0xad0>
 800c54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c54c:	3331      	adds	r3, #49	; 0x31
 800c54e:	9307      	str	r3, [sp, #28]
 800c550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c552:	9a07      	ldr	r2, [sp, #28]
 800c554:	701a      	strb	r2, [r3, #0]
 800c556:	e76a      	b.n	800c42e <_dtoa_r+0x9ae>
 800c558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	db04      	blt.n	800c568 <_dtoa_r+0xae8>
 800c55e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c560:	4313      	orrs	r3, r2
 800c562:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c564:	4313      	orrs	r3, r2
 800c566:	d11f      	bne.n	800c5a8 <_dtoa_r+0xb28>
 800c568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	ddf0      	ble.n	800c550 <_dtoa_r+0xad0>
 800c56e:	9905      	ldr	r1, [sp, #20]
 800c570:	2201      	movs	r2, #1
 800c572:	0038      	movs	r0, r7
 800c574:	f000 fd0c 	bl	800cf90 <__lshift>
 800c578:	0031      	movs	r1, r6
 800c57a:	9005      	str	r0, [sp, #20]
 800c57c:	f000 fd76 	bl	800d06c <__mcmp>
 800c580:	2800      	cmp	r0, #0
 800c582:	dc03      	bgt.n	800c58c <_dtoa_r+0xb0c>
 800c584:	d1e4      	bne.n	800c550 <_dtoa_r+0xad0>
 800c586:	9b07      	ldr	r3, [sp, #28]
 800c588:	07db      	lsls	r3, r3, #31
 800c58a:	d5e1      	bpl.n	800c550 <_dtoa_r+0xad0>
 800c58c:	9b07      	ldr	r3, [sp, #28]
 800c58e:	2b39      	cmp	r3, #57	; 0x39
 800c590:	d1db      	bne.n	800c54a <_dtoa_r+0xaca>
 800c592:	2339      	movs	r3, #57	; 0x39
 800c594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c596:	7013      	strb	r3, [r2, #0]
 800c598:	9b08      	ldr	r3, [sp, #32]
 800c59a:	9308      	str	r3, [sp, #32]
 800c59c:	3b01      	subs	r3, #1
 800c59e:	781a      	ldrb	r2, [r3, #0]
 800c5a0:	2a39      	cmp	r2, #57	; 0x39
 800c5a2:	d068      	beq.n	800c676 <_dtoa_r+0xbf6>
 800c5a4:	3201      	adds	r2, #1
 800c5a6:	e7d5      	b.n	800c554 <_dtoa_r+0xad4>
 800c5a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	dd07      	ble.n	800c5be <_dtoa_r+0xb3e>
 800c5ae:	9b07      	ldr	r3, [sp, #28]
 800c5b0:	2b39      	cmp	r3, #57	; 0x39
 800c5b2:	d0ee      	beq.n	800c592 <_dtoa_r+0xb12>
 800c5b4:	9b07      	ldr	r3, [sp, #28]
 800c5b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	7013      	strb	r3, [r2, #0]
 800c5bc:	e737      	b.n	800c42e <_dtoa_r+0x9ae>
 800c5be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5c0:	9a07      	ldr	r2, [sp, #28]
 800c5c2:	701a      	strb	r2, [r3, #0]
 800c5c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d03e      	beq.n	800c64a <_dtoa_r+0xbca>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	220a      	movs	r2, #10
 800c5d0:	9905      	ldr	r1, [sp, #20]
 800c5d2:	0038      	movs	r0, r7
 800c5d4:	f000 fb2e 	bl	800cc34 <__multadd>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	9005      	str	r0, [sp, #20]
 800c5dc:	220a      	movs	r2, #10
 800c5de:	0021      	movs	r1, r4
 800c5e0:	0038      	movs	r0, r7
 800c5e2:	42ac      	cmp	r4, r5
 800c5e4:	d106      	bne.n	800c5f4 <_dtoa_r+0xb74>
 800c5e6:	f000 fb25 	bl	800cc34 <__multadd>
 800c5ea:	0004      	movs	r4, r0
 800c5ec:	0005      	movs	r5, r0
 800c5ee:	9b08      	ldr	r3, [sp, #32]
 800c5f0:	930a      	str	r3, [sp, #40]	; 0x28
 800c5f2:	e778      	b.n	800c4e6 <_dtoa_r+0xa66>
 800c5f4:	f000 fb1e 	bl	800cc34 <__multadd>
 800c5f8:	0029      	movs	r1, r5
 800c5fa:	0004      	movs	r4, r0
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	220a      	movs	r2, #10
 800c600:	0038      	movs	r0, r7
 800c602:	f000 fb17 	bl	800cc34 <__multadd>
 800c606:	0005      	movs	r5, r0
 800c608:	e7f1      	b.n	800c5ee <_dtoa_r+0xb6e>
 800c60a:	9b07      	ldr	r3, [sp, #28]
 800c60c:	930c      	str	r3, [sp, #48]	; 0x30
 800c60e:	2400      	movs	r4, #0
 800c610:	0031      	movs	r1, r6
 800c612:	9805      	ldr	r0, [sp, #20]
 800c614:	f7ff f9a8 	bl	800b968 <quorem>
 800c618:	9b06      	ldr	r3, [sp, #24]
 800c61a:	3030      	adds	r0, #48	; 0x30
 800c61c:	5518      	strb	r0, [r3, r4]
 800c61e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c620:	3401      	adds	r4, #1
 800c622:	9007      	str	r0, [sp, #28]
 800c624:	42a3      	cmp	r3, r4
 800c626:	dd07      	ble.n	800c638 <_dtoa_r+0xbb8>
 800c628:	2300      	movs	r3, #0
 800c62a:	220a      	movs	r2, #10
 800c62c:	0038      	movs	r0, r7
 800c62e:	9905      	ldr	r1, [sp, #20]
 800c630:	f000 fb00 	bl	800cc34 <__multadd>
 800c634:	9005      	str	r0, [sp, #20]
 800c636:	e7eb      	b.n	800c610 <_dtoa_r+0xb90>
 800c638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c63a:	2001      	movs	r0, #1
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	dd00      	ble.n	800c642 <_dtoa_r+0xbc2>
 800c640:	0018      	movs	r0, r3
 800c642:	2400      	movs	r4, #0
 800c644:	9b06      	ldr	r3, [sp, #24]
 800c646:	181b      	adds	r3, r3, r0
 800c648:	9308      	str	r3, [sp, #32]
 800c64a:	9905      	ldr	r1, [sp, #20]
 800c64c:	2201      	movs	r2, #1
 800c64e:	0038      	movs	r0, r7
 800c650:	f000 fc9e 	bl	800cf90 <__lshift>
 800c654:	0031      	movs	r1, r6
 800c656:	9005      	str	r0, [sp, #20]
 800c658:	f000 fd08 	bl	800d06c <__mcmp>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	dc9b      	bgt.n	800c598 <_dtoa_r+0xb18>
 800c660:	d102      	bne.n	800c668 <_dtoa_r+0xbe8>
 800c662:	9b07      	ldr	r3, [sp, #28]
 800c664:	07db      	lsls	r3, r3, #31
 800c666:	d497      	bmi.n	800c598 <_dtoa_r+0xb18>
 800c668:	9b08      	ldr	r3, [sp, #32]
 800c66a:	9308      	str	r3, [sp, #32]
 800c66c:	3b01      	subs	r3, #1
 800c66e:	781a      	ldrb	r2, [r3, #0]
 800c670:	2a30      	cmp	r2, #48	; 0x30
 800c672:	d0fa      	beq.n	800c66a <_dtoa_r+0xbea>
 800c674:	e6db      	b.n	800c42e <_dtoa_r+0x9ae>
 800c676:	9a06      	ldr	r2, [sp, #24]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d18e      	bne.n	800c59a <_dtoa_r+0xb1a>
 800c67c:	9b02      	ldr	r3, [sp, #8]
 800c67e:	3301      	adds	r3, #1
 800c680:	9302      	str	r3, [sp, #8]
 800c682:	2331      	movs	r3, #49	; 0x31
 800c684:	e799      	b.n	800c5ba <_dtoa_r+0xb3a>
 800c686:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <_dtoa_r+0xc2c>)
 800c688:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c68a:	9306      	str	r3, [sp, #24]
 800c68c:	4b08      	ldr	r3, [pc, #32]	; (800c6b0 <_dtoa_r+0xc30>)
 800c68e:	2a00      	cmp	r2, #0
 800c690:	d001      	beq.n	800c696 <_dtoa_r+0xc16>
 800c692:	f7ff fa3f 	bl	800bb14 <_dtoa_r+0x94>
 800c696:	f7ff fa3f 	bl	800bb18 <_dtoa_r+0x98>
 800c69a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	dcb6      	bgt.n	800c60e <_dtoa_r+0xb8e>
 800c6a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	dd00      	ble.n	800c6a8 <_dtoa_r+0xc28>
 800c6a6:	e6ac      	b.n	800c402 <_dtoa_r+0x982>
 800c6a8:	e7b1      	b.n	800c60e <_dtoa_r+0xb8e>
 800c6aa:	46c0      	nop			; (mov r8, r8)
 800c6ac:	0800e7d8 	.word	0x0800e7d8
 800c6b0:	0800e7e0 	.word	0x0800e7e0

0800c6b4 <__sflush_r>:
 800c6b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6b6:	898b      	ldrh	r3, [r1, #12]
 800c6b8:	0005      	movs	r5, r0
 800c6ba:	000c      	movs	r4, r1
 800c6bc:	071a      	lsls	r2, r3, #28
 800c6be:	d45f      	bmi.n	800c780 <__sflush_r+0xcc>
 800c6c0:	684a      	ldr	r2, [r1, #4]
 800c6c2:	2a00      	cmp	r2, #0
 800c6c4:	dc04      	bgt.n	800c6d0 <__sflush_r+0x1c>
 800c6c6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c6c8:	2a00      	cmp	r2, #0
 800c6ca:	dc01      	bgt.n	800c6d0 <__sflush_r+0x1c>
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c6d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c6d2:	2f00      	cmp	r7, #0
 800c6d4:	d0fa      	beq.n	800c6cc <__sflush_r+0x18>
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	2180      	movs	r1, #128	; 0x80
 800c6da:	682e      	ldr	r6, [r5, #0]
 800c6dc:	602a      	str	r2, [r5, #0]
 800c6de:	001a      	movs	r2, r3
 800c6e0:	0149      	lsls	r1, r1, #5
 800c6e2:	400a      	ands	r2, r1
 800c6e4:	420b      	tst	r3, r1
 800c6e6:	d034      	beq.n	800c752 <__sflush_r+0x9e>
 800c6e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6ea:	89a3      	ldrh	r3, [r4, #12]
 800c6ec:	075b      	lsls	r3, r3, #29
 800c6ee:	d506      	bpl.n	800c6fe <__sflush_r+0x4a>
 800c6f0:	6863      	ldr	r3, [r4, #4]
 800c6f2:	1ac0      	subs	r0, r0, r3
 800c6f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d001      	beq.n	800c6fe <__sflush_r+0x4a>
 800c6fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6fc:	1ac0      	subs	r0, r0, r3
 800c6fe:	0002      	movs	r2, r0
 800c700:	6a21      	ldr	r1, [r4, #32]
 800c702:	2300      	movs	r3, #0
 800c704:	0028      	movs	r0, r5
 800c706:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c708:	47b8      	blx	r7
 800c70a:	89a1      	ldrh	r1, [r4, #12]
 800c70c:	1c43      	adds	r3, r0, #1
 800c70e:	d106      	bne.n	800c71e <__sflush_r+0x6a>
 800c710:	682b      	ldr	r3, [r5, #0]
 800c712:	2b1d      	cmp	r3, #29
 800c714:	d831      	bhi.n	800c77a <__sflush_r+0xc6>
 800c716:	4a2c      	ldr	r2, [pc, #176]	; (800c7c8 <__sflush_r+0x114>)
 800c718:	40da      	lsrs	r2, r3
 800c71a:	07d3      	lsls	r3, r2, #31
 800c71c:	d52d      	bpl.n	800c77a <__sflush_r+0xc6>
 800c71e:	2300      	movs	r3, #0
 800c720:	6063      	str	r3, [r4, #4]
 800c722:	6923      	ldr	r3, [r4, #16]
 800c724:	6023      	str	r3, [r4, #0]
 800c726:	04cb      	lsls	r3, r1, #19
 800c728:	d505      	bpl.n	800c736 <__sflush_r+0x82>
 800c72a:	1c43      	adds	r3, r0, #1
 800c72c:	d102      	bne.n	800c734 <__sflush_r+0x80>
 800c72e:	682b      	ldr	r3, [r5, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d100      	bne.n	800c736 <__sflush_r+0x82>
 800c734:	6560      	str	r0, [r4, #84]	; 0x54
 800c736:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c738:	602e      	str	r6, [r5, #0]
 800c73a:	2900      	cmp	r1, #0
 800c73c:	d0c6      	beq.n	800c6cc <__sflush_r+0x18>
 800c73e:	0023      	movs	r3, r4
 800c740:	3344      	adds	r3, #68	; 0x44
 800c742:	4299      	cmp	r1, r3
 800c744:	d002      	beq.n	800c74c <__sflush_r+0x98>
 800c746:	0028      	movs	r0, r5
 800c748:	f000 fdd4 	bl	800d2f4 <_free_r>
 800c74c:	2000      	movs	r0, #0
 800c74e:	6360      	str	r0, [r4, #52]	; 0x34
 800c750:	e7bd      	b.n	800c6ce <__sflush_r+0x1a>
 800c752:	2301      	movs	r3, #1
 800c754:	0028      	movs	r0, r5
 800c756:	6a21      	ldr	r1, [r4, #32]
 800c758:	47b8      	blx	r7
 800c75a:	1c43      	adds	r3, r0, #1
 800c75c:	d1c5      	bne.n	800c6ea <__sflush_r+0x36>
 800c75e:	682b      	ldr	r3, [r5, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d0c2      	beq.n	800c6ea <__sflush_r+0x36>
 800c764:	2b1d      	cmp	r3, #29
 800c766:	d001      	beq.n	800c76c <__sflush_r+0xb8>
 800c768:	2b16      	cmp	r3, #22
 800c76a:	d101      	bne.n	800c770 <__sflush_r+0xbc>
 800c76c:	602e      	str	r6, [r5, #0]
 800c76e:	e7ad      	b.n	800c6cc <__sflush_r+0x18>
 800c770:	2340      	movs	r3, #64	; 0x40
 800c772:	89a2      	ldrh	r2, [r4, #12]
 800c774:	4313      	orrs	r3, r2
 800c776:	81a3      	strh	r3, [r4, #12]
 800c778:	e7a9      	b.n	800c6ce <__sflush_r+0x1a>
 800c77a:	2340      	movs	r3, #64	; 0x40
 800c77c:	430b      	orrs	r3, r1
 800c77e:	e7fa      	b.n	800c776 <__sflush_r+0xc2>
 800c780:	690f      	ldr	r7, [r1, #16]
 800c782:	2f00      	cmp	r7, #0
 800c784:	d0a2      	beq.n	800c6cc <__sflush_r+0x18>
 800c786:	680a      	ldr	r2, [r1, #0]
 800c788:	600f      	str	r7, [r1, #0]
 800c78a:	1bd2      	subs	r2, r2, r7
 800c78c:	9201      	str	r2, [sp, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	079b      	lsls	r3, r3, #30
 800c792:	d100      	bne.n	800c796 <__sflush_r+0xe2>
 800c794:	694a      	ldr	r2, [r1, #20]
 800c796:	60a2      	str	r2, [r4, #8]
 800c798:	9b01      	ldr	r3, [sp, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	dc00      	bgt.n	800c7a0 <__sflush_r+0xec>
 800c79e:	e795      	b.n	800c6cc <__sflush_r+0x18>
 800c7a0:	003a      	movs	r2, r7
 800c7a2:	0028      	movs	r0, r5
 800c7a4:	9b01      	ldr	r3, [sp, #4]
 800c7a6:	6a21      	ldr	r1, [r4, #32]
 800c7a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7aa:	47b0      	blx	r6
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	dc06      	bgt.n	800c7be <__sflush_r+0x10a>
 800c7b0:	2340      	movs	r3, #64	; 0x40
 800c7b2:	2001      	movs	r0, #1
 800c7b4:	89a2      	ldrh	r2, [r4, #12]
 800c7b6:	4240      	negs	r0, r0
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	81a3      	strh	r3, [r4, #12]
 800c7bc:	e787      	b.n	800c6ce <__sflush_r+0x1a>
 800c7be:	9b01      	ldr	r3, [sp, #4]
 800c7c0:	183f      	adds	r7, r7, r0
 800c7c2:	1a1b      	subs	r3, r3, r0
 800c7c4:	9301      	str	r3, [sp, #4]
 800c7c6:	e7e7      	b.n	800c798 <__sflush_r+0xe4>
 800c7c8:	20400001 	.word	0x20400001

0800c7cc <_fflush_r>:
 800c7cc:	690b      	ldr	r3, [r1, #16]
 800c7ce:	b570      	push	{r4, r5, r6, lr}
 800c7d0:	0005      	movs	r5, r0
 800c7d2:	000c      	movs	r4, r1
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d102      	bne.n	800c7de <_fflush_r+0x12>
 800c7d8:	2500      	movs	r5, #0
 800c7da:	0028      	movs	r0, r5
 800c7dc:	bd70      	pop	{r4, r5, r6, pc}
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d004      	beq.n	800c7ec <_fflush_r+0x20>
 800c7e2:	6983      	ldr	r3, [r0, #24]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d101      	bne.n	800c7ec <_fflush_r+0x20>
 800c7e8:	f000 f892 	bl	800c910 <__sinit>
 800c7ec:	4b14      	ldr	r3, [pc, #80]	; (800c840 <_fflush_r+0x74>)
 800c7ee:	429c      	cmp	r4, r3
 800c7f0:	d11b      	bne.n	800c82a <_fflush_r+0x5e>
 800c7f2:	686c      	ldr	r4, [r5, #4]
 800c7f4:	220c      	movs	r2, #12
 800c7f6:	5ea3      	ldrsh	r3, [r4, r2]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d0ed      	beq.n	800c7d8 <_fflush_r+0xc>
 800c7fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7fe:	07d2      	lsls	r2, r2, #31
 800c800:	d404      	bmi.n	800c80c <_fflush_r+0x40>
 800c802:	059b      	lsls	r3, r3, #22
 800c804:	d402      	bmi.n	800c80c <_fflush_r+0x40>
 800c806:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c808:	f000 f927 	bl	800ca5a <__retarget_lock_acquire_recursive>
 800c80c:	0028      	movs	r0, r5
 800c80e:	0021      	movs	r1, r4
 800c810:	f7ff ff50 	bl	800c6b4 <__sflush_r>
 800c814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c816:	0005      	movs	r5, r0
 800c818:	07db      	lsls	r3, r3, #31
 800c81a:	d4de      	bmi.n	800c7da <_fflush_r+0xe>
 800c81c:	89a3      	ldrh	r3, [r4, #12]
 800c81e:	059b      	lsls	r3, r3, #22
 800c820:	d4db      	bmi.n	800c7da <_fflush_r+0xe>
 800c822:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c824:	f000 f91a 	bl	800ca5c <__retarget_lock_release_recursive>
 800c828:	e7d7      	b.n	800c7da <_fflush_r+0xe>
 800c82a:	4b06      	ldr	r3, [pc, #24]	; (800c844 <_fflush_r+0x78>)
 800c82c:	429c      	cmp	r4, r3
 800c82e:	d101      	bne.n	800c834 <_fflush_r+0x68>
 800c830:	68ac      	ldr	r4, [r5, #8]
 800c832:	e7df      	b.n	800c7f4 <_fflush_r+0x28>
 800c834:	4b04      	ldr	r3, [pc, #16]	; (800c848 <_fflush_r+0x7c>)
 800c836:	429c      	cmp	r4, r3
 800c838:	d1dc      	bne.n	800c7f4 <_fflush_r+0x28>
 800c83a:	68ec      	ldr	r4, [r5, #12]
 800c83c:	e7da      	b.n	800c7f4 <_fflush_r+0x28>
 800c83e:	46c0      	nop			; (mov r8, r8)
 800c840:	0800e888 	.word	0x0800e888
 800c844:	0800e8a8 	.word	0x0800e8a8
 800c848:	0800e868 	.word	0x0800e868

0800c84c <std>:
 800c84c:	2300      	movs	r3, #0
 800c84e:	b510      	push	{r4, lr}
 800c850:	0004      	movs	r4, r0
 800c852:	6003      	str	r3, [r0, #0]
 800c854:	6043      	str	r3, [r0, #4]
 800c856:	6083      	str	r3, [r0, #8]
 800c858:	8181      	strh	r1, [r0, #12]
 800c85a:	6643      	str	r3, [r0, #100]	; 0x64
 800c85c:	0019      	movs	r1, r3
 800c85e:	81c2      	strh	r2, [r0, #14]
 800c860:	6103      	str	r3, [r0, #16]
 800c862:	6143      	str	r3, [r0, #20]
 800c864:	6183      	str	r3, [r0, #24]
 800c866:	2208      	movs	r2, #8
 800c868:	305c      	adds	r0, #92	; 0x5c
 800c86a:	f7fe fa8e 	bl	800ad8a <memset>
 800c86e:	4b05      	ldr	r3, [pc, #20]	; (800c884 <std+0x38>)
 800c870:	6224      	str	r4, [r4, #32]
 800c872:	6263      	str	r3, [r4, #36]	; 0x24
 800c874:	4b04      	ldr	r3, [pc, #16]	; (800c888 <std+0x3c>)
 800c876:	62a3      	str	r3, [r4, #40]	; 0x28
 800c878:	4b04      	ldr	r3, [pc, #16]	; (800c88c <std+0x40>)
 800c87a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c87c:	4b04      	ldr	r3, [pc, #16]	; (800c890 <std+0x44>)
 800c87e:	6323      	str	r3, [r4, #48]	; 0x30
 800c880:	bd10      	pop	{r4, pc}
 800c882:	46c0      	nop			; (mov r8, r8)
 800c884:	0800d835 	.word	0x0800d835
 800c888:	0800d85d 	.word	0x0800d85d
 800c88c:	0800d895 	.word	0x0800d895
 800c890:	0800d8c1 	.word	0x0800d8c1

0800c894 <_cleanup_r>:
 800c894:	b510      	push	{r4, lr}
 800c896:	4902      	ldr	r1, [pc, #8]	; (800c8a0 <_cleanup_r+0xc>)
 800c898:	f000 f8ba 	bl	800ca10 <_fwalk_reent>
 800c89c:	bd10      	pop	{r4, pc}
 800c89e:	46c0      	nop			; (mov r8, r8)
 800c8a0:	0800c7cd 	.word	0x0800c7cd

0800c8a4 <__sfmoreglue>:
 800c8a4:	b570      	push	{r4, r5, r6, lr}
 800c8a6:	2568      	movs	r5, #104	; 0x68
 800c8a8:	1e4a      	subs	r2, r1, #1
 800c8aa:	4355      	muls	r5, r2
 800c8ac:	000e      	movs	r6, r1
 800c8ae:	0029      	movs	r1, r5
 800c8b0:	3174      	adds	r1, #116	; 0x74
 800c8b2:	f000 fd8b 	bl	800d3cc <_malloc_r>
 800c8b6:	1e04      	subs	r4, r0, #0
 800c8b8:	d008      	beq.n	800c8cc <__sfmoreglue+0x28>
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	002a      	movs	r2, r5
 800c8be:	6001      	str	r1, [r0, #0]
 800c8c0:	6046      	str	r6, [r0, #4]
 800c8c2:	300c      	adds	r0, #12
 800c8c4:	60a0      	str	r0, [r4, #8]
 800c8c6:	3268      	adds	r2, #104	; 0x68
 800c8c8:	f7fe fa5f 	bl	800ad8a <memset>
 800c8cc:	0020      	movs	r0, r4
 800c8ce:	bd70      	pop	{r4, r5, r6, pc}

0800c8d0 <__sfp_lock_acquire>:
 800c8d0:	b510      	push	{r4, lr}
 800c8d2:	4802      	ldr	r0, [pc, #8]	; (800c8dc <__sfp_lock_acquire+0xc>)
 800c8d4:	f000 f8c1 	bl	800ca5a <__retarget_lock_acquire_recursive>
 800c8d8:	bd10      	pop	{r4, pc}
 800c8da:	46c0      	nop			; (mov r8, r8)
 800c8dc:	20000665 	.word	0x20000665

0800c8e0 <__sfp_lock_release>:
 800c8e0:	b510      	push	{r4, lr}
 800c8e2:	4802      	ldr	r0, [pc, #8]	; (800c8ec <__sfp_lock_release+0xc>)
 800c8e4:	f000 f8ba 	bl	800ca5c <__retarget_lock_release_recursive>
 800c8e8:	bd10      	pop	{r4, pc}
 800c8ea:	46c0      	nop			; (mov r8, r8)
 800c8ec:	20000665 	.word	0x20000665

0800c8f0 <__sinit_lock_acquire>:
 800c8f0:	b510      	push	{r4, lr}
 800c8f2:	4802      	ldr	r0, [pc, #8]	; (800c8fc <__sinit_lock_acquire+0xc>)
 800c8f4:	f000 f8b1 	bl	800ca5a <__retarget_lock_acquire_recursive>
 800c8f8:	bd10      	pop	{r4, pc}
 800c8fa:	46c0      	nop			; (mov r8, r8)
 800c8fc:	20000666 	.word	0x20000666

0800c900 <__sinit_lock_release>:
 800c900:	b510      	push	{r4, lr}
 800c902:	4802      	ldr	r0, [pc, #8]	; (800c90c <__sinit_lock_release+0xc>)
 800c904:	f000 f8aa 	bl	800ca5c <__retarget_lock_release_recursive>
 800c908:	bd10      	pop	{r4, pc}
 800c90a:	46c0      	nop			; (mov r8, r8)
 800c90c:	20000666 	.word	0x20000666

0800c910 <__sinit>:
 800c910:	b513      	push	{r0, r1, r4, lr}
 800c912:	0004      	movs	r4, r0
 800c914:	f7ff ffec 	bl	800c8f0 <__sinit_lock_acquire>
 800c918:	69a3      	ldr	r3, [r4, #24]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d002      	beq.n	800c924 <__sinit+0x14>
 800c91e:	f7ff ffef 	bl	800c900 <__sinit_lock_release>
 800c922:	bd13      	pop	{r0, r1, r4, pc}
 800c924:	64a3      	str	r3, [r4, #72]	; 0x48
 800c926:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c928:	6523      	str	r3, [r4, #80]	; 0x50
 800c92a:	4b13      	ldr	r3, [pc, #76]	; (800c978 <__sinit+0x68>)
 800c92c:	4a13      	ldr	r2, [pc, #76]	; (800c97c <__sinit+0x6c>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	62a2      	str	r2, [r4, #40]	; 0x28
 800c932:	9301      	str	r3, [sp, #4]
 800c934:	42a3      	cmp	r3, r4
 800c936:	d101      	bne.n	800c93c <__sinit+0x2c>
 800c938:	2301      	movs	r3, #1
 800c93a:	61a3      	str	r3, [r4, #24]
 800c93c:	0020      	movs	r0, r4
 800c93e:	f000 f81f 	bl	800c980 <__sfp>
 800c942:	6060      	str	r0, [r4, #4]
 800c944:	0020      	movs	r0, r4
 800c946:	f000 f81b 	bl	800c980 <__sfp>
 800c94a:	60a0      	str	r0, [r4, #8]
 800c94c:	0020      	movs	r0, r4
 800c94e:	f000 f817 	bl	800c980 <__sfp>
 800c952:	2200      	movs	r2, #0
 800c954:	2104      	movs	r1, #4
 800c956:	60e0      	str	r0, [r4, #12]
 800c958:	6860      	ldr	r0, [r4, #4]
 800c95a:	f7ff ff77 	bl	800c84c <std>
 800c95e:	2201      	movs	r2, #1
 800c960:	2109      	movs	r1, #9
 800c962:	68a0      	ldr	r0, [r4, #8]
 800c964:	f7ff ff72 	bl	800c84c <std>
 800c968:	2202      	movs	r2, #2
 800c96a:	2112      	movs	r1, #18
 800c96c:	68e0      	ldr	r0, [r4, #12]
 800c96e:	f7ff ff6d 	bl	800c84c <std>
 800c972:	2301      	movs	r3, #1
 800c974:	61a3      	str	r3, [r4, #24]
 800c976:	e7d2      	b.n	800c91e <__sinit+0xe>
 800c978:	0800e7a0 	.word	0x0800e7a0
 800c97c:	0800c895 	.word	0x0800c895

0800c980 <__sfp>:
 800c980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c982:	0007      	movs	r7, r0
 800c984:	f7ff ffa4 	bl	800c8d0 <__sfp_lock_acquire>
 800c988:	4b1f      	ldr	r3, [pc, #124]	; (800ca08 <__sfp+0x88>)
 800c98a:	681e      	ldr	r6, [r3, #0]
 800c98c:	69b3      	ldr	r3, [r6, #24]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d102      	bne.n	800c998 <__sfp+0x18>
 800c992:	0030      	movs	r0, r6
 800c994:	f7ff ffbc 	bl	800c910 <__sinit>
 800c998:	3648      	adds	r6, #72	; 0x48
 800c99a:	68b4      	ldr	r4, [r6, #8]
 800c99c:	6873      	ldr	r3, [r6, #4]
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	d504      	bpl.n	800c9ac <__sfp+0x2c>
 800c9a2:	6833      	ldr	r3, [r6, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d022      	beq.n	800c9ee <__sfp+0x6e>
 800c9a8:	6836      	ldr	r6, [r6, #0]
 800c9aa:	e7f6      	b.n	800c99a <__sfp+0x1a>
 800c9ac:	220c      	movs	r2, #12
 800c9ae:	5ea5      	ldrsh	r5, [r4, r2]
 800c9b0:	2d00      	cmp	r5, #0
 800c9b2:	d11a      	bne.n	800c9ea <__sfp+0x6a>
 800c9b4:	0020      	movs	r0, r4
 800c9b6:	4b15      	ldr	r3, [pc, #84]	; (800ca0c <__sfp+0x8c>)
 800c9b8:	3058      	adds	r0, #88	; 0x58
 800c9ba:	60e3      	str	r3, [r4, #12]
 800c9bc:	6665      	str	r5, [r4, #100]	; 0x64
 800c9be:	f000 f84b 	bl	800ca58 <__retarget_lock_init_recursive>
 800c9c2:	f7ff ff8d 	bl	800c8e0 <__sfp_lock_release>
 800c9c6:	0020      	movs	r0, r4
 800c9c8:	2208      	movs	r2, #8
 800c9ca:	0029      	movs	r1, r5
 800c9cc:	6025      	str	r5, [r4, #0]
 800c9ce:	60a5      	str	r5, [r4, #8]
 800c9d0:	6065      	str	r5, [r4, #4]
 800c9d2:	6125      	str	r5, [r4, #16]
 800c9d4:	6165      	str	r5, [r4, #20]
 800c9d6:	61a5      	str	r5, [r4, #24]
 800c9d8:	305c      	adds	r0, #92	; 0x5c
 800c9da:	f7fe f9d6 	bl	800ad8a <memset>
 800c9de:	6365      	str	r5, [r4, #52]	; 0x34
 800c9e0:	63a5      	str	r5, [r4, #56]	; 0x38
 800c9e2:	64a5      	str	r5, [r4, #72]	; 0x48
 800c9e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c9e6:	0020      	movs	r0, r4
 800c9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9ea:	3468      	adds	r4, #104	; 0x68
 800c9ec:	e7d7      	b.n	800c99e <__sfp+0x1e>
 800c9ee:	2104      	movs	r1, #4
 800c9f0:	0038      	movs	r0, r7
 800c9f2:	f7ff ff57 	bl	800c8a4 <__sfmoreglue>
 800c9f6:	1e04      	subs	r4, r0, #0
 800c9f8:	6030      	str	r0, [r6, #0]
 800c9fa:	d1d5      	bne.n	800c9a8 <__sfp+0x28>
 800c9fc:	f7ff ff70 	bl	800c8e0 <__sfp_lock_release>
 800ca00:	230c      	movs	r3, #12
 800ca02:	603b      	str	r3, [r7, #0]
 800ca04:	e7ef      	b.n	800c9e6 <__sfp+0x66>
 800ca06:	46c0      	nop			; (mov r8, r8)
 800ca08:	0800e7a0 	.word	0x0800e7a0
 800ca0c:	ffff0001 	.word	0xffff0001

0800ca10 <_fwalk_reent>:
 800ca10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca12:	0004      	movs	r4, r0
 800ca14:	0006      	movs	r6, r0
 800ca16:	2700      	movs	r7, #0
 800ca18:	9101      	str	r1, [sp, #4]
 800ca1a:	3448      	adds	r4, #72	; 0x48
 800ca1c:	6863      	ldr	r3, [r4, #4]
 800ca1e:	68a5      	ldr	r5, [r4, #8]
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	9b00      	ldr	r3, [sp, #0]
 800ca24:	3b01      	subs	r3, #1
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	d504      	bpl.n	800ca34 <_fwalk_reent+0x24>
 800ca2a:	6824      	ldr	r4, [r4, #0]
 800ca2c:	2c00      	cmp	r4, #0
 800ca2e:	d1f5      	bne.n	800ca1c <_fwalk_reent+0xc>
 800ca30:	0038      	movs	r0, r7
 800ca32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca34:	89ab      	ldrh	r3, [r5, #12]
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d908      	bls.n	800ca4c <_fwalk_reent+0x3c>
 800ca3a:	220e      	movs	r2, #14
 800ca3c:	5eab      	ldrsh	r3, [r5, r2]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	d004      	beq.n	800ca4c <_fwalk_reent+0x3c>
 800ca42:	0029      	movs	r1, r5
 800ca44:	0030      	movs	r0, r6
 800ca46:	9b01      	ldr	r3, [sp, #4]
 800ca48:	4798      	blx	r3
 800ca4a:	4307      	orrs	r7, r0
 800ca4c:	3568      	adds	r5, #104	; 0x68
 800ca4e:	e7e8      	b.n	800ca22 <_fwalk_reent+0x12>

0800ca50 <_localeconv_r>:
 800ca50:	4800      	ldr	r0, [pc, #0]	; (800ca54 <_localeconv_r+0x4>)
 800ca52:	4770      	bx	lr
 800ca54:	20000184 	.word	0x20000184

0800ca58 <__retarget_lock_init_recursive>:
 800ca58:	4770      	bx	lr

0800ca5a <__retarget_lock_acquire_recursive>:
 800ca5a:	4770      	bx	lr

0800ca5c <__retarget_lock_release_recursive>:
 800ca5c:	4770      	bx	lr
	...

0800ca60 <__swhatbuf_r>:
 800ca60:	b570      	push	{r4, r5, r6, lr}
 800ca62:	000e      	movs	r6, r1
 800ca64:	001d      	movs	r5, r3
 800ca66:	230e      	movs	r3, #14
 800ca68:	5ec9      	ldrsh	r1, [r1, r3]
 800ca6a:	0014      	movs	r4, r2
 800ca6c:	b096      	sub	sp, #88	; 0x58
 800ca6e:	2900      	cmp	r1, #0
 800ca70:	da08      	bge.n	800ca84 <__swhatbuf_r+0x24>
 800ca72:	220c      	movs	r2, #12
 800ca74:	5eb3      	ldrsh	r3, [r6, r2]
 800ca76:	2200      	movs	r2, #0
 800ca78:	602a      	str	r2, [r5, #0]
 800ca7a:	061b      	lsls	r3, r3, #24
 800ca7c:	d411      	bmi.n	800caa2 <__swhatbuf_r+0x42>
 800ca7e:	2380      	movs	r3, #128	; 0x80
 800ca80:	00db      	lsls	r3, r3, #3
 800ca82:	e00f      	b.n	800caa4 <__swhatbuf_r+0x44>
 800ca84:	466a      	mov	r2, sp
 800ca86:	f000 ff75 	bl	800d974 <_fstat_r>
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	dbf1      	blt.n	800ca72 <__swhatbuf_r+0x12>
 800ca8e:	23f0      	movs	r3, #240	; 0xf0
 800ca90:	9901      	ldr	r1, [sp, #4]
 800ca92:	021b      	lsls	r3, r3, #8
 800ca94:	4019      	ands	r1, r3
 800ca96:	4b05      	ldr	r3, [pc, #20]	; (800caac <__swhatbuf_r+0x4c>)
 800ca98:	18c9      	adds	r1, r1, r3
 800ca9a:	424b      	negs	r3, r1
 800ca9c:	4159      	adcs	r1, r3
 800ca9e:	6029      	str	r1, [r5, #0]
 800caa0:	e7ed      	b.n	800ca7e <__swhatbuf_r+0x1e>
 800caa2:	2340      	movs	r3, #64	; 0x40
 800caa4:	2000      	movs	r0, #0
 800caa6:	6023      	str	r3, [r4, #0]
 800caa8:	b016      	add	sp, #88	; 0x58
 800caaa:	bd70      	pop	{r4, r5, r6, pc}
 800caac:	ffffe000 	.word	0xffffe000

0800cab0 <__smakebuf_r>:
 800cab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cab2:	2602      	movs	r6, #2
 800cab4:	898b      	ldrh	r3, [r1, #12]
 800cab6:	0005      	movs	r5, r0
 800cab8:	000c      	movs	r4, r1
 800caba:	4233      	tst	r3, r6
 800cabc:	d006      	beq.n	800cacc <__smakebuf_r+0x1c>
 800cabe:	0023      	movs	r3, r4
 800cac0:	3347      	adds	r3, #71	; 0x47
 800cac2:	6023      	str	r3, [r4, #0]
 800cac4:	6123      	str	r3, [r4, #16]
 800cac6:	2301      	movs	r3, #1
 800cac8:	6163      	str	r3, [r4, #20]
 800caca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800cacc:	466a      	mov	r2, sp
 800cace:	ab01      	add	r3, sp, #4
 800cad0:	f7ff ffc6 	bl	800ca60 <__swhatbuf_r>
 800cad4:	9900      	ldr	r1, [sp, #0]
 800cad6:	0007      	movs	r7, r0
 800cad8:	0028      	movs	r0, r5
 800cada:	f000 fc77 	bl	800d3cc <_malloc_r>
 800cade:	2800      	cmp	r0, #0
 800cae0:	d108      	bne.n	800caf4 <__smakebuf_r+0x44>
 800cae2:	220c      	movs	r2, #12
 800cae4:	5ea3      	ldrsh	r3, [r4, r2]
 800cae6:	059a      	lsls	r2, r3, #22
 800cae8:	d4ef      	bmi.n	800caca <__smakebuf_r+0x1a>
 800caea:	2203      	movs	r2, #3
 800caec:	4393      	bics	r3, r2
 800caee:	431e      	orrs	r6, r3
 800caf0:	81a6      	strh	r6, [r4, #12]
 800caf2:	e7e4      	b.n	800cabe <__smakebuf_r+0xe>
 800caf4:	4b0f      	ldr	r3, [pc, #60]	; (800cb34 <__smakebuf_r+0x84>)
 800caf6:	62ab      	str	r3, [r5, #40]	; 0x28
 800caf8:	2380      	movs	r3, #128	; 0x80
 800cafa:	89a2      	ldrh	r2, [r4, #12]
 800cafc:	6020      	str	r0, [r4, #0]
 800cafe:	4313      	orrs	r3, r2
 800cb00:	81a3      	strh	r3, [r4, #12]
 800cb02:	9b00      	ldr	r3, [sp, #0]
 800cb04:	6120      	str	r0, [r4, #16]
 800cb06:	6163      	str	r3, [r4, #20]
 800cb08:	9b01      	ldr	r3, [sp, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00d      	beq.n	800cb2a <__smakebuf_r+0x7a>
 800cb0e:	0028      	movs	r0, r5
 800cb10:	230e      	movs	r3, #14
 800cb12:	5ee1      	ldrsh	r1, [r4, r3]
 800cb14:	f000 ff40 	bl	800d998 <_isatty_r>
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	d006      	beq.n	800cb2a <__smakebuf_r+0x7a>
 800cb1c:	2203      	movs	r2, #3
 800cb1e:	89a3      	ldrh	r3, [r4, #12]
 800cb20:	4393      	bics	r3, r2
 800cb22:	001a      	movs	r2, r3
 800cb24:	2301      	movs	r3, #1
 800cb26:	4313      	orrs	r3, r2
 800cb28:	81a3      	strh	r3, [r4, #12]
 800cb2a:	89a0      	ldrh	r0, [r4, #12]
 800cb2c:	4307      	orrs	r7, r0
 800cb2e:	81a7      	strh	r7, [r4, #12]
 800cb30:	e7cb      	b.n	800caca <__smakebuf_r+0x1a>
 800cb32:	46c0      	nop			; (mov r8, r8)
 800cb34:	0800c895 	.word	0x0800c895

0800cb38 <malloc>:
 800cb38:	b510      	push	{r4, lr}
 800cb3a:	4b03      	ldr	r3, [pc, #12]	; (800cb48 <malloc+0x10>)
 800cb3c:	0001      	movs	r1, r0
 800cb3e:	6818      	ldr	r0, [r3, #0]
 800cb40:	f000 fc44 	bl	800d3cc <_malloc_r>
 800cb44:	bd10      	pop	{r4, pc}
 800cb46:	46c0      	nop			; (mov r8, r8)
 800cb48:	20000030 	.word	0x20000030

0800cb4c <memchr>:
 800cb4c:	b2c9      	uxtb	r1, r1
 800cb4e:	1882      	adds	r2, r0, r2
 800cb50:	4290      	cmp	r0, r2
 800cb52:	d101      	bne.n	800cb58 <memchr+0xc>
 800cb54:	2000      	movs	r0, #0
 800cb56:	4770      	bx	lr
 800cb58:	7803      	ldrb	r3, [r0, #0]
 800cb5a:	428b      	cmp	r3, r1
 800cb5c:	d0fb      	beq.n	800cb56 <memchr+0xa>
 800cb5e:	3001      	adds	r0, #1
 800cb60:	e7f6      	b.n	800cb50 <memchr+0x4>
	...

0800cb64 <_Balloc>:
 800cb64:	b570      	push	{r4, r5, r6, lr}
 800cb66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb68:	0006      	movs	r6, r0
 800cb6a:	000c      	movs	r4, r1
 800cb6c:	2d00      	cmp	r5, #0
 800cb6e:	d10e      	bne.n	800cb8e <_Balloc+0x2a>
 800cb70:	2010      	movs	r0, #16
 800cb72:	f7ff ffe1 	bl	800cb38 <malloc>
 800cb76:	1e02      	subs	r2, r0, #0
 800cb78:	6270      	str	r0, [r6, #36]	; 0x24
 800cb7a:	d104      	bne.n	800cb86 <_Balloc+0x22>
 800cb7c:	2166      	movs	r1, #102	; 0x66
 800cb7e:	4b19      	ldr	r3, [pc, #100]	; (800cbe4 <_Balloc+0x80>)
 800cb80:	4819      	ldr	r0, [pc, #100]	; (800cbe8 <_Balloc+0x84>)
 800cb82:	f000 feb7 	bl	800d8f4 <__assert_func>
 800cb86:	6045      	str	r5, [r0, #4]
 800cb88:	6085      	str	r5, [r0, #8]
 800cb8a:	6005      	str	r5, [r0, #0]
 800cb8c:	60c5      	str	r5, [r0, #12]
 800cb8e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800cb90:	68eb      	ldr	r3, [r5, #12]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d013      	beq.n	800cbbe <_Balloc+0x5a>
 800cb96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cb98:	00a2      	lsls	r2, r4, #2
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	189b      	adds	r3, r3, r2
 800cb9e:	6818      	ldr	r0, [r3, #0]
 800cba0:	2800      	cmp	r0, #0
 800cba2:	d118      	bne.n	800cbd6 <_Balloc+0x72>
 800cba4:	2101      	movs	r1, #1
 800cba6:	000d      	movs	r5, r1
 800cba8:	40a5      	lsls	r5, r4
 800cbaa:	1d6a      	adds	r2, r5, #5
 800cbac:	0030      	movs	r0, r6
 800cbae:	0092      	lsls	r2, r2, #2
 800cbb0:	f000 fb74 	bl	800d29c <_calloc_r>
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	d00c      	beq.n	800cbd2 <_Balloc+0x6e>
 800cbb8:	6044      	str	r4, [r0, #4]
 800cbba:	6085      	str	r5, [r0, #8]
 800cbbc:	e00d      	b.n	800cbda <_Balloc+0x76>
 800cbbe:	2221      	movs	r2, #33	; 0x21
 800cbc0:	2104      	movs	r1, #4
 800cbc2:	0030      	movs	r0, r6
 800cbc4:	f000 fb6a 	bl	800d29c <_calloc_r>
 800cbc8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cbca:	60e8      	str	r0, [r5, #12]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d1e1      	bne.n	800cb96 <_Balloc+0x32>
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	bd70      	pop	{r4, r5, r6, pc}
 800cbd6:	6802      	ldr	r2, [r0, #0]
 800cbd8:	601a      	str	r2, [r3, #0]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	6103      	str	r3, [r0, #16]
 800cbde:	60c3      	str	r3, [r0, #12]
 800cbe0:	e7f8      	b.n	800cbd4 <_Balloc+0x70>
 800cbe2:	46c0      	nop			; (mov r8, r8)
 800cbe4:	0800e7e5 	.word	0x0800e7e5
 800cbe8:	0800e8c8 	.word	0x0800e8c8

0800cbec <_Bfree>:
 800cbec:	b570      	push	{r4, r5, r6, lr}
 800cbee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cbf0:	0005      	movs	r5, r0
 800cbf2:	000c      	movs	r4, r1
 800cbf4:	2e00      	cmp	r6, #0
 800cbf6:	d10e      	bne.n	800cc16 <_Bfree+0x2a>
 800cbf8:	2010      	movs	r0, #16
 800cbfa:	f7ff ff9d 	bl	800cb38 <malloc>
 800cbfe:	1e02      	subs	r2, r0, #0
 800cc00:	6268      	str	r0, [r5, #36]	; 0x24
 800cc02:	d104      	bne.n	800cc0e <_Bfree+0x22>
 800cc04:	218a      	movs	r1, #138	; 0x8a
 800cc06:	4b09      	ldr	r3, [pc, #36]	; (800cc2c <_Bfree+0x40>)
 800cc08:	4809      	ldr	r0, [pc, #36]	; (800cc30 <_Bfree+0x44>)
 800cc0a:	f000 fe73 	bl	800d8f4 <__assert_func>
 800cc0e:	6046      	str	r6, [r0, #4]
 800cc10:	6086      	str	r6, [r0, #8]
 800cc12:	6006      	str	r6, [r0, #0]
 800cc14:	60c6      	str	r6, [r0, #12]
 800cc16:	2c00      	cmp	r4, #0
 800cc18:	d007      	beq.n	800cc2a <_Bfree+0x3e>
 800cc1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cc1c:	6862      	ldr	r2, [r4, #4]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	0092      	lsls	r2, r2, #2
 800cc22:	189b      	adds	r3, r3, r2
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	6022      	str	r2, [r4, #0]
 800cc28:	601c      	str	r4, [r3, #0]
 800cc2a:	bd70      	pop	{r4, r5, r6, pc}
 800cc2c:	0800e7e5 	.word	0x0800e7e5
 800cc30:	0800e8c8 	.word	0x0800e8c8

0800cc34 <__multadd>:
 800cc34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc36:	000e      	movs	r6, r1
 800cc38:	9001      	str	r0, [sp, #4]
 800cc3a:	000c      	movs	r4, r1
 800cc3c:	001d      	movs	r5, r3
 800cc3e:	2000      	movs	r0, #0
 800cc40:	690f      	ldr	r7, [r1, #16]
 800cc42:	3614      	adds	r6, #20
 800cc44:	6833      	ldr	r3, [r6, #0]
 800cc46:	3001      	adds	r0, #1
 800cc48:	b299      	uxth	r1, r3
 800cc4a:	4351      	muls	r1, r2
 800cc4c:	0c1b      	lsrs	r3, r3, #16
 800cc4e:	4353      	muls	r3, r2
 800cc50:	1949      	adds	r1, r1, r5
 800cc52:	0c0d      	lsrs	r5, r1, #16
 800cc54:	195b      	adds	r3, r3, r5
 800cc56:	0c1d      	lsrs	r5, r3, #16
 800cc58:	b289      	uxth	r1, r1
 800cc5a:	041b      	lsls	r3, r3, #16
 800cc5c:	185b      	adds	r3, r3, r1
 800cc5e:	c608      	stmia	r6!, {r3}
 800cc60:	4287      	cmp	r7, r0
 800cc62:	dcef      	bgt.n	800cc44 <__multadd+0x10>
 800cc64:	2d00      	cmp	r5, #0
 800cc66:	d022      	beq.n	800ccae <__multadd+0x7a>
 800cc68:	68a3      	ldr	r3, [r4, #8]
 800cc6a:	42bb      	cmp	r3, r7
 800cc6c:	dc19      	bgt.n	800cca2 <__multadd+0x6e>
 800cc6e:	6863      	ldr	r3, [r4, #4]
 800cc70:	9801      	ldr	r0, [sp, #4]
 800cc72:	1c59      	adds	r1, r3, #1
 800cc74:	f7ff ff76 	bl	800cb64 <_Balloc>
 800cc78:	1e06      	subs	r6, r0, #0
 800cc7a:	d105      	bne.n	800cc88 <__multadd+0x54>
 800cc7c:	0002      	movs	r2, r0
 800cc7e:	21b5      	movs	r1, #181	; 0xb5
 800cc80:	4b0c      	ldr	r3, [pc, #48]	; (800ccb4 <__multadd+0x80>)
 800cc82:	480d      	ldr	r0, [pc, #52]	; (800ccb8 <__multadd+0x84>)
 800cc84:	f000 fe36 	bl	800d8f4 <__assert_func>
 800cc88:	0021      	movs	r1, r4
 800cc8a:	6923      	ldr	r3, [r4, #16]
 800cc8c:	310c      	adds	r1, #12
 800cc8e:	1c9a      	adds	r2, r3, #2
 800cc90:	0092      	lsls	r2, r2, #2
 800cc92:	300c      	adds	r0, #12
 800cc94:	f7fe f870 	bl	800ad78 <memcpy>
 800cc98:	0021      	movs	r1, r4
 800cc9a:	9801      	ldr	r0, [sp, #4]
 800cc9c:	f7ff ffa6 	bl	800cbec <_Bfree>
 800cca0:	0034      	movs	r4, r6
 800cca2:	1d3b      	adds	r3, r7, #4
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	18e3      	adds	r3, r4, r3
 800cca8:	605d      	str	r5, [r3, #4]
 800ccaa:	1c7b      	adds	r3, r7, #1
 800ccac:	6123      	str	r3, [r4, #16]
 800ccae:	0020      	movs	r0, r4
 800ccb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ccb2:	46c0      	nop			; (mov r8, r8)
 800ccb4:	0800e857 	.word	0x0800e857
 800ccb8:	0800e8c8 	.word	0x0800e8c8

0800ccbc <__hi0bits>:
 800ccbc:	0003      	movs	r3, r0
 800ccbe:	0c02      	lsrs	r2, r0, #16
 800ccc0:	2000      	movs	r0, #0
 800ccc2:	4282      	cmp	r2, r0
 800ccc4:	d101      	bne.n	800ccca <__hi0bits+0xe>
 800ccc6:	041b      	lsls	r3, r3, #16
 800ccc8:	3010      	adds	r0, #16
 800ccca:	0e1a      	lsrs	r2, r3, #24
 800cccc:	d101      	bne.n	800ccd2 <__hi0bits+0x16>
 800ccce:	3008      	adds	r0, #8
 800ccd0:	021b      	lsls	r3, r3, #8
 800ccd2:	0f1a      	lsrs	r2, r3, #28
 800ccd4:	d101      	bne.n	800ccda <__hi0bits+0x1e>
 800ccd6:	3004      	adds	r0, #4
 800ccd8:	011b      	lsls	r3, r3, #4
 800ccda:	0f9a      	lsrs	r2, r3, #30
 800ccdc:	d101      	bne.n	800cce2 <__hi0bits+0x26>
 800ccde:	3002      	adds	r0, #2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	db03      	blt.n	800ccee <__hi0bits+0x32>
 800cce6:	3001      	adds	r0, #1
 800cce8:	005b      	lsls	r3, r3, #1
 800ccea:	d400      	bmi.n	800ccee <__hi0bits+0x32>
 800ccec:	2020      	movs	r0, #32
 800ccee:	4770      	bx	lr

0800ccf0 <__lo0bits>:
 800ccf0:	6803      	ldr	r3, [r0, #0]
 800ccf2:	0002      	movs	r2, r0
 800ccf4:	2107      	movs	r1, #7
 800ccf6:	0018      	movs	r0, r3
 800ccf8:	4008      	ands	r0, r1
 800ccfa:	420b      	tst	r3, r1
 800ccfc:	d00d      	beq.n	800cd1a <__lo0bits+0x2a>
 800ccfe:	3906      	subs	r1, #6
 800cd00:	2000      	movs	r0, #0
 800cd02:	420b      	tst	r3, r1
 800cd04:	d105      	bne.n	800cd12 <__lo0bits+0x22>
 800cd06:	3002      	adds	r0, #2
 800cd08:	4203      	tst	r3, r0
 800cd0a:	d003      	beq.n	800cd14 <__lo0bits+0x24>
 800cd0c:	40cb      	lsrs	r3, r1
 800cd0e:	0008      	movs	r0, r1
 800cd10:	6013      	str	r3, [r2, #0]
 800cd12:	4770      	bx	lr
 800cd14:	089b      	lsrs	r3, r3, #2
 800cd16:	6013      	str	r3, [r2, #0]
 800cd18:	e7fb      	b.n	800cd12 <__lo0bits+0x22>
 800cd1a:	b299      	uxth	r1, r3
 800cd1c:	2900      	cmp	r1, #0
 800cd1e:	d101      	bne.n	800cd24 <__lo0bits+0x34>
 800cd20:	2010      	movs	r0, #16
 800cd22:	0c1b      	lsrs	r3, r3, #16
 800cd24:	b2d9      	uxtb	r1, r3
 800cd26:	2900      	cmp	r1, #0
 800cd28:	d101      	bne.n	800cd2e <__lo0bits+0x3e>
 800cd2a:	3008      	adds	r0, #8
 800cd2c:	0a1b      	lsrs	r3, r3, #8
 800cd2e:	0719      	lsls	r1, r3, #28
 800cd30:	d101      	bne.n	800cd36 <__lo0bits+0x46>
 800cd32:	3004      	adds	r0, #4
 800cd34:	091b      	lsrs	r3, r3, #4
 800cd36:	0799      	lsls	r1, r3, #30
 800cd38:	d101      	bne.n	800cd3e <__lo0bits+0x4e>
 800cd3a:	3002      	adds	r0, #2
 800cd3c:	089b      	lsrs	r3, r3, #2
 800cd3e:	07d9      	lsls	r1, r3, #31
 800cd40:	d4e9      	bmi.n	800cd16 <__lo0bits+0x26>
 800cd42:	3001      	adds	r0, #1
 800cd44:	085b      	lsrs	r3, r3, #1
 800cd46:	d1e6      	bne.n	800cd16 <__lo0bits+0x26>
 800cd48:	2020      	movs	r0, #32
 800cd4a:	e7e2      	b.n	800cd12 <__lo0bits+0x22>

0800cd4c <__i2b>:
 800cd4c:	b510      	push	{r4, lr}
 800cd4e:	000c      	movs	r4, r1
 800cd50:	2101      	movs	r1, #1
 800cd52:	f7ff ff07 	bl	800cb64 <_Balloc>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d106      	bne.n	800cd68 <__i2b+0x1c>
 800cd5a:	21a0      	movs	r1, #160	; 0xa0
 800cd5c:	0002      	movs	r2, r0
 800cd5e:	4b04      	ldr	r3, [pc, #16]	; (800cd70 <__i2b+0x24>)
 800cd60:	4804      	ldr	r0, [pc, #16]	; (800cd74 <__i2b+0x28>)
 800cd62:	0049      	lsls	r1, r1, #1
 800cd64:	f000 fdc6 	bl	800d8f4 <__assert_func>
 800cd68:	2301      	movs	r3, #1
 800cd6a:	6144      	str	r4, [r0, #20]
 800cd6c:	6103      	str	r3, [r0, #16]
 800cd6e:	bd10      	pop	{r4, pc}
 800cd70:	0800e857 	.word	0x0800e857
 800cd74:	0800e8c8 	.word	0x0800e8c8

0800cd78 <__multiply>:
 800cd78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd7a:	690b      	ldr	r3, [r1, #16]
 800cd7c:	0014      	movs	r4, r2
 800cd7e:	6912      	ldr	r2, [r2, #16]
 800cd80:	000d      	movs	r5, r1
 800cd82:	b089      	sub	sp, #36	; 0x24
 800cd84:	4293      	cmp	r3, r2
 800cd86:	da01      	bge.n	800cd8c <__multiply+0x14>
 800cd88:	0025      	movs	r5, r4
 800cd8a:	000c      	movs	r4, r1
 800cd8c:	692f      	ldr	r7, [r5, #16]
 800cd8e:	6926      	ldr	r6, [r4, #16]
 800cd90:	6869      	ldr	r1, [r5, #4]
 800cd92:	19bb      	adds	r3, r7, r6
 800cd94:	9302      	str	r3, [sp, #8]
 800cd96:	68ab      	ldr	r3, [r5, #8]
 800cd98:	19ba      	adds	r2, r7, r6
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	da00      	bge.n	800cda0 <__multiply+0x28>
 800cd9e:	3101      	adds	r1, #1
 800cda0:	f7ff fee0 	bl	800cb64 <_Balloc>
 800cda4:	9001      	str	r0, [sp, #4]
 800cda6:	2800      	cmp	r0, #0
 800cda8:	d106      	bne.n	800cdb8 <__multiply+0x40>
 800cdaa:	215e      	movs	r1, #94	; 0x5e
 800cdac:	0002      	movs	r2, r0
 800cdae:	4b48      	ldr	r3, [pc, #288]	; (800ced0 <__multiply+0x158>)
 800cdb0:	4848      	ldr	r0, [pc, #288]	; (800ced4 <__multiply+0x15c>)
 800cdb2:	31ff      	adds	r1, #255	; 0xff
 800cdb4:	f000 fd9e 	bl	800d8f4 <__assert_func>
 800cdb8:	9b01      	ldr	r3, [sp, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	3314      	adds	r3, #20
 800cdbe:	469c      	mov	ip, r3
 800cdc0:	19bb      	adds	r3, r7, r6
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	4463      	add	r3, ip
 800cdc6:	9303      	str	r3, [sp, #12]
 800cdc8:	4663      	mov	r3, ip
 800cdca:	9903      	ldr	r1, [sp, #12]
 800cdcc:	428b      	cmp	r3, r1
 800cdce:	d32c      	bcc.n	800ce2a <__multiply+0xb2>
 800cdd0:	002b      	movs	r3, r5
 800cdd2:	0022      	movs	r2, r4
 800cdd4:	3314      	adds	r3, #20
 800cdd6:	00bf      	lsls	r7, r7, #2
 800cdd8:	3214      	adds	r2, #20
 800cdda:	9306      	str	r3, [sp, #24]
 800cddc:	00b6      	lsls	r6, r6, #2
 800cdde:	19db      	adds	r3, r3, r7
 800cde0:	9304      	str	r3, [sp, #16]
 800cde2:	1993      	adds	r3, r2, r6
 800cde4:	9307      	str	r3, [sp, #28]
 800cde6:	2304      	movs	r3, #4
 800cde8:	9305      	str	r3, [sp, #20]
 800cdea:	002b      	movs	r3, r5
 800cdec:	9904      	ldr	r1, [sp, #16]
 800cdee:	3315      	adds	r3, #21
 800cdf0:	9200      	str	r2, [sp, #0]
 800cdf2:	4299      	cmp	r1, r3
 800cdf4:	d305      	bcc.n	800ce02 <__multiply+0x8a>
 800cdf6:	1b4b      	subs	r3, r1, r5
 800cdf8:	3b15      	subs	r3, #21
 800cdfa:	089b      	lsrs	r3, r3, #2
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	9305      	str	r3, [sp, #20]
 800ce02:	9b07      	ldr	r3, [sp, #28]
 800ce04:	9a00      	ldr	r2, [sp, #0]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d311      	bcc.n	800ce2e <__multiply+0xb6>
 800ce0a:	9b02      	ldr	r3, [sp, #8]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	dd06      	ble.n	800ce1e <__multiply+0xa6>
 800ce10:	9b03      	ldr	r3, [sp, #12]
 800ce12:	3b04      	subs	r3, #4
 800ce14:	9303      	str	r3, [sp, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d053      	beq.n	800cec6 <__multiply+0x14e>
 800ce1e:	9b01      	ldr	r3, [sp, #4]
 800ce20:	9a02      	ldr	r2, [sp, #8]
 800ce22:	0018      	movs	r0, r3
 800ce24:	611a      	str	r2, [r3, #16]
 800ce26:	b009      	add	sp, #36	; 0x24
 800ce28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce2a:	c304      	stmia	r3!, {r2}
 800ce2c:	e7cd      	b.n	800cdca <__multiply+0x52>
 800ce2e:	9b00      	ldr	r3, [sp, #0]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	b298      	uxth	r0, r3
 800ce34:	2800      	cmp	r0, #0
 800ce36:	d01b      	beq.n	800ce70 <__multiply+0xf8>
 800ce38:	4667      	mov	r7, ip
 800ce3a:	2400      	movs	r4, #0
 800ce3c:	9e06      	ldr	r6, [sp, #24]
 800ce3e:	ce02      	ldmia	r6!, {r1}
 800ce40:	683a      	ldr	r2, [r7, #0]
 800ce42:	b28b      	uxth	r3, r1
 800ce44:	4343      	muls	r3, r0
 800ce46:	b292      	uxth	r2, r2
 800ce48:	189b      	adds	r3, r3, r2
 800ce4a:	191b      	adds	r3, r3, r4
 800ce4c:	0c0c      	lsrs	r4, r1, #16
 800ce4e:	4344      	muls	r4, r0
 800ce50:	683a      	ldr	r2, [r7, #0]
 800ce52:	0c11      	lsrs	r1, r2, #16
 800ce54:	1861      	adds	r1, r4, r1
 800ce56:	0c1c      	lsrs	r4, r3, #16
 800ce58:	1909      	adds	r1, r1, r4
 800ce5a:	0c0c      	lsrs	r4, r1, #16
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	0409      	lsls	r1, r1, #16
 800ce60:	430b      	orrs	r3, r1
 800ce62:	c708      	stmia	r7!, {r3}
 800ce64:	9b04      	ldr	r3, [sp, #16]
 800ce66:	42b3      	cmp	r3, r6
 800ce68:	d8e9      	bhi.n	800ce3e <__multiply+0xc6>
 800ce6a:	4663      	mov	r3, ip
 800ce6c:	9a05      	ldr	r2, [sp, #20]
 800ce6e:	509c      	str	r4, [r3, r2]
 800ce70:	9b00      	ldr	r3, [sp, #0]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	0c1e      	lsrs	r6, r3, #16
 800ce76:	d020      	beq.n	800ceba <__multiply+0x142>
 800ce78:	4663      	mov	r3, ip
 800ce7a:	002c      	movs	r4, r5
 800ce7c:	4660      	mov	r0, ip
 800ce7e:	2700      	movs	r7, #0
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	3414      	adds	r4, #20
 800ce84:	6822      	ldr	r2, [r4, #0]
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	b291      	uxth	r1, r2
 800ce8a:	4371      	muls	r1, r6
 800ce8c:	6802      	ldr	r2, [r0, #0]
 800ce8e:	0c12      	lsrs	r2, r2, #16
 800ce90:	1889      	adds	r1, r1, r2
 800ce92:	19cf      	adds	r7, r1, r7
 800ce94:	0439      	lsls	r1, r7, #16
 800ce96:	430b      	orrs	r3, r1
 800ce98:	6003      	str	r3, [r0, #0]
 800ce9a:	cc02      	ldmia	r4!, {r1}
 800ce9c:	6843      	ldr	r3, [r0, #4]
 800ce9e:	0c09      	lsrs	r1, r1, #16
 800cea0:	4371      	muls	r1, r6
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	0c3f      	lsrs	r7, r7, #16
 800cea6:	18cb      	adds	r3, r1, r3
 800cea8:	9a04      	ldr	r2, [sp, #16]
 800ceaa:	19db      	adds	r3, r3, r7
 800ceac:	0c1f      	lsrs	r7, r3, #16
 800ceae:	3004      	adds	r0, #4
 800ceb0:	42a2      	cmp	r2, r4
 800ceb2:	d8e7      	bhi.n	800ce84 <__multiply+0x10c>
 800ceb4:	4662      	mov	r2, ip
 800ceb6:	9905      	ldr	r1, [sp, #20]
 800ceb8:	5053      	str	r3, [r2, r1]
 800ceba:	9b00      	ldr	r3, [sp, #0]
 800cebc:	3304      	adds	r3, #4
 800cebe:	9300      	str	r3, [sp, #0]
 800cec0:	2304      	movs	r3, #4
 800cec2:	449c      	add	ip, r3
 800cec4:	e79d      	b.n	800ce02 <__multiply+0x8a>
 800cec6:	9b02      	ldr	r3, [sp, #8]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	9302      	str	r3, [sp, #8]
 800cecc:	e79d      	b.n	800ce0a <__multiply+0x92>
 800cece:	46c0      	nop			; (mov r8, r8)
 800ced0:	0800e857 	.word	0x0800e857
 800ced4:	0800e8c8 	.word	0x0800e8c8

0800ced8 <__pow5mult>:
 800ced8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceda:	2303      	movs	r3, #3
 800cedc:	0015      	movs	r5, r2
 800cede:	0007      	movs	r7, r0
 800cee0:	000e      	movs	r6, r1
 800cee2:	401a      	ands	r2, r3
 800cee4:	421d      	tst	r5, r3
 800cee6:	d008      	beq.n	800cefa <__pow5mult+0x22>
 800cee8:	4925      	ldr	r1, [pc, #148]	; (800cf80 <__pow5mult+0xa8>)
 800ceea:	3a01      	subs	r2, #1
 800ceec:	0092      	lsls	r2, r2, #2
 800ceee:	5852      	ldr	r2, [r2, r1]
 800cef0:	2300      	movs	r3, #0
 800cef2:	0031      	movs	r1, r6
 800cef4:	f7ff fe9e 	bl	800cc34 <__multadd>
 800cef8:	0006      	movs	r6, r0
 800cefa:	10ad      	asrs	r5, r5, #2
 800cefc:	d03d      	beq.n	800cf7a <__pow5mult+0xa2>
 800cefe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800cf00:	2c00      	cmp	r4, #0
 800cf02:	d10f      	bne.n	800cf24 <__pow5mult+0x4c>
 800cf04:	2010      	movs	r0, #16
 800cf06:	f7ff fe17 	bl	800cb38 <malloc>
 800cf0a:	1e02      	subs	r2, r0, #0
 800cf0c:	6278      	str	r0, [r7, #36]	; 0x24
 800cf0e:	d105      	bne.n	800cf1c <__pow5mult+0x44>
 800cf10:	21d7      	movs	r1, #215	; 0xd7
 800cf12:	4b1c      	ldr	r3, [pc, #112]	; (800cf84 <__pow5mult+0xac>)
 800cf14:	481c      	ldr	r0, [pc, #112]	; (800cf88 <__pow5mult+0xb0>)
 800cf16:	0049      	lsls	r1, r1, #1
 800cf18:	f000 fcec 	bl	800d8f4 <__assert_func>
 800cf1c:	6044      	str	r4, [r0, #4]
 800cf1e:	6084      	str	r4, [r0, #8]
 800cf20:	6004      	str	r4, [r0, #0]
 800cf22:	60c4      	str	r4, [r0, #12]
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	689c      	ldr	r4, [r3, #8]
 800cf28:	9301      	str	r3, [sp, #4]
 800cf2a:	2c00      	cmp	r4, #0
 800cf2c:	d108      	bne.n	800cf40 <__pow5mult+0x68>
 800cf2e:	0038      	movs	r0, r7
 800cf30:	4916      	ldr	r1, [pc, #88]	; (800cf8c <__pow5mult+0xb4>)
 800cf32:	f7ff ff0b 	bl	800cd4c <__i2b>
 800cf36:	9b01      	ldr	r3, [sp, #4]
 800cf38:	0004      	movs	r4, r0
 800cf3a:	6098      	str	r0, [r3, #8]
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	6003      	str	r3, [r0, #0]
 800cf40:	2301      	movs	r3, #1
 800cf42:	421d      	tst	r5, r3
 800cf44:	d00a      	beq.n	800cf5c <__pow5mult+0x84>
 800cf46:	0031      	movs	r1, r6
 800cf48:	0022      	movs	r2, r4
 800cf4a:	0038      	movs	r0, r7
 800cf4c:	f7ff ff14 	bl	800cd78 <__multiply>
 800cf50:	0031      	movs	r1, r6
 800cf52:	9001      	str	r0, [sp, #4]
 800cf54:	0038      	movs	r0, r7
 800cf56:	f7ff fe49 	bl	800cbec <_Bfree>
 800cf5a:	9e01      	ldr	r6, [sp, #4]
 800cf5c:	106d      	asrs	r5, r5, #1
 800cf5e:	d00c      	beq.n	800cf7a <__pow5mult+0xa2>
 800cf60:	6820      	ldr	r0, [r4, #0]
 800cf62:	2800      	cmp	r0, #0
 800cf64:	d107      	bne.n	800cf76 <__pow5mult+0x9e>
 800cf66:	0022      	movs	r2, r4
 800cf68:	0021      	movs	r1, r4
 800cf6a:	0038      	movs	r0, r7
 800cf6c:	f7ff ff04 	bl	800cd78 <__multiply>
 800cf70:	2300      	movs	r3, #0
 800cf72:	6020      	str	r0, [r4, #0]
 800cf74:	6003      	str	r3, [r0, #0]
 800cf76:	0004      	movs	r4, r0
 800cf78:	e7e2      	b.n	800cf40 <__pow5mult+0x68>
 800cf7a:	0030      	movs	r0, r6
 800cf7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf7e:	46c0      	nop			; (mov r8, r8)
 800cf80:	0800ea18 	.word	0x0800ea18
 800cf84:	0800e7e5 	.word	0x0800e7e5
 800cf88:	0800e8c8 	.word	0x0800e8c8
 800cf8c:	00000271 	.word	0x00000271

0800cf90 <__lshift>:
 800cf90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf92:	000c      	movs	r4, r1
 800cf94:	0017      	movs	r7, r2
 800cf96:	6923      	ldr	r3, [r4, #16]
 800cf98:	1155      	asrs	r5, r2, #5
 800cf9a:	b087      	sub	sp, #28
 800cf9c:	18eb      	adds	r3, r5, r3
 800cf9e:	9302      	str	r3, [sp, #8]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	9301      	str	r3, [sp, #4]
 800cfa4:	6849      	ldr	r1, [r1, #4]
 800cfa6:	68a3      	ldr	r3, [r4, #8]
 800cfa8:	9004      	str	r0, [sp, #16]
 800cfaa:	9a01      	ldr	r2, [sp, #4]
 800cfac:	4293      	cmp	r3, r2
 800cfae:	db10      	blt.n	800cfd2 <__lshift+0x42>
 800cfb0:	9804      	ldr	r0, [sp, #16]
 800cfb2:	f7ff fdd7 	bl	800cb64 <_Balloc>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	0002      	movs	r2, r0
 800cfba:	0006      	movs	r6, r0
 800cfbc:	0019      	movs	r1, r3
 800cfbe:	3214      	adds	r2, #20
 800cfc0:	4298      	cmp	r0, r3
 800cfc2:	d10c      	bne.n	800cfde <__lshift+0x4e>
 800cfc4:	21da      	movs	r1, #218	; 0xda
 800cfc6:	0002      	movs	r2, r0
 800cfc8:	4b26      	ldr	r3, [pc, #152]	; (800d064 <__lshift+0xd4>)
 800cfca:	4827      	ldr	r0, [pc, #156]	; (800d068 <__lshift+0xd8>)
 800cfcc:	31ff      	adds	r1, #255	; 0xff
 800cfce:	f000 fc91 	bl	800d8f4 <__assert_func>
 800cfd2:	3101      	adds	r1, #1
 800cfd4:	005b      	lsls	r3, r3, #1
 800cfd6:	e7e8      	b.n	800cfaa <__lshift+0x1a>
 800cfd8:	0098      	lsls	r0, r3, #2
 800cfda:	5011      	str	r1, [r2, r0]
 800cfdc:	3301      	adds	r3, #1
 800cfde:	42ab      	cmp	r3, r5
 800cfe0:	dbfa      	blt.n	800cfd8 <__lshift+0x48>
 800cfe2:	43eb      	mvns	r3, r5
 800cfe4:	17db      	asrs	r3, r3, #31
 800cfe6:	401d      	ands	r5, r3
 800cfe8:	211f      	movs	r1, #31
 800cfea:	0023      	movs	r3, r4
 800cfec:	0038      	movs	r0, r7
 800cfee:	00ad      	lsls	r5, r5, #2
 800cff0:	1955      	adds	r5, r2, r5
 800cff2:	6922      	ldr	r2, [r4, #16]
 800cff4:	3314      	adds	r3, #20
 800cff6:	0092      	lsls	r2, r2, #2
 800cff8:	4008      	ands	r0, r1
 800cffa:	4684      	mov	ip, r0
 800cffc:	189a      	adds	r2, r3, r2
 800cffe:	420f      	tst	r7, r1
 800d000:	d02a      	beq.n	800d058 <__lshift+0xc8>
 800d002:	3101      	adds	r1, #1
 800d004:	1a09      	subs	r1, r1, r0
 800d006:	9105      	str	r1, [sp, #20]
 800d008:	2100      	movs	r1, #0
 800d00a:	9503      	str	r5, [sp, #12]
 800d00c:	4667      	mov	r7, ip
 800d00e:	6818      	ldr	r0, [r3, #0]
 800d010:	40b8      	lsls	r0, r7
 800d012:	4301      	orrs	r1, r0
 800d014:	9803      	ldr	r0, [sp, #12]
 800d016:	c002      	stmia	r0!, {r1}
 800d018:	cb02      	ldmia	r3!, {r1}
 800d01a:	9003      	str	r0, [sp, #12]
 800d01c:	9805      	ldr	r0, [sp, #20]
 800d01e:	40c1      	lsrs	r1, r0
 800d020:	429a      	cmp	r2, r3
 800d022:	d8f3      	bhi.n	800d00c <__lshift+0x7c>
 800d024:	0020      	movs	r0, r4
 800d026:	3015      	adds	r0, #21
 800d028:	2304      	movs	r3, #4
 800d02a:	4282      	cmp	r2, r0
 800d02c:	d304      	bcc.n	800d038 <__lshift+0xa8>
 800d02e:	1b13      	subs	r3, r2, r4
 800d030:	3b15      	subs	r3, #21
 800d032:	089b      	lsrs	r3, r3, #2
 800d034:	3301      	adds	r3, #1
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	50e9      	str	r1, [r5, r3]
 800d03a:	2900      	cmp	r1, #0
 800d03c:	d002      	beq.n	800d044 <__lshift+0xb4>
 800d03e:	9b02      	ldr	r3, [sp, #8]
 800d040:	3302      	adds	r3, #2
 800d042:	9301      	str	r3, [sp, #4]
 800d044:	9b01      	ldr	r3, [sp, #4]
 800d046:	9804      	ldr	r0, [sp, #16]
 800d048:	3b01      	subs	r3, #1
 800d04a:	0021      	movs	r1, r4
 800d04c:	6133      	str	r3, [r6, #16]
 800d04e:	f7ff fdcd 	bl	800cbec <_Bfree>
 800d052:	0030      	movs	r0, r6
 800d054:	b007      	add	sp, #28
 800d056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d058:	cb02      	ldmia	r3!, {r1}
 800d05a:	c502      	stmia	r5!, {r1}
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d8fb      	bhi.n	800d058 <__lshift+0xc8>
 800d060:	e7f0      	b.n	800d044 <__lshift+0xb4>
 800d062:	46c0      	nop			; (mov r8, r8)
 800d064:	0800e857 	.word	0x0800e857
 800d068:	0800e8c8 	.word	0x0800e8c8

0800d06c <__mcmp>:
 800d06c:	6902      	ldr	r2, [r0, #16]
 800d06e:	690b      	ldr	r3, [r1, #16]
 800d070:	b530      	push	{r4, r5, lr}
 800d072:	0004      	movs	r4, r0
 800d074:	1ad0      	subs	r0, r2, r3
 800d076:	429a      	cmp	r2, r3
 800d078:	d10d      	bne.n	800d096 <__mcmp+0x2a>
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	3414      	adds	r4, #20
 800d07e:	3114      	adds	r1, #20
 800d080:	18e2      	adds	r2, r4, r3
 800d082:	18c9      	adds	r1, r1, r3
 800d084:	3a04      	subs	r2, #4
 800d086:	3904      	subs	r1, #4
 800d088:	6815      	ldr	r5, [r2, #0]
 800d08a:	680b      	ldr	r3, [r1, #0]
 800d08c:	429d      	cmp	r5, r3
 800d08e:	d003      	beq.n	800d098 <__mcmp+0x2c>
 800d090:	2001      	movs	r0, #1
 800d092:	429d      	cmp	r5, r3
 800d094:	d303      	bcc.n	800d09e <__mcmp+0x32>
 800d096:	bd30      	pop	{r4, r5, pc}
 800d098:	4294      	cmp	r4, r2
 800d09a:	d3f3      	bcc.n	800d084 <__mcmp+0x18>
 800d09c:	e7fb      	b.n	800d096 <__mcmp+0x2a>
 800d09e:	4240      	negs	r0, r0
 800d0a0:	e7f9      	b.n	800d096 <__mcmp+0x2a>
	...

0800d0a4 <__mdiff>:
 800d0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0a6:	000e      	movs	r6, r1
 800d0a8:	0007      	movs	r7, r0
 800d0aa:	0011      	movs	r1, r2
 800d0ac:	0030      	movs	r0, r6
 800d0ae:	b087      	sub	sp, #28
 800d0b0:	0014      	movs	r4, r2
 800d0b2:	f7ff ffdb 	bl	800d06c <__mcmp>
 800d0b6:	1e05      	subs	r5, r0, #0
 800d0b8:	d110      	bne.n	800d0dc <__mdiff+0x38>
 800d0ba:	0001      	movs	r1, r0
 800d0bc:	0038      	movs	r0, r7
 800d0be:	f7ff fd51 	bl	800cb64 <_Balloc>
 800d0c2:	1e02      	subs	r2, r0, #0
 800d0c4:	d104      	bne.n	800d0d0 <__mdiff+0x2c>
 800d0c6:	4b40      	ldr	r3, [pc, #256]	; (800d1c8 <__mdiff+0x124>)
 800d0c8:	4940      	ldr	r1, [pc, #256]	; (800d1cc <__mdiff+0x128>)
 800d0ca:	4841      	ldr	r0, [pc, #260]	; (800d1d0 <__mdiff+0x12c>)
 800d0cc:	f000 fc12 	bl	800d8f4 <__assert_func>
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	6145      	str	r5, [r0, #20]
 800d0d4:	6103      	str	r3, [r0, #16]
 800d0d6:	0010      	movs	r0, r2
 800d0d8:	b007      	add	sp, #28
 800d0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0dc:	2301      	movs	r3, #1
 800d0de:	9301      	str	r3, [sp, #4]
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	db04      	blt.n	800d0ee <__mdiff+0x4a>
 800d0e4:	0023      	movs	r3, r4
 800d0e6:	0034      	movs	r4, r6
 800d0e8:	001e      	movs	r6, r3
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	9301      	str	r3, [sp, #4]
 800d0ee:	0038      	movs	r0, r7
 800d0f0:	6861      	ldr	r1, [r4, #4]
 800d0f2:	f7ff fd37 	bl	800cb64 <_Balloc>
 800d0f6:	1e02      	subs	r2, r0, #0
 800d0f8:	d103      	bne.n	800d102 <__mdiff+0x5e>
 800d0fa:	2190      	movs	r1, #144	; 0x90
 800d0fc:	4b32      	ldr	r3, [pc, #200]	; (800d1c8 <__mdiff+0x124>)
 800d0fe:	0089      	lsls	r1, r1, #2
 800d100:	e7e3      	b.n	800d0ca <__mdiff+0x26>
 800d102:	9b01      	ldr	r3, [sp, #4]
 800d104:	2700      	movs	r7, #0
 800d106:	60c3      	str	r3, [r0, #12]
 800d108:	6920      	ldr	r0, [r4, #16]
 800d10a:	3414      	adds	r4, #20
 800d10c:	9401      	str	r4, [sp, #4]
 800d10e:	9b01      	ldr	r3, [sp, #4]
 800d110:	0084      	lsls	r4, r0, #2
 800d112:	191b      	adds	r3, r3, r4
 800d114:	0034      	movs	r4, r6
 800d116:	9302      	str	r3, [sp, #8]
 800d118:	6933      	ldr	r3, [r6, #16]
 800d11a:	3414      	adds	r4, #20
 800d11c:	0099      	lsls	r1, r3, #2
 800d11e:	1863      	adds	r3, r4, r1
 800d120:	9303      	str	r3, [sp, #12]
 800d122:	0013      	movs	r3, r2
 800d124:	3314      	adds	r3, #20
 800d126:	469c      	mov	ip, r3
 800d128:	9305      	str	r3, [sp, #20]
 800d12a:	9b01      	ldr	r3, [sp, #4]
 800d12c:	9304      	str	r3, [sp, #16]
 800d12e:	9b04      	ldr	r3, [sp, #16]
 800d130:	cc02      	ldmia	r4!, {r1}
 800d132:	cb20      	ldmia	r3!, {r5}
 800d134:	9304      	str	r3, [sp, #16]
 800d136:	b2ab      	uxth	r3, r5
 800d138:	19df      	adds	r7, r3, r7
 800d13a:	b28b      	uxth	r3, r1
 800d13c:	1afb      	subs	r3, r7, r3
 800d13e:	0c09      	lsrs	r1, r1, #16
 800d140:	0c2d      	lsrs	r5, r5, #16
 800d142:	1a6d      	subs	r5, r5, r1
 800d144:	1419      	asrs	r1, r3, #16
 800d146:	186d      	adds	r5, r5, r1
 800d148:	4661      	mov	r1, ip
 800d14a:	142f      	asrs	r7, r5, #16
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	042d      	lsls	r5, r5, #16
 800d150:	432b      	orrs	r3, r5
 800d152:	c108      	stmia	r1!, {r3}
 800d154:	9b03      	ldr	r3, [sp, #12]
 800d156:	468c      	mov	ip, r1
 800d158:	42a3      	cmp	r3, r4
 800d15a:	d8e8      	bhi.n	800d12e <__mdiff+0x8a>
 800d15c:	0031      	movs	r1, r6
 800d15e:	9c03      	ldr	r4, [sp, #12]
 800d160:	3115      	adds	r1, #21
 800d162:	2304      	movs	r3, #4
 800d164:	428c      	cmp	r4, r1
 800d166:	d304      	bcc.n	800d172 <__mdiff+0xce>
 800d168:	1ba3      	subs	r3, r4, r6
 800d16a:	3b15      	subs	r3, #21
 800d16c:	089b      	lsrs	r3, r3, #2
 800d16e:	3301      	adds	r3, #1
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	9901      	ldr	r1, [sp, #4]
 800d174:	18cc      	adds	r4, r1, r3
 800d176:	9905      	ldr	r1, [sp, #20]
 800d178:	0026      	movs	r6, r4
 800d17a:	18cb      	adds	r3, r1, r3
 800d17c:	469c      	mov	ip, r3
 800d17e:	9902      	ldr	r1, [sp, #8]
 800d180:	428e      	cmp	r6, r1
 800d182:	d310      	bcc.n	800d1a6 <__mdiff+0x102>
 800d184:	9e02      	ldr	r6, [sp, #8]
 800d186:	1ee1      	subs	r1, r4, #3
 800d188:	2500      	movs	r5, #0
 800d18a:	428e      	cmp	r6, r1
 800d18c:	d304      	bcc.n	800d198 <__mdiff+0xf4>
 800d18e:	0031      	movs	r1, r6
 800d190:	3103      	adds	r1, #3
 800d192:	1b0c      	subs	r4, r1, r4
 800d194:	08a4      	lsrs	r4, r4, #2
 800d196:	00a5      	lsls	r5, r4, #2
 800d198:	195b      	adds	r3, r3, r5
 800d19a:	3b04      	subs	r3, #4
 800d19c:	6819      	ldr	r1, [r3, #0]
 800d19e:	2900      	cmp	r1, #0
 800d1a0:	d00f      	beq.n	800d1c2 <__mdiff+0x11e>
 800d1a2:	6110      	str	r0, [r2, #16]
 800d1a4:	e797      	b.n	800d0d6 <__mdiff+0x32>
 800d1a6:	ce02      	ldmia	r6!, {r1}
 800d1a8:	b28d      	uxth	r5, r1
 800d1aa:	19ed      	adds	r5, r5, r7
 800d1ac:	0c0f      	lsrs	r7, r1, #16
 800d1ae:	1429      	asrs	r1, r5, #16
 800d1b0:	1879      	adds	r1, r7, r1
 800d1b2:	140f      	asrs	r7, r1, #16
 800d1b4:	b2ad      	uxth	r5, r5
 800d1b6:	0409      	lsls	r1, r1, #16
 800d1b8:	430d      	orrs	r5, r1
 800d1ba:	4661      	mov	r1, ip
 800d1bc:	c120      	stmia	r1!, {r5}
 800d1be:	468c      	mov	ip, r1
 800d1c0:	e7dd      	b.n	800d17e <__mdiff+0xda>
 800d1c2:	3801      	subs	r0, #1
 800d1c4:	e7e9      	b.n	800d19a <__mdiff+0xf6>
 800d1c6:	46c0      	nop			; (mov r8, r8)
 800d1c8:	0800e857 	.word	0x0800e857
 800d1cc:	00000232 	.word	0x00000232
 800d1d0:	0800e8c8 	.word	0x0800e8c8

0800d1d4 <__d2b>:
 800d1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1d6:	2101      	movs	r1, #1
 800d1d8:	0014      	movs	r4, r2
 800d1da:	001e      	movs	r6, r3
 800d1dc:	9f08      	ldr	r7, [sp, #32]
 800d1de:	f7ff fcc1 	bl	800cb64 <_Balloc>
 800d1e2:	1e05      	subs	r5, r0, #0
 800d1e4:	d105      	bne.n	800d1f2 <__d2b+0x1e>
 800d1e6:	0002      	movs	r2, r0
 800d1e8:	4b26      	ldr	r3, [pc, #152]	; (800d284 <__d2b+0xb0>)
 800d1ea:	4927      	ldr	r1, [pc, #156]	; (800d288 <__d2b+0xb4>)
 800d1ec:	4827      	ldr	r0, [pc, #156]	; (800d28c <__d2b+0xb8>)
 800d1ee:	f000 fb81 	bl	800d8f4 <__assert_func>
 800d1f2:	0333      	lsls	r3, r6, #12
 800d1f4:	0076      	lsls	r6, r6, #1
 800d1f6:	0b1b      	lsrs	r3, r3, #12
 800d1f8:	0d76      	lsrs	r6, r6, #21
 800d1fa:	d124      	bne.n	800d246 <__d2b+0x72>
 800d1fc:	9301      	str	r3, [sp, #4]
 800d1fe:	2c00      	cmp	r4, #0
 800d200:	d027      	beq.n	800d252 <__d2b+0x7e>
 800d202:	4668      	mov	r0, sp
 800d204:	9400      	str	r4, [sp, #0]
 800d206:	f7ff fd73 	bl	800ccf0 <__lo0bits>
 800d20a:	9c00      	ldr	r4, [sp, #0]
 800d20c:	2800      	cmp	r0, #0
 800d20e:	d01e      	beq.n	800d24e <__d2b+0x7a>
 800d210:	9b01      	ldr	r3, [sp, #4]
 800d212:	2120      	movs	r1, #32
 800d214:	001a      	movs	r2, r3
 800d216:	1a09      	subs	r1, r1, r0
 800d218:	408a      	lsls	r2, r1
 800d21a:	40c3      	lsrs	r3, r0
 800d21c:	4322      	orrs	r2, r4
 800d21e:	616a      	str	r2, [r5, #20]
 800d220:	9301      	str	r3, [sp, #4]
 800d222:	9c01      	ldr	r4, [sp, #4]
 800d224:	61ac      	str	r4, [r5, #24]
 800d226:	1e63      	subs	r3, r4, #1
 800d228:	419c      	sbcs	r4, r3
 800d22a:	3401      	adds	r4, #1
 800d22c:	612c      	str	r4, [r5, #16]
 800d22e:	2e00      	cmp	r6, #0
 800d230:	d018      	beq.n	800d264 <__d2b+0x90>
 800d232:	4b17      	ldr	r3, [pc, #92]	; (800d290 <__d2b+0xbc>)
 800d234:	18f6      	adds	r6, r6, r3
 800d236:	2335      	movs	r3, #53	; 0x35
 800d238:	1836      	adds	r6, r6, r0
 800d23a:	1a18      	subs	r0, r3, r0
 800d23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d23e:	603e      	str	r6, [r7, #0]
 800d240:	6018      	str	r0, [r3, #0]
 800d242:	0028      	movs	r0, r5
 800d244:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d246:	2280      	movs	r2, #128	; 0x80
 800d248:	0352      	lsls	r2, r2, #13
 800d24a:	4313      	orrs	r3, r2
 800d24c:	e7d6      	b.n	800d1fc <__d2b+0x28>
 800d24e:	616c      	str	r4, [r5, #20]
 800d250:	e7e7      	b.n	800d222 <__d2b+0x4e>
 800d252:	a801      	add	r0, sp, #4
 800d254:	f7ff fd4c 	bl	800ccf0 <__lo0bits>
 800d258:	2401      	movs	r4, #1
 800d25a:	9b01      	ldr	r3, [sp, #4]
 800d25c:	612c      	str	r4, [r5, #16]
 800d25e:	616b      	str	r3, [r5, #20]
 800d260:	3020      	adds	r0, #32
 800d262:	e7e4      	b.n	800d22e <__d2b+0x5a>
 800d264:	4b0b      	ldr	r3, [pc, #44]	; (800d294 <__d2b+0xc0>)
 800d266:	18c0      	adds	r0, r0, r3
 800d268:	4b0b      	ldr	r3, [pc, #44]	; (800d298 <__d2b+0xc4>)
 800d26a:	6038      	str	r0, [r7, #0]
 800d26c:	18e3      	adds	r3, r4, r3
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	18eb      	adds	r3, r5, r3
 800d272:	6958      	ldr	r0, [r3, #20]
 800d274:	f7ff fd22 	bl	800ccbc <__hi0bits>
 800d278:	0164      	lsls	r4, r4, #5
 800d27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d27c:	1a24      	subs	r4, r4, r0
 800d27e:	601c      	str	r4, [r3, #0]
 800d280:	e7df      	b.n	800d242 <__d2b+0x6e>
 800d282:	46c0      	nop			; (mov r8, r8)
 800d284:	0800e857 	.word	0x0800e857
 800d288:	0000030a 	.word	0x0000030a
 800d28c:	0800e8c8 	.word	0x0800e8c8
 800d290:	fffffbcd 	.word	0xfffffbcd
 800d294:	fffffbce 	.word	0xfffffbce
 800d298:	3fffffff 	.word	0x3fffffff

0800d29c <_calloc_r>:
 800d29c:	b570      	push	{r4, r5, r6, lr}
 800d29e:	0c13      	lsrs	r3, r2, #16
 800d2a0:	0c0d      	lsrs	r5, r1, #16
 800d2a2:	d11e      	bne.n	800d2e2 <_calloc_r+0x46>
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d10c      	bne.n	800d2c2 <_calloc_r+0x26>
 800d2a8:	b289      	uxth	r1, r1
 800d2aa:	b294      	uxth	r4, r2
 800d2ac:	434c      	muls	r4, r1
 800d2ae:	0021      	movs	r1, r4
 800d2b0:	f000 f88c 	bl	800d3cc <_malloc_r>
 800d2b4:	1e05      	subs	r5, r0, #0
 800d2b6:	d01b      	beq.n	800d2f0 <_calloc_r+0x54>
 800d2b8:	0022      	movs	r2, r4
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	f7fd fd65 	bl	800ad8a <memset>
 800d2c0:	e016      	b.n	800d2f0 <_calloc_r+0x54>
 800d2c2:	1c1d      	adds	r5, r3, #0
 800d2c4:	1c0b      	adds	r3, r1, #0
 800d2c6:	b292      	uxth	r2, r2
 800d2c8:	b289      	uxth	r1, r1
 800d2ca:	b29c      	uxth	r4, r3
 800d2cc:	4351      	muls	r1, r2
 800d2ce:	b2ab      	uxth	r3, r5
 800d2d0:	4363      	muls	r3, r4
 800d2d2:	0c0c      	lsrs	r4, r1, #16
 800d2d4:	191c      	adds	r4, r3, r4
 800d2d6:	0c22      	lsrs	r2, r4, #16
 800d2d8:	d107      	bne.n	800d2ea <_calloc_r+0x4e>
 800d2da:	0424      	lsls	r4, r4, #16
 800d2dc:	b289      	uxth	r1, r1
 800d2de:	430c      	orrs	r4, r1
 800d2e0:	e7e5      	b.n	800d2ae <_calloc_r+0x12>
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d101      	bne.n	800d2ea <_calloc_r+0x4e>
 800d2e6:	1c13      	adds	r3, r2, #0
 800d2e8:	e7ed      	b.n	800d2c6 <_calloc_r+0x2a>
 800d2ea:	230c      	movs	r3, #12
 800d2ec:	2500      	movs	r5, #0
 800d2ee:	6003      	str	r3, [r0, #0]
 800d2f0:	0028      	movs	r0, r5
 800d2f2:	bd70      	pop	{r4, r5, r6, pc}

0800d2f4 <_free_r>:
 800d2f4:	b570      	push	{r4, r5, r6, lr}
 800d2f6:	0005      	movs	r5, r0
 800d2f8:	2900      	cmp	r1, #0
 800d2fa:	d010      	beq.n	800d31e <_free_r+0x2a>
 800d2fc:	1f0c      	subs	r4, r1, #4
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	da00      	bge.n	800d306 <_free_r+0x12>
 800d304:	18e4      	adds	r4, r4, r3
 800d306:	0028      	movs	r0, r5
 800d308:	f000 fb7e 	bl	800da08 <__malloc_lock>
 800d30c:	4a1d      	ldr	r2, [pc, #116]	; (800d384 <_free_r+0x90>)
 800d30e:	6813      	ldr	r3, [r2, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d105      	bne.n	800d320 <_free_r+0x2c>
 800d314:	6063      	str	r3, [r4, #4]
 800d316:	6014      	str	r4, [r2, #0]
 800d318:	0028      	movs	r0, r5
 800d31a:	f000 fb7d 	bl	800da18 <__malloc_unlock>
 800d31e:	bd70      	pop	{r4, r5, r6, pc}
 800d320:	42a3      	cmp	r3, r4
 800d322:	d908      	bls.n	800d336 <_free_r+0x42>
 800d324:	6821      	ldr	r1, [r4, #0]
 800d326:	1860      	adds	r0, r4, r1
 800d328:	4283      	cmp	r3, r0
 800d32a:	d1f3      	bne.n	800d314 <_free_r+0x20>
 800d32c:	6818      	ldr	r0, [r3, #0]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	1841      	adds	r1, r0, r1
 800d332:	6021      	str	r1, [r4, #0]
 800d334:	e7ee      	b.n	800d314 <_free_r+0x20>
 800d336:	001a      	movs	r2, r3
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d001      	beq.n	800d342 <_free_r+0x4e>
 800d33e:	42a3      	cmp	r3, r4
 800d340:	d9f9      	bls.n	800d336 <_free_r+0x42>
 800d342:	6811      	ldr	r1, [r2, #0]
 800d344:	1850      	adds	r0, r2, r1
 800d346:	42a0      	cmp	r0, r4
 800d348:	d10b      	bne.n	800d362 <_free_r+0x6e>
 800d34a:	6820      	ldr	r0, [r4, #0]
 800d34c:	1809      	adds	r1, r1, r0
 800d34e:	1850      	adds	r0, r2, r1
 800d350:	6011      	str	r1, [r2, #0]
 800d352:	4283      	cmp	r3, r0
 800d354:	d1e0      	bne.n	800d318 <_free_r+0x24>
 800d356:	6818      	ldr	r0, [r3, #0]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	1841      	adds	r1, r0, r1
 800d35c:	6011      	str	r1, [r2, #0]
 800d35e:	6053      	str	r3, [r2, #4]
 800d360:	e7da      	b.n	800d318 <_free_r+0x24>
 800d362:	42a0      	cmp	r0, r4
 800d364:	d902      	bls.n	800d36c <_free_r+0x78>
 800d366:	230c      	movs	r3, #12
 800d368:	602b      	str	r3, [r5, #0]
 800d36a:	e7d5      	b.n	800d318 <_free_r+0x24>
 800d36c:	6821      	ldr	r1, [r4, #0]
 800d36e:	1860      	adds	r0, r4, r1
 800d370:	4283      	cmp	r3, r0
 800d372:	d103      	bne.n	800d37c <_free_r+0x88>
 800d374:	6818      	ldr	r0, [r3, #0]
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	1841      	adds	r1, r0, r1
 800d37a:	6021      	str	r1, [r4, #0]
 800d37c:	6063      	str	r3, [r4, #4]
 800d37e:	6054      	str	r4, [r2, #4]
 800d380:	e7ca      	b.n	800d318 <_free_r+0x24>
 800d382:	46c0      	nop			; (mov r8, r8)
 800d384:	20000668 	.word	0x20000668

0800d388 <sbrk_aligned>:
 800d388:	b570      	push	{r4, r5, r6, lr}
 800d38a:	4e0f      	ldr	r6, [pc, #60]	; (800d3c8 <sbrk_aligned+0x40>)
 800d38c:	000d      	movs	r5, r1
 800d38e:	6831      	ldr	r1, [r6, #0]
 800d390:	0004      	movs	r4, r0
 800d392:	2900      	cmp	r1, #0
 800d394:	d102      	bne.n	800d39c <sbrk_aligned+0x14>
 800d396:	f000 fa3b 	bl	800d810 <_sbrk_r>
 800d39a:	6030      	str	r0, [r6, #0]
 800d39c:	0029      	movs	r1, r5
 800d39e:	0020      	movs	r0, r4
 800d3a0:	f000 fa36 	bl	800d810 <_sbrk_r>
 800d3a4:	1c43      	adds	r3, r0, #1
 800d3a6:	d00a      	beq.n	800d3be <sbrk_aligned+0x36>
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	1cc5      	adds	r5, r0, #3
 800d3ac:	439d      	bics	r5, r3
 800d3ae:	42a8      	cmp	r0, r5
 800d3b0:	d007      	beq.n	800d3c2 <sbrk_aligned+0x3a>
 800d3b2:	1a29      	subs	r1, r5, r0
 800d3b4:	0020      	movs	r0, r4
 800d3b6:	f000 fa2b 	bl	800d810 <_sbrk_r>
 800d3ba:	1c43      	adds	r3, r0, #1
 800d3bc:	d101      	bne.n	800d3c2 <sbrk_aligned+0x3a>
 800d3be:	2501      	movs	r5, #1
 800d3c0:	426d      	negs	r5, r5
 800d3c2:	0028      	movs	r0, r5
 800d3c4:	bd70      	pop	{r4, r5, r6, pc}
 800d3c6:	46c0      	nop			; (mov r8, r8)
 800d3c8:	2000066c 	.word	0x2000066c

0800d3cc <_malloc_r>:
 800d3cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3ce:	2203      	movs	r2, #3
 800d3d0:	1ccb      	adds	r3, r1, #3
 800d3d2:	4393      	bics	r3, r2
 800d3d4:	3308      	adds	r3, #8
 800d3d6:	0006      	movs	r6, r0
 800d3d8:	001f      	movs	r7, r3
 800d3da:	2b0c      	cmp	r3, #12
 800d3dc:	d232      	bcs.n	800d444 <_malloc_r+0x78>
 800d3de:	270c      	movs	r7, #12
 800d3e0:	42b9      	cmp	r1, r7
 800d3e2:	d831      	bhi.n	800d448 <_malloc_r+0x7c>
 800d3e4:	0030      	movs	r0, r6
 800d3e6:	f000 fb0f 	bl	800da08 <__malloc_lock>
 800d3ea:	4d32      	ldr	r5, [pc, #200]	; (800d4b4 <_malloc_r+0xe8>)
 800d3ec:	682b      	ldr	r3, [r5, #0]
 800d3ee:	001c      	movs	r4, r3
 800d3f0:	2c00      	cmp	r4, #0
 800d3f2:	d12e      	bne.n	800d452 <_malloc_r+0x86>
 800d3f4:	0039      	movs	r1, r7
 800d3f6:	0030      	movs	r0, r6
 800d3f8:	f7ff ffc6 	bl	800d388 <sbrk_aligned>
 800d3fc:	0004      	movs	r4, r0
 800d3fe:	1c43      	adds	r3, r0, #1
 800d400:	d11e      	bne.n	800d440 <_malloc_r+0x74>
 800d402:	682c      	ldr	r4, [r5, #0]
 800d404:	0025      	movs	r5, r4
 800d406:	2d00      	cmp	r5, #0
 800d408:	d14a      	bne.n	800d4a0 <_malloc_r+0xd4>
 800d40a:	6823      	ldr	r3, [r4, #0]
 800d40c:	0029      	movs	r1, r5
 800d40e:	18e3      	adds	r3, r4, r3
 800d410:	0030      	movs	r0, r6
 800d412:	9301      	str	r3, [sp, #4]
 800d414:	f000 f9fc 	bl	800d810 <_sbrk_r>
 800d418:	9b01      	ldr	r3, [sp, #4]
 800d41a:	4283      	cmp	r3, r0
 800d41c:	d143      	bne.n	800d4a6 <_malloc_r+0xda>
 800d41e:	6823      	ldr	r3, [r4, #0]
 800d420:	3703      	adds	r7, #3
 800d422:	1aff      	subs	r7, r7, r3
 800d424:	2303      	movs	r3, #3
 800d426:	439f      	bics	r7, r3
 800d428:	3708      	adds	r7, #8
 800d42a:	2f0c      	cmp	r7, #12
 800d42c:	d200      	bcs.n	800d430 <_malloc_r+0x64>
 800d42e:	270c      	movs	r7, #12
 800d430:	0039      	movs	r1, r7
 800d432:	0030      	movs	r0, r6
 800d434:	f7ff ffa8 	bl	800d388 <sbrk_aligned>
 800d438:	1c43      	adds	r3, r0, #1
 800d43a:	d034      	beq.n	800d4a6 <_malloc_r+0xda>
 800d43c:	6823      	ldr	r3, [r4, #0]
 800d43e:	19df      	adds	r7, r3, r7
 800d440:	6027      	str	r7, [r4, #0]
 800d442:	e013      	b.n	800d46c <_malloc_r+0xa0>
 800d444:	2b00      	cmp	r3, #0
 800d446:	dacb      	bge.n	800d3e0 <_malloc_r+0x14>
 800d448:	230c      	movs	r3, #12
 800d44a:	2500      	movs	r5, #0
 800d44c:	6033      	str	r3, [r6, #0]
 800d44e:	0028      	movs	r0, r5
 800d450:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d452:	6822      	ldr	r2, [r4, #0]
 800d454:	1bd1      	subs	r1, r2, r7
 800d456:	d420      	bmi.n	800d49a <_malloc_r+0xce>
 800d458:	290b      	cmp	r1, #11
 800d45a:	d917      	bls.n	800d48c <_malloc_r+0xc0>
 800d45c:	19e2      	adds	r2, r4, r7
 800d45e:	6027      	str	r7, [r4, #0]
 800d460:	42a3      	cmp	r3, r4
 800d462:	d111      	bne.n	800d488 <_malloc_r+0xbc>
 800d464:	602a      	str	r2, [r5, #0]
 800d466:	6863      	ldr	r3, [r4, #4]
 800d468:	6011      	str	r1, [r2, #0]
 800d46a:	6053      	str	r3, [r2, #4]
 800d46c:	0030      	movs	r0, r6
 800d46e:	0025      	movs	r5, r4
 800d470:	f000 fad2 	bl	800da18 <__malloc_unlock>
 800d474:	2207      	movs	r2, #7
 800d476:	350b      	adds	r5, #11
 800d478:	1d23      	adds	r3, r4, #4
 800d47a:	4395      	bics	r5, r2
 800d47c:	1aea      	subs	r2, r5, r3
 800d47e:	429d      	cmp	r5, r3
 800d480:	d0e5      	beq.n	800d44e <_malloc_r+0x82>
 800d482:	1b5b      	subs	r3, r3, r5
 800d484:	50a3      	str	r3, [r4, r2]
 800d486:	e7e2      	b.n	800d44e <_malloc_r+0x82>
 800d488:	605a      	str	r2, [r3, #4]
 800d48a:	e7ec      	b.n	800d466 <_malloc_r+0x9a>
 800d48c:	6862      	ldr	r2, [r4, #4]
 800d48e:	42a3      	cmp	r3, r4
 800d490:	d101      	bne.n	800d496 <_malloc_r+0xca>
 800d492:	602a      	str	r2, [r5, #0]
 800d494:	e7ea      	b.n	800d46c <_malloc_r+0xa0>
 800d496:	605a      	str	r2, [r3, #4]
 800d498:	e7e8      	b.n	800d46c <_malloc_r+0xa0>
 800d49a:	0023      	movs	r3, r4
 800d49c:	6864      	ldr	r4, [r4, #4]
 800d49e:	e7a7      	b.n	800d3f0 <_malloc_r+0x24>
 800d4a0:	002c      	movs	r4, r5
 800d4a2:	686d      	ldr	r5, [r5, #4]
 800d4a4:	e7af      	b.n	800d406 <_malloc_r+0x3a>
 800d4a6:	230c      	movs	r3, #12
 800d4a8:	0030      	movs	r0, r6
 800d4aa:	6033      	str	r3, [r6, #0]
 800d4ac:	f000 fab4 	bl	800da18 <__malloc_unlock>
 800d4b0:	e7cd      	b.n	800d44e <_malloc_r+0x82>
 800d4b2:	46c0      	nop			; (mov r8, r8)
 800d4b4:	20000668 	.word	0x20000668

0800d4b8 <__sfputc_r>:
 800d4b8:	6893      	ldr	r3, [r2, #8]
 800d4ba:	b510      	push	{r4, lr}
 800d4bc:	3b01      	subs	r3, #1
 800d4be:	6093      	str	r3, [r2, #8]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	da04      	bge.n	800d4ce <__sfputc_r+0x16>
 800d4c4:	6994      	ldr	r4, [r2, #24]
 800d4c6:	42a3      	cmp	r3, r4
 800d4c8:	db07      	blt.n	800d4da <__sfputc_r+0x22>
 800d4ca:	290a      	cmp	r1, #10
 800d4cc:	d005      	beq.n	800d4da <__sfputc_r+0x22>
 800d4ce:	6813      	ldr	r3, [r2, #0]
 800d4d0:	1c58      	adds	r0, r3, #1
 800d4d2:	6010      	str	r0, [r2, #0]
 800d4d4:	7019      	strb	r1, [r3, #0]
 800d4d6:	0008      	movs	r0, r1
 800d4d8:	bd10      	pop	{r4, pc}
 800d4da:	f7fe f977 	bl	800b7cc <__swbuf_r>
 800d4de:	0001      	movs	r1, r0
 800d4e0:	e7f9      	b.n	800d4d6 <__sfputc_r+0x1e>

0800d4e2 <__sfputs_r>:
 800d4e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e4:	0006      	movs	r6, r0
 800d4e6:	000f      	movs	r7, r1
 800d4e8:	0014      	movs	r4, r2
 800d4ea:	18d5      	adds	r5, r2, r3
 800d4ec:	42ac      	cmp	r4, r5
 800d4ee:	d101      	bne.n	800d4f4 <__sfputs_r+0x12>
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	e007      	b.n	800d504 <__sfputs_r+0x22>
 800d4f4:	7821      	ldrb	r1, [r4, #0]
 800d4f6:	003a      	movs	r2, r7
 800d4f8:	0030      	movs	r0, r6
 800d4fa:	f7ff ffdd 	bl	800d4b8 <__sfputc_r>
 800d4fe:	3401      	adds	r4, #1
 800d500:	1c43      	adds	r3, r0, #1
 800d502:	d1f3      	bne.n	800d4ec <__sfputs_r+0xa>
 800d504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d508 <_vfiprintf_r>:
 800d508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d50a:	b0a1      	sub	sp, #132	; 0x84
 800d50c:	0006      	movs	r6, r0
 800d50e:	000c      	movs	r4, r1
 800d510:	001f      	movs	r7, r3
 800d512:	9203      	str	r2, [sp, #12]
 800d514:	2800      	cmp	r0, #0
 800d516:	d004      	beq.n	800d522 <_vfiprintf_r+0x1a>
 800d518:	6983      	ldr	r3, [r0, #24]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d101      	bne.n	800d522 <_vfiprintf_r+0x1a>
 800d51e:	f7ff f9f7 	bl	800c910 <__sinit>
 800d522:	4b8e      	ldr	r3, [pc, #568]	; (800d75c <_vfiprintf_r+0x254>)
 800d524:	429c      	cmp	r4, r3
 800d526:	d11c      	bne.n	800d562 <_vfiprintf_r+0x5a>
 800d528:	6874      	ldr	r4, [r6, #4]
 800d52a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d52c:	07db      	lsls	r3, r3, #31
 800d52e:	d405      	bmi.n	800d53c <_vfiprintf_r+0x34>
 800d530:	89a3      	ldrh	r3, [r4, #12]
 800d532:	059b      	lsls	r3, r3, #22
 800d534:	d402      	bmi.n	800d53c <_vfiprintf_r+0x34>
 800d536:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d538:	f7ff fa8f 	bl	800ca5a <__retarget_lock_acquire_recursive>
 800d53c:	89a3      	ldrh	r3, [r4, #12]
 800d53e:	071b      	lsls	r3, r3, #28
 800d540:	d502      	bpl.n	800d548 <_vfiprintf_r+0x40>
 800d542:	6923      	ldr	r3, [r4, #16]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d11d      	bne.n	800d584 <_vfiprintf_r+0x7c>
 800d548:	0021      	movs	r1, r4
 800d54a:	0030      	movs	r0, r6
 800d54c:	f7fe f994 	bl	800b878 <__swsetup_r>
 800d550:	2800      	cmp	r0, #0
 800d552:	d017      	beq.n	800d584 <_vfiprintf_r+0x7c>
 800d554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d556:	07db      	lsls	r3, r3, #31
 800d558:	d50d      	bpl.n	800d576 <_vfiprintf_r+0x6e>
 800d55a:	2001      	movs	r0, #1
 800d55c:	4240      	negs	r0, r0
 800d55e:	b021      	add	sp, #132	; 0x84
 800d560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d562:	4b7f      	ldr	r3, [pc, #508]	; (800d760 <_vfiprintf_r+0x258>)
 800d564:	429c      	cmp	r4, r3
 800d566:	d101      	bne.n	800d56c <_vfiprintf_r+0x64>
 800d568:	68b4      	ldr	r4, [r6, #8]
 800d56a:	e7de      	b.n	800d52a <_vfiprintf_r+0x22>
 800d56c:	4b7d      	ldr	r3, [pc, #500]	; (800d764 <_vfiprintf_r+0x25c>)
 800d56e:	429c      	cmp	r4, r3
 800d570:	d1db      	bne.n	800d52a <_vfiprintf_r+0x22>
 800d572:	68f4      	ldr	r4, [r6, #12]
 800d574:	e7d9      	b.n	800d52a <_vfiprintf_r+0x22>
 800d576:	89a3      	ldrh	r3, [r4, #12]
 800d578:	059b      	lsls	r3, r3, #22
 800d57a:	d4ee      	bmi.n	800d55a <_vfiprintf_r+0x52>
 800d57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d57e:	f7ff fa6d 	bl	800ca5c <__retarget_lock_release_recursive>
 800d582:	e7ea      	b.n	800d55a <_vfiprintf_r+0x52>
 800d584:	2300      	movs	r3, #0
 800d586:	ad08      	add	r5, sp, #32
 800d588:	616b      	str	r3, [r5, #20]
 800d58a:	3320      	adds	r3, #32
 800d58c:	766b      	strb	r3, [r5, #25]
 800d58e:	3310      	adds	r3, #16
 800d590:	76ab      	strb	r3, [r5, #26]
 800d592:	9707      	str	r7, [sp, #28]
 800d594:	9f03      	ldr	r7, [sp, #12]
 800d596:	783b      	ldrb	r3, [r7, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d001      	beq.n	800d5a0 <_vfiprintf_r+0x98>
 800d59c:	2b25      	cmp	r3, #37	; 0x25
 800d59e:	d14e      	bne.n	800d63e <_vfiprintf_r+0x136>
 800d5a0:	9b03      	ldr	r3, [sp, #12]
 800d5a2:	1afb      	subs	r3, r7, r3
 800d5a4:	9305      	str	r3, [sp, #20]
 800d5a6:	9b03      	ldr	r3, [sp, #12]
 800d5a8:	429f      	cmp	r7, r3
 800d5aa:	d00d      	beq.n	800d5c8 <_vfiprintf_r+0xc0>
 800d5ac:	9b05      	ldr	r3, [sp, #20]
 800d5ae:	0021      	movs	r1, r4
 800d5b0:	0030      	movs	r0, r6
 800d5b2:	9a03      	ldr	r2, [sp, #12]
 800d5b4:	f7ff ff95 	bl	800d4e2 <__sfputs_r>
 800d5b8:	1c43      	adds	r3, r0, #1
 800d5ba:	d100      	bne.n	800d5be <_vfiprintf_r+0xb6>
 800d5bc:	e0b5      	b.n	800d72a <_vfiprintf_r+0x222>
 800d5be:	696a      	ldr	r2, [r5, #20]
 800d5c0:	9b05      	ldr	r3, [sp, #20]
 800d5c2:	4694      	mov	ip, r2
 800d5c4:	4463      	add	r3, ip
 800d5c6:	616b      	str	r3, [r5, #20]
 800d5c8:	783b      	ldrb	r3, [r7, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d100      	bne.n	800d5d0 <_vfiprintf_r+0xc8>
 800d5ce:	e0ac      	b.n	800d72a <_vfiprintf_r+0x222>
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	1c7b      	adds	r3, r7, #1
 800d5d4:	9303      	str	r3, [sp, #12]
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	4252      	negs	r2, r2
 800d5da:	606a      	str	r2, [r5, #4]
 800d5dc:	a904      	add	r1, sp, #16
 800d5de:	3254      	adds	r2, #84	; 0x54
 800d5e0:	1852      	adds	r2, r2, r1
 800d5e2:	602b      	str	r3, [r5, #0]
 800d5e4:	60eb      	str	r3, [r5, #12]
 800d5e6:	60ab      	str	r3, [r5, #8]
 800d5e8:	7013      	strb	r3, [r2, #0]
 800d5ea:	65ab      	str	r3, [r5, #88]	; 0x58
 800d5ec:	9b03      	ldr	r3, [sp, #12]
 800d5ee:	2205      	movs	r2, #5
 800d5f0:	7819      	ldrb	r1, [r3, #0]
 800d5f2:	485d      	ldr	r0, [pc, #372]	; (800d768 <_vfiprintf_r+0x260>)
 800d5f4:	f7ff faaa 	bl	800cb4c <memchr>
 800d5f8:	9b03      	ldr	r3, [sp, #12]
 800d5fa:	1c5f      	adds	r7, r3, #1
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d120      	bne.n	800d642 <_vfiprintf_r+0x13a>
 800d600:	682a      	ldr	r2, [r5, #0]
 800d602:	06d3      	lsls	r3, r2, #27
 800d604:	d504      	bpl.n	800d610 <_vfiprintf_r+0x108>
 800d606:	2353      	movs	r3, #83	; 0x53
 800d608:	a904      	add	r1, sp, #16
 800d60a:	185b      	adds	r3, r3, r1
 800d60c:	2120      	movs	r1, #32
 800d60e:	7019      	strb	r1, [r3, #0]
 800d610:	0713      	lsls	r3, r2, #28
 800d612:	d504      	bpl.n	800d61e <_vfiprintf_r+0x116>
 800d614:	2353      	movs	r3, #83	; 0x53
 800d616:	a904      	add	r1, sp, #16
 800d618:	185b      	adds	r3, r3, r1
 800d61a:	212b      	movs	r1, #43	; 0x2b
 800d61c:	7019      	strb	r1, [r3, #0]
 800d61e:	9b03      	ldr	r3, [sp, #12]
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	2b2a      	cmp	r3, #42	; 0x2a
 800d624:	d016      	beq.n	800d654 <_vfiprintf_r+0x14c>
 800d626:	2100      	movs	r1, #0
 800d628:	68eb      	ldr	r3, [r5, #12]
 800d62a:	9f03      	ldr	r7, [sp, #12]
 800d62c:	783a      	ldrb	r2, [r7, #0]
 800d62e:	1c78      	adds	r0, r7, #1
 800d630:	3a30      	subs	r2, #48	; 0x30
 800d632:	4684      	mov	ip, r0
 800d634:	2a09      	cmp	r2, #9
 800d636:	d94f      	bls.n	800d6d8 <_vfiprintf_r+0x1d0>
 800d638:	2900      	cmp	r1, #0
 800d63a:	d111      	bne.n	800d660 <_vfiprintf_r+0x158>
 800d63c:	e017      	b.n	800d66e <_vfiprintf_r+0x166>
 800d63e:	3701      	adds	r7, #1
 800d640:	e7a9      	b.n	800d596 <_vfiprintf_r+0x8e>
 800d642:	4b49      	ldr	r3, [pc, #292]	; (800d768 <_vfiprintf_r+0x260>)
 800d644:	682a      	ldr	r2, [r5, #0]
 800d646:	1ac0      	subs	r0, r0, r3
 800d648:	2301      	movs	r3, #1
 800d64a:	4083      	lsls	r3, r0
 800d64c:	4313      	orrs	r3, r2
 800d64e:	602b      	str	r3, [r5, #0]
 800d650:	9703      	str	r7, [sp, #12]
 800d652:	e7cb      	b.n	800d5ec <_vfiprintf_r+0xe4>
 800d654:	9b07      	ldr	r3, [sp, #28]
 800d656:	1d19      	adds	r1, r3, #4
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	9107      	str	r1, [sp, #28]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	db01      	blt.n	800d664 <_vfiprintf_r+0x15c>
 800d660:	930b      	str	r3, [sp, #44]	; 0x2c
 800d662:	e004      	b.n	800d66e <_vfiprintf_r+0x166>
 800d664:	425b      	negs	r3, r3
 800d666:	60eb      	str	r3, [r5, #12]
 800d668:	2302      	movs	r3, #2
 800d66a:	4313      	orrs	r3, r2
 800d66c:	602b      	str	r3, [r5, #0]
 800d66e:	783b      	ldrb	r3, [r7, #0]
 800d670:	2b2e      	cmp	r3, #46	; 0x2e
 800d672:	d10a      	bne.n	800d68a <_vfiprintf_r+0x182>
 800d674:	787b      	ldrb	r3, [r7, #1]
 800d676:	2b2a      	cmp	r3, #42	; 0x2a
 800d678:	d137      	bne.n	800d6ea <_vfiprintf_r+0x1e2>
 800d67a:	9b07      	ldr	r3, [sp, #28]
 800d67c:	3702      	adds	r7, #2
 800d67e:	1d1a      	adds	r2, r3, #4
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	9207      	str	r2, [sp, #28]
 800d684:	2b00      	cmp	r3, #0
 800d686:	db2d      	blt.n	800d6e4 <_vfiprintf_r+0x1dc>
 800d688:	9309      	str	r3, [sp, #36]	; 0x24
 800d68a:	2203      	movs	r2, #3
 800d68c:	7839      	ldrb	r1, [r7, #0]
 800d68e:	4837      	ldr	r0, [pc, #220]	; (800d76c <_vfiprintf_r+0x264>)
 800d690:	f7ff fa5c 	bl	800cb4c <memchr>
 800d694:	2800      	cmp	r0, #0
 800d696:	d007      	beq.n	800d6a8 <_vfiprintf_r+0x1a0>
 800d698:	4b34      	ldr	r3, [pc, #208]	; (800d76c <_vfiprintf_r+0x264>)
 800d69a:	682a      	ldr	r2, [r5, #0]
 800d69c:	1ac0      	subs	r0, r0, r3
 800d69e:	2340      	movs	r3, #64	; 0x40
 800d6a0:	4083      	lsls	r3, r0
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	3701      	adds	r7, #1
 800d6a6:	602b      	str	r3, [r5, #0]
 800d6a8:	7839      	ldrb	r1, [r7, #0]
 800d6aa:	1c7b      	adds	r3, r7, #1
 800d6ac:	2206      	movs	r2, #6
 800d6ae:	4830      	ldr	r0, [pc, #192]	; (800d770 <_vfiprintf_r+0x268>)
 800d6b0:	9303      	str	r3, [sp, #12]
 800d6b2:	7629      	strb	r1, [r5, #24]
 800d6b4:	f7ff fa4a 	bl	800cb4c <memchr>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	d045      	beq.n	800d748 <_vfiprintf_r+0x240>
 800d6bc:	4b2d      	ldr	r3, [pc, #180]	; (800d774 <_vfiprintf_r+0x26c>)
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d127      	bne.n	800d712 <_vfiprintf_r+0x20a>
 800d6c2:	2207      	movs	r2, #7
 800d6c4:	9b07      	ldr	r3, [sp, #28]
 800d6c6:	3307      	adds	r3, #7
 800d6c8:	4393      	bics	r3, r2
 800d6ca:	3308      	adds	r3, #8
 800d6cc:	9307      	str	r3, [sp, #28]
 800d6ce:	696b      	ldr	r3, [r5, #20]
 800d6d0:	9a04      	ldr	r2, [sp, #16]
 800d6d2:	189b      	adds	r3, r3, r2
 800d6d4:	616b      	str	r3, [r5, #20]
 800d6d6:	e75d      	b.n	800d594 <_vfiprintf_r+0x8c>
 800d6d8:	210a      	movs	r1, #10
 800d6da:	434b      	muls	r3, r1
 800d6dc:	4667      	mov	r7, ip
 800d6de:	189b      	adds	r3, r3, r2
 800d6e0:	3909      	subs	r1, #9
 800d6e2:	e7a3      	b.n	800d62c <_vfiprintf_r+0x124>
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	425b      	negs	r3, r3
 800d6e8:	e7ce      	b.n	800d688 <_vfiprintf_r+0x180>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	001a      	movs	r2, r3
 800d6ee:	3701      	adds	r7, #1
 800d6f0:	606b      	str	r3, [r5, #4]
 800d6f2:	7839      	ldrb	r1, [r7, #0]
 800d6f4:	1c78      	adds	r0, r7, #1
 800d6f6:	3930      	subs	r1, #48	; 0x30
 800d6f8:	4684      	mov	ip, r0
 800d6fa:	2909      	cmp	r1, #9
 800d6fc:	d903      	bls.n	800d706 <_vfiprintf_r+0x1fe>
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d0c3      	beq.n	800d68a <_vfiprintf_r+0x182>
 800d702:	9209      	str	r2, [sp, #36]	; 0x24
 800d704:	e7c1      	b.n	800d68a <_vfiprintf_r+0x182>
 800d706:	230a      	movs	r3, #10
 800d708:	435a      	muls	r2, r3
 800d70a:	4667      	mov	r7, ip
 800d70c:	1852      	adds	r2, r2, r1
 800d70e:	3b09      	subs	r3, #9
 800d710:	e7ef      	b.n	800d6f2 <_vfiprintf_r+0x1ea>
 800d712:	ab07      	add	r3, sp, #28
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	0022      	movs	r2, r4
 800d718:	0029      	movs	r1, r5
 800d71a:	0030      	movs	r0, r6
 800d71c:	4b16      	ldr	r3, [pc, #88]	; (800d778 <_vfiprintf_r+0x270>)
 800d71e:	f7fd fbe7 	bl	800aef0 <_printf_float>
 800d722:	9004      	str	r0, [sp, #16]
 800d724:	9b04      	ldr	r3, [sp, #16]
 800d726:	3301      	adds	r3, #1
 800d728:	d1d1      	bne.n	800d6ce <_vfiprintf_r+0x1c6>
 800d72a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d72c:	07db      	lsls	r3, r3, #31
 800d72e:	d405      	bmi.n	800d73c <_vfiprintf_r+0x234>
 800d730:	89a3      	ldrh	r3, [r4, #12]
 800d732:	059b      	lsls	r3, r3, #22
 800d734:	d402      	bmi.n	800d73c <_vfiprintf_r+0x234>
 800d736:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d738:	f7ff f990 	bl	800ca5c <__retarget_lock_release_recursive>
 800d73c:	89a3      	ldrh	r3, [r4, #12]
 800d73e:	065b      	lsls	r3, r3, #25
 800d740:	d500      	bpl.n	800d744 <_vfiprintf_r+0x23c>
 800d742:	e70a      	b.n	800d55a <_vfiprintf_r+0x52>
 800d744:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d746:	e70a      	b.n	800d55e <_vfiprintf_r+0x56>
 800d748:	ab07      	add	r3, sp, #28
 800d74a:	9300      	str	r3, [sp, #0]
 800d74c:	0022      	movs	r2, r4
 800d74e:	0029      	movs	r1, r5
 800d750:	0030      	movs	r0, r6
 800d752:	4b09      	ldr	r3, [pc, #36]	; (800d778 <_vfiprintf_r+0x270>)
 800d754:	f7fd fe7e 	bl	800b454 <_printf_i>
 800d758:	e7e3      	b.n	800d722 <_vfiprintf_r+0x21a>
 800d75a:	46c0      	nop			; (mov r8, r8)
 800d75c:	0800e888 	.word	0x0800e888
 800d760:	0800e8a8 	.word	0x0800e8a8
 800d764:	0800e868 	.word	0x0800e868
 800d768:	0800ea24 	.word	0x0800ea24
 800d76c:	0800ea2a 	.word	0x0800ea2a
 800d770:	0800ea2e 	.word	0x0800ea2e
 800d774:	0800aef1 	.word	0x0800aef1
 800d778:	0800d4e3 	.word	0x0800d4e3

0800d77c <_putc_r>:
 800d77c:	b570      	push	{r4, r5, r6, lr}
 800d77e:	0006      	movs	r6, r0
 800d780:	000d      	movs	r5, r1
 800d782:	0014      	movs	r4, r2
 800d784:	2800      	cmp	r0, #0
 800d786:	d004      	beq.n	800d792 <_putc_r+0x16>
 800d788:	6983      	ldr	r3, [r0, #24]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d101      	bne.n	800d792 <_putc_r+0x16>
 800d78e:	f7ff f8bf 	bl	800c910 <__sinit>
 800d792:	4b1c      	ldr	r3, [pc, #112]	; (800d804 <_putc_r+0x88>)
 800d794:	429c      	cmp	r4, r3
 800d796:	d124      	bne.n	800d7e2 <_putc_r+0x66>
 800d798:	6874      	ldr	r4, [r6, #4]
 800d79a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d79c:	07db      	lsls	r3, r3, #31
 800d79e:	d405      	bmi.n	800d7ac <_putc_r+0x30>
 800d7a0:	89a3      	ldrh	r3, [r4, #12]
 800d7a2:	059b      	lsls	r3, r3, #22
 800d7a4:	d402      	bmi.n	800d7ac <_putc_r+0x30>
 800d7a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7a8:	f7ff f957 	bl	800ca5a <__retarget_lock_acquire_recursive>
 800d7ac:	68a3      	ldr	r3, [r4, #8]
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	60a3      	str	r3, [r4, #8]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	da05      	bge.n	800d7c2 <_putc_r+0x46>
 800d7b6:	69a2      	ldr	r2, [r4, #24]
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	db1c      	blt.n	800d7f6 <_putc_r+0x7a>
 800d7bc:	b2eb      	uxtb	r3, r5
 800d7be:	2b0a      	cmp	r3, #10
 800d7c0:	d019      	beq.n	800d7f6 <_putc_r+0x7a>
 800d7c2:	6823      	ldr	r3, [r4, #0]
 800d7c4:	1c5a      	adds	r2, r3, #1
 800d7c6:	6022      	str	r2, [r4, #0]
 800d7c8:	701d      	strb	r5, [r3, #0]
 800d7ca:	b2ed      	uxtb	r5, r5
 800d7cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7ce:	07db      	lsls	r3, r3, #31
 800d7d0:	d405      	bmi.n	800d7de <_putc_r+0x62>
 800d7d2:	89a3      	ldrh	r3, [r4, #12]
 800d7d4:	059b      	lsls	r3, r3, #22
 800d7d6:	d402      	bmi.n	800d7de <_putc_r+0x62>
 800d7d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7da:	f7ff f93f 	bl	800ca5c <__retarget_lock_release_recursive>
 800d7de:	0028      	movs	r0, r5
 800d7e0:	bd70      	pop	{r4, r5, r6, pc}
 800d7e2:	4b09      	ldr	r3, [pc, #36]	; (800d808 <_putc_r+0x8c>)
 800d7e4:	429c      	cmp	r4, r3
 800d7e6:	d101      	bne.n	800d7ec <_putc_r+0x70>
 800d7e8:	68b4      	ldr	r4, [r6, #8]
 800d7ea:	e7d6      	b.n	800d79a <_putc_r+0x1e>
 800d7ec:	4b07      	ldr	r3, [pc, #28]	; (800d80c <_putc_r+0x90>)
 800d7ee:	429c      	cmp	r4, r3
 800d7f0:	d1d3      	bne.n	800d79a <_putc_r+0x1e>
 800d7f2:	68f4      	ldr	r4, [r6, #12]
 800d7f4:	e7d1      	b.n	800d79a <_putc_r+0x1e>
 800d7f6:	0029      	movs	r1, r5
 800d7f8:	0022      	movs	r2, r4
 800d7fa:	0030      	movs	r0, r6
 800d7fc:	f7fd ffe6 	bl	800b7cc <__swbuf_r>
 800d800:	0005      	movs	r5, r0
 800d802:	e7e3      	b.n	800d7cc <_putc_r+0x50>
 800d804:	0800e888 	.word	0x0800e888
 800d808:	0800e8a8 	.word	0x0800e8a8
 800d80c:	0800e868 	.word	0x0800e868

0800d810 <_sbrk_r>:
 800d810:	2300      	movs	r3, #0
 800d812:	b570      	push	{r4, r5, r6, lr}
 800d814:	4d06      	ldr	r5, [pc, #24]	; (800d830 <_sbrk_r+0x20>)
 800d816:	0004      	movs	r4, r0
 800d818:	0008      	movs	r0, r1
 800d81a:	602b      	str	r3, [r5, #0]
 800d81c:	f7f8 fd06 	bl	800622c <_sbrk>
 800d820:	1c43      	adds	r3, r0, #1
 800d822:	d103      	bne.n	800d82c <_sbrk_r+0x1c>
 800d824:	682b      	ldr	r3, [r5, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d000      	beq.n	800d82c <_sbrk_r+0x1c>
 800d82a:	6023      	str	r3, [r4, #0]
 800d82c:	bd70      	pop	{r4, r5, r6, pc}
 800d82e:	46c0      	nop			; (mov r8, r8)
 800d830:	20000670 	.word	0x20000670

0800d834 <__sread>:
 800d834:	b570      	push	{r4, r5, r6, lr}
 800d836:	000c      	movs	r4, r1
 800d838:	250e      	movs	r5, #14
 800d83a:	5f49      	ldrsh	r1, [r1, r5]
 800d83c:	f000 f8f4 	bl	800da28 <_read_r>
 800d840:	2800      	cmp	r0, #0
 800d842:	db03      	blt.n	800d84c <__sread+0x18>
 800d844:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d846:	181b      	adds	r3, r3, r0
 800d848:	6563      	str	r3, [r4, #84]	; 0x54
 800d84a:	bd70      	pop	{r4, r5, r6, pc}
 800d84c:	89a3      	ldrh	r3, [r4, #12]
 800d84e:	4a02      	ldr	r2, [pc, #8]	; (800d858 <__sread+0x24>)
 800d850:	4013      	ands	r3, r2
 800d852:	81a3      	strh	r3, [r4, #12]
 800d854:	e7f9      	b.n	800d84a <__sread+0x16>
 800d856:	46c0      	nop			; (mov r8, r8)
 800d858:	ffffefff 	.word	0xffffefff

0800d85c <__swrite>:
 800d85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85e:	001f      	movs	r7, r3
 800d860:	898b      	ldrh	r3, [r1, #12]
 800d862:	0005      	movs	r5, r0
 800d864:	000c      	movs	r4, r1
 800d866:	0016      	movs	r6, r2
 800d868:	05db      	lsls	r3, r3, #23
 800d86a:	d505      	bpl.n	800d878 <__swrite+0x1c>
 800d86c:	230e      	movs	r3, #14
 800d86e:	5ec9      	ldrsh	r1, [r1, r3]
 800d870:	2200      	movs	r2, #0
 800d872:	2302      	movs	r3, #2
 800d874:	f000 f8a2 	bl	800d9bc <_lseek_r>
 800d878:	89a3      	ldrh	r3, [r4, #12]
 800d87a:	4a05      	ldr	r2, [pc, #20]	; (800d890 <__swrite+0x34>)
 800d87c:	0028      	movs	r0, r5
 800d87e:	4013      	ands	r3, r2
 800d880:	81a3      	strh	r3, [r4, #12]
 800d882:	0032      	movs	r2, r6
 800d884:	230e      	movs	r3, #14
 800d886:	5ee1      	ldrsh	r1, [r4, r3]
 800d888:	003b      	movs	r3, r7
 800d88a:	f000 f81f 	bl	800d8cc <_write_r>
 800d88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d890:	ffffefff 	.word	0xffffefff

0800d894 <__sseek>:
 800d894:	b570      	push	{r4, r5, r6, lr}
 800d896:	000c      	movs	r4, r1
 800d898:	250e      	movs	r5, #14
 800d89a:	5f49      	ldrsh	r1, [r1, r5]
 800d89c:	f000 f88e 	bl	800d9bc <_lseek_r>
 800d8a0:	89a3      	ldrh	r3, [r4, #12]
 800d8a2:	1c42      	adds	r2, r0, #1
 800d8a4:	d103      	bne.n	800d8ae <__sseek+0x1a>
 800d8a6:	4a05      	ldr	r2, [pc, #20]	; (800d8bc <__sseek+0x28>)
 800d8a8:	4013      	ands	r3, r2
 800d8aa:	81a3      	strh	r3, [r4, #12]
 800d8ac:	bd70      	pop	{r4, r5, r6, pc}
 800d8ae:	2280      	movs	r2, #128	; 0x80
 800d8b0:	0152      	lsls	r2, r2, #5
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	81a3      	strh	r3, [r4, #12]
 800d8b6:	6560      	str	r0, [r4, #84]	; 0x54
 800d8b8:	e7f8      	b.n	800d8ac <__sseek+0x18>
 800d8ba:	46c0      	nop			; (mov r8, r8)
 800d8bc:	ffffefff 	.word	0xffffefff

0800d8c0 <__sclose>:
 800d8c0:	b510      	push	{r4, lr}
 800d8c2:	230e      	movs	r3, #14
 800d8c4:	5ec9      	ldrsh	r1, [r1, r3]
 800d8c6:	f000 f833 	bl	800d930 <_close_r>
 800d8ca:	bd10      	pop	{r4, pc}

0800d8cc <_write_r>:
 800d8cc:	b570      	push	{r4, r5, r6, lr}
 800d8ce:	0004      	movs	r4, r0
 800d8d0:	0008      	movs	r0, r1
 800d8d2:	0011      	movs	r1, r2
 800d8d4:	001a      	movs	r2, r3
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	4d05      	ldr	r5, [pc, #20]	; (800d8f0 <_write_r+0x24>)
 800d8da:	602b      	str	r3, [r5, #0]
 800d8dc:	f7f5 fdc4 	bl	8003468 <_write>
 800d8e0:	1c43      	adds	r3, r0, #1
 800d8e2:	d103      	bne.n	800d8ec <_write_r+0x20>
 800d8e4:	682b      	ldr	r3, [r5, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d000      	beq.n	800d8ec <_write_r+0x20>
 800d8ea:	6023      	str	r3, [r4, #0]
 800d8ec:	bd70      	pop	{r4, r5, r6, pc}
 800d8ee:	46c0      	nop			; (mov r8, r8)
 800d8f0:	20000670 	.word	0x20000670

0800d8f4 <__assert_func>:
 800d8f4:	b530      	push	{r4, r5, lr}
 800d8f6:	0014      	movs	r4, r2
 800d8f8:	001a      	movs	r2, r3
 800d8fa:	4b09      	ldr	r3, [pc, #36]	; (800d920 <__assert_func+0x2c>)
 800d8fc:	0005      	movs	r5, r0
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	b085      	sub	sp, #20
 800d902:	68d8      	ldr	r0, [r3, #12]
 800d904:	4b07      	ldr	r3, [pc, #28]	; (800d924 <__assert_func+0x30>)
 800d906:	2c00      	cmp	r4, #0
 800d908:	d101      	bne.n	800d90e <__assert_func+0x1a>
 800d90a:	4b07      	ldr	r3, [pc, #28]	; (800d928 <__assert_func+0x34>)
 800d90c:	001c      	movs	r4, r3
 800d90e:	9301      	str	r3, [sp, #4]
 800d910:	9100      	str	r1, [sp, #0]
 800d912:	002b      	movs	r3, r5
 800d914:	4905      	ldr	r1, [pc, #20]	; (800d92c <__assert_func+0x38>)
 800d916:	9402      	str	r4, [sp, #8]
 800d918:	f000 f81c 	bl	800d954 <fiprintf>
 800d91c:	f000 f8a5 	bl	800da6a <abort>
 800d920:	20000030 	.word	0x20000030
 800d924:	0800ea35 	.word	0x0800ea35
 800d928:	0800ea70 	.word	0x0800ea70
 800d92c:	0800ea42 	.word	0x0800ea42

0800d930 <_close_r>:
 800d930:	2300      	movs	r3, #0
 800d932:	b570      	push	{r4, r5, r6, lr}
 800d934:	4d06      	ldr	r5, [pc, #24]	; (800d950 <_close_r+0x20>)
 800d936:	0004      	movs	r4, r0
 800d938:	0008      	movs	r0, r1
 800d93a:	602b      	str	r3, [r5, #0]
 800d93c:	f7f8 fc49 	bl	80061d2 <_close>
 800d940:	1c43      	adds	r3, r0, #1
 800d942:	d103      	bne.n	800d94c <_close_r+0x1c>
 800d944:	682b      	ldr	r3, [r5, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d000      	beq.n	800d94c <_close_r+0x1c>
 800d94a:	6023      	str	r3, [r4, #0]
 800d94c:	bd70      	pop	{r4, r5, r6, pc}
 800d94e:	46c0      	nop			; (mov r8, r8)
 800d950:	20000670 	.word	0x20000670

0800d954 <fiprintf>:
 800d954:	b40e      	push	{r1, r2, r3}
 800d956:	b503      	push	{r0, r1, lr}
 800d958:	0001      	movs	r1, r0
 800d95a:	ab03      	add	r3, sp, #12
 800d95c:	4804      	ldr	r0, [pc, #16]	; (800d970 <fiprintf+0x1c>)
 800d95e:	cb04      	ldmia	r3!, {r2}
 800d960:	6800      	ldr	r0, [r0, #0]
 800d962:	9301      	str	r3, [sp, #4]
 800d964:	f7ff fdd0 	bl	800d508 <_vfiprintf_r>
 800d968:	b002      	add	sp, #8
 800d96a:	bc08      	pop	{r3}
 800d96c:	b003      	add	sp, #12
 800d96e:	4718      	bx	r3
 800d970:	20000030 	.word	0x20000030

0800d974 <_fstat_r>:
 800d974:	2300      	movs	r3, #0
 800d976:	b570      	push	{r4, r5, r6, lr}
 800d978:	4d06      	ldr	r5, [pc, #24]	; (800d994 <_fstat_r+0x20>)
 800d97a:	0004      	movs	r4, r0
 800d97c:	0008      	movs	r0, r1
 800d97e:	0011      	movs	r1, r2
 800d980:	602b      	str	r3, [r5, #0]
 800d982:	f7f8 fc30 	bl	80061e6 <_fstat>
 800d986:	1c43      	adds	r3, r0, #1
 800d988:	d103      	bne.n	800d992 <_fstat_r+0x1e>
 800d98a:	682b      	ldr	r3, [r5, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d000      	beq.n	800d992 <_fstat_r+0x1e>
 800d990:	6023      	str	r3, [r4, #0]
 800d992:	bd70      	pop	{r4, r5, r6, pc}
 800d994:	20000670 	.word	0x20000670

0800d998 <_isatty_r>:
 800d998:	2300      	movs	r3, #0
 800d99a:	b570      	push	{r4, r5, r6, lr}
 800d99c:	4d06      	ldr	r5, [pc, #24]	; (800d9b8 <_isatty_r+0x20>)
 800d99e:	0004      	movs	r4, r0
 800d9a0:	0008      	movs	r0, r1
 800d9a2:	602b      	str	r3, [r5, #0]
 800d9a4:	f7f8 fc2d 	bl	8006202 <_isatty>
 800d9a8:	1c43      	adds	r3, r0, #1
 800d9aa:	d103      	bne.n	800d9b4 <_isatty_r+0x1c>
 800d9ac:	682b      	ldr	r3, [r5, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d000      	beq.n	800d9b4 <_isatty_r+0x1c>
 800d9b2:	6023      	str	r3, [r4, #0]
 800d9b4:	bd70      	pop	{r4, r5, r6, pc}
 800d9b6:	46c0      	nop			; (mov r8, r8)
 800d9b8:	20000670 	.word	0x20000670

0800d9bc <_lseek_r>:
 800d9bc:	b570      	push	{r4, r5, r6, lr}
 800d9be:	0004      	movs	r4, r0
 800d9c0:	0008      	movs	r0, r1
 800d9c2:	0011      	movs	r1, r2
 800d9c4:	001a      	movs	r2, r3
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	4d05      	ldr	r5, [pc, #20]	; (800d9e0 <_lseek_r+0x24>)
 800d9ca:	602b      	str	r3, [r5, #0]
 800d9cc:	f7f8 fc22 	bl	8006214 <_lseek>
 800d9d0:	1c43      	adds	r3, r0, #1
 800d9d2:	d103      	bne.n	800d9dc <_lseek_r+0x20>
 800d9d4:	682b      	ldr	r3, [r5, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d000      	beq.n	800d9dc <_lseek_r+0x20>
 800d9da:	6023      	str	r3, [r4, #0]
 800d9dc:	bd70      	pop	{r4, r5, r6, pc}
 800d9de:	46c0      	nop			; (mov r8, r8)
 800d9e0:	20000670 	.word	0x20000670

0800d9e4 <__ascii_mbtowc>:
 800d9e4:	b082      	sub	sp, #8
 800d9e6:	2900      	cmp	r1, #0
 800d9e8:	d100      	bne.n	800d9ec <__ascii_mbtowc+0x8>
 800d9ea:	a901      	add	r1, sp, #4
 800d9ec:	1e10      	subs	r0, r2, #0
 800d9ee:	d006      	beq.n	800d9fe <__ascii_mbtowc+0x1a>
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d006      	beq.n	800da02 <__ascii_mbtowc+0x1e>
 800d9f4:	7813      	ldrb	r3, [r2, #0]
 800d9f6:	600b      	str	r3, [r1, #0]
 800d9f8:	7810      	ldrb	r0, [r2, #0]
 800d9fa:	1e43      	subs	r3, r0, #1
 800d9fc:	4198      	sbcs	r0, r3
 800d9fe:	b002      	add	sp, #8
 800da00:	4770      	bx	lr
 800da02:	2002      	movs	r0, #2
 800da04:	4240      	negs	r0, r0
 800da06:	e7fa      	b.n	800d9fe <__ascii_mbtowc+0x1a>

0800da08 <__malloc_lock>:
 800da08:	b510      	push	{r4, lr}
 800da0a:	4802      	ldr	r0, [pc, #8]	; (800da14 <__malloc_lock+0xc>)
 800da0c:	f7ff f825 	bl	800ca5a <__retarget_lock_acquire_recursive>
 800da10:	bd10      	pop	{r4, pc}
 800da12:	46c0      	nop			; (mov r8, r8)
 800da14:	20000664 	.word	0x20000664

0800da18 <__malloc_unlock>:
 800da18:	b510      	push	{r4, lr}
 800da1a:	4802      	ldr	r0, [pc, #8]	; (800da24 <__malloc_unlock+0xc>)
 800da1c:	f7ff f81e 	bl	800ca5c <__retarget_lock_release_recursive>
 800da20:	bd10      	pop	{r4, pc}
 800da22:	46c0      	nop			; (mov r8, r8)
 800da24:	20000664 	.word	0x20000664

0800da28 <_read_r>:
 800da28:	b570      	push	{r4, r5, r6, lr}
 800da2a:	0004      	movs	r4, r0
 800da2c:	0008      	movs	r0, r1
 800da2e:	0011      	movs	r1, r2
 800da30:	001a      	movs	r2, r3
 800da32:	2300      	movs	r3, #0
 800da34:	4d05      	ldr	r5, [pc, #20]	; (800da4c <_read_r+0x24>)
 800da36:	602b      	str	r3, [r5, #0]
 800da38:	f7f8 fbae 	bl	8006198 <_read>
 800da3c:	1c43      	adds	r3, r0, #1
 800da3e:	d103      	bne.n	800da48 <_read_r+0x20>
 800da40:	682b      	ldr	r3, [r5, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d000      	beq.n	800da48 <_read_r+0x20>
 800da46:	6023      	str	r3, [r4, #0]
 800da48:	bd70      	pop	{r4, r5, r6, pc}
 800da4a:	46c0      	nop			; (mov r8, r8)
 800da4c:	20000670 	.word	0x20000670

0800da50 <__ascii_wctomb>:
 800da50:	0003      	movs	r3, r0
 800da52:	1e08      	subs	r0, r1, #0
 800da54:	d005      	beq.n	800da62 <__ascii_wctomb+0x12>
 800da56:	2aff      	cmp	r2, #255	; 0xff
 800da58:	d904      	bls.n	800da64 <__ascii_wctomb+0x14>
 800da5a:	228a      	movs	r2, #138	; 0x8a
 800da5c:	2001      	movs	r0, #1
 800da5e:	601a      	str	r2, [r3, #0]
 800da60:	4240      	negs	r0, r0
 800da62:	4770      	bx	lr
 800da64:	2001      	movs	r0, #1
 800da66:	700a      	strb	r2, [r1, #0]
 800da68:	e7fb      	b.n	800da62 <__ascii_wctomb+0x12>

0800da6a <abort>:
 800da6a:	2006      	movs	r0, #6
 800da6c:	b510      	push	{r4, lr}
 800da6e:	f000 f82d 	bl	800dacc <raise>
 800da72:	2001      	movs	r0, #1
 800da74:	f7f8 fb84 	bl	8006180 <_exit>

0800da78 <_raise_r>:
 800da78:	b570      	push	{r4, r5, r6, lr}
 800da7a:	0004      	movs	r4, r0
 800da7c:	000d      	movs	r5, r1
 800da7e:	291f      	cmp	r1, #31
 800da80:	d904      	bls.n	800da8c <_raise_r+0x14>
 800da82:	2316      	movs	r3, #22
 800da84:	6003      	str	r3, [r0, #0]
 800da86:	2001      	movs	r0, #1
 800da88:	4240      	negs	r0, r0
 800da8a:	bd70      	pop	{r4, r5, r6, pc}
 800da8c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d004      	beq.n	800da9c <_raise_r+0x24>
 800da92:	008a      	lsls	r2, r1, #2
 800da94:	189b      	adds	r3, r3, r2
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	2a00      	cmp	r2, #0
 800da9a:	d108      	bne.n	800daae <_raise_r+0x36>
 800da9c:	0020      	movs	r0, r4
 800da9e:	f000 f831 	bl	800db04 <_getpid_r>
 800daa2:	002a      	movs	r2, r5
 800daa4:	0001      	movs	r1, r0
 800daa6:	0020      	movs	r0, r4
 800daa8:	f000 f81a 	bl	800dae0 <_kill_r>
 800daac:	e7ed      	b.n	800da8a <_raise_r+0x12>
 800daae:	2000      	movs	r0, #0
 800dab0:	2a01      	cmp	r2, #1
 800dab2:	d0ea      	beq.n	800da8a <_raise_r+0x12>
 800dab4:	1c51      	adds	r1, r2, #1
 800dab6:	d103      	bne.n	800dac0 <_raise_r+0x48>
 800dab8:	2316      	movs	r3, #22
 800daba:	3001      	adds	r0, #1
 800dabc:	6023      	str	r3, [r4, #0]
 800dabe:	e7e4      	b.n	800da8a <_raise_r+0x12>
 800dac0:	2400      	movs	r4, #0
 800dac2:	0028      	movs	r0, r5
 800dac4:	601c      	str	r4, [r3, #0]
 800dac6:	4790      	blx	r2
 800dac8:	0020      	movs	r0, r4
 800daca:	e7de      	b.n	800da8a <_raise_r+0x12>

0800dacc <raise>:
 800dacc:	b510      	push	{r4, lr}
 800dace:	4b03      	ldr	r3, [pc, #12]	; (800dadc <raise+0x10>)
 800dad0:	0001      	movs	r1, r0
 800dad2:	6818      	ldr	r0, [r3, #0]
 800dad4:	f7ff ffd0 	bl	800da78 <_raise_r>
 800dad8:	bd10      	pop	{r4, pc}
 800dada:	46c0      	nop			; (mov r8, r8)
 800dadc:	20000030 	.word	0x20000030

0800dae0 <_kill_r>:
 800dae0:	2300      	movs	r3, #0
 800dae2:	b570      	push	{r4, r5, r6, lr}
 800dae4:	4d06      	ldr	r5, [pc, #24]	; (800db00 <_kill_r+0x20>)
 800dae6:	0004      	movs	r4, r0
 800dae8:	0008      	movs	r0, r1
 800daea:	0011      	movs	r1, r2
 800daec:	602b      	str	r3, [r5, #0]
 800daee:	f7f8 fb37 	bl	8006160 <_kill>
 800daf2:	1c43      	adds	r3, r0, #1
 800daf4:	d103      	bne.n	800dafe <_kill_r+0x1e>
 800daf6:	682b      	ldr	r3, [r5, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d000      	beq.n	800dafe <_kill_r+0x1e>
 800dafc:	6023      	str	r3, [r4, #0]
 800dafe:	bd70      	pop	{r4, r5, r6, pc}
 800db00:	20000670 	.word	0x20000670

0800db04 <_getpid_r>:
 800db04:	b510      	push	{r4, lr}
 800db06:	f7f8 fb25 	bl	8006154 <_getpid>
 800db0a:	bd10      	pop	{r4, pc}

0800db0c <log>:
 800db0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0e:	0004      	movs	r4, r0
 800db10:	000d      	movs	r5, r1
 800db12:	f000 f831 	bl	800db78 <__ieee754_log>
 800db16:	0022      	movs	r2, r4
 800db18:	0006      	movs	r6, r0
 800db1a:	000f      	movs	r7, r1
 800db1c:	002b      	movs	r3, r5
 800db1e:	0020      	movs	r0, r4
 800db20:	0029      	movs	r1, r5
 800db22:	f7f5 fa05 	bl	8002f30 <__aeabi_dcmpun>
 800db26:	2800      	cmp	r0, #0
 800db28:	d115      	bne.n	800db56 <log+0x4a>
 800db2a:	2200      	movs	r2, #0
 800db2c:	2300      	movs	r3, #0
 800db2e:	0020      	movs	r0, r4
 800db30:	0029      	movs	r1, r5
 800db32:	f7f2 fca5 	bl	8000480 <__aeabi_dcmpgt>
 800db36:	2800      	cmp	r0, #0
 800db38:	d10d      	bne.n	800db56 <log+0x4a>
 800db3a:	2200      	movs	r2, #0
 800db3c:	2300      	movs	r3, #0
 800db3e:	0020      	movs	r0, r4
 800db40:	0029      	movs	r1, r5
 800db42:	f7f2 fc83 	bl	800044c <__aeabi_dcmpeq>
 800db46:	2800      	cmp	r0, #0
 800db48:	d008      	beq.n	800db5c <log+0x50>
 800db4a:	f7fd f8eb 	bl	800ad24 <__errno>
 800db4e:	2322      	movs	r3, #34	; 0x22
 800db50:	2600      	movs	r6, #0
 800db52:	4f07      	ldr	r7, [pc, #28]	; (800db70 <log+0x64>)
 800db54:	6003      	str	r3, [r0, #0]
 800db56:	0030      	movs	r0, r6
 800db58:	0039      	movs	r1, r7
 800db5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db5c:	f7fd f8e2 	bl	800ad24 <__errno>
 800db60:	2321      	movs	r3, #33	; 0x21
 800db62:	6003      	str	r3, [r0, #0]
 800db64:	4803      	ldr	r0, [pc, #12]	; (800db74 <log+0x68>)
 800db66:	f000 f9b7 	bl	800ded8 <nan>
 800db6a:	0006      	movs	r6, r0
 800db6c:	000f      	movs	r7, r1
 800db6e:	e7f2      	b.n	800db56 <log+0x4a>
 800db70:	fff00000 	.word	0xfff00000
 800db74:	0800ea70 	.word	0x0800ea70

0800db78 <__ieee754_log>:
 800db78:	2280      	movs	r2, #128	; 0x80
 800db7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db7c:	000b      	movs	r3, r1
 800db7e:	b08d      	sub	sp, #52	; 0x34
 800db80:	0352      	lsls	r2, r2, #13
 800db82:	4291      	cmp	r1, r2
 800db84:	da22      	bge.n	800dbcc <__ieee754_log+0x54>
 800db86:	004a      	lsls	r2, r1, #1
 800db88:	0852      	lsrs	r2, r2, #1
 800db8a:	4302      	orrs	r2, r0
 800db8c:	d107      	bne.n	800db9e <__ieee754_log+0x26>
 800db8e:	2200      	movs	r2, #0
 800db90:	2300      	movs	r3, #0
 800db92:	2000      	movs	r0, #0
 800db94:	49b3      	ldr	r1, [pc, #716]	; (800de64 <__ieee754_log+0x2ec>)
 800db96:	f7f3 ffcb 	bl	8001b30 <__aeabi_ddiv>
 800db9a:	b00d      	add	sp, #52	; 0x34
 800db9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db9e:	2900      	cmp	r1, #0
 800dba0:	da05      	bge.n	800dbae <__ieee754_log+0x36>
 800dba2:	0002      	movs	r2, r0
 800dba4:	f7f4 fe32 	bl	800280c <__aeabi_dsub>
 800dba8:	2200      	movs	r2, #0
 800dbaa:	2300      	movs	r3, #0
 800dbac:	e7f3      	b.n	800db96 <__ieee754_log+0x1e>
 800dbae:	4bae      	ldr	r3, [pc, #696]	; (800de68 <__ieee754_log+0x2f0>)
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f7f4 fbbf 	bl	8002334 <__aeabi_dmul>
 800dbb6:	2436      	movs	r4, #54	; 0x36
 800dbb8:	000b      	movs	r3, r1
 800dbba:	4264      	negs	r4, r4
 800dbbc:	4aab      	ldr	r2, [pc, #684]	; (800de6c <__ieee754_log+0x2f4>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	dd06      	ble.n	800dbd0 <__ieee754_log+0x58>
 800dbc2:	0002      	movs	r2, r0
 800dbc4:	000b      	movs	r3, r1
 800dbc6:	f7f3 fc77 	bl	80014b8 <__aeabi_dadd>
 800dbca:	e7e6      	b.n	800db9a <__ieee754_log+0x22>
 800dbcc:	2400      	movs	r4, #0
 800dbce:	e7f5      	b.n	800dbbc <__ieee754_log+0x44>
 800dbd0:	4da7      	ldr	r5, [pc, #668]	; (800de70 <__ieee754_log+0x2f8>)
 800dbd2:	151a      	asrs	r2, r3, #20
 800dbd4:	1952      	adds	r2, r2, r5
 800dbd6:	1912      	adds	r2, r2, r4
 800dbd8:	031b      	lsls	r3, r3, #12
 800dbda:	4ca6      	ldr	r4, [pc, #664]	; (800de74 <__ieee754_log+0x2fc>)
 800dbdc:	0b1b      	lsrs	r3, r3, #12
 800dbde:	9302      	str	r3, [sp, #8]
 800dbe0:	191c      	adds	r4, r3, r4
 800dbe2:	2380      	movs	r3, #128	; 0x80
 800dbe4:	035b      	lsls	r3, r3, #13
 800dbe6:	4023      	ands	r3, r4
 800dbe8:	4ca3      	ldr	r4, [pc, #652]	; (800de78 <__ieee754_log+0x300>)
 800dbea:	9d02      	ldr	r5, [sp, #8]
 800dbec:	405c      	eors	r4, r3
 800dbee:	151b      	asrs	r3, r3, #20
 800dbf0:	189b      	adds	r3, r3, r2
 800dbf2:	4325      	orrs	r5, r4
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	9300      	str	r3, [sp, #0]
 800dbf8:	0029      	movs	r1, r5
 800dbfa:	4b9f      	ldr	r3, [pc, #636]	; (800de78 <__ieee754_log+0x300>)
 800dbfc:	f7f4 fe06 	bl	800280c <__aeabi_dsub>
 800dc00:	9b02      	ldr	r3, [sp, #8]
 800dc02:	0006      	movs	r6, r0
 800dc04:	3302      	adds	r3, #2
 800dc06:	031b      	lsls	r3, r3, #12
 800dc08:	000f      	movs	r7, r1
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	0b1b      	lsrs	r3, r3, #12
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	dc64      	bgt.n	800dcdc <__ieee754_log+0x164>
 800dc12:	2300      	movs	r3, #0
 800dc14:	f7f2 fc1a 	bl	800044c <__aeabi_dcmpeq>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	d019      	beq.n	800dc50 <__ieee754_log+0xd8>
 800dc1c:	9b00      	ldr	r3, [sp, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d100      	bne.n	800dc24 <__ieee754_log+0xac>
 800dc22:	e11c      	b.n	800de5e <__ieee754_log+0x2e6>
 800dc24:	0018      	movs	r0, r3
 800dc26:	f7f5 f9d7 	bl	8002fd8 <__aeabi_i2d>
 800dc2a:	4a94      	ldr	r2, [pc, #592]	; (800de7c <__ieee754_log+0x304>)
 800dc2c:	4b94      	ldr	r3, [pc, #592]	; (800de80 <__ieee754_log+0x308>)
 800dc2e:	0004      	movs	r4, r0
 800dc30:	000d      	movs	r5, r1
 800dc32:	f7f4 fb7f 	bl	8002334 <__aeabi_dmul>
 800dc36:	4a93      	ldr	r2, [pc, #588]	; (800de84 <__ieee754_log+0x30c>)
 800dc38:	0006      	movs	r6, r0
 800dc3a:	000f      	movs	r7, r1
 800dc3c:	4b92      	ldr	r3, [pc, #584]	; (800de88 <__ieee754_log+0x310>)
 800dc3e:	0020      	movs	r0, r4
 800dc40:	0029      	movs	r1, r5
 800dc42:	f7f4 fb77 	bl	8002334 <__aeabi_dmul>
 800dc46:	0002      	movs	r2, r0
 800dc48:	000b      	movs	r3, r1
 800dc4a:	0030      	movs	r0, r6
 800dc4c:	0039      	movs	r1, r7
 800dc4e:	e7ba      	b.n	800dbc6 <__ieee754_log+0x4e>
 800dc50:	4a8e      	ldr	r2, [pc, #568]	; (800de8c <__ieee754_log+0x314>)
 800dc52:	4b8f      	ldr	r3, [pc, #572]	; (800de90 <__ieee754_log+0x318>)
 800dc54:	0030      	movs	r0, r6
 800dc56:	0039      	movs	r1, r7
 800dc58:	f7f4 fb6c 	bl	8002334 <__aeabi_dmul>
 800dc5c:	0002      	movs	r2, r0
 800dc5e:	000b      	movs	r3, r1
 800dc60:	2000      	movs	r0, #0
 800dc62:	498c      	ldr	r1, [pc, #560]	; (800de94 <__ieee754_log+0x31c>)
 800dc64:	f7f4 fdd2 	bl	800280c <__aeabi_dsub>
 800dc68:	0032      	movs	r2, r6
 800dc6a:	0004      	movs	r4, r0
 800dc6c:	000d      	movs	r5, r1
 800dc6e:	003b      	movs	r3, r7
 800dc70:	0030      	movs	r0, r6
 800dc72:	0039      	movs	r1, r7
 800dc74:	f7f4 fb5e 	bl	8002334 <__aeabi_dmul>
 800dc78:	000b      	movs	r3, r1
 800dc7a:	0002      	movs	r2, r0
 800dc7c:	0029      	movs	r1, r5
 800dc7e:	0020      	movs	r0, r4
 800dc80:	f7f4 fb58 	bl	8002334 <__aeabi_dmul>
 800dc84:	9b00      	ldr	r3, [sp, #0]
 800dc86:	9002      	str	r0, [sp, #8]
 800dc88:	9103      	str	r1, [sp, #12]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d106      	bne.n	800dc9c <__ieee754_log+0x124>
 800dc8e:	0002      	movs	r2, r0
 800dc90:	000b      	movs	r3, r1
 800dc92:	0030      	movs	r0, r6
 800dc94:	0039      	movs	r1, r7
 800dc96:	f7f4 fdb9 	bl	800280c <__aeabi_dsub>
 800dc9a:	e77e      	b.n	800db9a <__ieee754_log+0x22>
 800dc9c:	9800      	ldr	r0, [sp, #0]
 800dc9e:	f7f5 f99b 	bl	8002fd8 <__aeabi_i2d>
 800dca2:	4a76      	ldr	r2, [pc, #472]	; (800de7c <__ieee754_log+0x304>)
 800dca4:	4b76      	ldr	r3, [pc, #472]	; (800de80 <__ieee754_log+0x308>)
 800dca6:	0004      	movs	r4, r0
 800dca8:	000d      	movs	r5, r1
 800dcaa:	f7f4 fb43 	bl	8002334 <__aeabi_dmul>
 800dcae:	4a75      	ldr	r2, [pc, #468]	; (800de84 <__ieee754_log+0x30c>)
 800dcb0:	9000      	str	r0, [sp, #0]
 800dcb2:	9101      	str	r1, [sp, #4]
 800dcb4:	4b74      	ldr	r3, [pc, #464]	; (800de88 <__ieee754_log+0x310>)
 800dcb6:	0020      	movs	r0, r4
 800dcb8:	0029      	movs	r1, r5
 800dcba:	f7f4 fb3b 	bl	8002334 <__aeabi_dmul>
 800dcbe:	0002      	movs	r2, r0
 800dcc0:	000b      	movs	r3, r1
 800dcc2:	9802      	ldr	r0, [sp, #8]
 800dcc4:	9903      	ldr	r1, [sp, #12]
 800dcc6:	f7f4 fda1 	bl	800280c <__aeabi_dsub>
 800dcca:	0032      	movs	r2, r6
 800dccc:	003b      	movs	r3, r7
 800dcce:	f7f4 fd9d 	bl	800280c <__aeabi_dsub>
 800dcd2:	0002      	movs	r2, r0
 800dcd4:	000b      	movs	r3, r1
 800dcd6:	9800      	ldr	r0, [sp, #0]
 800dcd8:	9901      	ldr	r1, [sp, #4]
 800dcda:	e7dc      	b.n	800dc96 <__ieee754_log+0x11e>
 800dcdc:	2380      	movs	r3, #128	; 0x80
 800dcde:	05db      	lsls	r3, r3, #23
 800dce0:	f7f3 fbea 	bl	80014b8 <__aeabi_dadd>
 800dce4:	0002      	movs	r2, r0
 800dce6:	000b      	movs	r3, r1
 800dce8:	0030      	movs	r0, r6
 800dcea:	0039      	movs	r1, r7
 800dcec:	f7f3 ff20 	bl	8001b30 <__aeabi_ddiv>
 800dcf0:	9004      	str	r0, [sp, #16]
 800dcf2:	9105      	str	r1, [sp, #20]
 800dcf4:	9800      	ldr	r0, [sp, #0]
 800dcf6:	f7f5 f96f 	bl	8002fd8 <__aeabi_i2d>
 800dcfa:	9a04      	ldr	r2, [sp, #16]
 800dcfc:	9b05      	ldr	r3, [sp, #20]
 800dcfe:	9006      	str	r0, [sp, #24]
 800dd00:	9107      	str	r1, [sp, #28]
 800dd02:	0010      	movs	r0, r2
 800dd04:	0019      	movs	r1, r3
 800dd06:	f7f4 fb15 	bl	8002334 <__aeabi_dmul>
 800dd0a:	4a63      	ldr	r2, [pc, #396]	; (800de98 <__ieee754_log+0x320>)
 800dd0c:	9b02      	ldr	r3, [sp, #8]
 800dd0e:	4694      	mov	ip, r2
 800dd10:	4463      	add	r3, ip
 800dd12:	0002      	movs	r2, r0
 800dd14:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd16:	000b      	movs	r3, r1
 800dd18:	9008      	str	r0, [sp, #32]
 800dd1a:	9109      	str	r1, [sp, #36]	; 0x24
 800dd1c:	f7f4 fb0a 	bl	8002334 <__aeabi_dmul>
 800dd20:	0004      	movs	r4, r0
 800dd22:	000d      	movs	r5, r1
 800dd24:	4a5d      	ldr	r2, [pc, #372]	; (800de9c <__ieee754_log+0x324>)
 800dd26:	4b5e      	ldr	r3, [pc, #376]	; (800dea0 <__ieee754_log+0x328>)
 800dd28:	f7f4 fb04 	bl	8002334 <__aeabi_dmul>
 800dd2c:	4a5d      	ldr	r2, [pc, #372]	; (800dea4 <__ieee754_log+0x32c>)
 800dd2e:	4b5e      	ldr	r3, [pc, #376]	; (800dea8 <__ieee754_log+0x330>)
 800dd30:	f7f3 fbc2 	bl	80014b8 <__aeabi_dadd>
 800dd34:	0022      	movs	r2, r4
 800dd36:	002b      	movs	r3, r5
 800dd38:	f7f4 fafc 	bl	8002334 <__aeabi_dmul>
 800dd3c:	4a5b      	ldr	r2, [pc, #364]	; (800deac <__ieee754_log+0x334>)
 800dd3e:	4b5c      	ldr	r3, [pc, #368]	; (800deb0 <__ieee754_log+0x338>)
 800dd40:	f7f3 fbba 	bl	80014b8 <__aeabi_dadd>
 800dd44:	0022      	movs	r2, r4
 800dd46:	002b      	movs	r3, r5
 800dd48:	f7f4 faf4 	bl	8002334 <__aeabi_dmul>
 800dd4c:	4a59      	ldr	r2, [pc, #356]	; (800deb4 <__ieee754_log+0x33c>)
 800dd4e:	4b5a      	ldr	r3, [pc, #360]	; (800deb8 <__ieee754_log+0x340>)
 800dd50:	f7f3 fbb2 	bl	80014b8 <__aeabi_dadd>
 800dd54:	9a08      	ldr	r2, [sp, #32]
 800dd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd58:	f7f4 faec 	bl	8002334 <__aeabi_dmul>
 800dd5c:	4a57      	ldr	r2, [pc, #348]	; (800debc <__ieee754_log+0x344>)
 800dd5e:	9008      	str	r0, [sp, #32]
 800dd60:	9109      	str	r1, [sp, #36]	; 0x24
 800dd62:	4b57      	ldr	r3, [pc, #348]	; (800dec0 <__ieee754_log+0x348>)
 800dd64:	0020      	movs	r0, r4
 800dd66:	0029      	movs	r1, r5
 800dd68:	f7f4 fae4 	bl	8002334 <__aeabi_dmul>
 800dd6c:	4a55      	ldr	r2, [pc, #340]	; (800dec4 <__ieee754_log+0x34c>)
 800dd6e:	4b56      	ldr	r3, [pc, #344]	; (800dec8 <__ieee754_log+0x350>)
 800dd70:	f7f3 fba2 	bl	80014b8 <__aeabi_dadd>
 800dd74:	0022      	movs	r2, r4
 800dd76:	002b      	movs	r3, r5
 800dd78:	f7f4 fadc 	bl	8002334 <__aeabi_dmul>
 800dd7c:	4a53      	ldr	r2, [pc, #332]	; (800decc <__ieee754_log+0x354>)
 800dd7e:	4b54      	ldr	r3, [pc, #336]	; (800ded0 <__ieee754_log+0x358>)
 800dd80:	f7f3 fb9a 	bl	80014b8 <__aeabi_dadd>
 800dd84:	0022      	movs	r2, r4
 800dd86:	002b      	movs	r3, r5
 800dd88:	f7f4 fad4 	bl	8002334 <__aeabi_dmul>
 800dd8c:	0002      	movs	r2, r0
 800dd8e:	000b      	movs	r3, r1
 800dd90:	9808      	ldr	r0, [sp, #32]
 800dd92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd94:	f7f3 fb90 	bl	80014b8 <__aeabi_dadd>
 800dd98:	9a02      	ldr	r2, [sp, #8]
 800dd9a:	4b4e      	ldr	r3, [pc, #312]	; (800ded4 <__ieee754_log+0x35c>)
 800dd9c:	0004      	movs	r4, r0
 800dd9e:	1a9b      	subs	r3, r3, r2
 800dda0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dda2:	000d      	movs	r5, r1
 800dda4:	4313      	orrs	r3, r2
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	dd34      	ble.n	800de14 <__ieee754_log+0x29c>
 800ddaa:	2200      	movs	r2, #0
 800ddac:	4b39      	ldr	r3, [pc, #228]	; (800de94 <__ieee754_log+0x31c>)
 800ddae:	0030      	movs	r0, r6
 800ddb0:	0039      	movs	r1, r7
 800ddb2:	f7f4 fabf 	bl	8002334 <__aeabi_dmul>
 800ddb6:	0032      	movs	r2, r6
 800ddb8:	003b      	movs	r3, r7
 800ddba:	f7f4 fabb 	bl	8002334 <__aeabi_dmul>
 800ddbe:	0002      	movs	r2, r0
 800ddc0:	000b      	movs	r3, r1
 800ddc2:	9002      	str	r0, [sp, #8]
 800ddc4:	9103      	str	r1, [sp, #12]
 800ddc6:	0020      	movs	r0, r4
 800ddc8:	0029      	movs	r1, r5
 800ddca:	f7f3 fb75 	bl	80014b8 <__aeabi_dadd>
 800ddce:	9a04      	ldr	r2, [sp, #16]
 800ddd0:	9b05      	ldr	r3, [sp, #20]
 800ddd2:	f7f4 faaf 	bl	8002334 <__aeabi_dmul>
 800ddd6:	9b00      	ldr	r3, [sp, #0]
 800ddd8:	0004      	movs	r4, r0
 800ddda:	000d      	movs	r5, r1
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d106      	bne.n	800ddee <__ieee754_log+0x276>
 800dde0:	0002      	movs	r2, r0
 800dde2:	000b      	movs	r3, r1
 800dde4:	9802      	ldr	r0, [sp, #8]
 800dde6:	9903      	ldr	r1, [sp, #12]
 800dde8:	f7f4 fd10 	bl	800280c <__aeabi_dsub>
 800ddec:	e74f      	b.n	800dc8e <__ieee754_log+0x116>
 800ddee:	4a23      	ldr	r2, [pc, #140]	; (800de7c <__ieee754_log+0x304>)
 800ddf0:	4b23      	ldr	r3, [pc, #140]	; (800de80 <__ieee754_log+0x308>)
 800ddf2:	9806      	ldr	r0, [sp, #24]
 800ddf4:	9907      	ldr	r1, [sp, #28]
 800ddf6:	f7f4 fa9d 	bl	8002334 <__aeabi_dmul>
 800ddfa:	4a22      	ldr	r2, [pc, #136]	; (800de84 <__ieee754_log+0x30c>)
 800ddfc:	9000      	str	r0, [sp, #0]
 800ddfe:	9101      	str	r1, [sp, #4]
 800de00:	9806      	ldr	r0, [sp, #24]
 800de02:	9907      	ldr	r1, [sp, #28]
 800de04:	4b20      	ldr	r3, [pc, #128]	; (800de88 <__ieee754_log+0x310>)
 800de06:	f7f4 fa95 	bl	8002334 <__aeabi_dmul>
 800de0a:	0022      	movs	r2, r4
 800de0c:	002b      	movs	r3, r5
 800de0e:	f7f3 fb53 	bl	80014b8 <__aeabi_dadd>
 800de12:	e754      	b.n	800dcbe <__ieee754_log+0x146>
 800de14:	0002      	movs	r2, r0
 800de16:	000b      	movs	r3, r1
 800de18:	0030      	movs	r0, r6
 800de1a:	0039      	movs	r1, r7
 800de1c:	f7f4 fcf6 	bl	800280c <__aeabi_dsub>
 800de20:	9a04      	ldr	r2, [sp, #16]
 800de22:	9b05      	ldr	r3, [sp, #20]
 800de24:	f7f4 fa86 	bl	8002334 <__aeabi_dmul>
 800de28:	9b00      	ldr	r3, [sp, #0]
 800de2a:	0004      	movs	r4, r0
 800de2c:	000d      	movs	r5, r1
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d102      	bne.n	800de38 <__ieee754_log+0x2c0>
 800de32:	0002      	movs	r2, r0
 800de34:	000b      	movs	r3, r1
 800de36:	e72c      	b.n	800dc92 <__ieee754_log+0x11a>
 800de38:	4a10      	ldr	r2, [pc, #64]	; (800de7c <__ieee754_log+0x304>)
 800de3a:	4b11      	ldr	r3, [pc, #68]	; (800de80 <__ieee754_log+0x308>)
 800de3c:	9806      	ldr	r0, [sp, #24]
 800de3e:	9907      	ldr	r1, [sp, #28]
 800de40:	f7f4 fa78 	bl	8002334 <__aeabi_dmul>
 800de44:	4a0f      	ldr	r2, [pc, #60]	; (800de84 <__ieee754_log+0x30c>)
 800de46:	9000      	str	r0, [sp, #0]
 800de48:	9101      	str	r1, [sp, #4]
 800de4a:	9806      	ldr	r0, [sp, #24]
 800de4c:	9907      	ldr	r1, [sp, #28]
 800de4e:	4b0e      	ldr	r3, [pc, #56]	; (800de88 <__ieee754_log+0x310>)
 800de50:	f7f4 fa70 	bl	8002334 <__aeabi_dmul>
 800de54:	0002      	movs	r2, r0
 800de56:	000b      	movs	r3, r1
 800de58:	0020      	movs	r0, r4
 800de5a:	0029      	movs	r1, r5
 800de5c:	e733      	b.n	800dcc6 <__ieee754_log+0x14e>
 800de5e:	2000      	movs	r0, #0
 800de60:	2100      	movs	r1, #0
 800de62:	e69a      	b.n	800db9a <__ieee754_log+0x22>
 800de64:	c3500000 	.word	0xc3500000
 800de68:	43500000 	.word	0x43500000
 800de6c:	7fefffff 	.word	0x7fefffff
 800de70:	fffffc01 	.word	0xfffffc01
 800de74:	00095f64 	.word	0x00095f64
 800de78:	3ff00000 	.word	0x3ff00000
 800de7c:	fee00000 	.word	0xfee00000
 800de80:	3fe62e42 	.word	0x3fe62e42
 800de84:	35793c76 	.word	0x35793c76
 800de88:	3dea39ef 	.word	0x3dea39ef
 800de8c:	55555555 	.word	0x55555555
 800de90:	3fd55555 	.word	0x3fd55555
 800de94:	3fe00000 	.word	0x3fe00000
 800de98:	fff9eb86 	.word	0xfff9eb86
 800de9c:	df3e5244 	.word	0xdf3e5244
 800dea0:	3fc2f112 	.word	0x3fc2f112
 800dea4:	96cb03de 	.word	0x96cb03de
 800dea8:	3fc74664 	.word	0x3fc74664
 800deac:	94229359 	.word	0x94229359
 800deb0:	3fd24924 	.word	0x3fd24924
 800deb4:	55555593 	.word	0x55555593
 800deb8:	3fe55555 	.word	0x3fe55555
 800debc:	d078c69f 	.word	0xd078c69f
 800dec0:	3fc39a09 	.word	0x3fc39a09
 800dec4:	1d8e78af 	.word	0x1d8e78af
 800dec8:	3fcc71c5 	.word	0x3fcc71c5
 800decc:	9997fa04 	.word	0x9997fa04
 800ded0:	3fd99999 	.word	0x3fd99999
 800ded4:	0006b851 	.word	0x0006b851

0800ded8 <nan>:
 800ded8:	2000      	movs	r0, #0
 800deda:	4901      	ldr	r1, [pc, #4]	; (800dee0 <nan+0x8>)
 800dedc:	4770      	bx	lr
 800dede:	46c0      	nop			; (mov r8, r8)
 800dee0:	7ff80000 	.word	0x7ff80000

0800dee4 <_init>:
 800dee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee6:	46c0      	nop			; (mov r8, r8)
 800dee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deea:	bc08      	pop	{r3}
 800deec:	469e      	mov	lr, r3
 800deee:	4770      	bx	lr

0800def0 <_fini>:
 800def0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def2:	46c0      	nop			; (mov r8, r8)
 800def4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800def6:	bc08      	pop	{r3}
 800def8:	469e      	mov	lr, r3
 800defa:	4770      	bx	lr
