
NodeN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e138  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d14  0800e1f8  0800e1f8  0001e1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef0c  0800ef0c  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef0c  0800ef0c  0001ef0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef14  0800ef14  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef14  0800ef14  0001ef14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef18  0800ef18  0001ef18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800ef1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000238  0800f154  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  0800f154  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e2e  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039bc  00000000  00000000  0003608e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00039a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003ae58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b93  00000000  00000000  0003c0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ab0  00000000  00000000  00052c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e2aa  00000000  00000000  0006b71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e99c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b20  00000000  00000000  000e9a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000238 	.word	0x20000238
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e1e0 	.word	0x0800e1e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000023c 	.word	0x2000023c
 8000104:	0800e1e0 	.word	0x0800e1e0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ff15 	bl	800226c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe65 	bl	800211c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ff07 	bl	800226c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fefd 	bl	800226c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe8d 	bl	80021a0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe83 	bl	80021a0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fc87 	bl	8000dc4 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc13 	bl	8000cec <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc79 	bl	8000dc4 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc6f 	bl	8000dc4 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc1f 	bl	8000d38 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc15 	bl	8000d38 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f84c 	bl	80005e8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4647      	mov	r7, r8
 8000562:	b580      	push	{r7, lr}
 8000564:	0007      	movs	r7, r0
 8000566:	4699      	mov	r9, r3
 8000568:	0c3b      	lsrs	r3, r7, #16
 800056a:	469c      	mov	ip, r3
 800056c:	0413      	lsls	r3, r2, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	001d      	movs	r5, r3
 8000572:	000e      	movs	r6, r1
 8000574:	4661      	mov	r1, ip
 8000576:	0400      	lsls	r0, r0, #16
 8000578:	0c14      	lsrs	r4, r2, #16
 800057a:	0c00      	lsrs	r0, r0, #16
 800057c:	4345      	muls	r5, r0
 800057e:	434b      	muls	r3, r1
 8000580:	4360      	muls	r0, r4
 8000582:	4361      	muls	r1, r4
 8000584:	18c0      	adds	r0, r0, r3
 8000586:	0c2c      	lsrs	r4, r5, #16
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4372      	muls	r2, r6
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	4463      	add	r3, ip
 80005a2:	042d      	lsls	r5, r5, #16
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	18c9      	adds	r1, r1, r3
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	1889      	adds	r1, r1, r2
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	; 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff13 	bl	80013f4 <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	; 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd5f 	bl	8001098 <__aeabi_fsub>
 80005da:	f000 ff0b 	bl	80013f4 <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__udivmoddi4>:
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	4657      	mov	r7, sl
 80005ec:	464e      	mov	r6, r9
 80005ee:	4645      	mov	r5, r8
 80005f0:	46de      	mov	lr, fp
 80005f2:	b5e0      	push	{r5, r6, r7, lr}
 80005f4:	0004      	movs	r4, r0
 80005f6:	000d      	movs	r5, r1
 80005f8:	4692      	mov	sl, r2
 80005fa:	4699      	mov	r9, r3
 80005fc:	b083      	sub	sp, #12
 80005fe:	428b      	cmp	r3, r1
 8000600:	d830      	bhi.n	8000664 <__udivmoddi4+0x7c>
 8000602:	d02d      	beq.n	8000660 <__udivmoddi4+0x78>
 8000604:	4649      	mov	r1, r9
 8000606:	4650      	mov	r0, sl
 8000608:	f002 fe2a 	bl	8003260 <__clzdi2>
 800060c:	0029      	movs	r1, r5
 800060e:	0006      	movs	r6, r0
 8000610:	0020      	movs	r0, r4
 8000612:	f002 fe25 	bl	8003260 <__clzdi2>
 8000616:	1a33      	subs	r3, r6, r0
 8000618:	4698      	mov	r8, r3
 800061a:	3b20      	subs	r3, #32
 800061c:	469b      	mov	fp, r3
 800061e:	d433      	bmi.n	8000688 <__udivmoddi4+0xa0>
 8000620:	465a      	mov	r2, fp
 8000622:	4653      	mov	r3, sl
 8000624:	4093      	lsls	r3, r2
 8000626:	4642      	mov	r2, r8
 8000628:	001f      	movs	r7, r3
 800062a:	4653      	mov	r3, sl
 800062c:	4093      	lsls	r3, r2
 800062e:	001e      	movs	r6, r3
 8000630:	42af      	cmp	r7, r5
 8000632:	d83a      	bhi.n	80006aa <__udivmoddi4+0xc2>
 8000634:	42af      	cmp	r7, r5
 8000636:	d100      	bne.n	800063a <__udivmoddi4+0x52>
 8000638:	e078      	b.n	800072c <__udivmoddi4+0x144>
 800063a:	465b      	mov	r3, fp
 800063c:	1ba4      	subs	r4, r4, r6
 800063e:	41bd      	sbcs	r5, r7
 8000640:	2b00      	cmp	r3, #0
 8000642:	da00      	bge.n	8000646 <__udivmoddi4+0x5e>
 8000644:	e075      	b.n	8000732 <__udivmoddi4+0x14a>
 8000646:	2200      	movs	r2, #0
 8000648:	2300      	movs	r3, #0
 800064a:	9200      	str	r2, [sp, #0]
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2301      	movs	r3, #1
 8000650:	465a      	mov	r2, fp
 8000652:	4093      	lsls	r3, r2
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2301      	movs	r3, #1
 8000658:	4642      	mov	r2, r8
 800065a:	4093      	lsls	r3, r2
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	e028      	b.n	80006b2 <__udivmoddi4+0xca>
 8000660:	4282      	cmp	r2, r0
 8000662:	d9cf      	bls.n	8000604 <__udivmoddi4+0x1c>
 8000664:	2200      	movs	r2, #0
 8000666:	2300      	movs	r3, #0
 8000668:	9200      	str	r2, [sp, #0]
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <__udivmoddi4+0x8e>
 8000672:	601c      	str	r4, [r3, #0]
 8000674:	605d      	str	r5, [r3, #4]
 8000676:	9800      	ldr	r0, [sp, #0]
 8000678:	9901      	ldr	r1, [sp, #4]
 800067a:	b003      	add	sp, #12
 800067c:	bcf0      	pop	{r4, r5, r6, r7}
 800067e:	46bb      	mov	fp, r7
 8000680:	46b2      	mov	sl, r6
 8000682:	46a9      	mov	r9, r5
 8000684:	46a0      	mov	r8, r4
 8000686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000688:	4642      	mov	r2, r8
 800068a:	2320      	movs	r3, #32
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	4652      	mov	r2, sl
 8000690:	40da      	lsrs	r2, r3
 8000692:	4641      	mov	r1, r8
 8000694:	0013      	movs	r3, r2
 8000696:	464a      	mov	r2, r9
 8000698:	408a      	lsls	r2, r1
 800069a:	0017      	movs	r7, r2
 800069c:	4642      	mov	r2, r8
 800069e:	431f      	orrs	r7, r3
 80006a0:	4653      	mov	r3, sl
 80006a2:	4093      	lsls	r3, r2
 80006a4:	001e      	movs	r6, r3
 80006a6:	42af      	cmp	r7, r5
 80006a8:	d9c4      	bls.n	8000634 <__udivmoddi4+0x4c>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2300      	movs	r3, #0
 80006ae:	9200      	str	r2, [sp, #0]
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	4643      	mov	r3, r8
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0d9      	beq.n	800066c <__udivmoddi4+0x84>
 80006b8:	07fb      	lsls	r3, r7, #31
 80006ba:	0872      	lsrs	r2, r6, #1
 80006bc:	431a      	orrs	r2, r3
 80006be:	4646      	mov	r6, r8
 80006c0:	087b      	lsrs	r3, r7, #1
 80006c2:	e00e      	b.n	80006e2 <__udivmoddi4+0xfa>
 80006c4:	42ab      	cmp	r3, r5
 80006c6:	d101      	bne.n	80006cc <__udivmoddi4+0xe4>
 80006c8:	42a2      	cmp	r2, r4
 80006ca:	d80c      	bhi.n	80006e6 <__udivmoddi4+0xfe>
 80006cc:	1aa4      	subs	r4, r4, r2
 80006ce:	419d      	sbcs	r5, r3
 80006d0:	2001      	movs	r0, #1
 80006d2:	1924      	adds	r4, r4, r4
 80006d4:	416d      	adcs	r5, r5
 80006d6:	2100      	movs	r1, #0
 80006d8:	3e01      	subs	r6, #1
 80006da:	1824      	adds	r4, r4, r0
 80006dc:	414d      	adcs	r5, r1
 80006de:	2e00      	cmp	r6, #0
 80006e0:	d006      	beq.n	80006f0 <__udivmoddi4+0x108>
 80006e2:	42ab      	cmp	r3, r5
 80006e4:	d9ee      	bls.n	80006c4 <__udivmoddi4+0xdc>
 80006e6:	3e01      	subs	r6, #1
 80006e8:	1924      	adds	r4, r4, r4
 80006ea:	416d      	adcs	r5, r5
 80006ec:	2e00      	cmp	r6, #0
 80006ee:	d1f8      	bne.n	80006e2 <__udivmoddi4+0xfa>
 80006f0:	9800      	ldr	r0, [sp, #0]
 80006f2:	9901      	ldr	r1, [sp, #4]
 80006f4:	465b      	mov	r3, fp
 80006f6:	1900      	adds	r0, r0, r4
 80006f8:	4169      	adcs	r1, r5
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db24      	blt.n	8000748 <__udivmoddi4+0x160>
 80006fe:	002b      	movs	r3, r5
 8000700:	465a      	mov	r2, fp
 8000702:	4644      	mov	r4, r8
 8000704:	40d3      	lsrs	r3, r2
 8000706:	002a      	movs	r2, r5
 8000708:	40e2      	lsrs	r2, r4
 800070a:	001c      	movs	r4, r3
 800070c:	465b      	mov	r3, fp
 800070e:	0015      	movs	r5, r2
 8000710:	2b00      	cmp	r3, #0
 8000712:	db2a      	blt.n	800076a <__udivmoddi4+0x182>
 8000714:	0026      	movs	r6, r4
 8000716:	409e      	lsls	r6, r3
 8000718:	0033      	movs	r3, r6
 800071a:	0026      	movs	r6, r4
 800071c:	4647      	mov	r7, r8
 800071e:	40be      	lsls	r6, r7
 8000720:	0032      	movs	r2, r6
 8000722:	1a80      	subs	r0, r0, r2
 8000724:	4199      	sbcs	r1, r3
 8000726:	9000      	str	r0, [sp, #0]
 8000728:	9101      	str	r1, [sp, #4]
 800072a:	e79f      	b.n	800066c <__udivmoddi4+0x84>
 800072c:	42a3      	cmp	r3, r4
 800072e:	d8bc      	bhi.n	80006aa <__udivmoddi4+0xc2>
 8000730:	e783      	b.n	800063a <__udivmoddi4+0x52>
 8000732:	4642      	mov	r2, r8
 8000734:	2320      	movs	r3, #32
 8000736:	2100      	movs	r1, #0
 8000738:	1a9b      	subs	r3, r3, r2
 800073a:	2200      	movs	r2, #0
 800073c:	9100      	str	r1, [sp, #0]
 800073e:	9201      	str	r2, [sp, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	40da      	lsrs	r2, r3
 8000744:	9201      	str	r2, [sp, #4]
 8000746:	e786      	b.n	8000656 <__udivmoddi4+0x6e>
 8000748:	4642      	mov	r2, r8
 800074a:	2320      	movs	r3, #32
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	002a      	movs	r2, r5
 8000750:	4646      	mov	r6, r8
 8000752:	409a      	lsls	r2, r3
 8000754:	0023      	movs	r3, r4
 8000756:	40f3      	lsrs	r3, r6
 8000758:	4644      	mov	r4, r8
 800075a:	4313      	orrs	r3, r2
 800075c:	002a      	movs	r2, r5
 800075e:	40e2      	lsrs	r2, r4
 8000760:	001c      	movs	r4, r3
 8000762:	465b      	mov	r3, fp
 8000764:	0015      	movs	r5, r2
 8000766:	2b00      	cmp	r3, #0
 8000768:	dad4      	bge.n	8000714 <__udivmoddi4+0x12c>
 800076a:	4642      	mov	r2, r8
 800076c:	002f      	movs	r7, r5
 800076e:	2320      	movs	r3, #32
 8000770:	0026      	movs	r6, r4
 8000772:	4097      	lsls	r7, r2
 8000774:	1a9b      	subs	r3, r3, r2
 8000776:	40de      	lsrs	r6, r3
 8000778:	003b      	movs	r3, r7
 800077a:	4333      	orrs	r3, r6
 800077c:	e7cd      	b.n	800071a <__udivmoddi4+0x132>
 800077e:	46c0      	nop			; (mov r8, r8)

08000780 <__aeabi_fadd>:
 8000780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000782:	46c6      	mov	lr, r8
 8000784:	0243      	lsls	r3, r0, #9
 8000786:	0a5b      	lsrs	r3, r3, #9
 8000788:	024e      	lsls	r6, r1, #9
 800078a:	0045      	lsls	r5, r0, #1
 800078c:	004f      	lsls	r7, r1, #1
 800078e:	00da      	lsls	r2, r3, #3
 8000790:	0fc4      	lsrs	r4, r0, #31
 8000792:	469c      	mov	ip, r3
 8000794:	0a70      	lsrs	r0, r6, #9
 8000796:	4690      	mov	r8, r2
 8000798:	b500      	push	{lr}
 800079a:	0e2d      	lsrs	r5, r5, #24
 800079c:	0e3f      	lsrs	r7, r7, #24
 800079e:	0fc9      	lsrs	r1, r1, #31
 80007a0:	09b6      	lsrs	r6, r6, #6
 80007a2:	428c      	cmp	r4, r1
 80007a4:	d04b      	beq.n	800083e <__aeabi_fadd+0xbe>
 80007a6:	1bea      	subs	r2, r5, r7
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	dd36      	ble.n	800081a <__aeabi_fadd+0x9a>
 80007ac:	2f00      	cmp	r7, #0
 80007ae:	d061      	beq.n	8000874 <__aeabi_fadd+0xf4>
 80007b0:	2dff      	cmp	r5, #255	; 0xff
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fadd+0x36>
 80007b4:	e0ad      	b.n	8000912 <__aeabi_fadd+0x192>
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	04db      	lsls	r3, r3, #19
 80007ba:	431e      	orrs	r6, r3
 80007bc:	2a1b      	cmp	r2, #27
 80007be:	dc00      	bgt.n	80007c2 <__aeabi_fadd+0x42>
 80007c0:	e0d3      	b.n	800096a <__aeabi_fadd+0x1ea>
 80007c2:	2001      	movs	r0, #1
 80007c4:	4643      	mov	r3, r8
 80007c6:	1a18      	subs	r0, r3, r0
 80007c8:	0143      	lsls	r3, r0, #5
 80007ca:	d400      	bmi.n	80007ce <__aeabi_fadd+0x4e>
 80007cc:	e08c      	b.n	80008e8 <__aeabi_fadd+0x168>
 80007ce:	0180      	lsls	r0, r0, #6
 80007d0:	0987      	lsrs	r7, r0, #6
 80007d2:	0038      	movs	r0, r7
 80007d4:	f002 fd26 	bl	8003224 <__clzsi2>
 80007d8:	3805      	subs	r0, #5
 80007da:	4087      	lsls	r7, r0
 80007dc:	4285      	cmp	r5, r0
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_fadd+0x62>
 80007e0:	e0b6      	b.n	8000950 <__aeabi_fadd+0x1d0>
 80007e2:	1a2d      	subs	r5, r5, r0
 80007e4:	48b3      	ldr	r0, [pc, #716]	; (8000ab4 <__aeabi_fadd+0x334>)
 80007e6:	4038      	ands	r0, r7
 80007e8:	0743      	lsls	r3, r0, #29
 80007ea:	d004      	beq.n	80007f6 <__aeabi_fadd+0x76>
 80007ec:	230f      	movs	r3, #15
 80007ee:	4003      	ands	r3, r0
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fadd+0x76>
 80007f4:	3004      	adds	r0, #4
 80007f6:	0143      	lsls	r3, r0, #5
 80007f8:	d400      	bmi.n	80007fc <__aeabi_fadd+0x7c>
 80007fa:	e078      	b.n	80008ee <__aeabi_fadd+0x16e>
 80007fc:	1c6a      	adds	r2, r5, #1
 80007fe:	2dfe      	cmp	r5, #254	; 0xfe
 8000800:	d065      	beq.n	80008ce <__aeabi_fadd+0x14e>
 8000802:	0180      	lsls	r0, r0, #6
 8000804:	0a43      	lsrs	r3, r0, #9
 8000806:	469c      	mov	ip, r3
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	4663      	mov	r3, ip
 800080c:	05d0      	lsls	r0, r2, #23
 800080e:	4318      	orrs	r0, r3
 8000810:	07e4      	lsls	r4, r4, #31
 8000812:	4320      	orrs	r0, r4
 8000814:	bc80      	pop	{r7}
 8000816:	46b8      	mov	r8, r7
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081a:	2a00      	cmp	r2, #0
 800081c:	d035      	beq.n	800088a <__aeabi_fadd+0x10a>
 800081e:	1b7a      	subs	r2, r7, r5
 8000820:	2d00      	cmp	r5, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0xa6>
 8000824:	e0af      	b.n	8000986 <__aeabi_fadd+0x206>
 8000826:	4643      	mov	r3, r8
 8000828:	2b00      	cmp	r3, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fadd+0xae>
 800082c:	e0a7      	b.n	800097e <__aeabi_fadd+0x1fe>
 800082e:	1e53      	subs	r3, r2, #1
 8000830:	2a01      	cmp	r2, #1
 8000832:	d100      	bne.n	8000836 <__aeabi_fadd+0xb6>
 8000834:	e12f      	b.n	8000a96 <__aeabi_fadd+0x316>
 8000836:	2aff      	cmp	r2, #255	; 0xff
 8000838:	d069      	beq.n	800090e <__aeabi_fadd+0x18e>
 800083a:	001a      	movs	r2, r3
 800083c:	e0aa      	b.n	8000994 <__aeabi_fadd+0x214>
 800083e:	1be9      	subs	r1, r5, r7
 8000840:	2900      	cmp	r1, #0
 8000842:	dd70      	ble.n	8000926 <__aeabi_fadd+0x1a6>
 8000844:	2f00      	cmp	r7, #0
 8000846:	d037      	beq.n	80008b8 <__aeabi_fadd+0x138>
 8000848:	2dff      	cmp	r5, #255	; 0xff
 800084a:	d062      	beq.n	8000912 <__aeabi_fadd+0x192>
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	04db      	lsls	r3, r3, #19
 8000850:	431e      	orrs	r6, r3
 8000852:	291b      	cmp	r1, #27
 8000854:	dc00      	bgt.n	8000858 <__aeabi_fadd+0xd8>
 8000856:	e0b0      	b.n	80009ba <__aeabi_fadd+0x23a>
 8000858:	2001      	movs	r0, #1
 800085a:	4440      	add	r0, r8
 800085c:	0143      	lsls	r3, r0, #5
 800085e:	d543      	bpl.n	80008e8 <__aeabi_fadd+0x168>
 8000860:	3501      	adds	r5, #1
 8000862:	2dff      	cmp	r5, #255	; 0xff
 8000864:	d033      	beq.n	80008ce <__aeabi_fadd+0x14e>
 8000866:	2301      	movs	r3, #1
 8000868:	4a93      	ldr	r2, [pc, #588]	; (8000ab8 <__aeabi_fadd+0x338>)
 800086a:	4003      	ands	r3, r0
 800086c:	0840      	lsrs	r0, r0, #1
 800086e:	4010      	ands	r0, r2
 8000870:	4318      	orrs	r0, r3
 8000872:	e7b9      	b.n	80007e8 <__aeabi_fadd+0x68>
 8000874:	2e00      	cmp	r6, #0
 8000876:	d100      	bne.n	800087a <__aeabi_fadd+0xfa>
 8000878:	e083      	b.n	8000982 <__aeabi_fadd+0x202>
 800087a:	1e51      	subs	r1, r2, #1
 800087c:	2a01      	cmp	r2, #1
 800087e:	d100      	bne.n	8000882 <__aeabi_fadd+0x102>
 8000880:	e0d8      	b.n	8000a34 <__aeabi_fadd+0x2b4>
 8000882:	2aff      	cmp	r2, #255	; 0xff
 8000884:	d045      	beq.n	8000912 <__aeabi_fadd+0x192>
 8000886:	000a      	movs	r2, r1
 8000888:	e798      	b.n	80007bc <__aeabi_fadd+0x3c>
 800088a:	27fe      	movs	r7, #254	; 0xfe
 800088c:	1c6a      	adds	r2, r5, #1
 800088e:	4217      	tst	r7, r2
 8000890:	d000      	beq.n	8000894 <__aeabi_fadd+0x114>
 8000892:	e086      	b.n	80009a2 <__aeabi_fadd+0x222>
 8000894:	2d00      	cmp	r5, #0
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x11a>
 8000898:	e0b7      	b.n	8000a0a <__aeabi_fadd+0x28a>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d100      	bne.n	80008a2 <__aeabi_fadd+0x122>
 80008a0:	e0f3      	b.n	8000a8a <__aeabi_fadd+0x30a>
 80008a2:	2200      	movs	r2, #0
 80008a4:	2e00      	cmp	r6, #0
 80008a6:	d0b0      	beq.n	800080a <__aeabi_fadd+0x8a>
 80008a8:	1b98      	subs	r0, r3, r6
 80008aa:	0143      	lsls	r3, r0, #5
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_fadd+0x130>
 80008ae:	e0fa      	b.n	8000aa6 <__aeabi_fadd+0x326>
 80008b0:	4643      	mov	r3, r8
 80008b2:	000c      	movs	r4, r1
 80008b4:	1af0      	subs	r0, r6, r3
 80008b6:	e797      	b.n	80007e8 <__aeabi_fadd+0x68>
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d100      	bne.n	80008be <__aeabi_fadd+0x13e>
 80008bc:	e0c8      	b.n	8000a50 <__aeabi_fadd+0x2d0>
 80008be:	1e4a      	subs	r2, r1, #1
 80008c0:	2901      	cmp	r1, #1
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fadd+0x146>
 80008c4:	e0ae      	b.n	8000a24 <__aeabi_fadd+0x2a4>
 80008c6:	29ff      	cmp	r1, #255	; 0xff
 80008c8:	d023      	beq.n	8000912 <__aeabi_fadd+0x192>
 80008ca:	0011      	movs	r1, r2
 80008cc:	e7c1      	b.n	8000852 <__aeabi_fadd+0xd2>
 80008ce:	2300      	movs	r3, #0
 80008d0:	22ff      	movs	r2, #255	; 0xff
 80008d2:	469c      	mov	ip, r3
 80008d4:	e799      	b.n	800080a <__aeabi_fadd+0x8a>
 80008d6:	21fe      	movs	r1, #254	; 0xfe
 80008d8:	1c6a      	adds	r2, r5, #1
 80008da:	4211      	tst	r1, r2
 80008dc:	d077      	beq.n	80009ce <__aeabi_fadd+0x24e>
 80008de:	2aff      	cmp	r2, #255	; 0xff
 80008e0:	d0f5      	beq.n	80008ce <__aeabi_fadd+0x14e>
 80008e2:	0015      	movs	r5, r2
 80008e4:	4446      	add	r6, r8
 80008e6:	0870      	lsrs	r0, r6, #1
 80008e8:	0743      	lsls	r3, r0, #29
 80008ea:	d000      	beq.n	80008ee <__aeabi_fadd+0x16e>
 80008ec:	e77e      	b.n	80007ec <__aeabi_fadd+0x6c>
 80008ee:	08c3      	lsrs	r3, r0, #3
 80008f0:	2dff      	cmp	r5, #255	; 0xff
 80008f2:	d00e      	beq.n	8000912 <__aeabi_fadd+0x192>
 80008f4:	025b      	lsls	r3, r3, #9
 80008f6:	0a5b      	lsrs	r3, r3, #9
 80008f8:	469c      	mov	ip, r3
 80008fa:	b2ea      	uxtb	r2, r5
 80008fc:	e785      	b.n	800080a <__aeabi_fadd+0x8a>
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d007      	beq.n	8000912 <__aeabi_fadd+0x192>
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	03d2      	lsls	r2, r2, #15
 8000906:	4213      	tst	r3, r2
 8000908:	d003      	beq.n	8000912 <__aeabi_fadd+0x192>
 800090a:	4210      	tst	r0, r2
 800090c:	d101      	bne.n	8000912 <__aeabi_fadd+0x192>
 800090e:	000c      	movs	r4, r1
 8000910:	0003      	movs	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0db      	beq.n	80008ce <__aeabi_fadd+0x14e>
 8000916:	2080      	movs	r0, #128	; 0x80
 8000918:	03c0      	lsls	r0, r0, #15
 800091a:	4318      	orrs	r0, r3
 800091c:	0240      	lsls	r0, r0, #9
 800091e:	0a43      	lsrs	r3, r0, #9
 8000920:	469c      	mov	ip, r3
 8000922:	22ff      	movs	r2, #255	; 0xff
 8000924:	e771      	b.n	800080a <__aeabi_fadd+0x8a>
 8000926:	2900      	cmp	r1, #0
 8000928:	d0d5      	beq.n	80008d6 <__aeabi_fadd+0x156>
 800092a:	1b7a      	subs	r2, r7, r5
 800092c:	2d00      	cmp	r5, #0
 800092e:	d160      	bne.n	80009f2 <__aeabi_fadd+0x272>
 8000930:	4643      	mov	r3, r8
 8000932:	2b00      	cmp	r3, #0
 8000934:	d024      	beq.n	8000980 <__aeabi_fadd+0x200>
 8000936:	1e53      	subs	r3, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d073      	beq.n	8000a24 <__aeabi_fadd+0x2a4>
 800093c:	2aff      	cmp	r2, #255	; 0xff
 800093e:	d0e7      	beq.n	8000910 <__aeabi_fadd+0x190>
 8000940:	001a      	movs	r2, r3
 8000942:	2a1b      	cmp	r2, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x1c8>
 8000946:	e085      	b.n	8000a54 <__aeabi_fadd+0x2d4>
 8000948:	2001      	movs	r0, #1
 800094a:	003d      	movs	r5, r7
 800094c:	1980      	adds	r0, r0, r6
 800094e:	e785      	b.n	800085c <__aeabi_fadd+0xdc>
 8000950:	2320      	movs	r3, #32
 8000952:	003a      	movs	r2, r7
 8000954:	1b45      	subs	r5, r0, r5
 8000956:	0038      	movs	r0, r7
 8000958:	3501      	adds	r5, #1
 800095a:	40ea      	lsrs	r2, r5
 800095c:	1b5d      	subs	r5, r3, r5
 800095e:	40a8      	lsls	r0, r5
 8000960:	1e43      	subs	r3, r0, #1
 8000962:	4198      	sbcs	r0, r3
 8000964:	2500      	movs	r5, #0
 8000966:	4310      	orrs	r0, r2
 8000968:	e73e      	b.n	80007e8 <__aeabi_fadd+0x68>
 800096a:	2320      	movs	r3, #32
 800096c:	0030      	movs	r0, r6
 800096e:	1a9b      	subs	r3, r3, r2
 8000970:	0031      	movs	r1, r6
 8000972:	4098      	lsls	r0, r3
 8000974:	40d1      	lsrs	r1, r2
 8000976:	1e43      	subs	r3, r0, #1
 8000978:	4198      	sbcs	r0, r3
 800097a:	4308      	orrs	r0, r1
 800097c:	e722      	b.n	80007c4 <__aeabi_fadd+0x44>
 800097e:	000c      	movs	r4, r1
 8000980:	0003      	movs	r3, r0
 8000982:	0015      	movs	r5, r2
 8000984:	e7b4      	b.n	80008f0 <__aeabi_fadd+0x170>
 8000986:	2fff      	cmp	r7, #255	; 0xff
 8000988:	d0c1      	beq.n	800090e <__aeabi_fadd+0x18e>
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	4640      	mov	r0, r8
 800098e:	04db      	lsls	r3, r3, #19
 8000990:	4318      	orrs	r0, r3
 8000992:	4680      	mov	r8, r0
 8000994:	2a1b      	cmp	r2, #27
 8000996:	dd51      	ble.n	8000a3c <__aeabi_fadd+0x2bc>
 8000998:	2001      	movs	r0, #1
 800099a:	000c      	movs	r4, r1
 800099c:	003d      	movs	r5, r7
 800099e:	1a30      	subs	r0, r6, r0
 80009a0:	e712      	b.n	80007c8 <__aeabi_fadd+0x48>
 80009a2:	4643      	mov	r3, r8
 80009a4:	1b9f      	subs	r7, r3, r6
 80009a6:	017b      	lsls	r3, r7, #5
 80009a8:	d42b      	bmi.n	8000a02 <__aeabi_fadd+0x282>
 80009aa:	2f00      	cmp	r7, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fadd+0x230>
 80009ae:	e710      	b.n	80007d2 <__aeabi_fadd+0x52>
 80009b0:	2300      	movs	r3, #0
 80009b2:	2400      	movs	r4, #0
 80009b4:	2200      	movs	r2, #0
 80009b6:	469c      	mov	ip, r3
 80009b8:	e727      	b.n	800080a <__aeabi_fadd+0x8a>
 80009ba:	2320      	movs	r3, #32
 80009bc:	0032      	movs	r2, r6
 80009be:	0030      	movs	r0, r6
 80009c0:	40ca      	lsrs	r2, r1
 80009c2:	1a59      	subs	r1, r3, r1
 80009c4:	4088      	lsls	r0, r1
 80009c6:	1e43      	subs	r3, r0, #1
 80009c8:	4198      	sbcs	r0, r3
 80009ca:	4310      	orrs	r0, r2
 80009cc:	e745      	b.n	800085a <__aeabi_fadd+0xda>
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d14a      	bne.n	8000a68 <__aeabi_fadd+0x2e8>
 80009d2:	4643      	mov	r3, r8
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d063      	beq.n	8000aa0 <__aeabi_fadd+0x320>
 80009d8:	2200      	movs	r2, #0
 80009da:	2e00      	cmp	r6, #0
 80009dc:	d100      	bne.n	80009e0 <__aeabi_fadd+0x260>
 80009de:	e714      	b.n	800080a <__aeabi_fadd+0x8a>
 80009e0:	0030      	movs	r0, r6
 80009e2:	4440      	add	r0, r8
 80009e4:	0143      	lsls	r3, r0, #5
 80009e6:	d400      	bmi.n	80009ea <__aeabi_fadd+0x26a>
 80009e8:	e77e      	b.n	80008e8 <__aeabi_fadd+0x168>
 80009ea:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <__aeabi_fadd+0x334>)
 80009ec:	3501      	adds	r5, #1
 80009ee:	4018      	ands	r0, r3
 80009f0:	e77a      	b.n	80008e8 <__aeabi_fadd+0x168>
 80009f2:	2fff      	cmp	r7, #255	; 0xff
 80009f4:	d08c      	beq.n	8000910 <__aeabi_fadd+0x190>
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	4641      	mov	r1, r8
 80009fa:	04db      	lsls	r3, r3, #19
 80009fc:	4319      	orrs	r1, r3
 80009fe:	4688      	mov	r8, r1
 8000a00:	e79f      	b.n	8000942 <__aeabi_fadd+0x1c2>
 8000a02:	4643      	mov	r3, r8
 8000a04:	000c      	movs	r4, r1
 8000a06:	1af7      	subs	r7, r6, r3
 8000a08:	e6e3      	b.n	80007d2 <__aeabi_fadd+0x52>
 8000a0a:	4642      	mov	r2, r8
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_fadd+0x292>
 8000a10:	e775      	b.n	80008fe <__aeabi_fadd+0x17e>
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d000      	beq.n	8000a18 <__aeabi_fadd+0x298>
 8000a16:	e77a      	b.n	800090e <__aeabi_fadd+0x18e>
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	03db      	lsls	r3, r3, #15
 8000a1c:	2400      	movs	r4, #0
 8000a1e:	469c      	mov	ip, r3
 8000a20:	22ff      	movs	r2, #255	; 0xff
 8000a22:	e6f2      	b.n	800080a <__aeabi_fadd+0x8a>
 8000a24:	0030      	movs	r0, r6
 8000a26:	4440      	add	r0, r8
 8000a28:	2501      	movs	r5, #1
 8000a2a:	0143      	lsls	r3, r0, #5
 8000a2c:	d400      	bmi.n	8000a30 <__aeabi_fadd+0x2b0>
 8000a2e:	e75b      	b.n	80008e8 <__aeabi_fadd+0x168>
 8000a30:	2502      	movs	r5, #2
 8000a32:	e718      	b.n	8000866 <__aeabi_fadd+0xe6>
 8000a34:	4643      	mov	r3, r8
 8000a36:	2501      	movs	r5, #1
 8000a38:	1b98      	subs	r0, r3, r6
 8000a3a:	e6c5      	b.n	80007c8 <__aeabi_fadd+0x48>
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	4644      	mov	r4, r8
 8000a40:	4640      	mov	r0, r8
 8000a42:	40d4      	lsrs	r4, r2
 8000a44:	1a9a      	subs	r2, r3, r2
 8000a46:	4090      	lsls	r0, r2
 8000a48:	1e43      	subs	r3, r0, #1
 8000a4a:	4198      	sbcs	r0, r3
 8000a4c:	4320      	orrs	r0, r4
 8000a4e:	e7a4      	b.n	800099a <__aeabi_fadd+0x21a>
 8000a50:	000d      	movs	r5, r1
 8000a52:	e74d      	b.n	80008f0 <__aeabi_fadd+0x170>
 8000a54:	2320      	movs	r3, #32
 8000a56:	4641      	mov	r1, r8
 8000a58:	4640      	mov	r0, r8
 8000a5a:	40d1      	lsrs	r1, r2
 8000a5c:	1a9a      	subs	r2, r3, r2
 8000a5e:	4090      	lsls	r0, r2
 8000a60:	1e43      	subs	r3, r0, #1
 8000a62:	4198      	sbcs	r0, r3
 8000a64:	4308      	orrs	r0, r1
 8000a66:	e770      	b.n	800094a <__aeabi_fadd+0x1ca>
 8000a68:	4642      	mov	r2, r8
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_fadd+0x2f0>
 8000a6e:	e74f      	b.n	8000910 <__aeabi_fadd+0x190>
 8000a70:	2e00      	cmp	r6, #0
 8000a72:	d100      	bne.n	8000a76 <__aeabi_fadd+0x2f6>
 8000a74:	e74d      	b.n	8000912 <__aeabi_fadd+0x192>
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	03d2      	lsls	r2, r2, #15
 8000a7a:	4213      	tst	r3, r2
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fadd+0x300>
 8000a7e:	e748      	b.n	8000912 <__aeabi_fadd+0x192>
 8000a80:	4210      	tst	r0, r2
 8000a82:	d000      	beq.n	8000a86 <__aeabi_fadd+0x306>
 8000a84:	e745      	b.n	8000912 <__aeabi_fadd+0x192>
 8000a86:	0003      	movs	r3, r0
 8000a88:	e743      	b.n	8000912 <__aeabi_fadd+0x192>
 8000a8a:	2e00      	cmp	r6, #0
 8000a8c:	d090      	beq.n	80009b0 <__aeabi_fadd+0x230>
 8000a8e:	000c      	movs	r4, r1
 8000a90:	4684      	mov	ip, r0
 8000a92:	2200      	movs	r2, #0
 8000a94:	e6b9      	b.n	800080a <__aeabi_fadd+0x8a>
 8000a96:	4643      	mov	r3, r8
 8000a98:	000c      	movs	r4, r1
 8000a9a:	1af0      	subs	r0, r6, r3
 8000a9c:	3501      	adds	r5, #1
 8000a9e:	e693      	b.n	80007c8 <__aeabi_fadd+0x48>
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	e6b1      	b.n	800080a <__aeabi_fadd+0x8a>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	d000      	beq.n	8000aac <__aeabi_fadd+0x32c>
 8000aaa:	e71d      	b.n	80008e8 <__aeabi_fadd+0x168>
 8000aac:	2300      	movs	r3, #0
 8000aae:	2400      	movs	r4, #0
 8000ab0:	469c      	mov	ip, r3
 8000ab2:	e6aa      	b.n	800080a <__aeabi_fadd+0x8a>
 8000ab4:	fbffffff 	.word	0xfbffffff
 8000ab8:	7dffffff 	.word	0x7dffffff

08000abc <__aeabi_fdiv>:
 8000abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000abe:	464f      	mov	r7, r9
 8000ac0:	4646      	mov	r6, r8
 8000ac2:	46d6      	mov	lr, sl
 8000ac4:	0245      	lsls	r5, r0, #9
 8000ac6:	b5c0      	push	{r6, r7, lr}
 8000ac8:	0047      	lsls	r7, r0, #1
 8000aca:	1c0c      	adds	r4, r1, #0
 8000acc:	0a6d      	lsrs	r5, r5, #9
 8000ace:	0e3f      	lsrs	r7, r7, #24
 8000ad0:	0fc6      	lsrs	r6, r0, #31
 8000ad2:	2f00      	cmp	r7, #0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_fdiv+0x1c>
 8000ad6:	e070      	b.n	8000bba <__aeabi_fdiv+0xfe>
 8000ad8:	2fff      	cmp	r7, #255	; 0xff
 8000ada:	d100      	bne.n	8000ade <__aeabi_fdiv+0x22>
 8000adc:	e075      	b.n	8000bca <__aeabi_fdiv+0x10e>
 8000ade:	00eb      	lsls	r3, r5, #3
 8000ae0:	2580      	movs	r5, #128	; 0x80
 8000ae2:	04ed      	lsls	r5, r5, #19
 8000ae4:	431d      	orrs	r5, r3
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	4699      	mov	r9, r3
 8000aea:	469a      	mov	sl, r3
 8000aec:	3f7f      	subs	r7, #127	; 0x7f
 8000aee:	0260      	lsls	r0, r4, #9
 8000af0:	0a43      	lsrs	r3, r0, #9
 8000af2:	4698      	mov	r8, r3
 8000af4:	0063      	lsls	r3, r4, #1
 8000af6:	0e1b      	lsrs	r3, r3, #24
 8000af8:	0fe4      	lsrs	r4, r4, #31
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d04e      	beq.n	8000b9c <__aeabi_fdiv+0xe0>
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d046      	beq.n	8000b90 <__aeabi_fdiv+0xd4>
 8000b02:	4642      	mov	r2, r8
 8000b04:	00d0      	lsls	r0, r2, #3
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	04d2      	lsls	r2, r2, #19
 8000b0a:	4302      	orrs	r2, r0
 8000b0c:	4690      	mov	r8, r2
 8000b0e:	2200      	movs	r2, #0
 8000b10:	3b7f      	subs	r3, #127	; 0x7f
 8000b12:	0031      	movs	r1, r6
 8000b14:	1aff      	subs	r7, r7, r3
 8000b16:	464b      	mov	r3, r9
 8000b18:	4061      	eors	r1, r4
 8000b1a:	b2c9      	uxtb	r1, r1
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	2b0f      	cmp	r3, #15
 8000b20:	d900      	bls.n	8000b24 <__aeabi_fdiv+0x68>
 8000b22:	e0b5      	b.n	8000c90 <__aeabi_fdiv+0x1d4>
 8000b24:	486e      	ldr	r0, [pc, #440]	; (8000ce0 <__aeabi_fdiv+0x224>)
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	58c3      	ldr	r3, [r0, r3]
 8000b2a:	469f      	mov	pc, r3
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	4698      	mov	r8, r3
 8000b30:	0026      	movs	r6, r4
 8000b32:	4645      	mov	r5, r8
 8000b34:	4692      	mov	sl, r2
 8000b36:	4653      	mov	r3, sl
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_fdiv+0x82>
 8000b3c:	e089      	b.n	8000c52 <__aeabi_fdiv+0x196>
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d100      	bne.n	8000b44 <__aeabi_fdiv+0x88>
 8000b42:	e09e      	b.n	8000c82 <__aeabi_fdiv+0x1c6>
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d018      	beq.n	8000b7a <__aeabi_fdiv+0xbe>
 8000b48:	003b      	movs	r3, r7
 8000b4a:	337f      	adds	r3, #127	; 0x7f
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd69      	ble.n	8000c24 <__aeabi_fdiv+0x168>
 8000b50:	076a      	lsls	r2, r5, #29
 8000b52:	d004      	beq.n	8000b5e <__aeabi_fdiv+0xa2>
 8000b54:	220f      	movs	r2, #15
 8000b56:	402a      	ands	r2, r5
 8000b58:	2a04      	cmp	r2, #4
 8000b5a:	d000      	beq.n	8000b5e <__aeabi_fdiv+0xa2>
 8000b5c:	3504      	adds	r5, #4
 8000b5e:	012a      	lsls	r2, r5, #4
 8000b60:	d503      	bpl.n	8000b6a <__aeabi_fdiv+0xae>
 8000b62:	4b60      	ldr	r3, [pc, #384]	; (8000ce4 <__aeabi_fdiv+0x228>)
 8000b64:	401d      	ands	r5, r3
 8000b66:	003b      	movs	r3, r7
 8000b68:	3380      	adds	r3, #128	; 0x80
 8000b6a:	2bfe      	cmp	r3, #254	; 0xfe
 8000b6c:	dd00      	ble.n	8000b70 <__aeabi_fdiv+0xb4>
 8000b6e:	e070      	b.n	8000c52 <__aeabi_fdiv+0x196>
 8000b70:	01ad      	lsls	r5, r5, #6
 8000b72:	0a6d      	lsrs	r5, r5, #9
 8000b74:	b2d8      	uxtb	r0, r3
 8000b76:	e002      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000b78:	000e      	movs	r6, r1
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	2500      	movs	r5, #0
 8000b7e:	05c0      	lsls	r0, r0, #23
 8000b80:	4328      	orrs	r0, r5
 8000b82:	07f6      	lsls	r6, r6, #31
 8000b84:	4330      	orrs	r0, r6
 8000b86:	bce0      	pop	{r5, r6, r7}
 8000b88:	46ba      	mov	sl, r7
 8000b8a:	46b1      	mov	r9, r6
 8000b8c:	46a8      	mov	r8, r5
 8000b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b90:	4643      	mov	r3, r8
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d13f      	bne.n	8000c16 <__aeabi_fdiv+0x15a>
 8000b96:	2202      	movs	r2, #2
 8000b98:	3fff      	subs	r7, #255	; 0xff
 8000b9a:	e003      	b.n	8000ba4 <__aeabi_fdiv+0xe8>
 8000b9c:	4643      	mov	r3, r8
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d12d      	bne.n	8000bfe <__aeabi_fdiv+0x142>
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	0031      	movs	r1, r6
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	4061      	eors	r1, r4
 8000baa:	b2c9      	uxtb	r1, r1
 8000bac:	4313      	orrs	r3, r2
 8000bae:	2b0f      	cmp	r3, #15
 8000bb0:	d834      	bhi.n	8000c1c <__aeabi_fdiv+0x160>
 8000bb2:	484d      	ldr	r0, [pc, #308]	; (8000ce8 <__aeabi_fdiv+0x22c>)
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	58c3      	ldr	r3, [r0, r3]
 8000bb8:	469f      	mov	pc, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d113      	bne.n	8000be6 <__aeabi_fdiv+0x12a>
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	4699      	mov	r9, r3
 8000bc2:	3b03      	subs	r3, #3
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	469a      	mov	sl, r3
 8000bc8:	e791      	b.n	8000aee <__aeabi_fdiv+0x32>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d105      	bne.n	8000bda <__aeabi_fdiv+0x11e>
 8000bce:	2308      	movs	r3, #8
 8000bd0:	4699      	mov	r9, r3
 8000bd2:	3b06      	subs	r3, #6
 8000bd4:	27ff      	movs	r7, #255	; 0xff
 8000bd6:	469a      	mov	sl, r3
 8000bd8:	e789      	b.n	8000aee <__aeabi_fdiv+0x32>
 8000bda:	230c      	movs	r3, #12
 8000bdc:	4699      	mov	r9, r3
 8000bde:	3b09      	subs	r3, #9
 8000be0:	27ff      	movs	r7, #255	; 0xff
 8000be2:	469a      	mov	sl, r3
 8000be4:	e783      	b.n	8000aee <__aeabi_fdiv+0x32>
 8000be6:	0028      	movs	r0, r5
 8000be8:	f002 fb1c 	bl	8003224 <__clzsi2>
 8000bec:	2776      	movs	r7, #118	; 0x76
 8000bee:	1f43      	subs	r3, r0, #5
 8000bf0:	409d      	lsls	r5, r3
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	427f      	negs	r7, r7
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	1a3f      	subs	r7, r7, r0
 8000bfc:	e777      	b.n	8000aee <__aeabi_fdiv+0x32>
 8000bfe:	4640      	mov	r0, r8
 8000c00:	f002 fb10 	bl	8003224 <__clzsi2>
 8000c04:	4642      	mov	r2, r8
 8000c06:	1f43      	subs	r3, r0, #5
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	2376      	movs	r3, #118	; 0x76
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	4690      	mov	r8, r2
 8000c10:	1a1b      	subs	r3, r3, r0
 8000c12:	2200      	movs	r2, #0
 8000c14:	e77d      	b.n	8000b12 <__aeabi_fdiv+0x56>
 8000c16:	23ff      	movs	r3, #255	; 0xff
 8000c18:	2203      	movs	r2, #3
 8000c1a:	e77a      	b.n	8000b12 <__aeabi_fdiv+0x56>
 8000c1c:	000e      	movs	r6, r1
 8000c1e:	20ff      	movs	r0, #255	; 0xff
 8000c20:	2500      	movs	r5, #0
 8000c22:	e7ac      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c24:	2001      	movs	r0, #1
 8000c26:	1ac0      	subs	r0, r0, r3
 8000c28:	281b      	cmp	r0, #27
 8000c2a:	dca6      	bgt.n	8000b7a <__aeabi_fdiv+0xbe>
 8000c2c:	379e      	adds	r7, #158	; 0x9e
 8000c2e:	002a      	movs	r2, r5
 8000c30:	40bd      	lsls	r5, r7
 8000c32:	40c2      	lsrs	r2, r0
 8000c34:	1e6b      	subs	r3, r5, #1
 8000c36:	419d      	sbcs	r5, r3
 8000c38:	4315      	orrs	r5, r2
 8000c3a:	076b      	lsls	r3, r5, #29
 8000c3c:	d004      	beq.n	8000c48 <__aeabi_fdiv+0x18c>
 8000c3e:	230f      	movs	r3, #15
 8000c40:	402b      	ands	r3, r5
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	d000      	beq.n	8000c48 <__aeabi_fdiv+0x18c>
 8000c46:	3504      	adds	r5, #4
 8000c48:	016b      	lsls	r3, r5, #5
 8000c4a:	d544      	bpl.n	8000cd6 <__aeabi_fdiv+0x21a>
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	2500      	movs	r5, #0
 8000c50:	e795      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c52:	20ff      	movs	r0, #255	; 0xff
 8000c54:	2500      	movs	r5, #0
 8000c56:	e792      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c58:	2580      	movs	r5, #128	; 0x80
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	20ff      	movs	r0, #255	; 0xff
 8000c5e:	03ed      	lsls	r5, r5, #15
 8000c60:	e78d      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c62:	2300      	movs	r3, #0
 8000c64:	4698      	mov	r8, r3
 8000c66:	2080      	movs	r0, #128	; 0x80
 8000c68:	03c0      	lsls	r0, r0, #15
 8000c6a:	4205      	tst	r5, r0
 8000c6c:	d009      	beq.n	8000c82 <__aeabi_fdiv+0x1c6>
 8000c6e:	4643      	mov	r3, r8
 8000c70:	4203      	tst	r3, r0
 8000c72:	d106      	bne.n	8000c82 <__aeabi_fdiv+0x1c6>
 8000c74:	4645      	mov	r5, r8
 8000c76:	4305      	orrs	r5, r0
 8000c78:	026d      	lsls	r5, r5, #9
 8000c7a:	0026      	movs	r6, r4
 8000c7c:	20ff      	movs	r0, #255	; 0xff
 8000c7e:	0a6d      	lsrs	r5, r5, #9
 8000c80:	e77d      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c82:	2080      	movs	r0, #128	; 0x80
 8000c84:	03c0      	lsls	r0, r0, #15
 8000c86:	4305      	orrs	r5, r0
 8000c88:	026d      	lsls	r5, r5, #9
 8000c8a:	20ff      	movs	r0, #255	; 0xff
 8000c8c:	0a6d      	lsrs	r5, r5, #9
 8000c8e:	e776      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c90:	4642      	mov	r2, r8
 8000c92:	016b      	lsls	r3, r5, #5
 8000c94:	0150      	lsls	r0, r2, #5
 8000c96:	4283      	cmp	r3, r0
 8000c98:	d219      	bcs.n	8000cce <__aeabi_fdiv+0x212>
 8000c9a:	221b      	movs	r2, #27
 8000c9c:	2500      	movs	r5, #0
 8000c9e:	3f01      	subs	r7, #1
 8000ca0:	2601      	movs	r6, #1
 8000ca2:	001c      	movs	r4, r3
 8000ca4:	006d      	lsls	r5, r5, #1
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2c00      	cmp	r4, #0
 8000caa:	db01      	blt.n	8000cb0 <__aeabi_fdiv+0x1f4>
 8000cac:	4298      	cmp	r0, r3
 8000cae:	d801      	bhi.n	8000cb4 <__aeabi_fdiv+0x1f8>
 8000cb0:	1a1b      	subs	r3, r3, r0
 8000cb2:	4335      	orrs	r5, r6
 8000cb4:	3a01      	subs	r2, #1
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d1f3      	bne.n	8000ca2 <__aeabi_fdiv+0x1e6>
 8000cba:	1e5a      	subs	r2, r3, #1
 8000cbc:	4193      	sbcs	r3, r2
 8000cbe:	431d      	orrs	r5, r3
 8000cc0:	003b      	movs	r3, r7
 8000cc2:	337f      	adds	r3, #127	; 0x7f
 8000cc4:	000e      	movs	r6, r1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	dd00      	ble.n	8000ccc <__aeabi_fdiv+0x210>
 8000cca:	e741      	b.n	8000b50 <__aeabi_fdiv+0x94>
 8000ccc:	e7aa      	b.n	8000c24 <__aeabi_fdiv+0x168>
 8000cce:	221a      	movs	r2, #26
 8000cd0:	2501      	movs	r5, #1
 8000cd2:	1a1b      	subs	r3, r3, r0
 8000cd4:	e7e4      	b.n	8000ca0 <__aeabi_fdiv+0x1e4>
 8000cd6:	01ad      	lsls	r5, r5, #6
 8000cd8:	2000      	movs	r0, #0
 8000cda:	0a6d      	lsrs	r5, r5, #9
 8000cdc:	e74f      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	0800e7b0 	.word	0x0800e7b0
 8000ce4:	f7ffffff 	.word	0xf7ffffff
 8000ce8:	0800e7f0 	.word	0x0800e7f0

08000cec <__eqsf2>:
 8000cec:	b570      	push	{r4, r5, r6, lr}
 8000cee:	0042      	lsls	r2, r0, #1
 8000cf0:	0245      	lsls	r5, r0, #9
 8000cf2:	024e      	lsls	r6, r1, #9
 8000cf4:	004c      	lsls	r4, r1, #1
 8000cf6:	0fc3      	lsrs	r3, r0, #31
 8000cf8:	0a6d      	lsrs	r5, r5, #9
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	0e12      	lsrs	r2, r2, #24
 8000cfe:	0a76      	lsrs	r6, r6, #9
 8000d00:	0e24      	lsrs	r4, r4, #24
 8000d02:	0fc9      	lsrs	r1, r1, #31
 8000d04:	2aff      	cmp	r2, #255	; 0xff
 8000d06:	d006      	beq.n	8000d16 <__eqsf2+0x2a>
 8000d08:	2cff      	cmp	r4, #255	; 0xff
 8000d0a:	d003      	beq.n	8000d14 <__eqsf2+0x28>
 8000d0c:	42a2      	cmp	r2, r4
 8000d0e:	d101      	bne.n	8000d14 <__eqsf2+0x28>
 8000d10:	42b5      	cmp	r5, r6
 8000d12:	d006      	beq.n	8000d22 <__eqsf2+0x36>
 8000d14:	bd70      	pop	{r4, r5, r6, pc}
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d1fc      	bne.n	8000d14 <__eqsf2+0x28>
 8000d1a:	2cff      	cmp	r4, #255	; 0xff
 8000d1c:	d1fa      	bne.n	8000d14 <__eqsf2+0x28>
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d1f8      	bne.n	8000d14 <__eqsf2+0x28>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d006      	beq.n	8000d34 <__eqsf2+0x48>
 8000d26:	2001      	movs	r0, #1
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	d1f3      	bne.n	8000d14 <__eqsf2+0x28>
 8000d2c:	0028      	movs	r0, r5
 8000d2e:	1e43      	subs	r3, r0, #1
 8000d30:	4198      	sbcs	r0, r3
 8000d32:	e7ef      	b.n	8000d14 <__eqsf2+0x28>
 8000d34:	2000      	movs	r0, #0
 8000d36:	e7ed      	b.n	8000d14 <__eqsf2+0x28>

08000d38 <__gesf2>:
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	0042      	lsls	r2, r0, #1
 8000d3c:	0245      	lsls	r5, r0, #9
 8000d3e:	024e      	lsls	r6, r1, #9
 8000d40:	004c      	lsls	r4, r1, #1
 8000d42:	0fc3      	lsrs	r3, r0, #31
 8000d44:	0a6d      	lsrs	r5, r5, #9
 8000d46:	0e12      	lsrs	r2, r2, #24
 8000d48:	0a76      	lsrs	r6, r6, #9
 8000d4a:	0e24      	lsrs	r4, r4, #24
 8000d4c:	0fc8      	lsrs	r0, r1, #31
 8000d4e:	2aff      	cmp	r2, #255	; 0xff
 8000d50:	d01b      	beq.n	8000d8a <__gesf2+0x52>
 8000d52:	2cff      	cmp	r4, #255	; 0xff
 8000d54:	d00e      	beq.n	8000d74 <__gesf2+0x3c>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d11b      	bne.n	8000d92 <__gesf2+0x5a>
 8000d5a:	2c00      	cmp	r4, #0
 8000d5c:	d101      	bne.n	8000d62 <__gesf2+0x2a>
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d01c      	beq.n	8000d9c <__gesf2+0x64>
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d00c      	beq.n	8000d80 <__gesf2+0x48>
 8000d66:	4283      	cmp	r3, r0
 8000d68:	d01c      	beq.n	8000da4 <__gesf2+0x6c>
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	1e58      	subs	r0, r3, #1
 8000d6e:	4008      	ands	r0, r1
 8000d70:	3801      	subs	r0, #1
 8000d72:	bd70      	pop	{r4, r5, r6, pc}
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d122      	bne.n	8000dbe <__gesf2+0x86>
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	d1f4      	bne.n	8000d66 <__gesf2+0x2e>
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d1f2      	bne.n	8000d66 <__gesf2+0x2e>
 8000d80:	2800      	cmp	r0, #0
 8000d82:	d1f6      	bne.n	8000d72 <__gesf2+0x3a>
 8000d84:	2001      	movs	r0, #1
 8000d86:	4240      	negs	r0, r0
 8000d88:	e7f3      	b.n	8000d72 <__gesf2+0x3a>
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d117      	bne.n	8000dbe <__gesf2+0x86>
 8000d8e:	2cff      	cmp	r4, #255	; 0xff
 8000d90:	d0f0      	beq.n	8000d74 <__gesf2+0x3c>
 8000d92:	2c00      	cmp	r4, #0
 8000d94:	d1e7      	bne.n	8000d66 <__gesf2+0x2e>
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d1e5      	bne.n	8000d66 <__gesf2+0x2e>
 8000d9a:	e7e6      	b.n	8000d6a <__gesf2+0x32>
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	2d00      	cmp	r5, #0
 8000da0:	d0e7      	beq.n	8000d72 <__gesf2+0x3a>
 8000da2:	e7e2      	b.n	8000d6a <__gesf2+0x32>
 8000da4:	42a2      	cmp	r2, r4
 8000da6:	dc05      	bgt.n	8000db4 <__gesf2+0x7c>
 8000da8:	dbea      	blt.n	8000d80 <__gesf2+0x48>
 8000daa:	42b5      	cmp	r5, r6
 8000dac:	d802      	bhi.n	8000db4 <__gesf2+0x7c>
 8000dae:	d3e7      	bcc.n	8000d80 <__gesf2+0x48>
 8000db0:	2000      	movs	r0, #0
 8000db2:	e7de      	b.n	8000d72 <__gesf2+0x3a>
 8000db4:	4243      	negs	r3, r0
 8000db6:	4158      	adcs	r0, r3
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	3801      	subs	r0, #1
 8000dbc:	e7d9      	b.n	8000d72 <__gesf2+0x3a>
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	4240      	negs	r0, r0
 8000dc2:	e7d6      	b.n	8000d72 <__gesf2+0x3a>

08000dc4 <__lesf2>:
 8000dc4:	b570      	push	{r4, r5, r6, lr}
 8000dc6:	0042      	lsls	r2, r0, #1
 8000dc8:	0245      	lsls	r5, r0, #9
 8000dca:	024e      	lsls	r6, r1, #9
 8000dcc:	004c      	lsls	r4, r1, #1
 8000dce:	0fc3      	lsrs	r3, r0, #31
 8000dd0:	0a6d      	lsrs	r5, r5, #9
 8000dd2:	0e12      	lsrs	r2, r2, #24
 8000dd4:	0a76      	lsrs	r6, r6, #9
 8000dd6:	0e24      	lsrs	r4, r4, #24
 8000dd8:	0fc8      	lsrs	r0, r1, #31
 8000dda:	2aff      	cmp	r2, #255	; 0xff
 8000ddc:	d00b      	beq.n	8000df6 <__lesf2+0x32>
 8000dde:	2cff      	cmp	r4, #255	; 0xff
 8000de0:	d00d      	beq.n	8000dfe <__lesf2+0x3a>
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d11f      	bne.n	8000e26 <__lesf2+0x62>
 8000de6:	2c00      	cmp	r4, #0
 8000de8:	d116      	bne.n	8000e18 <__lesf2+0x54>
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d114      	bne.n	8000e18 <__lesf2+0x54>
 8000dee:	2000      	movs	r0, #0
 8000df0:	2d00      	cmp	r5, #0
 8000df2:	d010      	beq.n	8000e16 <__lesf2+0x52>
 8000df4:	e009      	b.n	8000e0a <__lesf2+0x46>
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d10c      	bne.n	8000e14 <__lesf2+0x50>
 8000dfa:	2cff      	cmp	r4, #255	; 0xff
 8000dfc:	d113      	bne.n	8000e26 <__lesf2+0x62>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d108      	bne.n	8000e14 <__lesf2+0x50>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d008      	beq.n	8000e18 <__lesf2+0x54>
 8000e06:	4283      	cmp	r3, r0
 8000e08:	d012      	beq.n	8000e30 <__lesf2+0x6c>
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	1e58      	subs	r0, r3, #1
 8000e0e:	4008      	ands	r0, r1
 8000e10:	3801      	subs	r0, #1
 8000e12:	e000      	b.n	8000e16 <__lesf2+0x52>
 8000e14:	2002      	movs	r0, #2
 8000e16:	bd70      	pop	{r4, r5, r6, pc}
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d1f4      	bne.n	8000e06 <__lesf2+0x42>
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	d1fa      	bne.n	8000e16 <__lesf2+0x52>
 8000e20:	2001      	movs	r0, #1
 8000e22:	4240      	negs	r0, r0
 8000e24:	e7f7      	b.n	8000e16 <__lesf2+0x52>
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	d1ed      	bne.n	8000e06 <__lesf2+0x42>
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d1eb      	bne.n	8000e06 <__lesf2+0x42>
 8000e2e:	e7ec      	b.n	8000e0a <__lesf2+0x46>
 8000e30:	42a2      	cmp	r2, r4
 8000e32:	dc05      	bgt.n	8000e40 <__lesf2+0x7c>
 8000e34:	dbf2      	blt.n	8000e1c <__lesf2+0x58>
 8000e36:	42b5      	cmp	r5, r6
 8000e38:	d802      	bhi.n	8000e40 <__lesf2+0x7c>
 8000e3a:	d3ef      	bcc.n	8000e1c <__lesf2+0x58>
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	e7ea      	b.n	8000e16 <__lesf2+0x52>
 8000e40:	4243      	negs	r3, r0
 8000e42:	4158      	adcs	r0, r3
 8000e44:	0040      	lsls	r0, r0, #1
 8000e46:	3801      	subs	r0, #1
 8000e48:	e7e5      	b.n	8000e16 <__lesf2+0x52>
 8000e4a:	46c0      	nop			; (mov r8, r8)

08000e4c <__aeabi_fmul>:
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	464f      	mov	r7, r9
 8000e50:	4646      	mov	r6, r8
 8000e52:	46d6      	mov	lr, sl
 8000e54:	0244      	lsls	r4, r0, #9
 8000e56:	0045      	lsls	r5, r0, #1
 8000e58:	b5c0      	push	{r6, r7, lr}
 8000e5a:	0a64      	lsrs	r4, r4, #9
 8000e5c:	1c0f      	adds	r7, r1, #0
 8000e5e:	0e2d      	lsrs	r5, r5, #24
 8000e60:	0fc6      	lsrs	r6, r0, #31
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d100      	bne.n	8000e68 <__aeabi_fmul+0x1c>
 8000e66:	e08d      	b.n	8000f84 <__aeabi_fmul+0x138>
 8000e68:	2dff      	cmp	r5, #255	; 0xff
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_fmul+0x22>
 8000e6c:	e092      	b.n	8000f94 <__aeabi_fmul+0x148>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	2080      	movs	r0, #128	; 0x80
 8000e72:	4699      	mov	r9, r3
 8000e74:	469a      	mov	sl, r3
 8000e76:	00e4      	lsls	r4, r4, #3
 8000e78:	04c0      	lsls	r0, r0, #19
 8000e7a:	4304      	orrs	r4, r0
 8000e7c:	3d7f      	subs	r5, #127	; 0x7f
 8000e7e:	0278      	lsls	r0, r7, #9
 8000e80:	0a43      	lsrs	r3, r0, #9
 8000e82:	4698      	mov	r8, r3
 8000e84:	007b      	lsls	r3, r7, #1
 8000e86:	0e1b      	lsrs	r3, r3, #24
 8000e88:	0fff      	lsrs	r7, r7, #31
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fmul+0x44>
 8000e8e:	e070      	b.n	8000f72 <__aeabi_fmul+0x126>
 8000e90:	2bff      	cmp	r3, #255	; 0xff
 8000e92:	d100      	bne.n	8000e96 <__aeabi_fmul+0x4a>
 8000e94:	e086      	b.n	8000fa4 <__aeabi_fmul+0x158>
 8000e96:	4642      	mov	r2, r8
 8000e98:	00d0      	lsls	r0, r2, #3
 8000e9a:	2280      	movs	r2, #128	; 0x80
 8000e9c:	3b7f      	subs	r3, #127	; 0x7f
 8000e9e:	18ed      	adds	r5, r5, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	04d2      	lsls	r2, r2, #19
 8000ea4:	4302      	orrs	r2, r0
 8000ea6:	4690      	mov	r8, r2
 8000ea8:	469c      	mov	ip, r3
 8000eaa:	0031      	movs	r1, r6
 8000eac:	464b      	mov	r3, r9
 8000eae:	4079      	eors	r1, r7
 8000eb0:	1c68      	adds	r0, r5, #1
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	d81c      	bhi.n	8000ef0 <__aeabi_fmul+0xa4>
 8000eb6:	4a76      	ldr	r2, [pc, #472]	; (8001090 <__aeabi_fmul+0x244>)
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	58d3      	ldr	r3, [r2, r3]
 8000ebc:	469f      	mov	pc, r3
 8000ebe:	0039      	movs	r1, r7
 8000ec0:	4644      	mov	r4, r8
 8000ec2:	46e2      	mov	sl, ip
 8000ec4:	4653      	mov	r3, sl
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d00f      	beq.n	8000eea <__aeabi_fmul+0x9e>
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fmul+0x84>
 8000ece:	e0d7      	b.n	8001080 <__aeabi_fmul+0x234>
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d137      	bne.n	8000f44 <__aeabi_fmul+0xf8>
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	05c0      	lsls	r0, r0, #23
 8000eda:	4320      	orrs	r0, r4
 8000edc:	07c9      	lsls	r1, r1, #31
 8000ede:	4308      	orrs	r0, r1
 8000ee0:	bce0      	pop	{r5, r6, r7}
 8000ee2:	46ba      	mov	sl, r7
 8000ee4:	46b1      	mov	r9, r6
 8000ee6:	46a8      	mov	r8, r5
 8000ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eea:	20ff      	movs	r0, #255	; 0xff
 8000eec:	2400      	movs	r4, #0
 8000eee:	e7f3      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8000ef0:	0c26      	lsrs	r6, r4, #16
 8000ef2:	0424      	lsls	r4, r4, #16
 8000ef4:	0c22      	lsrs	r2, r4, #16
 8000ef6:	4644      	mov	r4, r8
 8000ef8:	0424      	lsls	r4, r4, #16
 8000efa:	0c24      	lsrs	r4, r4, #16
 8000efc:	4643      	mov	r3, r8
 8000efe:	0027      	movs	r7, r4
 8000f00:	0c1b      	lsrs	r3, r3, #16
 8000f02:	4357      	muls	r7, r2
 8000f04:	4374      	muls	r4, r6
 8000f06:	435a      	muls	r2, r3
 8000f08:	435e      	muls	r6, r3
 8000f0a:	1912      	adds	r2, r2, r4
 8000f0c:	0c3b      	lsrs	r3, r7, #16
 8000f0e:	189b      	adds	r3, r3, r2
 8000f10:	429c      	cmp	r4, r3
 8000f12:	d903      	bls.n	8000f1c <__aeabi_fmul+0xd0>
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	0252      	lsls	r2, r2, #9
 8000f18:	4694      	mov	ip, r2
 8000f1a:	4466      	add	r6, ip
 8000f1c:	043f      	lsls	r7, r7, #16
 8000f1e:	041a      	lsls	r2, r3, #16
 8000f20:	0c3f      	lsrs	r7, r7, #16
 8000f22:	19d2      	adds	r2, r2, r7
 8000f24:	0194      	lsls	r4, r2, #6
 8000f26:	1e67      	subs	r7, r4, #1
 8000f28:	41bc      	sbcs	r4, r7
 8000f2a:	0c1b      	lsrs	r3, r3, #16
 8000f2c:	0e92      	lsrs	r2, r2, #26
 8000f2e:	199b      	adds	r3, r3, r6
 8000f30:	4314      	orrs	r4, r2
 8000f32:	019b      	lsls	r3, r3, #6
 8000f34:	431c      	orrs	r4, r3
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	d400      	bmi.n	8000f3c <__aeabi_fmul+0xf0>
 8000f3a:	e09b      	b.n	8001074 <__aeabi_fmul+0x228>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	0862      	lsrs	r2, r4, #1
 8000f40:	401c      	ands	r4, r3
 8000f42:	4314      	orrs	r4, r2
 8000f44:	0002      	movs	r2, r0
 8000f46:	327f      	adds	r2, #127	; 0x7f
 8000f48:	2a00      	cmp	r2, #0
 8000f4a:	dd64      	ble.n	8001016 <__aeabi_fmul+0x1ca>
 8000f4c:	0763      	lsls	r3, r4, #29
 8000f4e:	d004      	beq.n	8000f5a <__aeabi_fmul+0x10e>
 8000f50:	230f      	movs	r3, #15
 8000f52:	4023      	ands	r3, r4
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d000      	beq.n	8000f5a <__aeabi_fmul+0x10e>
 8000f58:	3404      	adds	r4, #4
 8000f5a:	0123      	lsls	r3, r4, #4
 8000f5c:	d503      	bpl.n	8000f66 <__aeabi_fmul+0x11a>
 8000f5e:	0002      	movs	r2, r0
 8000f60:	4b4c      	ldr	r3, [pc, #304]	; (8001094 <__aeabi_fmul+0x248>)
 8000f62:	3280      	adds	r2, #128	; 0x80
 8000f64:	401c      	ands	r4, r3
 8000f66:	2afe      	cmp	r2, #254	; 0xfe
 8000f68:	dcbf      	bgt.n	8000eea <__aeabi_fmul+0x9e>
 8000f6a:	01a4      	lsls	r4, r4, #6
 8000f6c:	0a64      	lsrs	r4, r4, #9
 8000f6e:	b2d0      	uxtb	r0, r2
 8000f70:	e7b2      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8000f72:	4643      	mov	r3, r8
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d13d      	bne.n	8000ff4 <__aeabi_fmul+0x1a8>
 8000f78:	464a      	mov	r2, r9
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	4691      	mov	r9, r2
 8000f80:	469c      	mov	ip, r3
 8000f82:	e792      	b.n	8000eaa <__aeabi_fmul+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d129      	bne.n	8000fdc <__aeabi_fmul+0x190>
 8000f88:	2304      	movs	r3, #4
 8000f8a:	4699      	mov	r9, r3
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	2500      	movs	r5, #0
 8000f90:	469a      	mov	sl, r3
 8000f92:	e774      	b.n	8000e7e <__aeabi_fmul+0x32>
 8000f94:	2c00      	cmp	r4, #0
 8000f96:	d11b      	bne.n	8000fd0 <__aeabi_fmul+0x184>
 8000f98:	2308      	movs	r3, #8
 8000f9a:	4699      	mov	r9, r3
 8000f9c:	3b06      	subs	r3, #6
 8000f9e:	25ff      	movs	r5, #255	; 0xff
 8000fa0:	469a      	mov	sl, r3
 8000fa2:	e76c      	b.n	8000e7e <__aeabi_fmul+0x32>
 8000fa4:	4643      	mov	r3, r8
 8000fa6:	35ff      	adds	r5, #255	; 0xff
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10b      	bne.n	8000fc4 <__aeabi_fmul+0x178>
 8000fac:	2302      	movs	r3, #2
 8000fae:	464a      	mov	r2, r9
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	4691      	mov	r9, r2
 8000fb4:	469c      	mov	ip, r3
 8000fb6:	e778      	b.n	8000eaa <__aeabi_fmul+0x5e>
 8000fb8:	4653      	mov	r3, sl
 8000fba:	0031      	movs	r1, r6
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d000      	beq.n	8000fc2 <__aeabi_fmul+0x176>
 8000fc0:	e783      	b.n	8000eca <__aeabi_fmul+0x7e>
 8000fc2:	e792      	b.n	8000eea <__aeabi_fmul+0x9e>
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	464a      	mov	r2, r9
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	4691      	mov	r9, r2
 8000fcc:	469c      	mov	ip, r3
 8000fce:	e76c      	b.n	8000eaa <__aeabi_fmul+0x5e>
 8000fd0:	230c      	movs	r3, #12
 8000fd2:	4699      	mov	r9, r3
 8000fd4:	3b09      	subs	r3, #9
 8000fd6:	25ff      	movs	r5, #255	; 0xff
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e750      	b.n	8000e7e <__aeabi_fmul+0x32>
 8000fdc:	0020      	movs	r0, r4
 8000fde:	f002 f921 	bl	8003224 <__clzsi2>
 8000fe2:	2576      	movs	r5, #118	; 0x76
 8000fe4:	1f43      	subs	r3, r0, #5
 8000fe6:	409c      	lsls	r4, r3
 8000fe8:	2300      	movs	r3, #0
 8000fea:	426d      	negs	r5, r5
 8000fec:	4699      	mov	r9, r3
 8000fee:	469a      	mov	sl, r3
 8000ff0:	1a2d      	subs	r5, r5, r0
 8000ff2:	e744      	b.n	8000e7e <__aeabi_fmul+0x32>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	f002 f915 	bl	8003224 <__clzsi2>
 8000ffa:	4642      	mov	r2, r8
 8000ffc:	1f43      	subs	r3, r0, #5
 8000ffe:	409a      	lsls	r2, r3
 8001000:	2300      	movs	r3, #0
 8001002:	1a2d      	subs	r5, r5, r0
 8001004:	4690      	mov	r8, r2
 8001006:	469c      	mov	ip, r3
 8001008:	3d76      	subs	r5, #118	; 0x76
 800100a:	e74e      	b.n	8000eaa <__aeabi_fmul+0x5e>
 800100c:	2480      	movs	r4, #128	; 0x80
 800100e:	2100      	movs	r1, #0
 8001010:	20ff      	movs	r0, #255	; 0xff
 8001012:	03e4      	lsls	r4, r4, #15
 8001014:	e760      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001016:	2301      	movs	r3, #1
 8001018:	1a9b      	subs	r3, r3, r2
 800101a:	2b1b      	cmp	r3, #27
 800101c:	dd00      	ble.n	8001020 <__aeabi_fmul+0x1d4>
 800101e:	e759      	b.n	8000ed4 <__aeabi_fmul+0x88>
 8001020:	0022      	movs	r2, r4
 8001022:	309e      	adds	r0, #158	; 0x9e
 8001024:	40da      	lsrs	r2, r3
 8001026:	4084      	lsls	r4, r0
 8001028:	0013      	movs	r3, r2
 800102a:	1e62      	subs	r2, r4, #1
 800102c:	4194      	sbcs	r4, r2
 800102e:	431c      	orrs	r4, r3
 8001030:	0763      	lsls	r3, r4, #29
 8001032:	d004      	beq.n	800103e <__aeabi_fmul+0x1f2>
 8001034:	230f      	movs	r3, #15
 8001036:	4023      	ands	r3, r4
 8001038:	2b04      	cmp	r3, #4
 800103a:	d000      	beq.n	800103e <__aeabi_fmul+0x1f2>
 800103c:	3404      	adds	r4, #4
 800103e:	0163      	lsls	r3, r4, #5
 8001040:	d51a      	bpl.n	8001078 <__aeabi_fmul+0x22c>
 8001042:	2001      	movs	r0, #1
 8001044:	2400      	movs	r4, #0
 8001046:	e747      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001048:	2080      	movs	r0, #128	; 0x80
 800104a:	03c0      	lsls	r0, r0, #15
 800104c:	4204      	tst	r4, r0
 800104e:	d009      	beq.n	8001064 <__aeabi_fmul+0x218>
 8001050:	4643      	mov	r3, r8
 8001052:	4203      	tst	r3, r0
 8001054:	d106      	bne.n	8001064 <__aeabi_fmul+0x218>
 8001056:	4644      	mov	r4, r8
 8001058:	4304      	orrs	r4, r0
 800105a:	0264      	lsls	r4, r4, #9
 800105c:	0039      	movs	r1, r7
 800105e:	20ff      	movs	r0, #255	; 0xff
 8001060:	0a64      	lsrs	r4, r4, #9
 8001062:	e739      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001064:	2080      	movs	r0, #128	; 0x80
 8001066:	03c0      	lsls	r0, r0, #15
 8001068:	4304      	orrs	r4, r0
 800106a:	0264      	lsls	r4, r4, #9
 800106c:	0031      	movs	r1, r6
 800106e:	20ff      	movs	r0, #255	; 0xff
 8001070:	0a64      	lsrs	r4, r4, #9
 8001072:	e731      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001074:	0028      	movs	r0, r5
 8001076:	e765      	b.n	8000f44 <__aeabi_fmul+0xf8>
 8001078:	01a4      	lsls	r4, r4, #6
 800107a:	2000      	movs	r0, #0
 800107c:	0a64      	lsrs	r4, r4, #9
 800107e:	e72b      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001080:	2080      	movs	r0, #128	; 0x80
 8001082:	03c0      	lsls	r0, r0, #15
 8001084:	4304      	orrs	r4, r0
 8001086:	0264      	lsls	r4, r4, #9
 8001088:	20ff      	movs	r0, #255	; 0xff
 800108a:	0a64      	lsrs	r4, r4, #9
 800108c:	e724      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	0800e830 	.word	0x0800e830
 8001094:	f7ffffff 	.word	0xf7ffffff

08001098 <__aeabi_fsub>:
 8001098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109a:	46ce      	mov	lr, r9
 800109c:	4647      	mov	r7, r8
 800109e:	0243      	lsls	r3, r0, #9
 80010a0:	0a5b      	lsrs	r3, r3, #9
 80010a2:	024e      	lsls	r6, r1, #9
 80010a4:	00da      	lsls	r2, r3, #3
 80010a6:	4694      	mov	ip, r2
 80010a8:	0a72      	lsrs	r2, r6, #9
 80010aa:	4691      	mov	r9, r2
 80010ac:	0045      	lsls	r5, r0, #1
 80010ae:	004a      	lsls	r2, r1, #1
 80010b0:	b580      	push	{r7, lr}
 80010b2:	0e2d      	lsrs	r5, r5, #24
 80010b4:	001f      	movs	r7, r3
 80010b6:	0fc4      	lsrs	r4, r0, #31
 80010b8:	0e12      	lsrs	r2, r2, #24
 80010ba:	0fc9      	lsrs	r1, r1, #31
 80010bc:	09b6      	lsrs	r6, r6, #6
 80010be:	2aff      	cmp	r2, #255	; 0xff
 80010c0:	d05b      	beq.n	800117a <__aeabi_fsub+0xe2>
 80010c2:	2001      	movs	r0, #1
 80010c4:	4041      	eors	r1, r0
 80010c6:	428c      	cmp	r4, r1
 80010c8:	d039      	beq.n	800113e <__aeabi_fsub+0xa6>
 80010ca:	1aa8      	subs	r0, r5, r2
 80010cc:	2800      	cmp	r0, #0
 80010ce:	dd5a      	ble.n	8001186 <__aeabi_fsub+0xee>
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	d06a      	beq.n	80011aa <__aeabi_fsub+0x112>
 80010d4:	2dff      	cmp	r5, #255	; 0xff
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x42>
 80010d8:	e0d9      	b.n	800128e <__aeabi_fsub+0x1f6>
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	04d2      	lsls	r2, r2, #19
 80010de:	4316      	orrs	r6, r2
 80010e0:	281b      	cmp	r0, #27
 80010e2:	dc00      	bgt.n	80010e6 <__aeabi_fsub+0x4e>
 80010e4:	e0e9      	b.n	80012ba <__aeabi_fsub+0x222>
 80010e6:	2001      	movs	r0, #1
 80010e8:	4663      	mov	r3, ip
 80010ea:	1a18      	subs	r0, r3, r0
 80010ec:	0143      	lsls	r3, r0, #5
 80010ee:	d400      	bmi.n	80010f2 <__aeabi_fsub+0x5a>
 80010f0:	e0b4      	b.n	800125c <__aeabi_fsub+0x1c4>
 80010f2:	0180      	lsls	r0, r0, #6
 80010f4:	0987      	lsrs	r7, r0, #6
 80010f6:	0038      	movs	r0, r7
 80010f8:	f002 f894 	bl	8003224 <__clzsi2>
 80010fc:	3805      	subs	r0, #5
 80010fe:	4087      	lsls	r7, r0
 8001100:	4285      	cmp	r5, r0
 8001102:	dc00      	bgt.n	8001106 <__aeabi_fsub+0x6e>
 8001104:	e0cc      	b.n	80012a0 <__aeabi_fsub+0x208>
 8001106:	1a2d      	subs	r5, r5, r0
 8001108:	48b5      	ldr	r0, [pc, #724]	; (80013e0 <__aeabi_fsub+0x348>)
 800110a:	4038      	ands	r0, r7
 800110c:	0743      	lsls	r3, r0, #29
 800110e:	d004      	beq.n	800111a <__aeabi_fsub+0x82>
 8001110:	230f      	movs	r3, #15
 8001112:	4003      	ands	r3, r0
 8001114:	2b04      	cmp	r3, #4
 8001116:	d000      	beq.n	800111a <__aeabi_fsub+0x82>
 8001118:	3004      	adds	r0, #4
 800111a:	0143      	lsls	r3, r0, #5
 800111c:	d400      	bmi.n	8001120 <__aeabi_fsub+0x88>
 800111e:	e0a0      	b.n	8001262 <__aeabi_fsub+0x1ca>
 8001120:	1c6a      	adds	r2, r5, #1
 8001122:	2dfe      	cmp	r5, #254	; 0xfe
 8001124:	d100      	bne.n	8001128 <__aeabi_fsub+0x90>
 8001126:	e08d      	b.n	8001244 <__aeabi_fsub+0x1ac>
 8001128:	0180      	lsls	r0, r0, #6
 800112a:	0a47      	lsrs	r7, r0, #9
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	05d0      	lsls	r0, r2, #23
 8001130:	4338      	orrs	r0, r7
 8001132:	07e4      	lsls	r4, r4, #31
 8001134:	4320      	orrs	r0, r4
 8001136:	bcc0      	pop	{r6, r7}
 8001138:	46b9      	mov	r9, r7
 800113a:	46b0      	mov	r8, r6
 800113c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800113e:	1aa8      	subs	r0, r5, r2
 8001140:	4680      	mov	r8, r0
 8001142:	2800      	cmp	r0, #0
 8001144:	dd45      	ble.n	80011d2 <__aeabi_fsub+0x13a>
 8001146:	2a00      	cmp	r2, #0
 8001148:	d070      	beq.n	800122c <__aeabi_fsub+0x194>
 800114a:	2dff      	cmp	r5, #255	; 0xff
 800114c:	d100      	bne.n	8001150 <__aeabi_fsub+0xb8>
 800114e:	e09e      	b.n	800128e <__aeabi_fsub+0x1f6>
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	04db      	lsls	r3, r3, #19
 8001154:	431e      	orrs	r6, r3
 8001156:	4643      	mov	r3, r8
 8001158:	2b1b      	cmp	r3, #27
 800115a:	dc00      	bgt.n	800115e <__aeabi_fsub+0xc6>
 800115c:	e0d2      	b.n	8001304 <__aeabi_fsub+0x26c>
 800115e:	2001      	movs	r0, #1
 8001160:	4460      	add	r0, ip
 8001162:	0143      	lsls	r3, r0, #5
 8001164:	d57a      	bpl.n	800125c <__aeabi_fsub+0x1c4>
 8001166:	3501      	adds	r5, #1
 8001168:	2dff      	cmp	r5, #255	; 0xff
 800116a:	d06b      	beq.n	8001244 <__aeabi_fsub+0x1ac>
 800116c:	2301      	movs	r3, #1
 800116e:	4a9d      	ldr	r2, [pc, #628]	; (80013e4 <__aeabi_fsub+0x34c>)
 8001170:	4003      	ands	r3, r0
 8001172:	0840      	lsrs	r0, r0, #1
 8001174:	4010      	ands	r0, r2
 8001176:	4318      	orrs	r0, r3
 8001178:	e7c8      	b.n	800110c <__aeabi_fsub+0x74>
 800117a:	2e00      	cmp	r6, #0
 800117c:	d020      	beq.n	80011c0 <__aeabi_fsub+0x128>
 800117e:	428c      	cmp	r4, r1
 8001180:	d023      	beq.n	80011ca <__aeabi_fsub+0x132>
 8001182:	0028      	movs	r0, r5
 8001184:	38ff      	subs	r0, #255	; 0xff
 8001186:	2800      	cmp	r0, #0
 8001188:	d039      	beq.n	80011fe <__aeabi_fsub+0x166>
 800118a:	1b57      	subs	r7, r2, r5
 800118c:	2d00      	cmp	r5, #0
 800118e:	d000      	beq.n	8001192 <__aeabi_fsub+0xfa>
 8001190:	e09d      	b.n	80012ce <__aeabi_fsub+0x236>
 8001192:	4663      	mov	r3, ip
 8001194:	2b00      	cmp	r3, #0
 8001196:	d100      	bne.n	800119a <__aeabi_fsub+0x102>
 8001198:	e0db      	b.n	8001352 <__aeabi_fsub+0x2ba>
 800119a:	1e7b      	subs	r3, r7, #1
 800119c:	2f01      	cmp	r7, #1
 800119e:	d100      	bne.n	80011a2 <__aeabi_fsub+0x10a>
 80011a0:	e10d      	b.n	80013be <__aeabi_fsub+0x326>
 80011a2:	2fff      	cmp	r7, #255	; 0xff
 80011a4:	d071      	beq.n	800128a <__aeabi_fsub+0x1f2>
 80011a6:	001f      	movs	r7, r3
 80011a8:	e098      	b.n	80012dc <__aeabi_fsub+0x244>
 80011aa:	2e00      	cmp	r6, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x118>
 80011ae:	e0a7      	b.n	8001300 <__aeabi_fsub+0x268>
 80011b0:	1e42      	subs	r2, r0, #1
 80011b2:	2801      	cmp	r0, #1
 80011b4:	d100      	bne.n	80011b8 <__aeabi_fsub+0x120>
 80011b6:	e0e6      	b.n	8001386 <__aeabi_fsub+0x2ee>
 80011b8:	28ff      	cmp	r0, #255	; 0xff
 80011ba:	d068      	beq.n	800128e <__aeabi_fsub+0x1f6>
 80011bc:	0010      	movs	r0, r2
 80011be:	e78f      	b.n	80010e0 <__aeabi_fsub+0x48>
 80011c0:	2001      	movs	r0, #1
 80011c2:	4041      	eors	r1, r0
 80011c4:	42a1      	cmp	r1, r4
 80011c6:	d000      	beq.n	80011ca <__aeabi_fsub+0x132>
 80011c8:	e77f      	b.n	80010ca <__aeabi_fsub+0x32>
 80011ca:	20ff      	movs	r0, #255	; 0xff
 80011cc:	4240      	negs	r0, r0
 80011ce:	4680      	mov	r8, r0
 80011d0:	44a8      	add	r8, r5
 80011d2:	4640      	mov	r0, r8
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d038      	beq.n	800124a <__aeabi_fsub+0x1b2>
 80011d8:	1b51      	subs	r1, r2, r5
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d100      	bne.n	80011e0 <__aeabi_fsub+0x148>
 80011de:	e0ae      	b.n	800133e <__aeabi_fsub+0x2a6>
 80011e0:	2aff      	cmp	r2, #255	; 0xff
 80011e2:	d100      	bne.n	80011e6 <__aeabi_fsub+0x14e>
 80011e4:	e0df      	b.n	80013a6 <__aeabi_fsub+0x30e>
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	4660      	mov	r0, ip
 80011ea:	04db      	lsls	r3, r3, #19
 80011ec:	4318      	orrs	r0, r3
 80011ee:	4684      	mov	ip, r0
 80011f0:	291b      	cmp	r1, #27
 80011f2:	dc00      	bgt.n	80011f6 <__aeabi_fsub+0x15e>
 80011f4:	e0d9      	b.n	80013aa <__aeabi_fsub+0x312>
 80011f6:	2001      	movs	r0, #1
 80011f8:	0015      	movs	r5, r2
 80011fa:	1980      	adds	r0, r0, r6
 80011fc:	e7b1      	b.n	8001162 <__aeabi_fsub+0xca>
 80011fe:	20fe      	movs	r0, #254	; 0xfe
 8001200:	1c6a      	adds	r2, r5, #1
 8001202:	4210      	tst	r0, r2
 8001204:	d171      	bne.n	80012ea <__aeabi_fsub+0x252>
 8001206:	2d00      	cmp	r5, #0
 8001208:	d000      	beq.n	800120c <__aeabi_fsub+0x174>
 800120a:	e0a6      	b.n	800135a <__aeabi_fsub+0x2c2>
 800120c:	4663      	mov	r3, ip
 800120e:	2b00      	cmp	r3, #0
 8001210:	d100      	bne.n	8001214 <__aeabi_fsub+0x17c>
 8001212:	e0d9      	b.n	80013c8 <__aeabi_fsub+0x330>
 8001214:	2200      	movs	r2, #0
 8001216:	2e00      	cmp	r6, #0
 8001218:	d100      	bne.n	800121c <__aeabi_fsub+0x184>
 800121a:	e788      	b.n	800112e <__aeabi_fsub+0x96>
 800121c:	1b98      	subs	r0, r3, r6
 800121e:	0143      	lsls	r3, r0, #5
 8001220:	d400      	bmi.n	8001224 <__aeabi_fsub+0x18c>
 8001222:	e0e1      	b.n	80013e8 <__aeabi_fsub+0x350>
 8001224:	4663      	mov	r3, ip
 8001226:	000c      	movs	r4, r1
 8001228:	1af0      	subs	r0, r6, r3
 800122a:	e76f      	b.n	800110c <__aeabi_fsub+0x74>
 800122c:	2e00      	cmp	r6, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_fsub+0x19a>
 8001230:	e0b7      	b.n	80013a2 <__aeabi_fsub+0x30a>
 8001232:	0002      	movs	r2, r0
 8001234:	3a01      	subs	r2, #1
 8001236:	2801      	cmp	r0, #1
 8001238:	d100      	bne.n	800123c <__aeabi_fsub+0x1a4>
 800123a:	e09c      	b.n	8001376 <__aeabi_fsub+0x2de>
 800123c:	28ff      	cmp	r0, #255	; 0xff
 800123e:	d026      	beq.n	800128e <__aeabi_fsub+0x1f6>
 8001240:	4690      	mov	r8, r2
 8001242:	e788      	b.n	8001156 <__aeabi_fsub+0xbe>
 8001244:	22ff      	movs	r2, #255	; 0xff
 8001246:	2700      	movs	r7, #0
 8001248:	e771      	b.n	800112e <__aeabi_fsub+0x96>
 800124a:	20fe      	movs	r0, #254	; 0xfe
 800124c:	1c6a      	adds	r2, r5, #1
 800124e:	4210      	tst	r0, r2
 8001250:	d064      	beq.n	800131c <__aeabi_fsub+0x284>
 8001252:	2aff      	cmp	r2, #255	; 0xff
 8001254:	d0f6      	beq.n	8001244 <__aeabi_fsub+0x1ac>
 8001256:	0015      	movs	r5, r2
 8001258:	4466      	add	r6, ip
 800125a:	0870      	lsrs	r0, r6, #1
 800125c:	0743      	lsls	r3, r0, #29
 800125e:	d000      	beq.n	8001262 <__aeabi_fsub+0x1ca>
 8001260:	e756      	b.n	8001110 <__aeabi_fsub+0x78>
 8001262:	08c3      	lsrs	r3, r0, #3
 8001264:	2dff      	cmp	r5, #255	; 0xff
 8001266:	d012      	beq.n	800128e <__aeabi_fsub+0x1f6>
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5f      	lsrs	r7, r3, #9
 800126c:	b2ea      	uxtb	r2, r5
 800126e:	e75e      	b.n	800112e <__aeabi_fsub+0x96>
 8001270:	4662      	mov	r2, ip
 8001272:	2a00      	cmp	r2, #0
 8001274:	d100      	bne.n	8001278 <__aeabi_fsub+0x1e0>
 8001276:	e096      	b.n	80013a6 <__aeabi_fsub+0x30e>
 8001278:	2e00      	cmp	r6, #0
 800127a:	d008      	beq.n	800128e <__aeabi_fsub+0x1f6>
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	03d2      	lsls	r2, r2, #15
 8001280:	4213      	tst	r3, r2
 8001282:	d004      	beq.n	800128e <__aeabi_fsub+0x1f6>
 8001284:	4648      	mov	r0, r9
 8001286:	4210      	tst	r0, r2
 8001288:	d101      	bne.n	800128e <__aeabi_fsub+0x1f6>
 800128a:	000c      	movs	r4, r1
 800128c:	464b      	mov	r3, r9
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0d8      	beq.n	8001244 <__aeabi_fsub+0x1ac>
 8001292:	2780      	movs	r7, #128	; 0x80
 8001294:	03ff      	lsls	r7, r7, #15
 8001296:	431f      	orrs	r7, r3
 8001298:	027f      	lsls	r7, r7, #9
 800129a:	22ff      	movs	r2, #255	; 0xff
 800129c:	0a7f      	lsrs	r7, r7, #9
 800129e:	e746      	b.n	800112e <__aeabi_fsub+0x96>
 80012a0:	2320      	movs	r3, #32
 80012a2:	003a      	movs	r2, r7
 80012a4:	1b45      	subs	r5, r0, r5
 80012a6:	0038      	movs	r0, r7
 80012a8:	3501      	adds	r5, #1
 80012aa:	40ea      	lsrs	r2, r5
 80012ac:	1b5d      	subs	r5, r3, r5
 80012ae:	40a8      	lsls	r0, r5
 80012b0:	1e43      	subs	r3, r0, #1
 80012b2:	4198      	sbcs	r0, r3
 80012b4:	2500      	movs	r5, #0
 80012b6:	4310      	orrs	r0, r2
 80012b8:	e728      	b.n	800110c <__aeabi_fsub+0x74>
 80012ba:	2320      	movs	r3, #32
 80012bc:	1a1b      	subs	r3, r3, r0
 80012be:	0032      	movs	r2, r6
 80012c0:	409e      	lsls	r6, r3
 80012c2:	40c2      	lsrs	r2, r0
 80012c4:	0030      	movs	r0, r6
 80012c6:	1e43      	subs	r3, r0, #1
 80012c8:	4198      	sbcs	r0, r3
 80012ca:	4310      	orrs	r0, r2
 80012cc:	e70c      	b.n	80010e8 <__aeabi_fsub+0x50>
 80012ce:	2aff      	cmp	r2, #255	; 0xff
 80012d0:	d0db      	beq.n	800128a <__aeabi_fsub+0x1f2>
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	4660      	mov	r0, ip
 80012d6:	04db      	lsls	r3, r3, #19
 80012d8:	4318      	orrs	r0, r3
 80012da:	4684      	mov	ip, r0
 80012dc:	2f1b      	cmp	r7, #27
 80012de:	dd56      	ble.n	800138e <__aeabi_fsub+0x2f6>
 80012e0:	2001      	movs	r0, #1
 80012e2:	000c      	movs	r4, r1
 80012e4:	0015      	movs	r5, r2
 80012e6:	1a30      	subs	r0, r6, r0
 80012e8:	e700      	b.n	80010ec <__aeabi_fsub+0x54>
 80012ea:	4663      	mov	r3, ip
 80012ec:	1b9f      	subs	r7, r3, r6
 80012ee:	017b      	lsls	r3, r7, #5
 80012f0:	d43d      	bmi.n	800136e <__aeabi_fsub+0x2d6>
 80012f2:	2f00      	cmp	r7, #0
 80012f4:	d000      	beq.n	80012f8 <__aeabi_fsub+0x260>
 80012f6:	e6fe      	b.n	80010f6 <__aeabi_fsub+0x5e>
 80012f8:	2400      	movs	r4, #0
 80012fa:	2200      	movs	r2, #0
 80012fc:	2700      	movs	r7, #0
 80012fe:	e716      	b.n	800112e <__aeabi_fsub+0x96>
 8001300:	0005      	movs	r5, r0
 8001302:	e7af      	b.n	8001264 <__aeabi_fsub+0x1cc>
 8001304:	0032      	movs	r2, r6
 8001306:	4643      	mov	r3, r8
 8001308:	4641      	mov	r1, r8
 800130a:	40da      	lsrs	r2, r3
 800130c:	2320      	movs	r3, #32
 800130e:	1a5b      	subs	r3, r3, r1
 8001310:	409e      	lsls	r6, r3
 8001312:	0030      	movs	r0, r6
 8001314:	1e43      	subs	r3, r0, #1
 8001316:	4198      	sbcs	r0, r3
 8001318:	4310      	orrs	r0, r2
 800131a:	e721      	b.n	8001160 <__aeabi_fsub+0xc8>
 800131c:	2d00      	cmp	r5, #0
 800131e:	d1a7      	bne.n	8001270 <__aeabi_fsub+0x1d8>
 8001320:	4663      	mov	r3, ip
 8001322:	2b00      	cmp	r3, #0
 8001324:	d059      	beq.n	80013da <__aeabi_fsub+0x342>
 8001326:	2200      	movs	r2, #0
 8001328:	2e00      	cmp	r6, #0
 800132a:	d100      	bne.n	800132e <__aeabi_fsub+0x296>
 800132c:	e6ff      	b.n	800112e <__aeabi_fsub+0x96>
 800132e:	0030      	movs	r0, r6
 8001330:	4460      	add	r0, ip
 8001332:	0143      	lsls	r3, r0, #5
 8001334:	d592      	bpl.n	800125c <__aeabi_fsub+0x1c4>
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <__aeabi_fsub+0x348>)
 8001338:	3501      	adds	r5, #1
 800133a:	4018      	ands	r0, r3
 800133c:	e78e      	b.n	800125c <__aeabi_fsub+0x1c4>
 800133e:	4663      	mov	r3, ip
 8001340:	2b00      	cmp	r3, #0
 8001342:	d047      	beq.n	80013d4 <__aeabi_fsub+0x33c>
 8001344:	1e4b      	subs	r3, r1, #1
 8001346:	2901      	cmp	r1, #1
 8001348:	d015      	beq.n	8001376 <__aeabi_fsub+0x2de>
 800134a:	29ff      	cmp	r1, #255	; 0xff
 800134c:	d02b      	beq.n	80013a6 <__aeabi_fsub+0x30e>
 800134e:	0019      	movs	r1, r3
 8001350:	e74e      	b.n	80011f0 <__aeabi_fsub+0x158>
 8001352:	000c      	movs	r4, r1
 8001354:	464b      	mov	r3, r9
 8001356:	003d      	movs	r5, r7
 8001358:	e784      	b.n	8001264 <__aeabi_fsub+0x1cc>
 800135a:	4662      	mov	r2, ip
 800135c:	2a00      	cmp	r2, #0
 800135e:	d18b      	bne.n	8001278 <__aeabi_fsub+0x1e0>
 8001360:	2e00      	cmp	r6, #0
 8001362:	d192      	bne.n	800128a <__aeabi_fsub+0x1f2>
 8001364:	2780      	movs	r7, #128	; 0x80
 8001366:	2400      	movs	r4, #0
 8001368:	22ff      	movs	r2, #255	; 0xff
 800136a:	03ff      	lsls	r7, r7, #15
 800136c:	e6df      	b.n	800112e <__aeabi_fsub+0x96>
 800136e:	4663      	mov	r3, ip
 8001370:	000c      	movs	r4, r1
 8001372:	1af7      	subs	r7, r6, r3
 8001374:	e6bf      	b.n	80010f6 <__aeabi_fsub+0x5e>
 8001376:	0030      	movs	r0, r6
 8001378:	4460      	add	r0, ip
 800137a:	2501      	movs	r5, #1
 800137c:	0143      	lsls	r3, r0, #5
 800137e:	d400      	bmi.n	8001382 <__aeabi_fsub+0x2ea>
 8001380:	e76c      	b.n	800125c <__aeabi_fsub+0x1c4>
 8001382:	2502      	movs	r5, #2
 8001384:	e6f2      	b.n	800116c <__aeabi_fsub+0xd4>
 8001386:	4663      	mov	r3, ip
 8001388:	2501      	movs	r5, #1
 800138a:	1b98      	subs	r0, r3, r6
 800138c:	e6ae      	b.n	80010ec <__aeabi_fsub+0x54>
 800138e:	2320      	movs	r3, #32
 8001390:	4664      	mov	r4, ip
 8001392:	4660      	mov	r0, ip
 8001394:	40fc      	lsrs	r4, r7
 8001396:	1bdf      	subs	r7, r3, r7
 8001398:	40b8      	lsls	r0, r7
 800139a:	1e43      	subs	r3, r0, #1
 800139c:	4198      	sbcs	r0, r3
 800139e:	4320      	orrs	r0, r4
 80013a0:	e79f      	b.n	80012e2 <__aeabi_fsub+0x24a>
 80013a2:	0005      	movs	r5, r0
 80013a4:	e75e      	b.n	8001264 <__aeabi_fsub+0x1cc>
 80013a6:	464b      	mov	r3, r9
 80013a8:	e771      	b.n	800128e <__aeabi_fsub+0x1f6>
 80013aa:	2320      	movs	r3, #32
 80013ac:	4665      	mov	r5, ip
 80013ae:	4660      	mov	r0, ip
 80013b0:	40cd      	lsrs	r5, r1
 80013b2:	1a59      	subs	r1, r3, r1
 80013b4:	4088      	lsls	r0, r1
 80013b6:	1e43      	subs	r3, r0, #1
 80013b8:	4198      	sbcs	r0, r3
 80013ba:	4328      	orrs	r0, r5
 80013bc:	e71c      	b.n	80011f8 <__aeabi_fsub+0x160>
 80013be:	4663      	mov	r3, ip
 80013c0:	000c      	movs	r4, r1
 80013c2:	2501      	movs	r5, #1
 80013c4:	1af0      	subs	r0, r6, r3
 80013c6:	e691      	b.n	80010ec <__aeabi_fsub+0x54>
 80013c8:	2e00      	cmp	r6, #0
 80013ca:	d095      	beq.n	80012f8 <__aeabi_fsub+0x260>
 80013cc:	000c      	movs	r4, r1
 80013ce:	464f      	mov	r7, r9
 80013d0:	2200      	movs	r2, #0
 80013d2:	e6ac      	b.n	800112e <__aeabi_fsub+0x96>
 80013d4:	464b      	mov	r3, r9
 80013d6:	000d      	movs	r5, r1
 80013d8:	e744      	b.n	8001264 <__aeabi_fsub+0x1cc>
 80013da:	464f      	mov	r7, r9
 80013dc:	2200      	movs	r2, #0
 80013de:	e6a6      	b.n	800112e <__aeabi_fsub+0x96>
 80013e0:	fbffffff 	.word	0xfbffffff
 80013e4:	7dffffff 	.word	0x7dffffff
 80013e8:	2800      	cmp	r0, #0
 80013ea:	d000      	beq.n	80013ee <__aeabi_fsub+0x356>
 80013ec:	e736      	b.n	800125c <__aeabi_fsub+0x1c4>
 80013ee:	2400      	movs	r4, #0
 80013f0:	2700      	movs	r7, #0
 80013f2:	e69c      	b.n	800112e <__aeabi_fsub+0x96>

080013f4 <__aeabi_f2iz>:
 80013f4:	0241      	lsls	r1, r0, #9
 80013f6:	0042      	lsls	r2, r0, #1
 80013f8:	0fc3      	lsrs	r3, r0, #31
 80013fa:	0a49      	lsrs	r1, r1, #9
 80013fc:	2000      	movs	r0, #0
 80013fe:	0e12      	lsrs	r2, r2, #24
 8001400:	2a7e      	cmp	r2, #126	; 0x7e
 8001402:	dd03      	ble.n	800140c <__aeabi_f2iz+0x18>
 8001404:	2a9d      	cmp	r2, #157	; 0x9d
 8001406:	dd02      	ble.n	800140e <__aeabi_f2iz+0x1a>
 8001408:	4a09      	ldr	r2, [pc, #36]	; (8001430 <__aeabi_f2iz+0x3c>)
 800140a:	1898      	adds	r0, r3, r2
 800140c:	4770      	bx	lr
 800140e:	2080      	movs	r0, #128	; 0x80
 8001410:	0400      	lsls	r0, r0, #16
 8001412:	4301      	orrs	r1, r0
 8001414:	2a95      	cmp	r2, #149	; 0x95
 8001416:	dc07      	bgt.n	8001428 <__aeabi_f2iz+0x34>
 8001418:	2096      	movs	r0, #150	; 0x96
 800141a:	1a82      	subs	r2, r0, r2
 800141c:	40d1      	lsrs	r1, r2
 800141e:	4248      	negs	r0, r1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f3      	bne.n	800140c <__aeabi_f2iz+0x18>
 8001424:	0008      	movs	r0, r1
 8001426:	e7f1      	b.n	800140c <__aeabi_f2iz+0x18>
 8001428:	3a96      	subs	r2, #150	; 0x96
 800142a:	4091      	lsls	r1, r2
 800142c:	e7f7      	b.n	800141e <__aeabi_f2iz+0x2a>
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	7fffffff 	.word	0x7fffffff

08001434 <__aeabi_ui2f>:
 8001434:	b570      	push	{r4, r5, r6, lr}
 8001436:	1e05      	subs	r5, r0, #0
 8001438:	d00e      	beq.n	8001458 <__aeabi_ui2f+0x24>
 800143a:	f001 fef3 	bl	8003224 <__clzsi2>
 800143e:	239e      	movs	r3, #158	; 0x9e
 8001440:	0004      	movs	r4, r0
 8001442:	1a1b      	subs	r3, r3, r0
 8001444:	2b96      	cmp	r3, #150	; 0x96
 8001446:	dc0c      	bgt.n	8001462 <__aeabi_ui2f+0x2e>
 8001448:	2808      	cmp	r0, #8
 800144a:	dd01      	ble.n	8001450 <__aeabi_ui2f+0x1c>
 800144c:	3c08      	subs	r4, #8
 800144e:	40a5      	lsls	r5, r4
 8001450:	026d      	lsls	r5, r5, #9
 8001452:	0a6d      	lsrs	r5, r5, #9
 8001454:	b2d8      	uxtb	r0, r3
 8001456:	e001      	b.n	800145c <__aeabi_ui2f+0x28>
 8001458:	2000      	movs	r0, #0
 800145a:	2500      	movs	r5, #0
 800145c:	05c0      	lsls	r0, r0, #23
 800145e:	4328      	orrs	r0, r5
 8001460:	bd70      	pop	{r4, r5, r6, pc}
 8001462:	2b99      	cmp	r3, #153	; 0x99
 8001464:	dd09      	ble.n	800147a <__aeabi_ui2f+0x46>
 8001466:	0002      	movs	r2, r0
 8001468:	0029      	movs	r1, r5
 800146a:	321b      	adds	r2, #27
 800146c:	4091      	lsls	r1, r2
 800146e:	1e4a      	subs	r2, r1, #1
 8001470:	4191      	sbcs	r1, r2
 8001472:	2205      	movs	r2, #5
 8001474:	1a12      	subs	r2, r2, r0
 8001476:	40d5      	lsrs	r5, r2
 8001478:	430d      	orrs	r5, r1
 800147a:	2c05      	cmp	r4, #5
 800147c:	dc12      	bgt.n	80014a4 <__aeabi_ui2f+0x70>
 800147e:	0029      	movs	r1, r5
 8001480:	4e0c      	ldr	r6, [pc, #48]	; (80014b4 <__aeabi_ui2f+0x80>)
 8001482:	4031      	ands	r1, r6
 8001484:	076a      	lsls	r2, r5, #29
 8001486:	d009      	beq.n	800149c <__aeabi_ui2f+0x68>
 8001488:	200f      	movs	r0, #15
 800148a:	4028      	ands	r0, r5
 800148c:	2804      	cmp	r0, #4
 800148e:	d005      	beq.n	800149c <__aeabi_ui2f+0x68>
 8001490:	3104      	adds	r1, #4
 8001492:	014a      	lsls	r2, r1, #5
 8001494:	d502      	bpl.n	800149c <__aeabi_ui2f+0x68>
 8001496:	239f      	movs	r3, #159	; 0x9f
 8001498:	4031      	ands	r1, r6
 800149a:	1b1b      	subs	r3, r3, r4
 800149c:	0189      	lsls	r1, r1, #6
 800149e:	0a4d      	lsrs	r5, r1, #9
 80014a0:	b2d8      	uxtb	r0, r3
 80014a2:	e7db      	b.n	800145c <__aeabi_ui2f+0x28>
 80014a4:	1f62      	subs	r2, r4, #5
 80014a6:	4095      	lsls	r5, r2
 80014a8:	0029      	movs	r1, r5
 80014aa:	4e02      	ldr	r6, [pc, #8]	; (80014b4 <__aeabi_ui2f+0x80>)
 80014ac:	4031      	ands	r1, r6
 80014ae:	076a      	lsls	r2, r5, #29
 80014b0:	d0f4      	beq.n	800149c <__aeabi_ui2f+0x68>
 80014b2:	e7e9      	b.n	8001488 <__aeabi_ui2f+0x54>
 80014b4:	fbffffff 	.word	0xfbffffff

080014b8 <__aeabi_dadd>:
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	464f      	mov	r7, r9
 80014bc:	4646      	mov	r6, r8
 80014be:	46d6      	mov	lr, sl
 80014c0:	000d      	movs	r5, r1
 80014c2:	0004      	movs	r4, r0
 80014c4:	b5c0      	push	{r6, r7, lr}
 80014c6:	001f      	movs	r7, r3
 80014c8:	0011      	movs	r1, r2
 80014ca:	0328      	lsls	r0, r5, #12
 80014cc:	0f62      	lsrs	r2, r4, #29
 80014ce:	0a40      	lsrs	r0, r0, #9
 80014d0:	4310      	orrs	r0, r2
 80014d2:	007a      	lsls	r2, r7, #1
 80014d4:	0d52      	lsrs	r2, r2, #21
 80014d6:	00e3      	lsls	r3, r4, #3
 80014d8:	033c      	lsls	r4, r7, #12
 80014da:	4691      	mov	r9, r2
 80014dc:	0a64      	lsrs	r4, r4, #9
 80014de:	0ffa      	lsrs	r2, r7, #31
 80014e0:	0f4f      	lsrs	r7, r1, #29
 80014e2:	006e      	lsls	r6, r5, #1
 80014e4:	4327      	orrs	r7, r4
 80014e6:	4692      	mov	sl, r2
 80014e8:	46b8      	mov	r8, r7
 80014ea:	0d76      	lsrs	r6, r6, #21
 80014ec:	0fed      	lsrs	r5, r5, #31
 80014ee:	00c9      	lsls	r1, r1, #3
 80014f0:	4295      	cmp	r5, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x3e>
 80014f4:	e099      	b.n	800162a <__aeabi_dadd+0x172>
 80014f6:	464c      	mov	r4, r9
 80014f8:	1b34      	subs	r4, r6, r4
 80014fa:	46a4      	mov	ip, r4
 80014fc:	2c00      	cmp	r4, #0
 80014fe:	dc00      	bgt.n	8001502 <__aeabi_dadd+0x4a>
 8001500:	e07c      	b.n	80015fc <__aeabi_dadd+0x144>
 8001502:	464a      	mov	r2, r9
 8001504:	2a00      	cmp	r2, #0
 8001506:	d100      	bne.n	800150a <__aeabi_dadd+0x52>
 8001508:	e0b8      	b.n	800167c <__aeabi_dadd+0x1c4>
 800150a:	4ac5      	ldr	r2, [pc, #788]	; (8001820 <__aeabi_dadd+0x368>)
 800150c:	4296      	cmp	r6, r2
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x5a>
 8001510:	e11c      	b.n	800174c <__aeabi_dadd+0x294>
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	003c      	movs	r4, r7
 8001516:	0412      	lsls	r2, r2, #16
 8001518:	4314      	orrs	r4, r2
 800151a:	46a0      	mov	r8, r4
 800151c:	4662      	mov	r2, ip
 800151e:	2a38      	cmp	r2, #56	; 0x38
 8001520:	dd00      	ble.n	8001524 <__aeabi_dadd+0x6c>
 8001522:	e161      	b.n	80017e8 <__aeabi_dadd+0x330>
 8001524:	2a1f      	cmp	r2, #31
 8001526:	dd00      	ble.n	800152a <__aeabi_dadd+0x72>
 8001528:	e1cc      	b.n	80018c4 <__aeabi_dadd+0x40c>
 800152a:	4664      	mov	r4, ip
 800152c:	2220      	movs	r2, #32
 800152e:	1b12      	subs	r2, r2, r4
 8001530:	4644      	mov	r4, r8
 8001532:	4094      	lsls	r4, r2
 8001534:	000f      	movs	r7, r1
 8001536:	46a1      	mov	r9, r4
 8001538:	4664      	mov	r4, ip
 800153a:	4091      	lsls	r1, r2
 800153c:	40e7      	lsrs	r7, r4
 800153e:	464c      	mov	r4, r9
 8001540:	1e4a      	subs	r2, r1, #1
 8001542:	4191      	sbcs	r1, r2
 8001544:	433c      	orrs	r4, r7
 8001546:	4642      	mov	r2, r8
 8001548:	4321      	orrs	r1, r4
 800154a:	4664      	mov	r4, ip
 800154c:	40e2      	lsrs	r2, r4
 800154e:	1a80      	subs	r0, r0, r2
 8001550:	1a5c      	subs	r4, r3, r1
 8001552:	42a3      	cmp	r3, r4
 8001554:	419b      	sbcs	r3, r3
 8001556:	425f      	negs	r7, r3
 8001558:	1bc7      	subs	r7, r0, r7
 800155a:	023b      	lsls	r3, r7, #8
 800155c:	d400      	bmi.n	8001560 <__aeabi_dadd+0xa8>
 800155e:	e0d0      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001560:	027f      	lsls	r7, r7, #9
 8001562:	0a7f      	lsrs	r7, r7, #9
 8001564:	2f00      	cmp	r7, #0
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0xb2>
 8001568:	e0ff      	b.n	800176a <__aeabi_dadd+0x2b2>
 800156a:	0038      	movs	r0, r7
 800156c:	f001 fe5a 	bl	8003224 <__clzsi2>
 8001570:	0001      	movs	r1, r0
 8001572:	3908      	subs	r1, #8
 8001574:	2320      	movs	r3, #32
 8001576:	0022      	movs	r2, r4
 8001578:	1a5b      	subs	r3, r3, r1
 800157a:	408f      	lsls	r7, r1
 800157c:	40da      	lsrs	r2, r3
 800157e:	408c      	lsls	r4, r1
 8001580:	4317      	orrs	r7, r2
 8001582:	42b1      	cmp	r1, r6
 8001584:	da00      	bge.n	8001588 <__aeabi_dadd+0xd0>
 8001586:	e0ff      	b.n	8001788 <__aeabi_dadd+0x2d0>
 8001588:	1b89      	subs	r1, r1, r6
 800158a:	1c4b      	adds	r3, r1, #1
 800158c:	2b1f      	cmp	r3, #31
 800158e:	dd00      	ble.n	8001592 <__aeabi_dadd+0xda>
 8001590:	e0a8      	b.n	80016e4 <__aeabi_dadd+0x22c>
 8001592:	2220      	movs	r2, #32
 8001594:	0039      	movs	r1, r7
 8001596:	1ad2      	subs	r2, r2, r3
 8001598:	0020      	movs	r0, r4
 800159a:	4094      	lsls	r4, r2
 800159c:	4091      	lsls	r1, r2
 800159e:	40d8      	lsrs	r0, r3
 80015a0:	1e62      	subs	r2, r4, #1
 80015a2:	4194      	sbcs	r4, r2
 80015a4:	40df      	lsrs	r7, r3
 80015a6:	2600      	movs	r6, #0
 80015a8:	4301      	orrs	r1, r0
 80015aa:	430c      	orrs	r4, r1
 80015ac:	0763      	lsls	r3, r4, #29
 80015ae:	d009      	beq.n	80015c4 <__aeabi_dadd+0x10c>
 80015b0:	230f      	movs	r3, #15
 80015b2:	4023      	ands	r3, r4
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d005      	beq.n	80015c4 <__aeabi_dadd+0x10c>
 80015b8:	1d23      	adds	r3, r4, #4
 80015ba:	42a3      	cmp	r3, r4
 80015bc:	41a4      	sbcs	r4, r4
 80015be:	4264      	negs	r4, r4
 80015c0:	193f      	adds	r7, r7, r4
 80015c2:	001c      	movs	r4, r3
 80015c4:	023b      	lsls	r3, r7, #8
 80015c6:	d400      	bmi.n	80015ca <__aeabi_dadd+0x112>
 80015c8:	e09e      	b.n	8001708 <__aeabi_dadd+0x250>
 80015ca:	4b95      	ldr	r3, [pc, #596]	; (8001820 <__aeabi_dadd+0x368>)
 80015cc:	3601      	adds	r6, #1
 80015ce:	429e      	cmp	r6, r3
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dadd+0x11c>
 80015d2:	e0b7      	b.n	8001744 <__aeabi_dadd+0x28c>
 80015d4:	4a93      	ldr	r2, [pc, #588]	; (8001824 <__aeabi_dadd+0x36c>)
 80015d6:	08e4      	lsrs	r4, r4, #3
 80015d8:	4017      	ands	r7, r2
 80015da:	077b      	lsls	r3, r7, #29
 80015dc:	0571      	lsls	r1, r6, #21
 80015de:	027f      	lsls	r7, r7, #9
 80015e0:	4323      	orrs	r3, r4
 80015e2:	0b3f      	lsrs	r7, r7, #12
 80015e4:	0d4a      	lsrs	r2, r1, #21
 80015e6:	0512      	lsls	r2, r2, #20
 80015e8:	433a      	orrs	r2, r7
 80015ea:	07ed      	lsls	r5, r5, #31
 80015ec:	432a      	orrs	r2, r5
 80015ee:	0018      	movs	r0, r3
 80015f0:	0011      	movs	r1, r2
 80015f2:	bce0      	pop	{r5, r6, r7}
 80015f4:	46ba      	mov	sl, r7
 80015f6:	46b1      	mov	r9, r6
 80015f8:	46a8      	mov	r8, r5
 80015fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d04b      	beq.n	8001698 <__aeabi_dadd+0x1e0>
 8001600:	464c      	mov	r4, r9
 8001602:	1ba4      	subs	r4, r4, r6
 8001604:	46a4      	mov	ip, r4
 8001606:	2e00      	cmp	r6, #0
 8001608:	d000      	beq.n	800160c <__aeabi_dadd+0x154>
 800160a:	e123      	b.n	8001854 <__aeabi_dadd+0x39c>
 800160c:	0004      	movs	r4, r0
 800160e:	431c      	orrs	r4, r3
 8001610:	d100      	bne.n	8001614 <__aeabi_dadd+0x15c>
 8001612:	e1af      	b.n	8001974 <__aeabi_dadd+0x4bc>
 8001614:	4662      	mov	r2, ip
 8001616:	1e54      	subs	r4, r2, #1
 8001618:	2a01      	cmp	r2, #1
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x166>
 800161c:	e215      	b.n	8001a4a <__aeabi_dadd+0x592>
 800161e:	4d80      	ldr	r5, [pc, #512]	; (8001820 <__aeabi_dadd+0x368>)
 8001620:	45ac      	cmp	ip, r5
 8001622:	d100      	bne.n	8001626 <__aeabi_dadd+0x16e>
 8001624:	e1c8      	b.n	80019b8 <__aeabi_dadd+0x500>
 8001626:	46a4      	mov	ip, r4
 8001628:	e11b      	b.n	8001862 <__aeabi_dadd+0x3aa>
 800162a:	464a      	mov	r2, r9
 800162c:	1ab2      	subs	r2, r6, r2
 800162e:	4694      	mov	ip, r2
 8001630:	2a00      	cmp	r2, #0
 8001632:	dc00      	bgt.n	8001636 <__aeabi_dadd+0x17e>
 8001634:	e0ac      	b.n	8001790 <__aeabi_dadd+0x2d8>
 8001636:	464a      	mov	r2, r9
 8001638:	2a00      	cmp	r2, #0
 800163a:	d043      	beq.n	80016c4 <__aeabi_dadd+0x20c>
 800163c:	4a78      	ldr	r2, [pc, #480]	; (8001820 <__aeabi_dadd+0x368>)
 800163e:	4296      	cmp	r6, r2
 8001640:	d100      	bne.n	8001644 <__aeabi_dadd+0x18c>
 8001642:	e1af      	b.n	80019a4 <__aeabi_dadd+0x4ec>
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	003c      	movs	r4, r7
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	4314      	orrs	r4, r2
 800164c:	46a0      	mov	r8, r4
 800164e:	4662      	mov	r2, ip
 8001650:	2a38      	cmp	r2, #56	; 0x38
 8001652:	dc67      	bgt.n	8001724 <__aeabi_dadd+0x26c>
 8001654:	2a1f      	cmp	r2, #31
 8001656:	dc00      	bgt.n	800165a <__aeabi_dadd+0x1a2>
 8001658:	e15f      	b.n	800191a <__aeabi_dadd+0x462>
 800165a:	4647      	mov	r7, r8
 800165c:	3a20      	subs	r2, #32
 800165e:	40d7      	lsrs	r7, r2
 8001660:	4662      	mov	r2, ip
 8001662:	2a20      	cmp	r2, #32
 8001664:	d005      	beq.n	8001672 <__aeabi_dadd+0x1ba>
 8001666:	4664      	mov	r4, ip
 8001668:	2240      	movs	r2, #64	; 0x40
 800166a:	1b12      	subs	r2, r2, r4
 800166c:	4644      	mov	r4, r8
 800166e:	4094      	lsls	r4, r2
 8001670:	4321      	orrs	r1, r4
 8001672:	1e4a      	subs	r2, r1, #1
 8001674:	4191      	sbcs	r1, r2
 8001676:	000c      	movs	r4, r1
 8001678:	433c      	orrs	r4, r7
 800167a:	e057      	b.n	800172c <__aeabi_dadd+0x274>
 800167c:	003a      	movs	r2, r7
 800167e:	430a      	orrs	r2, r1
 8001680:	d100      	bne.n	8001684 <__aeabi_dadd+0x1cc>
 8001682:	e105      	b.n	8001890 <__aeabi_dadd+0x3d8>
 8001684:	0022      	movs	r2, r4
 8001686:	3a01      	subs	r2, #1
 8001688:	2c01      	cmp	r4, #1
 800168a:	d100      	bne.n	800168e <__aeabi_dadd+0x1d6>
 800168c:	e182      	b.n	8001994 <__aeabi_dadd+0x4dc>
 800168e:	4c64      	ldr	r4, [pc, #400]	; (8001820 <__aeabi_dadd+0x368>)
 8001690:	45a4      	cmp	ip, r4
 8001692:	d05b      	beq.n	800174c <__aeabi_dadd+0x294>
 8001694:	4694      	mov	ip, r2
 8001696:	e741      	b.n	800151c <__aeabi_dadd+0x64>
 8001698:	4c63      	ldr	r4, [pc, #396]	; (8001828 <__aeabi_dadd+0x370>)
 800169a:	1c77      	adds	r7, r6, #1
 800169c:	4227      	tst	r7, r4
 800169e:	d000      	beq.n	80016a2 <__aeabi_dadd+0x1ea>
 80016a0:	e0c4      	b.n	800182c <__aeabi_dadd+0x374>
 80016a2:	0004      	movs	r4, r0
 80016a4:	431c      	orrs	r4, r3
 80016a6:	2e00      	cmp	r6, #0
 80016a8:	d000      	beq.n	80016ac <__aeabi_dadd+0x1f4>
 80016aa:	e169      	b.n	8001980 <__aeabi_dadd+0x4c8>
 80016ac:	2c00      	cmp	r4, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dadd+0x1fa>
 80016b0:	e1bf      	b.n	8001a32 <__aeabi_dadd+0x57a>
 80016b2:	4644      	mov	r4, r8
 80016b4:	430c      	orrs	r4, r1
 80016b6:	d000      	beq.n	80016ba <__aeabi_dadd+0x202>
 80016b8:	e1d0      	b.n	8001a5c <__aeabi_dadd+0x5a4>
 80016ba:	0742      	lsls	r2, r0, #29
 80016bc:	08db      	lsrs	r3, r3, #3
 80016be:	4313      	orrs	r3, r2
 80016c0:	08c0      	lsrs	r0, r0, #3
 80016c2:	e029      	b.n	8001718 <__aeabi_dadd+0x260>
 80016c4:	003a      	movs	r2, r7
 80016c6:	430a      	orrs	r2, r1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x214>
 80016ca:	e170      	b.n	80019ae <__aeabi_dadd+0x4f6>
 80016cc:	4662      	mov	r2, ip
 80016ce:	4664      	mov	r4, ip
 80016d0:	3a01      	subs	r2, #1
 80016d2:	2c01      	cmp	r4, #1
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dadd+0x220>
 80016d6:	e0e0      	b.n	800189a <__aeabi_dadd+0x3e2>
 80016d8:	4c51      	ldr	r4, [pc, #324]	; (8001820 <__aeabi_dadd+0x368>)
 80016da:	45a4      	cmp	ip, r4
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dadd+0x228>
 80016de:	e161      	b.n	80019a4 <__aeabi_dadd+0x4ec>
 80016e0:	4694      	mov	ip, r2
 80016e2:	e7b4      	b.n	800164e <__aeabi_dadd+0x196>
 80016e4:	003a      	movs	r2, r7
 80016e6:	391f      	subs	r1, #31
 80016e8:	40ca      	lsrs	r2, r1
 80016ea:	0011      	movs	r1, r2
 80016ec:	2b20      	cmp	r3, #32
 80016ee:	d003      	beq.n	80016f8 <__aeabi_dadd+0x240>
 80016f0:	2240      	movs	r2, #64	; 0x40
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	409f      	lsls	r7, r3
 80016f6:	433c      	orrs	r4, r7
 80016f8:	1e63      	subs	r3, r4, #1
 80016fa:	419c      	sbcs	r4, r3
 80016fc:	2700      	movs	r7, #0
 80016fe:	2600      	movs	r6, #0
 8001700:	430c      	orrs	r4, r1
 8001702:	0763      	lsls	r3, r4, #29
 8001704:	d000      	beq.n	8001708 <__aeabi_dadd+0x250>
 8001706:	e753      	b.n	80015b0 <__aeabi_dadd+0xf8>
 8001708:	46b4      	mov	ip, r6
 800170a:	08e4      	lsrs	r4, r4, #3
 800170c:	077b      	lsls	r3, r7, #29
 800170e:	4323      	orrs	r3, r4
 8001710:	08f8      	lsrs	r0, r7, #3
 8001712:	4a43      	ldr	r2, [pc, #268]	; (8001820 <__aeabi_dadd+0x368>)
 8001714:	4594      	cmp	ip, r2
 8001716:	d01d      	beq.n	8001754 <__aeabi_dadd+0x29c>
 8001718:	4662      	mov	r2, ip
 800171a:	0307      	lsls	r7, r0, #12
 800171c:	0552      	lsls	r2, r2, #21
 800171e:	0b3f      	lsrs	r7, r7, #12
 8001720:	0d52      	lsrs	r2, r2, #21
 8001722:	e760      	b.n	80015e6 <__aeabi_dadd+0x12e>
 8001724:	4644      	mov	r4, r8
 8001726:	430c      	orrs	r4, r1
 8001728:	1e62      	subs	r2, r4, #1
 800172a:	4194      	sbcs	r4, r2
 800172c:	18e4      	adds	r4, r4, r3
 800172e:	429c      	cmp	r4, r3
 8001730:	419b      	sbcs	r3, r3
 8001732:	425f      	negs	r7, r3
 8001734:	183f      	adds	r7, r7, r0
 8001736:	023b      	lsls	r3, r7, #8
 8001738:	d5e3      	bpl.n	8001702 <__aeabi_dadd+0x24a>
 800173a:	4b39      	ldr	r3, [pc, #228]	; (8001820 <__aeabi_dadd+0x368>)
 800173c:	3601      	adds	r6, #1
 800173e:	429e      	cmp	r6, r3
 8001740:	d000      	beq.n	8001744 <__aeabi_dadd+0x28c>
 8001742:	e0b5      	b.n	80018b0 <__aeabi_dadd+0x3f8>
 8001744:	0032      	movs	r2, r6
 8001746:	2700      	movs	r7, #0
 8001748:	2300      	movs	r3, #0
 800174a:	e74c      	b.n	80015e6 <__aeabi_dadd+0x12e>
 800174c:	0742      	lsls	r2, r0, #29
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	4313      	orrs	r3, r2
 8001752:	08c0      	lsrs	r0, r0, #3
 8001754:	001a      	movs	r2, r3
 8001756:	4302      	orrs	r2, r0
 8001758:	d100      	bne.n	800175c <__aeabi_dadd+0x2a4>
 800175a:	e1e1      	b.n	8001b20 <__aeabi_dadd+0x668>
 800175c:	2780      	movs	r7, #128	; 0x80
 800175e:	033f      	lsls	r7, r7, #12
 8001760:	4307      	orrs	r7, r0
 8001762:	033f      	lsls	r7, r7, #12
 8001764:	4a2e      	ldr	r2, [pc, #184]	; (8001820 <__aeabi_dadd+0x368>)
 8001766:	0b3f      	lsrs	r7, r7, #12
 8001768:	e73d      	b.n	80015e6 <__aeabi_dadd+0x12e>
 800176a:	0020      	movs	r0, r4
 800176c:	f001 fd5a 	bl	8003224 <__clzsi2>
 8001770:	0001      	movs	r1, r0
 8001772:	3118      	adds	r1, #24
 8001774:	291f      	cmp	r1, #31
 8001776:	dc00      	bgt.n	800177a <__aeabi_dadd+0x2c2>
 8001778:	e6fc      	b.n	8001574 <__aeabi_dadd+0xbc>
 800177a:	3808      	subs	r0, #8
 800177c:	4084      	lsls	r4, r0
 800177e:	0027      	movs	r7, r4
 8001780:	2400      	movs	r4, #0
 8001782:	42b1      	cmp	r1, r6
 8001784:	db00      	blt.n	8001788 <__aeabi_dadd+0x2d0>
 8001786:	e6ff      	b.n	8001588 <__aeabi_dadd+0xd0>
 8001788:	4a26      	ldr	r2, [pc, #152]	; (8001824 <__aeabi_dadd+0x36c>)
 800178a:	1a76      	subs	r6, r6, r1
 800178c:	4017      	ands	r7, r2
 800178e:	e70d      	b.n	80015ac <__aeabi_dadd+0xf4>
 8001790:	2a00      	cmp	r2, #0
 8001792:	d02f      	beq.n	80017f4 <__aeabi_dadd+0x33c>
 8001794:	464a      	mov	r2, r9
 8001796:	1b92      	subs	r2, r2, r6
 8001798:	4694      	mov	ip, r2
 800179a:	2e00      	cmp	r6, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_dadd+0x2e8>
 800179e:	e0ad      	b.n	80018fc <__aeabi_dadd+0x444>
 80017a0:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <__aeabi_dadd+0x368>)
 80017a2:	4591      	cmp	r9, r2
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dadd+0x2f0>
 80017a6:	e10f      	b.n	80019c8 <__aeabi_dadd+0x510>
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	0412      	lsls	r2, r2, #16
 80017ac:	4310      	orrs	r0, r2
 80017ae:	4662      	mov	r2, ip
 80017b0:	2a38      	cmp	r2, #56	; 0x38
 80017b2:	dd00      	ble.n	80017b6 <__aeabi_dadd+0x2fe>
 80017b4:	e10f      	b.n	80019d6 <__aeabi_dadd+0x51e>
 80017b6:	2a1f      	cmp	r2, #31
 80017b8:	dd00      	ble.n	80017bc <__aeabi_dadd+0x304>
 80017ba:	e180      	b.n	8001abe <__aeabi_dadd+0x606>
 80017bc:	4664      	mov	r4, ip
 80017be:	2220      	movs	r2, #32
 80017c0:	001e      	movs	r6, r3
 80017c2:	1b12      	subs	r2, r2, r4
 80017c4:	4667      	mov	r7, ip
 80017c6:	0004      	movs	r4, r0
 80017c8:	4093      	lsls	r3, r2
 80017ca:	4094      	lsls	r4, r2
 80017cc:	40fe      	lsrs	r6, r7
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	4193      	sbcs	r3, r2
 80017d2:	40f8      	lsrs	r0, r7
 80017d4:	4334      	orrs	r4, r6
 80017d6:	431c      	orrs	r4, r3
 80017d8:	4480      	add	r8, r0
 80017da:	1864      	adds	r4, r4, r1
 80017dc:	428c      	cmp	r4, r1
 80017de:	41bf      	sbcs	r7, r7
 80017e0:	427f      	negs	r7, r7
 80017e2:	464e      	mov	r6, r9
 80017e4:	4447      	add	r7, r8
 80017e6:	e7a6      	b.n	8001736 <__aeabi_dadd+0x27e>
 80017e8:	4642      	mov	r2, r8
 80017ea:	430a      	orrs	r2, r1
 80017ec:	0011      	movs	r1, r2
 80017ee:	1e4a      	subs	r2, r1, #1
 80017f0:	4191      	sbcs	r1, r2
 80017f2:	e6ad      	b.n	8001550 <__aeabi_dadd+0x98>
 80017f4:	4c0c      	ldr	r4, [pc, #48]	; (8001828 <__aeabi_dadd+0x370>)
 80017f6:	1c72      	adds	r2, r6, #1
 80017f8:	4222      	tst	r2, r4
 80017fa:	d000      	beq.n	80017fe <__aeabi_dadd+0x346>
 80017fc:	e0a1      	b.n	8001942 <__aeabi_dadd+0x48a>
 80017fe:	0002      	movs	r2, r0
 8001800:	431a      	orrs	r2, r3
 8001802:	2e00      	cmp	r6, #0
 8001804:	d000      	beq.n	8001808 <__aeabi_dadd+0x350>
 8001806:	e0fa      	b.n	80019fe <__aeabi_dadd+0x546>
 8001808:	2a00      	cmp	r2, #0
 800180a:	d100      	bne.n	800180e <__aeabi_dadd+0x356>
 800180c:	e145      	b.n	8001a9a <__aeabi_dadd+0x5e2>
 800180e:	003a      	movs	r2, r7
 8001810:	430a      	orrs	r2, r1
 8001812:	d000      	beq.n	8001816 <__aeabi_dadd+0x35e>
 8001814:	e146      	b.n	8001aa4 <__aeabi_dadd+0x5ec>
 8001816:	0742      	lsls	r2, r0, #29
 8001818:	08db      	lsrs	r3, r3, #3
 800181a:	4313      	orrs	r3, r2
 800181c:	08c0      	lsrs	r0, r0, #3
 800181e:	e77b      	b.n	8001718 <__aeabi_dadd+0x260>
 8001820:	000007ff 	.word	0x000007ff
 8001824:	ff7fffff 	.word	0xff7fffff
 8001828:	000007fe 	.word	0x000007fe
 800182c:	4647      	mov	r7, r8
 800182e:	1a5c      	subs	r4, r3, r1
 8001830:	1bc2      	subs	r2, r0, r7
 8001832:	42a3      	cmp	r3, r4
 8001834:	41bf      	sbcs	r7, r7
 8001836:	427f      	negs	r7, r7
 8001838:	46b9      	mov	r9, r7
 800183a:	0017      	movs	r7, r2
 800183c:	464a      	mov	r2, r9
 800183e:	1abf      	subs	r7, r7, r2
 8001840:	023a      	lsls	r2, r7, #8
 8001842:	d500      	bpl.n	8001846 <__aeabi_dadd+0x38e>
 8001844:	e08d      	b.n	8001962 <__aeabi_dadd+0x4aa>
 8001846:	0023      	movs	r3, r4
 8001848:	433b      	orrs	r3, r7
 800184a:	d000      	beq.n	800184e <__aeabi_dadd+0x396>
 800184c:	e68a      	b.n	8001564 <__aeabi_dadd+0xac>
 800184e:	2000      	movs	r0, #0
 8001850:	2500      	movs	r5, #0
 8001852:	e761      	b.n	8001718 <__aeabi_dadd+0x260>
 8001854:	4cb4      	ldr	r4, [pc, #720]	; (8001b28 <__aeabi_dadd+0x670>)
 8001856:	45a1      	cmp	r9, r4
 8001858:	d100      	bne.n	800185c <__aeabi_dadd+0x3a4>
 800185a:	e0ad      	b.n	80019b8 <__aeabi_dadd+0x500>
 800185c:	2480      	movs	r4, #128	; 0x80
 800185e:	0424      	lsls	r4, r4, #16
 8001860:	4320      	orrs	r0, r4
 8001862:	4664      	mov	r4, ip
 8001864:	2c38      	cmp	r4, #56	; 0x38
 8001866:	dc3d      	bgt.n	80018e4 <__aeabi_dadd+0x42c>
 8001868:	4662      	mov	r2, ip
 800186a:	2c1f      	cmp	r4, #31
 800186c:	dd00      	ble.n	8001870 <__aeabi_dadd+0x3b8>
 800186e:	e0b7      	b.n	80019e0 <__aeabi_dadd+0x528>
 8001870:	2520      	movs	r5, #32
 8001872:	001e      	movs	r6, r3
 8001874:	1b2d      	subs	r5, r5, r4
 8001876:	0004      	movs	r4, r0
 8001878:	40ab      	lsls	r3, r5
 800187a:	40ac      	lsls	r4, r5
 800187c:	40d6      	lsrs	r6, r2
 800187e:	40d0      	lsrs	r0, r2
 8001880:	4642      	mov	r2, r8
 8001882:	1e5d      	subs	r5, r3, #1
 8001884:	41ab      	sbcs	r3, r5
 8001886:	4334      	orrs	r4, r6
 8001888:	1a12      	subs	r2, r2, r0
 800188a:	4690      	mov	r8, r2
 800188c:	4323      	orrs	r3, r4
 800188e:	e02c      	b.n	80018ea <__aeabi_dadd+0x432>
 8001890:	0742      	lsls	r2, r0, #29
 8001892:	08db      	lsrs	r3, r3, #3
 8001894:	4313      	orrs	r3, r2
 8001896:	08c0      	lsrs	r0, r0, #3
 8001898:	e73b      	b.n	8001712 <__aeabi_dadd+0x25a>
 800189a:	185c      	adds	r4, r3, r1
 800189c:	429c      	cmp	r4, r3
 800189e:	419b      	sbcs	r3, r3
 80018a0:	4440      	add	r0, r8
 80018a2:	425b      	negs	r3, r3
 80018a4:	18c7      	adds	r7, r0, r3
 80018a6:	2601      	movs	r6, #1
 80018a8:	023b      	lsls	r3, r7, #8
 80018aa:	d400      	bmi.n	80018ae <__aeabi_dadd+0x3f6>
 80018ac:	e729      	b.n	8001702 <__aeabi_dadd+0x24a>
 80018ae:	2602      	movs	r6, #2
 80018b0:	4a9e      	ldr	r2, [pc, #632]	; (8001b2c <__aeabi_dadd+0x674>)
 80018b2:	0863      	lsrs	r3, r4, #1
 80018b4:	4017      	ands	r7, r2
 80018b6:	2201      	movs	r2, #1
 80018b8:	4014      	ands	r4, r2
 80018ba:	431c      	orrs	r4, r3
 80018bc:	07fb      	lsls	r3, r7, #31
 80018be:	431c      	orrs	r4, r3
 80018c0:	087f      	lsrs	r7, r7, #1
 80018c2:	e673      	b.n	80015ac <__aeabi_dadd+0xf4>
 80018c4:	4644      	mov	r4, r8
 80018c6:	3a20      	subs	r2, #32
 80018c8:	40d4      	lsrs	r4, r2
 80018ca:	4662      	mov	r2, ip
 80018cc:	2a20      	cmp	r2, #32
 80018ce:	d005      	beq.n	80018dc <__aeabi_dadd+0x424>
 80018d0:	4667      	mov	r7, ip
 80018d2:	2240      	movs	r2, #64	; 0x40
 80018d4:	1bd2      	subs	r2, r2, r7
 80018d6:	4647      	mov	r7, r8
 80018d8:	4097      	lsls	r7, r2
 80018da:	4339      	orrs	r1, r7
 80018dc:	1e4a      	subs	r2, r1, #1
 80018de:	4191      	sbcs	r1, r2
 80018e0:	4321      	orrs	r1, r4
 80018e2:	e635      	b.n	8001550 <__aeabi_dadd+0x98>
 80018e4:	4303      	orrs	r3, r0
 80018e6:	1e58      	subs	r0, r3, #1
 80018e8:	4183      	sbcs	r3, r0
 80018ea:	1acc      	subs	r4, r1, r3
 80018ec:	42a1      	cmp	r1, r4
 80018ee:	41bf      	sbcs	r7, r7
 80018f0:	4643      	mov	r3, r8
 80018f2:	427f      	negs	r7, r7
 80018f4:	4655      	mov	r5, sl
 80018f6:	464e      	mov	r6, r9
 80018f8:	1bdf      	subs	r7, r3, r7
 80018fa:	e62e      	b.n	800155a <__aeabi_dadd+0xa2>
 80018fc:	0002      	movs	r2, r0
 80018fe:	431a      	orrs	r2, r3
 8001900:	d100      	bne.n	8001904 <__aeabi_dadd+0x44c>
 8001902:	e0bd      	b.n	8001a80 <__aeabi_dadd+0x5c8>
 8001904:	4662      	mov	r2, ip
 8001906:	4664      	mov	r4, ip
 8001908:	3a01      	subs	r2, #1
 800190a:	2c01      	cmp	r4, #1
 800190c:	d100      	bne.n	8001910 <__aeabi_dadd+0x458>
 800190e:	e0e5      	b.n	8001adc <__aeabi_dadd+0x624>
 8001910:	4c85      	ldr	r4, [pc, #532]	; (8001b28 <__aeabi_dadd+0x670>)
 8001912:	45a4      	cmp	ip, r4
 8001914:	d058      	beq.n	80019c8 <__aeabi_dadd+0x510>
 8001916:	4694      	mov	ip, r2
 8001918:	e749      	b.n	80017ae <__aeabi_dadd+0x2f6>
 800191a:	4664      	mov	r4, ip
 800191c:	2220      	movs	r2, #32
 800191e:	1b12      	subs	r2, r2, r4
 8001920:	4644      	mov	r4, r8
 8001922:	4094      	lsls	r4, r2
 8001924:	000f      	movs	r7, r1
 8001926:	46a1      	mov	r9, r4
 8001928:	4664      	mov	r4, ip
 800192a:	4091      	lsls	r1, r2
 800192c:	40e7      	lsrs	r7, r4
 800192e:	464c      	mov	r4, r9
 8001930:	1e4a      	subs	r2, r1, #1
 8001932:	4191      	sbcs	r1, r2
 8001934:	433c      	orrs	r4, r7
 8001936:	4642      	mov	r2, r8
 8001938:	430c      	orrs	r4, r1
 800193a:	4661      	mov	r1, ip
 800193c:	40ca      	lsrs	r2, r1
 800193e:	1880      	adds	r0, r0, r2
 8001940:	e6f4      	b.n	800172c <__aeabi_dadd+0x274>
 8001942:	4c79      	ldr	r4, [pc, #484]	; (8001b28 <__aeabi_dadd+0x670>)
 8001944:	42a2      	cmp	r2, r4
 8001946:	d100      	bne.n	800194a <__aeabi_dadd+0x492>
 8001948:	e6fd      	b.n	8001746 <__aeabi_dadd+0x28e>
 800194a:	1859      	adds	r1, r3, r1
 800194c:	4299      	cmp	r1, r3
 800194e:	419b      	sbcs	r3, r3
 8001950:	4440      	add	r0, r8
 8001952:	425f      	negs	r7, r3
 8001954:	19c7      	adds	r7, r0, r7
 8001956:	07fc      	lsls	r4, r7, #31
 8001958:	0849      	lsrs	r1, r1, #1
 800195a:	0016      	movs	r6, r2
 800195c:	430c      	orrs	r4, r1
 800195e:	087f      	lsrs	r7, r7, #1
 8001960:	e6cf      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001962:	1acc      	subs	r4, r1, r3
 8001964:	42a1      	cmp	r1, r4
 8001966:	41bf      	sbcs	r7, r7
 8001968:	4643      	mov	r3, r8
 800196a:	427f      	negs	r7, r7
 800196c:	1a18      	subs	r0, r3, r0
 800196e:	4655      	mov	r5, sl
 8001970:	1bc7      	subs	r7, r0, r7
 8001972:	e5f7      	b.n	8001564 <__aeabi_dadd+0xac>
 8001974:	08c9      	lsrs	r1, r1, #3
 8001976:	077b      	lsls	r3, r7, #29
 8001978:	4655      	mov	r5, sl
 800197a:	430b      	orrs	r3, r1
 800197c:	08f8      	lsrs	r0, r7, #3
 800197e:	e6c8      	b.n	8001712 <__aeabi_dadd+0x25a>
 8001980:	2c00      	cmp	r4, #0
 8001982:	d000      	beq.n	8001986 <__aeabi_dadd+0x4ce>
 8001984:	e081      	b.n	8001a8a <__aeabi_dadd+0x5d2>
 8001986:	4643      	mov	r3, r8
 8001988:	430b      	orrs	r3, r1
 800198a:	d115      	bne.n	80019b8 <__aeabi_dadd+0x500>
 800198c:	2080      	movs	r0, #128	; 0x80
 800198e:	2500      	movs	r5, #0
 8001990:	0300      	lsls	r0, r0, #12
 8001992:	e6e3      	b.n	800175c <__aeabi_dadd+0x2a4>
 8001994:	1a5c      	subs	r4, r3, r1
 8001996:	42a3      	cmp	r3, r4
 8001998:	419b      	sbcs	r3, r3
 800199a:	1bc7      	subs	r7, r0, r7
 800199c:	425b      	negs	r3, r3
 800199e:	2601      	movs	r6, #1
 80019a0:	1aff      	subs	r7, r7, r3
 80019a2:	e5da      	b.n	800155a <__aeabi_dadd+0xa2>
 80019a4:	0742      	lsls	r2, r0, #29
 80019a6:	08db      	lsrs	r3, r3, #3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	08c0      	lsrs	r0, r0, #3
 80019ac:	e6d2      	b.n	8001754 <__aeabi_dadd+0x29c>
 80019ae:	0742      	lsls	r2, r0, #29
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	08c0      	lsrs	r0, r0, #3
 80019b6:	e6ac      	b.n	8001712 <__aeabi_dadd+0x25a>
 80019b8:	4643      	mov	r3, r8
 80019ba:	4642      	mov	r2, r8
 80019bc:	08c9      	lsrs	r1, r1, #3
 80019be:	075b      	lsls	r3, r3, #29
 80019c0:	4655      	mov	r5, sl
 80019c2:	430b      	orrs	r3, r1
 80019c4:	08d0      	lsrs	r0, r2, #3
 80019c6:	e6c5      	b.n	8001754 <__aeabi_dadd+0x29c>
 80019c8:	4643      	mov	r3, r8
 80019ca:	4642      	mov	r2, r8
 80019cc:	075b      	lsls	r3, r3, #29
 80019ce:	08c9      	lsrs	r1, r1, #3
 80019d0:	430b      	orrs	r3, r1
 80019d2:	08d0      	lsrs	r0, r2, #3
 80019d4:	e6be      	b.n	8001754 <__aeabi_dadd+0x29c>
 80019d6:	4303      	orrs	r3, r0
 80019d8:	001c      	movs	r4, r3
 80019da:	1e63      	subs	r3, r4, #1
 80019dc:	419c      	sbcs	r4, r3
 80019de:	e6fc      	b.n	80017da <__aeabi_dadd+0x322>
 80019e0:	0002      	movs	r2, r0
 80019e2:	3c20      	subs	r4, #32
 80019e4:	40e2      	lsrs	r2, r4
 80019e6:	0014      	movs	r4, r2
 80019e8:	4662      	mov	r2, ip
 80019ea:	2a20      	cmp	r2, #32
 80019ec:	d003      	beq.n	80019f6 <__aeabi_dadd+0x53e>
 80019ee:	2540      	movs	r5, #64	; 0x40
 80019f0:	1aad      	subs	r5, r5, r2
 80019f2:	40a8      	lsls	r0, r5
 80019f4:	4303      	orrs	r3, r0
 80019f6:	1e58      	subs	r0, r3, #1
 80019f8:	4183      	sbcs	r3, r0
 80019fa:	4323      	orrs	r3, r4
 80019fc:	e775      	b.n	80018ea <__aeabi_dadd+0x432>
 80019fe:	2a00      	cmp	r2, #0
 8001a00:	d0e2      	beq.n	80019c8 <__aeabi_dadd+0x510>
 8001a02:	003a      	movs	r2, r7
 8001a04:	430a      	orrs	r2, r1
 8001a06:	d0cd      	beq.n	80019a4 <__aeabi_dadd+0x4ec>
 8001a08:	0742      	lsls	r2, r0, #29
 8001a0a:	08db      	lsrs	r3, r3, #3
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	08c0      	lsrs	r0, r0, #3
 8001a12:	0312      	lsls	r2, r2, #12
 8001a14:	4210      	tst	r0, r2
 8001a16:	d006      	beq.n	8001a26 <__aeabi_dadd+0x56e>
 8001a18:	08fc      	lsrs	r4, r7, #3
 8001a1a:	4214      	tst	r4, r2
 8001a1c:	d103      	bne.n	8001a26 <__aeabi_dadd+0x56e>
 8001a1e:	0020      	movs	r0, r4
 8001a20:	08cb      	lsrs	r3, r1, #3
 8001a22:	077a      	lsls	r2, r7, #29
 8001a24:	4313      	orrs	r3, r2
 8001a26:	0f5a      	lsrs	r2, r3, #29
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	0752      	lsls	r2, r2, #29
 8001a2c:	08db      	lsrs	r3, r3, #3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	e690      	b.n	8001754 <__aeabi_dadd+0x29c>
 8001a32:	4643      	mov	r3, r8
 8001a34:	430b      	orrs	r3, r1
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dadd+0x582>
 8001a38:	e709      	b.n	800184e <__aeabi_dadd+0x396>
 8001a3a:	4643      	mov	r3, r8
 8001a3c:	4642      	mov	r2, r8
 8001a3e:	08c9      	lsrs	r1, r1, #3
 8001a40:	075b      	lsls	r3, r3, #29
 8001a42:	4655      	mov	r5, sl
 8001a44:	430b      	orrs	r3, r1
 8001a46:	08d0      	lsrs	r0, r2, #3
 8001a48:	e666      	b.n	8001718 <__aeabi_dadd+0x260>
 8001a4a:	1acc      	subs	r4, r1, r3
 8001a4c:	42a1      	cmp	r1, r4
 8001a4e:	4189      	sbcs	r1, r1
 8001a50:	1a3f      	subs	r7, r7, r0
 8001a52:	4249      	negs	r1, r1
 8001a54:	4655      	mov	r5, sl
 8001a56:	2601      	movs	r6, #1
 8001a58:	1a7f      	subs	r7, r7, r1
 8001a5a:	e57e      	b.n	800155a <__aeabi_dadd+0xa2>
 8001a5c:	4642      	mov	r2, r8
 8001a5e:	1a5c      	subs	r4, r3, r1
 8001a60:	1a87      	subs	r7, r0, r2
 8001a62:	42a3      	cmp	r3, r4
 8001a64:	4192      	sbcs	r2, r2
 8001a66:	4252      	negs	r2, r2
 8001a68:	1abf      	subs	r7, r7, r2
 8001a6a:	023a      	lsls	r2, r7, #8
 8001a6c:	d53d      	bpl.n	8001aea <__aeabi_dadd+0x632>
 8001a6e:	1acc      	subs	r4, r1, r3
 8001a70:	42a1      	cmp	r1, r4
 8001a72:	4189      	sbcs	r1, r1
 8001a74:	4643      	mov	r3, r8
 8001a76:	4249      	negs	r1, r1
 8001a78:	1a1f      	subs	r7, r3, r0
 8001a7a:	4655      	mov	r5, sl
 8001a7c:	1a7f      	subs	r7, r7, r1
 8001a7e:	e595      	b.n	80015ac <__aeabi_dadd+0xf4>
 8001a80:	077b      	lsls	r3, r7, #29
 8001a82:	08c9      	lsrs	r1, r1, #3
 8001a84:	430b      	orrs	r3, r1
 8001a86:	08f8      	lsrs	r0, r7, #3
 8001a88:	e643      	b.n	8001712 <__aeabi_dadd+0x25a>
 8001a8a:	4644      	mov	r4, r8
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	430c      	orrs	r4, r1
 8001a90:	d130      	bne.n	8001af4 <__aeabi_dadd+0x63c>
 8001a92:	0742      	lsls	r2, r0, #29
 8001a94:	4313      	orrs	r3, r2
 8001a96:	08c0      	lsrs	r0, r0, #3
 8001a98:	e65c      	b.n	8001754 <__aeabi_dadd+0x29c>
 8001a9a:	077b      	lsls	r3, r7, #29
 8001a9c:	08c9      	lsrs	r1, r1, #3
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	08f8      	lsrs	r0, r7, #3
 8001aa2:	e639      	b.n	8001718 <__aeabi_dadd+0x260>
 8001aa4:	185c      	adds	r4, r3, r1
 8001aa6:	429c      	cmp	r4, r3
 8001aa8:	419b      	sbcs	r3, r3
 8001aaa:	4440      	add	r0, r8
 8001aac:	425b      	negs	r3, r3
 8001aae:	18c7      	adds	r7, r0, r3
 8001ab0:	023b      	lsls	r3, r7, #8
 8001ab2:	d400      	bmi.n	8001ab6 <__aeabi_dadd+0x5fe>
 8001ab4:	e625      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <__aeabi_dadd+0x674>)
 8001ab8:	2601      	movs	r6, #1
 8001aba:	401f      	ands	r7, r3
 8001abc:	e621      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001abe:	0004      	movs	r4, r0
 8001ac0:	3a20      	subs	r2, #32
 8001ac2:	40d4      	lsrs	r4, r2
 8001ac4:	4662      	mov	r2, ip
 8001ac6:	2a20      	cmp	r2, #32
 8001ac8:	d004      	beq.n	8001ad4 <__aeabi_dadd+0x61c>
 8001aca:	2240      	movs	r2, #64	; 0x40
 8001acc:	4666      	mov	r6, ip
 8001ace:	1b92      	subs	r2, r2, r6
 8001ad0:	4090      	lsls	r0, r2
 8001ad2:	4303      	orrs	r3, r0
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	4193      	sbcs	r3, r2
 8001ad8:	431c      	orrs	r4, r3
 8001ada:	e67e      	b.n	80017da <__aeabi_dadd+0x322>
 8001adc:	185c      	adds	r4, r3, r1
 8001ade:	428c      	cmp	r4, r1
 8001ae0:	4189      	sbcs	r1, r1
 8001ae2:	4440      	add	r0, r8
 8001ae4:	4249      	negs	r1, r1
 8001ae6:	1847      	adds	r7, r0, r1
 8001ae8:	e6dd      	b.n	80018a6 <__aeabi_dadd+0x3ee>
 8001aea:	0023      	movs	r3, r4
 8001aec:	433b      	orrs	r3, r7
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dadd+0x63a>
 8001af0:	e6ad      	b.n	800184e <__aeabi_dadd+0x396>
 8001af2:	e606      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001af4:	0744      	lsls	r4, r0, #29
 8001af6:	4323      	orrs	r3, r4
 8001af8:	2480      	movs	r4, #128	; 0x80
 8001afa:	08c0      	lsrs	r0, r0, #3
 8001afc:	0324      	lsls	r4, r4, #12
 8001afe:	4220      	tst	r0, r4
 8001b00:	d008      	beq.n	8001b14 <__aeabi_dadd+0x65c>
 8001b02:	4642      	mov	r2, r8
 8001b04:	08d6      	lsrs	r6, r2, #3
 8001b06:	4226      	tst	r6, r4
 8001b08:	d104      	bne.n	8001b14 <__aeabi_dadd+0x65c>
 8001b0a:	4655      	mov	r5, sl
 8001b0c:	0030      	movs	r0, r6
 8001b0e:	08cb      	lsrs	r3, r1, #3
 8001b10:	0751      	lsls	r1, r2, #29
 8001b12:	430b      	orrs	r3, r1
 8001b14:	0f5a      	lsrs	r2, r3, #29
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	0752      	lsls	r2, r2, #29
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	e619      	b.n	8001754 <__aeabi_dadd+0x29c>
 8001b20:	2300      	movs	r3, #0
 8001b22:	4a01      	ldr	r2, [pc, #4]	; (8001b28 <__aeabi_dadd+0x670>)
 8001b24:	001f      	movs	r7, r3
 8001b26:	e55e      	b.n	80015e6 <__aeabi_dadd+0x12e>
 8001b28:	000007ff 	.word	0x000007ff
 8001b2c:	ff7fffff 	.word	0xff7fffff

08001b30 <__aeabi_ddiv>:
 8001b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b32:	4657      	mov	r7, sl
 8001b34:	464e      	mov	r6, r9
 8001b36:	4645      	mov	r5, r8
 8001b38:	46de      	mov	lr, fp
 8001b3a:	b5e0      	push	{r5, r6, r7, lr}
 8001b3c:	4681      	mov	r9, r0
 8001b3e:	0005      	movs	r5, r0
 8001b40:	030c      	lsls	r4, r1, #12
 8001b42:	0048      	lsls	r0, r1, #1
 8001b44:	4692      	mov	sl, r2
 8001b46:	001f      	movs	r7, r3
 8001b48:	b085      	sub	sp, #20
 8001b4a:	0b24      	lsrs	r4, r4, #12
 8001b4c:	0d40      	lsrs	r0, r0, #21
 8001b4e:	0fce      	lsrs	r6, r1, #31
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d100      	bne.n	8001b56 <__aeabi_ddiv+0x26>
 8001b54:	e156      	b.n	8001e04 <__aeabi_ddiv+0x2d4>
 8001b56:	4bd4      	ldr	r3, [pc, #848]	; (8001ea8 <__aeabi_ddiv+0x378>)
 8001b58:	4298      	cmp	r0, r3
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_ddiv+0x2e>
 8001b5c:	e172      	b.n	8001e44 <__aeabi_ddiv+0x314>
 8001b5e:	0f6b      	lsrs	r3, r5, #29
 8001b60:	00e4      	lsls	r4, r4, #3
 8001b62:	431c      	orrs	r4, r3
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	041b      	lsls	r3, r3, #16
 8001b68:	4323      	orrs	r3, r4
 8001b6a:	4698      	mov	r8, r3
 8001b6c:	4bcf      	ldr	r3, [pc, #828]	; (8001eac <__aeabi_ddiv+0x37c>)
 8001b6e:	00ed      	lsls	r5, r5, #3
 8001b70:	469b      	mov	fp, r3
 8001b72:	2300      	movs	r3, #0
 8001b74:	4699      	mov	r9, r3
 8001b76:	4483      	add	fp, r0
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	033c      	lsls	r4, r7, #12
 8001b7c:	007b      	lsls	r3, r7, #1
 8001b7e:	4650      	mov	r0, sl
 8001b80:	0b24      	lsrs	r4, r4, #12
 8001b82:	0d5b      	lsrs	r3, r3, #21
 8001b84:	0fff      	lsrs	r7, r7, #31
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d100      	bne.n	8001b8c <__aeabi_ddiv+0x5c>
 8001b8a:	e11f      	b.n	8001dcc <__aeabi_ddiv+0x29c>
 8001b8c:	4ac6      	ldr	r2, [pc, #792]	; (8001ea8 <__aeabi_ddiv+0x378>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d100      	bne.n	8001b94 <__aeabi_ddiv+0x64>
 8001b92:	e162      	b.n	8001e5a <__aeabi_ddiv+0x32a>
 8001b94:	49c5      	ldr	r1, [pc, #788]	; (8001eac <__aeabi_ddiv+0x37c>)
 8001b96:	0f42      	lsrs	r2, r0, #29
 8001b98:	468c      	mov	ip, r1
 8001b9a:	00e4      	lsls	r4, r4, #3
 8001b9c:	4659      	mov	r1, fp
 8001b9e:	4314      	orrs	r4, r2
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	4463      	add	r3, ip
 8001ba4:	0412      	lsls	r2, r2, #16
 8001ba6:	1acb      	subs	r3, r1, r3
 8001ba8:	4314      	orrs	r4, r2
 8001baa:	469b      	mov	fp, r3
 8001bac:	00c2      	lsls	r2, r0, #3
 8001bae:	2000      	movs	r0, #0
 8001bb0:	0033      	movs	r3, r6
 8001bb2:	407b      	eors	r3, r7
 8001bb4:	469a      	mov	sl, r3
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d827      	bhi.n	8001c0c <__aeabi_ddiv+0xdc>
 8001bbc:	49bc      	ldr	r1, [pc, #752]	; (8001eb0 <__aeabi_ddiv+0x380>)
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	58cb      	ldr	r3, [r1, r3]
 8001bc2:	469f      	mov	pc, r3
 8001bc4:	46b2      	mov	sl, r6
 8001bc6:	9b00      	ldr	r3, [sp, #0]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d016      	beq.n	8001bfa <__aeabi_ddiv+0xca>
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_ddiv+0xa2>
 8001bd0:	e28e      	b.n	80020f0 <__aeabi_ddiv+0x5c0>
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d000      	beq.n	8001bd8 <__aeabi_ddiv+0xa8>
 8001bd6:	e0d9      	b.n	8001d8c <__aeabi_ddiv+0x25c>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2400      	movs	r4, #0
 8001bdc:	2500      	movs	r5, #0
 8001bde:	4652      	mov	r2, sl
 8001be0:	051b      	lsls	r3, r3, #20
 8001be2:	4323      	orrs	r3, r4
 8001be4:	07d2      	lsls	r2, r2, #31
 8001be6:	4313      	orrs	r3, r2
 8001be8:	0028      	movs	r0, r5
 8001bea:	0019      	movs	r1, r3
 8001bec:	b005      	add	sp, #20
 8001bee:	bcf0      	pop	{r4, r5, r6, r7}
 8001bf0:	46bb      	mov	fp, r7
 8001bf2:	46b2      	mov	sl, r6
 8001bf4:	46a9      	mov	r9, r5
 8001bf6:	46a0      	mov	r8, r4
 8001bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfa:	2400      	movs	r4, #0
 8001bfc:	2500      	movs	r5, #0
 8001bfe:	4baa      	ldr	r3, [pc, #680]	; (8001ea8 <__aeabi_ddiv+0x378>)
 8001c00:	e7ed      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001c02:	46ba      	mov	sl, r7
 8001c04:	46a0      	mov	r8, r4
 8001c06:	0015      	movs	r5, r2
 8001c08:	9000      	str	r0, [sp, #0]
 8001c0a:	e7dc      	b.n	8001bc6 <__aeabi_ddiv+0x96>
 8001c0c:	4544      	cmp	r4, r8
 8001c0e:	d200      	bcs.n	8001c12 <__aeabi_ddiv+0xe2>
 8001c10:	e1c7      	b.n	8001fa2 <__aeabi_ddiv+0x472>
 8001c12:	d100      	bne.n	8001c16 <__aeabi_ddiv+0xe6>
 8001c14:	e1c2      	b.n	8001f9c <__aeabi_ddiv+0x46c>
 8001c16:	2301      	movs	r3, #1
 8001c18:	425b      	negs	r3, r3
 8001c1a:	469c      	mov	ip, r3
 8001c1c:	002e      	movs	r6, r5
 8001c1e:	4640      	mov	r0, r8
 8001c20:	2500      	movs	r5, #0
 8001c22:	44e3      	add	fp, ip
 8001c24:	0223      	lsls	r3, r4, #8
 8001c26:	0e14      	lsrs	r4, r2, #24
 8001c28:	431c      	orrs	r4, r3
 8001c2a:	0c1b      	lsrs	r3, r3, #16
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	0423      	lsls	r3, r4, #16
 8001c30:	0c1f      	lsrs	r7, r3, #16
 8001c32:	0212      	lsls	r2, r2, #8
 8001c34:	4649      	mov	r1, r9
 8001c36:	9200      	str	r2, [sp, #0]
 8001c38:	9701      	str	r7, [sp, #4]
 8001c3a:	f7fe fb07 	bl	800024c <__aeabi_uidivmod>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	437a      	muls	r2, r7
 8001c42:	040b      	lsls	r3, r1, #16
 8001c44:	0c31      	lsrs	r1, r6, #16
 8001c46:	4680      	mov	r8, r0
 8001c48:	4319      	orrs	r1, r3
 8001c4a:	428a      	cmp	r2, r1
 8001c4c:	d907      	bls.n	8001c5e <__aeabi_ddiv+0x12e>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	425b      	negs	r3, r3
 8001c52:	469c      	mov	ip, r3
 8001c54:	1909      	adds	r1, r1, r4
 8001c56:	44e0      	add	r8, ip
 8001c58:	428c      	cmp	r4, r1
 8001c5a:	d800      	bhi.n	8001c5e <__aeabi_ddiv+0x12e>
 8001c5c:	e207      	b.n	800206e <__aeabi_ddiv+0x53e>
 8001c5e:	1a88      	subs	r0, r1, r2
 8001c60:	4649      	mov	r1, r9
 8001c62:	f7fe faf3 	bl	800024c <__aeabi_uidivmod>
 8001c66:	0409      	lsls	r1, r1, #16
 8001c68:	468c      	mov	ip, r1
 8001c6a:	0431      	lsls	r1, r6, #16
 8001c6c:	4666      	mov	r6, ip
 8001c6e:	9a01      	ldr	r2, [sp, #4]
 8001c70:	0c09      	lsrs	r1, r1, #16
 8001c72:	4342      	muls	r2, r0
 8001c74:	0003      	movs	r3, r0
 8001c76:	4331      	orrs	r1, r6
 8001c78:	428a      	cmp	r2, r1
 8001c7a:	d904      	bls.n	8001c86 <__aeabi_ddiv+0x156>
 8001c7c:	1909      	adds	r1, r1, r4
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	428c      	cmp	r4, r1
 8001c82:	d800      	bhi.n	8001c86 <__aeabi_ddiv+0x156>
 8001c84:	e1ed      	b.n	8002062 <__aeabi_ddiv+0x532>
 8001c86:	1a88      	subs	r0, r1, r2
 8001c88:	4642      	mov	r2, r8
 8001c8a:	0412      	lsls	r2, r2, #16
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	4690      	mov	r8, r2
 8001c90:	4641      	mov	r1, r8
 8001c92:	9b00      	ldr	r3, [sp, #0]
 8001c94:	040e      	lsls	r6, r1, #16
 8001c96:	0c1b      	lsrs	r3, r3, #16
 8001c98:	001f      	movs	r7, r3
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	9b00      	ldr	r3, [sp, #0]
 8001c9e:	0c36      	lsrs	r6, r6, #16
 8001ca0:	041b      	lsls	r3, r3, #16
 8001ca2:	0c19      	lsrs	r1, r3, #16
 8001ca4:	000b      	movs	r3, r1
 8001ca6:	4373      	muls	r3, r6
 8001ca8:	0c12      	lsrs	r2, r2, #16
 8001caa:	437e      	muls	r6, r7
 8001cac:	9103      	str	r1, [sp, #12]
 8001cae:	4351      	muls	r1, r2
 8001cb0:	437a      	muls	r2, r7
 8001cb2:	0c1f      	lsrs	r7, r3, #16
 8001cb4:	46bc      	mov	ip, r7
 8001cb6:	1876      	adds	r6, r6, r1
 8001cb8:	4466      	add	r6, ip
 8001cba:	42b1      	cmp	r1, r6
 8001cbc:	d903      	bls.n	8001cc6 <__aeabi_ddiv+0x196>
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	0249      	lsls	r1, r1, #9
 8001cc2:	468c      	mov	ip, r1
 8001cc4:	4462      	add	r2, ip
 8001cc6:	0c31      	lsrs	r1, r6, #16
 8001cc8:	188a      	adds	r2, r1, r2
 8001cca:	0431      	lsls	r1, r6, #16
 8001ccc:	041e      	lsls	r6, r3, #16
 8001cce:	0c36      	lsrs	r6, r6, #16
 8001cd0:	198e      	adds	r6, r1, r6
 8001cd2:	4290      	cmp	r0, r2
 8001cd4:	d302      	bcc.n	8001cdc <__aeabi_ddiv+0x1ac>
 8001cd6:	d112      	bne.n	8001cfe <__aeabi_ddiv+0x1ce>
 8001cd8:	42b5      	cmp	r5, r6
 8001cda:	d210      	bcs.n	8001cfe <__aeabi_ddiv+0x1ce>
 8001cdc:	4643      	mov	r3, r8
 8001cde:	1e59      	subs	r1, r3, #1
 8001ce0:	9b00      	ldr	r3, [sp, #0]
 8001ce2:	469c      	mov	ip, r3
 8001ce4:	4465      	add	r5, ip
 8001ce6:	001f      	movs	r7, r3
 8001ce8:	429d      	cmp	r5, r3
 8001cea:	419b      	sbcs	r3, r3
 8001cec:	425b      	negs	r3, r3
 8001cee:	191b      	adds	r3, r3, r4
 8001cf0:	18c0      	adds	r0, r0, r3
 8001cf2:	4284      	cmp	r4, r0
 8001cf4:	d200      	bcs.n	8001cf8 <__aeabi_ddiv+0x1c8>
 8001cf6:	e1a0      	b.n	800203a <__aeabi_ddiv+0x50a>
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_ddiv+0x1cc>
 8001cfa:	e19b      	b.n	8002034 <__aeabi_ddiv+0x504>
 8001cfc:	4688      	mov	r8, r1
 8001cfe:	1bae      	subs	r6, r5, r6
 8001d00:	42b5      	cmp	r5, r6
 8001d02:	41ad      	sbcs	r5, r5
 8001d04:	1a80      	subs	r0, r0, r2
 8001d06:	426d      	negs	r5, r5
 8001d08:	1b40      	subs	r0, r0, r5
 8001d0a:	4284      	cmp	r4, r0
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_ddiv+0x1e0>
 8001d0e:	e1d5      	b.n	80020bc <__aeabi_ddiv+0x58c>
 8001d10:	4649      	mov	r1, r9
 8001d12:	f7fe fa9b 	bl	800024c <__aeabi_uidivmod>
 8001d16:	9a01      	ldr	r2, [sp, #4]
 8001d18:	040b      	lsls	r3, r1, #16
 8001d1a:	4342      	muls	r2, r0
 8001d1c:	0c31      	lsrs	r1, r6, #16
 8001d1e:	0005      	movs	r5, r0
 8001d20:	4319      	orrs	r1, r3
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d900      	bls.n	8001d28 <__aeabi_ddiv+0x1f8>
 8001d26:	e16c      	b.n	8002002 <__aeabi_ddiv+0x4d2>
 8001d28:	1a88      	subs	r0, r1, r2
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	f7fe fa8e 	bl	800024c <__aeabi_uidivmod>
 8001d30:	9a01      	ldr	r2, [sp, #4]
 8001d32:	0436      	lsls	r6, r6, #16
 8001d34:	4342      	muls	r2, r0
 8001d36:	0409      	lsls	r1, r1, #16
 8001d38:	0c36      	lsrs	r6, r6, #16
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	430e      	orrs	r6, r1
 8001d3e:	42b2      	cmp	r2, r6
 8001d40:	d900      	bls.n	8001d44 <__aeabi_ddiv+0x214>
 8001d42:	e153      	b.n	8001fec <__aeabi_ddiv+0x4bc>
 8001d44:	9803      	ldr	r0, [sp, #12]
 8001d46:	1ab6      	subs	r6, r6, r2
 8001d48:	0002      	movs	r2, r0
 8001d4a:	042d      	lsls	r5, r5, #16
 8001d4c:	431d      	orrs	r5, r3
 8001d4e:	9f02      	ldr	r7, [sp, #8]
 8001d50:	042b      	lsls	r3, r5, #16
 8001d52:	0c1b      	lsrs	r3, r3, #16
 8001d54:	435a      	muls	r2, r3
 8001d56:	437b      	muls	r3, r7
 8001d58:	469c      	mov	ip, r3
 8001d5a:	0c29      	lsrs	r1, r5, #16
 8001d5c:	4348      	muls	r0, r1
 8001d5e:	0c13      	lsrs	r3, r2, #16
 8001d60:	4484      	add	ip, r0
 8001d62:	4463      	add	r3, ip
 8001d64:	4379      	muls	r1, r7
 8001d66:	4298      	cmp	r0, r3
 8001d68:	d903      	bls.n	8001d72 <__aeabi_ddiv+0x242>
 8001d6a:	2080      	movs	r0, #128	; 0x80
 8001d6c:	0240      	lsls	r0, r0, #9
 8001d6e:	4684      	mov	ip, r0
 8001d70:	4461      	add	r1, ip
 8001d72:	0c18      	lsrs	r0, r3, #16
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	041b      	lsls	r3, r3, #16
 8001d78:	0c12      	lsrs	r2, r2, #16
 8001d7a:	1841      	adds	r1, r0, r1
 8001d7c:	189b      	adds	r3, r3, r2
 8001d7e:	428e      	cmp	r6, r1
 8001d80:	d200      	bcs.n	8001d84 <__aeabi_ddiv+0x254>
 8001d82:	e0ff      	b.n	8001f84 <__aeabi_ddiv+0x454>
 8001d84:	d100      	bne.n	8001d88 <__aeabi_ddiv+0x258>
 8001d86:	e0fa      	b.n	8001f7e <__aeabi_ddiv+0x44e>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	431d      	orrs	r5, r3
 8001d8c:	4a49      	ldr	r2, [pc, #292]	; (8001eb4 <__aeabi_ddiv+0x384>)
 8001d8e:	445a      	add	r2, fp
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	dc00      	bgt.n	8001d96 <__aeabi_ddiv+0x266>
 8001d94:	e0aa      	b.n	8001eec <__aeabi_ddiv+0x3bc>
 8001d96:	076b      	lsls	r3, r5, #29
 8001d98:	d000      	beq.n	8001d9c <__aeabi_ddiv+0x26c>
 8001d9a:	e13d      	b.n	8002018 <__aeabi_ddiv+0x4e8>
 8001d9c:	08ed      	lsrs	r5, r5, #3
 8001d9e:	4643      	mov	r3, r8
 8001da0:	01db      	lsls	r3, r3, #7
 8001da2:	d506      	bpl.n	8001db2 <__aeabi_ddiv+0x282>
 8001da4:	4642      	mov	r2, r8
 8001da6:	4b44      	ldr	r3, [pc, #272]	; (8001eb8 <__aeabi_ddiv+0x388>)
 8001da8:	401a      	ands	r2, r3
 8001daa:	4690      	mov	r8, r2
 8001dac:	2280      	movs	r2, #128	; 0x80
 8001dae:	00d2      	lsls	r2, r2, #3
 8001db0:	445a      	add	r2, fp
 8001db2:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <__aeabi_ddiv+0x38c>)
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dd00      	ble.n	8001dba <__aeabi_ddiv+0x28a>
 8001db8:	e71f      	b.n	8001bfa <__aeabi_ddiv+0xca>
 8001dba:	4643      	mov	r3, r8
 8001dbc:	075b      	lsls	r3, r3, #29
 8001dbe:	431d      	orrs	r5, r3
 8001dc0:	4643      	mov	r3, r8
 8001dc2:	0552      	lsls	r2, r2, #21
 8001dc4:	025c      	lsls	r4, r3, #9
 8001dc6:	0b24      	lsrs	r4, r4, #12
 8001dc8:	0d53      	lsrs	r3, r2, #21
 8001dca:	e708      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001dcc:	4652      	mov	r2, sl
 8001dce:	4322      	orrs	r2, r4
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_ddiv+0x2a4>
 8001dd2:	e07b      	b.n	8001ecc <__aeabi_ddiv+0x39c>
 8001dd4:	2c00      	cmp	r4, #0
 8001dd6:	d100      	bne.n	8001dda <__aeabi_ddiv+0x2aa>
 8001dd8:	e0fa      	b.n	8001fd0 <__aeabi_ddiv+0x4a0>
 8001dda:	0020      	movs	r0, r4
 8001ddc:	f001 fa22 	bl	8003224 <__clzsi2>
 8001de0:	0002      	movs	r2, r0
 8001de2:	3a0b      	subs	r2, #11
 8001de4:	231d      	movs	r3, #29
 8001de6:	0001      	movs	r1, r0
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	4652      	mov	r2, sl
 8001dec:	3908      	subs	r1, #8
 8001dee:	40da      	lsrs	r2, r3
 8001df0:	408c      	lsls	r4, r1
 8001df2:	4314      	orrs	r4, r2
 8001df4:	4652      	mov	r2, sl
 8001df6:	408a      	lsls	r2, r1
 8001df8:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <__aeabi_ddiv+0x390>)
 8001dfa:	4458      	add	r0, fp
 8001dfc:	469b      	mov	fp, r3
 8001dfe:	4483      	add	fp, r0
 8001e00:	2000      	movs	r0, #0
 8001e02:	e6d5      	b.n	8001bb0 <__aeabi_ddiv+0x80>
 8001e04:	464b      	mov	r3, r9
 8001e06:	4323      	orrs	r3, r4
 8001e08:	4698      	mov	r8, r3
 8001e0a:	d044      	beq.n	8001e96 <__aeabi_ddiv+0x366>
 8001e0c:	2c00      	cmp	r4, #0
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_ddiv+0x2e2>
 8001e10:	e0ce      	b.n	8001fb0 <__aeabi_ddiv+0x480>
 8001e12:	0020      	movs	r0, r4
 8001e14:	f001 fa06 	bl	8003224 <__clzsi2>
 8001e18:	0001      	movs	r1, r0
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	390b      	subs	r1, #11
 8001e1e:	231d      	movs	r3, #29
 8001e20:	1a5b      	subs	r3, r3, r1
 8001e22:	4649      	mov	r1, r9
 8001e24:	0010      	movs	r0, r2
 8001e26:	40d9      	lsrs	r1, r3
 8001e28:	3808      	subs	r0, #8
 8001e2a:	4084      	lsls	r4, r0
 8001e2c:	000b      	movs	r3, r1
 8001e2e:	464d      	mov	r5, r9
 8001e30:	4323      	orrs	r3, r4
 8001e32:	4698      	mov	r8, r3
 8001e34:	4085      	lsls	r5, r0
 8001e36:	4823      	ldr	r0, [pc, #140]	; (8001ec4 <__aeabi_ddiv+0x394>)
 8001e38:	1a83      	subs	r3, r0, r2
 8001e3a:	469b      	mov	fp, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	4699      	mov	r9, r3
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	e69a      	b.n	8001b7a <__aeabi_ddiv+0x4a>
 8001e44:	464b      	mov	r3, r9
 8001e46:	4323      	orrs	r3, r4
 8001e48:	4698      	mov	r8, r3
 8001e4a:	d11d      	bne.n	8001e88 <__aeabi_ddiv+0x358>
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	4699      	mov	r9, r3
 8001e50:	3b06      	subs	r3, #6
 8001e52:	2500      	movs	r5, #0
 8001e54:	4683      	mov	fp, r0
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	e68f      	b.n	8001b7a <__aeabi_ddiv+0x4a>
 8001e5a:	4652      	mov	r2, sl
 8001e5c:	4322      	orrs	r2, r4
 8001e5e:	d109      	bne.n	8001e74 <__aeabi_ddiv+0x344>
 8001e60:	2302      	movs	r3, #2
 8001e62:	4649      	mov	r1, r9
 8001e64:	4319      	orrs	r1, r3
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <__aeabi_ddiv+0x398>)
 8001e68:	4689      	mov	r9, r1
 8001e6a:	469c      	mov	ip, r3
 8001e6c:	2400      	movs	r4, #0
 8001e6e:	2002      	movs	r0, #2
 8001e70:	44e3      	add	fp, ip
 8001e72:	e69d      	b.n	8001bb0 <__aeabi_ddiv+0x80>
 8001e74:	2303      	movs	r3, #3
 8001e76:	464a      	mov	r2, r9
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <__aeabi_ddiv+0x398>)
 8001e7c:	4691      	mov	r9, r2
 8001e7e:	469c      	mov	ip, r3
 8001e80:	4652      	mov	r2, sl
 8001e82:	2003      	movs	r0, #3
 8001e84:	44e3      	add	fp, ip
 8001e86:	e693      	b.n	8001bb0 <__aeabi_ddiv+0x80>
 8001e88:	230c      	movs	r3, #12
 8001e8a:	4699      	mov	r9, r3
 8001e8c:	3b09      	subs	r3, #9
 8001e8e:	46a0      	mov	r8, r4
 8001e90:	4683      	mov	fp, r0
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	e671      	b.n	8001b7a <__aeabi_ddiv+0x4a>
 8001e96:	2304      	movs	r3, #4
 8001e98:	4699      	mov	r9, r3
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	469b      	mov	fp, r3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	2500      	movs	r5, #0
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	e669      	b.n	8001b7a <__aeabi_ddiv+0x4a>
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	000007ff 	.word	0x000007ff
 8001eac:	fffffc01 	.word	0xfffffc01
 8001eb0:	0800e870 	.word	0x0800e870
 8001eb4:	000003ff 	.word	0x000003ff
 8001eb8:	feffffff 	.word	0xfeffffff
 8001ebc:	000007fe 	.word	0x000007fe
 8001ec0:	000003f3 	.word	0x000003f3
 8001ec4:	fffffc0d 	.word	0xfffffc0d
 8001ec8:	fffff801 	.word	0xfffff801
 8001ecc:	4649      	mov	r1, r9
 8001ece:	2301      	movs	r3, #1
 8001ed0:	4319      	orrs	r1, r3
 8001ed2:	4689      	mov	r9, r1
 8001ed4:	2400      	movs	r4, #0
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	e66a      	b.n	8001bb0 <__aeabi_ddiv+0x80>
 8001eda:	2300      	movs	r3, #0
 8001edc:	2480      	movs	r4, #128	; 0x80
 8001ede:	469a      	mov	sl, r3
 8001ee0:	2500      	movs	r5, #0
 8001ee2:	4b8a      	ldr	r3, [pc, #552]	; (800210c <__aeabi_ddiv+0x5dc>)
 8001ee4:	0324      	lsls	r4, r4, #12
 8001ee6:	e67a      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001ee8:	2501      	movs	r5, #1
 8001eea:	426d      	negs	r5, r5
 8001eec:	2301      	movs	r3, #1
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	2b38      	cmp	r3, #56	; 0x38
 8001ef2:	dd00      	ble.n	8001ef6 <__aeabi_ddiv+0x3c6>
 8001ef4:	e670      	b.n	8001bd8 <__aeabi_ddiv+0xa8>
 8001ef6:	2b1f      	cmp	r3, #31
 8001ef8:	dc00      	bgt.n	8001efc <__aeabi_ddiv+0x3cc>
 8001efa:	e0bf      	b.n	800207c <__aeabi_ddiv+0x54c>
 8001efc:	211f      	movs	r1, #31
 8001efe:	4249      	negs	r1, r1
 8001f00:	1a8a      	subs	r2, r1, r2
 8001f02:	4641      	mov	r1, r8
 8001f04:	40d1      	lsrs	r1, r2
 8001f06:	000a      	movs	r2, r1
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d004      	beq.n	8001f16 <__aeabi_ddiv+0x3e6>
 8001f0c:	4641      	mov	r1, r8
 8001f0e:	4b80      	ldr	r3, [pc, #512]	; (8002110 <__aeabi_ddiv+0x5e0>)
 8001f10:	445b      	add	r3, fp
 8001f12:	4099      	lsls	r1, r3
 8001f14:	430d      	orrs	r5, r1
 8001f16:	1e6b      	subs	r3, r5, #1
 8001f18:	419d      	sbcs	r5, r3
 8001f1a:	2307      	movs	r3, #7
 8001f1c:	432a      	orrs	r2, r5
 8001f1e:	001d      	movs	r5, r3
 8001f20:	2400      	movs	r4, #0
 8001f22:	4015      	ands	r5, r2
 8001f24:	4213      	tst	r3, r2
 8001f26:	d100      	bne.n	8001f2a <__aeabi_ddiv+0x3fa>
 8001f28:	e0d4      	b.n	80020d4 <__aeabi_ddiv+0x5a4>
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	4011      	ands	r1, r2
 8001f30:	2904      	cmp	r1, #4
 8001f32:	d100      	bne.n	8001f36 <__aeabi_ddiv+0x406>
 8001f34:	e0cb      	b.n	80020ce <__aeabi_ddiv+0x59e>
 8001f36:	1d11      	adds	r1, r2, #4
 8001f38:	4291      	cmp	r1, r2
 8001f3a:	4192      	sbcs	r2, r2
 8001f3c:	4252      	negs	r2, r2
 8001f3e:	189b      	adds	r3, r3, r2
 8001f40:	000a      	movs	r2, r1
 8001f42:	0219      	lsls	r1, r3, #8
 8001f44:	d400      	bmi.n	8001f48 <__aeabi_ddiv+0x418>
 8001f46:	e0c2      	b.n	80020ce <__aeabi_ddiv+0x59e>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	2400      	movs	r4, #0
 8001f4c:	2500      	movs	r5, #0
 8001f4e:	e646      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	4641      	mov	r1, r8
 8001f54:	031b      	lsls	r3, r3, #12
 8001f56:	4219      	tst	r1, r3
 8001f58:	d008      	beq.n	8001f6c <__aeabi_ddiv+0x43c>
 8001f5a:	421c      	tst	r4, r3
 8001f5c:	d106      	bne.n	8001f6c <__aeabi_ddiv+0x43c>
 8001f5e:	431c      	orrs	r4, r3
 8001f60:	0324      	lsls	r4, r4, #12
 8001f62:	46ba      	mov	sl, r7
 8001f64:	0015      	movs	r5, r2
 8001f66:	4b69      	ldr	r3, [pc, #420]	; (800210c <__aeabi_ddiv+0x5dc>)
 8001f68:	0b24      	lsrs	r4, r4, #12
 8001f6a:	e638      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001f6c:	2480      	movs	r4, #128	; 0x80
 8001f6e:	4643      	mov	r3, r8
 8001f70:	0324      	lsls	r4, r4, #12
 8001f72:	431c      	orrs	r4, r3
 8001f74:	0324      	lsls	r4, r4, #12
 8001f76:	46b2      	mov	sl, r6
 8001f78:	4b64      	ldr	r3, [pc, #400]	; (800210c <__aeabi_ddiv+0x5dc>)
 8001f7a:	0b24      	lsrs	r4, r4, #12
 8001f7c:	e62f      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d100      	bne.n	8001f84 <__aeabi_ddiv+0x454>
 8001f82:	e703      	b.n	8001d8c <__aeabi_ddiv+0x25c>
 8001f84:	19a6      	adds	r6, r4, r6
 8001f86:	1e68      	subs	r0, r5, #1
 8001f88:	42a6      	cmp	r6, r4
 8001f8a:	d200      	bcs.n	8001f8e <__aeabi_ddiv+0x45e>
 8001f8c:	e08d      	b.n	80020aa <__aeabi_ddiv+0x57a>
 8001f8e:	428e      	cmp	r6, r1
 8001f90:	d200      	bcs.n	8001f94 <__aeabi_ddiv+0x464>
 8001f92:	e0a3      	b.n	80020dc <__aeabi_ddiv+0x5ac>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x468>
 8001f96:	e0b3      	b.n	8002100 <__aeabi_ddiv+0x5d0>
 8001f98:	0005      	movs	r5, r0
 8001f9a:	e6f5      	b.n	8001d88 <__aeabi_ddiv+0x258>
 8001f9c:	42aa      	cmp	r2, r5
 8001f9e:	d900      	bls.n	8001fa2 <__aeabi_ddiv+0x472>
 8001fa0:	e639      	b.n	8001c16 <__aeabi_ddiv+0xe6>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	07de      	lsls	r6, r3, #31
 8001fa6:	0858      	lsrs	r0, r3, #1
 8001fa8:	086b      	lsrs	r3, r5, #1
 8001faa:	431e      	orrs	r6, r3
 8001fac:	07ed      	lsls	r5, r5, #31
 8001fae:	e639      	b.n	8001c24 <__aeabi_ddiv+0xf4>
 8001fb0:	4648      	mov	r0, r9
 8001fb2:	f001 f937 	bl	8003224 <__clzsi2>
 8001fb6:	0001      	movs	r1, r0
 8001fb8:	0002      	movs	r2, r0
 8001fba:	3115      	adds	r1, #21
 8001fbc:	3220      	adds	r2, #32
 8001fbe:	291c      	cmp	r1, #28
 8001fc0:	dc00      	bgt.n	8001fc4 <__aeabi_ddiv+0x494>
 8001fc2:	e72c      	b.n	8001e1e <__aeabi_ddiv+0x2ee>
 8001fc4:	464b      	mov	r3, r9
 8001fc6:	3808      	subs	r0, #8
 8001fc8:	4083      	lsls	r3, r0
 8001fca:	2500      	movs	r5, #0
 8001fcc:	4698      	mov	r8, r3
 8001fce:	e732      	b.n	8001e36 <__aeabi_ddiv+0x306>
 8001fd0:	f001 f928 	bl	8003224 <__clzsi2>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	001a      	movs	r2, r3
 8001fd8:	3215      	adds	r2, #21
 8001fda:	3020      	adds	r0, #32
 8001fdc:	2a1c      	cmp	r2, #28
 8001fde:	dc00      	bgt.n	8001fe2 <__aeabi_ddiv+0x4b2>
 8001fe0:	e700      	b.n	8001de4 <__aeabi_ddiv+0x2b4>
 8001fe2:	4654      	mov	r4, sl
 8001fe4:	3b08      	subs	r3, #8
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	409c      	lsls	r4, r3
 8001fea:	e705      	b.n	8001df8 <__aeabi_ddiv+0x2c8>
 8001fec:	1936      	adds	r6, r6, r4
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	42b4      	cmp	r4, r6
 8001ff2:	d900      	bls.n	8001ff6 <__aeabi_ddiv+0x4c6>
 8001ff4:	e6a6      	b.n	8001d44 <__aeabi_ddiv+0x214>
 8001ff6:	42b2      	cmp	r2, r6
 8001ff8:	d800      	bhi.n	8001ffc <__aeabi_ddiv+0x4cc>
 8001ffa:	e6a3      	b.n	8001d44 <__aeabi_ddiv+0x214>
 8001ffc:	1e83      	subs	r3, r0, #2
 8001ffe:	1936      	adds	r6, r6, r4
 8002000:	e6a0      	b.n	8001d44 <__aeabi_ddiv+0x214>
 8002002:	1909      	adds	r1, r1, r4
 8002004:	3d01      	subs	r5, #1
 8002006:	428c      	cmp	r4, r1
 8002008:	d900      	bls.n	800200c <__aeabi_ddiv+0x4dc>
 800200a:	e68d      	b.n	8001d28 <__aeabi_ddiv+0x1f8>
 800200c:	428a      	cmp	r2, r1
 800200e:	d800      	bhi.n	8002012 <__aeabi_ddiv+0x4e2>
 8002010:	e68a      	b.n	8001d28 <__aeabi_ddiv+0x1f8>
 8002012:	1e85      	subs	r5, r0, #2
 8002014:	1909      	adds	r1, r1, r4
 8002016:	e687      	b.n	8001d28 <__aeabi_ddiv+0x1f8>
 8002018:	230f      	movs	r3, #15
 800201a:	402b      	ands	r3, r5
 800201c:	2b04      	cmp	r3, #4
 800201e:	d100      	bne.n	8002022 <__aeabi_ddiv+0x4f2>
 8002020:	e6bc      	b.n	8001d9c <__aeabi_ddiv+0x26c>
 8002022:	2305      	movs	r3, #5
 8002024:	425b      	negs	r3, r3
 8002026:	42ab      	cmp	r3, r5
 8002028:	419b      	sbcs	r3, r3
 800202a:	3504      	adds	r5, #4
 800202c:	425b      	negs	r3, r3
 800202e:	08ed      	lsrs	r5, r5, #3
 8002030:	4498      	add	r8, r3
 8002032:	e6b4      	b.n	8001d9e <__aeabi_ddiv+0x26e>
 8002034:	42af      	cmp	r7, r5
 8002036:	d900      	bls.n	800203a <__aeabi_ddiv+0x50a>
 8002038:	e660      	b.n	8001cfc <__aeabi_ddiv+0x1cc>
 800203a:	4282      	cmp	r2, r0
 800203c:	d804      	bhi.n	8002048 <__aeabi_ddiv+0x518>
 800203e:	d000      	beq.n	8002042 <__aeabi_ddiv+0x512>
 8002040:	e65c      	b.n	8001cfc <__aeabi_ddiv+0x1cc>
 8002042:	42ae      	cmp	r6, r5
 8002044:	d800      	bhi.n	8002048 <__aeabi_ddiv+0x518>
 8002046:	e659      	b.n	8001cfc <__aeabi_ddiv+0x1cc>
 8002048:	2302      	movs	r3, #2
 800204a:	425b      	negs	r3, r3
 800204c:	469c      	mov	ip, r3
 800204e:	9b00      	ldr	r3, [sp, #0]
 8002050:	44e0      	add	r8, ip
 8002052:	469c      	mov	ip, r3
 8002054:	4465      	add	r5, ip
 8002056:	429d      	cmp	r5, r3
 8002058:	419b      	sbcs	r3, r3
 800205a:	425b      	negs	r3, r3
 800205c:	191b      	adds	r3, r3, r4
 800205e:	18c0      	adds	r0, r0, r3
 8002060:	e64d      	b.n	8001cfe <__aeabi_ddiv+0x1ce>
 8002062:	428a      	cmp	r2, r1
 8002064:	d800      	bhi.n	8002068 <__aeabi_ddiv+0x538>
 8002066:	e60e      	b.n	8001c86 <__aeabi_ddiv+0x156>
 8002068:	1e83      	subs	r3, r0, #2
 800206a:	1909      	adds	r1, r1, r4
 800206c:	e60b      	b.n	8001c86 <__aeabi_ddiv+0x156>
 800206e:	428a      	cmp	r2, r1
 8002070:	d800      	bhi.n	8002074 <__aeabi_ddiv+0x544>
 8002072:	e5f4      	b.n	8001c5e <__aeabi_ddiv+0x12e>
 8002074:	1e83      	subs	r3, r0, #2
 8002076:	4698      	mov	r8, r3
 8002078:	1909      	adds	r1, r1, r4
 800207a:	e5f0      	b.n	8001c5e <__aeabi_ddiv+0x12e>
 800207c:	4925      	ldr	r1, [pc, #148]	; (8002114 <__aeabi_ddiv+0x5e4>)
 800207e:	0028      	movs	r0, r5
 8002080:	4459      	add	r1, fp
 8002082:	408d      	lsls	r5, r1
 8002084:	4642      	mov	r2, r8
 8002086:	408a      	lsls	r2, r1
 8002088:	1e69      	subs	r1, r5, #1
 800208a:	418d      	sbcs	r5, r1
 800208c:	4641      	mov	r1, r8
 800208e:	40d8      	lsrs	r0, r3
 8002090:	40d9      	lsrs	r1, r3
 8002092:	4302      	orrs	r2, r0
 8002094:	432a      	orrs	r2, r5
 8002096:	000b      	movs	r3, r1
 8002098:	0751      	lsls	r1, r2, #29
 800209a:	d100      	bne.n	800209e <__aeabi_ddiv+0x56e>
 800209c:	e751      	b.n	8001f42 <__aeabi_ddiv+0x412>
 800209e:	210f      	movs	r1, #15
 80020a0:	4011      	ands	r1, r2
 80020a2:	2904      	cmp	r1, #4
 80020a4:	d000      	beq.n	80020a8 <__aeabi_ddiv+0x578>
 80020a6:	e746      	b.n	8001f36 <__aeabi_ddiv+0x406>
 80020a8:	e74b      	b.n	8001f42 <__aeabi_ddiv+0x412>
 80020aa:	0005      	movs	r5, r0
 80020ac:	428e      	cmp	r6, r1
 80020ae:	d000      	beq.n	80020b2 <__aeabi_ddiv+0x582>
 80020b0:	e66a      	b.n	8001d88 <__aeabi_ddiv+0x258>
 80020b2:	9a00      	ldr	r2, [sp, #0]
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d000      	beq.n	80020ba <__aeabi_ddiv+0x58a>
 80020b8:	e666      	b.n	8001d88 <__aeabi_ddiv+0x258>
 80020ba:	e667      	b.n	8001d8c <__aeabi_ddiv+0x25c>
 80020bc:	4a16      	ldr	r2, [pc, #88]	; (8002118 <__aeabi_ddiv+0x5e8>)
 80020be:	445a      	add	r2, fp
 80020c0:	2a00      	cmp	r2, #0
 80020c2:	dc00      	bgt.n	80020c6 <__aeabi_ddiv+0x596>
 80020c4:	e710      	b.n	8001ee8 <__aeabi_ddiv+0x3b8>
 80020c6:	2301      	movs	r3, #1
 80020c8:	2500      	movs	r5, #0
 80020ca:	4498      	add	r8, r3
 80020cc:	e667      	b.n	8001d9e <__aeabi_ddiv+0x26e>
 80020ce:	075d      	lsls	r5, r3, #29
 80020d0:	025b      	lsls	r3, r3, #9
 80020d2:	0b1c      	lsrs	r4, r3, #12
 80020d4:	08d2      	lsrs	r2, r2, #3
 80020d6:	2300      	movs	r3, #0
 80020d8:	4315      	orrs	r5, r2
 80020da:	e580      	b.n	8001bde <__aeabi_ddiv+0xae>
 80020dc:	9800      	ldr	r0, [sp, #0]
 80020de:	3d02      	subs	r5, #2
 80020e0:	0042      	lsls	r2, r0, #1
 80020e2:	4282      	cmp	r2, r0
 80020e4:	41bf      	sbcs	r7, r7
 80020e6:	427f      	negs	r7, r7
 80020e8:	193c      	adds	r4, r7, r4
 80020ea:	1936      	adds	r6, r6, r4
 80020ec:	9200      	str	r2, [sp, #0]
 80020ee:	e7dd      	b.n	80020ac <__aeabi_ddiv+0x57c>
 80020f0:	2480      	movs	r4, #128	; 0x80
 80020f2:	4643      	mov	r3, r8
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	431c      	orrs	r4, r3
 80020f8:	0324      	lsls	r4, r4, #12
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <__aeabi_ddiv+0x5dc>)
 80020fc:	0b24      	lsrs	r4, r4, #12
 80020fe:	e56e      	b.n	8001bde <__aeabi_ddiv+0xae>
 8002100:	9a00      	ldr	r2, [sp, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3ea      	bcc.n	80020dc <__aeabi_ddiv+0x5ac>
 8002106:	0005      	movs	r5, r0
 8002108:	e7d3      	b.n	80020b2 <__aeabi_ddiv+0x582>
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	000007ff 	.word	0x000007ff
 8002110:	0000043e 	.word	0x0000043e
 8002114:	0000041e 	.word	0x0000041e
 8002118:	000003ff 	.word	0x000003ff

0800211c <__eqdf2>:
 800211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211e:	464e      	mov	r6, r9
 8002120:	4645      	mov	r5, r8
 8002122:	46de      	mov	lr, fp
 8002124:	4657      	mov	r7, sl
 8002126:	4690      	mov	r8, r2
 8002128:	b5e0      	push	{r5, r6, r7, lr}
 800212a:	0017      	movs	r7, r2
 800212c:	031a      	lsls	r2, r3, #12
 800212e:	0b12      	lsrs	r2, r2, #12
 8002130:	0005      	movs	r5, r0
 8002132:	4684      	mov	ip, r0
 8002134:	4819      	ldr	r0, [pc, #100]	; (800219c <__eqdf2+0x80>)
 8002136:	030e      	lsls	r6, r1, #12
 8002138:	004c      	lsls	r4, r1, #1
 800213a:	4691      	mov	r9, r2
 800213c:	005a      	lsls	r2, r3, #1
 800213e:	0fdb      	lsrs	r3, r3, #31
 8002140:	469b      	mov	fp, r3
 8002142:	0b36      	lsrs	r6, r6, #12
 8002144:	0d64      	lsrs	r4, r4, #21
 8002146:	0fc9      	lsrs	r1, r1, #31
 8002148:	0d52      	lsrs	r2, r2, #21
 800214a:	4284      	cmp	r4, r0
 800214c:	d019      	beq.n	8002182 <__eqdf2+0x66>
 800214e:	4282      	cmp	r2, r0
 8002150:	d010      	beq.n	8002174 <__eqdf2+0x58>
 8002152:	2001      	movs	r0, #1
 8002154:	4294      	cmp	r4, r2
 8002156:	d10e      	bne.n	8002176 <__eqdf2+0x5a>
 8002158:	454e      	cmp	r6, r9
 800215a:	d10c      	bne.n	8002176 <__eqdf2+0x5a>
 800215c:	2001      	movs	r0, #1
 800215e:	45c4      	cmp	ip, r8
 8002160:	d109      	bne.n	8002176 <__eqdf2+0x5a>
 8002162:	4559      	cmp	r1, fp
 8002164:	d017      	beq.n	8002196 <__eqdf2+0x7a>
 8002166:	2c00      	cmp	r4, #0
 8002168:	d105      	bne.n	8002176 <__eqdf2+0x5a>
 800216a:	0030      	movs	r0, r6
 800216c:	4328      	orrs	r0, r5
 800216e:	1e43      	subs	r3, r0, #1
 8002170:	4198      	sbcs	r0, r3
 8002172:	e000      	b.n	8002176 <__eqdf2+0x5a>
 8002174:	2001      	movs	r0, #1
 8002176:	bcf0      	pop	{r4, r5, r6, r7}
 8002178:	46bb      	mov	fp, r7
 800217a:	46b2      	mov	sl, r6
 800217c:	46a9      	mov	r9, r5
 800217e:	46a0      	mov	r8, r4
 8002180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002182:	0033      	movs	r3, r6
 8002184:	2001      	movs	r0, #1
 8002186:	432b      	orrs	r3, r5
 8002188:	d1f5      	bne.n	8002176 <__eqdf2+0x5a>
 800218a:	42a2      	cmp	r2, r4
 800218c:	d1f3      	bne.n	8002176 <__eqdf2+0x5a>
 800218e:	464b      	mov	r3, r9
 8002190:	433b      	orrs	r3, r7
 8002192:	d1f0      	bne.n	8002176 <__eqdf2+0x5a>
 8002194:	e7e2      	b.n	800215c <__eqdf2+0x40>
 8002196:	2000      	movs	r0, #0
 8002198:	e7ed      	b.n	8002176 <__eqdf2+0x5a>
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	000007ff 	.word	0x000007ff

080021a0 <__gedf2>:
 80021a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a2:	4647      	mov	r7, r8
 80021a4:	46ce      	mov	lr, r9
 80021a6:	0004      	movs	r4, r0
 80021a8:	0018      	movs	r0, r3
 80021aa:	0016      	movs	r6, r2
 80021ac:	031b      	lsls	r3, r3, #12
 80021ae:	0b1b      	lsrs	r3, r3, #12
 80021b0:	4d2d      	ldr	r5, [pc, #180]	; (8002268 <__gedf2+0xc8>)
 80021b2:	004a      	lsls	r2, r1, #1
 80021b4:	4699      	mov	r9, r3
 80021b6:	b580      	push	{r7, lr}
 80021b8:	0043      	lsls	r3, r0, #1
 80021ba:	030f      	lsls	r7, r1, #12
 80021bc:	46a4      	mov	ip, r4
 80021be:	46b0      	mov	r8, r6
 80021c0:	0b3f      	lsrs	r7, r7, #12
 80021c2:	0d52      	lsrs	r2, r2, #21
 80021c4:	0fc9      	lsrs	r1, r1, #31
 80021c6:	0d5b      	lsrs	r3, r3, #21
 80021c8:	0fc0      	lsrs	r0, r0, #31
 80021ca:	42aa      	cmp	r2, r5
 80021cc:	d021      	beq.n	8002212 <__gedf2+0x72>
 80021ce:	42ab      	cmp	r3, r5
 80021d0:	d013      	beq.n	80021fa <__gedf2+0x5a>
 80021d2:	2a00      	cmp	r2, #0
 80021d4:	d122      	bne.n	800221c <__gedf2+0x7c>
 80021d6:	433c      	orrs	r4, r7
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <__gedf2+0x42>
 80021dc:	464d      	mov	r5, r9
 80021de:	432e      	orrs	r6, r5
 80021e0:	d022      	beq.n	8002228 <__gedf2+0x88>
 80021e2:	2c00      	cmp	r4, #0
 80021e4:	d010      	beq.n	8002208 <__gedf2+0x68>
 80021e6:	4281      	cmp	r1, r0
 80021e8:	d022      	beq.n	8002230 <__gedf2+0x90>
 80021ea:	2002      	movs	r0, #2
 80021ec:	3901      	subs	r1, #1
 80021ee:	4008      	ands	r0, r1
 80021f0:	3801      	subs	r0, #1
 80021f2:	bcc0      	pop	{r6, r7}
 80021f4:	46b9      	mov	r9, r7
 80021f6:	46b0      	mov	r8, r6
 80021f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fa:	464d      	mov	r5, r9
 80021fc:	432e      	orrs	r6, r5
 80021fe:	d129      	bne.n	8002254 <__gedf2+0xb4>
 8002200:	2a00      	cmp	r2, #0
 8002202:	d1f0      	bne.n	80021e6 <__gedf2+0x46>
 8002204:	433c      	orrs	r4, r7
 8002206:	d1ee      	bne.n	80021e6 <__gedf2+0x46>
 8002208:	2800      	cmp	r0, #0
 800220a:	d1f2      	bne.n	80021f2 <__gedf2+0x52>
 800220c:	2001      	movs	r0, #1
 800220e:	4240      	negs	r0, r0
 8002210:	e7ef      	b.n	80021f2 <__gedf2+0x52>
 8002212:	003d      	movs	r5, r7
 8002214:	4325      	orrs	r5, r4
 8002216:	d11d      	bne.n	8002254 <__gedf2+0xb4>
 8002218:	4293      	cmp	r3, r2
 800221a:	d0ee      	beq.n	80021fa <__gedf2+0x5a>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1e2      	bne.n	80021e6 <__gedf2+0x46>
 8002220:	464c      	mov	r4, r9
 8002222:	4326      	orrs	r6, r4
 8002224:	d1df      	bne.n	80021e6 <__gedf2+0x46>
 8002226:	e7e0      	b.n	80021ea <__gedf2+0x4a>
 8002228:	2000      	movs	r0, #0
 800222a:	2c00      	cmp	r4, #0
 800222c:	d0e1      	beq.n	80021f2 <__gedf2+0x52>
 800222e:	e7dc      	b.n	80021ea <__gedf2+0x4a>
 8002230:	429a      	cmp	r2, r3
 8002232:	dc0a      	bgt.n	800224a <__gedf2+0xaa>
 8002234:	dbe8      	blt.n	8002208 <__gedf2+0x68>
 8002236:	454f      	cmp	r7, r9
 8002238:	d8d7      	bhi.n	80021ea <__gedf2+0x4a>
 800223a:	d00e      	beq.n	800225a <__gedf2+0xba>
 800223c:	2000      	movs	r0, #0
 800223e:	454f      	cmp	r7, r9
 8002240:	d2d7      	bcs.n	80021f2 <__gedf2+0x52>
 8002242:	2900      	cmp	r1, #0
 8002244:	d0e2      	beq.n	800220c <__gedf2+0x6c>
 8002246:	0008      	movs	r0, r1
 8002248:	e7d3      	b.n	80021f2 <__gedf2+0x52>
 800224a:	4243      	negs	r3, r0
 800224c:	4158      	adcs	r0, r3
 800224e:	0040      	lsls	r0, r0, #1
 8002250:	3801      	subs	r0, #1
 8002252:	e7ce      	b.n	80021f2 <__gedf2+0x52>
 8002254:	2002      	movs	r0, #2
 8002256:	4240      	negs	r0, r0
 8002258:	e7cb      	b.n	80021f2 <__gedf2+0x52>
 800225a:	45c4      	cmp	ip, r8
 800225c:	d8c5      	bhi.n	80021ea <__gedf2+0x4a>
 800225e:	2000      	movs	r0, #0
 8002260:	45c4      	cmp	ip, r8
 8002262:	d2c6      	bcs.n	80021f2 <__gedf2+0x52>
 8002264:	e7ed      	b.n	8002242 <__gedf2+0xa2>
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	000007ff 	.word	0x000007ff

0800226c <__ledf2>:
 800226c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226e:	4647      	mov	r7, r8
 8002270:	46ce      	mov	lr, r9
 8002272:	0004      	movs	r4, r0
 8002274:	0018      	movs	r0, r3
 8002276:	0016      	movs	r6, r2
 8002278:	031b      	lsls	r3, r3, #12
 800227a:	0b1b      	lsrs	r3, r3, #12
 800227c:	4d2c      	ldr	r5, [pc, #176]	; (8002330 <__ledf2+0xc4>)
 800227e:	004a      	lsls	r2, r1, #1
 8002280:	4699      	mov	r9, r3
 8002282:	b580      	push	{r7, lr}
 8002284:	0043      	lsls	r3, r0, #1
 8002286:	030f      	lsls	r7, r1, #12
 8002288:	46a4      	mov	ip, r4
 800228a:	46b0      	mov	r8, r6
 800228c:	0b3f      	lsrs	r7, r7, #12
 800228e:	0d52      	lsrs	r2, r2, #21
 8002290:	0fc9      	lsrs	r1, r1, #31
 8002292:	0d5b      	lsrs	r3, r3, #21
 8002294:	0fc0      	lsrs	r0, r0, #31
 8002296:	42aa      	cmp	r2, r5
 8002298:	d00d      	beq.n	80022b6 <__ledf2+0x4a>
 800229a:	42ab      	cmp	r3, r5
 800229c:	d010      	beq.n	80022c0 <__ledf2+0x54>
 800229e:	2a00      	cmp	r2, #0
 80022a0:	d127      	bne.n	80022f2 <__ledf2+0x86>
 80022a2:	433c      	orrs	r4, r7
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <__ledf2+0x60>
 80022a8:	464d      	mov	r5, r9
 80022aa:	432e      	orrs	r6, r5
 80022ac:	d10e      	bne.n	80022cc <__ledf2+0x60>
 80022ae:	2000      	movs	r0, #0
 80022b0:	2c00      	cmp	r4, #0
 80022b2:	d015      	beq.n	80022e0 <__ledf2+0x74>
 80022b4:	e00e      	b.n	80022d4 <__ledf2+0x68>
 80022b6:	003d      	movs	r5, r7
 80022b8:	4325      	orrs	r5, r4
 80022ba:	d110      	bne.n	80022de <__ledf2+0x72>
 80022bc:	4293      	cmp	r3, r2
 80022be:	d118      	bne.n	80022f2 <__ledf2+0x86>
 80022c0:	464d      	mov	r5, r9
 80022c2:	432e      	orrs	r6, r5
 80022c4:	d10b      	bne.n	80022de <__ledf2+0x72>
 80022c6:	2a00      	cmp	r2, #0
 80022c8:	d102      	bne.n	80022d0 <__ledf2+0x64>
 80022ca:	433c      	orrs	r4, r7
 80022cc:	2c00      	cmp	r4, #0
 80022ce:	d00b      	beq.n	80022e8 <__ledf2+0x7c>
 80022d0:	4281      	cmp	r1, r0
 80022d2:	d014      	beq.n	80022fe <__ledf2+0x92>
 80022d4:	2002      	movs	r0, #2
 80022d6:	3901      	subs	r1, #1
 80022d8:	4008      	ands	r0, r1
 80022da:	3801      	subs	r0, #1
 80022dc:	e000      	b.n	80022e0 <__ledf2+0x74>
 80022de:	2002      	movs	r0, #2
 80022e0:	bcc0      	pop	{r6, r7}
 80022e2:	46b9      	mov	r9, r7
 80022e4:	46b0      	mov	r8, r6
 80022e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e8:	2800      	cmp	r0, #0
 80022ea:	d1f9      	bne.n	80022e0 <__ledf2+0x74>
 80022ec:	2001      	movs	r0, #1
 80022ee:	4240      	negs	r0, r0
 80022f0:	e7f6      	b.n	80022e0 <__ledf2+0x74>
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1ec      	bne.n	80022d0 <__ledf2+0x64>
 80022f6:	464c      	mov	r4, r9
 80022f8:	4326      	orrs	r6, r4
 80022fa:	d1e9      	bne.n	80022d0 <__ledf2+0x64>
 80022fc:	e7ea      	b.n	80022d4 <__ledf2+0x68>
 80022fe:	429a      	cmp	r2, r3
 8002300:	dd04      	ble.n	800230c <__ledf2+0xa0>
 8002302:	4243      	negs	r3, r0
 8002304:	4158      	adcs	r0, r3
 8002306:	0040      	lsls	r0, r0, #1
 8002308:	3801      	subs	r0, #1
 800230a:	e7e9      	b.n	80022e0 <__ledf2+0x74>
 800230c:	429a      	cmp	r2, r3
 800230e:	dbeb      	blt.n	80022e8 <__ledf2+0x7c>
 8002310:	454f      	cmp	r7, r9
 8002312:	d8df      	bhi.n	80022d4 <__ledf2+0x68>
 8002314:	d006      	beq.n	8002324 <__ledf2+0xb8>
 8002316:	2000      	movs	r0, #0
 8002318:	454f      	cmp	r7, r9
 800231a:	d2e1      	bcs.n	80022e0 <__ledf2+0x74>
 800231c:	2900      	cmp	r1, #0
 800231e:	d0e5      	beq.n	80022ec <__ledf2+0x80>
 8002320:	0008      	movs	r0, r1
 8002322:	e7dd      	b.n	80022e0 <__ledf2+0x74>
 8002324:	45c4      	cmp	ip, r8
 8002326:	d8d5      	bhi.n	80022d4 <__ledf2+0x68>
 8002328:	2000      	movs	r0, #0
 800232a:	45c4      	cmp	ip, r8
 800232c:	d2d8      	bcs.n	80022e0 <__ledf2+0x74>
 800232e:	e7f5      	b.n	800231c <__ledf2+0xb0>
 8002330:	000007ff 	.word	0x000007ff

08002334 <__aeabi_dmul>:
 8002334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002336:	4657      	mov	r7, sl
 8002338:	464e      	mov	r6, r9
 800233a:	4645      	mov	r5, r8
 800233c:	46de      	mov	lr, fp
 800233e:	b5e0      	push	{r5, r6, r7, lr}
 8002340:	4698      	mov	r8, r3
 8002342:	030c      	lsls	r4, r1, #12
 8002344:	004b      	lsls	r3, r1, #1
 8002346:	0006      	movs	r6, r0
 8002348:	4692      	mov	sl, r2
 800234a:	b087      	sub	sp, #28
 800234c:	0b24      	lsrs	r4, r4, #12
 800234e:	0d5b      	lsrs	r3, r3, #21
 8002350:	0fcf      	lsrs	r7, r1, #31
 8002352:	2b00      	cmp	r3, #0
 8002354:	d100      	bne.n	8002358 <__aeabi_dmul+0x24>
 8002356:	e15c      	b.n	8002612 <__aeabi_dmul+0x2de>
 8002358:	4ad9      	ldr	r2, [pc, #868]	; (80026c0 <__aeabi_dmul+0x38c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d100      	bne.n	8002360 <__aeabi_dmul+0x2c>
 800235e:	e175      	b.n	800264c <__aeabi_dmul+0x318>
 8002360:	0f42      	lsrs	r2, r0, #29
 8002362:	00e4      	lsls	r4, r4, #3
 8002364:	4314      	orrs	r4, r2
 8002366:	2280      	movs	r2, #128	; 0x80
 8002368:	0412      	lsls	r2, r2, #16
 800236a:	4314      	orrs	r4, r2
 800236c:	4ad5      	ldr	r2, [pc, #852]	; (80026c4 <__aeabi_dmul+0x390>)
 800236e:	00c5      	lsls	r5, r0, #3
 8002370:	4694      	mov	ip, r2
 8002372:	4463      	add	r3, ip
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2300      	movs	r3, #0
 8002378:	4699      	mov	r9, r3
 800237a:	469b      	mov	fp, r3
 800237c:	4643      	mov	r3, r8
 800237e:	4642      	mov	r2, r8
 8002380:	031e      	lsls	r6, r3, #12
 8002382:	0fd2      	lsrs	r2, r2, #31
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4650      	mov	r0, sl
 8002388:	4690      	mov	r8, r2
 800238a:	0b36      	lsrs	r6, r6, #12
 800238c:	0d5b      	lsrs	r3, r3, #21
 800238e:	d100      	bne.n	8002392 <__aeabi_dmul+0x5e>
 8002390:	e120      	b.n	80025d4 <__aeabi_dmul+0x2a0>
 8002392:	4acb      	ldr	r2, [pc, #812]	; (80026c0 <__aeabi_dmul+0x38c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d100      	bne.n	800239a <__aeabi_dmul+0x66>
 8002398:	e162      	b.n	8002660 <__aeabi_dmul+0x32c>
 800239a:	49ca      	ldr	r1, [pc, #808]	; (80026c4 <__aeabi_dmul+0x390>)
 800239c:	0f42      	lsrs	r2, r0, #29
 800239e:	468c      	mov	ip, r1
 80023a0:	9900      	ldr	r1, [sp, #0]
 80023a2:	4463      	add	r3, ip
 80023a4:	00f6      	lsls	r6, r6, #3
 80023a6:	468c      	mov	ip, r1
 80023a8:	4316      	orrs	r6, r2
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	449c      	add	ip, r3
 80023ae:	0412      	lsls	r2, r2, #16
 80023b0:	4663      	mov	r3, ip
 80023b2:	4316      	orrs	r6, r2
 80023b4:	00c2      	lsls	r2, r0, #3
 80023b6:	2000      	movs	r0, #0
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	9900      	ldr	r1, [sp, #0]
 80023bc:	4643      	mov	r3, r8
 80023be:	3101      	adds	r1, #1
 80023c0:	468c      	mov	ip, r1
 80023c2:	4649      	mov	r1, r9
 80023c4:	407b      	eors	r3, r7
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	290f      	cmp	r1, #15
 80023ca:	d826      	bhi.n	800241a <__aeabi_dmul+0xe6>
 80023cc:	4bbe      	ldr	r3, [pc, #760]	; (80026c8 <__aeabi_dmul+0x394>)
 80023ce:	0089      	lsls	r1, r1, #2
 80023d0:	5859      	ldr	r1, [r3, r1]
 80023d2:	468f      	mov	pc, r1
 80023d4:	4643      	mov	r3, r8
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	0034      	movs	r4, r6
 80023da:	0015      	movs	r5, r2
 80023dc:	4683      	mov	fp, r0
 80023de:	465b      	mov	r3, fp
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d016      	beq.n	8002412 <__aeabi_dmul+0xde>
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d100      	bne.n	80023ea <__aeabi_dmul+0xb6>
 80023e8:	e203      	b.n	80027f2 <__aeabi_dmul+0x4be>
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d000      	beq.n	80023f0 <__aeabi_dmul+0xbc>
 80023ee:	e0cd      	b.n	800258c <__aeabi_dmul+0x258>
 80023f0:	2200      	movs	r2, #0
 80023f2:	2400      	movs	r4, #0
 80023f4:	2500      	movs	r5, #0
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	0512      	lsls	r2, r2, #20
 80023fa:	4322      	orrs	r2, r4
 80023fc:	07db      	lsls	r3, r3, #31
 80023fe:	431a      	orrs	r2, r3
 8002400:	0028      	movs	r0, r5
 8002402:	0011      	movs	r1, r2
 8002404:	b007      	add	sp, #28
 8002406:	bcf0      	pop	{r4, r5, r6, r7}
 8002408:	46bb      	mov	fp, r7
 800240a:	46b2      	mov	sl, r6
 800240c:	46a9      	mov	r9, r5
 800240e:	46a0      	mov	r8, r4
 8002410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002412:	2400      	movs	r4, #0
 8002414:	2500      	movs	r5, #0
 8002416:	4aaa      	ldr	r2, [pc, #680]	; (80026c0 <__aeabi_dmul+0x38c>)
 8002418:	e7ed      	b.n	80023f6 <__aeabi_dmul+0xc2>
 800241a:	0c28      	lsrs	r0, r5, #16
 800241c:	042d      	lsls	r5, r5, #16
 800241e:	0c2d      	lsrs	r5, r5, #16
 8002420:	002b      	movs	r3, r5
 8002422:	0c11      	lsrs	r1, r2, #16
 8002424:	0412      	lsls	r2, r2, #16
 8002426:	0c12      	lsrs	r2, r2, #16
 8002428:	4353      	muls	r3, r2
 800242a:	4698      	mov	r8, r3
 800242c:	0013      	movs	r3, r2
 800242e:	002f      	movs	r7, r5
 8002430:	4343      	muls	r3, r0
 8002432:	4699      	mov	r9, r3
 8002434:	434f      	muls	r7, r1
 8002436:	444f      	add	r7, r9
 8002438:	46bb      	mov	fp, r7
 800243a:	4647      	mov	r7, r8
 800243c:	000b      	movs	r3, r1
 800243e:	0c3f      	lsrs	r7, r7, #16
 8002440:	46ba      	mov	sl, r7
 8002442:	4343      	muls	r3, r0
 8002444:	44da      	add	sl, fp
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	45d1      	cmp	r9, sl
 800244a:	d904      	bls.n	8002456 <__aeabi_dmul+0x122>
 800244c:	2780      	movs	r7, #128	; 0x80
 800244e:	027f      	lsls	r7, r7, #9
 8002450:	46b9      	mov	r9, r7
 8002452:	444b      	add	r3, r9
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	4653      	mov	r3, sl
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	469b      	mov	fp, r3
 800245c:	4653      	mov	r3, sl
 800245e:	041f      	lsls	r7, r3, #16
 8002460:	4643      	mov	r3, r8
 8002462:	041b      	lsls	r3, r3, #16
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	4698      	mov	r8, r3
 8002468:	003b      	movs	r3, r7
 800246a:	4443      	add	r3, r8
 800246c:	9304      	str	r3, [sp, #16]
 800246e:	0c33      	lsrs	r3, r6, #16
 8002470:	0436      	lsls	r6, r6, #16
 8002472:	0c36      	lsrs	r6, r6, #16
 8002474:	4698      	mov	r8, r3
 8002476:	0033      	movs	r3, r6
 8002478:	4343      	muls	r3, r0
 800247a:	4699      	mov	r9, r3
 800247c:	4643      	mov	r3, r8
 800247e:	4343      	muls	r3, r0
 8002480:	002f      	movs	r7, r5
 8002482:	469a      	mov	sl, r3
 8002484:	4643      	mov	r3, r8
 8002486:	4377      	muls	r7, r6
 8002488:	435d      	muls	r5, r3
 800248a:	0c38      	lsrs	r0, r7, #16
 800248c:	444d      	add	r5, r9
 800248e:	1945      	adds	r5, r0, r5
 8002490:	45a9      	cmp	r9, r5
 8002492:	d903      	bls.n	800249c <__aeabi_dmul+0x168>
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	025b      	lsls	r3, r3, #9
 8002498:	4699      	mov	r9, r3
 800249a:	44ca      	add	sl, r9
 800249c:	043f      	lsls	r7, r7, #16
 800249e:	0c28      	lsrs	r0, r5, #16
 80024a0:	0c3f      	lsrs	r7, r7, #16
 80024a2:	042d      	lsls	r5, r5, #16
 80024a4:	19ed      	adds	r5, r5, r7
 80024a6:	0c27      	lsrs	r7, r4, #16
 80024a8:	0424      	lsls	r4, r4, #16
 80024aa:	0c24      	lsrs	r4, r4, #16
 80024ac:	0003      	movs	r3, r0
 80024ae:	0020      	movs	r0, r4
 80024b0:	4350      	muls	r0, r2
 80024b2:	437a      	muls	r2, r7
 80024b4:	4691      	mov	r9, r2
 80024b6:	003a      	movs	r2, r7
 80024b8:	4453      	add	r3, sl
 80024ba:	9305      	str	r3, [sp, #20]
 80024bc:	0c03      	lsrs	r3, r0, #16
 80024be:	469a      	mov	sl, r3
 80024c0:	434a      	muls	r2, r1
 80024c2:	4361      	muls	r1, r4
 80024c4:	4449      	add	r1, r9
 80024c6:	4451      	add	r1, sl
 80024c8:	44ab      	add	fp, r5
 80024ca:	4589      	cmp	r9, r1
 80024cc:	d903      	bls.n	80024d6 <__aeabi_dmul+0x1a2>
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	025b      	lsls	r3, r3, #9
 80024d2:	4699      	mov	r9, r3
 80024d4:	444a      	add	r2, r9
 80024d6:	0400      	lsls	r0, r0, #16
 80024d8:	0c0b      	lsrs	r3, r1, #16
 80024da:	0c00      	lsrs	r0, r0, #16
 80024dc:	0409      	lsls	r1, r1, #16
 80024de:	1809      	adds	r1, r1, r0
 80024e0:	0020      	movs	r0, r4
 80024e2:	4699      	mov	r9, r3
 80024e4:	4643      	mov	r3, r8
 80024e6:	4370      	muls	r0, r6
 80024e8:	435c      	muls	r4, r3
 80024ea:	437e      	muls	r6, r7
 80024ec:	435f      	muls	r7, r3
 80024ee:	0c03      	lsrs	r3, r0, #16
 80024f0:	4698      	mov	r8, r3
 80024f2:	19a4      	adds	r4, r4, r6
 80024f4:	4444      	add	r4, r8
 80024f6:	444a      	add	r2, r9
 80024f8:	9703      	str	r7, [sp, #12]
 80024fa:	42a6      	cmp	r6, r4
 80024fc:	d904      	bls.n	8002508 <__aeabi_dmul+0x1d4>
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	025b      	lsls	r3, r3, #9
 8002502:	4698      	mov	r8, r3
 8002504:	4447      	add	r7, r8
 8002506:	9703      	str	r7, [sp, #12]
 8002508:	0423      	lsls	r3, r4, #16
 800250a:	9e02      	ldr	r6, [sp, #8]
 800250c:	469a      	mov	sl, r3
 800250e:	9b05      	ldr	r3, [sp, #20]
 8002510:	445e      	add	r6, fp
 8002512:	4698      	mov	r8, r3
 8002514:	42ae      	cmp	r6, r5
 8002516:	41ad      	sbcs	r5, r5
 8002518:	1876      	adds	r6, r6, r1
 800251a:	428e      	cmp	r6, r1
 800251c:	4189      	sbcs	r1, r1
 800251e:	0400      	lsls	r0, r0, #16
 8002520:	0c00      	lsrs	r0, r0, #16
 8002522:	4450      	add	r0, sl
 8002524:	4440      	add	r0, r8
 8002526:	426d      	negs	r5, r5
 8002528:	1947      	adds	r7, r0, r5
 800252a:	46b8      	mov	r8, r7
 800252c:	4693      	mov	fp, r2
 800252e:	4249      	negs	r1, r1
 8002530:	4689      	mov	r9, r1
 8002532:	44c3      	add	fp, r8
 8002534:	44d9      	add	r9, fp
 8002536:	4298      	cmp	r0, r3
 8002538:	4180      	sbcs	r0, r0
 800253a:	45a8      	cmp	r8, r5
 800253c:	41ad      	sbcs	r5, r5
 800253e:	4593      	cmp	fp, r2
 8002540:	4192      	sbcs	r2, r2
 8002542:	4589      	cmp	r9, r1
 8002544:	4189      	sbcs	r1, r1
 8002546:	426d      	negs	r5, r5
 8002548:	4240      	negs	r0, r0
 800254a:	4328      	orrs	r0, r5
 800254c:	0c24      	lsrs	r4, r4, #16
 800254e:	4252      	negs	r2, r2
 8002550:	4249      	negs	r1, r1
 8002552:	430a      	orrs	r2, r1
 8002554:	9b03      	ldr	r3, [sp, #12]
 8002556:	1900      	adds	r0, r0, r4
 8002558:	1880      	adds	r0, r0, r2
 800255a:	18c7      	adds	r7, r0, r3
 800255c:	464b      	mov	r3, r9
 800255e:	0ddc      	lsrs	r4, r3, #23
 8002560:	9b04      	ldr	r3, [sp, #16]
 8002562:	0275      	lsls	r5, r6, #9
 8002564:	431d      	orrs	r5, r3
 8002566:	1e6a      	subs	r2, r5, #1
 8002568:	4195      	sbcs	r5, r2
 800256a:	464b      	mov	r3, r9
 800256c:	0df6      	lsrs	r6, r6, #23
 800256e:	027f      	lsls	r7, r7, #9
 8002570:	4335      	orrs	r5, r6
 8002572:	025a      	lsls	r2, r3, #9
 8002574:	433c      	orrs	r4, r7
 8002576:	4315      	orrs	r5, r2
 8002578:	01fb      	lsls	r3, r7, #7
 800257a:	d400      	bmi.n	800257e <__aeabi_dmul+0x24a>
 800257c:	e11c      	b.n	80027b8 <__aeabi_dmul+0x484>
 800257e:	2101      	movs	r1, #1
 8002580:	086a      	lsrs	r2, r5, #1
 8002582:	400d      	ands	r5, r1
 8002584:	4315      	orrs	r5, r2
 8002586:	07e2      	lsls	r2, r4, #31
 8002588:	4315      	orrs	r5, r2
 800258a:	0864      	lsrs	r4, r4, #1
 800258c:	494f      	ldr	r1, [pc, #316]	; (80026cc <__aeabi_dmul+0x398>)
 800258e:	4461      	add	r1, ip
 8002590:	2900      	cmp	r1, #0
 8002592:	dc00      	bgt.n	8002596 <__aeabi_dmul+0x262>
 8002594:	e0b0      	b.n	80026f8 <__aeabi_dmul+0x3c4>
 8002596:	076b      	lsls	r3, r5, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_dmul+0x27a>
 800259a:	220f      	movs	r2, #15
 800259c:	402a      	ands	r2, r5
 800259e:	2a04      	cmp	r2, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_dmul+0x27a>
 80025a2:	1d2a      	adds	r2, r5, #4
 80025a4:	42aa      	cmp	r2, r5
 80025a6:	41ad      	sbcs	r5, r5
 80025a8:	426d      	negs	r5, r5
 80025aa:	1964      	adds	r4, r4, r5
 80025ac:	0015      	movs	r5, r2
 80025ae:	01e3      	lsls	r3, r4, #7
 80025b0:	d504      	bpl.n	80025bc <__aeabi_dmul+0x288>
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	4a46      	ldr	r2, [pc, #280]	; (80026d0 <__aeabi_dmul+0x39c>)
 80025b6:	00c9      	lsls	r1, r1, #3
 80025b8:	4014      	ands	r4, r2
 80025ba:	4461      	add	r1, ip
 80025bc:	4a45      	ldr	r2, [pc, #276]	; (80026d4 <__aeabi_dmul+0x3a0>)
 80025be:	4291      	cmp	r1, r2
 80025c0:	dd00      	ble.n	80025c4 <__aeabi_dmul+0x290>
 80025c2:	e726      	b.n	8002412 <__aeabi_dmul+0xde>
 80025c4:	0762      	lsls	r2, r4, #29
 80025c6:	08ed      	lsrs	r5, r5, #3
 80025c8:	0264      	lsls	r4, r4, #9
 80025ca:	0549      	lsls	r1, r1, #21
 80025cc:	4315      	orrs	r5, r2
 80025ce:	0b24      	lsrs	r4, r4, #12
 80025d0:	0d4a      	lsrs	r2, r1, #21
 80025d2:	e710      	b.n	80023f6 <__aeabi_dmul+0xc2>
 80025d4:	4652      	mov	r2, sl
 80025d6:	4332      	orrs	r2, r6
 80025d8:	d100      	bne.n	80025dc <__aeabi_dmul+0x2a8>
 80025da:	e07f      	b.n	80026dc <__aeabi_dmul+0x3a8>
 80025dc:	2e00      	cmp	r6, #0
 80025de:	d100      	bne.n	80025e2 <__aeabi_dmul+0x2ae>
 80025e0:	e0dc      	b.n	800279c <__aeabi_dmul+0x468>
 80025e2:	0030      	movs	r0, r6
 80025e4:	f000 fe1e 	bl	8003224 <__clzsi2>
 80025e8:	0002      	movs	r2, r0
 80025ea:	3a0b      	subs	r2, #11
 80025ec:	231d      	movs	r3, #29
 80025ee:	0001      	movs	r1, r0
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	4652      	mov	r2, sl
 80025f4:	3908      	subs	r1, #8
 80025f6:	40da      	lsrs	r2, r3
 80025f8:	408e      	lsls	r6, r1
 80025fa:	4316      	orrs	r6, r2
 80025fc:	4652      	mov	r2, sl
 80025fe:	408a      	lsls	r2, r1
 8002600:	9b00      	ldr	r3, [sp, #0]
 8002602:	4935      	ldr	r1, [pc, #212]	; (80026d8 <__aeabi_dmul+0x3a4>)
 8002604:	1a18      	subs	r0, r3, r0
 8002606:	0003      	movs	r3, r0
 8002608:	468c      	mov	ip, r1
 800260a:	4463      	add	r3, ip
 800260c:	2000      	movs	r0, #0
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	e6d3      	b.n	80023ba <__aeabi_dmul+0x86>
 8002612:	0025      	movs	r5, r4
 8002614:	4305      	orrs	r5, r0
 8002616:	d04a      	beq.n	80026ae <__aeabi_dmul+0x37a>
 8002618:	2c00      	cmp	r4, #0
 800261a:	d100      	bne.n	800261e <__aeabi_dmul+0x2ea>
 800261c:	e0b0      	b.n	8002780 <__aeabi_dmul+0x44c>
 800261e:	0020      	movs	r0, r4
 8002620:	f000 fe00 	bl	8003224 <__clzsi2>
 8002624:	0001      	movs	r1, r0
 8002626:	0002      	movs	r2, r0
 8002628:	390b      	subs	r1, #11
 800262a:	231d      	movs	r3, #29
 800262c:	0010      	movs	r0, r2
 800262e:	1a5b      	subs	r3, r3, r1
 8002630:	0031      	movs	r1, r6
 8002632:	0035      	movs	r5, r6
 8002634:	3808      	subs	r0, #8
 8002636:	4084      	lsls	r4, r0
 8002638:	40d9      	lsrs	r1, r3
 800263a:	4085      	lsls	r5, r0
 800263c:	430c      	orrs	r4, r1
 800263e:	4826      	ldr	r0, [pc, #152]	; (80026d8 <__aeabi_dmul+0x3a4>)
 8002640:	1a83      	subs	r3, r0, r2
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2300      	movs	r3, #0
 8002646:	4699      	mov	r9, r3
 8002648:	469b      	mov	fp, r3
 800264a:	e697      	b.n	800237c <__aeabi_dmul+0x48>
 800264c:	0005      	movs	r5, r0
 800264e:	4325      	orrs	r5, r4
 8002650:	d126      	bne.n	80026a0 <__aeabi_dmul+0x36c>
 8002652:	2208      	movs	r2, #8
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2302      	movs	r3, #2
 8002658:	2400      	movs	r4, #0
 800265a:	4691      	mov	r9, r2
 800265c:	469b      	mov	fp, r3
 800265e:	e68d      	b.n	800237c <__aeabi_dmul+0x48>
 8002660:	4652      	mov	r2, sl
 8002662:	9b00      	ldr	r3, [sp, #0]
 8002664:	4332      	orrs	r2, r6
 8002666:	d110      	bne.n	800268a <__aeabi_dmul+0x356>
 8002668:	4915      	ldr	r1, [pc, #84]	; (80026c0 <__aeabi_dmul+0x38c>)
 800266a:	2600      	movs	r6, #0
 800266c:	468c      	mov	ip, r1
 800266e:	4463      	add	r3, ip
 8002670:	4649      	mov	r1, r9
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2302      	movs	r3, #2
 8002676:	4319      	orrs	r1, r3
 8002678:	4689      	mov	r9, r1
 800267a:	2002      	movs	r0, #2
 800267c:	e69d      	b.n	80023ba <__aeabi_dmul+0x86>
 800267e:	465b      	mov	r3, fp
 8002680:	9701      	str	r7, [sp, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d000      	beq.n	8002688 <__aeabi_dmul+0x354>
 8002686:	e6ad      	b.n	80023e4 <__aeabi_dmul+0xb0>
 8002688:	e6c3      	b.n	8002412 <__aeabi_dmul+0xde>
 800268a:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <__aeabi_dmul+0x38c>)
 800268c:	2003      	movs	r0, #3
 800268e:	4694      	mov	ip, r2
 8002690:	4463      	add	r3, ip
 8002692:	464a      	mov	r2, r9
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	2303      	movs	r3, #3
 8002698:	431a      	orrs	r2, r3
 800269a:	4691      	mov	r9, r2
 800269c:	4652      	mov	r2, sl
 800269e:	e68c      	b.n	80023ba <__aeabi_dmul+0x86>
 80026a0:	220c      	movs	r2, #12
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2303      	movs	r3, #3
 80026a6:	0005      	movs	r5, r0
 80026a8:	4691      	mov	r9, r2
 80026aa:	469b      	mov	fp, r3
 80026ac:	e666      	b.n	800237c <__aeabi_dmul+0x48>
 80026ae:	2304      	movs	r3, #4
 80026b0:	4699      	mov	r9, r3
 80026b2:	2300      	movs	r3, #0
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	2400      	movs	r4, #0
 80026ba:	469b      	mov	fp, r3
 80026bc:	e65e      	b.n	800237c <__aeabi_dmul+0x48>
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	000007ff 	.word	0x000007ff
 80026c4:	fffffc01 	.word	0xfffffc01
 80026c8:	0800e8b0 	.word	0x0800e8b0
 80026cc:	000003ff 	.word	0x000003ff
 80026d0:	feffffff 	.word	0xfeffffff
 80026d4:	000007fe 	.word	0x000007fe
 80026d8:	fffffc0d 	.word	0xfffffc0d
 80026dc:	4649      	mov	r1, r9
 80026de:	2301      	movs	r3, #1
 80026e0:	4319      	orrs	r1, r3
 80026e2:	4689      	mov	r9, r1
 80026e4:	2600      	movs	r6, #0
 80026e6:	2001      	movs	r0, #1
 80026e8:	e667      	b.n	80023ba <__aeabi_dmul+0x86>
 80026ea:	2300      	movs	r3, #0
 80026ec:	2480      	movs	r4, #128	; 0x80
 80026ee:	2500      	movs	r5, #0
 80026f0:	4a43      	ldr	r2, [pc, #268]	; (8002800 <__aeabi_dmul+0x4cc>)
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	0324      	lsls	r4, r4, #12
 80026f6:	e67e      	b.n	80023f6 <__aeabi_dmul+0xc2>
 80026f8:	2001      	movs	r0, #1
 80026fa:	1a40      	subs	r0, r0, r1
 80026fc:	2838      	cmp	r0, #56	; 0x38
 80026fe:	dd00      	ble.n	8002702 <__aeabi_dmul+0x3ce>
 8002700:	e676      	b.n	80023f0 <__aeabi_dmul+0xbc>
 8002702:	281f      	cmp	r0, #31
 8002704:	dd5b      	ble.n	80027be <__aeabi_dmul+0x48a>
 8002706:	221f      	movs	r2, #31
 8002708:	0023      	movs	r3, r4
 800270a:	4252      	negs	r2, r2
 800270c:	1a51      	subs	r1, r2, r1
 800270e:	40cb      	lsrs	r3, r1
 8002710:	0019      	movs	r1, r3
 8002712:	2820      	cmp	r0, #32
 8002714:	d003      	beq.n	800271e <__aeabi_dmul+0x3ea>
 8002716:	4a3b      	ldr	r2, [pc, #236]	; (8002804 <__aeabi_dmul+0x4d0>)
 8002718:	4462      	add	r2, ip
 800271a:	4094      	lsls	r4, r2
 800271c:	4325      	orrs	r5, r4
 800271e:	1e6a      	subs	r2, r5, #1
 8002720:	4195      	sbcs	r5, r2
 8002722:	002a      	movs	r2, r5
 8002724:	430a      	orrs	r2, r1
 8002726:	2107      	movs	r1, #7
 8002728:	000d      	movs	r5, r1
 800272a:	2400      	movs	r4, #0
 800272c:	4015      	ands	r5, r2
 800272e:	4211      	tst	r1, r2
 8002730:	d05b      	beq.n	80027ea <__aeabi_dmul+0x4b6>
 8002732:	210f      	movs	r1, #15
 8002734:	2400      	movs	r4, #0
 8002736:	4011      	ands	r1, r2
 8002738:	2904      	cmp	r1, #4
 800273a:	d053      	beq.n	80027e4 <__aeabi_dmul+0x4b0>
 800273c:	1d11      	adds	r1, r2, #4
 800273e:	4291      	cmp	r1, r2
 8002740:	4192      	sbcs	r2, r2
 8002742:	4252      	negs	r2, r2
 8002744:	18a4      	adds	r4, r4, r2
 8002746:	000a      	movs	r2, r1
 8002748:	0223      	lsls	r3, r4, #8
 800274a:	d54b      	bpl.n	80027e4 <__aeabi_dmul+0x4b0>
 800274c:	2201      	movs	r2, #1
 800274e:	2400      	movs	r4, #0
 8002750:	2500      	movs	r5, #0
 8002752:	e650      	b.n	80023f6 <__aeabi_dmul+0xc2>
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	031b      	lsls	r3, r3, #12
 8002758:	421c      	tst	r4, r3
 800275a:	d009      	beq.n	8002770 <__aeabi_dmul+0x43c>
 800275c:	421e      	tst	r6, r3
 800275e:	d107      	bne.n	8002770 <__aeabi_dmul+0x43c>
 8002760:	4333      	orrs	r3, r6
 8002762:	031c      	lsls	r4, r3, #12
 8002764:	4643      	mov	r3, r8
 8002766:	0015      	movs	r5, r2
 8002768:	0b24      	lsrs	r4, r4, #12
 800276a:	4a25      	ldr	r2, [pc, #148]	; (8002800 <__aeabi_dmul+0x4cc>)
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	e642      	b.n	80023f6 <__aeabi_dmul+0xc2>
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	0312      	lsls	r2, r2, #12
 8002774:	4314      	orrs	r4, r2
 8002776:	0324      	lsls	r4, r4, #12
 8002778:	4a21      	ldr	r2, [pc, #132]	; (8002800 <__aeabi_dmul+0x4cc>)
 800277a:	0b24      	lsrs	r4, r4, #12
 800277c:	9701      	str	r7, [sp, #4]
 800277e:	e63a      	b.n	80023f6 <__aeabi_dmul+0xc2>
 8002780:	f000 fd50 	bl	8003224 <__clzsi2>
 8002784:	0001      	movs	r1, r0
 8002786:	0002      	movs	r2, r0
 8002788:	3115      	adds	r1, #21
 800278a:	3220      	adds	r2, #32
 800278c:	291c      	cmp	r1, #28
 800278e:	dc00      	bgt.n	8002792 <__aeabi_dmul+0x45e>
 8002790:	e74b      	b.n	800262a <__aeabi_dmul+0x2f6>
 8002792:	0034      	movs	r4, r6
 8002794:	3808      	subs	r0, #8
 8002796:	2500      	movs	r5, #0
 8002798:	4084      	lsls	r4, r0
 800279a:	e750      	b.n	800263e <__aeabi_dmul+0x30a>
 800279c:	f000 fd42 	bl	8003224 <__clzsi2>
 80027a0:	0003      	movs	r3, r0
 80027a2:	001a      	movs	r2, r3
 80027a4:	3215      	adds	r2, #21
 80027a6:	3020      	adds	r0, #32
 80027a8:	2a1c      	cmp	r2, #28
 80027aa:	dc00      	bgt.n	80027ae <__aeabi_dmul+0x47a>
 80027ac:	e71e      	b.n	80025ec <__aeabi_dmul+0x2b8>
 80027ae:	4656      	mov	r6, sl
 80027b0:	3b08      	subs	r3, #8
 80027b2:	2200      	movs	r2, #0
 80027b4:	409e      	lsls	r6, r3
 80027b6:	e723      	b.n	8002600 <__aeabi_dmul+0x2cc>
 80027b8:	9b00      	ldr	r3, [sp, #0]
 80027ba:	469c      	mov	ip, r3
 80027bc:	e6e6      	b.n	800258c <__aeabi_dmul+0x258>
 80027be:	4912      	ldr	r1, [pc, #72]	; (8002808 <__aeabi_dmul+0x4d4>)
 80027c0:	0022      	movs	r2, r4
 80027c2:	4461      	add	r1, ip
 80027c4:	002e      	movs	r6, r5
 80027c6:	408d      	lsls	r5, r1
 80027c8:	408a      	lsls	r2, r1
 80027ca:	40c6      	lsrs	r6, r0
 80027cc:	1e69      	subs	r1, r5, #1
 80027ce:	418d      	sbcs	r5, r1
 80027d0:	4332      	orrs	r2, r6
 80027d2:	432a      	orrs	r2, r5
 80027d4:	40c4      	lsrs	r4, r0
 80027d6:	0753      	lsls	r3, r2, #29
 80027d8:	d0b6      	beq.n	8002748 <__aeabi_dmul+0x414>
 80027da:	210f      	movs	r1, #15
 80027dc:	4011      	ands	r1, r2
 80027de:	2904      	cmp	r1, #4
 80027e0:	d1ac      	bne.n	800273c <__aeabi_dmul+0x408>
 80027e2:	e7b1      	b.n	8002748 <__aeabi_dmul+0x414>
 80027e4:	0765      	lsls	r5, r4, #29
 80027e6:	0264      	lsls	r4, r4, #9
 80027e8:	0b24      	lsrs	r4, r4, #12
 80027ea:	08d2      	lsrs	r2, r2, #3
 80027ec:	4315      	orrs	r5, r2
 80027ee:	2200      	movs	r2, #0
 80027f0:	e601      	b.n	80023f6 <__aeabi_dmul+0xc2>
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	0312      	lsls	r2, r2, #12
 80027f6:	4314      	orrs	r4, r2
 80027f8:	0324      	lsls	r4, r4, #12
 80027fa:	4a01      	ldr	r2, [pc, #4]	; (8002800 <__aeabi_dmul+0x4cc>)
 80027fc:	0b24      	lsrs	r4, r4, #12
 80027fe:	e5fa      	b.n	80023f6 <__aeabi_dmul+0xc2>
 8002800:	000007ff 	.word	0x000007ff
 8002804:	0000043e 	.word	0x0000043e
 8002808:	0000041e 	.word	0x0000041e

0800280c <__aeabi_dsub>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	4657      	mov	r7, sl
 8002810:	464e      	mov	r6, r9
 8002812:	4645      	mov	r5, r8
 8002814:	46de      	mov	lr, fp
 8002816:	b5e0      	push	{r5, r6, r7, lr}
 8002818:	001e      	movs	r6, r3
 800281a:	0017      	movs	r7, r2
 800281c:	004a      	lsls	r2, r1, #1
 800281e:	030b      	lsls	r3, r1, #12
 8002820:	0d52      	lsrs	r2, r2, #21
 8002822:	0a5b      	lsrs	r3, r3, #9
 8002824:	4690      	mov	r8, r2
 8002826:	0f42      	lsrs	r2, r0, #29
 8002828:	431a      	orrs	r2, r3
 800282a:	0fcd      	lsrs	r5, r1, #31
 800282c:	4ccd      	ldr	r4, [pc, #820]	; (8002b64 <__aeabi_dsub+0x358>)
 800282e:	0331      	lsls	r1, r6, #12
 8002830:	00c3      	lsls	r3, r0, #3
 8002832:	4694      	mov	ip, r2
 8002834:	0070      	lsls	r0, r6, #1
 8002836:	0f7a      	lsrs	r2, r7, #29
 8002838:	0a49      	lsrs	r1, r1, #9
 800283a:	00ff      	lsls	r7, r7, #3
 800283c:	469a      	mov	sl, r3
 800283e:	46b9      	mov	r9, r7
 8002840:	0d40      	lsrs	r0, r0, #21
 8002842:	0ff6      	lsrs	r6, r6, #31
 8002844:	4311      	orrs	r1, r2
 8002846:	42a0      	cmp	r0, r4
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x40>
 800284a:	e0b1      	b.n	80029b0 <__aeabi_dsub+0x1a4>
 800284c:	2201      	movs	r2, #1
 800284e:	4056      	eors	r6, r2
 8002850:	46b3      	mov	fp, r6
 8002852:	42b5      	cmp	r5, r6
 8002854:	d100      	bne.n	8002858 <__aeabi_dsub+0x4c>
 8002856:	e088      	b.n	800296a <__aeabi_dsub+0x15e>
 8002858:	4642      	mov	r2, r8
 800285a:	1a12      	subs	r2, r2, r0
 800285c:	2a00      	cmp	r2, #0
 800285e:	dc00      	bgt.n	8002862 <__aeabi_dsub+0x56>
 8002860:	e0ae      	b.n	80029c0 <__aeabi_dsub+0x1b4>
 8002862:	2800      	cmp	r0, #0
 8002864:	d100      	bne.n	8002868 <__aeabi_dsub+0x5c>
 8002866:	e0c1      	b.n	80029ec <__aeabi_dsub+0x1e0>
 8002868:	48be      	ldr	r0, [pc, #760]	; (8002b64 <__aeabi_dsub+0x358>)
 800286a:	4580      	cmp	r8, r0
 800286c:	d100      	bne.n	8002870 <__aeabi_dsub+0x64>
 800286e:	e151      	b.n	8002b14 <__aeabi_dsub+0x308>
 8002870:	2080      	movs	r0, #128	; 0x80
 8002872:	0400      	lsls	r0, r0, #16
 8002874:	4301      	orrs	r1, r0
 8002876:	2a38      	cmp	r2, #56	; 0x38
 8002878:	dd00      	ble.n	800287c <__aeabi_dsub+0x70>
 800287a:	e17b      	b.n	8002b74 <__aeabi_dsub+0x368>
 800287c:	2a1f      	cmp	r2, #31
 800287e:	dd00      	ble.n	8002882 <__aeabi_dsub+0x76>
 8002880:	e1ee      	b.n	8002c60 <__aeabi_dsub+0x454>
 8002882:	2020      	movs	r0, #32
 8002884:	003e      	movs	r6, r7
 8002886:	1a80      	subs	r0, r0, r2
 8002888:	000c      	movs	r4, r1
 800288a:	40d6      	lsrs	r6, r2
 800288c:	40d1      	lsrs	r1, r2
 800288e:	4087      	lsls	r7, r0
 8002890:	4662      	mov	r2, ip
 8002892:	4084      	lsls	r4, r0
 8002894:	1a52      	subs	r2, r2, r1
 8002896:	1e78      	subs	r0, r7, #1
 8002898:	4187      	sbcs	r7, r0
 800289a:	4694      	mov	ip, r2
 800289c:	4334      	orrs	r4, r6
 800289e:	4327      	orrs	r7, r4
 80028a0:	1bdc      	subs	r4, r3, r7
 80028a2:	42a3      	cmp	r3, r4
 80028a4:	419b      	sbcs	r3, r3
 80028a6:	4662      	mov	r2, ip
 80028a8:	425b      	negs	r3, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	4699      	mov	r9, r3
 80028ae:	464b      	mov	r3, r9
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	d400      	bmi.n	80028b6 <__aeabi_dsub+0xaa>
 80028b4:	e118      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 80028b6:	464b      	mov	r3, r9
 80028b8:	0258      	lsls	r0, r3, #9
 80028ba:	0a43      	lsrs	r3, r0, #9
 80028bc:	4699      	mov	r9, r3
 80028be:	464b      	mov	r3, r9
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d100      	bne.n	80028c6 <__aeabi_dsub+0xba>
 80028c4:	e137      	b.n	8002b36 <__aeabi_dsub+0x32a>
 80028c6:	4648      	mov	r0, r9
 80028c8:	f000 fcac 	bl	8003224 <__clzsi2>
 80028cc:	0001      	movs	r1, r0
 80028ce:	3908      	subs	r1, #8
 80028d0:	2320      	movs	r3, #32
 80028d2:	0022      	movs	r2, r4
 80028d4:	4648      	mov	r0, r9
 80028d6:	1a5b      	subs	r3, r3, r1
 80028d8:	40da      	lsrs	r2, r3
 80028da:	4088      	lsls	r0, r1
 80028dc:	408c      	lsls	r4, r1
 80028de:	4643      	mov	r3, r8
 80028e0:	4310      	orrs	r0, r2
 80028e2:	4588      	cmp	r8, r1
 80028e4:	dd00      	ble.n	80028e8 <__aeabi_dsub+0xdc>
 80028e6:	e136      	b.n	8002b56 <__aeabi_dsub+0x34a>
 80028e8:	1ac9      	subs	r1, r1, r3
 80028ea:	1c4b      	adds	r3, r1, #1
 80028ec:	2b1f      	cmp	r3, #31
 80028ee:	dd00      	ble.n	80028f2 <__aeabi_dsub+0xe6>
 80028f0:	e0ea      	b.n	8002ac8 <__aeabi_dsub+0x2bc>
 80028f2:	2220      	movs	r2, #32
 80028f4:	0026      	movs	r6, r4
 80028f6:	1ad2      	subs	r2, r2, r3
 80028f8:	0001      	movs	r1, r0
 80028fa:	4094      	lsls	r4, r2
 80028fc:	40de      	lsrs	r6, r3
 80028fe:	40d8      	lsrs	r0, r3
 8002900:	2300      	movs	r3, #0
 8002902:	4091      	lsls	r1, r2
 8002904:	1e62      	subs	r2, r4, #1
 8002906:	4194      	sbcs	r4, r2
 8002908:	4681      	mov	r9, r0
 800290a:	4698      	mov	r8, r3
 800290c:	4331      	orrs	r1, r6
 800290e:	430c      	orrs	r4, r1
 8002910:	0763      	lsls	r3, r4, #29
 8002912:	d009      	beq.n	8002928 <__aeabi_dsub+0x11c>
 8002914:	230f      	movs	r3, #15
 8002916:	4023      	ands	r3, r4
 8002918:	2b04      	cmp	r3, #4
 800291a:	d005      	beq.n	8002928 <__aeabi_dsub+0x11c>
 800291c:	1d23      	adds	r3, r4, #4
 800291e:	42a3      	cmp	r3, r4
 8002920:	41a4      	sbcs	r4, r4
 8002922:	4264      	negs	r4, r4
 8002924:	44a1      	add	r9, r4
 8002926:	001c      	movs	r4, r3
 8002928:	464b      	mov	r3, r9
 800292a:	021b      	lsls	r3, r3, #8
 800292c:	d400      	bmi.n	8002930 <__aeabi_dsub+0x124>
 800292e:	e0de      	b.n	8002aee <__aeabi_dsub+0x2e2>
 8002930:	4641      	mov	r1, r8
 8002932:	4b8c      	ldr	r3, [pc, #560]	; (8002b64 <__aeabi_dsub+0x358>)
 8002934:	3101      	adds	r1, #1
 8002936:	4299      	cmp	r1, r3
 8002938:	d100      	bne.n	800293c <__aeabi_dsub+0x130>
 800293a:	e0e7      	b.n	8002b0c <__aeabi_dsub+0x300>
 800293c:	464b      	mov	r3, r9
 800293e:	488a      	ldr	r0, [pc, #552]	; (8002b68 <__aeabi_dsub+0x35c>)
 8002940:	08e4      	lsrs	r4, r4, #3
 8002942:	4003      	ands	r3, r0
 8002944:	0018      	movs	r0, r3
 8002946:	0549      	lsls	r1, r1, #21
 8002948:	075b      	lsls	r3, r3, #29
 800294a:	0240      	lsls	r0, r0, #9
 800294c:	4323      	orrs	r3, r4
 800294e:	0d4a      	lsrs	r2, r1, #21
 8002950:	0b04      	lsrs	r4, r0, #12
 8002952:	0512      	lsls	r2, r2, #20
 8002954:	07ed      	lsls	r5, r5, #31
 8002956:	4322      	orrs	r2, r4
 8002958:	432a      	orrs	r2, r5
 800295a:	0018      	movs	r0, r3
 800295c:	0011      	movs	r1, r2
 800295e:	bcf0      	pop	{r4, r5, r6, r7}
 8002960:	46bb      	mov	fp, r7
 8002962:	46b2      	mov	sl, r6
 8002964:	46a9      	mov	r9, r5
 8002966:	46a0      	mov	r8, r4
 8002968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800296a:	4642      	mov	r2, r8
 800296c:	1a12      	subs	r2, r2, r0
 800296e:	2a00      	cmp	r2, #0
 8002970:	dd52      	ble.n	8002a18 <__aeabi_dsub+0x20c>
 8002972:	2800      	cmp	r0, #0
 8002974:	d100      	bne.n	8002978 <__aeabi_dsub+0x16c>
 8002976:	e09c      	b.n	8002ab2 <__aeabi_dsub+0x2a6>
 8002978:	45a0      	cmp	r8, r4
 800297a:	d100      	bne.n	800297e <__aeabi_dsub+0x172>
 800297c:	e0ca      	b.n	8002b14 <__aeabi_dsub+0x308>
 800297e:	2080      	movs	r0, #128	; 0x80
 8002980:	0400      	lsls	r0, r0, #16
 8002982:	4301      	orrs	r1, r0
 8002984:	2a38      	cmp	r2, #56	; 0x38
 8002986:	dd00      	ble.n	800298a <__aeabi_dsub+0x17e>
 8002988:	e149      	b.n	8002c1e <__aeabi_dsub+0x412>
 800298a:	2a1f      	cmp	r2, #31
 800298c:	dc00      	bgt.n	8002990 <__aeabi_dsub+0x184>
 800298e:	e197      	b.n	8002cc0 <__aeabi_dsub+0x4b4>
 8002990:	0010      	movs	r0, r2
 8002992:	000e      	movs	r6, r1
 8002994:	3820      	subs	r0, #32
 8002996:	40c6      	lsrs	r6, r0
 8002998:	2a20      	cmp	r2, #32
 800299a:	d004      	beq.n	80029a6 <__aeabi_dsub+0x19a>
 800299c:	2040      	movs	r0, #64	; 0x40
 800299e:	1a82      	subs	r2, r0, r2
 80029a0:	4091      	lsls	r1, r2
 80029a2:	430f      	orrs	r7, r1
 80029a4:	46b9      	mov	r9, r7
 80029a6:	464c      	mov	r4, r9
 80029a8:	1e62      	subs	r2, r4, #1
 80029aa:	4194      	sbcs	r4, r2
 80029ac:	4334      	orrs	r4, r6
 80029ae:	e13a      	b.n	8002c26 <__aeabi_dsub+0x41a>
 80029b0:	000a      	movs	r2, r1
 80029b2:	433a      	orrs	r2, r7
 80029b4:	d028      	beq.n	8002a08 <__aeabi_dsub+0x1fc>
 80029b6:	46b3      	mov	fp, r6
 80029b8:	42b5      	cmp	r5, r6
 80029ba:	d02b      	beq.n	8002a14 <__aeabi_dsub+0x208>
 80029bc:	4a6b      	ldr	r2, [pc, #428]	; (8002b6c <__aeabi_dsub+0x360>)
 80029be:	4442      	add	r2, r8
 80029c0:	2a00      	cmp	r2, #0
 80029c2:	d05d      	beq.n	8002a80 <__aeabi_dsub+0x274>
 80029c4:	4642      	mov	r2, r8
 80029c6:	4644      	mov	r4, r8
 80029c8:	1a82      	subs	r2, r0, r2
 80029ca:	2c00      	cmp	r4, #0
 80029cc:	d000      	beq.n	80029d0 <__aeabi_dsub+0x1c4>
 80029ce:	e0f5      	b.n	8002bbc <__aeabi_dsub+0x3b0>
 80029d0:	4665      	mov	r5, ip
 80029d2:	431d      	orrs	r5, r3
 80029d4:	d100      	bne.n	80029d8 <__aeabi_dsub+0x1cc>
 80029d6:	e19c      	b.n	8002d12 <__aeabi_dsub+0x506>
 80029d8:	1e55      	subs	r5, r2, #1
 80029da:	2a01      	cmp	r2, #1
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x1d4>
 80029de:	e1fb      	b.n	8002dd8 <__aeabi_dsub+0x5cc>
 80029e0:	4c60      	ldr	r4, [pc, #384]	; (8002b64 <__aeabi_dsub+0x358>)
 80029e2:	42a2      	cmp	r2, r4
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x1dc>
 80029e6:	e1bd      	b.n	8002d64 <__aeabi_dsub+0x558>
 80029e8:	002a      	movs	r2, r5
 80029ea:	e0f0      	b.n	8002bce <__aeabi_dsub+0x3c2>
 80029ec:	0008      	movs	r0, r1
 80029ee:	4338      	orrs	r0, r7
 80029f0:	d100      	bne.n	80029f4 <__aeabi_dsub+0x1e8>
 80029f2:	e0c3      	b.n	8002b7c <__aeabi_dsub+0x370>
 80029f4:	1e50      	subs	r0, r2, #1
 80029f6:	2a01      	cmp	r2, #1
 80029f8:	d100      	bne.n	80029fc <__aeabi_dsub+0x1f0>
 80029fa:	e1a8      	b.n	8002d4e <__aeabi_dsub+0x542>
 80029fc:	4c59      	ldr	r4, [pc, #356]	; (8002b64 <__aeabi_dsub+0x358>)
 80029fe:	42a2      	cmp	r2, r4
 8002a00:	d100      	bne.n	8002a04 <__aeabi_dsub+0x1f8>
 8002a02:	e087      	b.n	8002b14 <__aeabi_dsub+0x308>
 8002a04:	0002      	movs	r2, r0
 8002a06:	e736      	b.n	8002876 <__aeabi_dsub+0x6a>
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4056      	eors	r6, r2
 8002a0c:	46b3      	mov	fp, r6
 8002a0e:	42b5      	cmp	r5, r6
 8002a10:	d000      	beq.n	8002a14 <__aeabi_dsub+0x208>
 8002a12:	e721      	b.n	8002858 <__aeabi_dsub+0x4c>
 8002a14:	4a55      	ldr	r2, [pc, #340]	; (8002b6c <__aeabi_dsub+0x360>)
 8002a16:	4442      	add	r2, r8
 8002a18:	2a00      	cmp	r2, #0
 8002a1a:	d100      	bne.n	8002a1e <__aeabi_dsub+0x212>
 8002a1c:	e0b5      	b.n	8002b8a <__aeabi_dsub+0x37e>
 8002a1e:	4642      	mov	r2, r8
 8002a20:	4644      	mov	r4, r8
 8002a22:	1a82      	subs	r2, r0, r2
 8002a24:	2c00      	cmp	r4, #0
 8002a26:	d100      	bne.n	8002a2a <__aeabi_dsub+0x21e>
 8002a28:	e138      	b.n	8002c9c <__aeabi_dsub+0x490>
 8002a2a:	4e4e      	ldr	r6, [pc, #312]	; (8002b64 <__aeabi_dsub+0x358>)
 8002a2c:	42b0      	cmp	r0, r6
 8002a2e:	d100      	bne.n	8002a32 <__aeabi_dsub+0x226>
 8002a30:	e1de      	b.n	8002df0 <__aeabi_dsub+0x5e4>
 8002a32:	2680      	movs	r6, #128	; 0x80
 8002a34:	4664      	mov	r4, ip
 8002a36:	0436      	lsls	r6, r6, #16
 8002a38:	4334      	orrs	r4, r6
 8002a3a:	46a4      	mov	ip, r4
 8002a3c:	2a38      	cmp	r2, #56	; 0x38
 8002a3e:	dd00      	ble.n	8002a42 <__aeabi_dsub+0x236>
 8002a40:	e196      	b.n	8002d70 <__aeabi_dsub+0x564>
 8002a42:	2a1f      	cmp	r2, #31
 8002a44:	dd00      	ble.n	8002a48 <__aeabi_dsub+0x23c>
 8002a46:	e224      	b.n	8002e92 <__aeabi_dsub+0x686>
 8002a48:	2620      	movs	r6, #32
 8002a4a:	1ab4      	subs	r4, r6, r2
 8002a4c:	46a2      	mov	sl, r4
 8002a4e:	4664      	mov	r4, ip
 8002a50:	4656      	mov	r6, sl
 8002a52:	40b4      	lsls	r4, r6
 8002a54:	46a1      	mov	r9, r4
 8002a56:	001c      	movs	r4, r3
 8002a58:	464e      	mov	r6, r9
 8002a5a:	40d4      	lsrs	r4, r2
 8002a5c:	4326      	orrs	r6, r4
 8002a5e:	0034      	movs	r4, r6
 8002a60:	4656      	mov	r6, sl
 8002a62:	40b3      	lsls	r3, r6
 8002a64:	1e5e      	subs	r6, r3, #1
 8002a66:	41b3      	sbcs	r3, r6
 8002a68:	431c      	orrs	r4, r3
 8002a6a:	4663      	mov	r3, ip
 8002a6c:	40d3      	lsrs	r3, r2
 8002a6e:	18c9      	adds	r1, r1, r3
 8002a70:	19e4      	adds	r4, r4, r7
 8002a72:	42bc      	cmp	r4, r7
 8002a74:	41bf      	sbcs	r7, r7
 8002a76:	427f      	negs	r7, r7
 8002a78:	46b9      	mov	r9, r7
 8002a7a:	4680      	mov	r8, r0
 8002a7c:	4489      	add	r9, r1
 8002a7e:	e0d8      	b.n	8002c32 <__aeabi_dsub+0x426>
 8002a80:	4640      	mov	r0, r8
 8002a82:	4c3b      	ldr	r4, [pc, #236]	; (8002b70 <__aeabi_dsub+0x364>)
 8002a84:	3001      	adds	r0, #1
 8002a86:	4220      	tst	r0, r4
 8002a88:	d000      	beq.n	8002a8c <__aeabi_dsub+0x280>
 8002a8a:	e0b4      	b.n	8002bf6 <__aeabi_dsub+0x3ea>
 8002a8c:	4640      	mov	r0, r8
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d000      	beq.n	8002a94 <__aeabi_dsub+0x288>
 8002a92:	e144      	b.n	8002d1e <__aeabi_dsub+0x512>
 8002a94:	4660      	mov	r0, ip
 8002a96:	4318      	orrs	r0, r3
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x290>
 8002a9a:	e190      	b.n	8002dbe <__aeabi_dsub+0x5b2>
 8002a9c:	0008      	movs	r0, r1
 8002a9e:	4338      	orrs	r0, r7
 8002aa0:	d000      	beq.n	8002aa4 <__aeabi_dsub+0x298>
 8002aa2:	e1aa      	b.n	8002dfa <__aeabi_dsub+0x5ee>
 8002aa4:	4661      	mov	r1, ip
 8002aa6:	08db      	lsrs	r3, r3, #3
 8002aa8:	0749      	lsls	r1, r1, #29
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	4661      	mov	r1, ip
 8002aae:	08cc      	lsrs	r4, r1, #3
 8002ab0:	e027      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002ab2:	0008      	movs	r0, r1
 8002ab4:	4338      	orrs	r0, r7
 8002ab6:	d061      	beq.n	8002b7c <__aeabi_dsub+0x370>
 8002ab8:	1e50      	subs	r0, r2, #1
 8002aba:	2a01      	cmp	r2, #1
 8002abc:	d100      	bne.n	8002ac0 <__aeabi_dsub+0x2b4>
 8002abe:	e139      	b.n	8002d34 <__aeabi_dsub+0x528>
 8002ac0:	42a2      	cmp	r2, r4
 8002ac2:	d027      	beq.n	8002b14 <__aeabi_dsub+0x308>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	e75d      	b.n	8002984 <__aeabi_dsub+0x178>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	391f      	subs	r1, #31
 8002acc:	40ca      	lsrs	r2, r1
 8002ace:	0011      	movs	r1, r2
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d003      	beq.n	8002adc <__aeabi_dsub+0x2d0>
 8002ad4:	2240      	movs	r2, #64	; 0x40
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	4098      	lsls	r0, r3
 8002ada:	4304      	orrs	r4, r0
 8002adc:	1e63      	subs	r3, r4, #1
 8002ade:	419c      	sbcs	r4, r3
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	4699      	mov	r9, r3
 8002ae4:	4698      	mov	r8, r3
 8002ae6:	430c      	orrs	r4, r1
 8002ae8:	0763      	lsls	r3, r4, #29
 8002aea:	d000      	beq.n	8002aee <__aeabi_dsub+0x2e2>
 8002aec:	e712      	b.n	8002914 <__aeabi_dsub+0x108>
 8002aee:	464b      	mov	r3, r9
 8002af0:	464a      	mov	r2, r9
 8002af2:	08e4      	lsrs	r4, r4, #3
 8002af4:	075b      	lsls	r3, r3, #29
 8002af6:	4323      	orrs	r3, r4
 8002af8:	08d4      	lsrs	r4, r2, #3
 8002afa:	4642      	mov	r2, r8
 8002afc:	4919      	ldr	r1, [pc, #100]	; (8002b64 <__aeabi_dsub+0x358>)
 8002afe:	428a      	cmp	r2, r1
 8002b00:	d00e      	beq.n	8002b20 <__aeabi_dsub+0x314>
 8002b02:	0324      	lsls	r4, r4, #12
 8002b04:	0552      	lsls	r2, r2, #21
 8002b06:	0b24      	lsrs	r4, r4, #12
 8002b08:	0d52      	lsrs	r2, r2, #21
 8002b0a:	e722      	b.n	8002952 <__aeabi_dsub+0x146>
 8002b0c:	000a      	movs	r2, r1
 8002b0e:	2400      	movs	r4, #0
 8002b10:	2300      	movs	r3, #0
 8002b12:	e71e      	b.n	8002952 <__aeabi_dsub+0x146>
 8002b14:	08db      	lsrs	r3, r3, #3
 8002b16:	4662      	mov	r2, ip
 8002b18:	0752      	lsls	r2, r2, #29
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	4662      	mov	r2, ip
 8002b1e:	08d4      	lsrs	r4, r2, #3
 8002b20:	001a      	movs	r2, r3
 8002b22:	4322      	orrs	r2, r4
 8002b24:	d100      	bne.n	8002b28 <__aeabi_dsub+0x31c>
 8002b26:	e1fc      	b.n	8002f22 <__aeabi_dsub+0x716>
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	0312      	lsls	r2, r2, #12
 8002b2c:	4314      	orrs	r4, r2
 8002b2e:	0324      	lsls	r4, r4, #12
 8002b30:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <__aeabi_dsub+0x358>)
 8002b32:	0b24      	lsrs	r4, r4, #12
 8002b34:	e70d      	b.n	8002952 <__aeabi_dsub+0x146>
 8002b36:	0020      	movs	r0, r4
 8002b38:	f000 fb74 	bl	8003224 <__clzsi2>
 8002b3c:	0001      	movs	r1, r0
 8002b3e:	3118      	adds	r1, #24
 8002b40:	291f      	cmp	r1, #31
 8002b42:	dc00      	bgt.n	8002b46 <__aeabi_dsub+0x33a>
 8002b44:	e6c4      	b.n	80028d0 <__aeabi_dsub+0xc4>
 8002b46:	3808      	subs	r0, #8
 8002b48:	4084      	lsls	r4, r0
 8002b4a:	4643      	mov	r3, r8
 8002b4c:	0020      	movs	r0, r4
 8002b4e:	2400      	movs	r4, #0
 8002b50:	4588      	cmp	r8, r1
 8002b52:	dc00      	bgt.n	8002b56 <__aeabi_dsub+0x34a>
 8002b54:	e6c8      	b.n	80028e8 <__aeabi_dsub+0xdc>
 8002b56:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <__aeabi_dsub+0x35c>)
 8002b58:	1a5b      	subs	r3, r3, r1
 8002b5a:	4010      	ands	r0, r2
 8002b5c:	4698      	mov	r8, r3
 8002b5e:	4681      	mov	r9, r0
 8002b60:	e6d6      	b.n	8002910 <__aeabi_dsub+0x104>
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	000007ff 	.word	0x000007ff
 8002b68:	ff7fffff 	.word	0xff7fffff
 8002b6c:	fffff801 	.word	0xfffff801
 8002b70:	000007fe 	.word	0x000007fe
 8002b74:	430f      	orrs	r7, r1
 8002b76:	1e7a      	subs	r2, r7, #1
 8002b78:	4197      	sbcs	r7, r2
 8002b7a:	e691      	b.n	80028a0 <__aeabi_dsub+0x94>
 8002b7c:	4661      	mov	r1, ip
 8002b7e:	08db      	lsrs	r3, r3, #3
 8002b80:	0749      	lsls	r1, r1, #29
 8002b82:	430b      	orrs	r3, r1
 8002b84:	4661      	mov	r1, ip
 8002b86:	08cc      	lsrs	r4, r1, #3
 8002b88:	e7b8      	b.n	8002afc <__aeabi_dsub+0x2f0>
 8002b8a:	4640      	mov	r0, r8
 8002b8c:	4cd3      	ldr	r4, [pc, #844]	; (8002edc <__aeabi_dsub+0x6d0>)
 8002b8e:	3001      	adds	r0, #1
 8002b90:	4220      	tst	r0, r4
 8002b92:	d000      	beq.n	8002b96 <__aeabi_dsub+0x38a>
 8002b94:	e0a2      	b.n	8002cdc <__aeabi_dsub+0x4d0>
 8002b96:	4640      	mov	r0, r8
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d000      	beq.n	8002b9e <__aeabi_dsub+0x392>
 8002b9c:	e101      	b.n	8002da2 <__aeabi_dsub+0x596>
 8002b9e:	4660      	mov	r0, ip
 8002ba0:	4318      	orrs	r0, r3
 8002ba2:	d100      	bne.n	8002ba6 <__aeabi_dsub+0x39a>
 8002ba4:	e15e      	b.n	8002e64 <__aeabi_dsub+0x658>
 8002ba6:	0008      	movs	r0, r1
 8002ba8:	4338      	orrs	r0, r7
 8002baa:	d000      	beq.n	8002bae <__aeabi_dsub+0x3a2>
 8002bac:	e15f      	b.n	8002e6e <__aeabi_dsub+0x662>
 8002bae:	4661      	mov	r1, ip
 8002bb0:	08db      	lsrs	r3, r3, #3
 8002bb2:	0749      	lsls	r1, r1, #29
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	4661      	mov	r1, ip
 8002bb8:	08cc      	lsrs	r4, r1, #3
 8002bba:	e7a2      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002bbc:	4dc8      	ldr	r5, [pc, #800]	; (8002ee0 <__aeabi_dsub+0x6d4>)
 8002bbe:	42a8      	cmp	r0, r5
 8002bc0:	d100      	bne.n	8002bc4 <__aeabi_dsub+0x3b8>
 8002bc2:	e0cf      	b.n	8002d64 <__aeabi_dsub+0x558>
 8002bc4:	2580      	movs	r5, #128	; 0x80
 8002bc6:	4664      	mov	r4, ip
 8002bc8:	042d      	lsls	r5, r5, #16
 8002bca:	432c      	orrs	r4, r5
 8002bcc:	46a4      	mov	ip, r4
 8002bce:	2a38      	cmp	r2, #56	; 0x38
 8002bd0:	dc56      	bgt.n	8002c80 <__aeabi_dsub+0x474>
 8002bd2:	2a1f      	cmp	r2, #31
 8002bd4:	dd00      	ble.n	8002bd8 <__aeabi_dsub+0x3cc>
 8002bd6:	e0d1      	b.n	8002d7c <__aeabi_dsub+0x570>
 8002bd8:	2520      	movs	r5, #32
 8002bda:	001e      	movs	r6, r3
 8002bdc:	1aad      	subs	r5, r5, r2
 8002bde:	4664      	mov	r4, ip
 8002be0:	40ab      	lsls	r3, r5
 8002be2:	40ac      	lsls	r4, r5
 8002be4:	40d6      	lsrs	r6, r2
 8002be6:	1e5d      	subs	r5, r3, #1
 8002be8:	41ab      	sbcs	r3, r5
 8002bea:	4334      	orrs	r4, r6
 8002bec:	4323      	orrs	r3, r4
 8002bee:	4664      	mov	r4, ip
 8002bf0:	40d4      	lsrs	r4, r2
 8002bf2:	1b09      	subs	r1, r1, r4
 8002bf4:	e049      	b.n	8002c8a <__aeabi_dsub+0x47e>
 8002bf6:	4660      	mov	r0, ip
 8002bf8:	1bdc      	subs	r4, r3, r7
 8002bfa:	1a46      	subs	r6, r0, r1
 8002bfc:	42a3      	cmp	r3, r4
 8002bfe:	4180      	sbcs	r0, r0
 8002c00:	4240      	negs	r0, r0
 8002c02:	4681      	mov	r9, r0
 8002c04:	0030      	movs	r0, r6
 8002c06:	464e      	mov	r6, r9
 8002c08:	1b80      	subs	r0, r0, r6
 8002c0a:	4681      	mov	r9, r0
 8002c0c:	0200      	lsls	r0, r0, #8
 8002c0e:	d476      	bmi.n	8002cfe <__aeabi_dsub+0x4f2>
 8002c10:	464b      	mov	r3, r9
 8002c12:	4323      	orrs	r3, r4
 8002c14:	d000      	beq.n	8002c18 <__aeabi_dsub+0x40c>
 8002c16:	e652      	b.n	80028be <__aeabi_dsub+0xb2>
 8002c18:	2400      	movs	r4, #0
 8002c1a:	2500      	movs	r5, #0
 8002c1c:	e771      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002c1e:	4339      	orrs	r1, r7
 8002c20:	000c      	movs	r4, r1
 8002c22:	1e62      	subs	r2, r4, #1
 8002c24:	4194      	sbcs	r4, r2
 8002c26:	18e4      	adds	r4, r4, r3
 8002c28:	429c      	cmp	r4, r3
 8002c2a:	419b      	sbcs	r3, r3
 8002c2c:	425b      	negs	r3, r3
 8002c2e:	4463      	add	r3, ip
 8002c30:	4699      	mov	r9, r3
 8002c32:	464b      	mov	r3, r9
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	d400      	bmi.n	8002c3a <__aeabi_dsub+0x42e>
 8002c38:	e756      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	469c      	mov	ip, r3
 8002c3e:	4ba8      	ldr	r3, [pc, #672]	; (8002ee0 <__aeabi_dsub+0x6d4>)
 8002c40:	44e0      	add	r8, ip
 8002c42:	4598      	cmp	r8, r3
 8002c44:	d038      	beq.n	8002cb8 <__aeabi_dsub+0x4ac>
 8002c46:	464b      	mov	r3, r9
 8002c48:	48a6      	ldr	r0, [pc, #664]	; (8002ee4 <__aeabi_dsub+0x6d8>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4003      	ands	r3, r0
 8002c4e:	0018      	movs	r0, r3
 8002c50:	0863      	lsrs	r3, r4, #1
 8002c52:	4014      	ands	r4, r2
 8002c54:	431c      	orrs	r4, r3
 8002c56:	07c3      	lsls	r3, r0, #31
 8002c58:	431c      	orrs	r4, r3
 8002c5a:	0843      	lsrs	r3, r0, #1
 8002c5c:	4699      	mov	r9, r3
 8002c5e:	e657      	b.n	8002910 <__aeabi_dsub+0x104>
 8002c60:	0010      	movs	r0, r2
 8002c62:	000e      	movs	r6, r1
 8002c64:	3820      	subs	r0, #32
 8002c66:	40c6      	lsrs	r6, r0
 8002c68:	2a20      	cmp	r2, #32
 8002c6a:	d004      	beq.n	8002c76 <__aeabi_dsub+0x46a>
 8002c6c:	2040      	movs	r0, #64	; 0x40
 8002c6e:	1a82      	subs	r2, r0, r2
 8002c70:	4091      	lsls	r1, r2
 8002c72:	430f      	orrs	r7, r1
 8002c74:	46b9      	mov	r9, r7
 8002c76:	464f      	mov	r7, r9
 8002c78:	1e7a      	subs	r2, r7, #1
 8002c7a:	4197      	sbcs	r7, r2
 8002c7c:	4337      	orrs	r7, r6
 8002c7e:	e60f      	b.n	80028a0 <__aeabi_dsub+0x94>
 8002c80:	4662      	mov	r2, ip
 8002c82:	431a      	orrs	r2, r3
 8002c84:	0013      	movs	r3, r2
 8002c86:	1e5a      	subs	r2, r3, #1
 8002c88:	4193      	sbcs	r3, r2
 8002c8a:	1afc      	subs	r4, r7, r3
 8002c8c:	42a7      	cmp	r7, r4
 8002c8e:	41bf      	sbcs	r7, r7
 8002c90:	427f      	negs	r7, r7
 8002c92:	1bcb      	subs	r3, r1, r7
 8002c94:	4699      	mov	r9, r3
 8002c96:	465d      	mov	r5, fp
 8002c98:	4680      	mov	r8, r0
 8002c9a:	e608      	b.n	80028ae <__aeabi_dsub+0xa2>
 8002c9c:	4666      	mov	r6, ip
 8002c9e:	431e      	orrs	r6, r3
 8002ca0:	d100      	bne.n	8002ca4 <__aeabi_dsub+0x498>
 8002ca2:	e0be      	b.n	8002e22 <__aeabi_dsub+0x616>
 8002ca4:	1e56      	subs	r6, r2, #1
 8002ca6:	2a01      	cmp	r2, #1
 8002ca8:	d100      	bne.n	8002cac <__aeabi_dsub+0x4a0>
 8002caa:	e109      	b.n	8002ec0 <__aeabi_dsub+0x6b4>
 8002cac:	4c8c      	ldr	r4, [pc, #560]	; (8002ee0 <__aeabi_dsub+0x6d4>)
 8002cae:	42a2      	cmp	r2, r4
 8002cb0:	d100      	bne.n	8002cb4 <__aeabi_dsub+0x4a8>
 8002cb2:	e119      	b.n	8002ee8 <__aeabi_dsub+0x6dc>
 8002cb4:	0032      	movs	r2, r6
 8002cb6:	e6c1      	b.n	8002a3c <__aeabi_dsub+0x230>
 8002cb8:	4642      	mov	r2, r8
 8002cba:	2400      	movs	r4, #0
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e648      	b.n	8002952 <__aeabi_dsub+0x146>
 8002cc0:	2020      	movs	r0, #32
 8002cc2:	000c      	movs	r4, r1
 8002cc4:	1a80      	subs	r0, r0, r2
 8002cc6:	003e      	movs	r6, r7
 8002cc8:	4087      	lsls	r7, r0
 8002cca:	4084      	lsls	r4, r0
 8002ccc:	40d6      	lsrs	r6, r2
 8002cce:	1e78      	subs	r0, r7, #1
 8002cd0:	4187      	sbcs	r7, r0
 8002cd2:	40d1      	lsrs	r1, r2
 8002cd4:	4334      	orrs	r4, r6
 8002cd6:	433c      	orrs	r4, r7
 8002cd8:	448c      	add	ip, r1
 8002cda:	e7a4      	b.n	8002c26 <__aeabi_dsub+0x41a>
 8002cdc:	4a80      	ldr	r2, [pc, #512]	; (8002ee0 <__aeabi_dsub+0x6d4>)
 8002cde:	4290      	cmp	r0, r2
 8002ce0:	d100      	bne.n	8002ce4 <__aeabi_dsub+0x4d8>
 8002ce2:	e0e9      	b.n	8002eb8 <__aeabi_dsub+0x6ac>
 8002ce4:	19df      	adds	r7, r3, r7
 8002ce6:	429f      	cmp	r7, r3
 8002ce8:	419b      	sbcs	r3, r3
 8002cea:	4461      	add	r1, ip
 8002cec:	425b      	negs	r3, r3
 8002cee:	18c9      	adds	r1, r1, r3
 8002cf0:	07cc      	lsls	r4, r1, #31
 8002cf2:	087f      	lsrs	r7, r7, #1
 8002cf4:	084b      	lsrs	r3, r1, #1
 8002cf6:	4699      	mov	r9, r3
 8002cf8:	4680      	mov	r8, r0
 8002cfa:	433c      	orrs	r4, r7
 8002cfc:	e6f4      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002cfe:	1afc      	subs	r4, r7, r3
 8002d00:	42a7      	cmp	r7, r4
 8002d02:	41bf      	sbcs	r7, r7
 8002d04:	4663      	mov	r3, ip
 8002d06:	427f      	negs	r7, r7
 8002d08:	1ac9      	subs	r1, r1, r3
 8002d0a:	1bcb      	subs	r3, r1, r7
 8002d0c:	4699      	mov	r9, r3
 8002d0e:	465d      	mov	r5, fp
 8002d10:	e5d5      	b.n	80028be <__aeabi_dsub+0xb2>
 8002d12:	08ff      	lsrs	r7, r7, #3
 8002d14:	074b      	lsls	r3, r1, #29
 8002d16:	465d      	mov	r5, fp
 8002d18:	433b      	orrs	r3, r7
 8002d1a:	08cc      	lsrs	r4, r1, #3
 8002d1c:	e6ee      	b.n	8002afc <__aeabi_dsub+0x2f0>
 8002d1e:	4662      	mov	r2, ip
 8002d20:	431a      	orrs	r2, r3
 8002d22:	d000      	beq.n	8002d26 <__aeabi_dsub+0x51a>
 8002d24:	e082      	b.n	8002e2c <__aeabi_dsub+0x620>
 8002d26:	000b      	movs	r3, r1
 8002d28:	433b      	orrs	r3, r7
 8002d2a:	d11b      	bne.n	8002d64 <__aeabi_dsub+0x558>
 8002d2c:	2480      	movs	r4, #128	; 0x80
 8002d2e:	2500      	movs	r5, #0
 8002d30:	0324      	lsls	r4, r4, #12
 8002d32:	e6f9      	b.n	8002b28 <__aeabi_dsub+0x31c>
 8002d34:	19dc      	adds	r4, r3, r7
 8002d36:	429c      	cmp	r4, r3
 8002d38:	419b      	sbcs	r3, r3
 8002d3a:	4461      	add	r1, ip
 8002d3c:	4689      	mov	r9, r1
 8002d3e:	425b      	negs	r3, r3
 8002d40:	4499      	add	r9, r3
 8002d42:	464b      	mov	r3, r9
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	d444      	bmi.n	8002dd2 <__aeabi_dsub+0x5c6>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	4698      	mov	r8, r3
 8002d4c:	e6cc      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002d4e:	1bdc      	subs	r4, r3, r7
 8002d50:	4662      	mov	r2, ip
 8002d52:	42a3      	cmp	r3, r4
 8002d54:	419b      	sbcs	r3, r3
 8002d56:	1a51      	subs	r1, r2, r1
 8002d58:	425b      	negs	r3, r3
 8002d5a:	1acb      	subs	r3, r1, r3
 8002d5c:	4699      	mov	r9, r3
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4698      	mov	r8, r3
 8002d62:	e5a4      	b.n	80028ae <__aeabi_dsub+0xa2>
 8002d64:	08ff      	lsrs	r7, r7, #3
 8002d66:	074b      	lsls	r3, r1, #29
 8002d68:	465d      	mov	r5, fp
 8002d6a:	433b      	orrs	r3, r7
 8002d6c:	08cc      	lsrs	r4, r1, #3
 8002d6e:	e6d7      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002d70:	4662      	mov	r2, ip
 8002d72:	431a      	orrs	r2, r3
 8002d74:	0014      	movs	r4, r2
 8002d76:	1e63      	subs	r3, r4, #1
 8002d78:	419c      	sbcs	r4, r3
 8002d7a:	e679      	b.n	8002a70 <__aeabi_dsub+0x264>
 8002d7c:	0015      	movs	r5, r2
 8002d7e:	4664      	mov	r4, ip
 8002d80:	3d20      	subs	r5, #32
 8002d82:	40ec      	lsrs	r4, r5
 8002d84:	46a0      	mov	r8, r4
 8002d86:	2a20      	cmp	r2, #32
 8002d88:	d005      	beq.n	8002d96 <__aeabi_dsub+0x58a>
 8002d8a:	2540      	movs	r5, #64	; 0x40
 8002d8c:	4664      	mov	r4, ip
 8002d8e:	1aaa      	subs	r2, r5, r2
 8002d90:	4094      	lsls	r4, r2
 8002d92:	4323      	orrs	r3, r4
 8002d94:	469a      	mov	sl, r3
 8002d96:	4654      	mov	r4, sl
 8002d98:	1e63      	subs	r3, r4, #1
 8002d9a:	419c      	sbcs	r4, r3
 8002d9c:	4643      	mov	r3, r8
 8002d9e:	4323      	orrs	r3, r4
 8002da0:	e773      	b.n	8002c8a <__aeabi_dsub+0x47e>
 8002da2:	4662      	mov	r2, ip
 8002da4:	431a      	orrs	r2, r3
 8002da6:	d023      	beq.n	8002df0 <__aeabi_dsub+0x5e4>
 8002da8:	000a      	movs	r2, r1
 8002daa:	433a      	orrs	r2, r7
 8002dac:	d000      	beq.n	8002db0 <__aeabi_dsub+0x5a4>
 8002dae:	e0a0      	b.n	8002ef2 <__aeabi_dsub+0x6e6>
 8002db0:	4662      	mov	r2, ip
 8002db2:	08db      	lsrs	r3, r3, #3
 8002db4:	0752      	lsls	r2, r2, #29
 8002db6:	4313      	orrs	r3, r2
 8002db8:	4662      	mov	r2, ip
 8002dba:	08d4      	lsrs	r4, r2, #3
 8002dbc:	e6b0      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002dbe:	000b      	movs	r3, r1
 8002dc0:	433b      	orrs	r3, r7
 8002dc2:	d100      	bne.n	8002dc6 <__aeabi_dsub+0x5ba>
 8002dc4:	e728      	b.n	8002c18 <__aeabi_dsub+0x40c>
 8002dc6:	08ff      	lsrs	r7, r7, #3
 8002dc8:	074b      	lsls	r3, r1, #29
 8002dca:	465d      	mov	r5, fp
 8002dcc:	433b      	orrs	r3, r7
 8002dce:	08cc      	lsrs	r4, r1, #3
 8002dd0:	e697      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	4698      	mov	r8, r3
 8002dd6:	e736      	b.n	8002c46 <__aeabi_dsub+0x43a>
 8002dd8:	1afc      	subs	r4, r7, r3
 8002dda:	42a7      	cmp	r7, r4
 8002ddc:	41bf      	sbcs	r7, r7
 8002dde:	4663      	mov	r3, ip
 8002de0:	427f      	negs	r7, r7
 8002de2:	1ac9      	subs	r1, r1, r3
 8002de4:	1bcb      	subs	r3, r1, r7
 8002de6:	4699      	mov	r9, r3
 8002de8:	2301      	movs	r3, #1
 8002dea:	465d      	mov	r5, fp
 8002dec:	4698      	mov	r8, r3
 8002dee:	e55e      	b.n	80028ae <__aeabi_dsub+0xa2>
 8002df0:	074b      	lsls	r3, r1, #29
 8002df2:	08ff      	lsrs	r7, r7, #3
 8002df4:	433b      	orrs	r3, r7
 8002df6:	08cc      	lsrs	r4, r1, #3
 8002df8:	e692      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002dfa:	1bdc      	subs	r4, r3, r7
 8002dfc:	4660      	mov	r0, ip
 8002dfe:	42a3      	cmp	r3, r4
 8002e00:	41b6      	sbcs	r6, r6
 8002e02:	1a40      	subs	r0, r0, r1
 8002e04:	4276      	negs	r6, r6
 8002e06:	1b80      	subs	r0, r0, r6
 8002e08:	4681      	mov	r9, r0
 8002e0a:	0200      	lsls	r0, r0, #8
 8002e0c:	d560      	bpl.n	8002ed0 <__aeabi_dsub+0x6c4>
 8002e0e:	1afc      	subs	r4, r7, r3
 8002e10:	42a7      	cmp	r7, r4
 8002e12:	41bf      	sbcs	r7, r7
 8002e14:	4663      	mov	r3, ip
 8002e16:	427f      	negs	r7, r7
 8002e18:	1ac9      	subs	r1, r1, r3
 8002e1a:	1bcb      	subs	r3, r1, r7
 8002e1c:	4699      	mov	r9, r3
 8002e1e:	465d      	mov	r5, fp
 8002e20:	e576      	b.n	8002910 <__aeabi_dsub+0x104>
 8002e22:	08ff      	lsrs	r7, r7, #3
 8002e24:	074b      	lsls	r3, r1, #29
 8002e26:	433b      	orrs	r3, r7
 8002e28:	08cc      	lsrs	r4, r1, #3
 8002e2a:	e667      	b.n	8002afc <__aeabi_dsub+0x2f0>
 8002e2c:	000a      	movs	r2, r1
 8002e2e:	08db      	lsrs	r3, r3, #3
 8002e30:	433a      	orrs	r2, r7
 8002e32:	d100      	bne.n	8002e36 <__aeabi_dsub+0x62a>
 8002e34:	e66f      	b.n	8002b16 <__aeabi_dsub+0x30a>
 8002e36:	4662      	mov	r2, ip
 8002e38:	0752      	lsls	r2, r2, #29
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	4662      	mov	r2, ip
 8002e3e:	08d4      	lsrs	r4, r2, #3
 8002e40:	2280      	movs	r2, #128	; 0x80
 8002e42:	0312      	lsls	r2, r2, #12
 8002e44:	4214      	tst	r4, r2
 8002e46:	d007      	beq.n	8002e58 <__aeabi_dsub+0x64c>
 8002e48:	08c8      	lsrs	r0, r1, #3
 8002e4a:	4210      	tst	r0, r2
 8002e4c:	d104      	bne.n	8002e58 <__aeabi_dsub+0x64c>
 8002e4e:	465d      	mov	r5, fp
 8002e50:	0004      	movs	r4, r0
 8002e52:	08fb      	lsrs	r3, r7, #3
 8002e54:	0749      	lsls	r1, r1, #29
 8002e56:	430b      	orrs	r3, r1
 8002e58:	0f5a      	lsrs	r2, r3, #29
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	08db      	lsrs	r3, r3, #3
 8002e5e:	0752      	lsls	r2, r2, #29
 8002e60:	4313      	orrs	r3, r2
 8002e62:	e65d      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002e64:	074b      	lsls	r3, r1, #29
 8002e66:	08ff      	lsrs	r7, r7, #3
 8002e68:	433b      	orrs	r3, r7
 8002e6a:	08cc      	lsrs	r4, r1, #3
 8002e6c:	e649      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002e6e:	19dc      	adds	r4, r3, r7
 8002e70:	429c      	cmp	r4, r3
 8002e72:	419b      	sbcs	r3, r3
 8002e74:	4461      	add	r1, ip
 8002e76:	4689      	mov	r9, r1
 8002e78:	425b      	negs	r3, r3
 8002e7a:	4499      	add	r9, r3
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	d400      	bmi.n	8002e84 <__aeabi_dsub+0x678>
 8002e82:	e631      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002e84:	464a      	mov	r2, r9
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <__aeabi_dsub+0x6d8>)
 8002e88:	401a      	ands	r2, r3
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	4691      	mov	r9, r2
 8002e8e:	4698      	mov	r8, r3
 8002e90:	e62a      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002e92:	0016      	movs	r6, r2
 8002e94:	4664      	mov	r4, ip
 8002e96:	3e20      	subs	r6, #32
 8002e98:	40f4      	lsrs	r4, r6
 8002e9a:	46a0      	mov	r8, r4
 8002e9c:	2a20      	cmp	r2, #32
 8002e9e:	d005      	beq.n	8002eac <__aeabi_dsub+0x6a0>
 8002ea0:	2640      	movs	r6, #64	; 0x40
 8002ea2:	4664      	mov	r4, ip
 8002ea4:	1ab2      	subs	r2, r6, r2
 8002ea6:	4094      	lsls	r4, r2
 8002ea8:	4323      	orrs	r3, r4
 8002eaa:	469a      	mov	sl, r3
 8002eac:	4654      	mov	r4, sl
 8002eae:	1e63      	subs	r3, r4, #1
 8002eb0:	419c      	sbcs	r4, r3
 8002eb2:	4643      	mov	r3, r8
 8002eb4:	431c      	orrs	r4, r3
 8002eb6:	e5db      	b.n	8002a70 <__aeabi_dsub+0x264>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	2400      	movs	r4, #0
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e548      	b.n	8002952 <__aeabi_dsub+0x146>
 8002ec0:	19dc      	adds	r4, r3, r7
 8002ec2:	42bc      	cmp	r4, r7
 8002ec4:	41bf      	sbcs	r7, r7
 8002ec6:	4461      	add	r1, ip
 8002ec8:	4689      	mov	r9, r1
 8002eca:	427f      	negs	r7, r7
 8002ecc:	44b9      	add	r9, r7
 8002ece:	e738      	b.n	8002d42 <__aeabi_dsub+0x536>
 8002ed0:	464b      	mov	r3, r9
 8002ed2:	4323      	orrs	r3, r4
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x6cc>
 8002ed6:	e69f      	b.n	8002c18 <__aeabi_dsub+0x40c>
 8002ed8:	e606      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	000007fe 	.word	0x000007fe
 8002ee0:	000007ff 	.word	0x000007ff
 8002ee4:	ff7fffff 	.word	0xff7fffff
 8002ee8:	08ff      	lsrs	r7, r7, #3
 8002eea:	074b      	lsls	r3, r1, #29
 8002eec:	433b      	orrs	r3, r7
 8002eee:	08cc      	lsrs	r4, r1, #3
 8002ef0:	e616      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002ef2:	4662      	mov	r2, ip
 8002ef4:	08db      	lsrs	r3, r3, #3
 8002ef6:	0752      	lsls	r2, r2, #29
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	4662      	mov	r2, ip
 8002efc:	08d4      	lsrs	r4, r2, #3
 8002efe:	2280      	movs	r2, #128	; 0x80
 8002f00:	0312      	lsls	r2, r2, #12
 8002f02:	4214      	tst	r4, r2
 8002f04:	d007      	beq.n	8002f16 <__aeabi_dsub+0x70a>
 8002f06:	08c8      	lsrs	r0, r1, #3
 8002f08:	4210      	tst	r0, r2
 8002f0a:	d104      	bne.n	8002f16 <__aeabi_dsub+0x70a>
 8002f0c:	465d      	mov	r5, fp
 8002f0e:	0004      	movs	r4, r0
 8002f10:	08fb      	lsrs	r3, r7, #3
 8002f12:	0749      	lsls	r1, r1, #29
 8002f14:	430b      	orrs	r3, r1
 8002f16:	0f5a      	lsrs	r2, r3, #29
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	0752      	lsls	r2, r2, #29
 8002f1c:	08db      	lsrs	r3, r3, #3
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	e5fe      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002f22:	2300      	movs	r3, #0
 8002f24:	4a01      	ldr	r2, [pc, #4]	; (8002f2c <__aeabi_dsub+0x720>)
 8002f26:	001c      	movs	r4, r3
 8002f28:	e513      	b.n	8002952 <__aeabi_dsub+0x146>
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	000007ff 	.word	0x000007ff

08002f30 <__aeabi_dcmpun>:
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	0005      	movs	r5, r0
 8002f34:	480c      	ldr	r0, [pc, #48]	; (8002f68 <__aeabi_dcmpun+0x38>)
 8002f36:	031c      	lsls	r4, r3, #12
 8002f38:	0016      	movs	r6, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	030a      	lsls	r2, r1, #12
 8002f3e:	0049      	lsls	r1, r1, #1
 8002f40:	0b12      	lsrs	r2, r2, #12
 8002f42:	0d49      	lsrs	r1, r1, #21
 8002f44:	0b24      	lsrs	r4, r4, #12
 8002f46:	0d5b      	lsrs	r3, r3, #21
 8002f48:	4281      	cmp	r1, r0
 8002f4a:	d008      	beq.n	8002f5e <__aeabi_dcmpun+0x2e>
 8002f4c:	4a06      	ldr	r2, [pc, #24]	; (8002f68 <__aeabi_dcmpun+0x38>)
 8002f4e:	2000      	movs	r0, #0
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d103      	bne.n	8002f5c <__aeabi_dcmpun+0x2c>
 8002f54:	0020      	movs	r0, r4
 8002f56:	4330      	orrs	r0, r6
 8002f58:	1e43      	subs	r3, r0, #1
 8002f5a:	4198      	sbcs	r0, r3
 8002f5c:	bd70      	pop	{r4, r5, r6, pc}
 8002f5e:	2001      	movs	r0, #1
 8002f60:	432a      	orrs	r2, r5
 8002f62:	d1fb      	bne.n	8002f5c <__aeabi_dcmpun+0x2c>
 8002f64:	e7f2      	b.n	8002f4c <__aeabi_dcmpun+0x1c>
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	000007ff 	.word	0x000007ff

08002f6c <__aeabi_d2iz>:
 8002f6c:	000a      	movs	r2, r1
 8002f6e:	b530      	push	{r4, r5, lr}
 8002f70:	4c13      	ldr	r4, [pc, #76]	; (8002fc0 <__aeabi_d2iz+0x54>)
 8002f72:	0053      	lsls	r3, r2, #1
 8002f74:	0309      	lsls	r1, r1, #12
 8002f76:	0005      	movs	r5, r0
 8002f78:	0b09      	lsrs	r1, r1, #12
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	0d5b      	lsrs	r3, r3, #21
 8002f7e:	0fd2      	lsrs	r2, r2, #31
 8002f80:	42a3      	cmp	r3, r4
 8002f82:	dd04      	ble.n	8002f8e <__aeabi_d2iz+0x22>
 8002f84:	480f      	ldr	r0, [pc, #60]	; (8002fc4 <__aeabi_d2iz+0x58>)
 8002f86:	4283      	cmp	r3, r0
 8002f88:	dd02      	ble.n	8002f90 <__aeabi_d2iz+0x24>
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <__aeabi_d2iz+0x5c>)
 8002f8c:	18d0      	adds	r0, r2, r3
 8002f8e:	bd30      	pop	{r4, r5, pc}
 8002f90:	2080      	movs	r0, #128	; 0x80
 8002f92:	0340      	lsls	r0, r0, #13
 8002f94:	4301      	orrs	r1, r0
 8002f96:	480d      	ldr	r0, [pc, #52]	; (8002fcc <__aeabi_d2iz+0x60>)
 8002f98:	1ac0      	subs	r0, r0, r3
 8002f9a:	281f      	cmp	r0, #31
 8002f9c:	dd08      	ble.n	8002fb0 <__aeabi_d2iz+0x44>
 8002f9e:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <__aeabi_d2iz+0x64>)
 8002fa0:	1ac3      	subs	r3, r0, r3
 8002fa2:	40d9      	lsrs	r1, r3
 8002fa4:	000b      	movs	r3, r1
 8002fa6:	4258      	negs	r0, r3
 8002fa8:	2a00      	cmp	r2, #0
 8002faa:	d1f0      	bne.n	8002f8e <__aeabi_d2iz+0x22>
 8002fac:	0018      	movs	r0, r3
 8002fae:	e7ee      	b.n	8002f8e <__aeabi_d2iz+0x22>
 8002fb0:	4c08      	ldr	r4, [pc, #32]	; (8002fd4 <__aeabi_d2iz+0x68>)
 8002fb2:	40c5      	lsrs	r5, r0
 8002fb4:	46a4      	mov	ip, r4
 8002fb6:	4463      	add	r3, ip
 8002fb8:	4099      	lsls	r1, r3
 8002fba:	000b      	movs	r3, r1
 8002fbc:	432b      	orrs	r3, r5
 8002fbe:	e7f2      	b.n	8002fa6 <__aeabi_d2iz+0x3a>
 8002fc0:	000003fe 	.word	0x000003fe
 8002fc4:	0000041d 	.word	0x0000041d
 8002fc8:	7fffffff 	.word	0x7fffffff
 8002fcc:	00000433 	.word	0x00000433
 8002fd0:	00000413 	.word	0x00000413
 8002fd4:	fffffbed 	.word	0xfffffbed

08002fd8 <__aeabi_i2d>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d016      	beq.n	800300c <__aeabi_i2d+0x34>
 8002fde:	17c3      	asrs	r3, r0, #31
 8002fe0:	18c5      	adds	r5, r0, r3
 8002fe2:	405d      	eors	r5, r3
 8002fe4:	0fc4      	lsrs	r4, r0, #31
 8002fe6:	0028      	movs	r0, r5
 8002fe8:	f000 f91c 	bl	8003224 <__clzsi2>
 8002fec:	4a11      	ldr	r2, [pc, #68]	; (8003034 <__aeabi_i2d+0x5c>)
 8002fee:	1a12      	subs	r2, r2, r0
 8002ff0:	280a      	cmp	r0, #10
 8002ff2:	dc16      	bgt.n	8003022 <__aeabi_i2d+0x4a>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	002e      	movs	r6, r5
 8002ff8:	3315      	adds	r3, #21
 8002ffa:	409e      	lsls	r6, r3
 8002ffc:	230b      	movs	r3, #11
 8002ffe:	1a18      	subs	r0, r3, r0
 8003000:	40c5      	lsrs	r5, r0
 8003002:	0552      	lsls	r2, r2, #21
 8003004:	032d      	lsls	r5, r5, #12
 8003006:	0b2d      	lsrs	r5, r5, #12
 8003008:	0d53      	lsrs	r3, r2, #21
 800300a:	e003      	b.n	8003014 <__aeabi_i2d+0x3c>
 800300c:	2400      	movs	r4, #0
 800300e:	2300      	movs	r3, #0
 8003010:	2500      	movs	r5, #0
 8003012:	2600      	movs	r6, #0
 8003014:	051b      	lsls	r3, r3, #20
 8003016:	432b      	orrs	r3, r5
 8003018:	07e4      	lsls	r4, r4, #31
 800301a:	4323      	orrs	r3, r4
 800301c:	0030      	movs	r0, r6
 800301e:	0019      	movs	r1, r3
 8003020:	bd70      	pop	{r4, r5, r6, pc}
 8003022:	380b      	subs	r0, #11
 8003024:	4085      	lsls	r5, r0
 8003026:	0552      	lsls	r2, r2, #21
 8003028:	032d      	lsls	r5, r5, #12
 800302a:	2600      	movs	r6, #0
 800302c:	0b2d      	lsrs	r5, r5, #12
 800302e:	0d53      	lsrs	r3, r2, #21
 8003030:	e7f0      	b.n	8003014 <__aeabi_i2d+0x3c>
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	0000041e 	.word	0x0000041e

08003038 <__aeabi_ui2d>:
 8003038:	b510      	push	{r4, lr}
 800303a:	1e04      	subs	r4, r0, #0
 800303c:	d010      	beq.n	8003060 <__aeabi_ui2d+0x28>
 800303e:	f000 f8f1 	bl	8003224 <__clzsi2>
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <__aeabi_ui2d+0x48>)
 8003044:	1a1b      	subs	r3, r3, r0
 8003046:	280a      	cmp	r0, #10
 8003048:	dc11      	bgt.n	800306e <__aeabi_ui2d+0x36>
 800304a:	220b      	movs	r2, #11
 800304c:	0021      	movs	r1, r4
 800304e:	1a12      	subs	r2, r2, r0
 8003050:	40d1      	lsrs	r1, r2
 8003052:	3015      	adds	r0, #21
 8003054:	030a      	lsls	r2, r1, #12
 8003056:	055b      	lsls	r3, r3, #21
 8003058:	4084      	lsls	r4, r0
 800305a:	0b12      	lsrs	r2, r2, #12
 800305c:	0d5b      	lsrs	r3, r3, #21
 800305e:	e001      	b.n	8003064 <__aeabi_ui2d+0x2c>
 8003060:	2300      	movs	r3, #0
 8003062:	2200      	movs	r2, #0
 8003064:	051b      	lsls	r3, r3, #20
 8003066:	4313      	orrs	r3, r2
 8003068:	0020      	movs	r0, r4
 800306a:	0019      	movs	r1, r3
 800306c:	bd10      	pop	{r4, pc}
 800306e:	0022      	movs	r2, r4
 8003070:	380b      	subs	r0, #11
 8003072:	4082      	lsls	r2, r0
 8003074:	055b      	lsls	r3, r3, #21
 8003076:	0312      	lsls	r2, r2, #12
 8003078:	2400      	movs	r4, #0
 800307a:	0b12      	lsrs	r2, r2, #12
 800307c:	0d5b      	lsrs	r3, r3, #21
 800307e:	e7f1      	b.n	8003064 <__aeabi_ui2d+0x2c>
 8003080:	0000041e 	.word	0x0000041e

08003084 <__aeabi_f2d>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	0043      	lsls	r3, r0, #1
 8003088:	0246      	lsls	r6, r0, #9
 800308a:	0fc4      	lsrs	r4, r0, #31
 800308c:	20fe      	movs	r0, #254	; 0xfe
 800308e:	0e1b      	lsrs	r3, r3, #24
 8003090:	1c59      	adds	r1, r3, #1
 8003092:	0a75      	lsrs	r5, r6, #9
 8003094:	4208      	tst	r0, r1
 8003096:	d00c      	beq.n	80030b2 <__aeabi_f2d+0x2e>
 8003098:	22e0      	movs	r2, #224	; 0xe0
 800309a:	0092      	lsls	r2, r2, #2
 800309c:	4694      	mov	ip, r2
 800309e:	076d      	lsls	r5, r5, #29
 80030a0:	0b36      	lsrs	r6, r6, #12
 80030a2:	4463      	add	r3, ip
 80030a4:	051b      	lsls	r3, r3, #20
 80030a6:	4333      	orrs	r3, r6
 80030a8:	07e4      	lsls	r4, r4, #31
 80030aa:	4323      	orrs	r3, r4
 80030ac:	0028      	movs	r0, r5
 80030ae:	0019      	movs	r1, r3
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d114      	bne.n	80030e0 <__aeabi_f2d+0x5c>
 80030b6:	2d00      	cmp	r5, #0
 80030b8:	d01b      	beq.n	80030f2 <__aeabi_f2d+0x6e>
 80030ba:	0028      	movs	r0, r5
 80030bc:	f000 f8b2 	bl	8003224 <__clzsi2>
 80030c0:	280a      	cmp	r0, #10
 80030c2:	dc1c      	bgt.n	80030fe <__aeabi_f2d+0x7a>
 80030c4:	230b      	movs	r3, #11
 80030c6:	002e      	movs	r6, r5
 80030c8:	1a1b      	subs	r3, r3, r0
 80030ca:	40de      	lsrs	r6, r3
 80030cc:	0003      	movs	r3, r0
 80030ce:	3315      	adds	r3, #21
 80030d0:	409d      	lsls	r5, r3
 80030d2:	4a0e      	ldr	r2, [pc, #56]	; (800310c <__aeabi_f2d+0x88>)
 80030d4:	0336      	lsls	r6, r6, #12
 80030d6:	1a12      	subs	r2, r2, r0
 80030d8:	0552      	lsls	r2, r2, #21
 80030da:	0b36      	lsrs	r6, r6, #12
 80030dc:	0d53      	lsrs	r3, r2, #21
 80030de:	e7e1      	b.n	80030a4 <__aeabi_f2d+0x20>
 80030e0:	2d00      	cmp	r5, #0
 80030e2:	d009      	beq.n	80030f8 <__aeabi_f2d+0x74>
 80030e4:	2280      	movs	r2, #128	; 0x80
 80030e6:	0b36      	lsrs	r6, r6, #12
 80030e8:	0312      	lsls	r2, r2, #12
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <__aeabi_f2d+0x8c>)
 80030ec:	076d      	lsls	r5, r5, #29
 80030ee:	4316      	orrs	r6, r2
 80030f0:	e7d8      	b.n	80030a4 <__aeabi_f2d+0x20>
 80030f2:	2300      	movs	r3, #0
 80030f4:	2600      	movs	r6, #0
 80030f6:	e7d5      	b.n	80030a4 <__aeabi_f2d+0x20>
 80030f8:	2600      	movs	r6, #0
 80030fa:	4b05      	ldr	r3, [pc, #20]	; (8003110 <__aeabi_f2d+0x8c>)
 80030fc:	e7d2      	b.n	80030a4 <__aeabi_f2d+0x20>
 80030fe:	0003      	movs	r3, r0
 8003100:	3b0b      	subs	r3, #11
 8003102:	409d      	lsls	r5, r3
 8003104:	002e      	movs	r6, r5
 8003106:	2500      	movs	r5, #0
 8003108:	e7e3      	b.n	80030d2 <__aeabi_f2d+0x4e>
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	00000389 	.word	0x00000389
 8003110:	000007ff 	.word	0x000007ff

08003114 <__aeabi_d2f>:
 8003114:	0002      	movs	r2, r0
 8003116:	004b      	lsls	r3, r1, #1
 8003118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311a:	0d5b      	lsrs	r3, r3, #21
 800311c:	030c      	lsls	r4, r1, #12
 800311e:	4e3d      	ldr	r6, [pc, #244]	; (8003214 <__aeabi_d2f+0x100>)
 8003120:	0a64      	lsrs	r4, r4, #9
 8003122:	0f40      	lsrs	r0, r0, #29
 8003124:	1c5f      	adds	r7, r3, #1
 8003126:	0fc9      	lsrs	r1, r1, #31
 8003128:	4304      	orrs	r4, r0
 800312a:	00d5      	lsls	r5, r2, #3
 800312c:	4237      	tst	r7, r6
 800312e:	d00a      	beq.n	8003146 <__aeabi_d2f+0x32>
 8003130:	4839      	ldr	r0, [pc, #228]	; (8003218 <__aeabi_d2f+0x104>)
 8003132:	181e      	adds	r6, r3, r0
 8003134:	2efe      	cmp	r6, #254	; 0xfe
 8003136:	dd16      	ble.n	8003166 <__aeabi_d2f+0x52>
 8003138:	20ff      	movs	r0, #255	; 0xff
 800313a:	2400      	movs	r4, #0
 800313c:	05c0      	lsls	r0, r0, #23
 800313e:	4320      	orrs	r0, r4
 8003140:	07c9      	lsls	r1, r1, #31
 8003142:	4308      	orrs	r0, r1
 8003144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <__aeabi_d2f+0x44>
 800314a:	432c      	orrs	r4, r5
 800314c:	d026      	beq.n	800319c <__aeabi_d2f+0x88>
 800314e:	2205      	movs	r2, #5
 8003150:	0192      	lsls	r2, r2, #6
 8003152:	0a54      	lsrs	r4, r2, #9
 8003154:	b2d8      	uxtb	r0, r3
 8003156:	e7f1      	b.n	800313c <__aeabi_d2f+0x28>
 8003158:	4325      	orrs	r5, r4
 800315a:	d0ed      	beq.n	8003138 <__aeabi_d2f+0x24>
 800315c:	2080      	movs	r0, #128	; 0x80
 800315e:	03c0      	lsls	r0, r0, #15
 8003160:	4304      	orrs	r4, r0
 8003162:	20ff      	movs	r0, #255	; 0xff
 8003164:	e7ea      	b.n	800313c <__aeabi_d2f+0x28>
 8003166:	2e00      	cmp	r6, #0
 8003168:	dd1b      	ble.n	80031a2 <__aeabi_d2f+0x8e>
 800316a:	0192      	lsls	r2, r2, #6
 800316c:	1e53      	subs	r3, r2, #1
 800316e:	419a      	sbcs	r2, r3
 8003170:	00e4      	lsls	r4, r4, #3
 8003172:	0f6d      	lsrs	r5, r5, #29
 8003174:	4322      	orrs	r2, r4
 8003176:	432a      	orrs	r2, r5
 8003178:	0753      	lsls	r3, r2, #29
 800317a:	d048      	beq.n	800320e <__aeabi_d2f+0xfa>
 800317c:	230f      	movs	r3, #15
 800317e:	4013      	ands	r3, r2
 8003180:	2b04      	cmp	r3, #4
 8003182:	d000      	beq.n	8003186 <__aeabi_d2f+0x72>
 8003184:	3204      	adds	r2, #4
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	04db      	lsls	r3, r3, #19
 800318a:	4013      	ands	r3, r2
 800318c:	d03f      	beq.n	800320e <__aeabi_d2f+0xfa>
 800318e:	1c70      	adds	r0, r6, #1
 8003190:	2efe      	cmp	r6, #254	; 0xfe
 8003192:	d0d1      	beq.n	8003138 <__aeabi_d2f+0x24>
 8003194:	0192      	lsls	r2, r2, #6
 8003196:	0a54      	lsrs	r4, r2, #9
 8003198:	b2c0      	uxtb	r0, r0
 800319a:	e7cf      	b.n	800313c <__aeabi_d2f+0x28>
 800319c:	2000      	movs	r0, #0
 800319e:	2400      	movs	r4, #0
 80031a0:	e7cc      	b.n	800313c <__aeabi_d2f+0x28>
 80031a2:	0032      	movs	r2, r6
 80031a4:	3217      	adds	r2, #23
 80031a6:	db22      	blt.n	80031ee <__aeabi_d2f+0xda>
 80031a8:	2080      	movs	r0, #128	; 0x80
 80031aa:	0400      	lsls	r0, r0, #16
 80031ac:	4320      	orrs	r0, r4
 80031ae:	241e      	movs	r4, #30
 80031b0:	1ba4      	subs	r4, r4, r6
 80031b2:	2c1f      	cmp	r4, #31
 80031b4:	dd1d      	ble.n	80031f2 <__aeabi_d2f+0xde>
 80031b6:	2202      	movs	r2, #2
 80031b8:	4252      	negs	r2, r2
 80031ba:	1b96      	subs	r6, r2, r6
 80031bc:	0002      	movs	r2, r0
 80031be:	40f2      	lsrs	r2, r6
 80031c0:	0016      	movs	r6, r2
 80031c2:	2c20      	cmp	r4, #32
 80031c4:	d004      	beq.n	80031d0 <__aeabi_d2f+0xbc>
 80031c6:	4a15      	ldr	r2, [pc, #84]	; (800321c <__aeabi_d2f+0x108>)
 80031c8:	4694      	mov	ip, r2
 80031ca:	4463      	add	r3, ip
 80031cc:	4098      	lsls	r0, r3
 80031ce:	4305      	orrs	r5, r0
 80031d0:	002a      	movs	r2, r5
 80031d2:	1e53      	subs	r3, r2, #1
 80031d4:	419a      	sbcs	r2, r3
 80031d6:	4332      	orrs	r2, r6
 80031d8:	2600      	movs	r6, #0
 80031da:	0753      	lsls	r3, r2, #29
 80031dc:	d1ce      	bne.n	800317c <__aeabi_d2f+0x68>
 80031de:	2480      	movs	r4, #128	; 0x80
 80031e0:	0013      	movs	r3, r2
 80031e2:	04e4      	lsls	r4, r4, #19
 80031e4:	2001      	movs	r0, #1
 80031e6:	4023      	ands	r3, r4
 80031e8:	4222      	tst	r2, r4
 80031ea:	d1d3      	bne.n	8003194 <__aeabi_d2f+0x80>
 80031ec:	e7b0      	b.n	8003150 <__aeabi_d2f+0x3c>
 80031ee:	2300      	movs	r3, #0
 80031f0:	e7ad      	b.n	800314e <__aeabi_d2f+0x3a>
 80031f2:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <__aeabi_d2f+0x10c>)
 80031f4:	4694      	mov	ip, r2
 80031f6:	002a      	movs	r2, r5
 80031f8:	40e2      	lsrs	r2, r4
 80031fa:	0014      	movs	r4, r2
 80031fc:	002a      	movs	r2, r5
 80031fe:	4463      	add	r3, ip
 8003200:	409a      	lsls	r2, r3
 8003202:	4098      	lsls	r0, r3
 8003204:	1e55      	subs	r5, r2, #1
 8003206:	41aa      	sbcs	r2, r5
 8003208:	4302      	orrs	r2, r0
 800320a:	4322      	orrs	r2, r4
 800320c:	e7e4      	b.n	80031d8 <__aeabi_d2f+0xc4>
 800320e:	0033      	movs	r3, r6
 8003210:	e79e      	b.n	8003150 <__aeabi_d2f+0x3c>
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	000007fe 	.word	0x000007fe
 8003218:	fffffc80 	.word	0xfffffc80
 800321c:	fffffca2 	.word	0xfffffca2
 8003220:	fffffc82 	.word	0xfffffc82

08003224 <__clzsi2>:
 8003224:	211c      	movs	r1, #28
 8003226:	2301      	movs	r3, #1
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	4298      	cmp	r0, r3
 800322c:	d301      	bcc.n	8003232 <__clzsi2+0xe>
 800322e:	0c00      	lsrs	r0, r0, #16
 8003230:	3910      	subs	r1, #16
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	4298      	cmp	r0, r3
 8003236:	d301      	bcc.n	800323c <__clzsi2+0x18>
 8003238:	0a00      	lsrs	r0, r0, #8
 800323a:	3908      	subs	r1, #8
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	4298      	cmp	r0, r3
 8003240:	d301      	bcc.n	8003246 <__clzsi2+0x22>
 8003242:	0900      	lsrs	r0, r0, #4
 8003244:	3904      	subs	r1, #4
 8003246:	a202      	add	r2, pc, #8	; (adr r2, 8003250 <__clzsi2+0x2c>)
 8003248:	5c10      	ldrb	r0, [r2, r0]
 800324a:	1840      	adds	r0, r0, r1
 800324c:	4770      	bx	lr
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	02020304 	.word	0x02020304
 8003254:	01010101 	.word	0x01010101
	...

08003260 <__clzdi2>:
 8003260:	b510      	push	{r4, lr}
 8003262:	2900      	cmp	r1, #0
 8003264:	d103      	bne.n	800326e <__clzdi2+0xe>
 8003266:	f7ff ffdd 	bl	8003224 <__clzsi2>
 800326a:	3020      	adds	r0, #32
 800326c:	e002      	b.n	8003274 <__clzdi2+0x14>
 800326e:	0008      	movs	r0, r1
 8003270:	f7ff ffd8 	bl	8003224 <__clzsi2>
 8003274:	bd10      	pop	{r4, pc}
 8003276:	46c0      	nop			; (mov r8, r8)

08003278 <ReceivingTest>:
#include "main.h"

extern SX127X_t myRadio;

void ReceivingTest() {
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
	uint32_t recTime = 0x80000000;
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	061b      	lsls	r3, r3, #24
 8003282:	60fb      	str	r3, [r7, #12]
	uint32_t recTime1 = 0x80000000;
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	061b      	lsls	r3, r3, #24
 8003288:	60bb      	str	r3, [r7, #8]
	uint32_t recTime2 = 0x80000000;
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	607b      	str	r3, [r7, #4]
	bool repeaterMode = false;
 8003290:	1cfb      	adds	r3, r7, #3
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
	debugLogTime("Receiving test activated");
 8003296:	4b5d      	ldr	r3, [pc, #372]	; (800340c <ReceivingTest+0x194>)
 8003298:	0018      	movs	r0, r3
 800329a:	f000 fa3f 	bl	800371c <debugLogTime>
	while (1) {

		SX127X_Handler(&myRadio);
 800329e:	4b5c      	ldr	r3, [pc, #368]	; (8003410 <ReceivingTest+0x198>)
 80032a0:	0018      	movs	r0, r3
 80032a2:	f002 fe55 	bl	8005f50 <SX127X_Handler>
		if (myRadio.readBytes > 0) {
 80032a6:	4b5a      	ldr	r3, [pc, #360]	; (8003410 <ReceivingTest+0x198>)
 80032a8:	225d      	movs	r2, #93	; 0x5d
 80032aa:	5c9b      	ldrb	r3, [r3, r2]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d02b      	beq.n	8003308 <ReceivingTest+0x90>
			if (myRadio.badCrc == 0) {
 80032b0:	4b57      	ldr	r3, [pc, #348]	; (8003410 <ReceivingTest+0x198>)
 80032b2:	2260      	movs	r2, #96	; 0x60
 80032b4:	5c9b      	ldrb	r3, [r3, r2]
 80032b6:	2201      	movs	r2, #1
 80032b8:	4053      	eors	r3, r2
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01f      	beq.n	8003300 <ReceivingTest+0x88>
				if (myRadio.rxBuf[0] == 255 && myRadio.rxBuf[1] == 255) {
 80032c0:	4b53      	ldr	r3, [pc, #332]	; (8003410 <ReceivingTest+0x198>)
 80032c2:	7f5b      	ldrb	r3, [r3, #29]
 80032c4:	2bff      	cmp	r3, #255	; 0xff
 80032c6:	d117      	bne.n	80032f8 <ReceivingTest+0x80>
 80032c8:	4b51      	ldr	r3, [pc, #324]	; (8003410 <ReceivingTest+0x198>)
 80032ca:	7f9b      	ldrb	r3, [r3, #30]
 80032cc:	2bff      	cmp	r3, #255	; 0xff
 80032ce:	d113      	bne.n	80032f8 <ReceivingTest+0x80>
					repeaterMode = true;
 80032d0:	1cfb      	adds	r3, r7, #3
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
					if (myRadio.rxBuf[2] == 1)
 80032d6:	4b4e      	ldr	r3, [pc, #312]	; (8003410 <ReceivingTest+0x198>)
 80032d8:	7fdb      	ldrb	r3, [r3, #31]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d103      	bne.n	80032e6 <ReceivingTest+0x6e>
						recTime1 = HAL_GetTick();
 80032de:	f003 fadb 	bl	8006898 <HAL_GetTick>
 80032e2:	0003      	movs	r3, r0
 80032e4:	60bb      	str	r3, [r7, #8]
					if (myRadio.rxBuf[2] == 2)
 80032e6:	4b4a      	ldr	r3, [pc, #296]	; (8003410 <ReceivingTest+0x198>)
 80032e8:	7fdb      	ldrb	r3, [r3, #31]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d108      	bne.n	8003300 <ReceivingTest+0x88>
						recTime2 = HAL_GetTick();
 80032ee:	f003 fad3 	bl	8006898 <HAL_GetTick>
 80032f2:	0003      	movs	r3, r0
 80032f4:	607b      	str	r3, [r7, #4]
					if (myRadio.rxBuf[2] == 2)
 80032f6:	e003      	b.n	8003300 <ReceivingTest+0x88>
				} else {
					recTime = HAL_GetTick();
 80032f8:	f003 face 	bl	8006898 <HAL_GetTick>
 80032fc:	0003      	movs	r3, r0
 80032fe:	60fb      	str	r3, [r7, #12]
				}

			}

			myRadio.readBytes = 0;
 8003300:	4b43      	ldr	r3, [pc, #268]	; (8003410 <ReceivingTest+0x198>)
 8003302:	225d      	movs	r2, #93	; 0x5d
 8003304:	2100      	movs	r1, #0
 8003306:	5499      	strb	r1, [r3, r2]
		}
		if (repeaterMode) {
 8003308:	1cfb      	adds	r3, r7, #3
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d051      	beq.n	80033b4 <ReceivingTest+0x13c>
			if (myRadio.signalDetected) {
 8003310:	4b3f      	ldr	r3, [pc, #252]	; (8003410 <ReceivingTest+0x198>)
 8003312:	7f1b      	ldrb	r3, [r3, #28]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00e      	beq.n	8003336 <ReceivingTest+0xbe>
				HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	015b      	lsls	r3, r3, #5
 800331c:	483d      	ldr	r0, [pc, #244]	; (8003414 <ReceivingTest+0x19c>)
 800331e:	2201      	movs	r2, #1
 8003320:	0019      	movs	r1, r3
 8003322:	f004 fd26 	bl	8007d72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BLUE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	483a      	ldr	r0, [pc, #232]	; (8003414 <ReceivingTest+0x19c>)
 800332c:	2201      	movs	r2, #1
 800332e:	0019      	movs	r1, r3
 8003330:	f004 fd1f 	bl	8007d72 <HAL_GPIO_WritePin>
 8003334:	e00d      	b.n	8003352 <ReceivingTest+0xda>
			} else {
				HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	015b      	lsls	r3, r3, #5
 800333a:	4836      	ldr	r0, [pc, #216]	; (8003414 <ReceivingTest+0x19c>)
 800333c:	2200      	movs	r2, #0
 800333e:	0019      	movs	r1, r3
 8003340:	f004 fd17 	bl	8007d72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BLUE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	019b      	lsls	r3, r3, #6
 8003348:	4832      	ldr	r0, [pc, #200]	; (8003414 <ReceivingTest+0x19c>)
 800334a:	2200      	movs	r2, #0
 800334c:	0019      	movs	r1, r3
 800334e:	f004 fd10 	bl	8007d72 <HAL_GPIO_WritePin>
			}

			if (HAL_GetTick() - recTime1 < 300)
 8003352:	f003 faa1 	bl	8006898 <HAL_GetTick>
 8003356:	0002      	movs	r2, r0
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	1ad2      	subs	r2, r2, r3
 800335c:	2396      	movs	r3, #150	; 0x96
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	429a      	cmp	r2, r3
 8003362:	d207      	bcs.n	8003374 <ReceivingTest+0xfc>
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	019b      	lsls	r3, r3, #6
 8003368:	482a      	ldr	r0, [pc, #168]	; (8003414 <ReceivingTest+0x19c>)
 800336a:	2201      	movs	r2, #1
 800336c:	0019      	movs	r1, r3
 800336e:	f004 fd00 	bl	8007d72 <HAL_GPIO_WritePin>
 8003372:	e006      	b.n	8003382 <ReceivingTest+0x10a>
			else
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	019b      	lsls	r3, r3, #6
 8003378:	4826      	ldr	r0, [pc, #152]	; (8003414 <ReceivingTest+0x19c>)
 800337a:	2200      	movs	r2, #0
 800337c:	0019      	movs	r1, r3
 800337e:	f004 fcf8 	bl	8007d72 <HAL_GPIO_WritePin>
			if (HAL_GetTick() - recTime2 < 300)
 8003382:	f003 fa89 	bl	8006898 <HAL_GetTick>
 8003386:	0002      	movs	r2, r0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	1ad2      	subs	r2, r2, r3
 800338c:	2396      	movs	r3, #150	; 0x96
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	429a      	cmp	r2, r3
 8003392:	d207      	bcs.n	80033a4 <ReceivingTest+0x12c>
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, BLUE_Pin, LED_ON);
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	015b      	lsls	r3, r3, #5
 8003398:	481e      	ldr	r0, [pc, #120]	; (8003414 <ReceivingTest+0x19c>)
 800339a:	2201      	movs	r2, #1
 800339c:	0019      	movs	r1, r3
 800339e:	f004 fce8 	bl	8007d72 <HAL_GPIO_WritePin>
 80033a2:	e77c      	b.n	800329e <ReceivingTest+0x26>
			else
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, BLUE_Pin, LED_OFF);
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	015b      	lsls	r3, r3, #5
 80033a8:	481a      	ldr	r0, [pc, #104]	; (8003414 <ReceivingTest+0x19c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	0019      	movs	r1, r3
 80033ae:	f004 fce0 	bl	8007d72 <HAL_GPIO_WritePin>
 80033b2:	e774      	b.n	800329e <ReceivingTest+0x26>
		} else {
			if (myRadio.signalDetected)
 80033b4:	4b16      	ldr	r3, [pc, #88]	; (8003410 <ReceivingTest+0x198>)
 80033b6:	7f1b      	ldrb	r3, [r3, #28]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d007      	beq.n	80033cc <ReceivingTest+0x154>
				HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	015b      	lsls	r3, r3, #5
 80033c0:	4814      	ldr	r0, [pc, #80]	; (8003414 <ReceivingTest+0x19c>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	0019      	movs	r1, r3
 80033c6:	f004 fcd4 	bl	8007d72 <HAL_GPIO_WritePin>
 80033ca:	e006      	b.n	80033da <ReceivingTest+0x162>
			else
				HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	015b      	lsls	r3, r3, #5
 80033d0:	4810      	ldr	r0, [pc, #64]	; (8003414 <ReceivingTest+0x19c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	0019      	movs	r1, r3
 80033d6:	f004 fccc 	bl	8007d72 <HAL_GPIO_WritePin>
			if (HAL_GetTick() - recTime < 300)
 80033da:	f003 fa5d 	bl	8006898 <HAL_GetTick>
 80033de:	0002      	movs	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad2      	subs	r2, r2, r3
 80033e4:	2396      	movs	r3, #150	; 0x96
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d207      	bcs.n	80033fc <ReceivingTest+0x184>
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	019b      	lsls	r3, r3, #6
 80033f0:	4808      	ldr	r0, [pc, #32]	; (8003414 <ReceivingTest+0x19c>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	0019      	movs	r1, r3
 80033f6:	f004 fcbc 	bl	8007d72 <HAL_GPIO_WritePin>
 80033fa:	e750      	b.n	800329e <ReceivingTest+0x26>
			else
				HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	019b      	lsls	r3, r3, #6
 8003400:	4804      	ldr	r0, [pc, #16]	; (8003414 <ReceivingTest+0x19c>)
 8003402:	2200      	movs	r2, #0
 8003404:	0019      	movs	r1, r3
 8003406:	f004 fcb4 	bl	8007d72 <HAL_GPIO_WritePin>
		SX127X_Handler(&myRadio);
 800340a:	e748      	b.n	800329e <ReceivingTest+0x26>
 800340c:	0800e1f8 	.word	0x0800e1f8
 8003410:	20000494 	.word	0x20000494
 8003414:	50000400 	.word	0x50000400

08003418 <PingTest>:
 * Green light means valid response from Base station
 * Red light means transmission in progress
 * @param None
 * @retval None
 */
void PingTest() {
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0

	debugLogTime("Ping test activated");
 800341c:	4b2c      	ldr	r3, [pc, #176]	; (80034d0 <PingTest+0xb8>)
 800341e:	0018      	movs	r0, r3
 8003420:	f000 f97c 	bl	800371c <debugLogTime>
	while (1) {
		static uint32_t lastTrans;
		static uint32_t recTime;

		SX127X_Handler(&myRadio);
 8003424:	4b2b      	ldr	r3, [pc, #172]	; (80034d4 <PingTest+0xbc>)
 8003426:	0018      	movs	r0, r3
 8003428:	f002 fd92 	bl	8005f50 <SX127X_Handler>

		if (myRadio.readBytes > 0) {
 800342c:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <PingTest+0xbc>)
 800342e:	225d      	movs	r2, #93	; 0x5d
 8003430:	5c9b      	ldrb	r3, [r3, r2]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d010      	beq.n	8003458 <PingTest+0x40>
			if (myRadio.badCrc == 0)
 8003436:	4b27      	ldr	r3, [pc, #156]	; (80034d4 <PingTest+0xbc>)
 8003438:	2260      	movs	r2, #96	; 0x60
 800343a:	5c9b      	ldrb	r3, [r3, r2]
 800343c:	2201      	movs	r2, #1
 800343e:	4053      	eors	r3, r2
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <PingTest+0x38>
				recTime = HAL_GetTick();
 8003446:	f003 fa27 	bl	8006898 <HAL_GetTick>
 800344a:	0002      	movs	r2, r0
 800344c:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <PingTest+0xc0>)
 800344e:	601a      	str	r2, [r3, #0]
			myRadio.readBytes = 0;
 8003450:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <PingTest+0xbc>)
 8003452:	225d      	movs	r2, #93	; 0x5d
 8003454:	2100      	movs	r1, #0
 8003456:	5499      	strb	r1, [r3, r2]
		}

		if (HAL_GetTick() - lastTrans > 2000) {
 8003458:	f003 fa1e 	bl	8006898 <HAL_GetTick>
 800345c:	0002      	movs	r2, r0
 800345e:	4b1f      	ldr	r3, [pc, #124]	; (80034dc <PingTest+0xc4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	1ad2      	subs	r2, r2, r3
 8003464:	23fa      	movs	r3, #250	; 0xfa
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	429a      	cmp	r2, r3
 800346a:	d904      	bls.n	8003476 <PingTest+0x5e>
			lastTrans = HAL_GetTick();
 800346c:	f003 fa14 	bl	8006898 <HAL_GetTick>
 8003470:	0002      	movs	r2, r0
 8003472:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <PingTest+0xc4>)
 8003474:	601a      	str	r2, [r3, #0]
		}
		if (HAL_GetTick() - recTime < 300)
 8003476:	f003 fa0f 	bl	8006898 <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <PingTest+0xc0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	1ad2      	subs	r2, r2, r3
 8003482:	2396      	movs	r3, #150	; 0x96
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	429a      	cmp	r2, r3
 8003488:	d207      	bcs.n	800349a <PingTest+0x82>
			HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	019b      	lsls	r3, r3, #6
 800348e:	4814      	ldr	r0, [pc, #80]	; (80034e0 <PingTest+0xc8>)
 8003490:	2201      	movs	r2, #1
 8003492:	0019      	movs	r1, r3
 8003494:	f004 fc6d 	bl	8007d72 <HAL_GPIO_WritePin>
 8003498:	e006      	b.n	80034a8 <PingTest+0x90>
		else
			HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	019b      	lsls	r3, r3, #6
 800349e:	4810      	ldr	r0, [pc, #64]	; (80034e0 <PingTest+0xc8>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	0019      	movs	r1, r3
 80034a4:	f004 fc65 	bl	8007d72 <HAL_GPIO_WritePin>

		if (myRadio.status == TX)
 80034a8:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <PingTest+0xbc>)
 80034aa:	7c1b      	ldrb	r3, [r3, #16]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d107      	bne.n	80034c0 <PingTest+0xa8>
			HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 80034b0:	2380      	movs	r3, #128	; 0x80
 80034b2:	015b      	lsls	r3, r3, #5
 80034b4:	480a      	ldr	r0, [pc, #40]	; (80034e0 <PingTest+0xc8>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	0019      	movs	r1, r3
 80034ba:	f004 fc5a 	bl	8007d72 <HAL_GPIO_WritePin>
 80034be:	e7b1      	b.n	8003424 <PingTest+0xc>
		else
			HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	015b      	lsls	r3, r3, #5
 80034c4:	4806      	ldr	r0, [pc, #24]	; (80034e0 <PingTest+0xc8>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	0019      	movs	r1, r3
 80034ca:	f004 fc52 	bl	8007d72 <HAL_GPIO_WritePin>
	while (1) {
 80034ce:	e7a9      	b.n	8003424 <PingTest+0xc>
 80034d0:	0800e214 	.word	0x0800e214
 80034d4:	20000494 	.word	0x20000494
 80034d8:	20000254 	.word	0x20000254
 80034dc:	20000258 	.word	0x20000258
 80034e0:	50000400 	.word	0x50000400

080034e4 <pow10_>:
	while(pos<255 && str[pos]!=sym)
		pos++;
	return pos;
}
uint32_t pow10_(uint8_t value)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	0002      	movs	r2, r0
 80034ec:	1dfb      	adds	r3, r7, #7
 80034ee:	701a      	strb	r2, [r3, #0]
  if (value>0)
 80034f0:	1dfb      	adds	r3, r7, #7
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00c      	beq.n	8003512 <pow10_+0x2e>
  	return 10*pow10_(value-1);
 80034f8:	1dfb      	adds	r3, r7, #7
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	0018      	movs	r0, r3
 8003502:	f7ff ffef 	bl	80034e4 <pow10_>
 8003506:	0002      	movs	r2, r0
 8003508:	0013      	movs	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	189b      	adds	r3, r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	e000      	b.n	8003514 <pow10_+0x30>
  else
  	return 1;
 8003512:	2301      	movs	r3, #1
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b002      	add	sp, #8
 800351a:	bd80      	pop	{r7, pc}

0800351c <pow16>:

uint32_t pow16(uint8_t value)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	0002      	movs	r2, r0
 8003524:	1dfb      	adds	r3, r7, #7
 8003526:	701a      	strb	r2, [r3, #0]
	return 1<<(value*4);
 8003528:	1dfb      	adds	r3, r7, #7
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	2201      	movs	r2, #1
 8003530:	409a      	lsls	r2, r3
 8003532:	0013      	movs	r3, r2
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b002      	add	sp, #8
 800353a:	bd80      	pop	{r7, pc}

0800353c <DecToInt>:
sprintf(resString,"%li.%d",leftPart,rightPart);
return resString;
}

uint32_t DecToInt(uint8_t * string, uint8_t len)
{
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	000a      	movs	r2, r1
 8003546:	1cfb      	adds	r3, r7, #3
 8003548:	701a      	strb	r2, [r3, #0]
	uint32_t value=0;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
	uint8_t i=0;
 800354e:	210b      	movs	r1, #11
 8003550:	187b      	adds	r3, r7, r1
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
	for(i=0;i<len;i++)
 8003556:	187b      	adds	r3, r7, r1
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	e031      	b.n	80035c2 <DecToInt+0x86>
	if (string[i]>='0' && string[i]<='9')
 800355e:	210b      	movs	r1, #11
 8003560:	187b      	adds	r3, r7, r1
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	18d3      	adds	r3, r2, r3
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b2f      	cmp	r3, #47	; 0x2f
 800356c:	d91e      	bls.n	80035ac <DecToInt+0x70>
 800356e:	187b      	adds	r3, r7, r1
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	18d3      	adds	r3, r2, r3
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b39      	cmp	r3, #57	; 0x39
 800357a:	d817      	bhi.n	80035ac <DecToInt+0x70>
	value+=(string[i]-'0')*pow10_(len-i-1);
 800357c:	187b      	adds	r3, r7, r1
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	18d3      	adds	r3, r2, r3
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	3b30      	subs	r3, #48	; 0x30
 8003588:	001c      	movs	r4, r3
 800358a:	1cfa      	adds	r2, r7, #3
 800358c:	187b      	adds	r3, r7, r1
 800358e:	7812      	ldrb	r2, [r2, #0]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b2db      	uxtb	r3, r3
 800359a:	0018      	movs	r0, r3
 800359c:	f7ff ffa2 	bl	80034e4 <pow10_>
 80035a0:	0003      	movs	r3, r0
 80035a2:	4363      	muls	r3, r4
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	18d3      	adds	r3, r2, r3
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	e004      	b.n	80035b6 <DecToInt+0x7a>
	else
	{
		Error_Handler();
 80035ac:	f001 feb8 	bl	8005320 <Error_Handler>
		return 0xFFFFFFFF;
 80035b0:	2301      	movs	r3, #1
 80035b2:	425b      	negs	r3, r3
 80035b4:	e00d      	b.n	80035d2 <DecToInt+0x96>
	for(i=0;i<len;i++)
 80035b6:	210b      	movs	r1, #11
 80035b8:	187b      	adds	r3, r7, r1
 80035ba:	781a      	ldrb	r2, [r3, #0]
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	3201      	adds	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	230b      	movs	r3, #11
 80035c4:	18fa      	adds	r2, r7, r3
 80035c6:	1cfb      	adds	r3, r7, #3
 80035c8:	7812      	ldrb	r2, [r2, #0]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d3c6      	bcc.n	800355e <DecToInt+0x22>
	}
	return value;
 80035d0:	68fb      	ldr	r3, [r7, #12]
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b005      	add	sp, #20
 80035d8:	bd90      	pop	{r4, r7, pc}
	...

080035dc <HexToInt>:

uint32_t HexToInt(uint8_t * string, uint8_t len)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	000a      	movs	r2, r1
 80035e6:	1cfb      	adds	r3, r7, #3
 80035e8:	701a      	strb	r2, [r3, #0]
	uint32_t value=0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
	uint32_t tmp=0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
	uint8_t i=0;
 80035f2:	210f      	movs	r1, #15
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]

	for(i=0;i<len;i++)
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e059      	b.n	80036b6 <HexToInt+0xda>
	{
		switch (string[i])
 8003602:	230f      	movs	r3, #15
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	18d3      	adds	r3, r2, r3
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	3b30      	subs	r3, #48	; 0x30
 8003610:	2b36      	cmp	r3, #54	; 0x36
 8003612:	d834      	bhi.n	800367e <HexToInt+0xa2>
 8003614:	009a      	lsls	r2, r3, #2
 8003616:	4b2e      	ldr	r3, [pc, #184]	; (80036d0 <HexToInt+0xf4>)
 8003618:	18d3      	adds	r3, r2, r3
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	469f      	mov	pc, r3
		{
		case '0': tmp=0; break;
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	e031      	b.n	8003688 <HexToInt+0xac>
		case '1': tmp=1; break;
 8003624:	2301      	movs	r3, #1
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	e02e      	b.n	8003688 <HexToInt+0xac>
		case '2': tmp=2; break;
 800362a:	2302      	movs	r3, #2
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	e02b      	b.n	8003688 <HexToInt+0xac>
		case '3': tmp=3; break;
 8003630:	2303      	movs	r3, #3
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	e028      	b.n	8003688 <HexToInt+0xac>
		case '4': tmp=4; break;
 8003636:	2304      	movs	r3, #4
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	e025      	b.n	8003688 <HexToInt+0xac>
		case '5': tmp=5; break;
 800363c:	2305      	movs	r3, #5
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	e022      	b.n	8003688 <HexToInt+0xac>
		case '6': tmp=6; break;
 8003642:	2306      	movs	r3, #6
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	e01f      	b.n	8003688 <HexToInt+0xac>
		case '7': tmp=7; break;
 8003648:	2307      	movs	r3, #7
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	e01c      	b.n	8003688 <HexToInt+0xac>
		case '8': tmp=8; break;
 800364e:	2308      	movs	r3, #8
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	e019      	b.n	8003688 <HexToInt+0xac>
		case '9': tmp=9; break;
 8003654:	2309      	movs	r3, #9
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	e016      	b.n	8003688 <HexToInt+0xac>
		case 'A':
		case 'a': tmp=10; break;
 800365a:	230a      	movs	r3, #10
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	e013      	b.n	8003688 <HexToInt+0xac>
		case 'B':
		case 'b': tmp=11; break;
 8003660:	230b      	movs	r3, #11
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	e010      	b.n	8003688 <HexToInt+0xac>
		case 'C':
		case 'c': tmp=12; break;
 8003666:	230c      	movs	r3, #12
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	e00d      	b.n	8003688 <HexToInt+0xac>
		case 'D':
		case 'd': tmp=13; break;
 800366c:	230d      	movs	r3, #13
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	e00a      	b.n	8003688 <HexToInt+0xac>
		case 'E':
		case 'e': tmp=14; break;
 8003672:	230e      	movs	r3, #14
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	e007      	b.n	8003688 <HexToInt+0xac>
		case 'F':
		case 'f': tmp=15; break;
 8003678:	230f      	movs	r3, #15
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	e004      	b.n	8003688 <HexToInt+0xac>
		default:
			Error_Handler();
 800367e:	f001 fe4f 	bl	8005320 <Error_Handler>
			return 0xFFFFFFFF;
 8003682:	2301      	movs	r3, #1
 8003684:	425b      	negs	r3, r3
 8003686:	e01e      	b.n	80036c6 <HexToInt+0xea>
		}
		value+=tmp*pow16(len-i-1);
 8003688:	1cfa      	adds	r2, r7, #3
 800368a:	240f      	movs	r4, #15
 800368c:	193b      	adds	r3, r7, r4
 800368e:	7812      	ldrb	r2, [r2, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b2db      	uxtb	r3, r3
 800369a:	0018      	movs	r0, r3
 800369c:	f7ff ff3e 	bl	800351c <pow16>
 80036a0:	0002      	movs	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4353      	muls	r3, r2
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	18d3      	adds	r3, r2, r3
 80036aa:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 80036ac:	193b      	adds	r3, r7, r4
 80036ae:	781a      	ldrb	r2, [r3, #0]
 80036b0:	193b      	adds	r3, r7, r4
 80036b2:	3201      	adds	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	230f      	movs	r3, #15
 80036b8:	18fa      	adds	r2, r7, r3
 80036ba:	1cfb      	adds	r3, r7, #3
 80036bc:	7812      	ldrb	r2, [r2, #0]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d39e      	bcc.n	8003602 <HexToInt+0x26>
	}
	return value;
 80036c4:	697b      	ldr	r3, [r7, #20]
}
 80036c6:	0018      	movs	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b007      	add	sp, #28
 80036cc:	bd90      	pop	{r4, r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	0800e8f0 	.word	0x0800e8f0

080036d4 <min>:
		shift+=part;
	}
}

uint32_t min(uint32_t a,uint32_t b)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
return a>b?b:a;
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d900      	bls.n	80036e8 <min+0x14>
 80036e6:	0013      	movs	r3, r2
}
 80036e8:	0018      	movs	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b002      	add	sp, #8
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int fd, char *ptr, int len) {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000L);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	b29a      	uxth	r2, r3
 8003700:	23fa      	movs	r3, #250	; 0xfa
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	4804      	ldr	r0, [pc, #16]	; (8003718 <_write+0x28>)
 8003708:	f006 fc36 	bl	8009f78 <HAL_UART_Transmit>
	return len;
 800370c:	687b      	ldr	r3, [r7, #4]
}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b004      	add	sp, #16
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	200003ac 	.word	0x200003ac

0800371c <debugLogTime>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 1000);
	return ch;
}

void debugLogTime(char *string) {
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	if (settings.debugLevel) {
 8003724:	4b18      	ldr	r3, [pc, #96]	; (8003788 <debugLogTime+0x6c>)
 8003726:	7e1b      	ldrb	r3, [r3, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d029      	beq.n	8003780 <debugLogTime+0x64>
		uint32_t time = RTC->TR;
 800372c:	4b17      	ldr	r3, [pc, #92]	; (800378c <debugLogTime+0x70>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60fb      	str	r3, [r7, #12]
		printf("\n");
 8003732:	200a      	movs	r0, #10
 8003734:	f008 f938 	bl	800b9a8 <putchar>
		printf("%08lu", HAL_GetTick());
 8003738:	f003 f8ae 	bl	8006898 <HAL_GetTick>
 800373c:	0002      	movs	r2, r0
 800373e:	4b14      	ldr	r3, [pc, #80]	; (8003790 <debugLogTime+0x74>)
 8003740:	0011      	movs	r1, r2
 8003742:	0018      	movs	r0, r3
 8003744:	f008 f916 	bl	800b974 <iprintf>
		printf(" %02x:%02x:%02x ", (uint16_t) (time >> 16) & 0xFF,
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	0c1b      	lsrs	r3, r3, #16
 800374c:	b29b      	uxth	r3, r3
 800374e:	001a      	movs	r2, r3
 8003750:	23ff      	movs	r3, #255	; 0xff
 8003752:	401a      	ands	r2, r3
 8003754:	0011      	movs	r1, r2
				(uint16_t) (time >> 8) & 0xFF, (uint16_t) time & 0xFF);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	b29b      	uxth	r3, r3
		printf(" %02x:%02x:%02x ", (uint16_t) (time >> 16) & 0xFF,
 800375c:	001a      	movs	r2, r3
 800375e:	23ff      	movs	r3, #255	; 0xff
 8003760:	401a      	ands	r2, r3
				(uint16_t) (time >> 8) & 0xFF, (uint16_t) time & 0xFF);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	b29b      	uxth	r3, r3
		printf(" %02x:%02x:%02x ", (uint16_t) (time >> 16) & 0xFF,
 8003766:	0018      	movs	r0, r3
 8003768:	23ff      	movs	r3, #255	; 0xff
 800376a:	4003      	ands	r3, r0
 800376c:	4809      	ldr	r0, [pc, #36]	; (8003794 <debugLogTime+0x78>)
 800376e:	f008 f901 	bl	800b974 <iprintf>
		printf(string);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	0018      	movs	r0, r3
 8003776:	f008 f8fd 	bl	800b974 <iprintf>
		printf("\n");
 800377a:	200a      	movs	r0, #10
 800377c:	f008 f914 	bl	800b9a8 <putchar>
	}
}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	b004      	add	sp, #16
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000534 	.word	0x20000534
 800378c:	40002800 	.word	0x40002800
 8003790:	0800e2a8 	.word	0x0800e2a8
 8003794:	0800e2b0 	.word	0x0800e2b0

08003798 <debugLog>:

void debugLog(char *string) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
	if (settings.debugLevel) {
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <debugLog+0x28>)
 80037a2:	7e1b      	ldrb	r3, [r3, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d006      	beq.n	80037b6 <debugLog+0x1e>
		printf(string);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f008 f8e2 	bl	800b974 <iprintf>
		printf("\n");
 80037b0:	200a      	movs	r0, #10
 80037b2:	f008 f8f9 	bl	800b9a8 <putchar>
	}
}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b002      	add	sp, #8
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	20000534 	.word	0x20000534

080037c4 <debugLogInt>:

void debugLogInt(char *format, int n) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
	if (settings.debugLevel) {
 80037ce:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <debugLogInt+0x2c>)
 80037d0:	7e1b      	ldrb	r3, [r3, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <debugLogInt+0x24>
		printf(format, n);
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	0011      	movs	r1, r2
 80037dc:	0018      	movs	r0, r3
 80037de:	f008 f8c9 	bl	800b974 <iprintf>
		printf("\n");
 80037e2:	200a      	movs	r0, #10
 80037e4:	f008 f8e0 	bl	800b9a8 <putchar>
	}
}
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b002      	add	sp, #8
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000534 	.word	0x20000534

080037f4 <debugLogString>:

void debugLogString(char *format, const char *string) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
	if (settings.debugLevel) {
 80037fe:	4b08      	ldr	r3, [pc, #32]	; (8003820 <debugLogString+0x2c>)
 8003800:	7e1b      	ldrb	r3, [r3, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <debugLogString+0x24>
		printf(format, string);
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	0011      	movs	r1, r2
 800380c:	0018      	movs	r0, r3
 800380e:	f008 f8b1 	bl	800b974 <iprintf>
		printf("\n");
 8003812:	200a      	movs	r0, #10
 8003814:	f008 f8c8 	bl	800b9a8 <putchar>
	}
}
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	b002      	add	sp, #8
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20000534 	.word	0x20000534

08003824 <getVoltage>:
 * @brief Gets voltage level of MCU Vdd pin
 * Calculates MCU Vdd voltage by internal reference
 * @param None
 * @retval  Volage
 */
float getVoltage() {
 8003824:	b590      	push	{r4, r7, lr}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
	uint16_t adc[2];
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc, 2);
 800382a:	1d39      	adds	r1, r7, #4
 800382c:	4b15      	ldr	r3, [pc, #84]	; (8003884 <getVoltage+0x60>)
 800382e:	2202      	movs	r2, #2
 8003830:	0018      	movs	r0, r3
 8003832:	f003 f9bd 	bl	8006bb0 <HAL_ADC_Start_DMA>
	HAL_Delay(5);
 8003836:	2005      	movs	r0, #5
 8003838:	f000 fd58 	bl	80042ec <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc, 2);
 800383c:	1d39      	adds	r1, r7, #4
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <getVoltage+0x60>)
 8003840:	2202      	movs	r2, #2
 8003842:	0018      	movs	r0, r3
 8003844:	f003 f9b4 	bl	8006bb0 <HAL_ADC_Start_DMA>
	HAL_Delay(2);
 8003848:	2002      	movs	r0, #2
 800384a:	f000 fd4f 	bl	80042ec <HAL_Delay>
	return 3.0f * (float) VREF_CAL_VALUE / (float) adc[1];
 800384e:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <getVoltage+0x64>)
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	0018      	movs	r0, r3
 8003854:	f7fd fdee 	bl	8001434 <__aeabi_ui2f>
 8003858:	1c03      	adds	r3, r0, #0
 800385a:	490c      	ldr	r1, [pc, #48]	; (800388c <getVoltage+0x68>)
 800385c:	1c18      	adds	r0, r3, #0
 800385e:	f7fd faf5 	bl	8000e4c <__aeabi_fmul>
 8003862:	1c03      	adds	r3, r0, #0
 8003864:	1c1c      	adds	r4, r3, #0
 8003866:	1d3b      	adds	r3, r7, #4
 8003868:	885b      	ldrh	r3, [r3, #2]
 800386a:	0018      	movs	r0, r3
 800386c:	f7fd fde2 	bl	8001434 <__aeabi_ui2f>
 8003870:	1c03      	adds	r3, r0, #0
 8003872:	1c19      	adds	r1, r3, #0
 8003874:	1c20      	adds	r0, r4, #0
 8003876:	f7fd f921 	bl	8000abc <__aeabi_fdiv>
 800387a:	1c03      	adds	r3, r0, #0
}
 800387c:	1c18      	adds	r0, r3, #0
 800387e:	46bd      	mov	sp, r7
 8003880:	b003      	add	sp, #12
 8003882:	bd90      	pop	{r4, r7, pc}
 8003884:	2000025c 	.word	0x2000025c
 8003888:	1ff80078 	.word	0x1ff80078
 800388c:	40400000 	.word	0x40400000

08003890 <getTemperature>:
 * @brief Gets Temperature of Node
 * Can be calculated through NTC thermistor or TI IC
 * @param None
 * @retval  Temperature in Celsius
 */
float getTemperature() {
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
	uint16_t adc;
	float Rt = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
	float tKelvin = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
	float tCelsius = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]
#ifdef USE_NTC
	HAL_GPIO_WritePin(TempPower_GPIO_Port, TempPower_Pin, 1);
 80038a2:	23a0      	movs	r3, #160	; 0xa0
 80038a4:	05db      	lsls	r3, r3, #23
 80038a6:	2201      	movs	r2, #1
 80038a8:	2102      	movs	r1, #2
 80038aa:	0018      	movs	r0, r3
 80038ac:	f004 fa61 	bl	8007d72 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) &adc, 1);
 80038b0:	1cb9      	adds	r1, r7, #2
 80038b2:	4b3e      	ldr	r3, [pc, #248]	; (80039ac <getTemperature+0x11c>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	0018      	movs	r0, r3
 80038b8:	f003 f97a 	bl	8006bb0 <HAL_ADC_Start_DMA>
	HAL_Delay(5);
 80038bc:	2005      	movs	r0, #5
 80038be:	f000 fd15 	bl	80042ec <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) &adc, 1);
 80038c2:	1cb9      	adds	r1, r7, #2
 80038c4:	4b39      	ldr	r3, [pc, #228]	; (80039ac <getTemperature+0x11c>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	0018      	movs	r0, r3
 80038ca:	f003 f971 	bl	8006bb0 <HAL_ADC_Start_DMA>
	HAL_Delay(2);
 80038ce:	2002      	movs	r0, #2
 80038d0:	f000 fd0c 	bl	80042ec <HAL_Delay>
	Rt = R_BALANCE * (4096.0 / (float) adc - 1.0F);
 80038d4:	1cbb      	adds	r3, r7, #2
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	0018      	movs	r0, r3
 80038da:	f7fd fdab 	bl	8001434 <__aeabi_ui2f>
 80038de:	1c03      	adds	r3, r0, #0
 80038e0:	1c18      	adds	r0, r3, #0
 80038e2:	f7ff fbcf 	bl	8003084 <__aeabi_f2d>
 80038e6:	0002      	movs	r2, r0
 80038e8:	000b      	movs	r3, r1
 80038ea:	2000      	movs	r0, #0
 80038ec:	4930      	ldr	r1, [pc, #192]	; (80039b0 <getTemperature+0x120>)
 80038ee:	f7fe f91f 	bl	8001b30 <__aeabi_ddiv>
 80038f2:	0002      	movs	r2, r0
 80038f4:	000b      	movs	r3, r1
 80038f6:	0010      	movs	r0, r2
 80038f8:	0019      	movs	r1, r3
 80038fa:	2200      	movs	r2, #0
 80038fc:	4b2d      	ldr	r3, [pc, #180]	; (80039b4 <getTemperature+0x124>)
 80038fe:	f7fe ff85 	bl	800280c <__aeabi_dsub>
 8003902:	0002      	movs	r2, r0
 8003904:	000b      	movs	r3, r1
 8003906:	0010      	movs	r0, r2
 8003908:	0019      	movs	r1, r3
 800390a:	2200      	movs	r2, #0
 800390c:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <getTemperature+0x128>)
 800390e:	f7fe fd11 	bl	8002334 <__aeabi_dmul>
 8003912:	0002      	movs	r2, r0
 8003914:	000b      	movs	r3, r1
 8003916:	0010      	movs	r0, r2
 8003918:	0019      	movs	r1, r3
 800391a:	f7ff fbfb 	bl	8003114 <__aeabi_d2f>
 800391e:	1c03      	adds	r3, r0, #0
 8003920:	60fb      	str	r3, [r7, #12]
	tKelvin = (BETA * HOME_TEMP)
			/ (BETA + (HOME_TEMP * log(Rt / R_THERMISTOR_DEFAULT)));
 8003922:	4926      	ldr	r1, [pc, #152]	; (80039bc <getTemperature+0x12c>)
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f7fd f8c9 	bl	8000abc <__aeabi_fdiv>
 800392a:	1c03      	adds	r3, r0, #0
 800392c:	1c18      	adds	r0, r3, #0
 800392e:	f7ff fba9 	bl	8003084 <__aeabi_f2d>
 8003932:	0002      	movs	r2, r0
 8003934:	000b      	movs	r3, r1
 8003936:	0010      	movs	r0, r2
 8003938:	0019      	movs	r1, r3
 800393a:	f00a fa65 	bl	800de08 <log>
 800393e:	22c0      	movs	r2, #192	; 0xc0
 8003940:	05d2      	lsls	r2, r2, #23
 8003942:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <getTemperature+0x130>)
 8003944:	f7fe fcf6 	bl	8002334 <__aeabi_dmul>
 8003948:	0002      	movs	r2, r0
 800394a:	000b      	movs	r3, r1
 800394c:	0010      	movs	r0, r2
 800394e:	0019      	movs	r1, r3
 8003950:	2200      	movs	r2, #0
 8003952:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <getTemperature+0x134>)
 8003954:	f7fd fdb0 	bl	80014b8 <__aeabi_dadd>
 8003958:	0002      	movs	r2, r0
 800395a:	000b      	movs	r3, r1
 800395c:	2080      	movs	r0, #128	; 0x80
 800395e:	0600      	lsls	r0, r0, #24
 8003960:	4919      	ldr	r1, [pc, #100]	; (80039c8 <getTemperature+0x138>)
 8003962:	f7fe f8e5 	bl	8001b30 <__aeabi_ddiv>
 8003966:	0002      	movs	r2, r0
 8003968:	000b      	movs	r3, r1
	tKelvin = (BETA * HOME_TEMP)
 800396a:	0010      	movs	r0, r2
 800396c:	0019      	movs	r1, r3
 800396e:	f7ff fbd1 	bl	8003114 <__aeabi_d2f>
 8003972:	1c03      	adds	r3, r0, #0
 8003974:	60bb      	str	r3, [r7, #8]

	tCelsius = tKelvin - 273.15;
 8003976:	68b8      	ldr	r0, [r7, #8]
 8003978:	f7ff fb84 	bl	8003084 <__aeabi_f2d>
 800397c:	4a13      	ldr	r2, [pc, #76]	; (80039cc <getTemperature+0x13c>)
 800397e:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <getTemperature+0x140>)
 8003980:	f7fe ff44 	bl	800280c <__aeabi_dsub>
 8003984:	0002      	movs	r2, r0
 8003986:	000b      	movs	r3, r1
 8003988:	0010      	movs	r0, r2
 800398a:	0019      	movs	r1, r3
 800398c:	f7ff fbc2 	bl	8003114 <__aeabi_d2f>
 8003990:	1c03      	adds	r3, r0, #0
 8003992:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(TempPower_GPIO_Port, TempPower_Pin, 0);
 8003994:	23a0      	movs	r3, #160	; 0xa0
 8003996:	05db      	lsls	r3, r3, #23
 8003998:	2200      	movs	r2, #0
 800399a:	2102      	movs	r1, #2
 800399c:	0018      	movs	r0, r3
 800399e:	f004 f9e8 	bl	8007d72 <HAL_GPIO_WritePin>
#endif
	return tCelsius;
 80039a2:	687b      	ldr	r3, [r7, #4]
}
 80039a4:	1c18      	adds	r0, r3, #0
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b004      	add	sp, #16
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	2000025c 	.word	0x2000025c
 80039b0:	40b00000 	.word	0x40b00000
 80039b4:	3ff00000 	.word	0x3ff00000
 80039b8:	40c38800 	.word	0x40c38800
 80039bc:	461c4000 	.word	0x461c4000
 80039c0:	4072a266 	.word	0x4072a266
 80039c4:	40aedc00 	.word	0x40aedc00
 80039c8:	4131f85c 	.word	0x4131f85c
 80039cc:	66666666 	.word	0x66666666
 80039d0:	40711266 	.word	0x40711266

080039d4 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

	flag.rtcAlarm = 1;
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	2101      	movs	r1, #1
 80039e2:	430a      	orrs	r2, r1
 80039e4:	701a      	strb	r2, [r3, #0]
}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b002      	add	sp, #8
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	2000048c 	.word	0x2000048c

080039f4 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 80039f4:	b590      	push	{r4, r7, lr}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	if (lpTimWdCnt
			> (settings.workInterval + WATCHDOG_INTERVAL * 2)
 80039fc:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <HAL_LPTIM_AutoReloadMatchCallback+0x40>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	001c      	movs	r4, r3
 8003a02:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <HAL_LPTIM_AutoReloadMatchCallback+0x44>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	3378      	adds	r3, #120	; 0x78
					/ WATCHDOG_INTERVAL) {
 8003a08:	213c      	movs	r1, #60	; 0x3c
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7fc fb98 	bl	8000140 <__udivsi3>
 8003a10:	0003      	movs	r3, r0
	if (lpTimWdCnt
 8003a12:	429c      	cmp	r4, r3
 8003a14:	d904      	bls.n	8003a20 <HAL_LPTIM_AutoReloadMatchCallback+0x2c>
		debugLogTime("###LP WatchDog activated! Reset MCU!");
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <HAL_LPTIM_AutoReloadMatchCallback+0x48>)
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f7ff fe7f 	bl	800371c <debugLogTime>
		//SCB->AIRCR |= SCB_AIRCR_SYSRESETREQ_Msk;
		while (1)
 8003a1e:	e7fe      	b.n	8003a1e <HAL_LPTIM_AutoReloadMatchCallback+0x2a>
			;
	} else {
		flag.lpTimerInterupt = 1;
 8003a20:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <HAL_LPTIM_AutoReloadMatchCallback+0x4c>)
 8003a22:	785a      	ldrb	r2, [r3, #1]
 8003a24:	2108      	movs	r1, #8
 8003a26:	430a      	orrs	r2, r1
 8003a28:	705a      	strb	r2, [r3, #1]

	}
}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b003      	add	sp, #12
 8003a30:	bd90      	pop	{r4, r7, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	20000490 	.word	0x20000490
 8003a38:	20000534 	.word	0x20000534
 8003a3c:	0800e2c4 	.word	0x0800e2c4
 8003a40:	2000048c 	.word	0x2000048c

08003a44 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	0002      	movs	r2, r0
 8003a4c:	1dbb      	adds	r3, r7, #6
 8003a4e:	801a      	strh	r2, [r3, #0]
	status.unhandledExti = 1;
 8003a50:	4b03      	ldr	r3, [pc, #12]	; (8003a60 <HAL_GPIO_EXTI_Callback+0x1c>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	721a      	strb	r2, [r3, #8]
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b002      	add	sp, #8
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	2000051c 	.word	0x2000051c

08003a64 <initiateSettings>:
/**
 * @brief Initialises radio handler structure
 * @param None
 * @retval  None
 */
void initiateSettings() {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	myRadio.sf = settings.sf;
 8003a68:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <initiateSettings+0x5c>)
 8003a6a:	7b1a      	ldrb	r2, [r3, #12]
 8003a6c:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <initiateSettings+0x60>)
 8003a6e:	715a      	strb	r2, [r3, #5]
	myRadio.bw = settings.bw;
 8003a70:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <initiateSettings+0x5c>)
 8003a72:	7b5a      	ldrb	r2, [r3, #13]
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <initiateSettings+0x60>)
 8003a76:	719a      	strb	r2, [r3, #6]
	myRadio.cr = settings.cr;
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <initiateSettings+0x5c>)
 8003a7a:	7ada      	ldrb	r2, [r3, #11]
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <initiateSettings+0x60>)
 8003a7e:	71da      	strb	r2, [r3, #7]
	myRadio.syncWord = settings.sw;
 8003a80:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <initiateSettings+0x5c>)
 8003a82:	7b9a      	ldrb	r2, [r3, #14]
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <initiateSettings+0x60>)
 8003a86:	739a      	strb	r2, [r3, #14]
	myRadio.frequency = settings.realFrequency / 61.035f;
 8003a88:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <initiateSettings+0x5c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f7fd fcd1 	bl	8001434 <__aeabi_ui2f>
 8003a92:	1c03      	adds	r3, r0, #0
 8003a94:	490c      	ldr	r1, [pc, #48]	; (8003ac8 <initiateSettings+0x64>)
 8003a96:	1c18      	adds	r0, r3, #0
 8003a98:	f7fd f810 	bl	8000abc <__aeabi_fdiv>
 8003a9c:	1c03      	adds	r3, r0, #0
 8003a9e:	1c18      	adds	r0, r3, #0
 8003aa0:	f7fc fd8a 	bl	80005b8 <__aeabi_f2uiz>
 8003aa4:	0002      	movs	r2, r0
 8003aa6:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <initiateSettings+0x60>)
 8003aa8:	601a      	str	r2, [r3, #0]
	myRadio.power = settings.power;
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <initiateSettings+0x5c>)
 8003aac:	7bda      	ldrb	r2, [r3, #15]
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <initiateSettings+0x60>)
 8003ab0:	711a      	strb	r2, [r3, #4]
	myRadio.preamble = settings.preamble;
 8003ab2:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <initiateSettings+0x5c>)
 8003ab4:	891a      	ldrh	r2, [r3, #8]
 8003ab6:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <initiateSettings+0x60>)
 8003ab8:	819a      	strh	r2, [r3, #12]
}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000534 	.word	0x20000534
 8003ac4:	20000494 	.word	0x20000494
 8003ac8:	427423d7 	.word	0x427423d7

08003acc <defaultSettings>:
/**
 * @brief Initializes default node settings
 * @param None
 * @retval None
 */
void defaultSettings() {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
	settings.nodeNum = 0;
 8003ad0:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <defaultSettings+0x5c>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	729a      	strb	r2, [r3, #10]
	settings.workInterval = 600;
 8003ad6:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <defaultSettings+0x5c>)
 8003ad8:	2296      	movs	r2, #150	; 0x96
 8003ada:	0092      	lsls	r2, r2, #2
 8003adc:	605a      	str	r2, [r3, #4]
	settings.voltageTreshold = 2.0f;
 8003ade:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <defaultSettings+0x5c>)
 8003ae0:	2280      	movs	r2, #128	; 0x80
 8003ae2:	05d2      	lsls	r2, r2, #23
 8003ae4:	615a      	str	r2, [r3, #20]
	settings.bw = SX127X_LORA_BW_125KHZ;
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <defaultSettings+0x5c>)
 8003ae8:	2207      	movs	r2, #7
 8003aea:	735a      	strb	r2, [r3, #13]
	settings.cr = SX127X_CR_4_8;
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <defaultSettings+0x5c>)
 8003aee:	2204      	movs	r2, #4
 8003af0:	72da      	strb	r2, [r3, #11]
	settings.sf = SX127X_LORA_SF_12;
 8003af2:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <defaultSettings+0x5c>)
 8003af4:	220c      	movs	r2, #12
 8003af6:	731a      	strb	r2, [r3, #12]
	settings.sw = 0x1;
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <defaultSettings+0x5c>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	739a      	strb	r2, [r3, #14]
	settings.power = SX127X_POWER_20DBM;
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <defaultSettings+0x5c>)
 8003b00:	2214      	movs	r2, #20
 8003b02:	73da      	strb	r2, [r3, #15]
	settings.realFrequency = DEF_FREQUENCY;
 8003b04:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <defaultSettings+0x5c>)
 8003b06:	4a09      	ldr	r2, [pc, #36]	; (8003b2c <defaultSettings+0x60>)
 8003b08:	601a      	str	r2, [r3, #0]
	settings.preamble = 5;
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <defaultSettings+0x5c>)
 8003b0c:	2205      	movs	r2, #5
 8003b0e:	811a      	strh	r2, [r3, #8]
	settings.useLed = true;
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <defaultSettings+0x5c>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	741a      	strb	r2, [r3, #16]
	settings.debugLevel = 0;
 8003b16:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <defaultSettings+0x5c>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	761a      	strb	r2, [r3, #24]
	initiateSettings();
 8003b1c:	f7ff ffa2 	bl	8003a64 <initiateSettings>
}
 8003b20:	46c0      	nop			; (mov r8, r8)
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	20000534 	.word	0x20000534
 8003b2c:	33c8d600 	.word	0x33c8d600

08003b30 <tryEeprom>:
 * @brief Tries to initialize node from data stored in EEPROM
 * if data exist and valid
 * @param None
 * @retval HAL status
 */
HAL_StatusTypeDef tryEeprom() {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
	nodeSettings_t *eepromSettings = (nodeSettings_t*) FLASH_EEPROM_BASE;
 8003b36:	4b34      	ldr	r3, [pc, #208]	; (8003c08 <tryEeprom+0xd8>)
 8003b38:	607b      	str	r3, [r7, #4]
	if (eepromSettings->realFrequency > MIN_FREQUENCY
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a33      	ldr	r2, [pc, #204]	; (8003c0c <tryEeprom+0xdc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d800      	bhi.n	8003b46 <tryEeprom+0x16>
 8003b44:	e05b      	b.n	8003bfe <tryEeprom+0xce>
			&& eepromSettings->realFrequency < MAX_FREQUENCY
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a31      	ldr	r2, [pc, #196]	; (8003c10 <tryEeprom+0xe0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d856      	bhi.n	8003bfe <tryEeprom+0xce>
			&& eepromSettings->bw < 10 && eepromSettings->cr < 5
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	7b5b      	ldrb	r3, [r3, #13]
 8003b54:	2b09      	cmp	r3, #9
 8003b56:	d852      	bhi.n	8003bfe <tryEeprom+0xce>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	7adb      	ldrb	r3, [r3, #11]
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d84e      	bhi.n	8003bfe <tryEeprom+0xce>
			&& eepromSettings->cr > 0 && eepromSettings->sf > 6
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	7adb      	ldrb	r3, [r3, #11]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d04a      	beq.n	8003bfe <tryEeprom+0xce>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	7b1b      	ldrb	r3, [r3, #12]
 8003b6c:	2b06      	cmp	r3, #6
 8003b6e:	d946      	bls.n	8003bfe <tryEeprom+0xce>
			&& eepromSettings->sf < 13 && eepromSettings->power > 9
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	7b1b      	ldrb	r3, [r3, #12]
 8003b74:	2b0c      	cmp	r3, #12
 8003b76:	d842      	bhi.n	8003bfe <tryEeprom+0xce>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	7bdb      	ldrb	r3, [r3, #15]
 8003b7c:	2b09      	cmp	r3, #9
 8003b7e:	d93e      	bls.n	8003bfe <tryEeprom+0xce>
			&& eepromSettings->power < 21 && eepromSettings->sw != 0x34
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	7bdb      	ldrb	r3, [r3, #15]
 8003b84:	2b14      	cmp	r3, #20
 8003b86:	d83a      	bhi.n	8003bfe <tryEeprom+0xce>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7b9b      	ldrb	r3, [r3, #14]
 8003b8c:	2b34      	cmp	r3, #52	; 0x34
 8003b8e:	d036      	beq.n	8003bfe <tryEeprom+0xce>
			&& eepromSettings->voltageTreshold >= 1.7f
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	491f      	ldr	r1, [pc, #124]	; (8003c14 <tryEeprom+0xe4>)
 8003b96:	1c18      	adds	r0, r3, #0
 8003b98:	f7fc fcb6 	bl	8000508 <__aeabi_fcmpge>
 8003b9c:	1e03      	subs	r3, r0, #0
 8003b9e:	d02e      	beq.n	8003bfe <tryEeprom+0xce>
			&& eepromSettings->voltageTreshold <= 3.0f
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	491c      	ldr	r1, [pc, #112]	; (8003c18 <tryEeprom+0xe8>)
 8003ba6:	1c18      	adds	r0, r3, #0
 8003ba8:	f7fc fc9a 	bl	80004e0 <__aeabi_fcmple>
 8003bac:	1e03      	subs	r3, r0, #0
 8003bae:	d026      	beq.n	8003bfe <tryEeprom+0xce>
			&& eepromSettings->workInterval >= MIN_WORK_INTERVAL
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b3b      	cmp	r3, #59	; 0x3b
 8003bb6:	d922      	bls.n	8003bfe <tryEeprom+0xce>
			&& eepromSettings->workInterval <= MAX_WORK_INTERVAL
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4a17      	ldr	r2, [pc, #92]	; (8003c1c <tryEeprom+0xec>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d81d      	bhi.n	8003bfe <tryEeprom+0xce>
			&& eepromSettings->preamble > 1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	891b      	ldrh	r3, [r3, #8]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d919      	bls.n	8003bfe <tryEeprom+0xce>
			&& eepromSettings->voltageTreshold >= 1.8f
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	4914      	ldr	r1, [pc, #80]	; (8003c20 <tryEeprom+0xf0>)
 8003bd0:	1c18      	adds	r0, r3, #0
 8003bd2:	f7fc fc99 	bl	8000508 <__aeabi_fcmpge>
 8003bd6:	1e03      	subs	r3, r0, #0
 8003bd8:	d011      	beq.n	8003bfe <tryEeprom+0xce>
			&& eepromSettings->voltageTreshold <= 3.1f) {
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	4911      	ldr	r1, [pc, #68]	; (8003c24 <tryEeprom+0xf4>)
 8003be0:	1c18      	adds	r0, r3, #0
 8003be2:	f7fc fc7d 	bl	80004e0 <__aeabi_fcmple>
 8003be6:	1e03      	subs	r3, r0, #0
 8003be8:	d009      	beq.n	8003bfe <tryEeprom+0xce>
		memcpy((uint8_t*) &settings, (uint8_t*) eepromSettings,
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <tryEeprom+0xf8>)
 8003bee:	221c      	movs	r2, #28
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f007 fa3f 	bl	800b074 <memcpy>
				sizeof(settings));
		initiateSettings();
 8003bf6:	f7ff ff35 	bl	8003a64 <initiateSettings>
		return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <tryEeprom+0xd0>
	}
	return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
}
 8003c00:	0018      	movs	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b002      	add	sp, #8
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	08080000 	.word	0x08080000
 8003c0c:	0839b680 	.word	0x0839b680
 8003c10:	3b8b87bf 	.word	0x3b8b87bf
 8003c14:	3fd9999a 	.word	0x3fd9999a
 8003c18:	40400000 	.word	0x40400000
 8003c1c:	0000a8c0 	.word	0x0000a8c0
 8003c20:	3fe66666 	.word	0x3fe66666
 8003c24:	40466666 	.word	0x40466666
 8003c28:	20000534 	.word	0x20000534

08003c2c <saveSettings>:
 * @brief Saves settings from RAM to EEPROM
 * Saves settings by copying var settings to EEPROM
 * @param None
 * @retval None
 */
void saveSettings(nodeSettings_t *settingsPtr) {
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint32_t *ptr = (uint32_t*) settingsPtr;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_DATAEEPROM_Unlock();
 8003c38:	f003 fe74 	bl	8007924 <HAL_FLASHEx_DATAEEPROM_Unlock>
	for (i = 0; i < (sizeof(*settingsPtr) + 3) / 4; i++)
 8003c3c:	230f      	movs	r3, #15
 8003c3e:	18fb      	adds	r3, r7, r3
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
 8003c44:	e014      	b.n	8003c70 <saveSettings+0x44>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
		FLASH_EEPROM_BASE + i * 4, *ptr++);
 8003c46:	240f      	movs	r4, #15
 8003c48:	193b      	adds	r3, r7, r4
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	4a0e      	ldr	r2, [pc, #56]	; (8003c88 <saveSettings+0x5c>)
 8003c4e:	4694      	mov	ip, r2
 8003c50:	4463      	add	r3, ip
 8003c52:	009b      	lsls	r3, r3, #2
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
 8003c54:	0019      	movs	r1, r3
		FLASH_EEPROM_BASE + i * 4, *ptr++);
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	1d1a      	adds	r2, r3, #4
 8003c5a:	60ba      	str	r2, [r7, #8]
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	001a      	movs	r2, r3
 8003c60:	2002      	movs	r0, #2
 8003c62:	f003 fe9b 	bl	800799c <HAL_FLASHEx_DATAEEPROM_Program>
	for (i = 0; i < (sizeof(*settingsPtr) + 3) / 4; i++)
 8003c66:	193b      	adds	r3, r7, r4
 8003c68:	781a      	ldrb	r2, [r3, #0]
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	3201      	adds	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
 8003c70:	230f      	movs	r3, #15
 8003c72:	18fb      	adds	r3, r7, r3
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b06      	cmp	r3, #6
 8003c78:	d9e5      	bls.n	8003c46 <saveSettings+0x1a>
	HAL_FLASHEx_DATAEEPROM_Lock();
 8003c7a:	f003 fe81 	bl	8007980 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b005      	add	sp, #20
 8003c84:	bd90      	pop	{r4, r7, pc}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	02020000 	.word	0x02020000

08003c8c <setWakeup>:

void setWakeup(uint16_t delay) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	0002      	movs	r2, r0
 8003c94:	1dbb      	adds	r3, r7, #6
 8003c96:	801a      	strh	r2, [r3, #0]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, delay,
 8003c98:	1dbb      	adds	r3, r7, #6
 8003c9a:	8819      	ldrh	r1, [r3, #0]
 8003c9c:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <setWakeup+0x30>)
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f005 fb9f 	bl	80093e4 <HAL_RTCEx_SetWakeUpTimer_IT>
	RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
	debugLogInt("RTC alarm in %d seconds", delay);
 8003ca6:	1dbb      	adds	r3, r7, #6
 8003ca8:	881a      	ldrh	r2, [r3, #0]
 8003caa:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <setWakeup+0x34>)
 8003cac:	0011      	movs	r1, r2
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f7ff fd88 	bl	80037c4 <debugLogInt>
}
 8003cb4:	46c0      	nop			; (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b002      	add	sp, #8
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20000330 	.word	0x20000330
 8003cc0:	0800e2ec 	.word	0x0800e2ec

08003cc4 <sleep>:
 * Switches radio module into sleep mode
 * Switches MCU to Stop mode
 * @param None
 * @retval None
 */
void sleep() {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	if (status.unhandledExti)
 8003cc8:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <sleep+0x54>)
 8003cca:	7a1b      	ldrb	r3, [r3, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d120      	bne.n	8003d12 <sleep+0x4e>
		return;
    flag.sleep = 1;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <sleep+0x58>)
 8003cd2:	785a      	ldrb	r2, [r3, #1]
 8003cd4:	2120      	movs	r1, #32
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	705a      	strb	r2, [r3, #1]
	debugLog("Zzz...");
 8003cda:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <sleep+0x5c>)
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7ff fd5b 	bl	8003798 <debugLog>
	HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin | ORANGE_Pin, LED_OFF);
 8003ce2:	23c0      	movs	r3, #192	; 0xc0
 8003ce4:	019b      	lsls	r3, r3, #6
 8003ce6:	480f      	ldr	r0, [pc, #60]	; (8003d24 <sleep+0x60>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	0019      	movs	r1, r3
 8003cec:	f004 f841 	bl	8007d72 <HAL_GPIO_WritePin>
	SX127X_sleep(&myRadio);
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <sleep+0x64>)
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f001 ffca 	bl	8005c8c <SX127X_sleep>
	HAL_DBGMCU_DisableDBGStopMode();
 8003cf8:	f002 fdd8 	bl	80068ac <HAL_DBGMCU_DisableDBGStopMode>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <sleep+0x68>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <sleep+0x68>)
 8003d02:	2104      	movs	r1, #4
 8003d04:	430a      	orrs	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003d08:	2101      	movs	r1, #1
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	f004 fb4c 	bl	80083a8 <HAL_PWR_EnterSTOPMode>
 8003d10:	e000      	b.n	8003d14 <sleep+0x50>
		return;
 8003d12:	46c0      	nop			; (mov r8, r8)

}
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	2000051c 	.word	0x2000051c
 8003d1c:	2000048c 	.word	0x2000048c
 8003d20:	0800e304 	.word	0x0800e304
 8003d24:	50000400 	.word	0x50000400
 8003d28:	20000494 	.word	0x20000494
 8003d2c:	40007000 	.word	0x40007000

08003d30 <sendStatus>:
/**
 * @Sends current status of Node to Base station
 * @param None
 * @retval None
 */
void sendStatus() {
 8003d30:	b5b0      	push	{r4, r5, r7, lr}
 8003d32:	af00      	add	r7, sp, #0

	lpTimWdCnt = 0;
 8003d34:	4b55      	ldr	r3, [pc, #340]	; (8003e8c <sendStatus+0x15c>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
	txMes->adr = settings.nodeNum;
 8003d3a:	4b55      	ldr	r3, [pc, #340]	; (8003e90 <sendStatus+0x160>)
 8003d3c:	7a9a      	ldrb	r2, [r3, #10]
 8003d3e:	4b55      	ldr	r3, [pc, #340]	; (8003e94 <sendStatus+0x164>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	1c11      	adds	r1, r2, #0
 8003d44:	221f      	movs	r2, #31
 8003d46:	400a      	ands	r2, r1
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	00d0      	lsls	r0, r2, #3
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	2107      	movs	r1, #7
 8003d50:	400a      	ands	r2, r1
 8003d52:	1c11      	adds	r1, r2, #0
 8003d54:	1c02      	adds	r2, r0, #0
 8003d56:	430a      	orrs	r2, r1
 8003d58:	701a      	strb	r2, [r3, #0]
	txMes->uplink = 1;
 8003d5a:	4b4e      	ldr	r3, [pc, #312]	; (8003e94 <sendStatus+0x164>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	781a      	ldrb	r2, [r3, #0]
 8003d60:	2101      	movs	r1, #1
 8003d62:	430a      	orrs	r2, r1
 8003d64:	701a      	strb	r2, [r3, #0]
	txMes->disarm = status.disarmed;
 8003d66:	4b4b      	ldr	r3, [pc, #300]	; (8003e94 <sendStatus+0x164>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a4b      	ldr	r2, [pc, #300]	; (8003e98 <sendStatus+0x168>)
 8003d6c:	7812      	ldrb	r2, [r2, #0]
 8003d6e:	2101      	movs	r1, #1
 8003d70:	400a      	ands	r2, r1
 8003d72:	0010      	movs	r0, r2
 8003d74:	785a      	ldrb	r2, [r3, #1]
 8003d76:	2101      	movs	r1, #1
 8003d78:	438a      	bics	r2, r1
 8003d7a:	1c11      	adds	r1, r2, #0
 8003d7c:	1c02      	adds	r2, r0, #0
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	705a      	strb	r2, [r3, #1]
	txMes->message = MSG_UP_ACKNOWLEDGE;
 8003d82:	4b44      	ldr	r3, [pc, #272]	; (8003e94 <sendStatus+0x164>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	781a      	ldrb	r2, [r3, #0]
 8003d88:	2106      	movs	r1, #6
 8003d8a:	438a      	bics	r2, r1
 8003d8c:	701a      	strb	r2, [r3, #0]
	txMes->opened = status.opened || status.unconfirmedOpening;
 8003d8e:	4b42      	ldr	r3, [pc, #264]	; (8003e98 <sendStatus+0x168>)
 8003d90:	785b      	ldrb	r3, [r3, #1]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d103      	bne.n	8003d9e <sendStatus+0x6e>
 8003d96:	4b40      	ldr	r3, [pc, #256]	; (8003e98 <sendStatus+0x168>)
 8003d98:	79db      	ldrb	r3, [r3, #7]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <sendStatus+0x72>
 8003d9e:	2201      	movs	r2, #1
 8003da0:	e000      	b.n	8003da4 <sendStatus+0x74>
 8003da2:	2200      	movs	r2, #0
 8003da4:	4b3b      	ldr	r3, [pc, #236]	; (8003e94 <sendStatus+0x164>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	1c11      	adds	r1, r2, #0
 8003daa:	2201      	movs	r2, #1
 8003dac:	400a      	ands	r2, r1
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	2101      	movs	r1, #1
 8003db2:	400a      	ands	r2, r1
 8003db4:	1890      	adds	r0, r2, r2
 8003db6:	785a      	ldrb	r2, [r3, #1]
 8003db8:	2102      	movs	r1, #2
 8003dba:	438a      	bics	r2, r1
 8003dbc:	1c11      	adds	r1, r2, #0
 8003dbe:	1c02      	adds	r2, r0, #0
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	705a      	strb	r2, [r3, #1]
	txMes->powered = status.powered;
 8003dc4:	4b33      	ldr	r3, [pc, #204]	; (8003e94 <sendStatus+0x164>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a33      	ldr	r2, [pc, #204]	; (8003e98 <sendStatus+0x168>)
 8003dca:	7912      	ldrb	r2, [r2, #4]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	400a      	ands	r2, r1
 8003dd0:	0090      	lsls	r0, r2, #2
 8003dd2:	785a      	ldrb	r2, [r3, #1]
 8003dd4:	2104      	movs	r1, #4
 8003dd6:	438a      	bics	r2, r1
 8003dd8:	1c11      	adds	r1, r2, #0
 8003dda:	1c02      	adds	r2, r0, #0
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	705a      	strb	r2, [r3, #1]
	txMes->codedTemperature = getTemperature() * 2.0F + 80;
 8003de0:	f7ff fd56 	bl	8003890 <getTemperature>
 8003de4:	1c03      	adds	r3, r0, #0
 8003de6:	1c19      	adds	r1, r3, #0
 8003de8:	1c18      	adds	r0, r3, #0
 8003dea:	f7fc fcc9 	bl	8000780 <__aeabi_fadd>
 8003dee:	1c03      	adds	r3, r0, #0
 8003df0:	492a      	ldr	r1, [pc, #168]	; (8003e9c <sendStatus+0x16c>)
 8003df2:	1c18      	adds	r0, r3, #0
 8003df4:	f7fc fcc4 	bl	8000780 <__aeabi_fadd>
 8003df8:	1c03      	adds	r3, r0, #0
 8003dfa:	1c1a      	adds	r2, r3, #0
 8003dfc:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <sendStatus+0x164>)
 8003dfe:	681c      	ldr	r4, [r3, #0]
 8003e00:	1c10      	adds	r0, r2, #0
 8003e02:	f7fc fbd9 	bl	80005b8 <__aeabi_f2uiz>
 8003e06:	0003      	movs	r3, r0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	70a3      	strb	r3, [r4, #2]
	txMes->codedVoltage = ((int) (getVoltage() * 10)) - 19;
 8003e0c:	f7ff fd0a 	bl	8003824 <getVoltage>
 8003e10:	1c03      	adds	r3, r0, #0
 8003e12:	4923      	ldr	r1, [pc, #140]	; (8003ea0 <sendStatus+0x170>)
 8003e14:	1c18      	adds	r0, r3, #0
 8003e16:	f7fd f819 	bl	8000e4c <__aeabi_fmul>
 8003e1a:	1c03      	adds	r3, r0, #0
 8003e1c:	1c18      	adds	r0, r3, #0
 8003e1e:	f7fd fae9 	bl	80013f4 <__aeabi_f2iz>
 8003e22:	0003      	movs	r3, r0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	3b13      	subs	r3, #19
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <sendStatus+0x164>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	1c11      	adds	r1, r2, #0
 8003e30:	221f      	movs	r2, #31
 8003e32:	400a      	ands	r2, r1
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	00d0      	lsls	r0, r2, #3
 8003e38:	785a      	ldrb	r2, [r3, #1]
 8003e3a:	2107      	movs	r1, #7
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	1c11      	adds	r1, r2, #0
 8003e40:	1c02      	adds	r2, r0, #0
 8003e42:	430a      	orrs	r2, r1
 8003e44:	705a      	strb	r2, [r3, #1]
	status.openedToConfirm = status.opened || status.unconfirmedOpening;
 8003e46:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <sendStatus+0x168>)
 8003e48:	785b      	ldrb	r3, [r3, #1]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <sendStatus+0x126>
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <sendStatus+0x168>)
 8003e50:	79db      	ldrb	r3, [r3, #7]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <sendStatus+0x12a>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <sendStatus+0x12c>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	1c1a      	adds	r2, r3, #0
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4013      	ands	r3, r2
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <sendStatus+0x168>)
 8003e66:	70da      	strb	r2, [r3, #3]
	status.poweredToConfirm = status.powered;
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <sendStatus+0x168>)
 8003e6a:	791a      	ldrb	r2, [r3, #4]
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <sendStatus+0x168>)
 8003e6e:	719a      	strb	r2, [r3, #6]
	SX127X_transmitAsync(&myRadio, sizeof(uplinkMessage_t));
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <sendStatus+0x174>)
 8003e72:	2103      	movs	r1, #3
 8003e74:	0018      	movs	r0, r3
 8003e76:	f002 f84b 	bl	8005f10 <SX127X_transmitAsync>
	lastTransTick = HAL_GetTick();
 8003e7a:	f002 fd0d 	bl	8006898 <HAL_GetTick>
 8003e7e:	0002      	movs	r2, r0
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <sendStatus+0x178>)
 8003e82:	601a      	str	r2, [r3, #0]

}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bdb0      	pop	{r4, r5, r7, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	20000490 	.word	0x20000490
 8003e90:	20000534 	.word	0x20000534
 8003e94:	20000058 	.word	0x20000058
 8003e98:	2000051c 	.word	0x2000051c
 8003e9c:	42a00000 	.word	0x42a00000
 8003ea0:	41200000 	.word	0x41200000
 8003ea4:	20000494 	.word	0x20000494
 8003ea8:	20000550 	.word	0x20000550

08003eac <deinitGpio>:
/**
 * @brief Turns of user pins to decrease power consumption
 * @param None
 * @retval None
 */
void deinitGpio() {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003eb2:	1d3b      	adds	r3, r7, #4
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	2314      	movs	r3, #20
 8003eb8:	001a      	movs	r2, r3
 8003eba:	2100      	movs	r1, #0
 8003ebc:	f007 f8e3 	bl	800b086 <memset>

	GPIO_InitStruct.Pin = USER1_Pin | USER2_Pin;
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	22c0      	movs	r2, #192	; 0xc0
 8003ec4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	2203      	movs	r2, #3
 8003eca:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ecc:	1d3b      	adds	r3, r7, #4
 8003ece:	2200      	movs	r2, #0
 8003ed0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(USER1_GPIO_Port, &GPIO_InitStruct);
 8003ed2:	1d3b      	adds	r3, r7, #4
 8003ed4:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <deinitGpio+0x3c>)
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	0010      	movs	r0, r2
 8003eda:	f003 fdb7 	bl	8007a4c <HAL_GPIO_Init>
}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	b006      	add	sp, #24
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	50000400 	.word	0x50000400

08003eec <RadioInit>:
 * @brief Configures Radio module, tries to load custom settings from EEPROM
 * if there is no valid data in EEPROM than loads default settings
 * @param None
 * @retval None
 */
void RadioInit() {
 8003eec:	b590      	push	{r4, r7, lr}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af02      	add	r7, sp, #8
	SX127X_dio_t nss;
	SX127X_dio_t reset;

	SX127X_defaultConfig(&myRadio);
 8003ef2:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <RadioInit+0x68>)
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f001 fe53 	bl	8005ba0 <SX127X_defaultConfig>
	defaultSettings();
 8003efa:	f7ff fde7 	bl	8003acc <defaultSettings>
	tryEeprom();
 8003efe:	f7ff fe17 	bl	8003b30 <tryEeprom>
	nss.pin = NSS_Pin;
 8003f02:	2108      	movs	r1, #8
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	2210      	movs	r2, #16
 8003f08:	601a      	str	r2, [r3, #0]
	nss.port = NSS_GPIO_Port;
 8003f0a:	187b      	adds	r3, r7, r1
 8003f0c:	22a0      	movs	r2, #160	; 0xa0
 8003f0e:	05d2      	lsls	r2, r2, #23
 8003f10:	605a      	str	r2, [r3, #4]
	reset.pin = RESET_Pin;
 8003f12:	003b      	movs	r3, r7
 8003f14:	2208      	movs	r2, #8
 8003f16:	601a      	str	r2, [r3, #0]
	reset.port = RESET_GPIO_Port;
 8003f18:	003b      	movs	r3, r7
 8003f1a:	22a0      	movs	r2, #160	; 0xa0
 8003f1c:	05d2      	lsls	r2, r2, #23
 8003f1e:	605a      	str	r2, [r3, #4]
	SX127X_PortConfig(&myRadio, reset, nss, &hspi1);
 8003f20:	187b      	adds	r3, r7, r1
 8003f22:	003a      	movs	r2, r7
 8003f24:	4c0b      	ldr	r4, [pc, #44]	; (8003f54 <RadioInit+0x68>)
 8003f26:	490c      	ldr	r1, [pc, #48]	; (8003f58 <RadioInit+0x6c>)
 8003f28:	9101      	str	r1, [sp, #4]
 8003f2a:	4669      	mov	r1, sp
 8003f2c:	6858      	ldr	r0, [r3, #4]
 8003f2e:	6008      	str	r0, [r1, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6811      	ldr	r1, [r2, #0]
 8003f34:	6852      	ldr	r2, [r2, #4]
 8003f36:	0020      	movs	r0, r4
 8003f38:	f001 fe5e 	bl	8005bf8 <SX127X_PortConfig>
	SX127X_init(&myRadio);
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <RadioInit+0x68>)
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f002 f8fc 	bl	800613c <SX127X_init>
	SX127X_config(&myRadio);
 8003f44:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <RadioInit+0x68>)
 8003f46:	0018      	movs	r0, r3
 8003f48:	f001 fd4c 	bl	80059e4 <SX127X_config>
}
 8003f4c:	46c0      	nop			; (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b005      	add	sp, #20
 8003f52:	bd90      	pop	{r4, r7, pc}
 8003f54:	20000494 	.word	0x20000494
 8003f58:	20000354 	.word	0x20000354

08003f5c <LEDhandler>:

void LEDhandler(SX127X_t *module) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	static uint32_t lastBlink = 0;
	if (module->signalDetected && settings.useLed)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	7f1b      	ldrb	r3, [r3, #28]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00b      	beq.n	8003f84 <LEDhandler+0x28>
 8003f6c:	4b27      	ldr	r3, [pc, #156]	; (800400c <LEDhandler+0xb0>)
 8003f6e:	7c1b      	ldrb	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d007      	beq.n	8003f84 <LEDhandler+0x28>
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_ON);
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	019b      	lsls	r3, r3, #6
 8003f78:	4825      	ldr	r0, [pc, #148]	; (8004010 <LEDhandler+0xb4>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	f003 fef8 	bl	8007d72 <HAL_GPIO_WritePin>
 8003f82:	e006      	b.n	8003f92 <LEDhandler+0x36>
	else
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin, LED_OFF);
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	019b      	lsls	r3, r3, #6
 8003f88:	4821      	ldr	r0, [pc, #132]	; (8004010 <LEDhandler+0xb4>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	0019      	movs	r1, r3
 8003f8e:	f003 fef0 	bl	8007d72 <HAL_GPIO_WritePin>

	if (module->status == TX && settings.useLed)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	7c1b      	ldrb	r3, [r3, #16]
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d10b      	bne.n	8003fb2 <LEDhandler+0x56>
 8003f9a:	4b1c      	ldr	r3, [pc, #112]	; (800400c <LEDhandler+0xb0>)
 8003f9c:	7c1b      	ldrb	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <LEDhandler+0x56>
		HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_ON);
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	015b      	lsls	r3, r3, #5
 8003fa6:	481a      	ldr	r0, [pc, #104]	; (8004010 <LEDhandler+0xb4>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	0019      	movs	r1, r3
 8003fac:	f003 fee1 	bl	8007d72 <HAL_GPIO_WritePin>
 8003fb0:	e006      	b.n	8003fc0 <LEDhandler+0x64>
	else
		HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LED_OFF);
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	015b      	lsls	r3, r3, #5
 8003fb6:	4816      	ldr	r0, [pc, #88]	; (8004010 <LEDhandler+0xb4>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	0019      	movs	r1, r3
 8003fbc:	f003 fed9 	bl	8007d72 <HAL_GPIO_WritePin>

	if (HAL_GetTick() - lastBlink > 5000) {
 8003fc0:	f002 fc6a 	bl	8006898 <HAL_GetTick>
 8003fc4:	0002      	movs	r2, r0
 8003fc6:	4b13      	ldr	r3, [pc, #76]	; (8004014 <LEDhandler+0xb8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	4a12      	ldr	r2, [pc, #72]	; (8004018 <LEDhandler+0xbc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d904      	bls.n	8003fdc <LEDhandler+0x80>
		lastBlink = HAL_GetTick();
 8003fd2:	f002 fc61 	bl	8006898 <HAL_GetTick>
 8003fd6:	0002      	movs	r2, r0
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <LEDhandler+0xb8>)
 8003fda:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GetTick() - lastBlink < 50 && settings.useLed) {
 8003fdc:	f002 fc5c 	bl	8006898 <HAL_GetTick>
 8003fe0:	0002      	movs	r2, r0
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <LEDhandler+0xb8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b31      	cmp	r3, #49	; 0x31
 8003fea:	d80a      	bhi.n	8004002 <LEDhandler+0xa6>
 8003fec:	4b07      	ldr	r3, [pc, #28]	; (800400c <LEDhandler+0xb0>)
 8003fee:	7c1b      	ldrb	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d006      	beq.n	8004002 <LEDhandler+0xa6>
		HAL_GPIO_WritePin(BLUE_GPIO_Port, ORANGE_Pin | BLUE_Pin, LED_ON);
 8003ff4:	23c0      	movs	r3, #192	; 0xc0
 8003ff6:	019b      	lsls	r3, r3, #6
 8003ff8:	4805      	ldr	r0, [pc, #20]	; (8004010 <LEDhandler+0xb4>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	f003 feb8 	bl	8007d72 <HAL_GPIO_WritePin>
	}

}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	46bd      	mov	sp, r7
 8004006:	b002      	add	sp, #8
 8004008:	bd80      	pop	{r7, pc}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	20000534 	.word	0x20000534
 8004010:	50000400 	.word	0x50000400
 8004014:	20000658 	.word	0x20000658
 8004018:	00001388 	.word	0x00001388

0800401c <printInfo>:

void printInfo() {
 800401c:	b590      	push	{r4, r7, lr}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
#ifdef DEBUG
	uint32_t time = RTC->TR;
 8004022:	4b6f      	ldr	r3, [pc, #444]	; (80041e0 <printInfo+0x1c4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]
	uint32_t date = RTC->DR;
 8004028:	4b6d      	ldr	r3, [pc, #436]	; (80041e0 <printInfo+0x1c4>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60bb      	str	r3, [r7, #8]
	uint32_t tick = HAL_GetTick();
 800402e:	f002 fc33 	bl	8006898 <HAL_GetTick>
 8004032:	0003      	movs	r3, r0
 8004034:	607b      	str	r3, [r7, #4]
	printf("Status requested\n");
 8004036:	4b6b      	ldr	r3, [pc, #428]	; (80041e4 <printInfo+0x1c8>)
 8004038:	0018      	movs	r0, r3
 800403a:	f007 fd3b 	bl	800bab4 <puts>
	printf("SysTick: %10lu\n", tick);
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	4b69      	ldr	r3, [pc, #420]	; (80041e8 <printInfo+0x1cc>)
 8004042:	0011      	movs	r1, r2
 8004044:	0018      	movs	r0, r3
 8004046:	f007 fc95 	bl	800b974 <iprintf>
	printf("System time: %02x:%02x:%02x\n", (uint16_t) (time >> 16) & 0xFF,
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	b29b      	uxth	r3, r3
 8004050:	001a      	movs	r2, r3
 8004052:	23ff      	movs	r3, #255	; 0xff
 8004054:	401a      	ands	r2, r3
 8004056:	0011      	movs	r1, r2
			(uint16_t) (time >> 8) & 0xFF, (uint16_t) time & 0xFF);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	0a1b      	lsrs	r3, r3, #8
 800405c:	b29b      	uxth	r3, r3
	printf("System time: %02x:%02x:%02x\n", (uint16_t) (time >> 16) & 0xFF,
 800405e:	001a      	movs	r2, r3
 8004060:	23ff      	movs	r3, #255	; 0xff
 8004062:	401a      	ands	r2, r3
			(uint16_t) (time >> 8) & 0xFF, (uint16_t) time & 0xFF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	b29b      	uxth	r3, r3
	printf("System time: %02x:%02x:%02x\n", (uint16_t) (time >> 16) & 0xFF,
 8004068:	0018      	movs	r0, r3
 800406a:	23ff      	movs	r3, #255	; 0xff
 800406c:	4003      	ands	r3, r0
 800406e:	485f      	ldr	r0, [pc, #380]	; (80041ec <printInfo+0x1d0>)
 8004070:	f007 fc80 	bl	800b974 <iprintf>
	printf("System date: %x.%02x.%x\n", (uint16_t) date & 0xFF,
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	b29b      	uxth	r3, r3
 8004078:	001a      	movs	r2, r3
 800407a:	23ff      	movs	r3, #255	; 0xff
 800407c:	401a      	ands	r2, r3
 800407e:	0011      	movs	r1, r2
			(uint16_t) (date >> 8) & 0x1F,
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	b29b      	uxth	r3, r3
	printf("System date: %x.%02x.%x\n", (uint16_t) date & 0xFF,
 8004086:	001a      	movs	r2, r3
 8004088:	231f      	movs	r3, #31
 800408a:	401a      	ands	r2, r3
			((uint16_t) (date >> 16) & 0xFF) + 0x2000);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	0c1b      	lsrs	r3, r3, #16
 8004090:	b29b      	uxth	r3, r3
 8004092:	0018      	movs	r0, r3
 8004094:	23ff      	movs	r3, #255	; 0xff
 8004096:	4003      	ands	r3, r0
	printf("System date: %x.%02x.%x\n", (uint16_t) date & 0xFF,
 8004098:	2080      	movs	r0, #128	; 0x80
 800409a:	0180      	lsls	r0, r0, #6
 800409c:	4684      	mov	ip, r0
 800409e:	4463      	add	r3, ip
 80040a0:	4853      	ldr	r0, [pc, #332]	; (80041f0 <printInfo+0x1d4>)
 80040a2:	f007 fc67 	bl	800b974 <iprintf>
	printf("Voltage: %d.%02d V\n", (int) getVoltage(),
 80040a6:	f7ff fbbd 	bl	8003824 <getVoltage>
 80040aa:	1c03      	adds	r3, r0, #0
 80040ac:	1c18      	adds	r0, r3, #0
 80040ae:	f7fd f9a1 	bl	80013f4 <__aeabi_f2iz>
 80040b2:	0004      	movs	r4, r0
			((int) (getVoltage() * 100) % 100));
 80040b4:	f7ff fbb6 	bl	8003824 <getVoltage>
 80040b8:	1c03      	adds	r3, r0, #0
 80040ba:	494e      	ldr	r1, [pc, #312]	; (80041f4 <printInfo+0x1d8>)
 80040bc:	1c18      	adds	r0, r3, #0
 80040be:	f7fc fec5 	bl	8000e4c <__aeabi_fmul>
 80040c2:	1c03      	adds	r3, r0, #0
 80040c4:	1c18      	adds	r0, r3, #0
 80040c6:	f7fd f995 	bl	80013f4 <__aeabi_f2iz>
 80040ca:	0003      	movs	r3, r0
	printf("Voltage: %d.%02d V\n", (int) getVoltage(),
 80040cc:	2164      	movs	r1, #100	; 0x64
 80040ce:	0018      	movs	r0, r3
 80040d0:	f7fc f9a6 	bl	8000420 <__aeabi_idivmod>
 80040d4:	000b      	movs	r3, r1
 80040d6:	001a      	movs	r2, r3
 80040d8:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <printInfo+0x1dc>)
 80040da:	0021      	movs	r1, r4
 80040dc:	0018      	movs	r0, r3
 80040de:	f007 fc49 	bl	800b974 <iprintf>
	printf("Temp: %d.%01d C\n", (int) getTemperature(),
 80040e2:	f7ff fbd5 	bl	8003890 <getTemperature>
 80040e6:	1c03      	adds	r3, r0, #0
 80040e8:	1c18      	adds	r0, r3, #0
 80040ea:	f7fd f983 	bl	80013f4 <__aeabi_f2iz>
 80040ee:	0004      	movs	r4, r0
			((int) (getTemperature() * 10) % 10));
 80040f0:	f7ff fbce 	bl	8003890 <getTemperature>
 80040f4:	1c03      	adds	r3, r0, #0
 80040f6:	4941      	ldr	r1, [pc, #260]	; (80041fc <printInfo+0x1e0>)
 80040f8:	1c18      	adds	r0, r3, #0
 80040fa:	f7fc fea7 	bl	8000e4c <__aeabi_fmul>
 80040fe:	1c03      	adds	r3, r0, #0
 8004100:	1c18      	adds	r0, r3, #0
 8004102:	f7fd f977 	bl	80013f4 <__aeabi_f2iz>
 8004106:	0003      	movs	r3, r0
	printf("Temp: %d.%01d C\n", (int) getTemperature(),
 8004108:	210a      	movs	r1, #10
 800410a:	0018      	movs	r0, r3
 800410c:	f7fc f988 	bl	8000420 <__aeabi_idivmod>
 8004110:	000b      	movs	r3, r1
 8004112:	001a      	movs	r2, r3
 8004114:	4b3a      	ldr	r3, [pc, #232]	; (8004200 <printInfo+0x1e4>)
 8004116:	0021      	movs	r1, r4
 8004118:	0018      	movs	r0, r3
 800411a:	f007 fc2b 	bl	800b974 <iprintf>
	printf("Powered: %s\n", status.powered ? "Yes" : "No");
 800411e:	4b39      	ldr	r3, [pc, #228]	; (8004204 <printInfo+0x1e8>)
 8004120:	791b      	ldrb	r3, [r3, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <printInfo+0x10e>
 8004126:	4b38      	ldr	r3, [pc, #224]	; (8004208 <printInfo+0x1ec>)
 8004128:	e000      	b.n	800412c <printInfo+0x110>
 800412a:	4b38      	ldr	r3, [pc, #224]	; (800420c <printInfo+0x1f0>)
 800412c:	4a38      	ldr	r2, [pc, #224]	; (8004210 <printInfo+0x1f4>)
 800412e:	0019      	movs	r1, r3
 8004130:	0010      	movs	r0, r2
 8004132:	f007 fc1f 	bl	800b974 <iprintf>
	printf("Powered to confirm: %s\n", status.poweredToConfirm ? "Yes" : "No");
 8004136:	4b33      	ldr	r3, [pc, #204]	; (8004204 <printInfo+0x1e8>)
 8004138:	799b      	ldrb	r3, [r3, #6]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <printInfo+0x126>
 800413e:	4b32      	ldr	r3, [pc, #200]	; (8004208 <printInfo+0x1ec>)
 8004140:	e000      	b.n	8004144 <printInfo+0x128>
 8004142:	4b32      	ldr	r3, [pc, #200]	; (800420c <printInfo+0x1f0>)
 8004144:	4a33      	ldr	r2, [pc, #204]	; (8004214 <printInfo+0x1f8>)
 8004146:	0019      	movs	r1, r3
 8004148:	0010      	movs	r0, r2
 800414a:	f007 fc13 	bl	800b974 <iprintf>
	printf("Disarmed: %s\n", status.disarmed ? "Yes" : "No");
 800414e:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <printInfo+0x1e8>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <printInfo+0x13e>
 8004156:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <printInfo+0x1ec>)
 8004158:	e000      	b.n	800415c <printInfo+0x140>
 800415a:	4b2c      	ldr	r3, [pc, #176]	; (800420c <printInfo+0x1f0>)
 800415c:	4a2e      	ldr	r2, [pc, #184]	; (8004218 <printInfo+0x1fc>)
 800415e:	0019      	movs	r1, r3
 8004160:	0010      	movs	r0, r2
 8004162:	f007 fc07 	bl	800b974 <iprintf>
	printf("Door opened: %s\n", status.opened ? "Yes" : "No");
 8004166:	4b27      	ldr	r3, [pc, #156]	; (8004204 <printInfo+0x1e8>)
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <printInfo+0x156>
 800416e:	4b26      	ldr	r3, [pc, #152]	; (8004208 <printInfo+0x1ec>)
 8004170:	e000      	b.n	8004174 <printInfo+0x158>
 8004172:	4b26      	ldr	r3, [pc, #152]	; (800420c <printInfo+0x1f0>)
 8004174:	4a29      	ldr	r2, [pc, #164]	; (800421c <printInfo+0x200>)
 8004176:	0019      	movs	r1, r3
 8004178:	0010      	movs	r0, r2
 800417a:	f007 fbfb 	bl	800b974 <iprintf>
	printf("Opened to confirm: %s\n", status.openedToConfirm ? "Yes" : "No");
 800417e:	4b21      	ldr	r3, [pc, #132]	; (8004204 <printInfo+0x1e8>)
 8004180:	78db      	ldrb	r3, [r3, #3]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <printInfo+0x16e>
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <printInfo+0x1ec>)
 8004188:	e000      	b.n	800418c <printInfo+0x170>
 800418a:	4b20      	ldr	r3, [pc, #128]	; (800420c <printInfo+0x1f0>)
 800418c:	4a24      	ldr	r2, [pc, #144]	; (8004220 <printInfo+0x204>)
 800418e:	0019      	movs	r1, r3
 8004190:	0010      	movs	r0, r2
 8004192:	f007 fbef 	bl	800b974 <iprintf>
	printf("Unconfirmed opening: %s\n",
			status.unconfirmedOpening ? "Yes" : "No");
 8004196:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <printInfo+0x1e8>)
 8004198:	79db      	ldrb	r3, [r3, #7]
	printf("Unconfirmed opening: %s\n",
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <printInfo+0x186>
 800419e:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <printInfo+0x1ec>)
 80041a0:	e000      	b.n	80041a4 <printInfo+0x188>
 80041a2:	4b1a      	ldr	r3, [pc, #104]	; (800420c <printInfo+0x1f0>)
 80041a4:	4a1f      	ldr	r2, [pc, #124]	; (8004224 <printInfo+0x208>)
 80041a6:	0019      	movs	r1, r3
 80041a8:	0010      	movs	r0, r2
 80041aa:	f007 fbe3 	bl	800b974 <iprintf>
	printf("Radio status: %s\n", statuses[myRadio.status]);
 80041ae:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <printInfo+0x20c>)
 80041b0:	7c1b      	ldrb	r3, [r3, #16]
 80041b2:	001a      	movs	r2, r3
 80041b4:	4b1d      	ldr	r3, [pc, #116]	; (800422c <printInfo+0x210>)
 80041b6:	0092      	lsls	r2, r2, #2
 80041b8:	58d2      	ldr	r2, [r2, r3]
 80041ba:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <printInfo+0x214>)
 80041bc:	0011      	movs	r1, r2
 80041be:	0018      	movs	r0, r3
 80041c0:	f007 fbd8 	bl	800b974 <iprintf>
	printf("Displayed in : %lu ms\n", HAL_GetTick() - tick);
 80041c4:	f002 fb68 	bl	8006898 <HAL_GetTick>
 80041c8:	0002      	movs	r2, r0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	1ad2      	subs	r2, r2, r3
 80041ce:	4b19      	ldr	r3, [pc, #100]	; (8004234 <printInfo+0x218>)
 80041d0:	0011      	movs	r1, r2
 80041d2:	0018      	movs	r0, r3
 80041d4:	f007 fbce 	bl	800b974 <iprintf>
#endif
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	b005      	add	sp, #20
 80041de:	bd90      	pop	{r4, r7, pc}
 80041e0:	40002800 	.word	0x40002800
 80041e4:	0800e30c 	.word	0x0800e30c
 80041e8:	0800e320 	.word	0x0800e320
 80041ec:	0800e330 	.word	0x0800e330
 80041f0:	0800e350 	.word	0x0800e350
 80041f4:	42c80000 	.word	0x42c80000
 80041f8:	0800e36c 	.word	0x0800e36c
 80041fc:	41200000 	.word	0x41200000
 8004200:	0800e380 	.word	0x0800e380
 8004204:	2000051c 	.word	0x2000051c
 8004208:	0800e394 	.word	0x0800e394
 800420c:	0800e398 	.word	0x0800e398
 8004210:	0800e39c 	.word	0x0800e39c
 8004214:	0800e3ac 	.word	0x0800e3ac
 8004218:	0800e3c4 	.word	0x0800e3c4
 800421c:	0800e3d4 	.word	0x0800e3d4
 8004220:	0800e3e8 	.word	0x0800e3e8
 8004224:	0800e400 	.word	0x0800e400
 8004228:	20000494 	.word	0x20000494
 800422c:	20000000 	.word	0x20000000
 8004230:	0800e41c 	.word	0x0800e41c
 8004234:	0800e430 	.word	0x0800e430

08004238 <showErrorCode>:

void showErrorCode(int errNum) {
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < errNum; i++) {
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e01a      	b.n	800427c <showErrorCode+0x44>
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin | BLUE_Pin, 1);
 8004246:	23c0      	movs	r3, #192	; 0xc0
 8004248:	019b      	lsls	r3, r3, #6
 800424a:	4811      	ldr	r0, [pc, #68]	; (8004290 <showErrorCode+0x58>)
 800424c:	2201      	movs	r2, #1
 800424e:	0019      	movs	r1, r3
 8004250:	f003 fd8f 	bl	8007d72 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8004254:	23fa      	movs	r3, #250	; 0xfa
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	0018      	movs	r0, r3
 800425a:	f000 f847 	bl	80042ec <HAL_Delay>
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin | BLUE_Pin, 0);
 800425e:	23c0      	movs	r3, #192	; 0xc0
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	480b      	ldr	r0, [pc, #44]	; (8004290 <showErrorCode+0x58>)
 8004264:	2200      	movs	r2, #0
 8004266:	0019      	movs	r1, r3
 8004268:	f003 fd83 	bl	8007d72 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800426c:	23fa      	movs	r3, #250	; 0xfa
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	0018      	movs	r0, r3
 8004272:	f000 f83b 	bl	80042ec <HAL_Delay>
	for (int i = 0; i < errNum; i++) {
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3301      	adds	r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	dbe0      	blt.n	8004246 <showErrorCode+0xe>
	}
}
 8004284:	46c0      	nop			; (mov r8, r8)
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	46bd      	mov	sp, r7
 800428a:	b004      	add	sp, #16
 800428c:	bd80      	pop	{r7, pc}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	50000400 	.word	0x50000400

08004294 <startBlink>:
void startBlink() {
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 800429a:	2300      	movs	r3, #0
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	e016      	b.n	80042ce <startBlink+0x3a>
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin | BLUE_Pin, 1);
 80042a0:	23c0      	movs	r3, #192	; 0xc0
 80042a2:	019b      	lsls	r3, r3, #6
 80042a4:	4810      	ldr	r0, [pc, #64]	; (80042e8 <startBlink+0x54>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	0019      	movs	r1, r3
 80042aa:	f003 fd62 	bl	8007d72 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80042ae:	2064      	movs	r0, #100	; 0x64
 80042b0:	f000 f81c 	bl	80042ec <HAL_Delay>
		HAL_GPIO_WritePin(ORANGE_GPIO_Port, ORANGE_Pin | BLUE_Pin, 0);
 80042b4:	23c0      	movs	r3, #192	; 0xc0
 80042b6:	019b      	lsls	r3, r3, #6
 80042b8:	480b      	ldr	r0, [pc, #44]	; (80042e8 <startBlink+0x54>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	0019      	movs	r1, r3
 80042be:	f003 fd58 	bl	8007d72 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80042c2:	2064      	movs	r0, #100	; 0x64
 80042c4:	f000 f812 	bl	80042ec <HAL_Delay>
	for (int i = 0; i < 3; i++) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3301      	adds	r3, #1
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	dde5      	ble.n	80042a0 <startBlink+0xc>
	}
	HAL_Delay(500);
 80042d4:	23fa      	movs	r3, #250	; 0xfa
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	0018      	movs	r0, r3
 80042da:	f000 f807 	bl	80042ec <HAL_Delay>
}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b002      	add	sp, #8
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	50000400 	.word	0x50000400

080042ec <HAL_Delay>:
		HAL_Delay(800);
	}

}

void HAL_Delay(uint32_t Delay) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 80042f4:	f002 fad0 	bl	8006898 <HAL_GetTick>
 80042f8:	0003      	movs	r3, r0
 80042fa:	60bb      	str	r3, [r7, #8]
	uint32_t wait = Delay;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3301      	adds	r3, #1
 8004304:	d00a      	beq.n	800431c <HAL_Delay+0x30>
		wait += (uint32_t) (uwTickFreq);
 8004306:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <HAL_Delay+0x4c>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	001a      	movs	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	189b      	adds	r3, r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8004312:	e003      	b.n	800431c <HAL_Delay+0x30>
		HAL_WWDG_Refresh(&hwwdg);
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_Delay+0x50>)
 8004316:	0018      	movs	r0, r3
 8004318:	f006 fe74 	bl	800b004 <HAL_WWDG_Refresh>
	while ((HAL_GetTick() - tickstart) < wait) {
 800431c:	f002 fabc 	bl	8006898 <HAL_GetTick>
 8004320:	0002      	movs	r2, r0
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	429a      	cmp	r2, r3
 800432a:	d8f3      	bhi.n	8004314 <HAL_Delay+0x28>
	}
}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	46bd      	mov	sp, r7
 8004332:	b004      	add	sp, #16
 8004334:	bd80      	pop	{r7, pc}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	20000064 	.word	0x20000064
 800433c:	20000478 	.word	0x20000478

08004340 <changeSequence>:

void changeSequence(nodeSequence_t s) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	0002      	movs	r2, r0
 8004348:	1dfb      	adds	r3, r7, #7
 800434a:	701a      	strb	r2, [r3, #0]
	status.sequence = s;
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <changeSequence+0x44>)
 800434e:	1dfa      	adds	r2, r7, #7
 8004350:	7812      	ldrb	r2, [r2, #0]
 8004352:	751a      	strb	r2, [r3, #20]
	debugLogString("->%s", deviceSquence[status.sequence]);
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <changeSequence+0x44>)
 8004356:	7d1b      	ldrb	r3, [r3, #20]
 8004358:	001a      	movs	r2, r3
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <changeSequence+0x48>)
 800435c:	0092      	lsls	r2, r2, #2
 800435e:	58d2      	ldr	r2, [r2, r3]
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <changeSequence+0x4c>)
 8004362:	0011      	movs	r1, r2
 8004364:	0018      	movs	r0, r3
 8004366:	f7ff fa45 	bl	80037f4 <debugLogString>
	status.sequenceStartTick = HAL_GetTick();
 800436a:	f002 fa95 	bl	8006898 <HAL_GetTick>
 800436e:	0002      	movs	r2, r0
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <changeSequence+0x44>)
 8004372:	60da      	str	r2, [r3, #12]
	status.timeOnSequence = 0;
 8004374:	4b03      	ldr	r3, [pc, #12]	; (8004384 <changeSequence+0x44>)
 8004376:	2200      	movs	r2, #0
 8004378:	611a      	str	r2, [r3, #16]

}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	46bd      	mov	sp, r7
 800437e:	b002      	add	sp, #8
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	2000051c 	.word	0x2000051c
 8004388:	20000014 	.word	0x20000014
 800438c:	0800e448 	.word	0x0800e448

08004390 <increaceInterval>:

void increaceInterval() {
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
	resendInterval += INTERVAL_STEP;
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <increaceInterval+0x2c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	1c9a      	adds	r2, r3, #2
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <increaceInterval+0x2c>)
 800439c:	601a      	str	r2, [r3, #0]
	resendInterval = min(resendInterval, settings.workInterval);
 800439e:	4b07      	ldr	r3, [pc, #28]	; (80043bc <increaceInterval+0x2c>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <increaceInterval+0x30>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	0019      	movs	r1, r3
 80043a8:	0010      	movs	r0, r2
 80043aa:	f7ff f993 	bl	80036d4 <min>
 80043ae:	0002      	movs	r2, r0
 80043b0:	4b02      	ldr	r3, [pc, #8]	; (80043bc <increaceInterval+0x2c>)
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	20000054 	.word	0x20000054
 80043c0:	20000534 	.word	0x20000534

080043c4 <sleepHandler>:

void sleepHandler(char *message) {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	if (status.sequence != wfa)
 80043cc:	4b25      	ldr	r3, [pc, #148]	; (8004464 <sleepHandler+0xa0>)
 80043ce:	7d1b      	ldrb	r3, [r3, #20]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d043      	beq.n	800445c <sleepHandler+0x98>
		if (status.sequence != tx)
 80043d4:	4b23      	ldr	r3, [pc, #140]	; (8004464 <sleepHandler+0xa0>)
 80043d6:	7d1b      	ldrb	r3, [r3, #20]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d03f      	beq.n	800445c <sleepHandler+0x98>
			if (!status.powered)
 80043dc:	4b21      	ldr	r3, [pc, #132]	; (8004464 <sleepHandler+0xa0>)
 80043de:	791b      	ldrb	r3, [r3, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	4053      	eors	r3, r2
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d038      	beq.n	800445c <sleepHandler+0x98>
				if (!flag.needToSend)
 80043ea:	4b1f      	ldr	r3, [pc, #124]	; (8004468 <sleepHandler+0xa4>)
 80043ec:	785b      	ldrb	r3, [r3, #1]
 80043ee:	2204      	movs	r2, #4
 80043f0:	4013      	ands	r3, r2
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d131      	bne.n	800445c <sleepHandler+0x98>
					if (!dontSleep)
 80043f8:	4b1c      	ldr	r3, [pc, #112]	; (800446c <sleepHandler+0xa8>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2201      	movs	r2, #1
 80043fe:	4053      	eors	r3, r2
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d02a      	beq.n	800445c <sleepHandler+0x98>
						if (status.openedConfirmed == status.opened)
 8004406:	4b17      	ldr	r3, [pc, #92]	; (8004464 <sleepHandler+0xa0>)
 8004408:	789a      	ldrb	r2, [r3, #2]
 800440a:	4b16      	ldr	r3, [pc, #88]	; (8004464 <sleepHandler+0xa0>)
 800440c:	785b      	ldrb	r3, [r3, #1]
 800440e:	429a      	cmp	r2, r3
 8004410:	d124      	bne.n	800445c <sleepHandler+0x98>
							if (status.poweredConfirmed == status.powered)
 8004412:	4b14      	ldr	r3, [pc, #80]	; (8004464 <sleepHandler+0xa0>)
 8004414:	795a      	ldrb	r2, [r3, #5]
 8004416:	4b13      	ldr	r3, [pc, #76]	; (8004464 <sleepHandler+0xa0>)
 8004418:	791b      	ldrb	r3, [r3, #4]
 800441a:	429a      	cmp	r2, r3
 800441c:	d11e      	bne.n	800445c <sleepHandler+0x98>
								if (status.unconfirmedOpening == false)
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <sleepHandler+0xa0>)
 8004420:	79db      	ldrb	r3, [r3, #7]
 8004422:	2201      	movs	r2, #1
 8004424:	4053      	eors	r3, r2
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d017      	beq.n	800445c <sleepHandler+0x98>
									if (!flag.lpTimerInterupt)
 800442c:	4b0e      	ldr	r3, [pc, #56]	; (8004468 <sleepHandler+0xa4>)
 800442e:	785b      	ldrb	r3, [r3, #1]
 8004430:	2208      	movs	r2, #8
 8004432:	4013      	ands	r3, r2
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d110      	bne.n	800445c <sleepHandler+0x98>
										if (!status.unhandledExti) {
 800443a:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <sleepHandler+0xa0>)
 800443c:	7a1b      	ldrb	r3, [r3, #8]
 800443e:	2201      	movs	r2, #1
 8004440:	4053      	eors	r3, r2
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d009      	beq.n	800445c <sleepHandler+0x98>
											if (message[0])
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <sleepHandler+0x94>
												debugLog(message);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	0018      	movs	r0, r3
 8004454:	f7ff f9a0 	bl	8003798 <debugLog>
											sleep();
 8004458:	f7ff fc34 	bl	8003cc4 <sleep>
										}
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b002      	add	sp, #8
 8004462:	bd80      	pop	{r7, pc}
 8004464:	2000051c 	.word	0x2000051c
 8004468:	2000048c 	.word	0x2000048c
 800446c:	20000654 	.word	0x20000654

08004470 <extiHandler>:

void extiHandler() {
 8004470:	b5b0      	push	{r4, r5, r7, lr}
 8004472:	af00      	add	r7, sp, #0
	if (status.opened != HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin)) {
 8004474:	4b44      	ldr	r3, [pc, #272]	; (8004588 <extiHandler+0x118>)
 8004476:	785b      	ldrb	r3, [r3, #1]
 8004478:	001c      	movs	r4, r3
 800447a:	23a0      	movs	r3, #160	; 0xa0
 800447c:	05db      	lsls	r3, r3, #23
 800447e:	2101      	movs	r1, #1
 8004480:	0018      	movs	r0, r3
 8004482:	f003 fc59 	bl	8007d38 <HAL_GPIO_ReadPin>
 8004486:	0003      	movs	r3, r0
 8004488:	429c      	cmp	r4, r3
 800448a:	d013      	beq.n	80044b4 <extiHandler+0x44>
		if (HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin))
 800448c:	23a0      	movs	r3, #160	; 0xa0
 800448e:	05db      	lsls	r3, r3, #23
 8004490:	2101      	movs	r1, #1
 8004492:	0018      	movs	r0, r3
 8004494:	f003 fc50 	bl	8007d38 <HAL_GPIO_ReadPin>
 8004498:	1e03      	subs	r3, r0, #0
 800449a:	d004      	beq.n	80044a6 <extiHandler+0x36>
			debugLog("Door opened");
 800449c:	4b3b      	ldr	r3, [pc, #236]	; (800458c <extiHandler+0x11c>)
 800449e:	0018      	movs	r0, r3
 80044a0:	f7ff f97a 	bl	8003798 <debugLog>
 80044a4:	e003      	b.n	80044ae <extiHandler+0x3e>
		else

			debugLog("Door closed");
 80044a6:	4b3a      	ldr	r3, [pc, #232]	; (8004590 <extiHandler+0x120>)
 80044a8:	0018      	movs	r0, r3
 80044aa:	f7ff f975 	bl	8003798 <debugLog>
		HAL_Delay(50); //debouncing
 80044ae:	2032      	movs	r0, #50	; 0x32
 80044b0:	f7ff ff1c 	bl	80042ec <HAL_Delay>
	}
	if (status.powered != HAL_GPIO_ReadPin(extPower_GPIO_Port, extPower_Pin)) {
 80044b4:	4b34      	ldr	r3, [pc, #208]	; (8004588 <extiHandler+0x118>)
 80044b6:	791b      	ldrb	r3, [r3, #4]
 80044b8:	001c      	movs	r4, r3
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	005a      	lsls	r2, r3, #1
 80044be:	23a0      	movs	r3, #160	; 0xa0
 80044c0:	05db      	lsls	r3, r3, #23
 80044c2:	0011      	movs	r1, r2
 80044c4:	0018      	movs	r0, r3
 80044c6:	f003 fc37 	bl	8007d38 <HAL_GPIO_ReadPin>
 80044ca:	0003      	movs	r3, r0
 80044cc:	429c      	cmp	r4, r3
 80044ce:	d015      	beq.n	80044fc <extiHandler+0x8c>
		if (HAL_GPIO_ReadPin(extPower_GPIO_Port, extPower_Pin))
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	005a      	lsls	r2, r3, #1
 80044d4:	23a0      	movs	r3, #160	; 0xa0
 80044d6:	05db      	lsls	r3, r3, #23
 80044d8:	0011      	movs	r1, r2
 80044da:	0018      	movs	r0, r3
 80044dc:	f003 fc2c 	bl	8007d38 <HAL_GPIO_ReadPin>
 80044e0:	1e03      	subs	r3, r0, #0
 80044e2:	d004      	beq.n	80044ee <extiHandler+0x7e>
			debugLog("Power given");
 80044e4:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <extiHandler+0x124>)
 80044e6:	0018      	movs	r0, r3
 80044e8:	f7ff f956 	bl	8003798 <debugLog>
 80044ec:	e003      	b.n	80044f6 <extiHandler+0x86>
		else
			debugLog("Power lost");
 80044ee:	4b2a      	ldr	r3, [pc, #168]	; (8004598 <extiHandler+0x128>)
 80044f0:	0018      	movs	r0, r3
 80044f2:	f7ff f951 	bl	8003798 <debugLog>
		HAL_Delay(50); //debouncing
 80044f6:	2032      	movs	r0, #50	; 0x32
 80044f8:	f7ff fef8 	bl	80042ec <HAL_Delay>
	}

	if (!status.disarmed) {
 80044fc:	4b22      	ldr	r3, [pc, #136]	; (8004588 <extiHandler+0x118>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2201      	movs	r2, #1
 8004502:	4053      	eors	r3, r2
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d010      	beq.n	800452c <extiHandler+0xbc>
		if (status.opened != status.openedConfirmed
 800450a:	4b1f      	ldr	r3, [pc, #124]	; (8004588 <extiHandler+0x118>)
 800450c:	785a      	ldrb	r2, [r3, #1]
 800450e:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <extiHandler+0x118>)
 8004510:	789b      	ldrb	r3, [r3, #2]
 8004512:	429a      	cmp	r2, r3
 8004514:	d105      	bne.n	8004522 <extiHandler+0xb2>
				|| status.powered != status.poweredConfirmed)
 8004516:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <extiHandler+0x118>)
 8004518:	791a      	ldrb	r2, [r3, #4]
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <extiHandler+0x118>)
 800451c:	795b      	ldrb	r3, [r3, #5]
 800451e:	429a      	cmp	r2, r3
 8004520:	d004      	beq.n	800452c <extiHandler+0xbc>
			flag.needToSend = 1;
 8004522:	4b1e      	ldr	r3, [pc, #120]	; (800459c <extiHandler+0x12c>)
 8004524:	785a      	ldrb	r2, [r3, #1]
 8004526:	2104      	movs	r1, #4
 8004528:	430a      	orrs	r2, r1
 800452a:	705a      	strb	r2, [r3, #1]
	}
	if (status.openedConfirmed == 0 && status.opened)
 800452c:	4b16      	ldr	r3, [pc, #88]	; (8004588 <extiHandler+0x118>)
 800452e:	789b      	ldrb	r3, [r3, #2]
 8004530:	2201      	movs	r2, #1
 8004532:	4053      	eors	r3, r2
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d006      	beq.n	8004548 <extiHandler+0xd8>
 800453a:	4b13      	ldr	r3, [pc, #76]	; (8004588 <extiHandler+0x118>)
 800453c:	785b      	ldrb	r3, [r3, #1]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <extiHandler+0xd8>
		status.unconfirmedOpening = 1;
 8004542:	4b11      	ldr	r3, [pc, #68]	; (8004588 <extiHandler+0x118>)
 8004544:	2201      	movs	r2, #1
 8004546:	71da      	strb	r2, [r3, #7]
	status.opened = HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);
 8004548:	23a0      	movs	r3, #160	; 0xa0
 800454a:	05db      	lsls	r3, r3, #23
 800454c:	2101      	movs	r1, #1
 800454e:	0018      	movs	r0, r3
 8004550:	f003 fbf2 	bl	8007d38 <HAL_GPIO_ReadPin>
 8004554:	0003      	movs	r3, r0
 8004556:	1e5a      	subs	r2, r3, #1
 8004558:	4193      	sbcs	r3, r2
 800455a:	b2da      	uxtb	r2, r3
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <extiHandler+0x118>)
 800455e:	705a      	strb	r2, [r3, #1]
	status.powered = HAL_GPIO_ReadPin(extPower_GPIO_Port, extPower_Pin);
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	005a      	lsls	r2, r3, #1
 8004564:	23a0      	movs	r3, #160	; 0xa0
 8004566:	05db      	lsls	r3, r3, #23
 8004568:	0011      	movs	r1, r2
 800456a:	0018      	movs	r0, r3
 800456c:	f003 fbe4 	bl	8007d38 <HAL_GPIO_ReadPin>
 8004570:	0003      	movs	r3, r0
 8004572:	1e5a      	subs	r2, r3, #1
 8004574:	4193      	sbcs	r3, r2
 8004576:	b2da      	uxtb	r2, r3
 8004578:	4b03      	ldr	r3, [pc, #12]	; (8004588 <extiHandler+0x118>)
 800457a:	711a      	strb	r2, [r3, #4]
	status.unhandledExti = 0;
 800457c:	4b02      	ldr	r3, [pc, #8]	; (8004588 <extiHandler+0x118>)
 800457e:	2200      	movs	r2, #0
 8004580:	721a      	strb	r2, [r3, #8]

}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	46bd      	mov	sp, r7
 8004586:	bdb0      	pop	{r4, r5, r7, pc}
 8004588:	2000051c 	.word	0x2000051c
 800458c:	0800e450 	.word	0x0800e450
 8004590:	0800e45c 	.word	0x0800e45c
 8004594:	0800e468 	.word	0x0800e468
 8004598:	0800e474 	.word	0x0800e474
 800459c:	2000048c 	.word	0x2000048c

080045a0 <messageHandler>:

void messageHandler() {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
	if (myRadio.readBytes > 0) {
 80045a4:	4b8a      	ldr	r3, [pc, #552]	; (80047d0 <messageHandler+0x230>)
 80045a6:	225d      	movs	r2, #93	; 0x5d
 80045a8:	5c9b      	ldrb	r3, [r3, r2]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d100      	bne.n	80045b0 <messageHandler+0x10>
 80045ae:	e10b      	b.n	80047c8 <messageHandler+0x228>
		debugLogTime("Got message");
 80045b0:	4b88      	ldr	r3, [pc, #544]	; (80047d4 <messageHandler+0x234>)
 80045b2:	0018      	movs	r0, r3
 80045b4:	f7ff f8b2 	bl	800371c <debugLogTime>
		if (myRadio.badCrc == 1) {
 80045b8:	4b85      	ldr	r3, [pc, #532]	; (80047d0 <messageHandler+0x230>)
 80045ba:	2260      	movs	r2, #96	; 0x60
 80045bc:	5c9b      	ldrb	r3, [r3, r2]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <messageHandler+0x34>
			debugLog("Bad CRC!");
 80045c2:	4b85      	ldr	r3, [pc, #532]	; (80047d8 <messageHandler+0x238>)
 80045c4:	0018      	movs	r0, r3
 80045c6:	f7ff f8e7 	bl	8003798 <debugLog>
			myRadio.readBytes = 0;
 80045ca:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <messageHandler+0x230>)
 80045cc:	225d      	movs	r2, #93	; 0x5d
 80045ce:	2100      	movs	r1, #0
 80045d0:	5499      	strb	r1, [r3, r2]
 80045d2:	e0f5      	b.n	80047c0 <messageHandler+0x220>
		} else if (rxMes->uplink == 0 && rxMes->adr == settings.nodeNum) {
 80045d4:	4b81      	ldr	r3, [pc, #516]	; (80047dc <messageHandler+0x23c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2201      	movs	r2, #1
 80045dc:	4013      	ands	r3, r2
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d000      	beq.n	80045e6 <messageHandler+0x46>
 80045e4:	e0ba      	b.n	800475c <messageHandler+0x1bc>
 80045e6:	4b7d      	ldr	r3, [pc, #500]	; (80047dc <messageHandler+0x23c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	061b      	lsls	r3, r3, #24
 80045ee:	0edb      	lsrs	r3, r3, #27
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	001a      	movs	r2, r3
 80045f4:	4b7a      	ldr	r3, [pc, #488]	; (80047e0 <messageHandler+0x240>)
 80045f6:	7a9b      	ldrb	r3, [r3, #10]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d000      	beq.n	80045fe <messageHandler+0x5e>
 80045fc:	e0ae      	b.n	800475c <messageHandler+0x1bc>
			debugLog("for us");
 80045fe:	4b79      	ldr	r3, [pc, #484]	; (80047e4 <messageHandler+0x244>)
 8004600:	0018      	movs	r0, r3
 8004602:	f7ff f8c9 	bl	8003798 <debugLog>
			if (status.disarmed != rxMes->disarm)
 8004606:	4b78      	ldr	r3, [pc, #480]	; (80047e8 <messageHandler+0x248>)
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	4b74      	ldr	r3, [pc, #464]	; (80047dc <messageHandler+0x23c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	07db      	lsls	r3, r3, #31
 8004612:	0fdb      	lsrs	r3, r3, #31
 8004614:	b2db      	uxtb	r3, r3
 8004616:	429a      	cmp	r2, r3
 8004618:	d00f      	beq.n	800463a <messageHandler+0x9a>
				debugLogString("Disarmed changed to %s",
						rxMes->disarm ? "Yes" : "No");
 800461a:	4b70      	ldr	r3, [pc, #448]	; (80047dc <messageHandler+0x23c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	785b      	ldrb	r3, [r3, #1]
 8004620:	2201      	movs	r2, #1
 8004622:	4013      	ands	r3, r2
 8004624:	b2db      	uxtb	r3, r3
				debugLogString("Disarmed changed to %s",
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <messageHandler+0x8e>
 800462a:	4b70      	ldr	r3, [pc, #448]	; (80047ec <messageHandler+0x24c>)
 800462c:	e000      	b.n	8004630 <messageHandler+0x90>
 800462e:	4b70      	ldr	r3, [pc, #448]	; (80047f0 <messageHandler+0x250>)
 8004630:	4a70      	ldr	r2, [pc, #448]	; (80047f4 <messageHandler+0x254>)
 8004632:	0019      	movs	r1, r3
 8004634:	0010      	movs	r0, r2
 8004636:	f7ff f8dd 	bl	80037f4 <debugLogString>

			status.disarmed = rxMes->disarm;
 800463a:	4b68      	ldr	r3, [pc, #416]	; (80047dc <messageHandler+0x23c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	07db      	lsls	r3, r3, #31
 8004642:	0fdb      	lsrs	r3, r3, #31
 8004644:	b2db      	uxtb	r3, r3
 8004646:	1e5a      	subs	r2, r3, #1
 8004648:	4193      	sbcs	r3, r2
 800464a:	b2da      	uxtb	r2, r3
 800464c:	4b66      	ldr	r3, [pc, #408]	; (80047e8 <messageHandler+0x248>)
 800464e:	701a      	strb	r2, [r3, #0]
			if (rxMes->codedDelayMSB || rxMes->codedDelayLSB) {
 8004650:	4b62      	ldr	r3, [pc, #392]	; (80047dc <messageHandler+0x23c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	785b      	ldrb	r3, [r3, #1]
 8004656:	2201      	movs	r2, #1
 8004658:	4393      	bics	r3, r2
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <messageHandler+0xca>
 8004660:	4b5e      	ldr	r3, [pc, #376]	; (80047dc <messageHandler+0x23c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	789b      	ldrb	r3, [r3, #2]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d031      	beq.n	80046ce <messageHandler+0x12e>

				recomendedDelay = rxMes->codedDelayLSB
 800466a:	4b5c      	ldr	r3, [pc, #368]	; (80047dc <messageHandler+0x23c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	789b      	ldrb	r3, [r3, #2]
 8004670:	b29a      	uxth	r2, r3
						+ (rxMes->codedDelayMSB << 8);
 8004672:	4b5a      	ldr	r3, [pc, #360]	; (80047dc <messageHandler+0x23c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	061b      	lsls	r3, r3, #24
 800467a:	0e5b      	lsrs	r3, r3, #25
 800467c:	b2db      	uxtb	r3, r3
 800467e:	b29b      	uxth	r3, r3
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	b29b      	uxth	r3, r3
 8004684:	18d3      	adds	r3, r2, r3
 8004686:	b29a      	uxth	r2, r3
				recomendedDelay = rxMes->codedDelayLSB
 8004688:	4b5b      	ldr	r3, [pc, #364]	; (80047f8 <messageHandler+0x258>)
 800468a:	801a      	strh	r2, [r3, #0]
				if (recomendedDelay > 2 * settings.workInterval) {
 800468c:	4b5a      	ldr	r3, [pc, #360]	; (80047f8 <messageHandler+0x258>)
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	001a      	movs	r2, r3
 8004692:	4b53      	ldr	r3, [pc, #332]	; (80047e0 <messageHandler+0x240>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	429a      	cmp	r2, r3
 800469a:	d90f      	bls.n	80046bc <messageHandler+0x11c>
					debugLogInt(
 800469c:	4b56      	ldr	r3, [pc, #344]	; (80047f8 <messageHandler+0x258>)
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	001a      	movs	r2, r3
 80046a2:	4b56      	ldr	r3, [pc, #344]	; (80047fc <messageHandler+0x25c>)
 80046a4:	0011      	movs	r1, r2
 80046a6:	0018      	movs	r0, r3
 80046a8:	f7ff f88c 	bl	80037c4 <debugLogInt>
							"###Delay is too big (%u), returning to 2x work Interval",
							recomendedDelay);
					recomendedDelay = 2 * settings.workInterval;
 80046ac:	4b4c      	ldr	r3, [pc, #304]	; (80047e0 <messageHandler+0x240>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	18db      	adds	r3, r3, r3
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	4b50      	ldr	r3, [pc, #320]	; (80047f8 <messageHandler+0x258>)
 80046b8:	801a      	strh	r2, [r3, #0]
				if (recomendedDelay > 2 * settings.workInterval) {
 80046ba:	e011      	b.n	80046e0 <messageHandler+0x140>
				} else
					debugLogInt("Delay: %u", recomendedDelay);
 80046bc:	4b4e      	ldr	r3, [pc, #312]	; (80047f8 <messageHandler+0x258>)
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	001a      	movs	r2, r3
 80046c2:	4b4f      	ldr	r3, [pc, #316]	; (8004800 <messageHandler+0x260>)
 80046c4:	0011      	movs	r1, r2
 80046c6:	0018      	movs	r0, r3
 80046c8:	f7ff f87c 	bl	80037c4 <debugLogInt>
				if (recomendedDelay > 2 * settings.workInterval) {
 80046cc:	e008      	b.n	80046e0 <messageHandler+0x140>
			} else {
				debugLog("Delay not set");
 80046ce:	4b4d      	ldr	r3, [pc, #308]	; (8004804 <messageHandler+0x264>)
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff f861 	bl	8003798 <debugLog>
				recomendedDelay = settings.workInterval;
 80046d6:	4b42      	ldr	r3, [pc, #264]	; (80047e0 <messageHandler+0x240>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	b29a      	uxth	r2, r3
 80046dc:	4b46      	ldr	r3, [pc, #280]	; (80047f8 <messageHandler+0x258>)
 80046de:	801a      	strh	r2, [r3, #0]
			}

			if (rxMes->message == MSG_DOWN_REQUEST) //Request current status
 80046e0:	4b3e      	ldr	r3, [pc, #248]	; (80047dc <messageHandler+0x23c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2206      	movs	r2, #6
 80046e8:	4013      	ands	r3, r2
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d109      	bne.n	8004704 <messageHandler+0x164>
			{
				debugLog("Status requested");
 80046f0:	4b45      	ldr	r3, [pc, #276]	; (8004808 <messageHandler+0x268>)
 80046f2:	0018      	movs	r0, r3
 80046f4:	f7ff f850 	bl	8003798 <debugLog>
				flag.needToSend = 1;
 80046f8:	4b44      	ldr	r3, [pc, #272]	; (800480c <messageHandler+0x26c>)
 80046fa:	785a      	ldrb	r2, [r3, #1]
 80046fc:	2104      	movs	r1, #4
 80046fe:	430a      	orrs	r2, r1
 8004700:	705a      	strb	r2, [r3, #1]
 8004702:	e025      	b.n	8004750 <messageHandler+0x1b0>
			}

			else if (rxMes->message == MSG_DOWN_ACKNOWLEDGE) {
 8004704:	4b35      	ldr	r3, [pc, #212]	; (80047dc <messageHandler+0x23c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2206      	movs	r2, #6
 800470c:	4013      	ands	r3, r2
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d11d      	bne.n	8004750 <messageHandler+0x1b0>
				debugLog("Got acknowledge");
 8004714:	4b3e      	ldr	r3, [pc, #248]	; (8004810 <messageHandler+0x270>)
 8004716:	0018      	movs	r0, r3
 8004718:	f7ff f83e 	bl	8003798 <debugLog>

				if (status.openedToConfirm == 1)
 800471c:	4b32      	ldr	r3, [pc, #200]	; (80047e8 <messageHandler+0x248>)
 800471e:	78db      	ldrb	r3, [r3, #3]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <messageHandler+0x18a>
					status.unconfirmedOpening = 0;
 8004724:	4b30      	ldr	r3, [pc, #192]	; (80047e8 <messageHandler+0x248>)
 8004726:	2200      	movs	r2, #0
 8004728:	71da      	strb	r2, [r3, #7]
				status.openedConfirmed = status.openedToConfirm;
 800472a:	4b2f      	ldr	r3, [pc, #188]	; (80047e8 <messageHandler+0x248>)
 800472c:	78da      	ldrb	r2, [r3, #3]
 800472e:	4b2e      	ldr	r3, [pc, #184]	; (80047e8 <messageHandler+0x248>)
 8004730:	709a      	strb	r2, [r3, #2]
				status.poweredConfirmed = status.poweredToConfirm;
 8004732:	4b2d      	ldr	r3, [pc, #180]	; (80047e8 <messageHandler+0x248>)
 8004734:	799a      	ldrb	r2, [r3, #6]
 8004736:	4b2c      	ldr	r3, [pc, #176]	; (80047e8 <messageHandler+0x248>)
 8004738:	715a      	strb	r2, [r3, #5]
				resendInterval = 2;
 800473a:	4b36      	ldr	r3, [pc, #216]	; (8004814 <messageHandler+0x274>)
 800473c:	2202      	movs	r2, #2
 800473e:	601a      	str	r2, [r3, #0]
				flag.needToSend = 0;
 8004740:	4b32      	ldr	r3, [pc, #200]	; (800480c <messageHandler+0x26c>)
 8004742:	785a      	ldrb	r2, [r3, #1]
 8004744:	2104      	movs	r1, #4
 8004746:	438a      	bics	r2, r1
 8004748:	705a      	strb	r2, [r3, #1]
				changeSequence(idle);
 800474a:	2000      	movs	r0, #0
 800474c:	f7ff fdf8 	bl	8004340 <changeSequence>
			}
			setWakeup(recomendedDelay);
 8004750:	4b29      	ldr	r3, [pc, #164]	; (80047f8 <messageHandler+0x258>)
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	0018      	movs	r0, r3
 8004756:	f7ff fa99 	bl	8003c8c <setWakeup>
 800475a:	e031      	b.n	80047c0 <messageHandler+0x220>
		} else {

			if (rxMes->uplink == 0) {
 800475c:	4b1f      	ldr	r3, [pc, #124]	; (80047dc <messageHandler+0x23c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2201      	movs	r2, #1
 8004764:	4013      	ands	r3, r2
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d11d      	bne.n	80047a8 <messageHandler+0x208>
				debugLogInt("It's for %d", rxMes->adr);
 800476c:	4b1b      	ldr	r3, [pc, #108]	; (80047dc <messageHandler+0x23c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	061b      	lsls	r3, r3, #24
 8004774:	0edb      	lsrs	r3, r3, #27
 8004776:	b2db      	uxtb	r3, r3
 8004778:	001a      	movs	r2, r3
 800477a:	4b27      	ldr	r3, [pc, #156]	; (8004818 <messageHandler+0x278>)
 800477c:	0011      	movs	r1, r2
 800477e:	0018      	movs	r0, r3
 8004780:	f7ff f820 	bl	80037c4 <debugLogInt>
				debugLogInt("Delay for it: %d",
						rxMes->codedDelayLSB + (rxMes->codedDelayMSB << 8));
 8004784:	4b15      	ldr	r3, [pc, #84]	; (80047dc <messageHandler+0x23c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	789b      	ldrb	r3, [r3, #2]
 800478a:	001a      	movs	r2, r3
 800478c:	4b13      	ldr	r3, [pc, #76]	; (80047dc <messageHandler+0x23c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	785b      	ldrb	r3, [r3, #1]
 8004792:	061b      	lsls	r3, r3, #24
 8004794:	0e5b      	lsrs	r3, r3, #25
 8004796:	b2db      	uxtb	r3, r3
 8004798:	021b      	lsls	r3, r3, #8
				debugLogInt("Delay for it: %d",
 800479a:	18d2      	adds	r2, r2, r3
 800479c:	4b1f      	ldr	r3, [pc, #124]	; (800481c <messageHandler+0x27c>)
 800479e:	0011      	movs	r1, r2
 80047a0:	0018      	movs	r0, r3
 80047a2:	f7ff f80f 	bl	80037c4 <debugLogInt>
 80047a6:	e00b      	b.n	80047c0 <messageHandler+0x220>
			} else {
				debugLogInt("It's from %d", rxMes->adr);
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <messageHandler+0x23c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	061b      	lsls	r3, r3, #24
 80047b0:	0edb      	lsrs	r3, r3, #27
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	001a      	movs	r2, r3
 80047b6:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <messageHandler+0x280>)
 80047b8:	0011      	movs	r1, r2
 80047ba:	0018      	movs	r0, r3
 80047bc:	f7ff f802 	bl	80037c4 <debugLogInt>
			}
		}
		myRadio.readBytes = 0;
 80047c0:	4b03      	ldr	r3, [pc, #12]	; (80047d0 <messageHandler+0x230>)
 80047c2:	225d      	movs	r2, #93	; 0x5d
 80047c4:	2100      	movs	r1, #0
 80047c6:	5499      	strb	r1, [r3, r2]
	}
}
 80047c8:	46c0      	nop			; (mov r8, r8)
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	20000494 	.word	0x20000494
 80047d4:	0800e480 	.word	0x0800e480
 80047d8:	0800e48c 	.word	0x0800e48c
 80047dc:	20000050 	.word	0x20000050
 80047e0:	20000534 	.word	0x20000534
 80047e4:	0800e498 	.word	0x0800e498
 80047e8:	2000051c 	.word	0x2000051c
 80047ec:	0800e394 	.word	0x0800e394
 80047f0:	0800e398 	.word	0x0800e398
 80047f4:	0800e4a0 	.word	0x0800e4a0
 80047f8:	2000004c 	.word	0x2000004c
 80047fc:	0800e4b8 	.word	0x0800e4b8
 8004800:	0800e4f0 	.word	0x0800e4f0
 8004804:	0800e4fc 	.word	0x0800e4fc
 8004808:	0800e30c 	.word	0x0800e30c
 800480c:	2000048c 	.word	0x2000048c
 8004810:	0800e50c 	.word	0x0800e50c
 8004814:	20000054 	.word	0x20000054
 8004818:	0800e51c 	.word	0x0800e51c
 800481c:	0800e528 	.word	0x0800e528
 8004820:	0800e53c 	.word	0x0800e53c

08004824 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004828:	f001 ffd0 	bl	80067cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800482c:	f000 fa70 	bl	8004d10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004830:	f000 fc74 	bl	800511c <MX_GPIO_Init>
	MX_DMA_Init();
 8004834:	f000 fc4c 	bl	80050d0 <MX_DMA_Init>
	MX_RTC_Init();
 8004838:	f000 fb8c 	bl	8004f54 <MX_RTC_Init>
	MX_SPI1_Init();
 800483c:	f000 fbbe 	bl	8004fbc <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8004840:	f000 fbf4 	bl	800502c <MX_USART1_UART_Init>
	MX_ADC_Init();
 8004844:	f000 fae8 	bl	8004e18 <MX_ADC_Init>
	MX_LPTIM1_Init();
 8004848:	f000 fb5a 	bl	8004f00 <MX_LPTIM1_Init>
	MX_WWDG_Init();
 800484c:	f000 fc1e 	bl	800508c <MX_WWDG_Init>
	/* USER CODE BEGIN 2 */
#ifdef DEBUG
	settings.debugLevel = 1;
 8004850:	4b5a      	ldr	r3, [pc, #360]	; (80049bc <main+0x198>)
 8004852:	2201      	movs	r2, #1
 8004854:	761a      	strb	r2, [r3, #24]
#endif
	initUart(&huart1, &myRadio);
 8004856:	4a5a      	ldr	r2, [pc, #360]	; (80049c0 <main+0x19c>)
 8004858:	4b5a      	ldr	r3, [pc, #360]	; (80049c4 <main+0x1a0>)
 800485a:	0011      	movs	r1, r2
 800485c:	0018      	movs	r0, r3
 800485e:	f001 fd69 	bl	8006334 <initUart>
	if ((RCC->CSR & RCC_CSR_LSERDY_Msk) != 0) 	//Crystal failure
 8004862:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <main+0x1a4>)
 8004864:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4013      	ands	r3, r2
 800486c:	d006      	beq.n	800487c <main+0x58>
		HAL_LPTIM_Counter_Start_IT(&hlptim1, 256 * WATCHDOG_INTERVAL);
 800486e:	23f0      	movs	r3, #240	; 0xf0
 8004870:	019a      	lsls	r2, r3, #6
 8004872:	4b56      	ldr	r3, [pc, #344]	; (80049cc <main+0x1a8>)
 8004874:	0011      	movs	r1, r2
 8004876:	0018      	movs	r0, r3
 8004878:	f003 fb40 	bl	8007efc <HAL_LPTIM_Counter_Start_IT>
	printf("<ANv%lx>\n", SOFTWARE_REVISION);
 800487c:	4a54      	ldr	r2, [pc, #336]	; (80049d0 <main+0x1ac>)
 800487e:	4b55      	ldr	r3, [pc, #340]	; (80049d4 <main+0x1b0>)
 8004880:	0011      	movs	r1, r2
 8004882:	0018      	movs	r0, r3
 8004884:	f007 f876 	bl	800b974 <iprintf>
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk
 8004888:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <main+0x1b4>)
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	4b52      	ldr	r3, [pc, #328]	; (80049d8 <main+0x1b4>)
 800488e:	21c0      	movs	r1, #192	; 0xc0
 8004890:	0149      	lsls	r1, r1, #5
 8004892:	430a      	orrs	r2, r1
 8004894:	609a      	str	r2, [r3, #8]
			| DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk;

	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8004896:	4b51      	ldr	r3, [pc, #324]	; (80049dc <main+0x1b8>)
 8004898:	2100      	movs	r1, #0
 800489a:	0018      	movs	r0, r3
 800489c:	f002 fbb4 	bl	8007008 <HAL_ADCEx_Calibration_Start>

	RadioInit();
 80048a0:	f7ff fb24 	bl	8003eec <RadioInit>

	recomendedDelay = settings.workInterval;
 80048a4:	4b45      	ldr	r3, [pc, #276]	; (80049bc <main+0x198>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	4b4d      	ldr	r3, [pc, #308]	; (80049e0 <main+0x1bc>)
 80048ac:	801a      	strh	r2, [r3, #0]

	flag.needToSend = 1;
 80048ae:	4b4d      	ldr	r3, [pc, #308]	; (80049e4 <main+0x1c0>)
 80048b0:	785a      	ldrb	r2, [r3, #1]
 80048b2:	2104      	movs	r1, #4
 80048b4:	430a      	orrs	r2, r1
 80048b6:	705a      	strb	r2, [r3, #1]
	status.poweredConfirmed = HAL_GPIO_ReadPin(extPower_GPIO_Port,
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	005a      	lsls	r2, r3, #1
 80048bc:	23a0      	movs	r3, #160	; 0xa0
 80048be:	05db      	lsls	r3, r3, #23
 80048c0:	0011      	movs	r1, r2
 80048c2:	0018      	movs	r0, r3
 80048c4:	f003 fa38 	bl	8007d38 <HAL_GPIO_ReadPin>
 80048c8:	0003      	movs	r3, r0
 80048ca:	1e5a      	subs	r2, r3, #1
 80048cc:	4193      	sbcs	r3, r2
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	4b45      	ldr	r3, [pc, #276]	; (80049e8 <main+0x1c4>)
 80048d2:	715a      	strb	r2, [r3, #5]
	extPower_Pin);
	status.openedConfirmed = HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);
 80048d4:	23a0      	movs	r3, #160	; 0xa0
 80048d6:	05db      	lsls	r3, r3, #23
 80048d8:	2101      	movs	r1, #1
 80048da:	0018      	movs	r0, r3
 80048dc:	f003 fa2c 	bl	8007d38 <HAL_GPIO_ReadPin>
 80048e0:	0003      	movs	r3, r0
 80048e2:	1e5a      	subs	r2, r3, #1
 80048e4:	4193      	sbcs	r3, r2
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	4b3f      	ldr	r3, [pc, #252]	; (80049e8 <main+0x1c4>)
 80048ea:	709a      	strb	r2, [r3, #2]
	HAL_DBGMCU_DisableDBGStopMode();
 80048ec:	f001 ffde 	bl	80068ac <HAL_DBGMCU_DisableDBGStopMode>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	// PIN MAP: 0-1
	//Receiving test
	if (HAL_GPIO_ReadPin(USER2_GPIO_Port, USER2_Pin) == USER2_ACTIVE
 80048f0:	4b3e      	ldr	r3, [pc, #248]	; (80049ec <main+0x1c8>)
 80048f2:	2180      	movs	r1, #128	; 0x80
 80048f4:	0018      	movs	r0, r3
 80048f6:	f003 fa1f 	bl	8007d38 <HAL_GPIO_ReadPin>
 80048fa:	1e03      	subs	r3, r0, #0
 80048fc:	d10c      	bne.n	8004918 <main+0xf4>
			&& HAL_GPIO_ReadPin(USER1_GPIO_Port, USER1_Pin) != USER1_ACTIVE) {
 80048fe:	4b3b      	ldr	r3, [pc, #236]	; (80049ec <main+0x1c8>)
 8004900:	2140      	movs	r1, #64	; 0x40
 8004902:	0018      	movs	r0, r3
 8004904:	f003 fa18 	bl	8007d38 <HAL_GPIO_ReadPin>
 8004908:	1e03      	subs	r3, r0, #0
 800490a:	d005      	beq.n	8004918 <main+0xf4>
		debugLog("Receiving test activated");
 800490c:	4b38      	ldr	r3, [pc, #224]	; (80049f0 <main+0x1cc>)
 800490e:	0018      	movs	r0, r3
 8004910:	f7fe ff42 	bl	8003798 <debugLog>
		ReceivingTest();
 8004914:	f7fe fcb0 	bl	8003278 <ReceivingTest>
	}
	//PIN MAP 1-0
	//Ping Test
	if (HAL_GPIO_ReadPin(USER2_GPIO_Port, USER2_Pin) != USER1_ACTIVE
 8004918:	4b34      	ldr	r3, [pc, #208]	; (80049ec <main+0x1c8>)
 800491a:	2180      	movs	r1, #128	; 0x80
 800491c:	0018      	movs	r0, r3
 800491e:	f003 fa0b 	bl	8007d38 <HAL_GPIO_ReadPin>
 8004922:	1e03      	subs	r3, r0, #0
 8004924:	d00c      	beq.n	8004940 <main+0x11c>
			&& HAL_GPIO_ReadPin(USER1_GPIO_Port, USER1_Pin) == USER1_ACTIVE) {
 8004926:	4b31      	ldr	r3, [pc, #196]	; (80049ec <main+0x1c8>)
 8004928:	2140      	movs	r1, #64	; 0x40
 800492a:	0018      	movs	r0, r3
 800492c:	f003 fa04 	bl	8007d38 <HAL_GPIO_ReadPin>
 8004930:	1e03      	subs	r3, r0, #0
 8004932:	d105      	bne.n	8004940 <main+0x11c>
		debugLog("Ping test activated");
 8004934:	4b2f      	ldr	r3, [pc, #188]	; (80049f4 <main+0x1d0>)
 8004936:	0018      	movs	r0, r3
 8004938:	f7fe ff2e 	bl	8003798 <debugLog>
		PingTest();
 800493c:	f7fe fd6c 	bl	8003418 <PingTest>

	}

	//PIN MAP 1-1 - Don't sleep
	if (HAL_GPIO_ReadPin(USER2_GPIO_Port, USER2_Pin) == USER2_ACTIVE
 8004940:	4b2a      	ldr	r3, [pc, #168]	; (80049ec <main+0x1c8>)
 8004942:	2180      	movs	r1, #128	; 0x80
 8004944:	0018      	movs	r0, r3
 8004946:	f003 f9f7 	bl	8007d38 <HAL_GPIO_ReadPin>
 800494a:	1e03      	subs	r3, r0, #0
 800494c:	d10d      	bne.n	800496a <main+0x146>
			&& HAL_GPIO_ReadPin(USER1_GPIO_Port, USER1_Pin) == USER1_ACTIVE) {
 800494e:	4b27      	ldr	r3, [pc, #156]	; (80049ec <main+0x1c8>)
 8004950:	2140      	movs	r1, #64	; 0x40
 8004952:	0018      	movs	r0, r3
 8004954:	f003 f9f0 	bl	8007d38 <HAL_GPIO_ReadPin>
 8004958:	1e03      	subs	r3, r0, #0
 800495a:	d106      	bne.n	800496a <main+0x146>
		debugLog("Non sleep mode enabled");
 800495c:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <main+0x1d4>)
 800495e:	0018      	movs	r0, r3
 8004960:	f7fe ff1a 	bl	8003798 <debugLog>
		dontSleep = true;
 8004964:	4b25      	ldr	r3, [pc, #148]	; (80049fc <main+0x1d8>)
 8004966:	2201      	movs	r2, #1
 8004968:	701a      	strb	r2, [r3, #0]
	}

	debugLog("Power on, test starting");
 800496a:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <main+0x1dc>)
 800496c:	0018      	movs	r0, r3
 800496e:	f7fe ff13 	bl	8003798 <debugLog>

	if (myRadio.revision == 0) {	//No Radio connection
 8004972:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <main+0x19c>)
 8004974:	2278      	movs	r2, #120	; 0x78
 8004976:	5c9b      	ldrb	r3, [r3, r2]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d107      	bne.n	800498c <main+0x168>
		debugLog("LoRa module: ERROR!");
 800497c:	4b21      	ldr	r3, [pc, #132]	; (8004a04 <main+0x1e0>)
 800497e:	0018      	movs	r0, r3
 8004980:	f7fe ff0a 	bl	8003798 <debugLog>
		showErrorCode(2);
 8004984:	2002      	movs	r0, #2
 8004986:	f7ff fc57 	bl	8004238 <showErrorCode>
		while (1)
 800498a:	e7fe      	b.n	800498a <main+0x166>
			;
	}
	debugLogInt("LoRa module: OK, rev: %d", myRadio.revision);
 800498c:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <main+0x19c>)
 800498e:	2278      	movs	r2, #120	; 0x78
 8004990:	5c9b      	ldrb	r3, [r3, r2]
 8004992:	001a      	movs	r2, r3
 8004994:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <main+0x1e4>)
 8004996:	0011      	movs	r1, r2
 8004998:	0018      	movs	r0, r3
 800499a:	f7fe ff13 	bl	80037c4 <debugLogInt>

	if ((RCC->CSR & RCC_CSR_LSERDY_Msk) == 0) {	//Crystal failure
 800499e:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <main+0x1a4>)
 80049a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049a2:	2380      	movs	r3, #128	; 0x80
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4013      	ands	r3, r2
 80049a8:	d132      	bne.n	8004a10 <main+0x1ec>
		debugLog("LSE Crystal: fail!");
 80049aa:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <main+0x1e8>)
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7fe fef3 	bl	8003798 <debugLog>
		showErrorCode(3);
 80049b2:	2003      	movs	r0, #3
 80049b4:	f7ff fc40 	bl	8004238 <showErrorCode>
		while (1)
 80049b8:	e7fe      	b.n	80049b8 <main+0x194>
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	20000534 	.word	0x20000534
 80049c0:	20000494 	.word	0x20000494
 80049c4:	200003ac 	.word	0x200003ac
 80049c8:	40021000 	.word	0x40021000
 80049cc:	20000300 	.word	0x20000300
 80049d0:	11072022 	.word	0x11072022
 80049d4:	0800e54c 	.word	0x0800e54c
 80049d8:	40015800 	.word	0x40015800
 80049dc:	2000025c 	.word	0x2000025c
 80049e0:	2000004c 	.word	0x2000004c
 80049e4:	2000048c 	.word	0x2000048c
 80049e8:	2000051c 	.word	0x2000051c
 80049ec:	50000400 	.word	0x50000400
 80049f0:	0800e558 	.word	0x0800e558
 80049f4:	0800e574 	.word	0x0800e574
 80049f8:	0800e588 	.word	0x0800e588
 80049fc:	20000654 	.word	0x20000654
 8004a00:	0800e5a0 	.word	0x0800e5a0
 8004a04:	0800e5b8 	.word	0x0800e5b8
 8004a08:	0800e5cc 	.word	0x0800e5cc
 8004a0c:	0800e5e8 	.word	0x0800e5e8
			;
	}
	debugLog("LSE Crystal: OK");
 8004a10:	4ba8      	ldr	r3, [pc, #672]	; (8004cb4 <main+0x490>)
 8004a12:	0018      	movs	r0, r3
 8004a14:	f7fe fec0 	bl	8003798 <debugLog>
	startBlink();
 8004a18:	f7ff fc3c 	bl	8004294 <startBlink>
	//showNumber();

	deinitGpio();
 8004a1c:	f7ff fa46 	bl	8003eac <deinitGpio>
	flag.needToSend = 1;
 8004a20:	4ba5      	ldr	r3, [pc, #660]	; (8004cb8 <main+0x494>)
 8004a22:	785a      	ldrb	r2, [r3, #1]
 8004a24:	2104      	movs	r1, #4
 8004a26:	430a      	orrs	r2, r1
 8004a28:	705a      	strb	r2, [r3, #1]
	debugLogInt("Node number: %d ", settings.nodeNum);
 8004a2a:	4ba4      	ldr	r3, [pc, #656]	; (8004cbc <main+0x498>)
 8004a2c:	7a9b      	ldrb	r3, [r3, #10]
 8004a2e:	001a      	movs	r2, r3
 8004a30:	4ba3      	ldr	r3, [pc, #652]	; (8004cc0 <main+0x49c>)
 8004a32:	0011      	movs	r1, r2
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7fe fec5 	bl	80037c4 <debugLogInt>
	debugLogInt("Frequency: %lu kHz", settings.realFrequency / 1000);
 8004a3a:	4ba0      	ldr	r3, [pc, #640]	; (8004cbc <main+0x498>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	22fa      	movs	r2, #250	; 0xfa
 8004a40:	0091      	lsls	r1, r2, #2
 8004a42:	0018      	movs	r0, r3
 8004a44:	f7fb fb7c 	bl	8000140 <__udivsi3>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	001a      	movs	r2, r3
 8004a4c:	4b9d      	ldr	r3, [pc, #628]	; (8004cc4 <main+0x4a0>)
 8004a4e:	0011      	movs	r1, r2
 8004a50:	0018      	movs	r0, r3
 8004a52:	f7fe feb7 	bl	80037c4 <debugLogInt>
	debugLogInt("Spreading factor: %d", settings.sf);
 8004a56:	4b99      	ldr	r3, [pc, #612]	; (8004cbc <main+0x498>)
 8004a58:	7b1b      	ldrb	r3, [r3, #12]
 8004a5a:	001a      	movs	r2, r3
 8004a5c:	4b9a      	ldr	r3, [pc, #616]	; (8004cc8 <main+0x4a4>)
 8004a5e:	0011      	movs	r1, r2
 8004a60:	0018      	movs	r0, r3
 8004a62:	f7fe feaf 	bl	80037c4 <debugLogInt>
	debugLogString("BandWidth: %s kHz", bandWidthStrings[settings.bw]);
 8004a66:	4b95      	ldr	r3, [pc, #596]	; (8004cbc <main+0x498>)
 8004a68:	7b5b      	ldrb	r3, [r3, #13]
 8004a6a:	001a      	movs	r2, r3
 8004a6c:	4b97      	ldr	r3, [pc, #604]	; (8004ccc <main+0x4a8>)
 8004a6e:	0092      	lsls	r2, r2, #2
 8004a70:	58d2      	ldr	r2, [r2, r3]
 8004a72:	4b97      	ldr	r3, [pc, #604]	; (8004cd0 <main+0x4ac>)
 8004a74:	0011      	movs	r1, r2
 8004a76:	0018      	movs	r0, r3
 8004a78:	f7fe febc 	bl	80037f4 <debugLogString>

	while (1) {
		HAL_WWDG_Refresh(&hwwdg);
 8004a7c:	4b95      	ldr	r3, [pc, #596]	; (8004cd4 <main+0x4b0>)
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f006 fac0 	bl	800b004 <HAL_WWDG_Refresh>

		temp = getTemperature();
 8004a84:	f7fe ff04 	bl	8003890 <getTemperature>
 8004a88:	1c02      	adds	r2, r0, #0
 8004a8a:	4b93      	ldr	r3, [pc, #588]	; (8004cd8 <main+0x4b4>)
 8004a8c:	601a      	str	r2, [r3, #0]

		status.timeOnSequence = HAL_GetTick() - status.sequenceStartTick;
 8004a8e:	f001 ff03 	bl	8006898 <HAL_GetTick>
 8004a92:	0002      	movs	r2, r0
 8004a94:	4b91      	ldr	r3, [pc, #580]	; (8004cdc <main+0x4b8>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	1ad2      	subs	r2, r2, r3
 8004a9a:	4b90      	ldr	r3, [pc, #576]	; (8004cdc <main+0x4b8>)
 8004a9c:	611a      	str	r2, [r3, #16]

		if (flag.rtcAlarm) {
 8004a9e:	4b86      	ldr	r3, [pc, #536]	; (8004cb8 <main+0x494>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <main+0x2a4>
			flag.rtcAlarm = 0;
 8004aac:	4b82      	ldr	r3, [pc, #520]	; (8004cb8 <main+0x494>)
 8004aae:	781a      	ldrb	r2, [r3, #0]
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	438a      	bics	r2, r1
 8004ab4:	701a      	strb	r2, [r3, #0]

			debugLog("RTC Alarm int");
 8004ab6:	4b8a      	ldr	r3, [pc, #552]	; (8004ce0 <main+0x4bc>)
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f7fe fe6d 	bl	8003798 <debugLog>
			flag.needToSend = 1;
 8004abe:	4b7e      	ldr	r3, [pc, #504]	; (8004cb8 <main+0x494>)
 8004ac0:	785a      	ldrb	r2, [r3, #1]
 8004ac2:	2104      	movs	r1, #4
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	705a      	strb	r2, [r3, #1]
		}

		if (flag.lpTimerInterupt) {
 8004ac8:	4b7b      	ldr	r3, [pc, #492]	; (8004cb8 <main+0x494>)
 8004aca:	785b      	ldrb	r3, [r3, #1]
 8004acc:	2208      	movs	r2, #8
 8004ace:	4013      	ands	r3, r2
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d010      	beq.n	8004af8 <main+0x2d4>
			flag.lpTimerInterupt = 0;
 8004ad6:	4b78      	ldr	r3, [pc, #480]	; (8004cb8 <main+0x494>)
 8004ad8:	785a      	ldrb	r2, [r3, #1]
 8004ada:	2108      	movs	r1, #8
 8004adc:	438a      	bics	r2, r1
 8004ade:	705a      	strb	r2, [r3, #1]

			debugLogInt("LP counter: %d min", lpTimWdCnt++);
 8004ae0:	4b80      	ldr	r3, [pc, #512]	; (8004ce4 <main+0x4c0>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	b2d1      	uxtb	r1, r2
 8004ae8:	4a7e      	ldr	r2, [pc, #504]	; (8004ce4 <main+0x4c0>)
 8004aea:	7011      	strb	r1, [r2, #0]
 8004aec:	001a      	movs	r2, r3
 8004aee:	4b7e      	ldr	r3, [pc, #504]	; (8004ce8 <main+0x4c4>)
 8004af0:	0011      	movs	r1, r2
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7fe fe66 	bl	80037c4 <debugLogInt>

		}

		if (flag.statusRequested) {
 8004af8:	4b6f      	ldr	r3, [pc, #444]	; (8004cb8 <main+0x494>)
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	2202      	movs	r2, #2
 8004afe:	4013      	ands	r3, r2
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d006      	beq.n	8004b14 <main+0x2f0>
			flag.statusRequested = 0;
 8004b06:	4b6c      	ldr	r3, [pc, #432]	; (8004cb8 <main+0x494>)
 8004b08:	785a      	ldrb	r2, [r3, #1]
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	438a      	bics	r2, r1
 8004b0e:	705a      	strb	r2, [r3, #1]

			printInfo();
 8004b10:	f7ff fa84 	bl	800401c <printInfo>
		}

		if (flag.saveSettings) {
 8004b14:	4b68      	ldr	r3, [pc, #416]	; (8004cb8 <main+0x494>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2210      	movs	r2, #16
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d010      	beq.n	8004b44 <main+0x320>
			flag.saveSettings = 0;
 8004b22:	4b65      	ldr	r3, [pc, #404]	; (8004cb8 <main+0x494>)
 8004b24:	781a      	ldrb	r2, [r3, #0]
 8004b26:	2110      	movs	r1, #16
 8004b28:	438a      	bics	r2, r1
 8004b2a:	701a      	strb	r2, [r3, #0]

			debugLogTime("Saving settings to EEPROM");
 8004b2c:	4b6f      	ldr	r3, [pc, #444]	; (8004cec <main+0x4c8>)
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f7fe fdf4 	bl	800371c <debugLogTime>
			initiateSettings(&settings);
 8004b34:	4b61      	ldr	r3, [pc, #388]	; (8004cbc <main+0x498>)
 8004b36:	0018      	movs	r0, r3
 8004b38:	f7fe ff94 	bl	8003a64 <initiateSettings>
			saveSettings(&settings);
 8004b3c:	4b5f      	ldr	r3, [pc, #380]	; (8004cbc <main+0x498>)
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f7ff f874 	bl	8003c2c <saveSettings>
		}

		if (flag.readConfig) {
 8004b44:	4b5c      	ldr	r3, [pc, #368]	; (8004cb8 <main+0x494>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d006      	beq.n	8004b60 <main+0x33c>
			flag.readConfig = 0;
 8004b52:	4b59      	ldr	r3, [pc, #356]	; (8004cb8 <main+0x494>)
 8004b54:	781a      	ldrb	r2, [r3, #0]
 8004b56:	2120      	movs	r1, #32
 8004b58:	438a      	bics	r2, r1
 8004b5a:	701a      	strb	r2, [r3, #0]

			sendConfig();
 8004b5c:	f001 fd7a 	bl	8006654 <sendConfig>
		}

		if (flag.uartReset)
 8004b60:	4b55      	ldr	r3, [pc, #340]	; (8004cb8 <main+0x494>)
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	2210      	movs	r2, #16
 8004b66:	4013      	ands	r3, r2
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d008      	beq.n	8004b80 <main+0x35c>
		{
			flag.uartReset = 0;
 8004b6e:	4b52      	ldr	r3, [pc, #328]	; (8004cb8 <main+0x494>)
 8004b70:	785a      	ldrb	r2, [r3, #1]
 8004b72:	2110      	movs	r1, #16
 8004b74:	438a      	bics	r2, r1
 8004b76:	705a      	strb	r2, [r3, #1]

			debugLog("UART reinitialized");
 8004b78:	4b5d      	ldr	r3, [pc, #372]	; (8004cf0 <main+0x4cc>)
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f7fe fe0c 	bl	8003798 <debugLog>

		}

		if (flag.sleep)
 8004b80:	4b4d      	ldr	r3, [pc, #308]	; (8004cb8 <main+0x494>)
 8004b82:	785b      	ldrb	r3, [r3, #1]
 8004b84:	2220      	movs	r2, #32
 8004b86:	4013      	ands	r3, r2
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <main+0x380>
		{
			flag.sleep = 0;
 8004b8e:	4b4a      	ldr	r3, [pc, #296]	; (8004cb8 <main+0x494>)
 8004b90:	785a      	ldrb	r2, [r3, #1]
 8004b92:	2120      	movs	r1, #32
 8004b94:	438a      	bics	r2, r1
 8004b96:	705a      	strb	r2, [r3, #1]

			debugLog("Woken up sequence");
 8004b98:	4b56      	ldr	r3, [pc, #344]	; (8004cf4 <main+0x4d0>)
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f7fe fdfc 	bl	8003798 <debugLog>

            uartReinit();
 8004ba0:	f001 fc3c 	bl	800641c <uartReinit>
		}

		uartHandler();
 8004ba4:	f001 fbd6 	bl	8006354 <uartHandler>

		SX127X_Handler(&myRadio);
 8004ba8:	4b53      	ldr	r3, [pc, #332]	; (8004cf8 <main+0x4d4>)
 8004baa:	0018      	movs	r0, r3
 8004bac:	f001 f9d0 	bl	8005f50 <SX127X_Handler>

		LEDhandler(&myRadio);
 8004bb0:	4b51      	ldr	r3, [pc, #324]	; (8004cf8 <main+0x4d4>)
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f7ff f9d2 	bl	8003f5c <LEDhandler>

		sleepHandler("Sleep from main cycle");
 8004bb8:	4b50      	ldr	r3, [pc, #320]	; (8004cfc <main+0x4d8>)
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f7ff fc02 	bl	80043c4 <sleepHandler>

		extiHandler();
 8004bc0:	f7ff fc56 	bl	8004470 <extiHandler>

		messageHandler();
 8004bc4:	f7ff fcec 	bl	80045a0 <messageHandler>

		/// Main sequencer

		if (status.sequence == idle && flag.needToSend) {
 8004bc8:	4b44      	ldr	r3, [pc, #272]	; (8004cdc <main+0x4b8>)
 8004bca:	7d1b      	ldrb	r3, [r3, #20]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d110      	bne.n	8004bf2 <main+0x3ce>
 8004bd0:	4b39      	ldr	r3, [pc, #228]	; (8004cb8 <main+0x494>)
 8004bd2:	785b      	ldrb	r3, [r3, #1]
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <main+0x3ce>
			flag.needToSend = 0;
 8004bde:	4b36      	ldr	r3, [pc, #216]	; (8004cb8 <main+0x494>)
 8004be0:	785a      	ldrb	r2, [r3, #1]
 8004be2:	2104      	movs	r1, #4
 8004be4:	438a      	bics	r2, r1
 8004be6:	705a      	strb	r2, [r3, #1]
			changeSequence(tx);
 8004be8:	2001      	movs	r0, #1
 8004bea:	f7ff fba9 	bl	8004340 <changeSequence>
			sendStatus();
 8004bee:	f7ff f89f 	bl	8003d30 <sendStatus>
		}

		if (status.sequence == tx && status.timeOnSequence > 30
 8004bf2:	4b3a      	ldr	r3, [pc, #232]	; (8004cdc <main+0x4b8>)
 8004bf4:	7d1b      	ldrb	r3, [r3, #20]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d10a      	bne.n	8004c10 <main+0x3ec>
 8004bfa:	4b38      	ldr	r3, [pc, #224]	; (8004cdc <main+0x4b8>)
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b1e      	cmp	r3, #30
 8004c00:	d906      	bls.n	8004c10 <main+0x3ec>
				&& myRadio.status != TX)
 8004c02:	4b3d      	ldr	r3, [pc, #244]	; (8004cf8 <main+0x4d4>)
 8004c04:	7c1b      	ldrb	r3, [r3, #16]
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d002      	beq.n	8004c10 <main+0x3ec>
			changeSequence(wfa);
 8004c0a:	2002      	movs	r0, #2
 8004c0c:	f7ff fb98 	bl	8004340 <changeSequence>

		if (status.sequence == wfa && status.timeOnSequence > ACK_WAIT_TIME) {
 8004c10:	4b32      	ldr	r3, [pc, #200]	; (8004cdc <main+0x4b8>)
 8004c12:	7d1b      	ldrb	r3, [r3, #20]
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d107      	bne.n	8004c28 <main+0x404>
 8004c18:	4b30      	ldr	r3, [pc, #192]	; (8004cdc <main+0x4b8>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	4a38      	ldr	r2, [pc, #224]	; (8004d00 <main+0x4dc>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d902      	bls.n	8004c28 <main+0x404>

			changeSequence(delay);
 8004c22:	2003      	movs	r0, #3
 8004c24:	f7ff fb8c 	bl	8004340 <changeSequence>
		}

		if (status.sequence == delay && !status.powered) {
 8004c28:	4b2c      	ldr	r3, [pc, #176]	; (8004cdc <main+0x4b8>)
 8004c2a:	7d1b      	ldrb	r3, [r3, #20]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d11f      	bne.n	8004c70 <main+0x44c>
 8004c30:	4b2a      	ldr	r3, [pc, #168]	; (8004cdc <main+0x4b8>)
 8004c32:	791b      	ldrb	r3, [r3, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	4053      	eors	r3, r2
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d018      	beq.n	8004c70 <main+0x44c>
			debugLogInt("Delay sleep for %d s", resendInterval);
 8004c3e:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <main+0x4e0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	001a      	movs	r2, r3
 8004c44:	4b30      	ldr	r3, [pc, #192]	; (8004d08 <main+0x4e4>)
 8004c46:	0011      	movs	r1, r2
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f7fe fdbb 	bl	80037c4 <debugLogInt>
			setWakeup(resendInterval);
 8004c4e:	4b2d      	ldr	r3, [pc, #180]	; (8004d04 <main+0x4e0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	0018      	movs	r0, r3
 8004c56:	f7ff f819 	bl	8003c8c <setWakeup>
			sleep();
 8004c5a:	f7ff f833 	bl	8003cc4 <sleep>
			debugLog("Time to send again");
 8004c5e:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <main+0x4e8>)
 8004c60:	0018      	movs	r0, r3
 8004c62:	f7fe fd99 	bl	8003798 <debugLog>
			increaceInterval();
 8004c66:	f7ff fb93 	bl	8004390 <increaceInterval>
			changeSequence(idle);
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	f7ff fb68 	bl	8004340 <changeSequence>
		}

		if (status.sequence == delay && status.powered
 8004c70:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <main+0x4b8>)
 8004c72:	7d1b      	ldrb	r3, [r3, #20]
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d000      	beq.n	8004c7a <main+0x456>
 8004c78:	e700      	b.n	8004a7c <main+0x258>
 8004c7a:	4b18      	ldr	r3, [pc, #96]	; (8004cdc <main+0x4b8>)
 8004c7c:	791b      	ldrb	r3, [r3, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d100      	bne.n	8004c84 <main+0x460>
 8004c82:	e6fb      	b.n	8004a7c <main+0x258>
				&& (status.timeOnSequence > (resendInterval * 1000))) {
 8004c84:	4b15      	ldr	r3, [pc, #84]	; (8004cdc <main+0x4b8>)
 8004c86:	6919      	ldr	r1, [r3, #16]
 8004c88:	4b1e      	ldr	r3, [pc, #120]	; (8004d04 <main+0x4e0>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	0013      	movs	r3, r2
 8004c8e:	015b      	lsls	r3, r3, #5
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	189b      	adds	r3, r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4299      	cmp	r1, r3
 8004c9a:	d800      	bhi.n	8004c9e <main+0x47a>
 8004c9c:	e6ee      	b.n	8004a7c <main+0x258>
			debugLog("Time to send again");
 8004c9e:	4b1b      	ldr	r3, [pc, #108]	; (8004d0c <main+0x4e8>)
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	f7fe fd79 	bl	8003798 <debugLog>
			increaceInterval();
 8004ca6:	f7ff fb73 	bl	8004390 <increaceInterval>
			changeSequence(idle);
 8004caa:	2000      	movs	r0, #0
 8004cac:	f7ff fb48 	bl	8004340 <changeSequence>
		HAL_WWDG_Refresh(&hwwdg);
 8004cb0:	e6e4      	b.n	8004a7c <main+0x258>
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	0800e5fc 	.word	0x0800e5fc
 8004cb8:	2000048c 	.word	0x2000048c
 8004cbc:	20000534 	.word	0x20000534
 8004cc0:	0800e60c 	.word	0x0800e60c
 8004cc4:	0800e620 	.word	0x0800e620
 8004cc8:	0800e634 	.word	0x0800e634
 8004ccc:	20000024 	.word	0x20000024
 8004cd0:	0800e64c 	.word	0x0800e64c
 8004cd4:	20000478 	.word	0x20000478
 8004cd8:	20000518 	.word	0x20000518
 8004cdc:	2000051c 	.word	0x2000051c
 8004ce0:	0800e660 	.word	0x0800e660
 8004ce4:	20000490 	.word	0x20000490
 8004ce8:	0800e670 	.word	0x0800e670
 8004cec:	0800e684 	.word	0x0800e684
 8004cf0:	0800e6a0 	.word	0x0800e6a0
 8004cf4:	0800e6b4 	.word	0x0800e6b4
 8004cf8:	20000494 	.word	0x20000494
 8004cfc:	0800e6c8 	.word	0x0800e6c8
 8004d00:	000005dc 	.word	0x000005dc
 8004d04:	20000054 	.word	0x20000054
 8004d08:	0800e6e0 	.word	0x0800e6e0
 8004d0c:	0800e6f8 	.word	0x0800e6f8

08004d10 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b09b      	sub	sp, #108	; 0x6c
 8004d14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004d16:	2434      	movs	r4, #52	; 0x34
 8004d18:	193b      	adds	r3, r7, r4
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	2334      	movs	r3, #52	; 0x34
 8004d1e:	001a      	movs	r2, r3
 8004d20:	2100      	movs	r1, #0
 8004d22:	f006 f9b0 	bl	800b086 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004d26:	2320      	movs	r3, #32
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	2314      	movs	r3, #20
 8004d2e:	001a      	movs	r2, r3
 8004d30:	2100      	movs	r1, #0
 8004d32:	f006 f9a8 	bl	800b086 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	0018      	movs	r0, r3
 8004d3a:	231c      	movs	r3, #28
 8004d3c:	001a      	movs	r2, r3
 8004d3e:	2100      	movs	r1, #0
 8004d40:	f006 f9a1 	bl	800b086 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d44:	4b31      	ldr	r3, [pc, #196]	; (8004e0c <SystemClock_Config+0xfc>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a31      	ldr	r2, [pc, #196]	; (8004e10 <SystemClock_Config+0x100>)
 8004d4a:	401a      	ands	r2, r3
 8004d4c:	4b2f      	ldr	r3, [pc, #188]	; (8004e0c <SystemClock_Config+0xfc>)
 8004d4e:	2180      	movs	r1, #128	; 0x80
 8004d50:	0109      	lsls	r1, r1, #4
 8004d52:	430a      	orrs	r2, r1
 8004d54:	601a      	str	r2, [r3, #0]
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8004d56:	f003 fb19 	bl	800838c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8004d5a:	4b2e      	ldr	r3, [pc, #184]	; (8004e14 <SystemClock_Config+0x104>)
 8004d5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d5e:	4b2d      	ldr	r3, [pc, #180]	; (8004e14 <SystemClock_Config+0x104>)
 8004d60:	21c0      	movs	r1, #192	; 0xc0
 8004d62:	0149      	lsls	r1, r1, #5
 8004d64:	430a      	orrs	r2, r1
 8004d66:	651a      	str	r2, [r3, #80]	; 0x50
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8004d68:	193b      	adds	r3, r7, r4
 8004d6a:	2214      	movs	r2, #20
 8004d6c:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004d6e:	193b      	adds	r3, r7, r4
 8004d70:	2280      	movs	r2, #128	; 0x80
 8004d72:	0052      	lsls	r2, r2, #1
 8004d74:	609a      	str	r2, [r3, #8]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004d76:	0021      	movs	r1, r4
 8004d78:	187b      	adds	r3, r7, r1
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8004d7e:	187b      	adds	r3, r7, r1
 8004d80:	2200      	movs	r2, #0
 8004d82:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8004d84:	187b      	adds	r3, r7, r1
 8004d86:	22a0      	movs	r2, #160	; 0xa0
 8004d88:	0212      	lsls	r2, r2, #8
 8004d8a:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004d8c:	187b      	adds	r3, r7, r1
 8004d8e:	2200      	movs	r2, #0
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004d92:	187b      	adds	r3, r7, r1
 8004d94:	0018      	movs	r0, r3
 8004d96:	f003 fb63 	bl	8008460 <HAL_RCC_OscConfig>
 8004d9a:	1e03      	subs	r3, r0, #0
 8004d9c:	d001      	beq.n	8004da2 <SystemClock_Config+0x92>
		Error_Handler();
 8004d9e:	f000 fabf 	bl	8005320 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004da2:	2120      	movs	r1, #32
 8004da4:	187b      	adds	r3, r7, r1
 8004da6:	220f      	movs	r2, #15
 8004da8:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8004daa:	187b      	adds	r3, r7, r1
 8004dac:	2200      	movs	r2, #0
 8004dae:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004db0:	187b      	adds	r3, r7, r1
 8004db2:	2200      	movs	r2, #0
 8004db4:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004db6:	187b      	adds	r3, r7, r1
 8004db8:	2200      	movs	r2, #0
 8004dba:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004dbc:	187b      	adds	r3, r7, r1
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8004dc2:	187b      	adds	r3, r7, r1
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f003 feb4 	bl	8008b34 <HAL_RCC_ClockConfig>
 8004dcc:	1e03      	subs	r3, r0, #0
 8004dce:	d001      	beq.n	8004dd4 <SystemClock_Config+0xc4>
		Error_Handler();
 8004dd0:	f000 faa6 	bl	8005320 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	22a1      	movs	r2, #161	; 0xa1
 8004dd8:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_LPTIM1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004dda:	1d3b      	adds	r3, r7, #4
 8004ddc:	2200      	movs	r2, #0
 8004dde:	609a      	str	r2, [r3, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004de0:	1d3b      	adds	r3, r7, #4
 8004de2:	2280      	movs	r2, #128	; 0x80
 8004de4:	0252      	lsls	r2, r2, #9
 8004de6:	605a      	str	r2, [r3, #4]
	PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8004de8:	1d3b      	adds	r3, r7, #4
 8004dea:	22c0      	movs	r2, #192	; 0xc0
 8004dec:	0312      	lsls	r2, r2, #12
 8004dee:	619a      	str	r2, [r3, #24]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8004df0:	1d3b      	adds	r3, r7, #4
 8004df2:	0018      	movs	r0, r3
 8004df4:	f004 f8c2 	bl	8008f7c <HAL_RCCEx_PeriphCLKConfig>
 8004df8:	1e03      	subs	r3, r0, #0
 8004dfa:	d001      	beq.n	8004e00 <SystemClock_Config+0xf0>
		Error_Handler();
 8004dfc:	f000 fa90 	bl	8005320 <Error_Handler>
	}
	/** Enables the Clock Security System
	 */
	HAL_RCCEx_EnableLSECSS();
 8004e00:	f004 f9f2 	bl	80091e8 <HAL_RCCEx_EnableLSECSS>
}
 8004e04:	46c0      	nop			; (mov r8, r8)
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b01b      	add	sp, #108	; 0x6c
 8004e0a:	bd90      	pop	{r4, r7, pc}
 8004e0c:	40007000 	.word	0x40007000
 8004e10:	ffffe7ff 	.word	0xffffe7ff
 8004e14:	40021000 	.word	0x40021000

08004e18 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004e1e:	003b      	movs	r3, r7
 8004e20:	0018      	movs	r0, r3
 8004e22:	2308      	movs	r3, #8
 8004e24:	001a      	movs	r2, r3
 8004e26:	2100      	movs	r1, #0
 8004e28:	f006 f92d 	bl	800b086 <memset>
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8004e2c:	4b30      	ldr	r3, [pc, #192]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e2e:	4a31      	ldr	r2, [pc, #196]	; (8004ef4 <MX_ADC_Init+0xdc>)
 8004e30:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 8004e32:	4b2f      	ldr	r3, [pc, #188]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004e38:	4b2d      	ldr	r3, [pc, #180]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e3a:	22c0      	movs	r2, #192	; 0xc0
 8004e3c:	0612      	lsls	r2, r2, #24
 8004e3e:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004e40:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8004e46:	4b2a      	ldr	r3, [pc, #168]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e48:	2207      	movs	r2, #7
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004e4c:	4b28      	ldr	r3, [pc, #160]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e52:	4b27      	ldr	r3, [pc, #156]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 8004e58:	4b25      	ldr	r3, [pc, #148]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8004e60:	4b23      	ldr	r3, [pc, #140]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e62:	2221      	movs	r2, #33	; 0x21
 8004e64:	2100      	movs	r1, #0
 8004e66:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e68:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e6e:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e70:	22c2      	movs	r2, #194	; 0xc2
 8004e72:	32ff      	adds	r2, #255	; 0xff
 8004e74:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 8004e76:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e78:	222c      	movs	r2, #44	; 0x2c
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e80:	2204      	movs	r2, #4
 8004e82:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004e84:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 8004e8a:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = ENABLE;
 8004e90:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004e96:	4b16      	ldr	r3, [pc, #88]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8004e9c:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f001 fd12 	bl	80068c8 <HAL_ADC_Init>
 8004ea4:	1e03      	subs	r3, r0, #0
 8004ea6:	d001      	beq.n	8004eac <MX_ADC_Init+0x94>
		Error_Handler();
 8004ea8:	f000 fa3a 	bl	8005320 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8004eac:	003b      	movs	r3, r7
 8004eae:	4a12      	ldr	r2, [pc, #72]	; (8004ef8 <MX_ADC_Init+0xe0>)
 8004eb0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004eb2:	003b      	movs	r3, r7
 8004eb4:	2280      	movs	r2, #128	; 0x80
 8004eb6:	0152      	lsls	r2, r2, #5
 8004eb8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004eba:	003a      	movs	r2, r7
 8004ebc:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004ebe:	0011      	movs	r1, r2
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f001 ff0f 	bl	8006ce4 <HAL_ADC_ConfigChannel>
 8004ec6:	1e03      	subs	r3, r0, #0
 8004ec8:	d001      	beq.n	8004ece <MX_ADC_Init+0xb6>
		Error_Handler();
 8004eca:	f000 fa29 	bl	8005320 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004ece:	003b      	movs	r3, r7
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <MX_ADC_Init+0xe4>)
 8004ed2:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004ed4:	003a      	movs	r2, r7
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <MX_ADC_Init+0xd8>)
 8004ed8:	0011      	movs	r1, r2
 8004eda:	0018      	movs	r0, r3
 8004edc:	f001 ff02 	bl	8006ce4 <HAL_ADC_ConfigChannel>
 8004ee0:	1e03      	subs	r3, r0, #0
 8004ee2:	d001      	beq.n	8004ee8 <MX_ADC_Init+0xd0>
		Error_Handler();
 8004ee4:	f000 fa1c 	bl	8005320 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b002      	add	sp, #8
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	2000025c 	.word	0x2000025c
 8004ef4:	40012400 	.word	0x40012400
 8004ef8:	08000004 	.word	0x08000004
 8004efc:	44020000 	.word	0x44020000

08004f00 <MX_LPTIM1_Init>:
/**
 * @brief LPTIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPTIM1_Init(void) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
	/* USER CODE END LPTIM1_Init 0 */

	/* USER CODE BEGIN LPTIM1_Init 1 */

	/* USER CODE END LPTIM1_Init 1 */
	hlptim1.Instance = LPTIM1;
 8004f04:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <MX_LPTIM1_Init+0x48>)
 8004f06:	4a11      	ldr	r2, [pc, #68]	; (8004f4c <MX_LPTIM1_Init+0x4c>)
 8004f08:	601a      	str	r2, [r3, #0]
	hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8004f0a:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <MX_LPTIM1_Init+0x48>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	605a      	str	r2, [r3, #4]
	hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8004f10:	4b0d      	ldr	r3, [pc, #52]	; (8004f48 <MX_LPTIM1_Init+0x48>)
 8004f12:	22e0      	movs	r2, #224	; 0xe0
 8004f14:	0112      	lsls	r2, r2, #4
 8004f16:	609a      	str	r2, [r3, #8]
	hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <MX_LPTIM1_Init+0x48>)
 8004f1a:	4a0d      	ldr	r2, [pc, #52]	; (8004f50 <MX_LPTIM1_Init+0x50>)
 8004f1c:	615a      	str	r2, [r3, #20]
	hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <MX_LPTIM1_Init+0x48>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	621a      	str	r2, [r3, #32]
	hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8004f24:	4b08      	ldr	r3, [pc, #32]	; (8004f48 <MX_LPTIM1_Init+0x48>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	625a      	str	r2, [r3, #36]	; 0x24
	hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <MX_LPTIM1_Init+0x48>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_LPTIM_Init(&hlptim1) != HAL_OK) {
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <MX_LPTIM1_Init+0x48>)
 8004f32:	0018      	movs	r0, r3
 8004f34:	f002 ff56 	bl	8007de4 <HAL_LPTIM_Init>
 8004f38:	1e03      	subs	r3, r0, #0
 8004f3a:	d001      	beq.n	8004f40 <MX_LPTIM1_Init+0x40>
		Error_Handler();
 8004f3c:	f000 f9f0 	bl	8005320 <Error_Handler>
	}
	/* USER CODE BEGIN LPTIM1_Init 2 */

	/* USER CODE END LPTIM1_Init 2 */

}
 8004f40:	46c0      	nop			; (mov r8, r8)
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	20000300 	.word	0x20000300
 8004f4c:	40007c00 	.word	0x40007c00
 8004f50:	0000ffff 	.word	0x0000ffff

08004f54 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8004f58:	4b16      	ldr	r3, [pc, #88]	; (8004fb4 <MX_RTC_Init+0x60>)
 8004f5a:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <MX_RTC_Init+0x64>)
 8004f5c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004f5e:	4b15      	ldr	r3, [pc, #84]	; (8004fb4 <MX_RTC_Init+0x60>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8004f64:	4b13      	ldr	r3, [pc, #76]	; (8004fb4 <MX_RTC_Init+0x60>)
 8004f66:	227f      	movs	r2, #127	; 0x7f
 8004f68:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8004f6a:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <MX_RTC_Init+0x60>)
 8004f6c:	22ff      	movs	r2, #255	; 0xff
 8004f6e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004f70:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <MX_RTC_Init+0x60>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004f76:	4b0f      	ldr	r3, [pc, #60]	; (8004fb4 <MX_RTC_Init+0x60>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004f7c:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <MX_RTC_Init+0x60>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004f82:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <MX_RTC_Init+0x60>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8004f88:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <MX_RTC_Init+0x60>)
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f004 f93a 	bl	8009204 <HAL_RTC_Init>
 8004f90:	1e03      	subs	r3, r0, #0
 8004f92:	d001      	beq.n	8004f98 <MX_RTC_Init+0x44>
		Error_Handler();
 8004f94:	f000 f9c4 	bl	8005320 <Error_Handler>
	}
	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60,
 8004f98:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <MX_RTC_Init+0x60>)
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	213c      	movs	r1, #60	; 0x3c
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f004 fa20 	bl	80093e4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004fa4:	1e03      	subs	r3, r0, #0
 8004fa6:	d001      	beq.n	8004fac <MX_RTC_Init+0x58>
	RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK) {
		Error_Handler();
 8004fa8:	f000 f9ba 	bl	8005320 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8004fac:	46c0      	nop			; (mov r8, r8)
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	20000330 	.word	0x20000330
 8004fb8:	40002800 	.word	0x40002800

08004fbc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004fc0:	4b18      	ldr	r3, [pc, #96]	; (8005024 <MX_SPI1_Init+0x68>)
 8004fc2:	4a19      	ldr	r2, [pc, #100]	; (8005028 <MX_SPI1_Init+0x6c>)
 8004fc4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8004fc6:	4b17      	ldr	r3, [pc, #92]	; (8005024 <MX_SPI1_Init+0x68>)
 8004fc8:	2282      	movs	r2, #130	; 0x82
 8004fca:	0052      	lsls	r2, r2, #1
 8004fcc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004fce:	4b15      	ldr	r3, [pc, #84]	; (8005024 <MX_SPI1_Init+0x68>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004fd4:	4b13      	ldr	r3, [pc, #76]	; (8005024 <MX_SPI1_Init+0x68>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fda:	4b12      	ldr	r3, [pc, #72]	; (8005024 <MX_SPI1_Init+0x68>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004fe0:	4b10      	ldr	r3, [pc, #64]	; (8005024 <MX_SPI1_Init+0x68>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8004fe6:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <MX_SPI1_Init+0x68>)
 8004fe8:	2280      	movs	r2, #128	; 0x80
 8004fea:	0092      	lsls	r2, r2, #2
 8004fec:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fee:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <MX_SPI1_Init+0x68>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <MX_SPI1_Init+0x68>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ffa:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <MX_SPI1_Init+0x68>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005000:	4b08      	ldr	r3, [pc, #32]	; (8005024 <MX_SPI1_Init+0x68>)
 8005002:	2200      	movs	r2, #0
 8005004:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8005006:	4b07      	ldr	r3, [pc, #28]	; (8005024 <MX_SPI1_Init+0x68>)
 8005008:	2207      	movs	r2, #7
 800500a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <MX_SPI1_Init+0x68>)
 800500e:	0018      	movs	r0, r3
 8005010:	f004 fad8 	bl	80095c4 <HAL_SPI_Init>
 8005014:	1e03      	subs	r3, r0, #0
 8005016:	d001      	beq.n	800501c <MX_SPI1_Init+0x60>
		Error_Handler();
 8005018:	f000 f982 	bl	8005320 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800501c:	46c0      	nop			; (mov r8, r8)
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	20000354 	.word	0x20000354
 8005028:	40013000 	.word	0x40013000

0800502c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8005030:	4b14      	ldr	r3, [pc, #80]	; (8005084 <MX_USART1_UART_Init+0x58>)
 8005032:	4a15      	ldr	r2, [pc, #84]	; (8005088 <MX_USART1_UART_Init+0x5c>)
 8005034:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8005036:	4b13      	ldr	r3, [pc, #76]	; (8005084 <MX_USART1_UART_Init+0x58>)
 8005038:	22e1      	movs	r2, #225	; 0xe1
 800503a:	0252      	lsls	r2, r2, #9
 800503c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800503e:	4b11      	ldr	r3, [pc, #68]	; (8005084 <MX_USART1_UART_Init+0x58>)
 8005040:	2200      	movs	r2, #0
 8005042:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8005044:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <MX_USART1_UART_Init+0x58>)
 8005046:	2200      	movs	r2, #0
 8005048:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800504a:	4b0e      	ldr	r3, [pc, #56]	; (8005084 <MX_USART1_UART_Init+0x58>)
 800504c:	2200      	movs	r2, #0
 800504e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8005050:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <MX_USART1_UART_Init+0x58>)
 8005052:	220c      	movs	r2, #12
 8005054:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005056:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <MX_USART1_UART_Init+0x58>)
 8005058:	2200      	movs	r2, #0
 800505a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800505c:	4b09      	ldr	r3, [pc, #36]	; (8005084 <MX_USART1_UART_Init+0x58>)
 800505e:	2200      	movs	r2, #0
 8005060:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005062:	4b08      	ldr	r3, [pc, #32]	; (8005084 <MX_USART1_UART_Init+0x58>)
 8005064:	2200      	movs	r2, #0
 8005066:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005068:	4b06      	ldr	r3, [pc, #24]	; (8005084 <MX_USART1_UART_Init+0x58>)
 800506a:	2200      	movs	r2, #0
 800506c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800506e:	4b05      	ldr	r3, [pc, #20]	; (8005084 <MX_USART1_UART_Init+0x58>)
 8005070:	0018      	movs	r0, r3
 8005072:	f004 ff2d 	bl	8009ed0 <HAL_UART_Init>
 8005076:	1e03      	subs	r3, r0, #0
 8005078:	d001      	beq.n	800507e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800507a:	f000 f951 	bl	8005320 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	200003ac 	.word	0x200003ac
 8005088:	40013800 	.word	0x40013800

0800508c <MX_WWDG_Init>:
/**
 * @brief WWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_WWDG_Init(void) {
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
	/* USER CODE END WWDG_Init 0 */

	/* USER CODE BEGIN WWDG_Init 1 */

	/* USER CODE END WWDG_Init 1 */
	hwwdg.Instance = WWDG;
 8005090:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <MX_WWDG_Init+0x3c>)
 8005092:	4a0e      	ldr	r2, [pc, #56]	; (80050cc <MX_WWDG_Init+0x40>)
 8005094:	601a      	str	r2, [r3, #0]
	hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 8005096:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <MX_WWDG_Init+0x3c>)
 8005098:	22c0      	movs	r2, #192	; 0xc0
 800509a:	0052      	lsls	r2, r2, #1
 800509c:	605a      	str	r2, [r3, #4]
	hwwdg.Init.Window = 127;
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <MX_WWDG_Init+0x3c>)
 80050a0:	227f      	movs	r2, #127	; 0x7f
 80050a2:	609a      	str	r2, [r3, #8]
	hwwdg.Init.Counter = 127;
 80050a4:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <MX_WWDG_Init+0x3c>)
 80050a6:	227f      	movs	r2, #127	; 0x7f
 80050a8:	60da      	str	r2, [r3, #12]
	hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 80050aa:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <MX_WWDG_Init+0x3c>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	611a      	str	r2, [r3, #16]
	if (HAL_WWDG_Init(&hwwdg) != HAL_OK) {
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <MX_WWDG_Init+0x3c>)
 80050b2:	0018      	movs	r0, r3
 80050b4:	f005 ff81 	bl	800afba <HAL_WWDG_Init>
 80050b8:	1e03      	subs	r3, r0, #0
 80050ba:	d001      	beq.n	80050c0 <MX_WWDG_Init+0x34>
		Error_Handler();
 80050bc:	f000 f930 	bl	8005320 <Error_Handler>
	}
	/* USER CODE BEGIN WWDG_Init 2 */

	/* USER CODE END WWDG_Init 2 */

}
 80050c0:	46c0      	nop			; (mov r8, r8)
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	46c0      	nop			; (mov r8, r8)
 80050c8:	20000478 	.word	0x20000478
 80050cc:	40002c00 	.word	0x40002c00

080050d0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80050d6:	4b10      	ldr	r3, [pc, #64]	; (8005118 <MX_DMA_Init+0x48>)
 80050d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050da:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <MX_DMA_Init+0x48>)
 80050dc:	2101      	movs	r1, #1
 80050de:	430a      	orrs	r2, r1
 80050e0:	631a      	str	r2, [r3, #48]	; 0x30
 80050e2:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <MX_DMA_Init+0x48>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	2201      	movs	r2, #1
 80050e8:	4013      	ands	r3, r2
 80050ea:	607b      	str	r3, [r7, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80050ee:	2200      	movs	r2, #0
 80050f0:	2100      	movs	r1, #0
 80050f2:	2009      	movs	r0, #9
 80050f4:	f002 f8d2 	bl	800729c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80050f8:	2009      	movs	r0, #9
 80050fa:	f002 f8e4 	bl	80072c6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80050fe:	2200      	movs	r2, #0
 8005100:	2100      	movs	r1, #0
 8005102:	200a      	movs	r0, #10
 8005104:	f002 f8ca 	bl	800729c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8005108:	200a      	movs	r0, #10
 800510a:	f002 f8dc 	bl	80072c6 <HAL_NVIC_EnableIRQ>

}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b002      	add	sp, #8
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	40021000 	.word	0x40021000

0800511c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800511c:	b590      	push	{r4, r7, lr}
 800511e:	b08b      	sub	sp, #44	; 0x2c
 8005120:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8005122:	2414      	movs	r4, #20
 8005124:	193b      	adds	r3, r7, r4
 8005126:	0018      	movs	r0, r3
 8005128:	2314      	movs	r3, #20
 800512a:	001a      	movs	r2, r3
 800512c:	2100      	movs	r1, #0
 800512e:	f005 ffaa 	bl	800b086 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005132:	4b76      	ldr	r3, [pc, #472]	; (800530c <MX_GPIO_Init+0x1f0>)
 8005134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005136:	4b75      	ldr	r3, [pc, #468]	; (800530c <MX_GPIO_Init+0x1f0>)
 8005138:	2104      	movs	r1, #4
 800513a:	430a      	orrs	r2, r1
 800513c:	62da      	str	r2, [r3, #44]	; 0x2c
 800513e:	4b73      	ldr	r3, [pc, #460]	; (800530c <MX_GPIO_Init+0x1f0>)
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	2204      	movs	r2, #4
 8005144:	4013      	ands	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800514a:	4b70      	ldr	r3, [pc, #448]	; (800530c <MX_GPIO_Init+0x1f0>)
 800514c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514e:	4b6f      	ldr	r3, [pc, #444]	; (800530c <MX_GPIO_Init+0x1f0>)
 8005150:	2180      	movs	r1, #128	; 0x80
 8005152:	430a      	orrs	r2, r1
 8005154:	62da      	str	r2, [r3, #44]	; 0x2c
 8005156:	4b6d      	ldr	r3, [pc, #436]	; (800530c <MX_GPIO_Init+0x1f0>)
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	2280      	movs	r2, #128	; 0x80
 800515c:	4013      	ands	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005162:	4b6a      	ldr	r3, [pc, #424]	; (800530c <MX_GPIO_Init+0x1f0>)
 8005164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005166:	4b69      	ldr	r3, [pc, #420]	; (800530c <MX_GPIO_Init+0x1f0>)
 8005168:	2101      	movs	r1, #1
 800516a:	430a      	orrs	r2, r1
 800516c:	62da      	str	r2, [r3, #44]	; 0x2c
 800516e:	4b67      	ldr	r3, [pc, #412]	; (800530c <MX_GPIO_Init+0x1f0>)
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	2201      	movs	r2, #1
 8005174:	4013      	ands	r3, r2
 8005176:	60bb      	str	r3, [r7, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800517a:	4b64      	ldr	r3, [pc, #400]	; (800530c <MX_GPIO_Init+0x1f0>)
 800517c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517e:	4b63      	ldr	r3, [pc, #396]	; (800530c <MX_GPIO_Init+0x1f0>)
 8005180:	2102      	movs	r1, #2
 8005182:	430a      	orrs	r2, r1
 8005184:	62da      	str	r2, [r3, #44]	; 0x2c
 8005186:	4b61      	ldr	r3, [pc, #388]	; (800530c <MX_GPIO_Init+0x1f0>)
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	2202      	movs	r2, #2
 800518c:	4013      	ands	r3, r2
 800518e:	607b      	str	r3, [r7, #4]
 8005190:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, TempPower_Pin | RESET_Pin | NSS_Pin,
 8005192:	23a0      	movs	r3, #160	; 0xa0
 8005194:	05db      	lsls	r3, r3, #23
 8005196:	2200      	movs	r2, #0
 8005198:	211a      	movs	r1, #26
 800519a:	0018      	movs	r0, r3
 800519c:	f002 fde9 	bl	8007d72 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, BLUE_Pin | ORANGE_Pin, GPIO_PIN_RESET);
 80051a0:	23c0      	movs	r3, #192	; 0xc0
 80051a2:	019b      	lsls	r3, r3, #6
 80051a4:	485a      	ldr	r0, [pc, #360]	; (8005310 <MX_GPIO_Init+0x1f4>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	0019      	movs	r1, r3
 80051aa:	f002 fde2 	bl	8007d72 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80051ae:	193b      	adds	r3, r7, r4
 80051b0:	2280      	movs	r2, #128	; 0x80
 80051b2:	0192      	lsls	r2, r2, #6
 80051b4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051b6:	193b      	adds	r3, r7, r4
 80051b8:	2203      	movs	r2, #3
 80051ba:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051bc:	193b      	adds	r3, r7, r4
 80051be:	2200      	movs	r2, #0
 80051c0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051c2:	193b      	adds	r3, r7, r4
 80051c4:	4a53      	ldr	r2, [pc, #332]	; (8005314 <MX_GPIO_Init+0x1f8>)
 80051c6:	0019      	movs	r1, r3
 80051c8:	0010      	movs	r0, r2
 80051ca:	f002 fc3f 	bl	8007a4c <HAL_GPIO_Init>

	/*Configure GPIO pins : PH0 PH1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80051ce:	193b      	adds	r3, r7, r4
 80051d0:	2203      	movs	r2, #3
 80051d2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051d4:	193b      	adds	r3, r7, r4
 80051d6:	2203      	movs	r2, #3
 80051d8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051da:	193b      	adds	r3, r7, r4
 80051dc:	2200      	movs	r2, #0
 80051de:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80051e0:	193b      	adds	r3, r7, r4
 80051e2:	4a4d      	ldr	r2, [pc, #308]	; (8005318 <MX_GPIO_Init+0x1fc>)
 80051e4:	0019      	movs	r1, r3
 80051e6:	0010      	movs	r0, r2
 80051e8:	f002 fc30 	bl	8007a4c <HAL_GPIO_Init>

	/*Configure GPIO pins : D1_Pin extPower_Pin */
	GPIO_InitStruct.Pin = D1_Pin | extPower_Pin;
 80051ec:	193b      	adds	r3, r7, r4
 80051ee:	2202      	movs	r2, #2
 80051f0:	32ff      	adds	r2, #255	; 0xff
 80051f2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80051f4:	193b      	adds	r3, r7, r4
 80051f6:	22c4      	movs	r2, #196	; 0xc4
 80051f8:	0392      	lsls	r2, r2, #14
 80051fa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80051fc:	193b      	adds	r3, r7, r4
 80051fe:	2202      	movs	r2, #2
 8005200:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005202:	193a      	adds	r2, r7, r4
 8005204:	23a0      	movs	r3, #160	; 0xa0
 8005206:	05db      	lsls	r3, r3, #23
 8005208:	0011      	movs	r1, r2
 800520a:	0018      	movs	r0, r3
 800520c:	f002 fc1e 	bl	8007a4c <HAL_GPIO_Init>

	/*Configure GPIO pin : TempPower_Pin */
	GPIO_InitStruct.Pin = TempPower_Pin;
 8005210:	193b      	adds	r3, r7, r4
 8005212:	2202      	movs	r2, #2
 8005214:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005216:	193b      	adds	r3, r7, r4
 8005218:	2201      	movs	r2, #1
 800521a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521c:	193b      	adds	r3, r7, r4
 800521e:	2200      	movs	r2, #0
 8005220:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005222:	193b      	adds	r3, r7, r4
 8005224:	2200      	movs	r2, #0
 8005226:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(TempPower_GPIO_Port, &GPIO_InitStruct);
 8005228:	193a      	adds	r2, r7, r4
 800522a:	23a0      	movs	r3, #160	; 0xa0
 800522c:	05db      	lsls	r3, r3, #23
 800522e:	0011      	movs	r1, r2
 8005230:	0018      	movs	r0, r3
 8005232:	f002 fc0b 	bl	8007a4c <HAL_GPIO_Init>

	/*Configure GPIO pins : RESET_Pin NSS_Pin */
	GPIO_InitStruct.Pin = RESET_Pin | NSS_Pin;
 8005236:	193b      	adds	r3, r7, r4
 8005238:	2218      	movs	r2, #24
 800523a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800523c:	193b      	adds	r3, r7, r4
 800523e:	2201      	movs	r2, #1
 8005240:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005242:	193b      	adds	r3, r7, r4
 8005244:	2200      	movs	r2, #0
 8005246:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005248:	193b      	adds	r3, r7, r4
 800524a:	2202      	movs	r2, #2
 800524c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800524e:	193a      	adds	r2, r7, r4
 8005250:	23a0      	movs	r3, #160	; 0xa0
 8005252:	05db      	lsls	r3, r3, #23
 8005254:	0011      	movs	r1, r2
 8005256:	0018      	movs	r0, r3
 8005258:	f002 fbf8 	bl	8007a4c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB10
	 PB11 PB14 PB15 PB3
	 PB4 PB5 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10
 800525c:	193b      	adds	r3, r7, r4
 800525e:	4a2f      	ldr	r2, [pc, #188]	; (800531c <MX_GPIO_Init+0x200>)
 8005260:	601a      	str	r2, [r3, #0]
			| GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_3 | GPIO_PIN_4
			| GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005262:	193b      	adds	r3, r7, r4
 8005264:	2203      	movs	r2, #3
 8005266:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005268:	193b      	adds	r3, r7, r4
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800526e:	193b      	adds	r3, r7, r4
 8005270:	4a27      	ldr	r2, [pc, #156]	; (8005310 <MX_GPIO_Init+0x1f4>)
 8005272:	0019      	movs	r1, r3
 8005274:	0010      	movs	r0, r2
 8005276:	f002 fbe9 	bl	8007a4c <HAL_GPIO_Init>

	/*Configure GPIO pins : BLUE_Pin ORANGE_Pin */
	GPIO_InitStruct.Pin = BLUE_Pin | ORANGE_Pin;
 800527a:	0021      	movs	r1, r4
 800527c:	187b      	adds	r3, r7, r1
 800527e:	22c0      	movs	r2, #192	; 0xc0
 8005280:	0192      	lsls	r2, r2, #6
 8005282:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005284:	000c      	movs	r4, r1
 8005286:	193b      	adds	r3, r7, r4
 8005288:	2201      	movs	r2, #1
 800528a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528c:	193b      	adds	r3, r7, r4
 800528e:	2200      	movs	r2, #0
 8005290:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005292:	193b      	adds	r3, r7, r4
 8005294:	2200      	movs	r2, #0
 8005296:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005298:	193b      	adds	r3, r7, r4
 800529a:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <MX_GPIO_Init+0x1f4>)
 800529c:	0019      	movs	r1, r3
 800529e:	0010      	movs	r0, r2
 80052a0:	f002 fbd4 	bl	8007a4c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA11 PA12 PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 80052a4:	193b      	adds	r3, r7, r4
 80052a6:	2298      	movs	r2, #152	; 0x98
 80052a8:	0212      	lsls	r2, r2, #8
 80052aa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052ac:	193b      	adds	r3, r7, r4
 80052ae:	2203      	movs	r2, #3
 80052b0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b2:	193b      	adds	r3, r7, r4
 80052b4:	2200      	movs	r2, #0
 80052b6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052b8:	193a      	adds	r2, r7, r4
 80052ba:	23a0      	movs	r3, #160	; 0xa0
 80052bc:	05db      	lsls	r3, r3, #23
 80052be:	0011      	movs	r1, r2
 80052c0:	0018      	movs	r0, r3
 80052c2:	f002 fbc3 	bl	8007a4c <HAL_GPIO_Init>

	/*Configure GPIO pins : USER1_Pin USER2_Pin */
	GPIO_InitStruct.Pin = USER1_Pin | USER2_Pin;
 80052c6:	193b      	adds	r3, r7, r4
 80052c8:	22c0      	movs	r2, #192	; 0xc0
 80052ca:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052cc:	193b      	adds	r3, r7, r4
 80052ce:	2200      	movs	r2, #0
 80052d0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052d2:	193b      	adds	r3, r7, r4
 80052d4:	2201      	movs	r2, #1
 80052d6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052d8:	193b      	adds	r3, r7, r4
 80052da:	4a0d      	ldr	r2, [pc, #52]	; (8005310 <MX_GPIO_Init+0x1f4>)
 80052dc:	0019      	movs	r1, r3
 80052de:	0010      	movs	r0, r2
 80052e0:	f002 fbb4 	bl	8007a4c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 80052e4:	2200      	movs	r2, #0
 80052e6:	2101      	movs	r1, #1
 80052e8:	2005      	movs	r0, #5
 80052ea:	f001 ffd7 	bl	800729c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80052ee:	2005      	movs	r0, #5
 80052f0:	f001 ffe9 	bl	80072c6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80052f4:	2200      	movs	r2, #0
 80052f6:	2101      	movs	r1, #1
 80052f8:	2007      	movs	r0, #7
 80052fa:	f001 ffcf 	bl	800729c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80052fe:	2007      	movs	r0, #7
 8005300:	f001 ffe1 	bl	80072c6 <HAL_NVIC_EnableIRQ>

}
 8005304:	46c0      	nop			; (mov r8, r8)
 8005306:	46bd      	mov	sp, r7
 8005308:	b00b      	add	sp, #44	; 0x2c
 800530a:	bd90      	pop	{r4, r7, pc}
 800530c:	40021000 	.word	0x40021000
 8005310:	50000400 	.word	0x50000400
 8005314:	50000800 	.word	0x50000800
 8005318:	50001c00 	.word	0x50001c00
 800531c:	0000cf3f 	.word	0x0000cf3f

08005320 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	debugLog("Error!");
 8005324:	4b03      	ldr	r3, [pc, #12]	; (8005334 <Error_Handler+0x14>)
 8005326:	0018      	movs	r0, r3
 8005328:	f7fe fa36 	bl	8003798 <debugLog>
	/* USER CODE END Error_Handler_Debug */
}
 800532c:	46c0      	nop			; (mov r8, r8)
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	0800e70c 	.word	0x0800e70c

08005338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800533c:	4b07      	ldr	r3, [pc, #28]	; (800535c <HAL_MspInit+0x24>)
 800533e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005340:	4b06      	ldr	r3, [pc, #24]	; (800535c <HAL_MspInit+0x24>)
 8005342:	2101      	movs	r1, #1
 8005344:	430a      	orrs	r2, r1
 8005346:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8005348:	4b04      	ldr	r3, [pc, #16]	; (800535c <HAL_MspInit+0x24>)
 800534a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_MspInit+0x24>)
 800534e:	2180      	movs	r1, #128	; 0x80
 8005350:	0549      	lsls	r1, r1, #21
 8005352:	430a      	orrs	r2, r1
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40021000 	.word	0x40021000

08005360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b089      	sub	sp, #36	; 0x24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005368:	240c      	movs	r4, #12
 800536a:	193b      	adds	r3, r7, r4
 800536c:	0018      	movs	r0, r3
 800536e:	2314      	movs	r3, #20
 8005370:	001a      	movs	r2, r3
 8005372:	2100      	movs	r1, #0
 8005374:	f005 fe87 	bl	800b086 <memset>
  if(hadc->Instance==ADC1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a2a      	ldr	r2, [pc, #168]	; (8005428 <HAL_ADC_MspInit+0xc8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d14d      	bne.n	800541e <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005382:	4b2a      	ldr	r3, [pc, #168]	; (800542c <HAL_ADC_MspInit+0xcc>)
 8005384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005386:	4b29      	ldr	r3, [pc, #164]	; (800542c <HAL_ADC_MspInit+0xcc>)
 8005388:	2180      	movs	r1, #128	; 0x80
 800538a:	0089      	lsls	r1, r1, #2
 800538c:	430a      	orrs	r2, r1
 800538e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005390:	4b26      	ldr	r3, [pc, #152]	; (800542c <HAL_ADC_MspInit+0xcc>)
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	4b25      	ldr	r3, [pc, #148]	; (800542c <HAL_ADC_MspInit+0xcc>)
 8005396:	2101      	movs	r1, #1
 8005398:	430a      	orrs	r2, r1
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c
 800539c:	4b23      	ldr	r3, [pc, #140]	; (800542c <HAL_ADC_MspInit+0xcc>)
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	2201      	movs	r2, #1
 80053a2:	4013      	ands	r3, r2
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = TempSensor_Pin;
 80053a8:	193b      	adds	r3, r7, r4
 80053aa:	2204      	movs	r2, #4
 80053ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053ae:	193b      	adds	r3, r7, r4
 80053b0:	2203      	movs	r2, #3
 80053b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b4:	193b      	adds	r3, r7, r4
 80053b6:	2200      	movs	r2, #0
 80053b8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(TempSensor_GPIO_Port, &GPIO_InitStruct);
 80053ba:	193a      	adds	r2, r7, r4
 80053bc:	23a0      	movs	r3, #160	; 0xa0
 80053be:	05db      	lsls	r3, r3, #23
 80053c0:	0011      	movs	r1, r2
 80053c2:	0018      	movs	r0, r3
 80053c4:	f002 fb42 	bl	8007a4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80053c8:	4b19      	ldr	r3, [pc, #100]	; (8005430 <HAL_ADC_MspInit+0xd0>)
 80053ca:	4a1a      	ldr	r2, [pc, #104]	; (8005434 <HAL_ADC_MspInit+0xd4>)
 80053cc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80053ce:	4b18      	ldr	r3, [pc, #96]	; (8005430 <HAL_ADC_MspInit+0xd0>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053d4:	4b16      	ldr	r3, [pc, #88]	; (8005430 <HAL_ADC_MspInit+0xd0>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80053da:	4b15      	ldr	r3, [pc, #84]	; (8005430 <HAL_ADC_MspInit+0xd0>)
 80053dc:	2200      	movs	r2, #0
 80053de:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80053e0:	4b13      	ldr	r3, [pc, #76]	; (8005430 <HAL_ADC_MspInit+0xd0>)
 80053e2:	2280      	movs	r2, #128	; 0x80
 80053e4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80053e6:	4b12      	ldr	r3, [pc, #72]	; (8005430 <HAL_ADC_MspInit+0xd0>)
 80053e8:	2280      	movs	r2, #128	; 0x80
 80053ea:	0052      	lsls	r2, r2, #1
 80053ec:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <HAL_ADC_MspInit+0xd0>)
 80053f0:	2280      	movs	r2, #128	; 0x80
 80053f2:	00d2      	lsls	r2, r2, #3
 80053f4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80053f6:	4b0e      	ldr	r3, [pc, #56]	; (8005430 <HAL_ADC_MspInit+0xd0>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80053fc:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <HAL_ADC_MspInit+0xd0>)
 80053fe:	2200      	movs	r2, #0
 8005400:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005402:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <HAL_ADC_MspInit+0xd0>)
 8005404:	0018      	movs	r0, r3
 8005406:	f001 ff7b 	bl	8007300 <HAL_DMA_Init>
 800540a:	1e03      	subs	r3, r0, #0
 800540c:	d001      	beq.n	8005412 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800540e:	f7ff ff87 	bl	8005320 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a06      	ldr	r2, [pc, #24]	; (8005430 <HAL_ADC_MspInit+0xd0>)
 8005416:	64da      	str	r2, [r3, #76]	; 0x4c
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <HAL_ADC_MspInit+0xd0>)
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	46bd      	mov	sp, r7
 8005422:	b009      	add	sp, #36	; 0x24
 8005424:	bd90      	pop	{r4, r7, pc}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	40012400 	.word	0x40012400
 800542c:	40021000 	.word	0x40021000
 8005430:	200002b8 	.word	0x200002b8
 8005434:	40020008 	.word	0x40020008

08005438 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a0a      	ldr	r2, [pc, #40]	; (8005470 <HAL_LPTIM_MspInit+0x38>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d10e      	bne.n	8005468 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800544a:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <HAL_LPTIM_MspInit+0x3c>)
 800544c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800544e:	4b09      	ldr	r3, [pc, #36]	; (8005474 <HAL_LPTIM_MspInit+0x3c>)
 8005450:	2180      	movs	r1, #128	; 0x80
 8005452:	0609      	lsls	r1, r1, #24
 8005454:	430a      	orrs	r2, r1
 8005456:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);
 8005458:	2200      	movs	r2, #0
 800545a:	2101      	movs	r1, #1
 800545c:	200d      	movs	r0, #13
 800545e:	f001 ff1d 	bl	800729c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8005462:	200d      	movs	r0, #13
 8005464:	f001 ff2f 	bl	80072c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8005468:	46c0      	nop			; (mov r8, r8)
 800546a:	46bd      	mov	sp, r7
 800546c:	b002      	add	sp, #8
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40007c00 	.word	0x40007c00
 8005474:	40021000 	.word	0x40021000

08005478 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a0a      	ldr	r2, [pc, #40]	; (80054b0 <HAL_RTC_MspInit+0x38>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d10e      	bne.n	80054a8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800548a:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <HAL_RTC_MspInit+0x3c>)
 800548c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800548e:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <HAL_RTC_MspInit+0x3c>)
 8005490:	2180      	movs	r1, #128	; 0x80
 8005492:	02c9      	lsls	r1, r1, #11
 8005494:	430a      	orrs	r2, r1
 8005496:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8005498:	2200      	movs	r2, #0
 800549a:	2100      	movs	r1, #0
 800549c:	2002      	movs	r0, #2
 800549e:	f001 fefd 	bl	800729c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80054a2:	2002      	movs	r0, #2
 80054a4:	f001 ff0f 	bl	80072c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80054a8:	46c0      	nop			; (mov r8, r8)
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b002      	add	sp, #8
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40002800 	.word	0x40002800
 80054b4:	40021000 	.word	0x40021000

080054b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80054b8:	b590      	push	{r4, r7, lr}
 80054ba:	b089      	sub	sp, #36	; 0x24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c0:	240c      	movs	r4, #12
 80054c2:	193b      	adds	r3, r7, r4
 80054c4:	0018      	movs	r0, r3
 80054c6:	2314      	movs	r3, #20
 80054c8:	001a      	movs	r2, r3
 80054ca:	2100      	movs	r1, #0
 80054cc:	f005 fddb 	bl	800b086 <memset>
  if(hspi->Instance==SPI1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a18      	ldr	r2, [pc, #96]	; (8005538 <HAL_SPI_MspInit+0x80>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d129      	bne.n	800552e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80054da:	4b18      	ldr	r3, [pc, #96]	; (800553c <HAL_SPI_MspInit+0x84>)
 80054dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054de:	4b17      	ldr	r3, [pc, #92]	; (800553c <HAL_SPI_MspInit+0x84>)
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	0149      	lsls	r1, r1, #5
 80054e4:	430a      	orrs	r2, r1
 80054e6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054e8:	4b14      	ldr	r3, [pc, #80]	; (800553c <HAL_SPI_MspInit+0x84>)
 80054ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ec:	4b13      	ldr	r3, [pc, #76]	; (800553c <HAL_SPI_MspInit+0x84>)
 80054ee:	2101      	movs	r1, #1
 80054f0:	430a      	orrs	r2, r1
 80054f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80054f4:	4b11      	ldr	r3, [pc, #68]	; (800553c <HAL_SPI_MspInit+0x84>)
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	2201      	movs	r2, #1
 80054fa:	4013      	ands	r3, r2
 80054fc:	60bb      	str	r3, [r7, #8]
 80054fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005500:	0021      	movs	r1, r4
 8005502:	187b      	adds	r3, r7, r1
 8005504:	22e0      	movs	r2, #224	; 0xe0
 8005506:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005508:	187b      	adds	r3, r7, r1
 800550a:	2202      	movs	r2, #2
 800550c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550e:	187b      	adds	r3, r7, r1
 8005510:	2200      	movs	r2, #0
 8005512:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005514:	187b      	adds	r3, r7, r1
 8005516:	2203      	movs	r2, #3
 8005518:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800551a:	187b      	adds	r3, r7, r1
 800551c:	2200      	movs	r2, #0
 800551e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005520:	187a      	adds	r2, r7, r1
 8005522:	23a0      	movs	r3, #160	; 0xa0
 8005524:	05db      	lsls	r3, r3, #23
 8005526:	0011      	movs	r1, r2
 8005528:	0018      	movs	r0, r3
 800552a:	f002 fa8f 	bl	8007a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	46bd      	mov	sp, r7
 8005532:	b009      	add	sp, #36	; 0x24
 8005534:	bd90      	pop	{r4, r7, pc}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	40013000 	.word	0x40013000
 800553c:	40021000 	.word	0x40021000

08005540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005540:	b590      	push	{r4, r7, lr}
 8005542:	b089      	sub	sp, #36	; 0x24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005548:	240c      	movs	r4, #12
 800554a:	193b      	adds	r3, r7, r4
 800554c:	0018      	movs	r0, r3
 800554e:	2314      	movs	r3, #20
 8005550:	001a      	movs	r2, r3
 8005552:	2100      	movs	r1, #0
 8005554:	f005 fd97 	bl	800b086 <memset>
  if(huart->Instance==USART1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2d      	ldr	r2, [pc, #180]	; (8005614 <HAL_UART_MspInit+0xd4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d153      	bne.n	800560a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005562:	4b2d      	ldr	r3, [pc, #180]	; (8005618 <HAL_UART_MspInit+0xd8>)
 8005564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005566:	4b2c      	ldr	r3, [pc, #176]	; (8005618 <HAL_UART_MspInit+0xd8>)
 8005568:	2180      	movs	r1, #128	; 0x80
 800556a:	01c9      	lsls	r1, r1, #7
 800556c:	430a      	orrs	r2, r1
 800556e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005570:	4b29      	ldr	r3, [pc, #164]	; (8005618 <HAL_UART_MspInit+0xd8>)
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	4b28      	ldr	r3, [pc, #160]	; (8005618 <HAL_UART_MspInit+0xd8>)
 8005576:	2101      	movs	r1, #1
 8005578:	430a      	orrs	r2, r1
 800557a:	62da      	str	r2, [r3, #44]	; 0x2c
 800557c:	4b26      	ldr	r3, [pc, #152]	; (8005618 <HAL_UART_MspInit+0xd8>)
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	2201      	movs	r2, #1
 8005582:	4013      	ands	r3, r2
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005588:	193b      	adds	r3, r7, r4
 800558a:	22c0      	movs	r2, #192	; 0xc0
 800558c:	00d2      	lsls	r2, r2, #3
 800558e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005590:	0021      	movs	r1, r4
 8005592:	187b      	adds	r3, r7, r1
 8005594:	2202      	movs	r2, #2
 8005596:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005598:	187b      	adds	r3, r7, r1
 800559a:	2200      	movs	r2, #0
 800559c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800559e:	187b      	adds	r3, r7, r1
 80055a0:	2203      	movs	r2, #3
 80055a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80055a4:	187b      	adds	r3, r7, r1
 80055a6:	2204      	movs	r2, #4
 80055a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055aa:	187a      	adds	r2, r7, r1
 80055ac:	23a0      	movs	r3, #160	; 0xa0
 80055ae:	05db      	lsls	r3, r3, #23
 80055b0:	0011      	movs	r1, r2
 80055b2:	0018      	movs	r0, r3
 80055b4:	f002 fa4a 	bl	8007a4c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80055b8:	4b18      	ldr	r3, [pc, #96]	; (800561c <HAL_UART_MspInit+0xdc>)
 80055ba:	4a19      	ldr	r2, [pc, #100]	; (8005620 <HAL_UART_MspInit+0xe0>)
 80055bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 80055be:	4b17      	ldr	r3, [pc, #92]	; (800561c <HAL_UART_MspInit+0xdc>)
 80055c0:	2203      	movs	r2, #3
 80055c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055c4:	4b15      	ldr	r3, [pc, #84]	; (800561c <HAL_UART_MspInit+0xdc>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055ca:	4b14      	ldr	r3, [pc, #80]	; (800561c <HAL_UART_MspInit+0xdc>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055d0:	4b12      	ldr	r3, [pc, #72]	; (800561c <HAL_UART_MspInit+0xdc>)
 80055d2:	2280      	movs	r2, #128	; 0x80
 80055d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055d6:	4b11      	ldr	r3, [pc, #68]	; (800561c <HAL_UART_MspInit+0xdc>)
 80055d8:	2200      	movs	r2, #0
 80055da:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055dc:	4b0f      	ldr	r3, [pc, #60]	; (800561c <HAL_UART_MspInit+0xdc>)
 80055de:	2200      	movs	r2, #0
 80055e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80055e2:	4b0e      	ldr	r3, [pc, #56]	; (800561c <HAL_UART_MspInit+0xdc>)
 80055e4:	2220      	movs	r2, #32
 80055e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80055e8:	4b0c      	ldr	r3, [pc, #48]	; (800561c <HAL_UART_MspInit+0xdc>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <HAL_UART_MspInit+0xdc>)
 80055f0:	0018      	movs	r0, r3
 80055f2:	f001 fe85 	bl	8007300 <HAL_DMA_Init>
 80055f6:	1e03      	subs	r3, r0, #0
 80055f8:	d001      	beq.n	80055fe <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 80055fa:	f7ff fe91 	bl	8005320 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a06      	ldr	r2, [pc, #24]	; (800561c <HAL_UART_MspInit+0xdc>)
 8005602:	671a      	str	r2, [r3, #112]	; 0x70
 8005604:	4b05      	ldr	r3, [pc, #20]	; (800561c <HAL_UART_MspInit+0xdc>)
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	46bd      	mov	sp, r7
 800560e:	b009      	add	sp, #36	; 0x24
 8005610:	bd90      	pop	{r4, r7, pc}
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	40013800 	.word	0x40013800
 8005618:	40021000 	.word	0x40021000
 800561c:	20000430 	.word	0x20000430
 8005620:	40020030 	.word	0x40020030

08005624 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a06      	ldr	r2, [pc, #24]	; (800564c <HAL_WWDG_MspInit+0x28>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d106      	bne.n	8005644 <HAL_WWDG_MspInit+0x20>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8005636:	4b06      	ldr	r3, [pc, #24]	; (8005650 <HAL_WWDG_MspInit+0x2c>)
 8005638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800563a:	4b05      	ldr	r3, [pc, #20]	; (8005650 <HAL_WWDG_MspInit+0x2c>)
 800563c:	2180      	movs	r1, #128	; 0x80
 800563e:	0109      	lsls	r1, r1, #4
 8005640:	430a      	orrs	r2, r1
 8005642:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8005644:	46c0      	nop			; (mov r8, r8)
 8005646:	46bd      	mov	sp, r7
 8005648:	b002      	add	sp, #8
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40002c00 	.word	0x40002c00
 8005650:	40021000 	.word	0x40021000

08005654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
debugLog("### Non maskable interrupt!");
 8005658:	4b02      	ldr	r3, [pc, #8]	; (8005664 <NMI_Handler+0x10>)
 800565a:	0018      	movs	r0, r3
 800565c:	f7fe f89c 	bl	8003798 <debugLog>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005660:	e7fe      	b.n	8005660 <NMI_Handler+0xc>
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	0800e714 	.word	0x0800e714

08005668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
debugLog("### HARD FAULT");
 800566c:	4b02      	ldr	r3, [pc, #8]	; (8005678 <HardFault_Handler+0x10>)
 800566e:	0018      	movs	r0, r3
 8005670:	f7fe f892 	bl	8003798 <debugLog>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005674:	e7fe      	b.n	8005674 <HardFault_Handler+0xc>
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	0800e730 	.word	0x0800e730

0800567c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005680:	46c0      	nop			; (mov r8, r8)
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005694:	f001 f8ee 	bl	8006874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005698:	46c0      	nop			; (mov r8, r8)
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80056a4:	4b03      	ldr	r3, [pc, #12]	; (80056b4 <RTC_IRQHandler+0x14>)
 80056a6:	0018      	movs	r0, r3
 80056a8:	f003 ff62 	bl	8009570 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80056ac:	46c0      	nop			; (mov r8, r8)
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	20000330 	.word	0x20000330

080056b8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D1_Pin);
 80056bc:	2001      	movs	r0, #1
 80056be:	f002 fb75 	bl	8007dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(extPower_Pin);
 80056cc:	2380      	movs	r3, #128	; 0x80
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	0018      	movs	r0, r3
 80056d2:	f002 fb6b 	bl	8007dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80056e0:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <DMA1_Channel1_IRQHandler+0x14>)
 80056e2:	0018      	movs	r0, r3
 80056e4:	f001 ff2a 	bl	800753c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80056e8:	46c0      	nop			; (mov r8, r8)
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	200002b8 	.word	0x200002b8

080056f4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80056f8:	4b03      	ldr	r3, [pc, #12]	; (8005708 <DMA1_Channel2_3_IRQHandler+0x14>)
 80056fa:	0018      	movs	r0, r3
 80056fc:	f001 ff1e 	bl	800753c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005700:	46c0      	nop			; (mov r8, r8)
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	46c0      	nop			; (mov r8, r8)
 8005708:	20000430 	.word	0x20000430

0800570c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8005710:	4b03      	ldr	r3, [pc, #12]	; (8005720 <LPTIM1_IRQHandler+0x14>)
 8005712:	0018      	movs	r0, r3
 8005714:	f002 fc68 	bl	8007fe8 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8005718:	46c0      	nop			; (mov r8, r8)
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	20000300 	.word	0x20000300

08005724 <SX127X_SetNSS>:
 * based on code of Wojciech Domski <Wojciech.Domski@gmail.com>
 */
#include "main.h"

#ifndef USE_LL
__weak void SX127X_SetNSS(SX127X_t *module, GPIO_PinState state) {
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	000a      	movs	r2, r1
 800572e:	1cfb      	adds	r3, r7, #3
 8005730:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(module->nss.port, module->nss.pin, state);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800573a:	b299      	uxth	r1, r3
 800573c:	1cfb      	adds	r3, r7, #3
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	001a      	movs	r2, r3
 8005742:	f002 fb16 	bl	8007d72 <HAL_GPIO_WritePin>
}
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	46bd      	mov	sp, r7
 800574a:	b002      	add	sp, #8
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <SX127X_Reset>:

__weak void SX127X_Reset(SX127X_t *module) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	SX127X_SetNSS(module, 1);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2101      	movs	r1, #1
 800575c:	0018      	movs	r0, r3
 800575e:	f7ff ffe1 	bl	8005724 <SX127X_SetNSS>
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_RESET);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800576a:	b29b      	uxth	r3, r3
 800576c:	2200      	movs	r2, #0
 800576e:	0019      	movs	r1, r3
 8005770:	f002 faff 	bl	8007d72 <HAL_GPIO_WritePin>

	SX127X_delayMicro(1000);
 8005774:	23fa      	movs	r3, #250	; 0xfa
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	0018      	movs	r0, r3
 800577a:	f000 fcc1 	bl	8006100 <SX127X_delayMicro>

	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005786:	b29b      	uxth	r3, r3
 8005788:	2201      	movs	r2, #1
 800578a:	0019      	movs	r1, r3
 800578c:	f002 faf1 	bl	8007d72 <HAL_GPIO_WritePin>

	SX127X_delayMicro(6000);
 8005790:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <SX127X_Reset+0x50>)
 8005792:	0018      	movs	r0, r3
 8005794:	f000 fcb4 	bl	8006100 <SX127X_delayMicro>
}
 8005798:	46c0      	nop			; (mov r8, r8)
 800579a:	46bd      	mov	sp, r7
 800579c:	b002      	add	sp, #8
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	00001770 	.word	0x00001770

080057a4 <SX127X_SPICommand>:

__weak void SX127X_SPICommand(SX127X_t *module, uint8_t cmd) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	000a      	movs	r2, r1
 80057ae:	1cfb      	adds	r3, r7, #3
 80057b0:	701a      	strb	r2, [r3, #0]
	SX127X_SetNSS(module, 0);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2100      	movs	r1, #0
 80057b6:	0018      	movs	r0, r3
 80057b8:	f7ff ffb4 	bl	8005724 <SX127X_SetNSS>
	HAL_SPI_Transmit(module->spi, &cmd, 1, 1000);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80057c0:	23fa      	movs	r3, #250	; 0xfa
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	1cf9      	adds	r1, r7, #3
 80057c6:	2201      	movs	r2, #1
 80057c8:	f003 ff90 	bl	80096ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->spi) != HAL_SPI_STATE_READY)
 80057cc:	46c0      	nop			; (mov r8, r8)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d2:	0018      	movs	r0, r3
 80057d4:	f004 fa9b 	bl	8009d0e <HAL_SPI_GetState>
 80057d8:	0003      	movs	r3, r0
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d1f7      	bne.n	80057ce <SX127X_SPICommand+0x2a>
		;
}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	46c0      	nop			; (mov r8, r8)
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b002      	add	sp, #8
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <SX127X_SPIReadByte>:

__weak uint8_t SX127X_SPIReadByte(SX127X_t *module) {
 80057e8:	b5b0      	push	{r4, r5, r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80057f0:	250f      	movs	r5, #15
 80057f2:	197b      	adds	r3, r7, r5
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]
	uint8_t rxByte = 0x00;
 80057f8:	240e      	movs	r4, #14
 80057fa:	193b      	adds	r3, r7, r4
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]

	SX127X_SetNSS(module, 0);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2100      	movs	r1, #0
 8005804:	0018      	movs	r0, r3
 8005806:	f7ff ff8d 	bl	8005724 <SX127X_SetNSS>
	HAL_SPI_TransmitReceive(module->spi, &txByte, &rxByte, 1, 1000);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800580e:	193a      	adds	r2, r7, r4
 8005810:	1979      	adds	r1, r7, r5
 8005812:	23fa      	movs	r3, #250	; 0xfa
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	2301      	movs	r3, #1
 800581a:	f004 f8bd 	bl	8009998 <HAL_SPI_TransmitReceive>
	return rxByte;
 800581e:	193b      	adds	r3, r7, r4
 8005820:	781b      	ldrb	r3, [r3, #0]
}
 8005822:	0018      	movs	r0, r3
 8005824:	46bd      	mov	sp, r7
 8005826:	b004      	add	sp, #16
 8005828:	bdb0      	pop	{r4, r5, r7, pc}

0800582a <SX127X_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX127X_SPIRead(SX127X_t *module, uint8_t addr) {
 800582a:	b5b0      	push	{r4, r5, r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	000a      	movs	r2, r1
 8005834:	1cfb      	adds	r3, r7, #3
 8005836:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	SX127X_SPICommand(module, addr);
 8005838:	1cfb      	adds	r3, r7, #3
 800583a:	781a      	ldrb	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	0011      	movs	r1, r2
 8005840:	0018      	movs	r0, r3
 8005842:	f7ff ffaf 	bl	80057a4 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 8005846:	250f      	movs	r5, #15
 8005848:	197c      	adds	r4, r7, r5
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	0018      	movs	r0, r3
 800584e:	f7ff ffcb 	bl	80057e8 <SX127X_SPIReadByte>
 8005852:	0003      	movs	r3, r0
 8005854:	7023      	strb	r3, [r4, #0]
	SX127X_SetNSS(module, 1);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2101      	movs	r1, #1
 800585a:	0018      	movs	r0, r3
 800585c:	f7ff ff62 	bl	8005724 <SX127X_SetNSS>
	return tmp;
 8005860:	197b      	adds	r3, r7, r5
 8005862:	781b      	ldrb	r3, [r3, #0]
}
 8005864:	0018      	movs	r0, r3
 8005866:	46bd      	mov	sp, r7
 8005868:	b004      	add	sp, #16
 800586a:	bdb0      	pop	{r4, r5, r7, pc}

0800586c <SX127X_SPIWrite>:

void SX127X_SPIWrite(SX127X_t *module, uint8_t addr, uint8_t cmd) {
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	0008      	movs	r0, r1
 8005876:	0011      	movs	r1, r2
 8005878:	1cfb      	adds	r3, r7, #3
 800587a:	1c02      	adds	r2, r0, #0
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	1cbb      	adds	r3, r7, #2
 8005880:	1c0a      	adds	r2, r1, #0
 8005882:	701a      	strb	r2, [r3, #0]
	SX127X_SetNSS(module, 0);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2100      	movs	r1, #0
 8005888:	0018      	movs	r0, r3
 800588a:	f7ff ff4b 	bl	8005724 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 800588e:	1cfb      	adds	r3, r7, #3
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2280      	movs	r2, #128	; 0x80
 8005894:	4252      	negs	r2, r2
 8005896:	4313      	orrs	r3, r2
 8005898:	b2da      	uxtb	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	0011      	movs	r1, r2
 800589e:	0018      	movs	r0, r3
 80058a0:	f7ff ff80 	bl	80057a4 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 80058a4:	1cbb      	adds	r3, r7, #2
 80058a6:	781a      	ldrb	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	0011      	movs	r1, r2
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7ff ff79 	bl	80057a4 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2101      	movs	r1, #1
 80058b6:	0018      	movs	r0, r3
 80058b8:	f7ff ff34 	bl	8005724 <SX127X_SetNSS>
}
 80058bc:	46c0      	nop			; (mov r8, r8)
 80058be:	46bd      	mov	sp, r7
 80058c0:	b002      	add	sp, #8
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <SX127X_SPIBurstRead>:

void SX127X_SPIBurstRead(SX127X_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80058c4:	b5b0      	push	{r4, r5, r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	0008      	movs	r0, r1
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	0019      	movs	r1, r3
 80058d2:	240b      	movs	r4, #11
 80058d4:	193b      	adds	r3, r7, r4
 80058d6:	1c02      	adds	r2, r0, #0
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	200a      	movs	r0, #10
 80058dc:	183b      	adds	r3, r7, r0
 80058de:	1c0a      	adds	r2, r1, #0
 80058e0:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	if (length <= 1)
 80058e2:	183b      	adds	r3, r7, r0
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d92e      	bls.n	8005948 <SX127X_SPIBurstRead+0x84>
		return;
	else {
		SX127X_SetNSS(module, 0);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2100      	movs	r1, #0
 80058ee:	0018      	movs	r0, r3
 80058f0:	f7ff ff18 	bl	8005724 <SX127X_SetNSS>
		SX127X_SPICommand(module, addr);
 80058f4:	193b      	adds	r3, r7, r4
 80058f6:	781a      	ldrb	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	0011      	movs	r1, r2
 80058fc:	0018      	movs	r0, r3
 80058fe:	f7ff ff51 	bl	80057a4 <SX127X_SPICommand>
		for (i = 0; i < length; i++) {
 8005902:	2317      	movs	r3, #23
 8005904:	18fb      	adds	r3, r7, r3
 8005906:	2200      	movs	r2, #0
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	e00f      	b.n	800592c <SX127X_SPIBurstRead+0x68>
			*(rxBuf + i) = SX127X_SPIReadByte(module);
 800590c:	2517      	movs	r5, #23
 800590e:	197b      	adds	r3, r7, r5
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	18d4      	adds	r4, r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	0018      	movs	r0, r3
 800591a:	f7ff ff65 	bl	80057e8 <SX127X_SPIReadByte>
 800591e:	0003      	movs	r3, r0
 8005920:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8005922:	197b      	adds	r3, r7, r5
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	197b      	adds	r3, r7, r5
 8005928:	3201      	adds	r2, #1
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	2317      	movs	r3, #23
 800592e:	18fa      	adds	r2, r7, r3
 8005930:	230a      	movs	r3, #10
 8005932:	18fb      	adds	r3, r7, r3
 8005934:	7812      	ldrb	r2, [r2, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d3e7      	bcc.n	800590c <SX127X_SPIBurstRead+0x48>
		}
		SX127X_SetNSS(module, 1);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2101      	movs	r1, #1
 8005940:	0018      	movs	r0, r3
 8005942:	f7ff feef 	bl	8005724 <SX127X_SetNSS>
 8005946:	e000      	b.n	800594a <SX127X_SPIBurstRead+0x86>
		return;
 8005948:	46c0      	nop			; (mov r8, r8)
	}
}
 800594a:	46bd      	mov	sp, r7
 800594c:	b006      	add	sp, #24
 800594e:	bdb0      	pop	{r4, r5, r7, pc}

08005950 <SX127X_SPIBurstWrite>:

void SX127X_SPIBurstWrite(SX127X_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8005950:	b590      	push	{r4, r7, lr}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	0008      	movs	r0, r1
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	0019      	movs	r1, r3
 800595e:	240b      	movs	r4, #11
 8005960:	193b      	adds	r3, r7, r4
 8005962:	1c02      	adds	r2, r0, #0
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	200a      	movs	r0, #10
 8005968:	183b      	adds	r3, r7, r0
 800596a:	1c0a      	adds	r2, r1, #0
 800596c:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	if (length <= 1)
 800596e:	183b      	adds	r3, r7, r0
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d932      	bls.n	80059dc <SX127X_SPIBurstWrite+0x8c>
		return;
	else {
		SX127X_SetNSS(module, 0);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2100      	movs	r1, #0
 800597a:	0018      	movs	r0, r3
 800597c:	f7ff fed2 	bl	8005724 <SX127X_SetNSS>
		SX127X_SPICommand(module, addr | 0x80);
 8005980:	193b      	adds	r3, r7, r4
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2280      	movs	r2, #128	; 0x80
 8005986:	4252      	negs	r2, r2
 8005988:	4313      	orrs	r3, r2
 800598a:	b2da      	uxtb	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	0011      	movs	r1, r2
 8005990:	0018      	movs	r0, r3
 8005992:	f7ff ff07 	bl	80057a4 <SX127X_SPICommand>
		for (i = 0; i < length; i++) {
 8005996:	2317      	movs	r3, #23
 8005998:	18fb      	adds	r3, r7, r3
 800599a:	2200      	movs	r2, #0
 800599c:	701a      	strb	r2, [r3, #0]
 800599e:	e00f      	b.n	80059c0 <SX127X_SPIBurstWrite+0x70>
			SX127X_SPICommand(module, *(txBuf + i));
 80059a0:	2417      	movs	r4, #23
 80059a2:	193b      	adds	r3, r7, r4
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	18d3      	adds	r3, r2, r3
 80059aa:	781a      	ldrb	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	0011      	movs	r1, r2
 80059b0:	0018      	movs	r0, r3
 80059b2:	f7ff fef7 	bl	80057a4 <SX127X_SPICommand>
		for (i = 0; i < length; i++) {
 80059b6:	193b      	adds	r3, r7, r4
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	193b      	adds	r3, r7, r4
 80059bc:	3201      	adds	r2, #1
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	2317      	movs	r3, #23
 80059c2:	18fa      	adds	r2, r7, r3
 80059c4:	230a      	movs	r3, #10
 80059c6:	18fb      	adds	r3, r7, r3
 80059c8:	7812      	ldrb	r2, [r2, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d3e7      	bcc.n	80059a0 <SX127X_SPIBurstWrite+0x50>
		}
		SX127X_SetNSS(module, 1);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2101      	movs	r1, #1
 80059d4:	0018      	movs	r0, r3
 80059d6:	f7ff fea5 	bl	8005724 <SX127X_SetNSS>
 80059da:	e000      	b.n	80059de <SX127X_SPIBurstWrite+0x8e>
		return;
 80059dc:	46c0      	nop			; (mov r8, r8)
	}
}
 80059de:	46bd      	mov	sp, r7
 80059e0:	b007      	add	sp, #28
 80059e2:	bd90      	pop	{r4, r7, pc}

080059e4 <SX127X_config>:

void SX127X_config(SX127X_t *module) {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	SX127X_sleep(module); //Change modem mode Must in Sleep mode
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	0018      	movs	r0, r3
 80059f0:	f000 f94c 	bl	8005c8c <SX127X_sleep>

	SX127X_SPIWrite(module, LR_RegFrMsb, (module->frequency >> 16) & 0xFF);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	0c1b      	lsrs	r3, r3, #16
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2106      	movs	r1, #6
 8005a00:	0018      	movs	r0, r3
 8005a02:	f7ff ff33 	bl	800586c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegFrMid, (module->frequency >> 8) & 0xFF);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2107      	movs	r1, #7
 8005a12:	0018      	movs	r0, r3
 8005a14:	f7ff ff2a 	bl	800586c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegFrLsb, (module->frequency) & 0xFF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2108      	movs	r1, #8
 8005a22:	0018      	movs	r0, r3
 8005a24:	f7ff ff22 	bl	800586c <SX127X_SPIWrite>

	//setting base parameter
	SX127X_SPIWrite(module, LR_RegPaConfig, 0xF0 | (module->power - 5)); //Setting output power parameter
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	791b      	ldrb	r3, [r3, #4]
 8005a2c:	3b05      	subs	r3, #5
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	b25b      	sxtb	r3, r3
 8005a32:	2210      	movs	r2, #16
 8005a34:	4252      	negs	r2, r2
 8005a36:	4313      	orrs	r3, r2
 8005a38:	b25b      	sxtb	r3, r3
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2109      	movs	r1, #9
 8005a40:	0018      	movs	r0, r3
 8005a42:	f7ff ff13 	bl	800586c <SX127X_SPIWrite>

	SX127X_SPIWrite(module, LR_RegOcp, 0x32);	//OCP to 150 mA
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2232      	movs	r2, #50	; 0x32
 8005a4a:	210b      	movs	r1, #11
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f7ff ff0d 	bl	800586c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegLna, 0x23);	//LNA to full gain
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2223      	movs	r2, #35	; 0x23
 8005a56:	210c      	movs	r1, #12
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f7ff ff07 	bl	800586c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	799b      	ldrb	r3, [r3, #6]
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	b2da      	uxtb	r2, r3
			(module->cr << 1)) +         //Coding rate
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	79db      	ldrb	r3, [r3, #7]
 8005a6a:	18db      	adds	r3, r3, r3
 8005a6c:	b2db      	uxtb	r3, r3
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8005a6e:	18d3      	adds	r3, r2, r3
 8005a70:	b2da      	uxtb	r2, r3
			(module->implicitHeader & 1)); //Implicit header flag
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	7a9b      	ldrb	r3, [r3, #10]
 8005a76:	2101      	movs	r1, #1
 8005a78:	400b      	ands	r3, r1
 8005a7a:	b2db      	uxtb	r3, r3
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8005a7c:	18d3      	adds	r3, r2, r3
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	211d      	movs	r1, #29
 8005a84:	0018      	movs	r0, r3
 8005a86:	f7ff fef1 	bl	800586c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	795b      	ldrb	r3, [r3, #5]
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	b2da      	uxtb	r2, r3
			(module->crcEnable << 2) +     //CRC enable flag
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	7a5b      	ldrb	r3, [r3, #9]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	b2db      	uxtb	r3, r3
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 8005a9a:	18d3      	adds	r3, r2, r3
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	3303      	adds	r3, #3
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	211e      	movs	r1, #30
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f7ff fee0 	bl	800586c <SX127X_SPIWrite>
			0x3));                       //RX Time-Out MSB (always max)

	SX127X_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RX symb Timeout = 0x3FF(Max)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	22ff      	movs	r2, #255	; 0xff
 8005ab0:	211f      	movs	r1, #31
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f7ff feda 	bl	800586c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPreambleMsb, (module->preamble >> 8) & 0xFF); //RegPreambleMsb
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	899b      	ldrh	r3, [r3, #12]
 8005abc:	0a1b      	lsrs	r3, r3, #8
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2120      	movs	r1, #32
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f7ff fed0 	bl	800586c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPreambleLsb, module->preamble & 0xFF); //RegPreambleLsb
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	899b      	ldrh	r3, [r3, #12]
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2121      	movs	r1, #33	; 0x21
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f7ff fec8 	bl	800586c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //Payload lenght
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	7a1a      	ldrb	r2, [r3, #8]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2122      	movs	r1, #34	; 0x22
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7ff fec1 	bl	800586c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegSyncWord, module->syncWord);  //Sync word
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	7b9a      	ldrb	r2, [r3, #14]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2139      	movs	r1, #57	; 0x39
 8005af2:	0018      	movs	r0, r3
 8005af4:	f7ff feba 	bl	800586c <SX127X_SPIWrite>
	module->readBytes = 0;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	225d      	movs	r2, #93	; 0x5d
 8005afc:	2100      	movs	r1, #0
 8005afe:	5499      	strb	r1, [r3, r2]

	/*** Sensitivity correction for 500kHz BW (see Errata) ***/
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2142      	movs	r1, #66	; 0x42
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7ff fe90 	bl	800582a <SX127X_SPIRead>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	0019      	movs	r1, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2278      	movs	r2, #120	; 0x78
 8005b12:	5499      	strb	r1, [r3, r2]
	if (module->bw == SX127X_LORA_BW_500KHZ && module->revision == 0x12) {
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	799b      	ldrb	r3, [r3, #6]
 8005b18:	2b09      	cmp	r3, #9
 8005b1a:	d130      	bne.n	8005b7e <SX127X_config+0x19a>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2278      	movs	r2, #120	; 0x78
 8005b20:	5c9b      	ldrb	r3, [r3, r2]
 8005b22:	2b12      	cmp	r3, #18
 8005b24:	d12b      	bne.n	8005b7e <SX127X_config+0x19a>
		if (module->frequency > SX127X_FREQ_820MHZ
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a19      	ldr	r2, [pc, #100]	; (8005b90 <SX127X_config+0x1ac>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d910      	bls.n	8005b52 <SX127X_config+0x16e>
				&& module->frequency < SX127X_FREQ_1020MHZ) {
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a17      	ldr	r2, [pc, #92]	; (8005b94 <SX127X_config+0x1b0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d80b      	bhi.n	8005b52 <SX127X_config+0x16e>
			SX127X_SPIWrite(module, 0x36, 0x2);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	2136      	movs	r1, #54	; 0x36
 8005b40:	0018      	movs	r0, r3
 8005b42:	f7ff fe93 	bl	800586c <SX127X_SPIWrite>
			SX127X_SPIWrite(module, 0x3A, 0x64);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2264      	movs	r2, #100	; 0x64
 8005b4a:	213a      	movs	r1, #58	; 0x3a
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	f7ff fe8d 	bl	800586c <SX127X_SPIWrite>

		}
		if (module->frequency > SX127X_FREQ_410MHZ
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a10      	ldr	r2, [pc, #64]	; (8005b98 <SX127X_config+0x1b4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d910      	bls.n	8005b7e <SX127X_config+0x19a>
				&& module->frequency < SX127X_FREQ_525MHZ) {
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a0e      	ldr	r2, [pc, #56]	; (8005b9c <SX127X_config+0x1b8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d80b      	bhi.n	8005b7e <SX127X_config+0x19a>
			SX127X_SPIWrite(module, 0x36, 0x3);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2203      	movs	r2, #3
 8005b6a:	2136      	movs	r1, #54	; 0x36
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f7ff fe7d 	bl	800586c <SX127X_SPIWrite>
			SX127X_SPIWrite(module, 0x3A, 0x7F);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	227f      	movs	r2, #127	; 0x7f
 8005b76:	213a      	movs	r1, #58	; 0x3a
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f7ff fe77 	bl	800586c <SX127X_SPIWrite>

		}

	}
	SX127X_standby(module); //Entry standby mode
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	0018      	movs	r0, r3
 8005b82:	f000 f863 	bl	8005c4c <SX127X_standby>
}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	b002      	add	sp, #8
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	00cd0022 	.word	0x00cd0022
 8005b94:	00ff0029 	.word	0x00ff0029
 8005b98:	00668011 	.word	0x00668011
 8005b9c:	00834015 	.word	0x00834015

08005ba0 <SX127X_defaultConfig>:

void SX127X_defaultConfig(SX127X_t *module) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
	module->bw = SX127X_LORA_BW_125KHZ;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2207      	movs	r2, #7
 8005bac:	719a      	strb	r2, [r3, #6]
	module->cr = SX127X_CR_4_8;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2204      	movs	r2, #4
 8005bb2:	71da      	strb	r2, [r3, #7]
	module->crcEnable = 1;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	725a      	strb	r2, [r3, #9]
	module->frequency = SX127X_FREQ_DEFAULT;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a0d      	ldr	r2, [pc, #52]	; (8005bf4 <SX127X_defaultConfig+0x54>)
 8005bbe:	601a      	str	r2, [r3, #0]
	module->implicitHeader = 1;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	729a      	strb	r2, [r3, #10]
	module->len = 3;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2203      	movs	r2, #3
 8005bca:	721a      	strb	r2, [r3, #8]
	module->power = SX127X_POWER_20DBM;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2214      	movs	r2, #20
 8005bd0:	711a      	strb	r2, [r3, #4]
	module->preamble = 5;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2205      	movs	r2, #5
 8005bd6:	819a      	strh	r2, [r3, #12]
	module->sf = SX127X_LORA_SF_12;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	220c      	movs	r2, #12
 8005bdc:	715a      	strb	r2, [r3, #5]
	module->syncWord = 0x1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	739a      	strb	r2, [r3, #14]
	module->alwaysRX = 1;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	73da      	strb	r2, [r3, #15]
}
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	46bd      	mov	sp, r7
 8005bee:	b002      	add	sp, #8
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	00d94024 	.word	0x00d94024

08005bf8 <SX127X_PortConfig>:

void SX127X_PortConfig(SX127X_t *module, SX127X_dio_t reset, SX127X_dio_t nss,
		SPI_HandleTypeDef *hspi) {
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	b590      	push	{r4, r7, lr}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	1d38      	adds	r0, r7, #4
 8005c04:	6001      	str	r1, [r0, #0]
 8005c06:	6042      	str	r2, [r0, #4]
 8005c08:	2204      	movs	r2, #4
 8005c0a:	2118      	movs	r1, #24
 8005c0c:	1852      	adds	r2, r2, r1
 8005c0e:	2008      	movs	r0, #8
 8005c10:	4684      	mov	ip, r0
 8005c12:	44bc      	add	ip, r7
 8005c14:	4462      	add	r2, ip
 8005c16:	6013      	str	r3, [r2, #0]
	module->reset = reset;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	1d3a      	adds	r2, r7, #4
 8005c1c:	3364      	adds	r3, #100	; 0x64
 8005c1e:	ca11      	ldmia	r2!, {r0, r4}
 8005c20:	c311      	stmia	r3!, {r0, r4}
	module->nss = nss;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2204      	movs	r2, #4
 8005c26:	1852      	adds	r2, r2, r1
 8005c28:	2108      	movs	r1, #8
 8005c2a:	468c      	mov	ip, r1
 8005c2c:	44bc      	add	ip, r7
 8005c2e:	4462      	add	r2, ip
 8005c30:	336c      	adds	r3, #108	; 0x6c
 8005c32:	ca03      	ldmia	r2!, {r0, r1}
 8005c34:	c303      	stmia	r3!, {r0, r1}
	module->spi = hspi;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c3a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005c3c:	46c0      	nop			; (mov r8, r8)
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	b005      	add	sp, #20
 8005c42:	bc90      	pop	{r4, r7}
 8005c44:	bc08      	pop	{r3}
 8005c46:	b002      	add	sp, #8
 8005c48:	4718      	bx	r3
	...

08005c4c <SX127X_standby>:

void SX127X_standby(SX127X_t *module) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a0b      	ldr	r2, [pc, #44]	; (8005c88 <SX127X_standby+0x3c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d806      	bhi.n	8005c6c <SX127X_standby+0x20>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x89);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2289      	movs	r2, #137	; 0x89
 8005c62:	2101      	movs	r1, #1
 8005c64:	0018      	movs	r0, r3
 8005c66:	f7ff fe01 	bl	800586c <SX127X_SPIWrite>
 8005c6a:	e005      	b.n	8005c78 <SX127X_standby+0x2c>
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x81);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2281      	movs	r2, #129	; 0x81
 8005c70:	2101      	movs	r1, #1
 8005c72:	0018      	movs	r0, r3
 8005c74:	f7ff fdfa 	bl	800586c <SX127X_SPIWrite>
	module->status = STANDBY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	741a      	strb	r2, [r3, #16]
}
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b002      	add	sp, #8
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	00834015 	.word	0x00834015

08005c8c <SX127X_sleep>:

void SX127X_sleep(SX127X_t *module) {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a0b      	ldr	r2, [pc, #44]	; (8005cc8 <SX127X_sleep+0x3c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d806      	bhi.n	8005cac <SX127X_sleep+0x20>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x88);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2288      	movs	r2, #136	; 0x88
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f7ff fde1 	bl	800586c <SX127X_SPIWrite>
 8005caa:	e005      	b.n	8005cb8 <SX127X_sleep+0x2c>
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x80);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2280      	movs	r2, #128	; 0x80
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	f7ff fdda 	bl	800586c <SX127X_SPIWrite>
	module->status = SLEEP;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	741a      	strb	r2, [r3, #16]
}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	b002      	add	sp, #8
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	00834015 	.word	0x00834015

08005ccc <SX127X_clearIrq>:

void SX127X_clearIrq(SX127X_t *module) {
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
	SX127X_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	22ff      	movs	r2, #255	; 0xff
 8005cd8:	2112      	movs	r1, #18
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f7ff fdc6 	bl	800586c <SX127X_SPIWrite>
}
 8005ce0:	46c0      	nop			; (mov r8, r8)
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b002      	add	sp, #8
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <SX127X_startRx>:

int SX127X_startRx(SX127X_t *module, uint32_t timeout) {
 8005ce8:	b5b0      	push	{r4, r5, r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
	uint8_t addr;
	SX127X_config(module);		//Setting base parameter
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f7ff fe75 	bl	80059e4 <SX127X_config>
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2284      	movs	r2, #132	; 0x84
 8005cfe:	214d      	movs	r1, #77	; 0x4d
 8005d00:	0018      	movs	r0, r3
 8005d02:	f7ff fdb3 	bl	800586c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00);	//No FHSS
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2124      	movs	r1, #36	; 0x24
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f7ff fdad 	bl	800586c <SX127X_SPIWrite>
	SX127X_clearIrq(module);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	0018      	movs	r0, r3
 8005d16:	f7ff ffd9 	bl	8005ccc <SX127X_clearIrq>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	7a1a      	ldrb	r2, [r3, #8]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2122      	movs	r1, #34	; 0x22
 8005d22:	0018      	movs	r0, r3
 8005d24:	f7ff fda2 	bl	800586c <SX127X_SPIWrite>
	addr = SX127X_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8005d28:	250f      	movs	r5, #15
 8005d2a:	197c      	adds	r4, r7, r5
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	210f      	movs	r1, #15
 8005d30:	0018      	movs	r0, r3
 8005d32:	f7ff fd7a 	bl	800582a <SX127X_SPIRead>
 8005d36:	0003      	movs	r3, r0
 8005d38:	7023      	strb	r3, [r4, #0]
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8005d3a:	197b      	adds	r3, r7, r5
 8005d3c:	781a      	ldrb	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	210d      	movs	r1, #13
 8005d42:	0018      	movs	r0, r3
 8005d44:	f7ff fd92 	bl	800586c <SX127X_SPIWrite>
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1f      	ldr	r2, [pc, #124]	; (8005dcc <SX127X_startRx+0xe4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d806      	bhi.n	8005d60 <SX127X_startRx+0x78>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8d);	//Cont RX Mode & LF
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	228d      	movs	r2, #141	; 0x8d
 8005d56:	2101      	movs	r1, #1
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f7ff fd87 	bl	800586c <SX127X_SPIWrite>
 8005d5e:	e005      	b.n	8005d6c <SX127X_startRx+0x84>
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x85);	    //Cont RX Mode & HF
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2285      	movs	r2, #133	; 0x85
 8005d64:	2101      	movs	r1, #1
 8005d66:	0018      	movs	r0, r3
 8005d68:	f7ff fd80 	bl	800586c <SX127X_SPIWrite>
	module->readBytes = 0;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	225d      	movs	r2, #93	; 0x5d
 8005d70:	2100      	movs	r1, #0
 8005d72:	5499      	strb	r1, [r3, r2]

	while (1) {
		uint8_t status = SX127X_SPIRead(module, LR_RegModemStat);
 8005d74:	250e      	movs	r5, #14
 8005d76:	197c      	adds	r4, r7, r5
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2118      	movs	r1, #24
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f7ff fd54 	bl	800582a <SX127X_SPIRead>
 8005d82:	0003      	movs	r3, r0
 8005d84:	7023      	strb	r3, [r4, #0]
		if (status & 0x04) {	//Rx-on going RegModemStat
 8005d86:	197b      	adds	r3, r7, r5
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	d004      	beq.n	8005d9a <SX127X_startRx+0xb2>
			module->status = RX;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2204      	movs	r2, #4
 8005d94:	741a      	strb	r2, [r3, #16]
			return 1;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e013      	b.n	8005dc2 <SX127X_startRx+0xda>
		}

		if (--timeout == 0) {
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <SX127X_startRx+0xd2>
			SX127X_Reset(module);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	0018      	movs	r0, r3
 8005daa:	f7ff fcd1 	bl	8005750 <SX127X_Reset>
			SX127X_config(module);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	0018      	movs	r0, r3
 8005db2:	f7ff fe17 	bl	80059e4 <SX127X_config>
			return 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e003      	b.n	8005dc2 <SX127X_startRx+0xda>
		}

		HAL_Delay(1);
 8005dba:	2001      	movs	r0, #1
 8005dbc:	f7fe fa96 	bl	80042ec <HAL_Delay>
	while (1) {
 8005dc0:	e7d8      	b.n	8005d74 <SX127X_startRx+0x8c>
	}
}
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b004      	add	sp, #16
 8005dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	00834015 	.word	0x00834015

08005dd0 <SX127X_receive>:

uint8_t SX127X_receive(SX127X_t *module) {
 8005dd0:	b5b0      	push	{r4, r5, r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;
	memset(module->rxBuf, 0x00, SX127X_MAX_PACKET);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	331d      	adds	r3, #29
 8005ddc:	2220      	movs	r2, #32
 8005dde:	2100      	movs	r1, #0
 8005de0:	0018      	movs	r0, r3
 8005de2:	f005 f950 	bl	800b086 <memset>

	addr = SX127X_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8005de6:	250e      	movs	r5, #14
 8005de8:	197c      	adds	r4, r7, r5
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2110      	movs	r1, #16
 8005dee:	0018      	movs	r0, r3
 8005df0:	f7ff fd1b 	bl	800582a <SX127X_SPIRead>
 8005df4:	0003      	movs	r3, r0
 8005df6:	7023      	strb	r3, [r4, #0]
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8005df8:	197b      	adds	r3, r7, r5
 8005dfa:	781a      	ldrb	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	210d      	movs	r1, #13
 8005e00:	0018      	movs	r0, r3
 8005e02:	f7ff fd33 	bl	800586c <SX127X_SPIWrite>
	if (module->sf == SX127X_LORA_SF_6)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	795b      	ldrb	r3, [r3, #5]
 8005e0a:	2b06      	cmp	r3, #6
 8005e0c:	d105      	bne.n	8005e1a <SX127X_receive+0x4a>
		packet_size = module->len;
 8005e0e:	230f      	movs	r3, #15
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	7a12      	ldrb	r2, [r2, #8]
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	e008      	b.n	8005e2c <SX127X_receive+0x5c>
	else
		packet_size = SX127X_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8005e1a:	230f      	movs	r3, #15
 8005e1c:	18fc      	adds	r4, r7, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2113      	movs	r1, #19
 8005e22:	0018      	movs	r0, r3
 8005e24:	f7ff fd01 	bl	800582a <SX127X_SPIRead>
 8005e28:	0003      	movs	r3, r0
 8005e2a:	7023      	strb	r3, [r4, #0]
	SX127X_SPIBurstRead(module, 0x00, module->rxBuf, packet_size);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	331d      	adds	r3, #29
 8005e30:	001a      	movs	r2, r3
 8005e32:	240f      	movs	r4, #15
 8005e34:	193b      	adds	r3, r7, r4
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	f7ff fd42 	bl	80058c4 <SX127X_SPIBurstRead>
	module->readBytes = packet_size;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	193a      	adds	r2, r7, r4
 8005e44:	215d      	movs	r1, #93	; 0x5d
 8005e46:	7812      	ldrb	r2, [r2, #0]
 8005e48:	545a      	strb	r2, [r3, r1]
	return module->readBytes;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	225d      	movs	r2, #93	; 0x5d
 8005e4e:	5c9b      	ldrb	r3, [r3, r2]
}
 8005e50:	0018      	movs	r0, r3
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b004      	add	sp, #16
 8005e56:	bdb0      	pop	{r4, r5, r7, pc}

08005e58 <SX127X_startTransmission>:

void SX127X_startTransmission(SX127X_t *module) {
 8005e58:	b5b0      	push	{r4, r5, r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	SX127X_config(module); //setting base parameter
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	0018      	movs	r0, r3
 8005e64:	f7ff fdbe 	bl	80059e4 <SX127X_config>
	module->status = TX;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	741a      	strb	r2, [r3, #16]
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2287      	movs	r2, #135	; 0x87
 8005e72:	214d      	movs	r1, #77	; 0x4d
 8005e74:	0018      	movs	r0, r3
 8005e76:	f7ff fcf9 	bl	800586c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2124      	movs	r1, #36	; 0x24
 8005e80:	0018      	movs	r0, r3
 8005e82:	f7ff fcf3 	bl	800586c <SX127X_SPIWrite>
	SX127X_clearIrq(module);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f7ff ff1f 	bl	8005ccc <SX127X_clearIrq>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //RegPayloadLength 21byte
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	7a1a      	ldrb	r2, [r3, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2122      	movs	r1, #34	; 0x22
 8005e96:	0018      	movs	r0, r3
 8005e98:	f7ff fce8 	bl	800586c <SX127X_SPIWrite>
	addr = SX127X_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8005e9c:	250f      	movs	r5, #15
 8005e9e:	197c      	adds	r4, r7, r5
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	210e      	movs	r1, #14
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f7ff fcc0 	bl	800582a <SX127X_SPIRead>
 8005eaa:	0003      	movs	r3, r0
 8005eac:	7023      	strb	r3, [r4, #0]
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8005eae:	197b      	adds	r3, r7, r5
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	210d      	movs	r1, #13
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	f7ff fcd8 	bl	800586c <SX127X_SPIWrite>
	SX127X_SPIBurstWrite(module, 0x00, module->txBuf, module->len);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	333d      	adds	r3, #61	; 0x3d
 8005ec0:	001a      	movs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	7a1b      	ldrb	r3, [r3, #8]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	2100      	movs	r1, #0
 8005eca:	f7ff fd41 	bl	8005950 <SX127X_SPIBurstWrite>
	module->lastTransTick = HAL_GetTick();
 8005ece:	f000 fce3 	bl	8006898 <HAL_GetTick>
 8005ed2:	0002      	movs	r2, r0
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	615a      	str	r2, [r3, #20]
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a0b      	ldr	r2, [pc, #44]	; (8005f0c <SX127X_startTransmission+0xb4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d806      	bhi.n	8005ef0 <SX127X_startTransmission+0x98>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode LF
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	228b      	movs	r2, #139	; 0x8b
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f7ff fcbf 	bl	800586c <SX127X_SPIWrite>
 8005eee:	e005      	b.n	8005efc <SX127X_startTransmission+0xa4>
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x83);	//Tx Mode HF
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2283      	movs	r2, #131	; 0x83
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f7ff fcb8 	bl	800586c <SX127X_SPIWrite>
	module->TXrequest = 0;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	745a      	strb	r2, [r3, #17]

}
 8005f02:	46c0      	nop			; (mov r8, r8)
 8005f04:	46bd      	mov	sp, r7
 8005f06:	b004      	add	sp, #16
 8005f08:	bdb0      	pop	{r4, r5, r7, pc}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	00834015 	.word	0x00834015

08005f10 <SX127X_transmitAsync>:

HAL_StatusTypeDef SX127X_transmitAsync(SX127X_t *module, uint8_t lenght) {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	000a      	movs	r2, r1
 8005f1a:	1cfb      	adds	r3, r7, #3
 8005f1c:	701a      	strb	r2, [r3, #0]
	if (module->TXrequest == 0 && module->status != TX) {
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	7c5b      	ldrb	r3, [r3, #17]
 8005f22:	2201      	movs	r2, #1
 8005f24:	4053      	eors	r3, r2
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00c      	beq.n	8005f46 <SX127X_transmitAsync+0x36>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	7c1b      	ldrb	r3, [r3, #16]
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d008      	beq.n	8005f46 <SX127X_transmitAsync+0x36>
		module->len = lenght;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	1cfa      	adds	r2, r7, #3
 8005f38:	7812      	ldrb	r2, [r2, #0]
 8005f3a:	721a      	strb	r2, [r3, #8]
		module->TXrequest = 1;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	745a      	strb	r2, [r3, #17]

		return HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	e000      	b.n	8005f48 <SX127X_transmitAsync+0x38>
	} else
		return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
}
 8005f48:	0018      	movs	r0, r3
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	b002      	add	sp, #8
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <SX127X_Handler>:


void SX127X_Handler(SX127X_t *module) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]

	SX127X_readStatus(module);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f000 f894 	bl	8006088 <SX127X_readStatus>
	SX127X_readIrq(module);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	0018      	movs	r0, r3
 8005f64:	f000 f8ba 	bl	80060dc <SX127X_readIrq>

	if (module->status == UNINITIALISED) {
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	7c1b      	ldrb	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d107      	bne.n	8005f80 <SX127X_Handler+0x30>
		SX127X_Reset(module);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	0018      	movs	r0, r3
 8005f74:	f7ff fbec 	bl	8005750 <SX127X_Reset>
		SX127X_config(module);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	f7ff fd32 	bl	80059e4 <SX127X_config>
	}

	if ((module->status == SLEEP || module->status == STANDBY)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	7c1b      	ldrb	r3, [r3, #16]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d003      	beq.n	8005f90 <SX127X_Handler+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	7c1b      	ldrb	r3, [r3, #16]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d10a      	bne.n	8005fa6 <SX127X_Handler+0x56>
			&& module->alwaysRX)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	7bdb      	ldrb	r3, [r3, #15]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d006      	beq.n	8005fa6 <SX127X_Handler+0x56>
		SX127X_startRx(module, 1000);
 8005f98:	23fa      	movs	r3, #250	; 0xfa
 8005f9a:	009a      	lsls	r2, r3, #2
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	0011      	movs	r1, r2
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	f7ff fea1 	bl	8005ce8 <SX127X_startRx>

	if (module->TXrequest && (module->modemStatus & MODEM_STATUS_SIG_DET) == 0)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	7c5b      	ldrb	r3, [r3, #17]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <SX127X_Handler+0x74>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	225f      	movs	r2, #95	; 0x5f
 8005fb2:	5c9b      	ldrb	r3, [r3, r2]
 8005fb4:	001a      	movs	r2, r3
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	4013      	ands	r3, r2
 8005fba:	d103      	bne.n	8005fc4 <SX127X_Handler+0x74>
		SX127X_startTransmission(module);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	f7ff ff4a 	bl	8005e58 <SX127X_startTransmission>

	SX127X_readIrq(module);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f000 f888 	bl	80060dc <SX127X_readIrq>

	if (module->irq & IRQ_TX_DONE) {
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	225e      	movs	r2, #94	; 0x5e
 8005fd0:	5c9b      	ldrb	r3, [r3, r2]
 8005fd2:	001a      	movs	r2, r3
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	d008      	beq.n	8005fec <SX127X_Handler+0x9c>
		SX127X_clearIrq(module);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f7ff fe75 	bl	8005ccc <SX127X_clearIrq>
		SX127X_startRx(module, 100);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2164      	movs	r1, #100	; 0x64
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f7ff fe7e 	bl	8005ce8 <SX127X_startRx>
	}

	if (module->irq & IRQ_RX_DONE) {
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	225e      	movs	r2, #94	; 0x5e
 8005ff0:	5c9b      	ldrb	r3, [r3, r2]
 8005ff2:	001a      	movs	r2, r3
 8005ff4:	2340      	movs	r3, #64	; 0x40
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	d013      	beq.n	8006022 <SX127X_Handler+0xd2>
		module->badCrc = (module->irq & IRQ_CRC_ERROR) >> 5;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	225e      	movs	r2, #94	; 0x5e
 8005ffe:	5c9b      	ldrb	r3, [r3, r2]
 8006000:	115b      	asrs	r3, r3, #5
 8006002:	2201      	movs	r2, #1
 8006004:	4013      	ands	r3, r2
 8006006:	1e5a      	subs	r2, r3, #1
 8006008:	4193      	sbcs	r3, r2
 800600a:	b2d9      	uxtb	r1, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2260      	movs	r2, #96	; 0x60
 8006010:	5499      	strb	r1, [r3, r2]
		SX127X_receive(module);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	0018      	movs	r0, r3
 8006016:	f7ff fedb 	bl	8005dd0 <SX127X_receive>
		SX127X_clearIrq(module);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	0018      	movs	r0, r3
 800601e:	f7ff fe55 	bl	8005ccc <SX127X_clearIrq>
	}

	if (((SX127X_SPIRead(module, 0x1D))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	211d      	movs	r1, #29
 8006026:	0018      	movs	r0, r3
 8006028:	f7ff fbff 	bl	800582a <SX127X_SPIRead>
 800602c:	0003      	movs	r3, r0
 800602e:	0019      	movs	r1, r3
			!= (module->bw << 4 | module->cr << 1 | module->implicitHeader))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	799b      	ldrb	r3, [r3, #6]
 8006034:	011a      	lsls	r2, r3, #4
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	79db      	ldrb	r3, [r3, #7]
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	4313      	orrs	r3, r2
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	7a92      	ldrb	r2, [r2, #10]
 8006042:	4313      	orrs	r3, r2
	if (((SX127X_SPIRead(module, 0x1D))
 8006044:	4299      	cmp	r1, r3
 8006046:	d108      	bne.n	800605a <SX127X_Handler+0x10a>
			|| (HAL_GetTick() - module->watchdogTick > 120000)) //Watchdog
 8006048:	f000 fc26 	bl	8006898 <HAL_GetTick>
 800604c:	0002      	movs	r2, r0
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	4a0b      	ldr	r2, [pc, #44]	; (8006084 <SX127X_Handler+0x134>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d90f      	bls.n	800607a <SX127X_Handler+0x12a>
			{
		module->wdCounter++;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2280      	movs	r2, #128	; 0x80
 800605e:	5a9b      	ldrh	r3, [r3, r2]
 8006060:	3301      	adds	r3, #1
 8006062:	b299      	uxth	r1, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2280      	movs	r2, #128	; 0x80
 8006068:	5299      	strh	r1, [r3, r2]
		module->watchdogTick = HAL_GetTick();
 800606a:	f000 fc15 	bl	8006898 <HAL_GetTick>
 800606e:	0002      	movs	r2, r0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	67da      	str	r2, [r3, #124]	; 0x7c
		module->status = UNINITIALISED;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	741a      	strb	r2, [r3, #16]
	}
}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	46bd      	mov	sp, r7
 800607e:	b002      	add	sp, #8
 8006080:	bd80      	pop	{r7, pc}
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	0001d4c0 	.word	0x0001d4c0

08006088 <SX127X_readStatus>:
		return 255 - ret;
	else
		return -ret;
}

void SX127X_readStatus(SX127X_t *module) {
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
	module->modemStatus = SX127X_SPIRead(module, LR_RegModemStat);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2118      	movs	r1, #24
 8006094:	0018      	movs	r0, r3
 8006096:	f7ff fbc8 	bl	800582a <SX127X_SPIRead>
 800609a:	0003      	movs	r3, r0
 800609c:	0019      	movs	r1, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	225f      	movs	r2, #95	; 0x5f
 80060a2:	5499      	strb	r1, [r3, r2]
	if (module->modemStatus & MODEM_STATUS_SIG_DET) {
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	225f      	movs	r2, #95	; 0x5f
 80060a8:	5c9b      	ldrb	r3, [r3, r2]
 80060aa:	001a      	movs	r2, r3
 80060ac:	2301      	movs	r3, #1
 80060ae:	4013      	ands	r3, r2
 80060b0:	d00d      	beq.n	80060ce <SX127X_readStatus+0x46>
		module->signalDetected = true;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	771a      	strb	r2, [r3, #28]
		module->lastSignalTick = HAL_GetTick();
 80060b8:	f000 fbee 	bl	8006898 <HAL_GetTick>
 80060bc:	0002      	movs	r2, r0
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	619a      	str	r2, [r3, #24]
		module->watchdogTick = HAL_GetTick();
 80060c2:	f000 fbe9 	bl	8006898 <HAL_GetTick>
 80060c6:	0002      	movs	r2, r0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	67da      	str	r2, [r3, #124]	; 0x7c
	} else
		module->signalDetected = false;
}
 80060cc:	e002      	b.n	80060d4 <SX127X_readStatus+0x4c>
		module->signalDetected = false;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	771a      	strb	r2, [r3, #28]
}
 80060d4:	46c0      	nop			; (mov r8, r8)
 80060d6:	46bd      	mov	sp, r7
 80060d8:	b002      	add	sp, #8
 80060da:	bd80      	pop	{r7, pc}

080060dc <SX127X_readIrq>:

void SX127X_readIrq(SX127X_t *module) {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
	module->irq = SX127X_SPIRead(module, LR_RegIrqFlags);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2112      	movs	r1, #18
 80060e8:	0018      	movs	r0, r3
 80060ea:	f7ff fb9e 	bl	800582a <SX127X_SPIRead>
 80060ee:	0003      	movs	r3, r0
 80060f0:	0019      	movs	r1, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	225e      	movs	r2, #94	; 0x5e
 80060f6:	5499      	strb	r1, [r3, r2]
}
 80060f8:	46c0      	nop			; (mov r8, r8)
 80060fa:	46bd      	mov	sp, r7
 80060fc:	b002      	add	sp, #8
 80060fe:	bd80      	pop	{r7, pc}

08006100 <SX127X_delayMicro>:

void SX127X_delayMicro(uint32_t micros) {
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 5;
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <SX127X_delayMicro+0x34>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	490a      	ldr	r1, [pc, #40]	; (8006138 <SX127X_delayMicro+0x38>)
 800610e:	0018      	movs	r0, r3
 8006110:	f7fa f816 	bl	8000140 <__udivsi3>
 8006114:	0003      	movs	r3, r0
 8006116:	001a      	movs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4353      	muls	r3, r2
 800611c:	607b      	str	r3, [r7, #4]
	while (micros--)
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	1e5a      	subs	r2, r3, #1
 8006124:	607a      	str	r2, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1fa      	bne.n	8006120 <SX127X_delayMicro+0x20>
		;
}
 800612a:	46c0      	nop			; (mov r8, r8)
 800612c:	46c0      	nop			; (mov r8, r8)
 800612e:	46bd      	mov	sp, r7
 8006130:	b002      	add	sp, #8
 8006132:	bd80      	pop	{r7, pc}
 8006134:	2000005c 	.word	0x2000005c
 8006138:	004c4b40 	.word	0x004c4b40

0800613c <SX127X_init>:

uint8_t SX127X_getRandom(SX127X_t *module) {
	return SX127X_SPIRead(module, LR_RegWideBandRSSI);
}

void SX127X_init(SX127X_t *module) {
 800613c:	b590      	push	{r4, r7, lr}
 800613e:	b08b      	sub	sp, #44	; 0x2c
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	uint8_t buf[32];
	SX127X_Reset(module);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	0018      	movs	r0, r3
 8006148:	f7ff fb02 	bl	8005750 <SX127X_Reset>
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2142      	movs	r1, #66	; 0x42
 8006150:	0018      	movs	r0, r3
 8006152:	f7ff fb6a 	bl	800582a <SX127X_SPIRead>
 8006156:	0003      	movs	r3, r0
 8006158:	0019      	movs	r1, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2278      	movs	r2, #120	; 0x78
 800615e:	5499      	strb	r1, [r3, r2]
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2142      	movs	r1, #66	; 0x42
 8006164:	0018      	movs	r0, r3
 8006166:	f7ff fb60 	bl	800582a <SX127X_SPIRead>
 800616a:	0003      	movs	r3, r0
 800616c:	0019      	movs	r1, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2278      	movs	r2, #120	; 0x78
 8006172:	5499      	strb	r1, [r3, r2]
	SX127X_readAllRegisters(module, buf);
 8006174:	2408      	movs	r4, #8
 8006176:	193a      	adds	r2, r7, r4
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	0011      	movs	r1, r2
 800617c:	0018      	movs	r0, r3
 800617e:	f000 f811 	bl	80061a4 <SX127X_readAllRegisters>
	if (buf[1] == 9 && buf[2] == 26)
 8006182:	0022      	movs	r2, r4
 8006184:	18bb      	adds	r3, r7, r2
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	2b09      	cmp	r3, #9
 800618a:	d107      	bne.n	800619c <SX127X_init+0x60>
 800618c:	18bb      	adds	r3, r7, r2
 800618e:	789b      	ldrb	r3, [r3, #2]
 8006190:	2b1a      	cmp	r3, #26
 8006192:	d103      	bne.n	800619c <SX127X_init+0x60>
		module->connected = true;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2261      	movs	r2, #97	; 0x61
 8006198:	2101      	movs	r1, #1
 800619a:	5499      	strb	r1, [r3, r2]
}
 800619c:	46c0      	nop			; (mov r8, r8)
 800619e:	46bd      	mov	sp, r7
 80061a0:	b00b      	add	sp, #44	; 0x2c
 80061a2:	bd90      	pop	{r4, r7, pc}

080061a4 <SX127X_readAllRegisters>:

void SX127X_readAllRegisters(SX127X_t *module, uint8_t *buf) {
 80061a4:	b590      	push	{r4, r7, lr}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
	int i = 0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
	for (i = 1; i < 32; i++) {
 80061b2:	2301      	movs	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	e00d      	b.n	80061d4 <SX127X_readAllRegisters+0x30>
		buf[i] = SX127X_SPIRead(module, i);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	b2d9      	uxtb	r1, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	18d4      	adds	r4, r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	0018      	movs	r0, r3
 80061c6:	f7ff fb30 	bl	800582a <SX127X_SPIRead>
 80061ca:	0003      	movs	r3, r0
 80061cc:	7023      	strb	r3, [r4, #0]
	for (i = 1; i < 32; i++) {
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3301      	adds	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b1f      	cmp	r3, #31
 80061d8:	ddee      	ble.n	80061b8 <SX127X_readAllRegisters+0x14>
	}
}
 80061da:	46c0      	nop			; (mov r8, r8)
 80061dc:	46c0      	nop			; (mov r8, r8)
 80061de:	46bd      	mov	sp, r7
 80061e0:	b005      	add	sp, #20
 80061e2:	bd90      	pop	{r4, r7, pc}

080061e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
	return 1;
 80061e8:	2301      	movs	r3, #1
}
 80061ea:	0018      	movs	r0, r3
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <_kill>:

int _kill(int pid, int sig)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80061fa:	f004 ff11 	bl	800b020 <__errno>
 80061fe:	0003      	movs	r3, r0
 8006200:	2216      	movs	r2, #22
 8006202:	601a      	str	r2, [r3, #0]
	return -1;
 8006204:	2301      	movs	r3, #1
 8006206:	425b      	negs	r3, r3
}
 8006208:	0018      	movs	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	b002      	add	sp, #8
 800620e:	bd80      	pop	{r7, pc}

08006210 <_exit>:

void _exit (int status)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006218:	2301      	movs	r3, #1
 800621a:	425a      	negs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	0011      	movs	r1, r2
 8006220:	0018      	movs	r0, r3
 8006222:	f7ff ffe5 	bl	80061f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006226:	e7fe      	b.n	8006226 <_exit+0x16>

08006228 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	e00a      	b.n	8006250 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800623a:	e000      	b.n	800623e <_read+0x16>
 800623c:	bf00      	nop
 800623e:	0001      	movs	r1, r0
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	60ba      	str	r2, [r7, #8]
 8006246:	b2ca      	uxtb	r2, r1
 8006248:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	3301      	adds	r3, #1
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	429a      	cmp	r2, r3
 8006256:	dbf0      	blt.n	800623a <_read+0x12>
	}

return len;
 8006258:	687b      	ldr	r3, [r7, #4]
}
 800625a:	0018      	movs	r0, r3
 800625c:	46bd      	mov	sp, r7
 800625e:	b006      	add	sp, #24
 8006260:	bd80      	pop	{r7, pc}

08006262 <_close>:
	}
	return len;
}

int _close(int file)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
	return -1;
 800626a:	2301      	movs	r3, #1
 800626c:	425b      	negs	r3, r3
}
 800626e:	0018      	movs	r0, r3
 8006270:	46bd      	mov	sp, r7
 8006272:	b002      	add	sp, #8
 8006274:	bd80      	pop	{r7, pc}

08006276 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2280      	movs	r2, #128	; 0x80
 8006284:	0192      	lsls	r2, r2, #6
 8006286:	605a      	str	r2, [r3, #4]
	return 0;
 8006288:	2300      	movs	r3, #0
}
 800628a:	0018      	movs	r0, r3
 800628c:	46bd      	mov	sp, r7
 800628e:	b002      	add	sp, #8
 8006290:	bd80      	pop	{r7, pc}

08006292 <_isatty>:

int _isatty(int file)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
	return 1;
 800629a:	2301      	movs	r3, #1
}
 800629c:	0018      	movs	r0, r3
 800629e:	46bd      	mov	sp, r7
 80062a0:	b002      	add	sp, #8
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
	return 0;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	0018      	movs	r0, r3
 80062b4:	46bd      	mov	sp, r7
 80062b6:	b004      	add	sp, #16
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80062c4:	4a14      	ldr	r2, [pc, #80]	; (8006318 <_sbrk+0x5c>)
 80062c6:	4b15      	ldr	r3, [pc, #84]	; (800631c <_sbrk+0x60>)
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80062d0:	4b13      	ldr	r3, [pc, #76]	; (8006320 <_sbrk+0x64>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d102      	bne.n	80062de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80062d8:	4b11      	ldr	r3, [pc, #68]	; (8006320 <_sbrk+0x64>)
 80062da:	4a12      	ldr	r2, [pc, #72]	; (8006324 <_sbrk+0x68>)
 80062dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80062de:	4b10      	ldr	r3, [pc, #64]	; (8006320 <_sbrk+0x64>)
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	18d3      	adds	r3, r2, r3
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d207      	bcs.n	80062fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80062ec:	f004 fe98 	bl	800b020 <__errno>
 80062f0:	0003      	movs	r3, r0
 80062f2:	220c      	movs	r2, #12
 80062f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80062f6:	2301      	movs	r3, #1
 80062f8:	425b      	negs	r3, r3
 80062fa:	e009      	b.n	8006310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062fc:	4b08      	ldr	r3, [pc, #32]	; (8006320 <_sbrk+0x64>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006302:	4b07      	ldr	r3, [pc, #28]	; (8006320 <_sbrk+0x64>)
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	18d2      	adds	r2, r2, r3
 800630a:	4b05      	ldr	r3, [pc, #20]	; (8006320 <_sbrk+0x64>)
 800630c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800630e:	68fb      	ldr	r3, [r7, #12]
}
 8006310:	0018      	movs	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	b006      	add	sp, #24
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20002000 	.word	0x20002000
 800631c:	00000400 	.word	0x00000400
 8006320:	2000065c 	.word	0x2000065c
 8006324:	200006b8 	.word	0x200006b8

08006328 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800632c:	46c0      	nop			; (mov r8, r8)
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <initUart>:
uint8_t tempMessage[32];
uint8_t tempPos = 0;
uint16_t currentPos = 0;
uint32_t lastUartReceive = 0;

void initUart() {
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, uartBuffer, UART_BUFFER_SIZE);
 8006338:	2380      	movs	r3, #128	; 0x80
 800633a:	005a      	lsls	r2, r3, #1
 800633c:	4903      	ldr	r1, [pc, #12]	; (800634c <initUart+0x18>)
 800633e:	4b04      	ldr	r3, [pc, #16]	; (8006350 <initUart+0x1c>)
 8006340:	0018      	movs	r0, r3
 8006342:	f003 fec1 	bl	800a0c8 <HAL_UART_Receive_DMA>
}
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	20000554 	.word	0x20000554
 8006350:	200003ac 	.word	0x200003ac

08006354 <uartHandler>:

void uartHandler() {
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
	if (uartBuffer[currentPos]) {
 8006358:	4b2a      	ldr	r3, [pc, #168]	; (8006404 <uartHandler+0xb0>)
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	001a      	movs	r2, r3
 800635e:	4b2a      	ldr	r3, [pc, #168]	; (8006408 <uartHandler+0xb4>)
 8006360:	5c9b      	ldrb	r3, [r3, r2]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d03b      	beq.n	80063de <uartHandler+0x8a>
		lastUartReceive = HAL_GetTick();
 8006366:	f000 fa97 	bl	8006898 <HAL_GetTick>
 800636a:	0002      	movs	r2, r0
 800636c:	4b27      	ldr	r3, [pc, #156]	; (800640c <uartHandler+0xb8>)
 800636e:	601a      	str	r2, [r3, #0]
		if (uartBuffer[currentPos] == '<')
 8006370:	4b24      	ldr	r3, [pc, #144]	; (8006404 <uartHandler+0xb0>)
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	001a      	movs	r2, r3
 8006376:	4b24      	ldr	r3, [pc, #144]	; (8006408 <uartHandler+0xb4>)
 8006378:	5c9b      	ldrb	r3, [r3, r2]
 800637a:	2b3c      	cmp	r3, #60	; 0x3c
 800637c:	d103      	bne.n	8006386 <uartHandler+0x32>
			tempPos = 0;
 800637e:	4b24      	ldr	r3, [pc, #144]	; (8006410 <uartHandler+0xbc>)
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	e01a      	b.n	80063bc <uartHandler+0x68>
		else if (uartBuffer[currentPos] == '>')
 8006386:	4b1f      	ldr	r3, [pc, #124]	; (8006404 <uartHandler+0xb0>)
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	001a      	movs	r2, r3
 800638c:	4b1e      	ldr	r3, [pc, #120]	; (8006408 <uartHandler+0xb4>)
 800638e:	5c9b      	ldrb	r3, [r3, r2]
 8006390:	2b3e      	cmp	r3, #62	; 0x3e
 8006392:	d105      	bne.n	80063a0 <uartHandler+0x4c>
			handleMessage(tempPos);
 8006394:	4b1e      	ldr	r3, [pc, #120]	; (8006410 <uartHandler+0xbc>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	0018      	movs	r0, r3
 800639a:	f000 f873 	bl	8006484 <handleMessage>
 800639e:	e00d      	b.n	80063bc <uartHandler+0x68>
		else
			tempMessage[tempPos++] = uartBuffer[currentPos];
 80063a0:	4b18      	ldr	r3, [pc, #96]	; (8006404 <uartHandler+0xb0>)
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	0019      	movs	r1, r3
 80063a6:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <uartHandler+0xbc>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	b2d0      	uxtb	r0, r2
 80063ae:	4a18      	ldr	r2, [pc, #96]	; (8006410 <uartHandler+0xbc>)
 80063b0:	7010      	strb	r0, [r2, #0]
 80063b2:	001a      	movs	r2, r3
 80063b4:	4b14      	ldr	r3, [pc, #80]	; (8006408 <uartHandler+0xb4>)
 80063b6:	5c59      	ldrb	r1, [r3, r1]
 80063b8:	4b16      	ldr	r3, [pc, #88]	; (8006414 <uartHandler+0xc0>)
 80063ba:	5499      	strb	r1, [r3, r2]

		uartBuffer[currentPos++] = 0;
 80063bc:	4b11      	ldr	r3, [pc, #68]	; (8006404 <uartHandler+0xb0>)
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	b291      	uxth	r1, r2
 80063c4:	4a0f      	ldr	r2, [pc, #60]	; (8006404 <uartHandler+0xb0>)
 80063c6:	8011      	strh	r1, [r2, #0]
 80063c8:	001a      	movs	r2, r3
 80063ca:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <uartHandler+0xb4>)
 80063cc:	2100      	movs	r1, #0
 80063ce:	5499      	strb	r1, [r3, r2]
		if (currentPos>=UART_BUFFER_SIZE) currentPos = 0;
 80063d0:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <uartHandler+0xb0>)
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	2bff      	cmp	r3, #255	; 0xff
 80063d6:	d902      	bls.n	80063de <uartHandler+0x8a>
 80063d8:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <uartHandler+0xb0>)
 80063da:	2200      	movs	r2, #0
 80063dc:	801a      	strh	r2, [r3, #0]
	}

   //Reseting UART buf
	if (currentPos && HAL_GetTick()-lastUartReceive > 3000)
 80063de:	4b09      	ldr	r3, [pc, #36]	; (8006404 <uartHandler+0xb0>)
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <uartHandler+0xa8>
 80063e6:	f000 fa57 	bl	8006898 <HAL_GetTick>
 80063ea:	0002      	movs	r2, r0
 80063ec:	4b07      	ldr	r3, [pc, #28]	; (800640c <uartHandler+0xb8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	4a09      	ldr	r2, [pc, #36]	; (8006418 <uartHandler+0xc4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d901      	bls.n	80063fc <uartHandler+0xa8>
	{
		uartReinit();
 80063f8:	f000 f810 	bl	800641c <uartReinit>
	}

}
 80063fc:	46c0      	nop			; (mov r8, r8)
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	20000682 	.word	0x20000682
 8006408:	20000554 	.word	0x20000554
 800640c:	20000684 	.word	0x20000684
 8006410:	20000680 	.word	0x20000680
 8006414:	20000660 	.word	0x20000660
 8006418:	00000bb8 	.word	0x00000bb8

0800641c <uartReinit>:

void uartReinit()
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
	flag.uartReset = 1;
 8006420:	4b12      	ldr	r3, [pc, #72]	; (800646c <uartReinit+0x50>)
 8006422:	785a      	ldrb	r2, [r3, #1]
 8006424:	2110      	movs	r1, #16
 8006426:	430a      	orrs	r2, r1
 8006428:	705a      	strb	r2, [r3, #1]
	HAL_UART_DMAStop(&huart1);
 800642a:	4b11      	ldr	r3, [pc, #68]	; (8006470 <uartReinit+0x54>)
 800642c:	0018      	movs	r0, r3
 800642e:	f003 feb3 	bl	800a198 <HAL_UART_DMAStop>
	memset(uartBuffer,0,sizeof(uartBuffer));
 8006432:	2380      	movs	r3, #128	; 0x80
 8006434:	005a      	lsls	r2, r3, #1
 8006436:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <uartReinit+0x58>)
 8006438:	2100      	movs	r1, #0
 800643a:	0018      	movs	r0, r3
 800643c:	f004 fe23 	bl	800b086 <memset>
	memset(tempMessage,0,sizeof(tempMessage));
 8006440:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <uartReinit+0x5c>)
 8006442:	2220      	movs	r2, #32
 8006444:	2100      	movs	r1, #0
 8006446:	0018      	movs	r0, r3
 8006448:	f004 fe1d 	bl	800b086 <memset>
	currentPos = 0;
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <uartReinit+0x60>)
 800644e:	2200      	movs	r2, #0
 8006450:	801a      	strh	r2, [r3, #0]
	tempPos = 0;
 8006452:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <uartReinit+0x64>)
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, uartBuffer, UART_BUFFER_SIZE);
 8006458:	2380      	movs	r3, #128	; 0x80
 800645a:	005a      	lsls	r2, r3, #1
 800645c:	4905      	ldr	r1, [pc, #20]	; (8006474 <uartReinit+0x58>)
 800645e:	4b04      	ldr	r3, [pc, #16]	; (8006470 <uartReinit+0x54>)
 8006460:	0018      	movs	r0, r3
 8006462:	f003 fe31 	bl	800a0c8 <HAL_UART_Receive_DMA>
}
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	2000048c 	.word	0x2000048c
 8006470:	200003ac 	.word	0x200003ac
 8006474:	20000554 	.word	0x20000554
 8006478:	20000660 	.word	0x20000660
 800647c:	20000682 	.word	0x20000682
 8006480:	20000680 	.word	0x20000680

08006484 <handleMessage>:

void handleMessage(uint8_t len) {
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	0002      	movs	r2, r0
 800648c:	1dfb      	adds	r3, r7, #7
 800648e:	701a      	strb	r2, [r3, #0]

	uint8_t l = len - 1;
 8006490:	2317      	movs	r3, #23
 8006492:	18fb      	adds	r3, r7, r3
 8006494:	1dfa      	adds	r2, r7, #7
 8006496:	7812      	ldrb	r2, [r2, #0]
 8006498:	3a01      	subs	r2, #1
 800649a:	701a      	strb	r2, [r3, #0]
	uint8_t *ptr = tempMessage + 1;
 800649c:	4b65      	ldr	r3, [pc, #404]	; (8006634 <handleMessage+0x1b0>)
 800649e:	613b      	str	r3, [r7, #16]
	uint32_t tmp;

	switch (tempMessage[0]) {
 80064a0:	4b65      	ldr	r3, [pc, #404]	; (8006638 <handleMessage+0x1b4>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	3b31      	subs	r3, #49	; 0x31
 80064a6:	2b3d      	cmp	r3, #61	; 0x3d
 80064a8:	d900      	bls.n	80064ac <handleMessage+0x28>
 80064aa:	e0b8      	b.n	800661e <handleMessage+0x19a>
 80064ac:	009a      	lsls	r2, r3, #2
 80064ae:	4b63      	ldr	r3, [pc, #396]	; (800663c <handleMessage+0x1b8>)
 80064b0:	18d3      	adds	r3, r2, r3
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	469f      	mov	pc, r3
	case UART_FREQUENCY:
		tmp = DecToInt(ptr, l);
 80064b6:	2317      	movs	r3, #23
 80064b8:	18fb      	adds	r3, r7, r3
 80064ba:	781a      	ldrb	r2, [r3, #0]
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	0011      	movs	r1, r2
 80064c0:	0018      	movs	r0, r3
 80064c2:	f7fd f83b 	bl	800353c <DecToInt>
 80064c6:	0003      	movs	r3, r0
 80064c8:	60fb      	str	r3, [r7, #12]
		settings.realFrequency = tmp;
 80064ca:	4b5d      	ldr	r3, [pc, #372]	; (8006640 <handleMessage+0x1bc>)
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	601a      	str	r2, [r3, #0]
		break;
 80064d0:	e0ac      	b.n	800662c <handleMessage+0x1a8>

	case UART_SF:
		tmp = DecToInt(ptr, l);
 80064d2:	2317      	movs	r3, #23
 80064d4:	18fb      	adds	r3, r7, r3
 80064d6:	781a      	ldrb	r2, [r3, #0]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	0011      	movs	r1, r2
 80064dc:	0018      	movs	r0, r3
 80064de:	f7fd f82d 	bl	800353c <DecToInt>
 80064e2:	0003      	movs	r3, r0
 80064e4:	60fb      	str	r3, [r7, #12]
		settings.sf = tmp;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	4b55      	ldr	r3, [pc, #340]	; (8006640 <handleMessage+0x1bc>)
 80064ec:	731a      	strb	r2, [r3, #12]
		break;
 80064ee:	e09d      	b.n	800662c <handleMessage+0x1a8>

	case UART_BW:
		tmp = DecToInt(ptr, l);
 80064f0:	2317      	movs	r3, #23
 80064f2:	18fb      	adds	r3, r7, r3
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	0011      	movs	r1, r2
 80064fa:	0018      	movs	r0, r3
 80064fc:	f7fd f81e 	bl	800353c <DecToInt>
 8006500:	0003      	movs	r3, r0
 8006502:	60fb      	str	r3, [r7, #12]
		settings.bw = tmp;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	b2da      	uxtb	r2, r3
 8006508:	4b4d      	ldr	r3, [pc, #308]	; (8006640 <handleMessage+0x1bc>)
 800650a:	735a      	strb	r2, [r3, #13]
		break;
 800650c:	e08e      	b.n	800662c <handleMessage+0x1a8>

	case UART_SYNCWORD:
		tmp = HexToInt(ptr, l);
 800650e:	2317      	movs	r3, #23
 8006510:	18fb      	adds	r3, r7, r3
 8006512:	781a      	ldrb	r2, [r3, #0]
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	0011      	movs	r1, r2
 8006518:	0018      	movs	r0, r3
 800651a:	f7fd f85f 	bl	80035dc <HexToInt>
 800651e:	0003      	movs	r3, r0
 8006520:	60fb      	str	r3, [r7, #12]
		settings.sw = tmp;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	b2da      	uxtb	r2, r3
 8006526:	4b46      	ldr	r3, [pc, #280]	; (8006640 <handleMessage+0x1bc>)
 8006528:	739a      	strb	r2, [r3, #14]
		break;
 800652a:	e07f      	b.n	800662c <handleMessage+0x1a8>

	case UART_PREAMBLE:
		tmp = DecToInt(ptr, l);
 800652c:	2317      	movs	r3, #23
 800652e:	18fb      	adds	r3, r7, r3
 8006530:	781a      	ldrb	r2, [r3, #0]
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	0011      	movs	r1, r2
 8006536:	0018      	movs	r0, r3
 8006538:	f7fd f800 	bl	800353c <DecToInt>
 800653c:	0003      	movs	r3, r0
 800653e:	60fb      	str	r3, [r7, #12]
		settings.preamble = tmp;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	b29a      	uxth	r2, r3
 8006544:	4b3e      	ldr	r3, [pc, #248]	; (8006640 <handleMessage+0x1bc>)
 8006546:	811a      	strh	r2, [r3, #8]
		break;
 8006548:	e070      	b.n	800662c <handleMessage+0x1a8>

	case UART_CR:
		tmp = DecToInt(ptr, l);
 800654a:	2317      	movs	r3, #23
 800654c:	18fb      	adds	r3, r7, r3
 800654e:	781a      	ldrb	r2, [r3, #0]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	0011      	movs	r1, r2
 8006554:	0018      	movs	r0, r3
 8006556:	f7fc fff1 	bl	800353c <DecToInt>
 800655a:	0003      	movs	r3, r0
 800655c:	60fb      	str	r3, [r7, #12]
		settings.cr = tmp;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	b2da      	uxtb	r2, r3
 8006562:	4b37      	ldr	r3, [pc, #220]	; (8006640 <handleMessage+0x1bc>)
 8006564:	72da      	strb	r2, [r3, #11]
		break;
 8006566:	e061      	b.n	800662c <handleMessage+0x1a8>

	case UART_POWER:
		tmp = DecToInt(ptr, l);
 8006568:	2317      	movs	r3, #23
 800656a:	18fb      	adds	r3, r7, r3
 800656c:	781a      	ldrb	r2, [r3, #0]
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	0011      	movs	r1, r2
 8006572:	0018      	movs	r0, r3
 8006574:	f7fc ffe2 	bl	800353c <DecToInt>
 8006578:	0003      	movs	r3, r0
 800657a:	60fb      	str	r3, [r7, #12]
		settings.power = tmp;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	b2da      	uxtb	r2, r3
 8006580:	4b2f      	ldr	r3, [pc, #188]	; (8006640 <handleMessage+0x1bc>)
 8006582:	73da      	strb	r2, [r3, #15]
		break;
 8006584:	e052      	b.n	800662c <handleMessage+0x1a8>

	case UART_NODENUM:
		settings.nodeNum = DecToInt(ptr, l);
 8006586:	2317      	movs	r3, #23
 8006588:	18fb      	adds	r3, r7, r3
 800658a:	781a      	ldrb	r2, [r3, #0]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	0011      	movs	r1, r2
 8006590:	0018      	movs	r0, r3
 8006592:	f7fc ffd3 	bl	800353c <DecToInt>
 8006596:	0003      	movs	r3, r0
 8006598:	b2da      	uxtb	r2, r3
 800659a:	4b29      	ldr	r3, [pc, #164]	; (8006640 <handleMessage+0x1bc>)
 800659c:	729a      	strb	r2, [r3, #10]
		break;
 800659e:	e045      	b.n	800662c <handleMessage+0x1a8>

	case UART_WORKING_INTERVAL:
		settings.workInterval = DecToInt(ptr, l);
 80065a0:	2317      	movs	r3, #23
 80065a2:	18fb      	adds	r3, r7, r3
 80065a4:	781a      	ldrb	r2, [r3, #0]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	0011      	movs	r1, r2
 80065aa:	0018      	movs	r0, r3
 80065ac:	f7fc ffc6 	bl	800353c <DecToInt>
 80065b0:	0002      	movs	r2, r0
 80065b2:	4b23      	ldr	r3, [pc, #140]	; (8006640 <handleMessage+0x1bc>)
 80065b4:	605a      	str	r2, [r3, #4]
		break;
 80065b6:	e039      	b.n	800662c <handleMessage+0x1a8>

	case UART_USELED:
		settings.useLed = DecToInt(ptr, l);
 80065b8:	2317      	movs	r3, #23
 80065ba:	18fb      	adds	r3, r7, r3
 80065bc:	781a      	ldrb	r2, [r3, #0]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	0011      	movs	r1, r2
 80065c2:	0018      	movs	r0, r3
 80065c4:	f7fc ffba 	bl	800353c <DecToInt>
 80065c8:	0003      	movs	r3, r0
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	4b1c      	ldr	r3, [pc, #112]	; (8006640 <handleMessage+0x1bc>)
 80065ce:	741a      	strb	r2, [r3, #16]
		break;
 80065d0:	e02c      	b.n	800662c <handleMessage+0x1a8>

	case UART_SAVE:
		flag.saveSettings = 1;
 80065d2:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <handleMessage+0x1c0>)
 80065d4:	781a      	ldrb	r2, [r3, #0]
 80065d6:	2110      	movs	r1, #16
 80065d8:	430a      	orrs	r2, r1
 80065da:	701a      	strb	r2, [r3, #0]
		break;
 80065dc:	e026      	b.n	800662c <handleMessage+0x1a8>

	case UART_READ:
		flag.readConfig = 1;
 80065de:	4b19      	ldr	r3, [pc, #100]	; (8006644 <handleMessage+0x1c0>)
 80065e0:	781a      	ldrb	r2, [r3, #0]
 80065e2:	2120      	movs	r1, #32
 80065e4:	430a      	orrs	r2, r1
 80065e6:	701a      	strb	r2, [r3, #0]
		break;
 80065e8:	e020      	b.n	800662c <handleMessage+0x1a8>

	case UART_CALL:
		printf("<ANv%lx>\n", SOFTWARE_REVISION);
 80065ea:	4a17      	ldr	r2, [pc, #92]	; (8006648 <handleMessage+0x1c4>)
 80065ec:	4b17      	ldr	r3, [pc, #92]	; (800664c <handleMessage+0x1c8>)
 80065ee:	0011      	movs	r1, r2
 80065f0:	0018      	movs	r0, r3
 80065f2:	f005 f9bf 	bl	800b974 <iprintf>
		break;
 80065f6:	e019      	b.n	800662c <handleMessage+0x1a8>

	case UART_STATUS:
		flag.statusRequested = 1;
 80065f8:	4b12      	ldr	r3, [pc, #72]	; (8006644 <handleMessage+0x1c0>)
 80065fa:	785a      	ldrb	r2, [r3, #1]
 80065fc:	2102      	movs	r1, #2
 80065fe:	430a      	orrs	r2, r1
 8006600:	705a      	strb	r2, [r3, #1]
		break;
 8006602:	e013      	b.n	800662c <handleMessage+0x1a8>

	case UART_DEBUG:
		settings.debugLevel = DecToInt(ptr, l);
 8006604:	2317      	movs	r3, #23
 8006606:	18fb      	adds	r3, r7, r3
 8006608:	781a      	ldrb	r2, [r3, #0]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	0011      	movs	r1, r2
 800660e:	0018      	movs	r0, r3
 8006610:	f7fc ff94 	bl	800353c <DecToInt>
 8006614:	0003      	movs	r3, r0
 8006616:	b2da      	uxtb	r2, r3
 8006618:	4b09      	ldr	r3, [pc, #36]	; (8006640 <handleMessage+0x1bc>)
 800661a:	761a      	strb	r2, [r3, #24]
		break;
 800661c:	e006      	b.n	800662c <handleMessage+0x1a8>

	default:
		printf("Bad format!");
 800661e:	4b0c      	ldr	r3, [pc, #48]	; (8006650 <handleMessage+0x1cc>)
 8006620:	0018      	movs	r0, r3
 8006622:	f005 f9a7 	bl	800b974 <iprintf>
		Error_Handler();
 8006626:	f7fe fe7b 	bl	8005320 <Error_Handler>
		break;
 800662a:	46c0      	nop			; (mov r8, r8)

	}
}
 800662c:	46c0      	nop			; (mov r8, r8)
 800662e:	46bd      	mov	sp, r7
 8006630:	b006      	add	sp, #24
 8006632:	bd80      	pop	{r7, pc}
 8006634:	20000661 	.word	0x20000661
 8006638:	20000660 	.word	0x20000660
 800663c:	0800e9f0 	.word	0x0800e9f0
 8006640:	20000534 	.word	0x20000534
 8006644:	2000048c 	.word	0x2000048c
 8006648:	11072022 	.word	0x11072022
 800664c:	0800e740 	.word	0x0800e740
 8006650:	0800e74c 	.word	0x0800e74c

08006654 <sendConfig>:

void sendConfig() {
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
	printf("<1%lu>\n", settings.realFrequency);
 8006658:	4b3b      	ldr	r3, [pc, #236]	; (8006748 <sendConfig+0xf4>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	4b3b      	ldr	r3, [pc, #236]	; (800674c <sendConfig+0xf8>)
 800665e:	0011      	movs	r1, r2
 8006660:	0018      	movs	r0, r3
 8006662:	f005 f987 	bl	800b974 <iprintf>
	HAL_Delay(5);
 8006666:	2005      	movs	r0, #5
 8006668:	f7fd fe40 	bl	80042ec <HAL_Delay>
	printf("<2%u>\n", settings.sf);
 800666c:	4b36      	ldr	r3, [pc, #216]	; (8006748 <sendConfig+0xf4>)
 800666e:	7b1b      	ldrb	r3, [r3, #12]
 8006670:	001a      	movs	r2, r3
 8006672:	4b37      	ldr	r3, [pc, #220]	; (8006750 <sendConfig+0xfc>)
 8006674:	0011      	movs	r1, r2
 8006676:	0018      	movs	r0, r3
 8006678:	f005 f97c 	bl	800b974 <iprintf>
	HAL_Delay(5);
 800667c:	2005      	movs	r0, #5
 800667e:	f7fd fe35 	bl	80042ec <HAL_Delay>
	printf("<3%u>\n", settings.bw);
 8006682:	4b31      	ldr	r3, [pc, #196]	; (8006748 <sendConfig+0xf4>)
 8006684:	7b5b      	ldrb	r3, [r3, #13]
 8006686:	001a      	movs	r2, r3
 8006688:	4b32      	ldr	r3, [pc, #200]	; (8006754 <sendConfig+0x100>)
 800668a:	0011      	movs	r1, r2
 800668c:	0018      	movs	r0, r3
 800668e:	f005 f971 	bl	800b974 <iprintf>
	HAL_Delay(5);
 8006692:	2005      	movs	r0, #5
 8006694:	f7fd fe2a 	bl	80042ec <HAL_Delay>
	printf("<4%X>\n", settings.sw);
 8006698:	4b2b      	ldr	r3, [pc, #172]	; (8006748 <sendConfig+0xf4>)
 800669a:	7b9b      	ldrb	r3, [r3, #14]
 800669c:	001a      	movs	r2, r3
 800669e:	4b2e      	ldr	r3, [pc, #184]	; (8006758 <sendConfig+0x104>)
 80066a0:	0011      	movs	r1, r2
 80066a2:	0018      	movs	r0, r3
 80066a4:	f005 f966 	bl	800b974 <iprintf>
	HAL_Delay(5);
 80066a8:	2005      	movs	r0, #5
 80066aa:	f7fd fe1f 	bl	80042ec <HAL_Delay>
	printf("<5%u>\n", settings.power);
 80066ae:	4b26      	ldr	r3, [pc, #152]	; (8006748 <sendConfig+0xf4>)
 80066b0:	7bdb      	ldrb	r3, [r3, #15]
 80066b2:	001a      	movs	r2, r3
 80066b4:	4b29      	ldr	r3, [pc, #164]	; (800675c <sendConfig+0x108>)
 80066b6:	0011      	movs	r1, r2
 80066b8:	0018      	movs	r0, r3
 80066ba:	f005 f95b 	bl	800b974 <iprintf>
	HAL_Delay(5);
 80066be:	2005      	movs	r0, #5
 80066c0:	f7fd fe14 	bl	80042ec <HAL_Delay>
	printf("<8%u>\n", settings.preamble);
 80066c4:	4b20      	ldr	r3, [pc, #128]	; (8006748 <sendConfig+0xf4>)
 80066c6:	891b      	ldrh	r3, [r3, #8]
 80066c8:	001a      	movs	r2, r3
 80066ca:	4b25      	ldr	r3, [pc, #148]	; (8006760 <sendConfig+0x10c>)
 80066cc:	0011      	movs	r1, r2
 80066ce:	0018      	movs	r0, r3
 80066d0:	f005 f950 	bl	800b974 <iprintf>
	HAL_Delay(5);
 80066d4:	2005      	movs	r0, #5
 80066d6:	f7fd fe09 	bl	80042ec <HAL_Delay>
	printf("<9%u>\n", settings.cr);
 80066da:	4b1b      	ldr	r3, [pc, #108]	; (8006748 <sendConfig+0xf4>)
 80066dc:	7adb      	ldrb	r3, [r3, #11]
 80066de:	001a      	movs	r2, r3
 80066e0:	4b20      	ldr	r3, [pc, #128]	; (8006764 <sendConfig+0x110>)
 80066e2:	0011      	movs	r1, r2
 80066e4:	0018      	movs	r0, r3
 80066e6:	f005 f945 	bl	800b974 <iprintf>
	HAL_Delay(5);
 80066ea:	2005      	movs	r0, #5
 80066ec:	f7fd fdfe 	bl	80042ec <HAL_Delay>
	printf("<n%u>\n", settings.nodeNum);
 80066f0:	4b15      	ldr	r3, [pc, #84]	; (8006748 <sendConfig+0xf4>)
 80066f2:	7a9b      	ldrb	r3, [r3, #10]
 80066f4:	001a      	movs	r2, r3
 80066f6:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <sendConfig+0x114>)
 80066f8:	0011      	movs	r1, r2
 80066fa:	0018      	movs	r0, r3
 80066fc:	f005 f93a 	bl	800b974 <iprintf>
	HAL_Delay(5);
 8006700:	2005      	movs	r0, #5
 8006702:	f7fd fdf3 	bl	80042ec <HAL_Delay>
	printf("<i%lu>\n", settings.workInterval);
 8006706:	4b10      	ldr	r3, [pc, #64]	; (8006748 <sendConfig+0xf4>)
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	4b18      	ldr	r3, [pc, #96]	; (800676c <sendConfig+0x118>)
 800670c:	0011      	movs	r1, r2
 800670e:	0018      	movs	r0, r3
 8006710:	f005 f930 	bl	800b974 <iprintf>
	HAL_Delay(5);
 8006714:	2005      	movs	r0, #5
 8006716:	f7fd fde9 	bl	80042ec <HAL_Delay>
	printf("<L%u>\n", settings.useLed);
 800671a:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <sendConfig+0xf4>)
 800671c:	7c1b      	ldrb	r3, [r3, #16]
 800671e:	001a      	movs	r2, r3
 8006720:	4b13      	ldr	r3, [pc, #76]	; (8006770 <sendConfig+0x11c>)
 8006722:	0011      	movs	r1, r2
 8006724:	0018      	movs	r0, r3
 8006726:	f005 f925 	bl	800b974 <iprintf>
	HAL_Delay(5);
 800672a:	2005      	movs	r0, #5
 800672c:	f7fd fdde 	bl	80042ec <HAL_Delay>
	printf("<d%u>\n", settings.debugLevel);
 8006730:	4b05      	ldr	r3, [pc, #20]	; (8006748 <sendConfig+0xf4>)
 8006732:	7e1b      	ldrb	r3, [r3, #24]
 8006734:	001a      	movs	r2, r3
 8006736:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <sendConfig+0x120>)
 8006738:	0011      	movs	r1, r2
 800673a:	0018      	movs	r0, r3
 800673c:	f005 f91a 	bl	800b974 <iprintf>
}
 8006740:	46c0      	nop			; (mov r8, r8)
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	20000534 	.word	0x20000534
 800674c:	0800e758 	.word	0x0800e758
 8006750:	0800e760 	.word	0x0800e760
 8006754:	0800e768 	.word	0x0800e768
 8006758:	0800e770 	.word	0x0800e770
 800675c:	0800e778 	.word	0x0800e778
 8006760:	0800e780 	.word	0x0800e780
 8006764:	0800e788 	.word	0x0800e788
 8006768:	0800e790 	.word	0x0800e790
 800676c:	0800e798 	.word	0x0800e798
 8006770:	0800e7a0 	.word	0x0800e7a0
 8006774:	0800e7a8 	.word	0x0800e7a8

08006778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006778:	480d      	ldr	r0, [pc, #52]	; (80067b0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800677a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800677c:	480d      	ldr	r0, [pc, #52]	; (80067b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800677e:	490e      	ldr	r1, [pc, #56]	; (80067b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006780:	4a0e      	ldr	r2, [pc, #56]	; (80067bc <LoopForever+0xe>)
  movs r3, #0
 8006782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006784:	e002      	b.n	800678c <LoopCopyDataInit>

08006786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800678a:	3304      	adds	r3, #4

0800678c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800678c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800678e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006790:	d3f9      	bcc.n	8006786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006792:	4a0b      	ldr	r2, [pc, #44]	; (80067c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006794:	4c0b      	ldr	r4, [pc, #44]	; (80067c4 <LoopForever+0x16>)
  movs r3, #0
 8006796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006798:	e001      	b.n	800679e <LoopFillZerobss>

0800679a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800679a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800679c:	3204      	adds	r2, #4

0800679e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800679e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80067a0:	d3fb      	bcc.n	800679a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80067a2:	f7ff fdc1 	bl	8006328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80067a6:	f004 fc41 	bl	800b02c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80067aa:	f7fe f83b 	bl	8004824 <main>

080067ae <LoopForever>:

LoopForever:
    b LoopForever
 80067ae:	e7fe      	b.n	80067ae <LoopForever>
   ldr   r0, =_estack
 80067b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80067b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80067b8:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 80067bc:	0800ef1c 	.word	0x0800ef1c
  ldr r2, =_sbss
 80067c0:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80067c4:	200006b4 	.word	0x200006b4

080067c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80067c8:	e7fe      	b.n	80067c8 <ADC1_COMP_IRQHandler>
	...

080067cc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80067d2:	1dfb      	adds	r3, r7, #7
 80067d4:	2200      	movs	r2, #0
 80067d6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80067d8:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <HAL_Init+0x3c>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <HAL_Init+0x3c>)
 80067de:	2140      	movs	r1, #64	; 0x40
 80067e0:	430a      	orrs	r2, r1
 80067e2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80067e4:	2000      	movs	r0, #0
 80067e6:	f000 f811 	bl	800680c <HAL_InitTick>
 80067ea:	1e03      	subs	r3, r0, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80067ee:	1dfb      	adds	r3, r7, #7
 80067f0:	2201      	movs	r2, #1
 80067f2:	701a      	strb	r2, [r3, #0]
 80067f4:	e001      	b.n	80067fa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80067f6:	f7fe fd9f 	bl	8005338 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80067fa:	1dfb      	adds	r3, r7, #7
 80067fc:	781b      	ldrb	r3, [r3, #0]
}
 80067fe:	0018      	movs	r0, r3
 8006800:	46bd      	mov	sp, r7
 8006802:	b002      	add	sp, #8
 8006804:	bd80      	pop	{r7, pc}
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	40022000 	.word	0x40022000

0800680c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800680c:	b590      	push	{r4, r7, lr}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006814:	4b14      	ldr	r3, [pc, #80]	; (8006868 <HAL_InitTick+0x5c>)
 8006816:	681c      	ldr	r4, [r3, #0]
 8006818:	4b14      	ldr	r3, [pc, #80]	; (800686c <HAL_InitTick+0x60>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	0019      	movs	r1, r3
 800681e:	23fa      	movs	r3, #250	; 0xfa
 8006820:	0098      	lsls	r0, r3, #2
 8006822:	f7f9 fc8d 	bl	8000140 <__udivsi3>
 8006826:	0003      	movs	r3, r0
 8006828:	0019      	movs	r1, r3
 800682a:	0020      	movs	r0, r4
 800682c:	f7f9 fc88 	bl	8000140 <__udivsi3>
 8006830:	0003      	movs	r3, r0
 8006832:	0018      	movs	r0, r3
 8006834:	f000 fd57 	bl	80072e6 <HAL_SYSTICK_Config>
 8006838:	1e03      	subs	r3, r0, #0
 800683a:	d001      	beq.n	8006840 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e00f      	b.n	8006860 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b03      	cmp	r3, #3
 8006844:	d80b      	bhi.n	800685e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	2301      	movs	r3, #1
 800684a:	425b      	negs	r3, r3
 800684c:	2200      	movs	r2, #0
 800684e:	0018      	movs	r0, r3
 8006850:	f000 fd24 	bl	800729c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006854:	4b06      	ldr	r3, [pc, #24]	; (8006870 <HAL_InitTick+0x64>)
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	e000      	b.n	8006860 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
}
 8006860:	0018      	movs	r0, r3
 8006862:	46bd      	mov	sp, r7
 8006864:	b003      	add	sp, #12
 8006866:	bd90      	pop	{r4, r7, pc}
 8006868:	2000005c 	.word	0x2000005c
 800686c:	20000064 	.word	0x20000064
 8006870:	20000060 	.word	0x20000060

08006874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006878:	4b05      	ldr	r3, [pc, #20]	; (8006890 <HAL_IncTick+0x1c>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	001a      	movs	r2, r3
 800687e:	4b05      	ldr	r3, [pc, #20]	; (8006894 <HAL_IncTick+0x20>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	18d2      	adds	r2, r2, r3
 8006884:	4b03      	ldr	r3, [pc, #12]	; (8006894 <HAL_IncTick+0x20>)
 8006886:	601a      	str	r2, [r3, #0]
}
 8006888:	46c0      	nop			; (mov r8, r8)
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	46c0      	nop			; (mov r8, r8)
 8006890:	20000064 	.word	0x20000064
 8006894:	20000688 	.word	0x20000688

08006898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
  return uwTick;
 800689c:	4b02      	ldr	r3, [pc, #8]	; (80068a8 <HAL_GetTick+0x10>)
 800689e:	681b      	ldr	r3, [r3, #0]
}
 80068a0:	0018      	movs	r0, r3
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	20000688 	.word	0x20000688

080068ac <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	4b03      	ldr	r3, [pc, #12]	; (80068c4 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 80068b6:	2102      	movs	r1, #2
 80068b8:	438a      	bics	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]
}
 80068bc:	46c0      	nop			; (mov r8, r8)
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	40015800 	.word	0x40015800

080068c8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e159      	b.n	8006b8e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2250      	movs	r2, #80	; 0x50
 80068ec:	2100      	movs	r1, #0
 80068ee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	0018      	movs	r0, r3
 80068f4:	f7fe fd34 	bl	8005360 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fc:	2210      	movs	r2, #16
 80068fe:	4013      	ands	r3, r2
 8006900:	2b10      	cmp	r3, #16
 8006902:	d005      	beq.n	8006910 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	2204      	movs	r2, #4
 800690c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800690e:	d00b      	beq.n	8006928 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006914:	2210      	movs	r2, #16
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2250      	movs	r2, #80	; 0x50
 8006920:	2100      	movs	r1, #0
 8006922:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e132      	b.n	8006b8e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692c:	4a9a      	ldr	r2, [pc, #616]	; (8006b98 <HAL_ADC_Init+0x2d0>)
 800692e:	4013      	ands	r3, r2
 8006930:	2202      	movs	r2, #2
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	2203      	movs	r2, #3
 8006940:	4013      	ands	r3, r2
 8006942:	2b01      	cmp	r3, #1
 8006944:	d108      	bne.n	8006958 <HAL_ADC_Init+0x90>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2201      	movs	r2, #1
 800694e:	4013      	ands	r3, r2
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_ADC_Init+0x90>
 8006954:	2301      	movs	r3, #1
 8006956:	e000      	b.n	800695a <HAL_ADC_Init+0x92>
 8006958:	2300      	movs	r3, #0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d149      	bne.n	80069f2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	23c0      	movs	r3, #192	; 0xc0
 8006964:	061b      	lsls	r3, r3, #24
 8006966:	429a      	cmp	r2, r3
 8006968:	d00b      	beq.n	8006982 <HAL_ADC_Init+0xba>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	2380      	movs	r3, #128	; 0x80
 8006970:	05db      	lsls	r3, r3, #23
 8006972:	429a      	cmp	r2, r3
 8006974:	d005      	beq.n	8006982 <HAL_ADC_Init+0xba>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	2380      	movs	r3, #128	; 0x80
 800697c:	061b      	lsls	r3, r3, #24
 800697e:	429a      	cmp	r2, r3
 8006980:	d111      	bne.n	80069a6 <HAL_ADC_Init+0xde>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	0092      	lsls	r2, r2, #2
 800698e:	0892      	lsrs	r2, r2, #2
 8006990:	611a      	str	r2, [r3, #16]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6919      	ldr	r1, [r3, #16]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	611a      	str	r2, [r3, #16]
 80069a4:	e014      	b.n	80069d0 <HAL_ADC_Init+0x108>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	0092      	lsls	r2, r2, #2
 80069b2:	0892      	lsrs	r2, r2, #2
 80069b4:	611a      	str	r2, [r3, #16]
 80069b6:	4b79      	ldr	r3, [pc, #484]	; (8006b9c <HAL_ADC_Init+0x2d4>)
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	4b78      	ldr	r3, [pc, #480]	; (8006b9c <HAL_ADC_Init+0x2d4>)
 80069bc:	4978      	ldr	r1, [pc, #480]	; (8006ba0 <HAL_ADC_Init+0x2d8>)
 80069be:	400a      	ands	r2, r1
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	4b76      	ldr	r3, [pc, #472]	; (8006b9c <HAL_ADC_Init+0x2d4>)
 80069c4:	6819      	ldr	r1, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	4b74      	ldr	r3, [pc, #464]	; (8006b9c <HAL_ADC_Init+0x2d4>)
 80069cc:	430a      	orrs	r2, r1
 80069ce:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2118      	movs	r1, #24
 80069dc:	438a      	bics	r2, r1
 80069de:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68d9      	ldr	r1, [r3, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80069f2:	4b6a      	ldr	r3, [pc, #424]	; (8006b9c <HAL_ADC_Init+0x2d4>)
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	4b69      	ldr	r3, [pc, #420]	; (8006b9c <HAL_ADC_Init+0x2d4>)
 80069f8:	496a      	ldr	r1, [pc, #424]	; (8006ba4 <HAL_ADC_Init+0x2dc>)
 80069fa:	400a      	ands	r2, r1
 80069fc:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80069fe:	4b67      	ldr	r3, [pc, #412]	; (8006b9c <HAL_ADC_Init+0x2d4>)
 8006a00:	6819      	ldr	r1, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a06:	065a      	lsls	r2, r3, #25
 8006a08:	4b64      	ldr	r3, [pc, #400]	; (8006b9c <HAL_ADC_Init+0x2d4>)
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	2380      	movs	r3, #128	; 0x80
 8006a16:	055b      	lsls	r3, r3, #21
 8006a18:	4013      	ands	r3, r2
 8006a1a:	d108      	bne.n	8006a2e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2180      	movs	r1, #128	; 0x80
 8006a28:	0549      	lsls	r1, r1, #21
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	495b      	ldr	r1, [pc, #364]	; (8006ba8 <HAL_ADC_Init+0x2e0>)
 8006a3a:	400a      	ands	r2, r1
 8006a3c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68d9      	ldr	r1, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d101      	bne.n	8006a54 <HAL_ADC_Init+0x18c>
 8006a50:	2304      	movs	r3, #4
 8006a52:	e000      	b.n	8006a56 <HAL_ADC_Init+0x18e>
 8006a54:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006a56:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2020      	movs	r0, #32
 8006a5c:	5c1b      	ldrb	r3, [r3, r0]
 8006a5e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006a60:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	202c      	movs	r0, #44	; 0x2c
 8006a66:	5c1b      	ldrb	r3, [r3, r0]
 8006a68:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006a6a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006a70:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8006a78:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006a80:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a8e:	23c2      	movs	r3, #194	; 0xc2
 8006a90:	33ff      	adds	r3, #255	; 0xff
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d00b      	beq.n	8006aae <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68d9      	ldr	r1, [r3, #12]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2221      	movs	r2, #33	; 0x21
 8006ab2:	5c9b      	ldrb	r3, [r3, r2]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d11a      	bne.n	8006aee <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2220      	movs	r2, #32
 8006abc:	5c9b      	ldrb	r3, [r3, r2]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d109      	bne.n	8006ad6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2180      	movs	r1, #128	; 0x80
 8006ace:	0249      	lsls	r1, r1, #9
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	60da      	str	r2, [r3, #12]
 8006ad4:	e00b      	b.n	8006aee <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ada:	2220      	movs	r2, #32
 8006adc:	431a      	orrs	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d11f      	bne.n	8006b36 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	492a      	ldr	r1, [pc, #168]	; (8006bac <HAL_ADC_Init+0x2e4>)
 8006b02:	400a      	ands	r2, r1
 8006b04:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6919      	ldr	r1, [r3, #16]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006b14:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8006b1a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2101      	movs	r1, #1
 8006b30:	430a      	orrs	r2, r1
 8006b32:	611a      	str	r2, [r3, #16]
 8006b34:	e00e      	b.n	8006b54 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	4013      	ands	r3, r2
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d107      	bne.n	8006b54 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691a      	ldr	r2, [r3, #16]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2101      	movs	r1, #1
 8006b50:	438a      	bics	r2, r1
 8006b52:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695a      	ldr	r2, [r3, #20]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2107      	movs	r1, #7
 8006b60:	438a      	bics	r2, r1
 8006b62:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6959      	ldr	r1, [r3, #20]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b80:	2203      	movs	r2, #3
 8006b82:	4393      	bics	r3, r2
 8006b84:	2201      	movs	r2, #1
 8006b86:	431a      	orrs	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	0018      	movs	r0, r3
 8006b90:	46bd      	mov	sp, r7
 8006b92:	b002      	add	sp, #8
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	fffffefd 	.word	0xfffffefd
 8006b9c:	40012708 	.word	0x40012708
 8006ba0:	ffc3ffff 	.word	0xffc3ffff
 8006ba4:	fdffffff 	.word	0xfdffffff
 8006ba8:	fffe0219 	.word	0xfffe0219
 8006bac:	fffffc03 	.word	0xfffffc03

08006bb0 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006bb0:	b590      	push	{r4, r7, lr}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bbc:	2317      	movs	r3, #23
 8006bbe:	18fb      	adds	r3, r7, r3
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2204      	movs	r2, #4
 8006bcc:	4013      	ands	r3, r2
 8006bce:	d15e      	bne.n	8006c8e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2250      	movs	r2, #80	; 0x50
 8006bd4:	5c9b      	ldrb	r3, [r3, r2]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d101      	bne.n	8006bde <HAL_ADC_Start_DMA+0x2e>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e05e      	b.n	8006c9c <HAL_ADC_Start_DMA+0xec>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2250      	movs	r2, #80	; 0x50
 8006be2:	2101      	movs	r1, #1
 8006be4:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d007      	beq.n	8006c0e <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006bfe:	2317      	movs	r3, #23
 8006c00:	18fc      	adds	r4, r7, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	0018      	movs	r0, r3
 8006c06:	f000 f8f3 	bl	8006df0 <ADC_Enable>
 8006c0a:	0003      	movs	r3, r0
 8006c0c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006c0e:	2317      	movs	r3, #23
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d13e      	bne.n	8006c96 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1c:	4a21      	ldr	r2, [pc, #132]	; (8006ca4 <HAL_ADC_Start_DMA+0xf4>)
 8006c1e:	4013      	ands	r3, r2
 8006c20:	2280      	movs	r2, #128	; 0x80
 8006c22:	0052      	lsls	r2, r2, #1
 8006c24:	431a      	orrs	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2250      	movs	r2, #80	; 0x50
 8006c34:	2100      	movs	r1, #0
 8006c36:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3c:	4a1a      	ldr	r2, [pc, #104]	; (8006ca8 <HAL_ADC_Start_DMA+0xf8>)
 8006c3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c44:	4a19      	ldr	r2, [pc, #100]	; (8006cac <HAL_ADC_Start_DMA+0xfc>)
 8006c46:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4c:	4a18      	ldr	r2, [pc, #96]	; (8006cb0 <HAL_ADC_Start_DMA+0x100>)
 8006c4e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	221c      	movs	r2, #28
 8006c56:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2110      	movs	r1, #16
 8006c64:	430a      	orrs	r2, r1
 8006c66:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3340      	adds	r3, #64	; 0x40
 8006c72:	0019      	movs	r1, r3
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f000 fbba 	bl	80073f0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2104      	movs	r1, #4
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	609a      	str	r2, [r3, #8]
 8006c8c:	e003      	b.n	8006c96 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006c8e:	2317      	movs	r3, #23
 8006c90:	18fb      	adds	r3, r7, r3
 8006c92:	2202      	movs	r2, #2
 8006c94:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006c96:	2317      	movs	r3, #23
 8006c98:	18fb      	adds	r3, r7, r3
 8006c9a:	781b      	ldrb	r3, [r3, #0]
}
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	b007      	add	sp, #28
 8006ca2:	bd90      	pop	{r4, r7, pc}
 8006ca4:	fffff0fe 	.word	0xfffff0fe
 8006ca8:	08006ec1 	.word	0x08006ec1
 8006cac:	08006f75 	.word	0x08006f75
 8006cb0:	08006f93 	.word	0x08006f93

08006cb4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006cbc:	46c0      	nop			; (mov r8, r8)
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b002      	add	sp, #8
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006ccc:	46c0      	nop			; (mov r8, r8)
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	b002      	add	sp, #8
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006cdc:	46c0      	nop			; (mov r8, r8)
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	b002      	add	sp, #8
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2250      	movs	r2, #80	; 0x50
 8006cf2:	5c9b      	ldrb	r3, [r3, r2]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_ADC_ConfigChannel+0x18>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e06c      	b.n	8006dd6 <HAL_ADC_ConfigChannel+0xf2>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2250      	movs	r2, #80	; 0x50
 8006d00:	2101      	movs	r1, #1
 8006d02:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	2204      	movs	r2, #4
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	d00b      	beq.n	8006d28 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d14:	2220      	movs	r2, #32
 8006d16:	431a      	orrs	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2250      	movs	r2, #80	; 0x50
 8006d20:	2100      	movs	r1, #0
 8006d22:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e056      	b.n	8006dd6 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	4a2c      	ldr	r2, [pc, #176]	; (8006de0 <HAL_ADC_ConfigChannel+0xfc>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d028      	beq.n	8006d84 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	035b      	lsls	r3, r3, #13
 8006d3e:	0b5a      	lsrs	r2, r3, #13
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	2380      	movs	r3, #128	; 0x80
 8006d4e:	02db      	lsls	r3, r3, #11
 8006d50:	4013      	ands	r3, r2
 8006d52:	d009      	beq.n	8006d68 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006d54:	4b23      	ldr	r3, [pc, #140]	; (8006de4 <HAL_ADC_ConfigChannel+0x100>)
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	4b22      	ldr	r3, [pc, #136]	; (8006de4 <HAL_ADC_ConfigChannel+0x100>)
 8006d5a:	2180      	movs	r1, #128	; 0x80
 8006d5c:	0409      	lsls	r1, r1, #16
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006d62:	200a      	movs	r0, #10
 8006d64:	f000 f930 	bl	8006fc8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	2380      	movs	r3, #128	; 0x80
 8006d6e:	029b      	lsls	r3, r3, #10
 8006d70:	4013      	ands	r3, r2
 8006d72:	d02b      	beq.n	8006dcc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006d74:	4b1b      	ldr	r3, [pc, #108]	; (8006de4 <HAL_ADC_ConfigChannel+0x100>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <HAL_ADC_ConfigChannel+0x100>)
 8006d7a:	2180      	movs	r1, #128	; 0x80
 8006d7c:	03c9      	lsls	r1, r1, #15
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	e023      	b.n	8006dcc <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	035b      	lsls	r3, r3, #13
 8006d90:	0b5b      	lsrs	r3, r3, #13
 8006d92:	43d9      	mvns	r1, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	400a      	ands	r2, r1
 8006d9a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	02db      	lsls	r3, r3, #11
 8006da4:	4013      	ands	r3, r2
 8006da6:	d005      	beq.n	8006db4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006da8:	4b0e      	ldr	r3, [pc, #56]	; (8006de4 <HAL_ADC_ConfigChannel+0x100>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <HAL_ADC_ConfigChannel+0x100>)
 8006dae:	490e      	ldr	r1, [pc, #56]	; (8006de8 <HAL_ADC_ConfigChannel+0x104>)
 8006db0:	400a      	ands	r2, r1
 8006db2:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	2380      	movs	r3, #128	; 0x80
 8006dba:	029b      	lsls	r3, r3, #10
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	d005      	beq.n	8006dcc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006dc0:	4b08      	ldr	r3, [pc, #32]	; (8006de4 <HAL_ADC_ConfigChannel+0x100>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <HAL_ADC_ConfigChannel+0x100>)
 8006dc6:	4909      	ldr	r1, [pc, #36]	; (8006dec <HAL_ADC_ConfigChannel+0x108>)
 8006dc8:	400a      	ands	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2250      	movs	r2, #80	; 0x50
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	b002      	add	sp, #8
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	00001001 	.word	0x00001001
 8006de4:	40012708 	.word	0x40012708
 8006de8:	ff7fffff 	.word	0xff7fffff
 8006dec:	ffbfffff 	.word	0xffbfffff

08006df0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2203      	movs	r2, #3
 8006e04:	4013      	ands	r3, r2
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d108      	bne.n	8006e1c <ADC_Enable+0x2c>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2201      	movs	r2, #1
 8006e12:	4013      	ands	r3, r2
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <ADC_Enable+0x2c>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e000      	b.n	8006e1e <ADC_Enable+0x2e>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d146      	bne.n	8006eb0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	4a24      	ldr	r2, [pc, #144]	; (8006ebc <ADC_Enable+0xcc>)
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	d00d      	beq.n	8006e4a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e32:	2210      	movs	r2, #16
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3e:	2201      	movs	r2, #1
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e033      	b.n	8006eb2 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2101      	movs	r1, #1
 8006e56:	430a      	orrs	r2, r1
 8006e58:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006e5a:	2001      	movs	r0, #1
 8006e5c:	f000 f8b4 	bl	8006fc8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006e60:	f7ff fd1a 	bl	8006898 <HAL_GetTick>
 8006e64:	0003      	movs	r3, r0
 8006e66:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006e68:	e01b      	b.n	8006ea2 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006e6a:	f7ff fd15 	bl	8006898 <HAL_GetTick>
 8006e6e:	0002      	movs	r2, r0
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b0a      	cmp	r3, #10
 8006e76:	d914      	bls.n	8006ea2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	4013      	ands	r3, r2
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d00d      	beq.n	8006ea2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8a:	2210      	movs	r2, #16
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e96:	2201      	movs	r2, #1
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e007      	b.n	8006eb2 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d1dc      	bne.n	8006e6a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	b004      	add	sp, #16
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	46c0      	nop			; (mov r8, r8)
 8006ebc:	80000017 	.word	0x80000017

08006ec0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ecc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed2:	2250      	movs	r2, #80	; 0x50
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	d141      	bne.n	8006f5c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006edc:	2280      	movs	r2, #128	; 0x80
 8006ede:	0092      	lsls	r2, r2, #2
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	23c0      	movs	r3, #192	; 0xc0
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	d12e      	bne.n	8006f52 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d129      	bne.n	8006f52 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2208      	movs	r2, #8
 8006f06:	4013      	ands	r3, r2
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d122      	bne.n	8006f52 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2204      	movs	r2, #4
 8006f14:	4013      	ands	r3, r2
 8006f16:	d110      	bne.n	8006f3a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	210c      	movs	r1, #12
 8006f24:	438a      	bics	r2, r1
 8006f26:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2c:	4a10      	ldr	r2, [pc, #64]	; (8006f70 <ADC_DMAConvCplt+0xb0>)
 8006f2e:	4013      	ands	r3, r2
 8006f30:	2201      	movs	r2, #1
 8006f32:	431a      	orrs	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	655a      	str	r2, [r3, #84]	; 0x54
 8006f38:	e00b      	b.n	8006f52 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3e:	2220      	movs	r2, #32
 8006f40:	431a      	orrs	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	0018      	movs	r0, r3
 8006f56:	f7ff fead 	bl	8006cb4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006f5a:	e005      	b.n	8006f68 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	0010      	movs	r0, r2
 8006f66:	4798      	blx	r3
}
 8006f68:	46c0      	nop			; (mov r8, r8)
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	b004      	add	sp, #16
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	fffffefe 	.word	0xfffffefe

08006f74 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f80:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	0018      	movs	r0, r3
 8006f86:	f7ff fe9d 	bl	8006cc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	b004      	add	sp, #16
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa4:	2240      	movs	r2, #64	; 0x40
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb0:	2204      	movs	r2, #4
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f7ff fe8a 	bl	8006cd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006fc0:	46c0      	nop			; (mov r8, r8)
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	b004      	add	sp, #16
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <ADC_DelayMicroSecond+0x38>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	490b      	ldr	r1, [pc, #44]	; (8007004 <ADC_DelayMicroSecond+0x3c>)
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f7f9 f8b2 	bl	8000140 <__udivsi3>
 8006fdc:	0003      	movs	r3, r0
 8006fde:	001a      	movs	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4353      	muls	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8006fe6:	e002      	b.n	8006fee <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3b01      	subs	r3, #1
 8006fec:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1f9      	bne.n	8006fe8 <ADC_DelayMicroSecond+0x20>
  } 
}
 8006ff4:	46c0      	nop			; (mov r8, r8)
 8006ff6:	46c0      	nop			; (mov r8, r8)
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	b004      	add	sp, #16
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	2000005c 	.word	0x2000005c
 8007004:	000f4240 	.word	0x000f4240

08007008 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007012:	2317      	movs	r3, #23
 8007014:	18fb      	adds	r3, r7, r3
 8007016:	2200      	movs	r2, #0
 8007018:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2250      	movs	r2, #80	; 0x50
 8007026:	5c9b      	ldrb	r3, [r3, r2]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_ADCEx_Calibration_Start+0x28>
 800702c:	2302      	movs	r3, #2
 800702e:	e083      	b.n	8007138 <HAL_ADCEx_Calibration_Start+0x130>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2250      	movs	r2, #80	; 0x50
 8007034:	2101      	movs	r1, #1
 8007036:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2203      	movs	r2, #3
 8007040:	4013      	ands	r3, r2
 8007042:	2b01      	cmp	r3, #1
 8007044:	d108      	bne.n	8007058 <HAL_ADCEx_Calibration_Start+0x50>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2201      	movs	r2, #1
 800704e:	4013      	ands	r3, r2
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_ADCEx_Calibration_Start+0x50>
 8007054:	2301      	movs	r3, #1
 8007056:	e000      	b.n	800705a <HAL_ADCEx_Calibration_Start+0x52>
 8007058:	2300      	movs	r3, #0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d15b      	bne.n	8007116 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007062:	4a37      	ldr	r2, [pc, #220]	; (8007140 <HAL_ADCEx_Calibration_Start+0x138>)
 8007064:	4013      	ands	r3, r2
 8007066:	2202      	movs	r2, #2
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	2203      	movs	r2, #3
 8007076:	4013      	ands	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2103      	movs	r1, #3
 8007086:	438a      	bics	r2, r1
 8007088:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2180      	movs	r1, #128	; 0x80
 8007096:	0609      	lsls	r1, r1, #24
 8007098:	430a      	orrs	r2, r1
 800709a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800709c:	f7ff fbfc 	bl	8006898 <HAL_GetTick>
 80070a0:	0003      	movs	r3, r0
 80070a2:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80070a4:	e01d      	b.n	80070e2 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80070a6:	f7ff fbf7 	bl	8006898 <HAL_GetTick>
 80070aa:	0002      	movs	r2, r0
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	2b0a      	cmp	r3, #10
 80070b2:	d916      	bls.n	80070e2 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	0fdb      	lsrs	r3, r3, #31
 80070bc:	07da      	lsls	r2, r3, #31
 80070be:	2380      	movs	r3, #128	; 0x80
 80070c0:	061b      	lsls	r3, r3, #24
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d10d      	bne.n	80070e2 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ca:	2212      	movs	r2, #18
 80070cc:	4393      	bics	r3, r2
 80070ce:	2210      	movs	r2, #16
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2250      	movs	r2, #80	; 0x50
 80070da:	2100      	movs	r1, #0
 80070dc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e02a      	b.n	8007138 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	0fdb      	lsrs	r3, r3, #31
 80070ea:	07da      	lsls	r2, r3, #31
 80070ec:	2380      	movs	r3, #128	; 0x80
 80070ee:	061b      	lsls	r3, r3, #24
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d0d8      	beq.n	80070a6 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68d9      	ldr	r1, [r3, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	430a      	orrs	r2, r1
 8007102:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007108:	2203      	movs	r2, #3
 800710a:	4393      	bics	r3, r2
 800710c:	2201      	movs	r2, #1
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	655a      	str	r2, [r3, #84]	; 0x54
 8007114:	e009      	b.n	800712a <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711a:	2220      	movs	r2, #32
 800711c:	431a      	orrs	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8007122:	2317      	movs	r3, #23
 8007124:	18fb      	adds	r3, r7, r3
 8007126:	2201      	movs	r2, #1
 8007128:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2250      	movs	r2, #80	; 0x50
 800712e:	2100      	movs	r1, #0
 8007130:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8007132:	2317      	movs	r3, #23
 8007134:	18fb      	adds	r3, r7, r3
 8007136:	781b      	ldrb	r3, [r3, #0]
}
 8007138:	0018      	movs	r0, r3
 800713a:	46bd      	mov	sp, r7
 800713c:	b006      	add	sp, #24
 800713e:	bd80      	pop	{r7, pc}
 8007140:	fffffefd 	.word	0xfffffefd

08007144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	0002      	movs	r2, r0
 800714c:	1dfb      	adds	r3, r7, #7
 800714e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007150:	1dfb      	adds	r3, r7, #7
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b7f      	cmp	r3, #127	; 0x7f
 8007156:	d809      	bhi.n	800716c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007158:	1dfb      	adds	r3, r7, #7
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	001a      	movs	r2, r3
 800715e:	231f      	movs	r3, #31
 8007160:	401a      	ands	r2, r3
 8007162:	4b04      	ldr	r3, [pc, #16]	; (8007174 <__NVIC_EnableIRQ+0x30>)
 8007164:	2101      	movs	r1, #1
 8007166:	4091      	lsls	r1, r2
 8007168:	000a      	movs	r2, r1
 800716a:	601a      	str	r2, [r3, #0]
  }
}
 800716c:	46c0      	nop			; (mov r8, r8)
 800716e:	46bd      	mov	sp, r7
 8007170:	b002      	add	sp, #8
 8007172:	bd80      	pop	{r7, pc}
 8007174:	e000e100 	.word	0xe000e100

08007178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007178:	b590      	push	{r4, r7, lr}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	0002      	movs	r2, r0
 8007180:	6039      	str	r1, [r7, #0]
 8007182:	1dfb      	adds	r3, r7, #7
 8007184:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007186:	1dfb      	adds	r3, r7, #7
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b7f      	cmp	r3, #127	; 0x7f
 800718c:	d828      	bhi.n	80071e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800718e:	4a2f      	ldr	r2, [pc, #188]	; (800724c <__NVIC_SetPriority+0xd4>)
 8007190:	1dfb      	adds	r3, r7, #7
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	b25b      	sxtb	r3, r3
 8007196:	089b      	lsrs	r3, r3, #2
 8007198:	33c0      	adds	r3, #192	; 0xc0
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	589b      	ldr	r3, [r3, r2]
 800719e:	1dfa      	adds	r2, r7, #7
 80071a0:	7812      	ldrb	r2, [r2, #0]
 80071a2:	0011      	movs	r1, r2
 80071a4:	2203      	movs	r2, #3
 80071a6:	400a      	ands	r2, r1
 80071a8:	00d2      	lsls	r2, r2, #3
 80071aa:	21ff      	movs	r1, #255	; 0xff
 80071ac:	4091      	lsls	r1, r2
 80071ae:	000a      	movs	r2, r1
 80071b0:	43d2      	mvns	r2, r2
 80071b2:	401a      	ands	r2, r3
 80071b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	019b      	lsls	r3, r3, #6
 80071ba:	22ff      	movs	r2, #255	; 0xff
 80071bc:	401a      	ands	r2, r3
 80071be:	1dfb      	adds	r3, r7, #7
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	0018      	movs	r0, r3
 80071c4:	2303      	movs	r3, #3
 80071c6:	4003      	ands	r3, r0
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80071cc:	481f      	ldr	r0, [pc, #124]	; (800724c <__NVIC_SetPriority+0xd4>)
 80071ce:	1dfb      	adds	r3, r7, #7
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	b25b      	sxtb	r3, r3
 80071d4:	089b      	lsrs	r3, r3, #2
 80071d6:	430a      	orrs	r2, r1
 80071d8:	33c0      	adds	r3, #192	; 0xc0
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80071de:	e031      	b.n	8007244 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80071e0:	4a1b      	ldr	r2, [pc, #108]	; (8007250 <__NVIC_SetPriority+0xd8>)
 80071e2:	1dfb      	adds	r3, r7, #7
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	0019      	movs	r1, r3
 80071e8:	230f      	movs	r3, #15
 80071ea:	400b      	ands	r3, r1
 80071ec:	3b08      	subs	r3, #8
 80071ee:	089b      	lsrs	r3, r3, #2
 80071f0:	3306      	adds	r3, #6
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	18d3      	adds	r3, r2, r3
 80071f6:	3304      	adds	r3, #4
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	1dfa      	adds	r2, r7, #7
 80071fc:	7812      	ldrb	r2, [r2, #0]
 80071fe:	0011      	movs	r1, r2
 8007200:	2203      	movs	r2, #3
 8007202:	400a      	ands	r2, r1
 8007204:	00d2      	lsls	r2, r2, #3
 8007206:	21ff      	movs	r1, #255	; 0xff
 8007208:	4091      	lsls	r1, r2
 800720a:	000a      	movs	r2, r1
 800720c:	43d2      	mvns	r2, r2
 800720e:	401a      	ands	r2, r3
 8007210:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	019b      	lsls	r3, r3, #6
 8007216:	22ff      	movs	r2, #255	; 0xff
 8007218:	401a      	ands	r2, r3
 800721a:	1dfb      	adds	r3, r7, #7
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	0018      	movs	r0, r3
 8007220:	2303      	movs	r3, #3
 8007222:	4003      	ands	r3, r0
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007228:	4809      	ldr	r0, [pc, #36]	; (8007250 <__NVIC_SetPriority+0xd8>)
 800722a:	1dfb      	adds	r3, r7, #7
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	001c      	movs	r4, r3
 8007230:	230f      	movs	r3, #15
 8007232:	4023      	ands	r3, r4
 8007234:	3b08      	subs	r3, #8
 8007236:	089b      	lsrs	r3, r3, #2
 8007238:	430a      	orrs	r2, r1
 800723a:	3306      	adds	r3, #6
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	18c3      	adds	r3, r0, r3
 8007240:	3304      	adds	r3, #4
 8007242:	601a      	str	r2, [r3, #0]
}
 8007244:	46c0      	nop			; (mov r8, r8)
 8007246:	46bd      	mov	sp, r7
 8007248:	b003      	add	sp, #12
 800724a:	bd90      	pop	{r4, r7, pc}
 800724c:	e000e100 	.word	0xe000e100
 8007250:	e000ed00 	.word	0xe000ed00

08007254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	1e5a      	subs	r2, r3, #1
 8007260:	2380      	movs	r3, #128	; 0x80
 8007262:	045b      	lsls	r3, r3, #17
 8007264:	429a      	cmp	r2, r3
 8007266:	d301      	bcc.n	800726c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007268:	2301      	movs	r3, #1
 800726a:	e010      	b.n	800728e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800726c:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <SysTick_Config+0x44>)
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	3a01      	subs	r2, #1
 8007272:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007274:	2301      	movs	r3, #1
 8007276:	425b      	negs	r3, r3
 8007278:	2103      	movs	r1, #3
 800727a:	0018      	movs	r0, r3
 800727c:	f7ff ff7c 	bl	8007178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007280:	4b05      	ldr	r3, [pc, #20]	; (8007298 <SysTick_Config+0x44>)
 8007282:	2200      	movs	r2, #0
 8007284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007286:	4b04      	ldr	r3, [pc, #16]	; (8007298 <SysTick_Config+0x44>)
 8007288:	2207      	movs	r2, #7
 800728a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800728c:	2300      	movs	r3, #0
}
 800728e:	0018      	movs	r0, r3
 8007290:	46bd      	mov	sp, r7
 8007292:	b002      	add	sp, #8
 8007294:	bd80      	pop	{r7, pc}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	e000e010 	.word	0xe000e010

0800729c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	607a      	str	r2, [r7, #4]
 80072a6:	210f      	movs	r1, #15
 80072a8:	187b      	adds	r3, r7, r1
 80072aa:	1c02      	adds	r2, r0, #0
 80072ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	187b      	adds	r3, r7, r1
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	b25b      	sxtb	r3, r3
 80072b6:	0011      	movs	r1, r2
 80072b8:	0018      	movs	r0, r3
 80072ba:	f7ff ff5d 	bl	8007178 <__NVIC_SetPriority>
}
 80072be:	46c0      	nop			; (mov r8, r8)
 80072c0:	46bd      	mov	sp, r7
 80072c2:	b004      	add	sp, #16
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b082      	sub	sp, #8
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	0002      	movs	r2, r0
 80072ce:	1dfb      	adds	r3, r7, #7
 80072d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072d2:	1dfb      	adds	r3, r7, #7
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	b25b      	sxtb	r3, r3
 80072d8:	0018      	movs	r0, r3
 80072da:	f7ff ff33 	bl	8007144 <__NVIC_EnableIRQ>
}
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b002      	add	sp, #8
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	0018      	movs	r0, r3
 80072f2:	f7ff ffaf 	bl	8007254 <SysTick_Config>
 80072f6:	0003      	movs	r3, r0
}
 80072f8:	0018      	movs	r0, r3
 80072fa:	46bd      	mov	sp, r7
 80072fc:	b002      	add	sp, #8
 80072fe:	bd80      	pop	{r7, pc}

08007300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e061      	b.n	80073d6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a32      	ldr	r2, [pc, #200]	; (80073e0 <HAL_DMA_Init+0xe0>)
 8007318:	4694      	mov	ip, r2
 800731a:	4463      	add	r3, ip
 800731c:	2114      	movs	r1, #20
 800731e:	0018      	movs	r0, r3
 8007320:	f7f8 ff0e 	bl	8000140 <__udivsi3>
 8007324:	0003      	movs	r3, r0
 8007326:	009a      	lsls	r2, r3, #2
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a2d      	ldr	r2, [pc, #180]	; (80073e4 <HAL_DMA_Init+0xe4>)
 8007330:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2225      	movs	r2, #37	; 0x25
 8007336:	2102      	movs	r1, #2
 8007338:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4a28      	ldr	r2, [pc, #160]	; (80073e8 <HAL_DMA_Init+0xe8>)
 8007346:	4013      	ands	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007352:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800735e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800736a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	4313      	orrs	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	2380      	movs	r3, #128	; 0x80
 8007386:	01db      	lsls	r3, r3, #7
 8007388:	429a      	cmp	r2, r3
 800738a:	d018      	beq.n	80073be <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800738c:	4b17      	ldr	r3, [pc, #92]	; (80073ec <HAL_DMA_Init+0xec>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007394:	211c      	movs	r1, #28
 8007396:	400b      	ands	r3, r1
 8007398:	210f      	movs	r1, #15
 800739a:	4099      	lsls	r1, r3
 800739c:	000b      	movs	r3, r1
 800739e:	43d9      	mvns	r1, r3
 80073a0:	4b12      	ldr	r3, [pc, #72]	; (80073ec <HAL_DMA_Init+0xec>)
 80073a2:	400a      	ands	r2, r1
 80073a4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80073a6:	4b11      	ldr	r3, [pc, #68]	; (80073ec <HAL_DMA_Init+0xec>)
 80073a8:	6819      	ldr	r1, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b2:	201c      	movs	r0, #28
 80073b4:	4003      	ands	r3, r0
 80073b6:	409a      	lsls	r2, r3
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <HAL_DMA_Init+0xec>)
 80073ba:	430a      	orrs	r2, r1
 80073bc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2225      	movs	r2, #37	; 0x25
 80073c8:	2101      	movs	r1, #1
 80073ca:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2224      	movs	r2, #36	; 0x24
 80073d0:	2100      	movs	r1, #0
 80073d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	0018      	movs	r0, r3
 80073d8:	46bd      	mov	sp, r7
 80073da:	b004      	add	sp, #16
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	bffdfff8 	.word	0xbffdfff8
 80073e4:	40020000 	.word	0x40020000
 80073e8:	ffff800f 	.word	0xffff800f
 80073ec:	400200a8 	.word	0x400200a8

080073f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
 80073fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073fe:	2317      	movs	r3, #23
 8007400:	18fb      	adds	r3, r7, r3
 8007402:	2200      	movs	r2, #0
 8007404:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2224      	movs	r2, #36	; 0x24
 800740a:	5c9b      	ldrb	r3, [r3, r2]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d101      	bne.n	8007414 <HAL_DMA_Start_IT+0x24>
 8007410:	2302      	movs	r3, #2
 8007412:	e04f      	b.n	80074b4 <HAL_DMA_Start_IT+0xc4>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2224      	movs	r2, #36	; 0x24
 8007418:	2101      	movs	r1, #1
 800741a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2225      	movs	r2, #37	; 0x25
 8007420:	5c9b      	ldrb	r3, [r3, r2]
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b01      	cmp	r3, #1
 8007426:	d13a      	bne.n	800749e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2225      	movs	r2, #37	; 0x25
 800742c:	2102      	movs	r1, #2
 800742e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2101      	movs	r1, #1
 8007442:	438a      	bics	r2, r1
 8007444:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	68b9      	ldr	r1, [r7, #8]
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 f92d 	bl	80076ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007456:	2b00      	cmp	r3, #0
 8007458:	d008      	beq.n	800746c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	210e      	movs	r1, #14
 8007466:	430a      	orrs	r2, r1
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	e00f      	b.n	800748c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2104      	movs	r1, #4
 8007478:	438a      	bics	r2, r1
 800747a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	210a      	movs	r1, #10
 8007488:	430a      	orrs	r2, r1
 800748a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2101      	movs	r1, #1
 8007498:	430a      	orrs	r2, r1
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	e007      	b.n	80074ae <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2224      	movs	r2, #36	; 0x24
 80074a2:	2100      	movs	r1, #0
 80074a4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80074a6:	2317      	movs	r3, #23
 80074a8:	18fb      	adds	r3, r7, r3
 80074aa:	2202      	movs	r2, #2
 80074ac:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80074ae:	2317      	movs	r3, #23
 80074b0:	18fb      	adds	r3, r7, r3
 80074b2:	781b      	ldrb	r3, [r3, #0]
}
 80074b4:	0018      	movs	r0, r3
 80074b6:	46bd      	mov	sp, r7
 80074b8:	b006      	add	sp, #24
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074c4:	230f      	movs	r3, #15
 80074c6:	18fb      	adds	r3, r7, r3
 80074c8:	2200      	movs	r2, #0
 80074ca:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2225      	movs	r2, #37	; 0x25
 80074d0:	5c9b      	ldrb	r3, [r3, r2]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d008      	beq.n	80074ea <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2204      	movs	r2, #4
 80074dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2224      	movs	r2, #36	; 0x24
 80074e2:	2100      	movs	r1, #0
 80074e4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e024      	b.n	8007534 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	210e      	movs	r1, #14
 80074f6:	438a      	bics	r2, r1
 80074f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2101      	movs	r1, #1
 8007506:	438a      	bics	r2, r1
 8007508:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750e:	221c      	movs	r2, #28
 8007510:	401a      	ands	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	2101      	movs	r1, #1
 8007518:	4091      	lsls	r1, r2
 800751a:	000a      	movs	r2, r1
 800751c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2225      	movs	r2, #37	; 0x25
 8007522:	2101      	movs	r1, #1
 8007524:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2224      	movs	r2, #36	; 0x24
 800752a:	2100      	movs	r1, #0
 800752c:	5499      	strb	r1, [r3, r2]

    return status;
 800752e:	230f      	movs	r3, #15
 8007530:	18fb      	adds	r3, r7, r3
 8007532:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007534:	0018      	movs	r0, r3
 8007536:	46bd      	mov	sp, r7
 8007538:	b004      	add	sp, #16
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007558:	221c      	movs	r2, #28
 800755a:	4013      	ands	r3, r2
 800755c:	2204      	movs	r2, #4
 800755e:	409a      	lsls	r2, r3
 8007560:	0013      	movs	r3, r2
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	4013      	ands	r3, r2
 8007566:	d026      	beq.n	80075b6 <HAL_DMA_IRQHandler+0x7a>
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2204      	movs	r2, #4
 800756c:	4013      	ands	r3, r2
 800756e:	d022      	beq.n	80075b6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2220      	movs	r2, #32
 8007578:	4013      	ands	r3, r2
 800757a:	d107      	bne.n	800758c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2104      	movs	r1, #4
 8007588:	438a      	bics	r2, r1
 800758a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007590:	221c      	movs	r2, #28
 8007592:	401a      	ands	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	2104      	movs	r1, #4
 800759a:	4091      	lsls	r1, r2
 800759c:	000a      	movs	r2, r1
 800759e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d100      	bne.n	80075aa <HAL_DMA_IRQHandler+0x6e>
 80075a8:	e071      	b.n	800768e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	0010      	movs	r0, r2
 80075b2:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80075b4:	e06b      	b.n	800768e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ba:	221c      	movs	r2, #28
 80075bc:	4013      	ands	r3, r2
 80075be:	2202      	movs	r2, #2
 80075c0:	409a      	lsls	r2, r3
 80075c2:	0013      	movs	r3, r2
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	4013      	ands	r3, r2
 80075c8:	d02d      	beq.n	8007626 <HAL_DMA_IRQHandler+0xea>
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2202      	movs	r2, #2
 80075ce:	4013      	ands	r3, r2
 80075d0:	d029      	beq.n	8007626 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2220      	movs	r2, #32
 80075da:	4013      	ands	r3, r2
 80075dc:	d10b      	bne.n	80075f6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	210a      	movs	r1, #10
 80075ea:	438a      	bics	r2, r1
 80075ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2225      	movs	r2, #37	; 0x25
 80075f2:	2101      	movs	r1, #1
 80075f4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fa:	221c      	movs	r2, #28
 80075fc:	401a      	ands	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	2102      	movs	r1, #2
 8007604:	4091      	lsls	r1, r2
 8007606:	000a      	movs	r2, r1
 8007608:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2224      	movs	r2, #36	; 0x24
 800760e:	2100      	movs	r1, #0
 8007610:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	2b00      	cmp	r3, #0
 8007618:	d039      	beq.n	800768e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	0010      	movs	r0, r2
 8007622:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007624:	e033      	b.n	800768e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762a:	221c      	movs	r2, #28
 800762c:	4013      	ands	r3, r2
 800762e:	2208      	movs	r2, #8
 8007630:	409a      	lsls	r2, r3
 8007632:	0013      	movs	r3, r2
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	4013      	ands	r3, r2
 8007638:	d02a      	beq.n	8007690 <HAL_DMA_IRQHandler+0x154>
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2208      	movs	r2, #8
 800763e:	4013      	ands	r3, r2
 8007640:	d026      	beq.n	8007690 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	210e      	movs	r1, #14
 800764e:	438a      	bics	r2, r1
 8007650:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007656:	221c      	movs	r2, #28
 8007658:	401a      	ands	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	2101      	movs	r1, #1
 8007660:	4091      	lsls	r1, r2
 8007662:	000a      	movs	r2, r1
 8007664:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2225      	movs	r2, #37	; 0x25
 8007670:	2101      	movs	r1, #1
 8007672:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2224      	movs	r2, #36	; 0x24
 8007678:	2100      	movs	r1, #0
 800767a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007680:	2b00      	cmp	r3, #0
 8007682:	d005      	beq.n	8007690 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	0010      	movs	r0, r2
 800768c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	46c0      	nop			; (mov r8, r8)
}
 8007692:	46bd      	mov	sp, r7
 8007694:	b004      	add	sp, #16
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80076a4:	0018      	movs	r0, r3
 80076a6:	46bd      	mov	sp, r7
 80076a8:	b002      	add	sp, #8
 80076aa:	bd80      	pop	{r7, pc}

080076ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076be:	221c      	movs	r2, #28
 80076c0:	401a      	ands	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	2101      	movs	r1, #1
 80076c8:	4091      	lsls	r1, r2
 80076ca:	000a      	movs	r2, r1
 80076cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	2b10      	cmp	r3, #16
 80076dc:	d108      	bne.n	80076f0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80076ee:	e007      	b.n	8007700 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	60da      	str	r2, [r3, #12]
}
 8007700:	46c0      	nop			; (mov r8, r8)
 8007702:	46bd      	mov	sp, r7
 8007704:	b004      	add	sp, #16
 8007706:	bd80      	pop	{r7, pc}

08007708 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8007710:	f7ff f8c2 	bl	8006898 <HAL_GetTick>
 8007714:	0003      	movs	r3, r0
 8007716:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007718:	e00f      	b.n	800773a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3301      	adds	r3, #1
 800771e:	d00c      	beq.n	800773a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d007      	beq.n	8007736 <FLASH_WaitForLastOperation+0x2e>
 8007726:	f7ff f8b7 	bl	8006898 <HAL_GetTick>
 800772a:	0002      	movs	r2, r0
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	429a      	cmp	r2, r3
 8007734:	d201      	bcs.n	800773a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e052      	b.n	80077e0 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800773a:	4b2b      	ldr	r3, [pc, #172]	; (80077e8 <FLASH_WaitForLastOperation+0xe0>)
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	2201      	movs	r2, #1
 8007740:	4013      	ands	r3, r2
 8007742:	2b01      	cmp	r3, #1
 8007744:	d0e9      	beq.n	800771a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007746:	4b28      	ldr	r3, [pc, #160]	; (80077e8 <FLASH_WaitForLastOperation+0xe0>)
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	2202      	movs	r2, #2
 800774c:	4013      	ands	r3, r2
 800774e:	2b02      	cmp	r3, #2
 8007750:	d102      	bne.n	8007758 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007752:	4b25      	ldr	r3, [pc, #148]	; (80077e8 <FLASH_WaitForLastOperation+0xe0>)
 8007754:	2202      	movs	r2, #2
 8007756:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8007758:	4b23      	ldr	r3, [pc, #140]	; (80077e8 <FLASH_WaitForLastOperation+0xe0>)
 800775a:	699a      	ldr	r2, [r3, #24]
 800775c:	2380      	movs	r3, #128	; 0x80
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	401a      	ands	r2, r3
 8007762:	2380      	movs	r3, #128	; 0x80
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	429a      	cmp	r2, r3
 8007768:	d035      	beq.n	80077d6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800776a:	4b1f      	ldr	r3, [pc, #124]	; (80077e8 <FLASH_WaitForLastOperation+0xe0>)
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	2380      	movs	r3, #128	; 0x80
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8007774:	2380      	movs	r3, #128	; 0x80
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	429a      	cmp	r2, r3
 800777a:	d02c      	beq.n	80077d6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800777c:	4b1a      	ldr	r3, [pc, #104]	; (80077e8 <FLASH_WaitForLastOperation+0xe0>)
 800777e:	699a      	ldr	r2, [r3, #24]
 8007780:	2380      	movs	r3, #128	; 0x80
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8007786:	2380      	movs	r3, #128	; 0x80
 8007788:	00db      	lsls	r3, r3, #3
 800778a:	429a      	cmp	r2, r3
 800778c:	d023      	beq.n	80077d6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800778e:	4b16      	ldr	r3, [pc, #88]	; (80077e8 <FLASH_WaitForLastOperation+0xe0>)
 8007790:	699a      	ldr	r2, [r3, #24]
 8007792:	2380      	movs	r3, #128	; 0x80
 8007794:	011b      	lsls	r3, r3, #4
 8007796:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8007798:	2380      	movs	r3, #128	; 0x80
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	429a      	cmp	r2, r3
 800779e:	d01a      	beq.n	80077d6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80077a0:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <FLASH_WaitForLastOperation+0xe0>)
 80077a2:	699a      	ldr	r2, [r3, #24]
 80077a4:	2380      	movs	r3, #128	; 0x80
 80077a6:	019b      	lsls	r3, r3, #6
 80077a8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80077aa:	2380      	movs	r3, #128	; 0x80
 80077ac:	019b      	lsls	r3, r3, #6
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d011      	beq.n	80077d6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80077b2:	4b0d      	ldr	r3, [pc, #52]	; (80077e8 <FLASH_WaitForLastOperation+0xe0>)
 80077b4:	699a      	ldr	r2, [r3, #24]
 80077b6:	2380      	movs	r3, #128	; 0x80
 80077b8:	029b      	lsls	r3, r3, #10
 80077ba:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80077bc:	2380      	movs	r3, #128	; 0x80
 80077be:	029b      	lsls	r3, r3, #10
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d008      	beq.n	80077d6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80077c4:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <FLASH_WaitForLastOperation+0xe0>)
 80077c6:	699a      	ldr	r2, [r3, #24]
 80077c8:	2380      	movs	r3, #128	; 0x80
 80077ca:	025b      	lsls	r3, r3, #9
 80077cc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80077ce:	2380      	movs	r3, #128	; 0x80
 80077d0:	025b      	lsls	r3, r3, #9
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d103      	bne.n	80077de <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80077d6:	f000 f809 	bl	80077ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e000      	b.n	80077e0 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	0018      	movs	r0, r3
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b004      	add	sp, #16
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	40022000 	.word	0x40022000

080077ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80077f6:	4b49      	ldr	r3, [pc, #292]	; (800791c <FLASH_SetErrorCode+0x130>)
 80077f8:	699a      	ldr	r2, [r3, #24]
 80077fa:	2380      	movs	r3, #128	; 0x80
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	401a      	ands	r2, r3
 8007800:	2380      	movs	r3, #128	; 0x80
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	429a      	cmp	r2, r3
 8007806:	d10a      	bne.n	800781e <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007808:	4b45      	ldr	r3, [pc, #276]	; (8007920 <FLASH_SetErrorCode+0x134>)
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	2202      	movs	r2, #2
 800780e:	431a      	orrs	r2, r3
 8007810:	4b43      	ldr	r3, [pc, #268]	; (8007920 <FLASH_SetErrorCode+0x134>)
 8007812:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2280      	movs	r2, #128	; 0x80
 8007818:	0052      	lsls	r2, r2, #1
 800781a:	4313      	orrs	r3, r2
 800781c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800781e:	4b3f      	ldr	r3, [pc, #252]	; (800791c <FLASH_SetErrorCode+0x130>)
 8007820:	699a      	ldr	r2, [r3, #24]
 8007822:	2380      	movs	r3, #128	; 0x80
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	401a      	ands	r2, r3
 8007828:	2380      	movs	r3, #128	; 0x80
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	429a      	cmp	r2, r3
 800782e:	d10a      	bne.n	8007846 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007830:	4b3b      	ldr	r3, [pc, #236]	; (8007920 <FLASH_SetErrorCode+0x134>)
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	2201      	movs	r2, #1
 8007836:	431a      	orrs	r2, r3
 8007838:	4b39      	ldr	r3, [pc, #228]	; (8007920 <FLASH_SetErrorCode+0x134>)
 800783a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2280      	movs	r2, #128	; 0x80
 8007840:	0092      	lsls	r2, r2, #2
 8007842:	4313      	orrs	r3, r2
 8007844:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8007846:	4b35      	ldr	r3, [pc, #212]	; (800791c <FLASH_SetErrorCode+0x130>)
 8007848:	699a      	ldr	r2, [r3, #24]
 800784a:	2380      	movs	r3, #128	; 0x80
 800784c:	00db      	lsls	r3, r3, #3
 800784e:	401a      	ands	r2, r3
 8007850:	2380      	movs	r3, #128	; 0x80
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	429a      	cmp	r2, r3
 8007856:	d10a      	bne.n	800786e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8007858:	4b31      	ldr	r3, [pc, #196]	; (8007920 <FLASH_SetErrorCode+0x134>)
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	2208      	movs	r2, #8
 800785e:	431a      	orrs	r2, r3
 8007860:	4b2f      	ldr	r3, [pc, #188]	; (8007920 <FLASH_SetErrorCode+0x134>)
 8007862:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2280      	movs	r2, #128	; 0x80
 8007868:	00d2      	lsls	r2, r2, #3
 800786a:	4313      	orrs	r3, r2
 800786c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800786e:	4b2b      	ldr	r3, [pc, #172]	; (800791c <FLASH_SetErrorCode+0x130>)
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	2380      	movs	r3, #128	; 0x80
 8007874:	011b      	lsls	r3, r3, #4
 8007876:	401a      	ands	r2, r3
 8007878:	2380      	movs	r3, #128	; 0x80
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	429a      	cmp	r2, r3
 800787e:	d10a      	bne.n	8007896 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8007880:	4b27      	ldr	r3, [pc, #156]	; (8007920 <FLASH_SetErrorCode+0x134>)
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	2204      	movs	r2, #4
 8007886:	431a      	orrs	r2, r3
 8007888:	4b25      	ldr	r3, [pc, #148]	; (8007920 <FLASH_SetErrorCode+0x134>)
 800788a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2280      	movs	r2, #128	; 0x80
 8007890:	0112      	lsls	r2, r2, #4
 8007892:	4313      	orrs	r3, r2
 8007894:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8007896:	4b21      	ldr	r3, [pc, #132]	; (800791c <FLASH_SetErrorCode+0x130>)
 8007898:	699a      	ldr	r2, [r3, #24]
 800789a:	2380      	movs	r3, #128	; 0x80
 800789c:	019b      	lsls	r3, r3, #6
 800789e:	401a      	ands	r2, r3
 80078a0:	2380      	movs	r3, #128	; 0x80
 80078a2:	019b      	lsls	r3, r3, #6
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d10a      	bne.n	80078be <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80078a8:	4b1d      	ldr	r3, [pc, #116]	; (8007920 <FLASH_SetErrorCode+0x134>)
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	2210      	movs	r2, #16
 80078ae:	431a      	orrs	r2, r3
 80078b0:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <FLASH_SetErrorCode+0x134>)
 80078b2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2280      	movs	r2, #128	; 0x80
 80078b8:	0192      	lsls	r2, r2, #6
 80078ba:	4313      	orrs	r3, r2
 80078bc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80078be:	4b17      	ldr	r3, [pc, #92]	; (800791c <FLASH_SetErrorCode+0x130>)
 80078c0:	699a      	ldr	r2, [r3, #24]
 80078c2:	2380      	movs	r3, #128	; 0x80
 80078c4:	029b      	lsls	r3, r3, #10
 80078c6:	401a      	ands	r2, r3
 80078c8:	2380      	movs	r3, #128	; 0x80
 80078ca:	029b      	lsls	r3, r3, #10
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d109      	bne.n	80078e4 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80078d0:	4b13      	ldr	r3, [pc, #76]	; (8007920 <FLASH_SetErrorCode+0x134>)
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	2220      	movs	r2, #32
 80078d6:	431a      	orrs	r2, r3
 80078d8:	4b11      	ldr	r3, [pc, #68]	; (8007920 <FLASH_SetErrorCode+0x134>)
 80078da:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	4313      	orrs	r3, r2
 80078e2:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80078e4:	4b0d      	ldr	r3, [pc, #52]	; (800791c <FLASH_SetErrorCode+0x130>)
 80078e6:	699a      	ldr	r2, [r3, #24]
 80078e8:	2380      	movs	r3, #128	; 0x80
 80078ea:	025b      	lsls	r3, r3, #9
 80078ec:	401a      	ands	r2, r3
 80078ee:	2380      	movs	r3, #128	; 0x80
 80078f0:	025b      	lsls	r3, r3, #9
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d10a      	bne.n	800790c <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80078f6:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <FLASH_SetErrorCode+0x134>)
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	2240      	movs	r2, #64	; 0x40
 80078fc:	431a      	orrs	r2, r3
 80078fe:	4b08      	ldr	r3, [pc, #32]	; (8007920 <FLASH_SetErrorCode+0x134>)
 8007900:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2280      	movs	r2, #128	; 0x80
 8007906:	0252      	lsls	r2, r2, #9
 8007908:	4313      	orrs	r3, r2
 800790a:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800790c:	4b03      	ldr	r3, [pc, #12]	; (800791c <FLASH_SetErrorCode+0x130>)
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	619a      	str	r2, [r3, #24]
}  
 8007912:	46c0      	nop			; (mov r8, r8)
 8007914:	46bd      	mov	sp, r7
 8007916:	b002      	add	sp, #8
 8007918:	bd80      	pop	{r7, pc}
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	40022000 	.word	0x40022000
 8007920:	2000068c 	.word	0x2000068c

08007924 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800792a:	4b12      	ldr	r3, [pc, #72]	; (8007974 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	4013      	ands	r3, r2
 8007932:	d019      	beq.n	8007968 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007934:	f3ef 8310 	mrs	r3, PRIMASK
 8007938:	607b      	str	r3, [r7, #4]
  return(result);
 800793a:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800793c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800793e:	b672      	cpsid	i
}
 8007940:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8007942:	4b0c      	ldr	r3, [pc, #48]	; (8007974 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8007944:	4a0c      	ldr	r2, [pc, #48]	; (8007978 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8007946:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8007948:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800794a:	4a0c      	ldr	r2, [pc, #48]	; (800797c <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800794c:	60da      	str	r2, [r3, #12]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	f383 8810 	msr	PRIMASK, r3
}
 8007958:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800795a:	4b06      	ldr	r3, [pc, #24]	; (8007974 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	4013      	ands	r3, r2
 8007962:	d001      	beq.n	8007968 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e000      	b.n	800796a <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8007968:	2300      	movs	r3, #0
}
 800796a:	0018      	movs	r0, r3
 800796c:	46bd      	mov	sp, r7
 800796e:	b004      	add	sp, #16
 8007970:	bd80      	pop	{r7, pc}
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	40022000 	.word	0x40022000
 8007978:	89abcdef 	.word	0x89abcdef
 800797c:	02030405 	.word	0x02030405

08007980 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8007984:	4b04      	ldr	r3, [pc, #16]	; (8007998 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	4b03      	ldr	r3, [pc, #12]	; (8007998 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800798a:	2101      	movs	r1, #1
 800798c:	430a      	orrs	r2, r1
 800798e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	0018      	movs	r0, r3
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	40022000 	.word	0x40022000

0800799c <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800799c:	b5b0      	push	{r4, r5, r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80079a8:	2317      	movs	r3, #23
 80079aa:	18fb      	adds	r3, r7, r3
 80079ac:	2201      	movs	r2, #1
 80079ae:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80079b0:	4b24      	ldr	r3, [pc, #144]	; (8007a44 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80079b2:	7c1b      	ldrb	r3, [r3, #16]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d101      	bne.n	80079bc <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80079b8:	2302      	movs	r3, #2
 80079ba:	e03e      	b.n	8007a3a <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80079bc:	4b21      	ldr	r3, [pc, #132]	; (8007a44 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80079be:	2201      	movs	r2, #1
 80079c0:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80079c2:	2517      	movs	r5, #23
 80079c4:	197c      	adds	r4, r7, r5
 80079c6:	4b20      	ldr	r3, [pc, #128]	; (8007a48 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80079c8:	0018      	movs	r0, r3
 80079ca:	f7ff fe9d 	bl	8007708 <FLASH_WaitForLastOperation>
 80079ce:	0003      	movs	r3, r0
 80079d0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80079d2:	197b      	adds	r3, r7, r5
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d129      	bne.n	8007a2e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80079da:	4b1a      	ldr	r3, [pc, #104]	; (8007a44 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80079dc:	2200      	movs	r2, #0
 80079de:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d103      	bne.n	80079ee <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	e013      	b.n	8007a16 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d104      	bne.n	80079fe <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	b292      	uxth	r2, r2
 80079fa:	801a      	strh	r2, [r3, #0]
 80079fc:	e00b      	b.n	8007a16 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d104      	bne.n	8007a0e <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	b2d2      	uxtb	r2, r2
 8007a0a:	701a      	strb	r2, [r3, #0]
 8007a0c:	e003      	b.n	8007a16 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8007a0e:	2317      	movs	r3, #23
 8007a10:	18fb      	adds	r3, r7, r3
 8007a12:	2201      	movs	r2, #1
 8007a14:	701a      	strb	r2, [r3, #0]
    }

    if (status != HAL_OK)
 8007a16:	2217      	movs	r2, #23
 8007a18:	18bb      	adds	r3, r7, r2
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d006      	beq.n	8007a2e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007a20:	18bc      	adds	r4, r7, r2
 8007a22:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8007a24:	0018      	movs	r0, r3
 8007a26:	f7ff fe6f 	bl	8007708 <FLASH_WaitForLastOperation>
 8007a2a:	0003      	movs	r3, r0
 8007a2c:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007a2e:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	741a      	strb	r2, [r3, #16]

  return status;
 8007a34:	2317      	movs	r3, #23
 8007a36:	18fb      	adds	r3, r7, r3
 8007a38:	781b      	ldrb	r3, [r3, #0]
}
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	b006      	add	sp, #24
 8007a40:	bdb0      	pop	{r4, r5, r7, pc}
 8007a42:	46c0      	nop			; (mov r8, r8)
 8007a44:	2000068c 	.word	0x2000068c
 8007a48:	0000c350 	.word	0x0000c350

08007a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007a62:	e14f      	b.n	8007d04 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2101      	movs	r1, #1
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	4091      	lsls	r1, r2
 8007a6e:	000a      	movs	r2, r1
 8007a70:	4013      	ands	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d100      	bne.n	8007a7c <HAL_GPIO_Init+0x30>
 8007a7a:	e140      	b.n	8007cfe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2203      	movs	r2, #3
 8007a82:	4013      	ands	r3, r2
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d005      	beq.n	8007a94 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2203      	movs	r2, #3
 8007a8e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d130      	bne.n	8007af6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	2203      	movs	r2, #3
 8007aa0:	409a      	lsls	r2, r3
 8007aa2:	0013      	movs	r3, r2
 8007aa4:	43da      	mvns	r2, r3
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	409a      	lsls	r2, r3
 8007ab6:	0013      	movs	r3, r2
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007aca:	2201      	movs	r2, #1
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	409a      	lsls	r2, r3
 8007ad0:	0013      	movs	r3, r2
 8007ad2:	43da      	mvns	r2, r3
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	091b      	lsrs	r3, r3, #4
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	401a      	ands	r2, r3
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	409a      	lsls	r2, r3
 8007ae8:	0013      	movs	r3, r2
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2203      	movs	r2, #3
 8007afc:	4013      	ands	r3, r2
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d017      	beq.n	8007b32 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	409a      	lsls	r2, r3
 8007b10:	0013      	movs	r3, r2
 8007b12:	43da      	mvns	r2, r3
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	4013      	ands	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	409a      	lsls	r2, r3
 8007b24:	0013      	movs	r3, r2
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2203      	movs	r2, #3
 8007b38:	4013      	ands	r3, r2
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d123      	bne.n	8007b86 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	08da      	lsrs	r2, r3, #3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	3208      	adds	r2, #8
 8007b46:	0092      	lsls	r2, r2, #2
 8007b48:	58d3      	ldr	r3, [r2, r3]
 8007b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2207      	movs	r2, #7
 8007b50:	4013      	ands	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	220f      	movs	r2, #15
 8007b56:	409a      	lsls	r2, r3
 8007b58:	0013      	movs	r3, r2
 8007b5a:	43da      	mvns	r2, r3
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	4013      	ands	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	691a      	ldr	r2, [r3, #16]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2107      	movs	r1, #7
 8007b6a:	400b      	ands	r3, r1
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	409a      	lsls	r2, r3
 8007b70:	0013      	movs	r3, r2
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	08da      	lsrs	r2, r3, #3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3208      	adds	r2, #8
 8007b80:	0092      	lsls	r2, r2, #2
 8007b82:	6939      	ldr	r1, [r7, #16]
 8007b84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	005b      	lsls	r3, r3, #1
 8007b90:	2203      	movs	r2, #3
 8007b92:	409a      	lsls	r2, r3
 8007b94:	0013      	movs	r3, r2
 8007b96:	43da      	mvns	r2, r3
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	2203      	movs	r2, #3
 8007ba4:	401a      	ands	r2, r3
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	409a      	lsls	r2, r3
 8007bac:	0013      	movs	r3, r2
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	23c0      	movs	r3, #192	; 0xc0
 8007bc0:	029b      	lsls	r3, r3, #10
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	d100      	bne.n	8007bc8 <HAL_GPIO_Init+0x17c>
 8007bc6:	e09a      	b.n	8007cfe <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bc8:	4b54      	ldr	r3, [pc, #336]	; (8007d1c <HAL_GPIO_Init+0x2d0>)
 8007bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bcc:	4b53      	ldr	r3, [pc, #332]	; (8007d1c <HAL_GPIO_Init+0x2d0>)
 8007bce:	2101      	movs	r1, #1
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8007bd4:	4a52      	ldr	r2, [pc, #328]	; (8007d20 <HAL_GPIO_Init+0x2d4>)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	089b      	lsrs	r3, r3, #2
 8007bda:	3302      	adds	r3, #2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	589b      	ldr	r3, [r3, r2]
 8007be0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2203      	movs	r2, #3
 8007be6:	4013      	ands	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	220f      	movs	r2, #15
 8007bec:	409a      	lsls	r2, r3
 8007bee:	0013      	movs	r3, r2
 8007bf0:	43da      	mvns	r2, r3
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	23a0      	movs	r3, #160	; 0xa0
 8007bfc:	05db      	lsls	r3, r3, #23
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d019      	beq.n	8007c36 <HAL_GPIO_Init+0x1ea>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a47      	ldr	r2, [pc, #284]	; (8007d24 <HAL_GPIO_Init+0x2d8>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d013      	beq.n	8007c32 <HAL_GPIO_Init+0x1e6>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a46      	ldr	r2, [pc, #280]	; (8007d28 <HAL_GPIO_Init+0x2dc>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d00d      	beq.n	8007c2e <HAL_GPIO_Init+0x1e2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a45      	ldr	r2, [pc, #276]	; (8007d2c <HAL_GPIO_Init+0x2e0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d007      	beq.n	8007c2a <HAL_GPIO_Init+0x1de>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a44      	ldr	r2, [pc, #272]	; (8007d30 <HAL_GPIO_Init+0x2e4>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d101      	bne.n	8007c26 <HAL_GPIO_Init+0x1da>
 8007c22:	2305      	movs	r3, #5
 8007c24:	e008      	b.n	8007c38 <HAL_GPIO_Init+0x1ec>
 8007c26:	2306      	movs	r3, #6
 8007c28:	e006      	b.n	8007c38 <HAL_GPIO_Init+0x1ec>
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e004      	b.n	8007c38 <HAL_GPIO_Init+0x1ec>
 8007c2e:	2302      	movs	r3, #2
 8007c30:	e002      	b.n	8007c38 <HAL_GPIO_Init+0x1ec>
 8007c32:	2301      	movs	r3, #1
 8007c34:	e000      	b.n	8007c38 <HAL_GPIO_Init+0x1ec>
 8007c36:	2300      	movs	r3, #0
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	2103      	movs	r1, #3
 8007c3c:	400a      	ands	r2, r1
 8007c3e:	0092      	lsls	r2, r2, #2
 8007c40:	4093      	lsls	r3, r2
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c48:	4935      	ldr	r1, [pc, #212]	; (8007d20 <HAL_GPIO_Init+0x2d4>)
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	089b      	lsrs	r3, r3, #2
 8007c4e:	3302      	adds	r3, #2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c56:	4b37      	ldr	r3, [pc, #220]	; (8007d34 <HAL_GPIO_Init+0x2e8>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	43da      	mvns	r2, r3
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	4013      	ands	r3, r2
 8007c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	2380      	movs	r3, #128	; 0x80
 8007c6c:	025b      	lsls	r3, r3, #9
 8007c6e:	4013      	ands	r3, r2
 8007c70:	d003      	beq.n	8007c7a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007c7a:	4b2e      	ldr	r3, [pc, #184]	; (8007d34 <HAL_GPIO_Init+0x2e8>)
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007c80:	4b2c      	ldr	r3, [pc, #176]	; (8007d34 <HAL_GPIO_Init+0x2e8>)
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	43da      	mvns	r2, r3
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	2380      	movs	r3, #128	; 0x80
 8007c96:	029b      	lsls	r3, r3, #10
 8007c98:	4013      	ands	r3, r2
 8007c9a:	d003      	beq.n	8007ca4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007ca4:	4b23      	ldr	r3, [pc, #140]	; (8007d34 <HAL_GPIO_Init+0x2e8>)
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007caa:	4b22      	ldr	r3, [pc, #136]	; (8007d34 <HAL_GPIO_Init+0x2e8>)
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	43da      	mvns	r2, r3
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	2380      	movs	r3, #128	; 0x80
 8007cc0:	035b      	lsls	r3, r3, #13
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	d003      	beq.n	8007cce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007cce:	4b19      	ldr	r3, [pc, #100]	; (8007d34 <HAL_GPIO_Init+0x2e8>)
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007cd4:	4b17      	ldr	r3, [pc, #92]	; (8007d34 <HAL_GPIO_Init+0x2e8>)
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	43da      	mvns	r2, r3
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	2380      	movs	r3, #128	; 0x80
 8007cea:	039b      	lsls	r3, r3, #14
 8007cec:	4013      	ands	r3, r2
 8007cee:	d003      	beq.n	8007cf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007cf8:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <HAL_GPIO_Init+0x2e8>)
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	3301      	adds	r3, #1
 8007d02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	40da      	lsrs	r2, r3
 8007d0c:	1e13      	subs	r3, r2, #0
 8007d0e:	d000      	beq.n	8007d12 <HAL_GPIO_Init+0x2c6>
 8007d10:	e6a8      	b.n	8007a64 <HAL_GPIO_Init+0x18>
  }
}
 8007d12:	46c0      	nop			; (mov r8, r8)
 8007d14:	46c0      	nop			; (mov r8, r8)
 8007d16:	46bd      	mov	sp, r7
 8007d18:	b006      	add	sp, #24
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	40021000 	.word	0x40021000
 8007d20:	40010000 	.word	0x40010000
 8007d24:	50000400 	.word	0x50000400
 8007d28:	50000800 	.word	0x50000800
 8007d2c:	50000c00 	.word	0x50000c00
 8007d30:	50001c00 	.word	0x50001c00
 8007d34:	40010400 	.word	0x40010400

08007d38 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	000a      	movs	r2, r1
 8007d42:	1cbb      	adds	r3, r7, #2
 8007d44:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	1cba      	adds	r2, r7, #2
 8007d4c:	8812      	ldrh	r2, [r2, #0]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	d004      	beq.n	8007d5c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007d52:	230f      	movs	r3, #15
 8007d54:	18fb      	adds	r3, r7, r3
 8007d56:	2201      	movs	r2, #1
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	e003      	b.n	8007d64 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d5c:	230f      	movs	r3, #15
 8007d5e:	18fb      	adds	r3, r7, r3
 8007d60:	2200      	movs	r2, #0
 8007d62:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007d64:	230f      	movs	r3, #15
 8007d66:	18fb      	adds	r3, r7, r3
 8007d68:	781b      	ldrb	r3, [r3, #0]
}
 8007d6a:	0018      	movs	r0, r3
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	b004      	add	sp, #16
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	0008      	movs	r0, r1
 8007d7c:	0011      	movs	r1, r2
 8007d7e:	1cbb      	adds	r3, r7, #2
 8007d80:	1c02      	adds	r2, r0, #0
 8007d82:	801a      	strh	r2, [r3, #0]
 8007d84:	1c7b      	adds	r3, r7, #1
 8007d86:	1c0a      	adds	r2, r1, #0
 8007d88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d8a:	1c7b      	adds	r3, r7, #1
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d004      	beq.n	8007d9c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d92:	1cbb      	adds	r3, r7, #2
 8007d94:	881a      	ldrh	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007d9a:	e003      	b.n	8007da4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007d9c:	1cbb      	adds	r3, r7, #2
 8007d9e:	881a      	ldrh	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007da4:	46c0      	nop			; (mov r8, r8)
 8007da6:	46bd      	mov	sp, r7
 8007da8:	b002      	add	sp, #8
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	0002      	movs	r2, r0
 8007db4:	1dbb      	adds	r3, r7, #6
 8007db6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007db8:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	1dba      	adds	r2, r7, #6
 8007dbe:	8812      	ldrh	r2, [r2, #0]
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	d008      	beq.n	8007dd6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007dc4:	4b06      	ldr	r3, [pc, #24]	; (8007de0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007dc6:	1dba      	adds	r2, r7, #6
 8007dc8:	8812      	ldrh	r2, [r2, #0]
 8007dca:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007dcc:	1dbb      	adds	r3, r7, #6
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	f7fb fe37 	bl	8003a44 <HAL_GPIO_EXTI_Callback>
  }
}
 8007dd6:	46c0      	nop			; (mov r8, r8)
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	b002      	add	sp, #8
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	40010400 	.word	0x40010400

08007de4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e078      	b.n	8007ee8 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	222e      	movs	r2, #46	; 0x2e
 8007dfa:	5c9b      	ldrb	r3, [r3, r2]
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d107      	bne.n	8007e12 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	222d      	movs	r2, #45	; 0x2d
 8007e06:	2100      	movs	r1, #0
 8007e08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f7fd fb13 	bl	8005438 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	222e      	movs	r2, #46	; 0x2e
 8007e16:	2102      	movs	r1, #2
 8007e18:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d005      	beq.n	8007e36 <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e2e:	2380      	movs	r3, #128	; 0x80
 8007e30:	041b      	lsls	r3, r3, #16
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d103      	bne.n	8007e3e <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	221e      	movs	r2, #30
 8007e3a:	4393      	bics	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	4a2b      	ldr	r2, [pc, #172]	; (8007ef0 <HAL_LPTIM_Init+0x10c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d003      	beq.n	8007e50 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4a2a      	ldr	r2, [pc, #168]	; (8007ef4 <HAL_LPTIM_Init+0x110>)
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4a29      	ldr	r2, [pc, #164]	; (8007ef8 <HAL_LPTIM_Init+0x114>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007e60:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007e66:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007e6c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8007e72:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d107      	bne.n	8007e92 <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d005      	beq.n	8007ea6 <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e9e:	2380      	movs	r3, #128	; 0x80
 8007ea0:	041b      	lsls	r3, r3, #16
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d107      	bne.n	8007eb6 <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	4a0d      	ldr	r2, [pc, #52]	; (8007ef0 <HAL_LPTIM_Init+0x10c>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00a      	beq.n	8007ed6 <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007ec8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007ece:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	222e      	movs	r2, #46	; 0x2e
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	0018      	movs	r0, r3
 8007eea:	46bd      	mov	sp, r7
 8007eec:	b004      	add	sp, #16
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	0000ffff 	.word	0x0000ffff
 8007ef4:	ffff1f3f 	.word	0xffff1f3f
 8007ef8:	ff19f1fe 	.word	0xff19f1fe

08007efc <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	222e      	movs	r2, #46	; 0x2e
 8007f0a:	2102      	movs	r1, #2
 8007f0c:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007f0e:	4b34      	ldr	r3, [pc, #208]	; (8007fe0 <HAL_LPTIM_Counter_Start_IT+0xe4>)
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b33      	ldr	r3, [pc, #204]	; (8007fe0 <HAL_LPTIM_Counter_Start_IT+0xe4>)
 8007f14:	2180      	movs	r1, #128	; 0x80
 8007f16:	0589      	lsls	r1, r1, #22
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d00d      	beq.n	8007f40 <HAL_LPTIM_Counter_Start_IT+0x44>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f28:	2380      	movs	r3, #128	; 0x80
 8007f2a:	041b      	lsls	r3, r3, #16
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d107      	bne.n	8007f40 <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	492a      	ldr	r1, [pc, #168]	; (8007fe4 <HAL_LPTIM_Counter_Start_IT+0xe8>)
 8007f3c:	400a      	ands	r2, r1
 8007f3e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	691a      	ldr	r2, [r3, #16]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2210      	movs	r2, #16
 8007f56:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2110      	movs	r1, #16
 8007f64:	0018      	movs	r0, r3
 8007f66:	f000 f91d 	bl	80081a4 <LPTIM_WaitForFlag>
 8007f6a:	0003      	movs	r3, r0
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d101      	bne.n	8007f74 <HAL_LPTIM_Counter_Start_IT+0x78>
  {
    return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e031      	b.n	8007fd8 <HAL_LPTIM_Counter_Start_IT+0xdc>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	0018      	movs	r0, r3
 8007f78:	f000 f94c 	bl	8008214 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f000 f904 	bl	800818c <HAL_LPTIM_GetState>
 8007f84:	0003      	movs	r3, r0
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d101      	bne.n	8007f8e <HAL_LPTIM_Counter_Start_IT+0x92>
  {
    return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e024      	b.n	8007fd8 <HAL_LPTIM_Counter_Start_IT+0xdc>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2110      	movs	r1, #16
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2102      	movs	r1, #2
 8007faa:	430a      	orrs	r2, r1
 8007fac:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	691a      	ldr	r2, [r3, #16]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2101      	movs	r1, #1
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	691a      	ldr	r2, [r3, #16]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2104      	movs	r1, #4
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	222e      	movs	r2, #46	; 0x2e
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	0018      	movs	r0, r3
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	b002      	add	sp, #8
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	40010400 	.word	0x40010400
 8007fe4:	fffff1ff 	.word	0xfffff1ff

08007fe8 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d10e      	bne.n	800801c <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	2201      	movs	r2, #1
 8008006:	4013      	ands	r3, r2
 8008008:	2b01      	cmp	r3, #1
 800800a:	d107      	bne.n	800801c <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2201      	movs	r2, #1
 8008012:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	0018      	movs	r0, r3
 8008018:	f000 f888 	bl	800812c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2202      	movs	r2, #2
 8008024:	4013      	ands	r3, r2
 8008026:	2b02      	cmp	r3, #2
 8008028:	d10e      	bne.n	8008048 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	2202      	movs	r2, #2
 8008032:	4013      	ands	r3, r2
 8008034:	2b02      	cmp	r3, #2
 8008036:	d107      	bne.n	8008048 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2202      	movs	r2, #2
 800803e:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	0018      	movs	r0, r3
 8008044:	f7fb fcd6 	bl	80039f4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2204      	movs	r2, #4
 8008050:	4013      	ands	r3, r2
 8008052:	2b04      	cmp	r3, #4
 8008054:	d10e      	bne.n	8008074 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	2204      	movs	r2, #4
 800805e:	4013      	ands	r3, r2
 8008060:	2b04      	cmp	r3, #4
 8008062:	d107      	bne.n	8008074 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2204      	movs	r2, #4
 800806a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	0018      	movs	r0, r3
 8008070:	f000 f864 	bl	800813c <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2208      	movs	r2, #8
 800807c:	4013      	ands	r3, r2
 800807e:	2b08      	cmp	r3, #8
 8008080:	d10e      	bne.n	80080a0 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	2208      	movs	r2, #8
 800808a:	4013      	ands	r3, r2
 800808c:	2b08      	cmp	r3, #8
 800808e:	d107      	bne.n	80080a0 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2208      	movs	r2, #8
 8008096:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	0018      	movs	r0, r3
 800809c:	f000 f856 	bl	800814c <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2210      	movs	r2, #16
 80080a8:	4013      	ands	r3, r2
 80080aa:	2b10      	cmp	r3, #16
 80080ac:	d10e      	bne.n	80080cc <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	2210      	movs	r2, #16
 80080b6:	4013      	ands	r3, r2
 80080b8:	2b10      	cmp	r3, #16
 80080ba:	d107      	bne.n	80080cc <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2210      	movs	r2, #16
 80080c2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	0018      	movs	r0, r3
 80080c8:	f000 f848 	bl	800815c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2220      	movs	r2, #32
 80080d4:	4013      	ands	r3, r2
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	d10e      	bne.n	80080f8 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	2220      	movs	r2, #32
 80080e2:	4013      	ands	r3, r2
 80080e4:	2b20      	cmp	r3, #32
 80080e6:	d107      	bne.n	80080f8 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2220      	movs	r2, #32
 80080ee:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	0018      	movs	r0, r3
 80080f4:	f000 f83a 	bl	800816c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2240      	movs	r2, #64	; 0x40
 8008100:	4013      	ands	r3, r2
 8008102:	2b40      	cmp	r3, #64	; 0x40
 8008104:	d10e      	bne.n	8008124 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	2240      	movs	r2, #64	; 0x40
 800810e:	4013      	ands	r3, r2
 8008110:	2b40      	cmp	r3, #64	; 0x40
 8008112:	d107      	bne.n	8008124 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2240      	movs	r2, #64	; 0x40
 800811a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	0018      	movs	r0, r3
 8008120:	f000 f82c 	bl	800817c <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008124:	46c0      	nop			; (mov r8, r8)
 8008126:	46bd      	mov	sp, r7
 8008128:	b002      	add	sp, #8
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8008134:	46c0      	nop			; (mov r8, r8)
 8008136:	46bd      	mov	sp, r7
 8008138:	b002      	add	sp, #8
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8008144:	46c0      	nop			; (mov r8, r8)
 8008146:	46bd      	mov	sp, r7
 8008148:	b002      	add	sp, #8
 800814a:	bd80      	pop	{r7, pc}

0800814c <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8008154:	46c0      	nop			; (mov r8, r8)
 8008156:	46bd      	mov	sp, r7
 8008158:	b002      	add	sp, #8
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8008164:	46c0      	nop			; (mov r8, r8)
 8008166:	46bd      	mov	sp, r7
 8008168:	b002      	add	sp, #8
 800816a:	bd80      	pop	{r7, pc}

0800816c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8008174:	46c0      	nop			; (mov r8, r8)
 8008176:	46bd      	mov	sp, r7
 8008178:	b002      	add	sp, #8
 800817a:	bd80      	pop	{r7, pc}

0800817c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8008184:	46c0      	nop			; (mov r8, r8)
 8008186:	46bd      	mov	sp, r7
 8008188:	b002      	add	sp, #8
 800818a:	bd80      	pop	{r7, pc}

0800818c <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	222e      	movs	r2, #46	; 0x2e
 8008198:	5c9b      	ldrb	r3, [r3, r2]
 800819a:	b2db      	uxtb	r3, r3
}
 800819c:	0018      	movs	r0, r3
 800819e:	46bd      	mov	sp, r7
 80081a0:	b002      	add	sp, #8
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80081ae:	230f      	movs	r3, #15
 80081b0:	18fb      	adds	r3, r7, r3
 80081b2:	2200      	movs	r2, #0
 80081b4:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80081b6:	4b15      	ldr	r3, [pc, #84]	; (800820c <LPTIM_WaitForFlag+0x68>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4915      	ldr	r1, [pc, #84]	; (8008210 <LPTIM_WaitForFlag+0x6c>)
 80081bc:	0018      	movs	r0, r3
 80081be:	f7f7 ffbf 	bl	8000140 <__udivsi3>
 80081c2:	0003      	movs	r3, r0
 80081c4:	001a      	movs	r2, r3
 80081c6:	0013      	movs	r3, r2
 80081c8:	015b      	lsls	r3, r3, #5
 80081ca:	1a9b      	subs	r3, r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	189b      	adds	r3, r3, r2
 80081d0:	00db      	lsls	r3, r3, #3
 80081d2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d103      	bne.n	80081e8 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 80081e0:	230f      	movs	r3, #15
 80081e2:	18fb      	adds	r3, r7, r3
 80081e4:	2203      	movs	r2, #3
 80081e6:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	4013      	ands	r3, r2
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d002      	beq.n	80081fe <LPTIM_WaitForFlag+0x5a>
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1ea      	bne.n	80081d4 <LPTIM_WaitForFlag+0x30>

  return result;
 80081fe:	230f      	movs	r3, #15
 8008200:	18fb      	adds	r3, r7, r3
 8008202:	781b      	ldrb	r3, [r3, #0]
}
 8008204:	0018      	movs	r0, r3
 8008206:	46bd      	mov	sp, r7
 8008208:	b004      	add	sp, #16
 800820a:	bd80      	pop	{r7, pc}
 800820c:	2000005c 	.word	0x2000005c
 8008210:	00004e20 	.word	0x00004e20

08008214 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800821c:	2300      	movs	r3, #0
 800821e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008220:	b672      	cpsid	i
}
 8008222:	46c0      	nop			; (mov r8, r8)

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	001a      	movs	r2, r3
 800822a:	4b55      	ldr	r3, [pc, #340]	; (8008380 <LPTIM_Disable+0x16c>)
 800822c:	429a      	cmp	r2, r3
 800822e:	d106      	bne.n	800823e <LPTIM_Disable+0x2a>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008230:	4b54      	ldr	r3, [pc, #336]	; (8008384 <LPTIM_Disable+0x170>)
 8008232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008234:	23c0      	movs	r3, #192	; 0xc0
 8008236:	031b      	lsls	r3, r3, #12
 8008238:	4013      	ands	r3, r2
 800823a:	61fb      	str	r3, [r7, #28]
      break;
 800823c:	e000      	b.n	8008240 <LPTIM_Disable+0x2c>
    default:
      break;
 800823e:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	001a      	movs	r2, r3
 8008266:	4b46      	ldr	r3, [pc, #280]	; (8008380 <LPTIM_Disable+0x16c>)
 8008268:	429a      	cmp	r2, r3
 800826a:	d10d      	bne.n	8008288 <LPTIM_Disable+0x74>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800826c:	4b45      	ldr	r3, [pc, #276]	; (8008384 <LPTIM_Disable+0x170>)
 800826e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008270:	4b44      	ldr	r3, [pc, #272]	; (8008384 <LPTIM_Disable+0x170>)
 8008272:	2180      	movs	r1, #128	; 0x80
 8008274:	0609      	lsls	r1, r1, #24
 8008276:	430a      	orrs	r2, r1
 8008278:	629a      	str	r2, [r3, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800827a:	4b42      	ldr	r3, [pc, #264]	; (8008384 <LPTIM_Disable+0x170>)
 800827c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800827e:	4b41      	ldr	r3, [pc, #260]	; (8008384 <LPTIM_Disable+0x170>)
 8008280:	0052      	lsls	r2, r2, #1
 8008282:	0852      	lsrs	r2, r2, #1
 8008284:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8008286:	e000      	b.n	800828a <LPTIM_Disable+0x76>
    default:
      break;
 8008288:	46c0      	nop			; (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d102      	bne.n	8008296 <LPTIM_Disable+0x82>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d05b      	beq.n	800834e <LPTIM_Disable+0x13a>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	001a      	movs	r2, r3
 800829c:	4b38      	ldr	r3, [pc, #224]	; (8008380 <LPTIM_Disable+0x16c>)
 800829e:	429a      	cmp	r2, r3
 80082a0:	d106      	bne.n	80082b0 <LPTIM_Disable+0x9c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80082a2:	4b38      	ldr	r3, [pc, #224]	; (8008384 <LPTIM_Disable+0x170>)
 80082a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082a6:	4b37      	ldr	r3, [pc, #220]	; (8008384 <LPTIM_Disable+0x170>)
 80082a8:	4937      	ldr	r1, [pc, #220]	; (8008388 <LPTIM_Disable+0x174>)
 80082aa:	400a      	ands	r2, r1
 80082ac:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80082ae:	e000      	b.n	80082b2 <LPTIM_Disable+0x9e>
      default:
        break;
 80082b0:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01b      	beq.n	80082f0 <LPTIM_Disable+0xdc>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2101      	movs	r1, #1
 80082c4:	430a      	orrs	r2, r1
 80082c6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2108      	movs	r1, #8
 80082d4:	0018      	movs	r0, r3
 80082d6:	f7ff ff65 	bl	80081a4 <LPTIM_WaitForFlag>
 80082da:	0003      	movs	r3, r0
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d103      	bne.n	80082e8 <LPTIM_Disable+0xd4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	222e      	movs	r2, #46	; 0x2e
 80082e4:	2103      	movs	r1, #3
 80082e6:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2208      	movs	r2, #8
 80082ee:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d01b      	beq.n	800832e <LPTIM_Disable+0x11a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2101      	movs	r1, #1
 8008302:	430a      	orrs	r2, r1
 8008304:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2110      	movs	r1, #16
 8008312:	0018      	movs	r0, r3
 8008314:	f7ff ff46 	bl	80081a4 <LPTIM_WaitForFlag>
 8008318:	0003      	movs	r3, r0
 800831a:	2b03      	cmp	r3, #3
 800831c:	d103      	bne.n	8008326 <LPTIM_Disable+0x112>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	222e      	movs	r2, #46	; 0x2e
 8008322:	2103      	movs	r1, #3
 8008324:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2210      	movs	r2, #16
 800832c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	001a      	movs	r2, r3
 8008334:	4b12      	ldr	r3, [pc, #72]	; (8008380 <LPTIM_Disable+0x16c>)
 8008336:	429a      	cmp	r2, r3
 8008338:	d10b      	bne.n	8008352 <LPTIM_Disable+0x13e>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800833a:	4b12      	ldr	r3, [pc, #72]	; (8008384 <LPTIM_Disable+0x170>)
 800833c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800833e:	4a12      	ldr	r2, [pc, #72]	; (8008388 <LPTIM_Disable+0x174>)
 8008340:	4013      	ands	r3, r2
 8008342:	0019      	movs	r1, r3
 8008344:	4b0f      	ldr	r3, [pc, #60]	; (8008384 <LPTIM_Disable+0x170>)
 8008346:	69fa      	ldr	r2, [r7, #28]
 8008348:	430a      	orrs	r2, r1
 800834a:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800834c:	e002      	b.n	8008354 <LPTIM_Disable+0x140>
      default:
        break;
    }
  }
 800834e:	46c0      	nop			; (mov r8, r8)
 8008350:	e000      	b.n	8008354 <LPTIM_Disable+0x140>
        break;
 8008352:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691a      	ldr	r2, [r3, #16]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2101      	movs	r1, #1
 8008360:	438a      	bics	r2, r1
 8008362:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8008374:	b662      	cpsie	i
}
 8008376:	46c0      	nop			; (mov r8, r8)

  __enable_irq();
}
 8008378:	46c0      	nop			; (mov r8, r8)
 800837a:	46bd      	mov	sp, r7
 800837c:	b008      	add	sp, #32
 800837e:	bd80      	pop	{r7, pc}
 8008380:	40007c00 	.word	0x40007c00
 8008384:	40021000 	.word	0x40021000
 8008388:	fff3ffff 	.word	0xfff3ffff

0800838c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8008390:	4b04      	ldr	r3, [pc, #16]	; (80083a4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	4b03      	ldr	r3, [pc, #12]	; (80083a4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008396:	2180      	movs	r1, #128	; 0x80
 8008398:	0049      	lsls	r1, r1, #1
 800839a:	430a      	orrs	r2, r1
 800839c:	601a      	str	r2, [r3, #0]
}
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	40007000 	.word	0x40007000

080083a8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	000a      	movs	r2, r1
 80083b2:	1cfb      	adds	r3, r7, #3
 80083b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80083ba:	4b25      	ldr	r3, [pc, #148]	; (8008450 <HAL_PWR_EnterSTOPMode+0xa8>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	2380      	movs	r3, #128	; 0x80
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4013      	ands	r3, r2
 80083c4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80083c6:	4b23      	ldr	r3, [pc, #140]	; (8008454 <HAL_PWR_EnterSTOPMode+0xac>)
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	2201      	movs	r2, #1
 80083cc:	4013      	ands	r3, r2
 80083ce:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d008      	beq.n	80083e8 <HAL_PWR_EnterSTOPMode+0x40>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d005      	beq.n	80083e8 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80083dc:	4b1c      	ldr	r3, [pc, #112]	; (8008450 <HAL_PWR_EnterSTOPMode+0xa8>)
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <HAL_PWR_EnterSTOPMode+0xa8>)
 80083e2:	491d      	ldr	r1, [pc, #116]	; (8008458 <HAL_PWR_EnterSTOPMode+0xb0>)
 80083e4:	400a      	ands	r2, r1
 80083e6:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80083e8:	4b19      	ldr	r3, [pc, #100]	; (8008450 <HAL_PWR_EnterSTOPMode+0xa8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2203      	movs	r2, #3
 80083f2:	4393      	bics	r3, r2
 80083f4:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80083fe:	4b14      	ldr	r3, [pc, #80]	; (8008450 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008404:	4b15      	ldr	r3, [pc, #84]	; (800845c <HAL_PWR_EnterSTOPMode+0xb4>)
 8008406:	691a      	ldr	r2, [r3, #16]
 8008408:	4b14      	ldr	r3, [pc, #80]	; (800845c <HAL_PWR_EnterSTOPMode+0xb4>)
 800840a:	2104      	movs	r1, #4
 800840c:	430a      	orrs	r2, r1
 800840e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008410:	1cfb      	adds	r3, r7, #3
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d101      	bne.n	800841c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008418:	bf30      	wfi
 800841a:	e002      	b.n	8008422 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800841c:	bf40      	sev
    __WFE();
 800841e:	bf20      	wfe
    __WFE();
 8008420:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008422:	4b0e      	ldr	r3, [pc, #56]	; (800845c <HAL_PWR_EnterSTOPMode+0xb4>)
 8008424:	691a      	ldr	r2, [r3, #16]
 8008426:	4b0d      	ldr	r3, [pc, #52]	; (800845c <HAL_PWR_EnterSTOPMode+0xb4>)
 8008428:	2104      	movs	r1, #4
 800842a:	438a      	bics	r2, r1
 800842c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d009      	beq.n	8008448 <HAL_PWR_EnterSTOPMode+0xa0>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d006      	beq.n	8008448 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800843a:	4b05      	ldr	r3, [pc, #20]	; (8008450 <HAL_PWR_EnterSTOPMode+0xa8>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	4b04      	ldr	r3, [pc, #16]	; (8008450 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008440:	2180      	movs	r1, #128	; 0x80
 8008442:	0089      	lsls	r1, r1, #2
 8008444:	430a      	orrs	r2, r1
 8008446:	601a      	str	r2, [r3, #0]
  }
}
 8008448:	46c0      	nop			; (mov r8, r8)
 800844a:	46bd      	mov	sp, r7
 800844c:	b006      	add	sp, #24
 800844e:	bd80      	pop	{r7, pc}
 8008450:	40007000 	.word	0x40007000
 8008454:	40010000 	.word	0x40010000
 8008458:	fffffdff 	.word	0xfffffdff
 800845c:	e000ed00 	.word	0xe000ed00

08008460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008460:	b5b0      	push	{r4, r5, r7, lr}
 8008462:	b08a      	sub	sp, #40	; 0x28
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d102      	bne.n	8008474 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	f000 fb5a 	bl	8008b28 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008474:	4bce      	ldr	r3, [pc, #824]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	220c      	movs	r2, #12
 800847a:	4013      	ands	r3, r2
 800847c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800847e:	4bcc      	ldr	r3, [pc, #816]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	2380      	movs	r3, #128	; 0x80
 8008484:	025b      	lsls	r3, r3, #9
 8008486:	4013      	ands	r3, r2
 8008488:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2201      	movs	r2, #1
 8008490:	4013      	ands	r3, r2
 8008492:	d100      	bne.n	8008496 <HAL_RCC_OscConfig+0x36>
 8008494:	e07c      	b.n	8008590 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	2b08      	cmp	r3, #8
 800849a:	d007      	beq.n	80084ac <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	2b0c      	cmp	r3, #12
 80084a0:	d111      	bne.n	80084c6 <HAL_RCC_OscConfig+0x66>
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	2380      	movs	r3, #128	; 0x80
 80084a6:	025b      	lsls	r3, r3, #9
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d10c      	bne.n	80084c6 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084ac:	4bc0      	ldr	r3, [pc, #768]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	2380      	movs	r3, #128	; 0x80
 80084b2:	029b      	lsls	r3, r3, #10
 80084b4:	4013      	ands	r3, r2
 80084b6:	d100      	bne.n	80084ba <HAL_RCC_OscConfig+0x5a>
 80084b8:	e069      	b.n	800858e <HAL_RCC_OscConfig+0x12e>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d165      	bne.n	800858e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e330      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	2380      	movs	r3, #128	; 0x80
 80084cc:	025b      	lsls	r3, r3, #9
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d107      	bne.n	80084e2 <HAL_RCC_OscConfig+0x82>
 80084d2:	4bb7      	ldr	r3, [pc, #732]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	4bb6      	ldr	r3, [pc, #728]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80084d8:	2180      	movs	r1, #128	; 0x80
 80084da:	0249      	lsls	r1, r1, #9
 80084dc:	430a      	orrs	r2, r1
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	e027      	b.n	8008532 <HAL_RCC_OscConfig+0xd2>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	23a0      	movs	r3, #160	; 0xa0
 80084e8:	02db      	lsls	r3, r3, #11
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d10e      	bne.n	800850c <HAL_RCC_OscConfig+0xac>
 80084ee:	4bb0      	ldr	r3, [pc, #704]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4baf      	ldr	r3, [pc, #700]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80084f4:	2180      	movs	r1, #128	; 0x80
 80084f6:	02c9      	lsls	r1, r1, #11
 80084f8:	430a      	orrs	r2, r1
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	4bac      	ldr	r3, [pc, #688]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	4bab      	ldr	r3, [pc, #684]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008502:	2180      	movs	r1, #128	; 0x80
 8008504:	0249      	lsls	r1, r1, #9
 8008506:	430a      	orrs	r2, r1
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	e012      	b.n	8008532 <HAL_RCC_OscConfig+0xd2>
 800850c:	4ba8      	ldr	r3, [pc, #672]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	4ba7      	ldr	r3, [pc, #668]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008512:	49a8      	ldr	r1, [pc, #672]	; (80087b4 <HAL_RCC_OscConfig+0x354>)
 8008514:	400a      	ands	r2, r1
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	4ba5      	ldr	r3, [pc, #660]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	2380      	movs	r3, #128	; 0x80
 800851e:	025b      	lsls	r3, r3, #9
 8008520:	4013      	ands	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4ba2      	ldr	r3, [pc, #648]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	4ba1      	ldr	r3, [pc, #644]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 800852c:	49a2      	ldr	r1, [pc, #648]	; (80087b8 <HAL_RCC_OscConfig+0x358>)
 800852e:	400a      	ands	r2, r1
 8008530:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d014      	beq.n	8008564 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800853a:	f7fe f9ad 	bl	8006898 <HAL_GetTick>
 800853e:	0003      	movs	r3, r0
 8008540:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008542:	e008      	b.n	8008556 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008544:	f7fe f9a8 	bl	8006898 <HAL_GetTick>
 8008548:	0002      	movs	r2, r0
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	2b64      	cmp	r3, #100	; 0x64
 8008550:	d901      	bls.n	8008556 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e2e8      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008556:	4b96      	ldr	r3, [pc, #600]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	2380      	movs	r3, #128	; 0x80
 800855c:	029b      	lsls	r3, r3, #10
 800855e:	4013      	ands	r3, r2
 8008560:	d0f0      	beq.n	8008544 <HAL_RCC_OscConfig+0xe4>
 8008562:	e015      	b.n	8008590 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008564:	f7fe f998 	bl	8006898 <HAL_GetTick>
 8008568:	0003      	movs	r3, r0
 800856a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800856c:	e008      	b.n	8008580 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800856e:	f7fe f993 	bl	8006898 <HAL_GetTick>
 8008572:	0002      	movs	r2, r0
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b64      	cmp	r3, #100	; 0x64
 800857a:	d901      	bls.n	8008580 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e2d3      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008580:	4b8b      	ldr	r3, [pc, #556]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	2380      	movs	r3, #128	; 0x80
 8008586:	029b      	lsls	r3, r3, #10
 8008588:	4013      	ands	r3, r2
 800858a:	d1f0      	bne.n	800856e <HAL_RCC_OscConfig+0x10e>
 800858c:	e000      	b.n	8008590 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800858e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2202      	movs	r2, #2
 8008596:	4013      	ands	r3, r2
 8008598:	d100      	bne.n	800859c <HAL_RCC_OscConfig+0x13c>
 800859a:	e08b      	b.n	80086b4 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	2b04      	cmp	r3, #4
 80085a6:	d005      	beq.n	80085b4 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	2b0c      	cmp	r3, #12
 80085ac:	d13e      	bne.n	800862c <HAL_RCC_OscConfig+0x1cc>
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d13b      	bne.n	800862c <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80085b4:	4b7e      	ldr	r3, [pc, #504]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2204      	movs	r2, #4
 80085ba:	4013      	ands	r3, r2
 80085bc:	d004      	beq.n	80085c8 <HAL_RCC_OscConfig+0x168>
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e2af      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085c8:	4b79      	ldr	r3, [pc, #484]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	4a7b      	ldr	r2, [pc, #492]	; (80087bc <HAL_RCC_OscConfig+0x35c>)
 80085ce:	4013      	ands	r3, r2
 80085d0:	0019      	movs	r1, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	021a      	lsls	r2, r3, #8
 80085d8:	4b75      	ldr	r3, [pc, #468]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80085da:	430a      	orrs	r2, r1
 80085dc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80085de:	4b74      	ldr	r3, [pc, #464]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2209      	movs	r2, #9
 80085e4:	4393      	bics	r3, r2
 80085e6:	0019      	movs	r1, r3
 80085e8:	4b71      	ldr	r3, [pc, #452]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	430a      	orrs	r2, r1
 80085ee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085f0:	f000 fbe8 	bl	8008dc4 <HAL_RCC_GetSysClockFreq>
 80085f4:	0001      	movs	r1, r0
 80085f6:	4b6e      	ldr	r3, [pc, #440]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	091b      	lsrs	r3, r3, #4
 80085fc:	220f      	movs	r2, #15
 80085fe:	4013      	ands	r3, r2
 8008600:	4a6f      	ldr	r2, [pc, #444]	; (80087c0 <HAL_RCC_OscConfig+0x360>)
 8008602:	5cd3      	ldrb	r3, [r2, r3]
 8008604:	000a      	movs	r2, r1
 8008606:	40da      	lsrs	r2, r3
 8008608:	4b6e      	ldr	r3, [pc, #440]	; (80087c4 <HAL_RCC_OscConfig+0x364>)
 800860a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800860c:	4b6e      	ldr	r3, [pc, #440]	; (80087c8 <HAL_RCC_OscConfig+0x368>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2513      	movs	r5, #19
 8008612:	197c      	adds	r4, r7, r5
 8008614:	0018      	movs	r0, r3
 8008616:	f7fe f8f9 	bl	800680c <HAL_InitTick>
 800861a:	0003      	movs	r3, r0
 800861c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800861e:	197b      	adds	r3, r7, r5
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d046      	beq.n	80086b4 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8008626:	197b      	adds	r3, r7, r5
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	e27d      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d027      	beq.n	8008682 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008632:	4b5f      	ldr	r3, [pc, #380]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2209      	movs	r2, #9
 8008638:	4393      	bics	r3, r2
 800863a:	0019      	movs	r1, r3
 800863c:	4b5c      	ldr	r3, [pc, #368]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	430a      	orrs	r2, r1
 8008642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008644:	f7fe f928 	bl	8006898 <HAL_GetTick>
 8008648:	0003      	movs	r3, r0
 800864a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800864c:	e008      	b.n	8008660 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800864e:	f7fe f923 	bl	8006898 <HAL_GetTick>
 8008652:	0002      	movs	r2, r0
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	2b02      	cmp	r3, #2
 800865a:	d901      	bls.n	8008660 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e263      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008660:	4b53      	ldr	r3, [pc, #332]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2204      	movs	r2, #4
 8008666:	4013      	ands	r3, r2
 8008668:	d0f1      	beq.n	800864e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800866a:	4b51      	ldr	r3, [pc, #324]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	4a53      	ldr	r2, [pc, #332]	; (80087bc <HAL_RCC_OscConfig+0x35c>)
 8008670:	4013      	ands	r3, r2
 8008672:	0019      	movs	r1, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	021a      	lsls	r2, r3, #8
 800867a:	4b4d      	ldr	r3, [pc, #308]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 800867c:	430a      	orrs	r2, r1
 800867e:	605a      	str	r2, [r3, #4]
 8008680:	e018      	b.n	80086b4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008682:	4b4b      	ldr	r3, [pc, #300]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	4b4a      	ldr	r3, [pc, #296]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008688:	2101      	movs	r1, #1
 800868a:	438a      	bics	r2, r1
 800868c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800868e:	f7fe f903 	bl	8006898 <HAL_GetTick>
 8008692:	0003      	movs	r3, r0
 8008694:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008696:	e008      	b.n	80086aa <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008698:	f7fe f8fe 	bl	8006898 <HAL_GetTick>
 800869c:	0002      	movs	r2, r0
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d901      	bls.n	80086aa <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e23e      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086aa:	4b41      	ldr	r3, [pc, #260]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2204      	movs	r2, #4
 80086b0:	4013      	ands	r3, r2
 80086b2:	d1f1      	bne.n	8008698 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2210      	movs	r2, #16
 80086ba:	4013      	ands	r3, r2
 80086bc:	d100      	bne.n	80086c0 <HAL_RCC_OscConfig+0x260>
 80086be:	e0a1      	b.n	8008804 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d140      	bne.n	8008748 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80086c6:	4b3a      	ldr	r3, [pc, #232]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	2380      	movs	r3, #128	; 0x80
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4013      	ands	r3, r2
 80086d0:	d005      	beq.n	80086de <HAL_RCC_OscConfig+0x27e>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e224      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80086de:	4b34      	ldr	r3, [pc, #208]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	4a3a      	ldr	r2, [pc, #232]	; (80087cc <HAL_RCC_OscConfig+0x36c>)
 80086e4:	4013      	ands	r3, r2
 80086e6:	0019      	movs	r1, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a1a      	ldr	r2, [r3, #32]
 80086ec:	4b30      	ldr	r3, [pc, #192]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80086ee:	430a      	orrs	r2, r1
 80086f0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80086f2:	4b2f      	ldr	r3, [pc, #188]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	021b      	lsls	r3, r3, #8
 80086f8:	0a19      	lsrs	r1, r3, #8
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	061a      	lsls	r2, r3, #24
 8008700:	4b2b      	ldr	r3, [pc, #172]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008702:	430a      	orrs	r2, r1
 8008704:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	0b5b      	lsrs	r3, r3, #13
 800870c:	3301      	adds	r3, #1
 800870e:	2280      	movs	r2, #128	; 0x80
 8008710:	0212      	lsls	r2, r2, #8
 8008712:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008714:	4b26      	ldr	r3, [pc, #152]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	091b      	lsrs	r3, r3, #4
 800871a:	210f      	movs	r1, #15
 800871c:	400b      	ands	r3, r1
 800871e:	4928      	ldr	r1, [pc, #160]	; (80087c0 <HAL_RCC_OscConfig+0x360>)
 8008720:	5ccb      	ldrb	r3, [r1, r3]
 8008722:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008724:	4b27      	ldr	r3, [pc, #156]	; (80087c4 <HAL_RCC_OscConfig+0x364>)
 8008726:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8008728:	4b27      	ldr	r3, [pc, #156]	; (80087c8 <HAL_RCC_OscConfig+0x368>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2513      	movs	r5, #19
 800872e:	197c      	adds	r4, r7, r5
 8008730:	0018      	movs	r0, r3
 8008732:	f7fe f86b 	bl	800680c <HAL_InitTick>
 8008736:	0003      	movs	r3, r0
 8008738:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800873a:	197b      	adds	r3, r7, r5
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d060      	beq.n	8008804 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8008742:	197b      	adds	r3, r7, r5
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	e1ef      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d03f      	beq.n	80087d0 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008750:	4b17      	ldr	r3, [pc, #92]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	4b16      	ldr	r3, [pc, #88]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008756:	2180      	movs	r1, #128	; 0x80
 8008758:	0049      	lsls	r1, r1, #1
 800875a:	430a      	orrs	r2, r1
 800875c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800875e:	f7fe f89b 	bl	8006898 <HAL_GetTick>
 8008762:	0003      	movs	r3, r0
 8008764:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008766:	e008      	b.n	800877a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008768:	f7fe f896 	bl	8006898 <HAL_GetTick>
 800876c:	0002      	movs	r2, r0
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d901      	bls.n	800877a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e1d6      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800877a:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	2380      	movs	r3, #128	; 0x80
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4013      	ands	r3, r2
 8008784:	d0f0      	beq.n	8008768 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008786:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	4a10      	ldr	r2, [pc, #64]	; (80087cc <HAL_RCC_OscConfig+0x36c>)
 800878c:	4013      	ands	r3, r2
 800878e:	0019      	movs	r1, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a1a      	ldr	r2, [r3, #32]
 8008794:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 8008796:	430a      	orrs	r2, r1
 8008798:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800879a:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	0a19      	lsrs	r1, r3, #8
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	061a      	lsls	r2, r3, #24
 80087a8:	4b01      	ldr	r3, [pc, #4]	; (80087b0 <HAL_RCC_OscConfig+0x350>)
 80087aa:	430a      	orrs	r2, r1
 80087ac:	605a      	str	r2, [r3, #4]
 80087ae:	e029      	b.n	8008804 <HAL_RCC_OscConfig+0x3a4>
 80087b0:	40021000 	.word	0x40021000
 80087b4:	fffeffff 	.word	0xfffeffff
 80087b8:	fffbffff 	.word	0xfffbffff
 80087bc:	ffffe0ff 	.word	0xffffe0ff
 80087c0:	0800e9cc 	.word	0x0800e9cc
 80087c4:	2000005c 	.word	0x2000005c
 80087c8:	20000060 	.word	0x20000060
 80087cc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80087d0:	4bbe      	ldr	r3, [pc, #760]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	4bbd      	ldr	r3, [pc, #756]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 80087d6:	49be      	ldr	r1, [pc, #760]	; (8008ad0 <HAL_RCC_OscConfig+0x670>)
 80087d8:	400a      	ands	r2, r1
 80087da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087dc:	f7fe f85c 	bl	8006898 <HAL_GetTick>
 80087e0:	0003      	movs	r3, r0
 80087e2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80087e4:	e008      	b.n	80087f8 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80087e6:	f7fe f857 	bl	8006898 <HAL_GetTick>
 80087ea:	0002      	movs	r2, r0
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d901      	bls.n	80087f8 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e197      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80087f8:	4bb4      	ldr	r3, [pc, #720]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	2380      	movs	r3, #128	; 0x80
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4013      	ands	r3, r2
 8008802:	d1f0      	bne.n	80087e6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2208      	movs	r2, #8
 800880a:	4013      	ands	r3, r2
 800880c:	d036      	beq.n	800887c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d019      	beq.n	800884a <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008816:	4bad      	ldr	r3, [pc, #692]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800881a:	4bac      	ldr	r3, [pc, #688]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 800881c:	2101      	movs	r1, #1
 800881e:	430a      	orrs	r2, r1
 8008820:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008822:	f7fe f839 	bl	8006898 <HAL_GetTick>
 8008826:	0003      	movs	r3, r0
 8008828:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800882a:	e008      	b.n	800883e <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800882c:	f7fe f834 	bl	8006898 <HAL_GetTick>
 8008830:	0002      	movs	r2, r0
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	2b02      	cmp	r3, #2
 8008838:	d901      	bls.n	800883e <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e174      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800883e:	4ba3      	ldr	r3, [pc, #652]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008842:	2202      	movs	r2, #2
 8008844:	4013      	ands	r3, r2
 8008846:	d0f1      	beq.n	800882c <HAL_RCC_OscConfig+0x3cc>
 8008848:	e018      	b.n	800887c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800884a:	4ba0      	ldr	r3, [pc, #640]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 800884c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800884e:	4b9f      	ldr	r3, [pc, #636]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008850:	2101      	movs	r1, #1
 8008852:	438a      	bics	r2, r1
 8008854:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008856:	f7fe f81f 	bl	8006898 <HAL_GetTick>
 800885a:	0003      	movs	r3, r0
 800885c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800885e:	e008      	b.n	8008872 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008860:	f7fe f81a 	bl	8006898 <HAL_GetTick>
 8008864:	0002      	movs	r2, r0
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	2b02      	cmp	r3, #2
 800886c:	d901      	bls.n	8008872 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e15a      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008872:	4b96      	ldr	r3, [pc, #600]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008876:	2202      	movs	r2, #2
 8008878:	4013      	ands	r3, r2
 800887a:	d1f1      	bne.n	8008860 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2204      	movs	r2, #4
 8008882:	4013      	ands	r3, r2
 8008884:	d100      	bne.n	8008888 <HAL_RCC_OscConfig+0x428>
 8008886:	e0ae      	b.n	80089e6 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008888:	2027      	movs	r0, #39	; 0x27
 800888a:	183b      	adds	r3, r7, r0
 800888c:	2200      	movs	r2, #0
 800888e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008890:	4b8e      	ldr	r3, [pc, #568]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008894:	2380      	movs	r3, #128	; 0x80
 8008896:	055b      	lsls	r3, r3, #21
 8008898:	4013      	ands	r3, r2
 800889a:	d109      	bne.n	80088b0 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800889c:	4b8b      	ldr	r3, [pc, #556]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 800889e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088a0:	4b8a      	ldr	r3, [pc, #552]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 80088a2:	2180      	movs	r1, #128	; 0x80
 80088a4:	0549      	lsls	r1, r1, #21
 80088a6:	430a      	orrs	r2, r1
 80088a8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80088aa:	183b      	adds	r3, r7, r0
 80088ac:	2201      	movs	r2, #1
 80088ae:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088b0:	4b88      	ldr	r3, [pc, #544]	; (8008ad4 <HAL_RCC_OscConfig+0x674>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	2380      	movs	r3, #128	; 0x80
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	4013      	ands	r3, r2
 80088ba:	d11a      	bne.n	80088f2 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088bc:	4b85      	ldr	r3, [pc, #532]	; (8008ad4 <HAL_RCC_OscConfig+0x674>)
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	4b84      	ldr	r3, [pc, #528]	; (8008ad4 <HAL_RCC_OscConfig+0x674>)
 80088c2:	2180      	movs	r1, #128	; 0x80
 80088c4:	0049      	lsls	r1, r1, #1
 80088c6:	430a      	orrs	r2, r1
 80088c8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088ca:	f7fd ffe5 	bl	8006898 <HAL_GetTick>
 80088ce:	0003      	movs	r3, r0
 80088d0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088d2:	e008      	b.n	80088e6 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088d4:	f7fd ffe0 	bl	8006898 <HAL_GetTick>
 80088d8:	0002      	movs	r2, r0
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	2b64      	cmp	r3, #100	; 0x64
 80088e0:	d901      	bls.n	80088e6 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e120      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088e6:	4b7b      	ldr	r3, [pc, #492]	; (8008ad4 <HAL_RCC_OscConfig+0x674>)
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	2380      	movs	r3, #128	; 0x80
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	4013      	ands	r3, r2
 80088f0:	d0f0      	beq.n	80088d4 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	2380      	movs	r3, #128	; 0x80
 80088f8:	005b      	lsls	r3, r3, #1
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d107      	bne.n	800890e <HAL_RCC_OscConfig+0x4ae>
 80088fe:	4b73      	ldr	r3, [pc, #460]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008900:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008902:	4b72      	ldr	r3, [pc, #456]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008904:	2180      	movs	r1, #128	; 0x80
 8008906:	0049      	lsls	r1, r1, #1
 8008908:	430a      	orrs	r2, r1
 800890a:	651a      	str	r2, [r3, #80]	; 0x50
 800890c:	e031      	b.n	8008972 <HAL_RCC_OscConfig+0x512>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10c      	bne.n	8008930 <HAL_RCC_OscConfig+0x4d0>
 8008916:	4b6d      	ldr	r3, [pc, #436]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008918:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800891a:	4b6c      	ldr	r3, [pc, #432]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 800891c:	496c      	ldr	r1, [pc, #432]	; (8008ad0 <HAL_RCC_OscConfig+0x670>)
 800891e:	400a      	ands	r2, r1
 8008920:	651a      	str	r2, [r3, #80]	; 0x50
 8008922:	4b6a      	ldr	r3, [pc, #424]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008926:	4b69      	ldr	r3, [pc, #420]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008928:	496b      	ldr	r1, [pc, #428]	; (8008ad8 <HAL_RCC_OscConfig+0x678>)
 800892a:	400a      	ands	r2, r1
 800892c:	651a      	str	r2, [r3, #80]	; 0x50
 800892e:	e020      	b.n	8008972 <HAL_RCC_OscConfig+0x512>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689a      	ldr	r2, [r3, #8]
 8008934:	23a0      	movs	r3, #160	; 0xa0
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	429a      	cmp	r2, r3
 800893a:	d10e      	bne.n	800895a <HAL_RCC_OscConfig+0x4fa>
 800893c:	4b63      	ldr	r3, [pc, #396]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 800893e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008940:	4b62      	ldr	r3, [pc, #392]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008942:	2180      	movs	r1, #128	; 0x80
 8008944:	00c9      	lsls	r1, r1, #3
 8008946:	430a      	orrs	r2, r1
 8008948:	651a      	str	r2, [r3, #80]	; 0x50
 800894a:	4b60      	ldr	r3, [pc, #384]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 800894c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800894e:	4b5f      	ldr	r3, [pc, #380]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008950:	2180      	movs	r1, #128	; 0x80
 8008952:	0049      	lsls	r1, r1, #1
 8008954:	430a      	orrs	r2, r1
 8008956:	651a      	str	r2, [r3, #80]	; 0x50
 8008958:	e00b      	b.n	8008972 <HAL_RCC_OscConfig+0x512>
 800895a:	4b5c      	ldr	r3, [pc, #368]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 800895c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800895e:	4b5b      	ldr	r3, [pc, #364]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008960:	495b      	ldr	r1, [pc, #364]	; (8008ad0 <HAL_RCC_OscConfig+0x670>)
 8008962:	400a      	ands	r2, r1
 8008964:	651a      	str	r2, [r3, #80]	; 0x50
 8008966:	4b59      	ldr	r3, [pc, #356]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008968:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800896a:	4b58      	ldr	r3, [pc, #352]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 800896c:	495a      	ldr	r1, [pc, #360]	; (8008ad8 <HAL_RCC_OscConfig+0x678>)
 800896e:	400a      	ands	r2, r1
 8008970:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d015      	beq.n	80089a6 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800897a:	f7fd ff8d 	bl	8006898 <HAL_GetTick>
 800897e:	0003      	movs	r3, r0
 8008980:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008982:	e009      	b.n	8008998 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008984:	f7fd ff88 	bl	8006898 <HAL_GetTick>
 8008988:	0002      	movs	r2, r0
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	4a53      	ldr	r2, [pc, #332]	; (8008adc <HAL_RCC_OscConfig+0x67c>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d901      	bls.n	8008998 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e0c7      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008998:	4b4c      	ldr	r3, [pc, #304]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 800899a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800899c:	2380      	movs	r3, #128	; 0x80
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4013      	ands	r3, r2
 80089a2:	d0ef      	beq.n	8008984 <HAL_RCC_OscConfig+0x524>
 80089a4:	e014      	b.n	80089d0 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089a6:	f7fd ff77 	bl	8006898 <HAL_GetTick>
 80089aa:	0003      	movs	r3, r0
 80089ac:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089ae:	e009      	b.n	80089c4 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089b0:	f7fd ff72 	bl	8006898 <HAL_GetTick>
 80089b4:	0002      	movs	r2, r0
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	4a48      	ldr	r2, [pc, #288]	; (8008adc <HAL_RCC_OscConfig+0x67c>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d901      	bls.n	80089c4 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e0b1      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089c4:	4b41      	ldr	r3, [pc, #260]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 80089c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089c8:	2380      	movs	r3, #128	; 0x80
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4013      	ands	r3, r2
 80089ce:	d1ef      	bne.n	80089b0 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80089d0:	2327      	movs	r3, #39	; 0x27
 80089d2:	18fb      	adds	r3, r7, r3
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d105      	bne.n	80089e6 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089da:	4b3c      	ldr	r3, [pc, #240]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 80089dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089de:	4b3b      	ldr	r3, [pc, #236]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 80089e0:	493f      	ldr	r1, [pc, #252]	; (8008ae0 <HAL_RCC_OscConfig+0x680>)
 80089e2:	400a      	ands	r2, r1
 80089e4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d100      	bne.n	80089f0 <HAL_RCC_OscConfig+0x590>
 80089ee:	e09a      	b.n	8008b26 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	2b0c      	cmp	r3, #12
 80089f4:	d064      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d145      	bne.n	8008a8a <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089fe:	4b33      	ldr	r3, [pc, #204]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4b32      	ldr	r3, [pc, #200]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008a04:	4937      	ldr	r1, [pc, #220]	; (8008ae4 <HAL_RCC_OscConfig+0x684>)
 8008a06:	400a      	ands	r2, r1
 8008a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a0a:	f7fd ff45 	bl	8006898 <HAL_GetTick>
 8008a0e:	0003      	movs	r3, r0
 8008a10:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008a12:	e008      	b.n	8008a26 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a14:	f7fd ff40 	bl	8006898 <HAL_GetTick>
 8008a18:	0002      	movs	r2, r0
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e080      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008a26:	4b29      	ldr	r3, [pc, #164]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	2380      	movs	r3, #128	; 0x80
 8008a2c:	049b      	lsls	r3, r3, #18
 8008a2e:	4013      	ands	r3, r2
 8008a30:	d1f0      	bne.n	8008a14 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a32:	4b26      	ldr	r3, [pc, #152]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	4a2c      	ldr	r2, [pc, #176]	; (8008ae8 <HAL_RCC_OscConfig+0x688>)
 8008a38:	4013      	ands	r3, r2
 8008a3a:	0019      	movs	r1, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a44:	431a      	orrs	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	4b1f      	ldr	r3, [pc, #124]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a52:	4b1e      	ldr	r3, [pc, #120]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	4b1d      	ldr	r3, [pc, #116]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008a58:	2180      	movs	r1, #128	; 0x80
 8008a5a:	0449      	lsls	r1, r1, #17
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a60:	f7fd ff1a 	bl	8006898 <HAL_GetTick>
 8008a64:	0003      	movs	r3, r0
 8008a66:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008a68:	e008      	b.n	8008a7c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a6a:	f7fd ff15 	bl	8006898 <HAL_GetTick>
 8008a6e:	0002      	movs	r2, r0
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d901      	bls.n	8008a7c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e055      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008a7c:	4b13      	ldr	r3, [pc, #76]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	2380      	movs	r3, #128	; 0x80
 8008a82:	049b      	lsls	r3, r3, #18
 8008a84:	4013      	ands	r3, r2
 8008a86:	d0f0      	beq.n	8008a6a <HAL_RCC_OscConfig+0x60a>
 8008a88:	e04d      	b.n	8008b26 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a8a:	4b10      	ldr	r3, [pc, #64]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	4b0f      	ldr	r3, [pc, #60]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008a90:	4914      	ldr	r1, [pc, #80]	; (8008ae4 <HAL_RCC_OscConfig+0x684>)
 8008a92:	400a      	ands	r2, r1
 8008a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a96:	f7fd feff 	bl	8006898 <HAL_GetTick>
 8008a9a:	0003      	movs	r3, r0
 8008a9c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008a9e:	e008      	b.n	8008ab2 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aa0:	f7fd fefa 	bl	8006898 <HAL_GetTick>
 8008aa4:	0002      	movs	r2, r0
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e03a      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008ab2:	4b06      	ldr	r3, [pc, #24]	; (8008acc <HAL_RCC_OscConfig+0x66c>)
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	2380      	movs	r3, #128	; 0x80
 8008ab8:	049b      	lsls	r3, r3, #18
 8008aba:	4013      	ands	r3, r2
 8008abc:	d1f0      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x640>
 8008abe:	e032      	b.n	8008b26 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d111      	bne.n	8008aec <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e02d      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
 8008acc:	40021000 	.word	0x40021000
 8008ad0:	fffffeff 	.word	0xfffffeff
 8008ad4:	40007000 	.word	0x40007000
 8008ad8:	fffffbff 	.word	0xfffffbff
 8008adc:	00001388 	.word	0x00001388
 8008ae0:	efffffff 	.word	0xefffffff
 8008ae4:	feffffff 	.word	0xfeffffff
 8008ae8:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008aec:	4b10      	ldr	r3, [pc, #64]	; (8008b30 <HAL_RCC_OscConfig+0x6d0>)
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008af2:	69fa      	ldr	r2, [r7, #28]
 8008af4:	2380      	movs	r3, #128	; 0x80
 8008af6:	025b      	lsls	r3, r3, #9
 8008af8:	401a      	ands	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d10f      	bne.n	8008b22 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008b02:	69fa      	ldr	r2, [r7, #28]
 8008b04:	23f0      	movs	r3, #240	; 0xf0
 8008b06:	039b      	lsls	r3, r3, #14
 8008b08:	401a      	ands	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d107      	bne.n	8008b22 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	23c0      	movs	r3, #192	; 0xc0
 8008b16:	041b      	lsls	r3, r3, #16
 8008b18:	401a      	ands	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d001      	beq.n	8008b26 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e000      	b.n	8008b28 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	0018      	movs	r0, r3
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	b00a      	add	sp, #40	; 0x28
 8008b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8008b30:	40021000 	.word	0x40021000

08008b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b34:	b5b0      	push	{r4, r5, r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e128      	b.n	8008d9a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b48:	4b96      	ldr	r3, [pc, #600]	; (8008da4 <HAL_RCC_ClockConfig+0x270>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	4013      	ands	r3, r2
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d91e      	bls.n	8008b94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b56:	4b93      	ldr	r3, [pc, #588]	; (8008da4 <HAL_RCC_ClockConfig+0x270>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	4393      	bics	r3, r2
 8008b5e:	0019      	movs	r1, r3
 8008b60:	4b90      	ldr	r3, [pc, #576]	; (8008da4 <HAL_RCC_ClockConfig+0x270>)
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	430a      	orrs	r2, r1
 8008b66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008b68:	f7fd fe96 	bl	8006898 <HAL_GetTick>
 8008b6c:	0003      	movs	r3, r0
 8008b6e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b70:	e009      	b.n	8008b86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b72:	f7fd fe91 	bl	8006898 <HAL_GetTick>
 8008b76:	0002      	movs	r2, r0
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	4a8a      	ldr	r2, [pc, #552]	; (8008da8 <HAL_RCC_ClockConfig+0x274>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e109      	b.n	8008d9a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b86:	4b87      	ldr	r3, [pc, #540]	; (8008da4 <HAL_RCC_ClockConfig+0x270>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d1ee      	bne.n	8008b72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	d009      	beq.n	8008bb2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b9e:	4b83      	ldr	r3, [pc, #524]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	22f0      	movs	r2, #240	; 0xf0
 8008ba4:	4393      	bics	r3, r2
 8008ba6:	0019      	movs	r1, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	4b7f      	ldr	r3, [pc, #508]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	4013      	ands	r3, r2
 8008bba:	d100      	bne.n	8008bbe <HAL_RCC_ClockConfig+0x8a>
 8008bbc:	e089      	b.n	8008cd2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d107      	bne.n	8008bd6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bc6:	4b79      	ldr	r3, [pc, #484]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	2380      	movs	r3, #128	; 0x80
 8008bcc:	029b      	lsls	r3, r3, #10
 8008bce:	4013      	ands	r3, r2
 8008bd0:	d120      	bne.n	8008c14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e0e1      	b.n	8008d9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	2b03      	cmp	r3, #3
 8008bdc:	d107      	bne.n	8008bee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bde:	4b73      	ldr	r3, [pc, #460]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	2380      	movs	r3, #128	; 0x80
 8008be4:	049b      	lsls	r3, r3, #18
 8008be6:	4013      	ands	r3, r2
 8008be8:	d114      	bne.n	8008c14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e0d5      	b.n	8008d9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d106      	bne.n	8008c04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bf6:	4b6d      	ldr	r3, [pc, #436]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2204      	movs	r2, #4
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	d109      	bne.n	8008c14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e0ca      	b.n	8008d9a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008c04:	4b69      	ldr	r3, [pc, #420]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	2380      	movs	r3, #128	; 0x80
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	d101      	bne.n	8008c14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e0c2      	b.n	8008d9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c14:	4b65      	ldr	r3, [pc, #404]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	2203      	movs	r2, #3
 8008c1a:	4393      	bics	r3, r2
 8008c1c:	0019      	movs	r1, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	4b62      	ldr	r3, [pc, #392]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008c24:	430a      	orrs	r2, r1
 8008c26:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c28:	f7fd fe36 	bl	8006898 <HAL_GetTick>
 8008c2c:	0003      	movs	r3, r0
 8008c2e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d111      	bne.n	8008c5c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c38:	e009      	b.n	8008c4e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c3a:	f7fd fe2d 	bl	8006898 <HAL_GetTick>
 8008c3e:	0002      	movs	r2, r0
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	4a58      	ldr	r2, [pc, #352]	; (8008da8 <HAL_RCC_ClockConfig+0x274>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d901      	bls.n	8008c4e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e0a5      	b.n	8008d9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c4e:	4b57      	ldr	r3, [pc, #348]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	220c      	movs	r2, #12
 8008c54:	4013      	ands	r3, r2
 8008c56:	2b08      	cmp	r3, #8
 8008c58:	d1ef      	bne.n	8008c3a <HAL_RCC_ClockConfig+0x106>
 8008c5a:	e03a      	b.n	8008cd2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d111      	bne.n	8008c88 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c64:	e009      	b.n	8008c7a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c66:	f7fd fe17 	bl	8006898 <HAL_GetTick>
 8008c6a:	0002      	movs	r2, r0
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	4a4d      	ldr	r2, [pc, #308]	; (8008da8 <HAL_RCC_ClockConfig+0x274>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e08f      	b.n	8008d9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c7a:	4b4c      	ldr	r3, [pc, #304]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	220c      	movs	r2, #12
 8008c80:	4013      	ands	r3, r2
 8008c82:	2b0c      	cmp	r3, #12
 8008c84:	d1ef      	bne.n	8008c66 <HAL_RCC_ClockConfig+0x132>
 8008c86:	e024      	b.n	8008cd2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d11b      	bne.n	8008cc8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c90:	e009      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c92:	f7fd fe01 	bl	8006898 <HAL_GetTick>
 8008c96:	0002      	movs	r2, r0
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	4a42      	ldr	r2, [pc, #264]	; (8008da8 <HAL_RCC_ClockConfig+0x274>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d901      	bls.n	8008ca6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e079      	b.n	8008d9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ca6:	4b41      	ldr	r3, [pc, #260]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	220c      	movs	r2, #12
 8008cac:	4013      	ands	r3, r2
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d1ef      	bne.n	8008c92 <HAL_RCC_ClockConfig+0x15e>
 8008cb2:	e00e      	b.n	8008cd2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cb4:	f7fd fdf0 	bl	8006898 <HAL_GetTick>
 8008cb8:	0002      	movs	r2, r0
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	4a3a      	ldr	r2, [pc, #232]	; (8008da8 <HAL_RCC_ClockConfig+0x274>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d901      	bls.n	8008cc8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e068      	b.n	8008d9a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008cc8:	4b38      	ldr	r3, [pc, #224]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	220c      	movs	r2, #12
 8008cce:	4013      	ands	r3, r2
 8008cd0:	d1f0      	bne.n	8008cb4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cd2:	4b34      	ldr	r3, [pc, #208]	; (8008da4 <HAL_RCC_ClockConfig+0x270>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	4013      	ands	r3, r2
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d21e      	bcs.n	8008d1e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ce0:	4b30      	ldr	r3, [pc, #192]	; (8008da4 <HAL_RCC_ClockConfig+0x270>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	4393      	bics	r3, r2
 8008ce8:	0019      	movs	r1, r3
 8008cea:	4b2e      	ldr	r3, [pc, #184]	; (8008da4 <HAL_RCC_ClockConfig+0x270>)
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008cf2:	f7fd fdd1 	bl	8006898 <HAL_GetTick>
 8008cf6:	0003      	movs	r3, r0
 8008cf8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cfa:	e009      	b.n	8008d10 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cfc:	f7fd fdcc 	bl	8006898 <HAL_GetTick>
 8008d00:	0002      	movs	r2, r0
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	4a28      	ldr	r2, [pc, #160]	; (8008da8 <HAL_RCC_ClockConfig+0x274>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d901      	bls.n	8008d10 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e044      	b.n	8008d9a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d10:	4b24      	ldr	r3, [pc, #144]	; (8008da4 <HAL_RCC_ClockConfig+0x270>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2201      	movs	r2, #1
 8008d16:	4013      	ands	r3, r2
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d1ee      	bne.n	8008cfc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2204      	movs	r2, #4
 8008d24:	4013      	ands	r3, r2
 8008d26:	d009      	beq.n	8008d3c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d28:	4b20      	ldr	r3, [pc, #128]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	4a20      	ldr	r2, [pc, #128]	; (8008db0 <HAL_RCC_ClockConfig+0x27c>)
 8008d2e:	4013      	ands	r3, r2
 8008d30:	0019      	movs	r1, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68da      	ldr	r2, [r3, #12]
 8008d36:	4b1d      	ldr	r3, [pc, #116]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2208      	movs	r2, #8
 8008d42:	4013      	ands	r3, r2
 8008d44:	d00a      	beq.n	8008d5c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008d46:	4b19      	ldr	r3, [pc, #100]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	4a1a      	ldr	r2, [pc, #104]	; (8008db4 <HAL_RCC_ClockConfig+0x280>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	0019      	movs	r1, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	00da      	lsls	r2, r3, #3
 8008d56:	4b15      	ldr	r3, [pc, #84]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d5c:	f000 f832 	bl	8008dc4 <HAL_RCC_GetSysClockFreq>
 8008d60:	0001      	movs	r1, r0
 8008d62:	4b12      	ldr	r3, [pc, #72]	; (8008dac <HAL_RCC_ClockConfig+0x278>)
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	091b      	lsrs	r3, r3, #4
 8008d68:	220f      	movs	r2, #15
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	4a12      	ldr	r2, [pc, #72]	; (8008db8 <HAL_RCC_ClockConfig+0x284>)
 8008d6e:	5cd3      	ldrb	r3, [r2, r3]
 8008d70:	000a      	movs	r2, r1
 8008d72:	40da      	lsrs	r2, r3
 8008d74:	4b11      	ldr	r3, [pc, #68]	; (8008dbc <HAL_RCC_ClockConfig+0x288>)
 8008d76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008d78:	4b11      	ldr	r3, [pc, #68]	; (8008dc0 <HAL_RCC_ClockConfig+0x28c>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	250b      	movs	r5, #11
 8008d7e:	197c      	adds	r4, r7, r5
 8008d80:	0018      	movs	r0, r3
 8008d82:	f7fd fd43 	bl	800680c <HAL_InitTick>
 8008d86:	0003      	movs	r3, r0
 8008d88:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008d8a:	197b      	adds	r3, r7, r5
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8008d92:	197b      	adds	r3, r7, r5
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	e000      	b.n	8008d9a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	0018      	movs	r0, r3
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	b004      	add	sp, #16
 8008da0:	bdb0      	pop	{r4, r5, r7, pc}
 8008da2:	46c0      	nop			; (mov r8, r8)
 8008da4:	40022000 	.word	0x40022000
 8008da8:	00001388 	.word	0x00001388
 8008dac:	40021000 	.word	0x40021000
 8008db0:	fffff8ff 	.word	0xfffff8ff
 8008db4:	ffffc7ff 	.word	0xffffc7ff
 8008db8:	0800e9cc 	.word	0x0800e9cc
 8008dbc:	2000005c 	.word	0x2000005c
 8008dc0:	20000060 	.word	0x20000060

08008dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008dc4:	b5b0      	push	{r4, r5, r7, lr}
 8008dc6:	b08e      	sub	sp, #56	; 0x38
 8008dc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008dca:	4b4c      	ldr	r3, [pc, #304]	; (8008efc <HAL_RCC_GetSysClockFreq+0x138>)
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dd2:	230c      	movs	r3, #12
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	2b0c      	cmp	r3, #12
 8008dd8:	d014      	beq.n	8008e04 <HAL_RCC_GetSysClockFreq+0x40>
 8008dda:	d900      	bls.n	8008dde <HAL_RCC_GetSysClockFreq+0x1a>
 8008ddc:	e07b      	b.n	8008ed6 <HAL_RCC_GetSysClockFreq+0x112>
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d002      	beq.n	8008de8 <HAL_RCC_GetSysClockFreq+0x24>
 8008de2:	2b08      	cmp	r3, #8
 8008de4:	d00b      	beq.n	8008dfe <HAL_RCC_GetSysClockFreq+0x3a>
 8008de6:	e076      	b.n	8008ed6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008de8:	4b44      	ldr	r3, [pc, #272]	; (8008efc <HAL_RCC_GetSysClockFreq+0x138>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2210      	movs	r2, #16
 8008dee:	4013      	ands	r3, r2
 8008df0:	d002      	beq.n	8008df8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008df2:	4b43      	ldr	r3, [pc, #268]	; (8008f00 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008df4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008df6:	e07c      	b.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8008df8:	4b42      	ldr	r3, [pc, #264]	; (8008f04 <HAL_RCC_GetSysClockFreq+0x140>)
 8008dfa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008dfc:	e079      	b.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008dfe:	4b42      	ldr	r3, [pc, #264]	; (8008f08 <HAL_RCC_GetSysClockFreq+0x144>)
 8008e00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008e02:	e076      	b.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e06:	0c9a      	lsrs	r2, r3, #18
 8008e08:	230f      	movs	r3, #15
 8008e0a:	401a      	ands	r2, r3
 8008e0c:	4b3f      	ldr	r3, [pc, #252]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x148>)
 8008e0e:	5c9b      	ldrb	r3, [r3, r2]
 8008e10:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	0d9a      	lsrs	r2, r3, #22
 8008e16:	2303      	movs	r3, #3
 8008e18:	4013      	ands	r3, r2
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e1e:	4b37      	ldr	r3, [pc, #220]	; (8008efc <HAL_RCC_GetSysClockFreq+0x138>)
 8008e20:	68da      	ldr	r2, [r3, #12]
 8008e22:	2380      	movs	r3, #128	; 0x80
 8008e24:	025b      	lsls	r3, r3, #9
 8008e26:	4013      	ands	r3, r2
 8008e28:	d01a      	beq.n	8008e60 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2c:	61bb      	str	r3, [r7, #24]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61fb      	str	r3, [r7, #28]
 8008e32:	4a35      	ldr	r2, [pc, #212]	; (8008f08 <HAL_RCC_GetSysClockFreq+0x144>)
 8008e34:	2300      	movs	r3, #0
 8008e36:	69b8      	ldr	r0, [r7, #24]
 8008e38:	69f9      	ldr	r1, [r7, #28]
 8008e3a:	f7f7 fb8f 	bl	800055c <__aeabi_lmul>
 8008e3e:	0002      	movs	r2, r0
 8008e40:	000b      	movs	r3, r1
 8008e42:	0010      	movs	r0, r2
 8008e44:	0019      	movs	r1, r3
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	613b      	str	r3, [r7, #16]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	617b      	str	r3, [r7, #20]
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f7f7 fb63 	bl	800051c <__aeabi_uldivmod>
 8008e56:	0002      	movs	r2, r0
 8008e58:	000b      	movs	r3, r1
 8008e5a:	0013      	movs	r3, r2
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e5e:	e037      	b.n	8008ed0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008e60:	4b26      	ldr	r3, [pc, #152]	; (8008efc <HAL_RCC_GetSysClockFreq+0x138>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2210      	movs	r2, #16
 8008e66:	4013      	ands	r3, r2
 8008e68:	d01a      	beq.n	8008ea0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8008e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6c:	60bb      	str	r3, [r7, #8]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60fb      	str	r3, [r7, #12]
 8008e72:	4a23      	ldr	r2, [pc, #140]	; (8008f00 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008e74:	2300      	movs	r3, #0
 8008e76:	68b8      	ldr	r0, [r7, #8]
 8008e78:	68f9      	ldr	r1, [r7, #12]
 8008e7a:	f7f7 fb6f 	bl	800055c <__aeabi_lmul>
 8008e7e:	0002      	movs	r2, r0
 8008e80:	000b      	movs	r3, r1
 8008e82:	0010      	movs	r0, r2
 8008e84:	0019      	movs	r1, r3
 8008e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e88:	603b      	str	r3, [r7, #0]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	607b      	str	r3, [r7, #4]
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f7f7 fb43 	bl	800051c <__aeabi_uldivmod>
 8008e96:	0002      	movs	r2, r0
 8008e98:	000b      	movs	r3, r1
 8008e9a:	0013      	movs	r3, r2
 8008e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e9e:	e017      	b.n	8008ed0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	0019      	movs	r1, r3
 8008ea8:	4a16      	ldr	r2, [pc, #88]	; (8008f04 <HAL_RCC_GetSysClockFreq+0x140>)
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f7f7 fb56 	bl	800055c <__aeabi_lmul>
 8008eb0:	0002      	movs	r2, r0
 8008eb2:	000b      	movs	r3, r1
 8008eb4:	0010      	movs	r0, r2
 8008eb6:	0019      	movs	r1, r3
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	001c      	movs	r4, r3
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	001d      	movs	r5, r3
 8008ec0:	0022      	movs	r2, r4
 8008ec2:	002b      	movs	r3, r5
 8008ec4:	f7f7 fb2a 	bl	800051c <__aeabi_uldivmod>
 8008ec8:	0002      	movs	r2, r0
 8008eca:	000b      	movs	r3, r1
 8008ecc:	0013      	movs	r3, r2
 8008ece:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8008ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008ed4:	e00d      	b.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008ed6:	4b09      	ldr	r3, [pc, #36]	; (8008efc <HAL_RCC_GetSysClockFreq+0x138>)
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	0b5b      	lsrs	r3, r3, #13
 8008edc:	2207      	movs	r2, #7
 8008ede:	4013      	ands	r3, r2
 8008ee0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	2280      	movs	r2, #128	; 0x80
 8008ee8:	0212      	lsls	r2, r2, #8
 8008eea:	409a      	lsls	r2, r3
 8008eec:	0013      	movs	r3, r2
 8008eee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008ef0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	b00e      	add	sp, #56	; 0x38
 8008efa:	bdb0      	pop	{r4, r5, r7, pc}
 8008efc:	40021000 	.word	0x40021000
 8008f00:	003d0900 	.word	0x003d0900
 8008f04:	00f42400 	.word	0x00f42400
 8008f08:	007a1200 	.word	0x007a1200
 8008f0c:	0800e9e4 	.word	0x0800e9e4

08008f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f14:	4b02      	ldr	r3, [pc, #8]	; (8008f20 <HAL_RCC_GetHCLKFreq+0x10>)
 8008f16:	681b      	ldr	r3, [r3, #0]
}
 8008f18:	0018      	movs	r0, r3
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	46c0      	nop			; (mov r8, r8)
 8008f20:	2000005c 	.word	0x2000005c

08008f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f28:	f7ff fff2 	bl	8008f10 <HAL_RCC_GetHCLKFreq>
 8008f2c:	0001      	movs	r1, r0
 8008f2e:	4b06      	ldr	r3, [pc, #24]	; (8008f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	0a1b      	lsrs	r3, r3, #8
 8008f34:	2207      	movs	r2, #7
 8008f36:	4013      	ands	r3, r2
 8008f38:	4a04      	ldr	r2, [pc, #16]	; (8008f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f3a:	5cd3      	ldrb	r3, [r2, r3]
 8008f3c:	40d9      	lsrs	r1, r3
 8008f3e:	000b      	movs	r3, r1
}
 8008f40:	0018      	movs	r0, r3
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	46c0      	nop			; (mov r8, r8)
 8008f48:	40021000 	.word	0x40021000
 8008f4c:	0800e9dc 	.word	0x0800e9dc

08008f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008f54:	f7ff ffdc 	bl	8008f10 <HAL_RCC_GetHCLKFreq>
 8008f58:	0001      	movs	r1, r0
 8008f5a:	4b06      	ldr	r3, [pc, #24]	; (8008f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	0adb      	lsrs	r3, r3, #11
 8008f60:	2207      	movs	r2, #7
 8008f62:	4013      	ands	r3, r2
 8008f64:	4a04      	ldr	r2, [pc, #16]	; (8008f78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f66:	5cd3      	ldrb	r3, [r2, r3]
 8008f68:	40d9      	lsrs	r1, r3
 8008f6a:	000b      	movs	r3, r1
}
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	46c0      	nop			; (mov r8, r8)
 8008f74:	40021000 	.word	0x40021000
 8008f78:	0800e9dc 	.word	0x0800e9dc

08008f7c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8008f84:	2017      	movs	r0, #23
 8008f86:	183b      	adds	r3, r7, r0
 8008f88:	2200      	movs	r2, #0
 8008f8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2220      	movs	r2, #32
 8008f92:	4013      	ands	r3, r2
 8008f94:	d100      	bne.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8008f96:	e0c2      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f98:	4b89      	ldr	r3, [pc, #548]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f9c:	2380      	movs	r3, #128	; 0x80
 8008f9e:	055b      	lsls	r3, r3, #21
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	d109      	bne.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fa4:	4b86      	ldr	r3, [pc, #536]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fa8:	4b85      	ldr	r3, [pc, #532]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008faa:	2180      	movs	r1, #128	; 0x80
 8008fac:	0549      	lsls	r1, r1, #21
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008fb2:	183b      	adds	r3, r7, r0
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fb8:	4b82      	ldr	r3, [pc, #520]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	2380      	movs	r3, #128	; 0x80
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	d11a      	bne.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008fc4:	4b7f      	ldr	r3, [pc, #508]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	4b7e      	ldr	r3, [pc, #504]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008fca:	2180      	movs	r1, #128	; 0x80
 8008fcc:	0049      	lsls	r1, r1, #1
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fd2:	f7fd fc61 	bl	8006898 <HAL_GetTick>
 8008fd6:	0003      	movs	r3, r0
 8008fd8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fda:	e008      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fdc:	f7fd fc5c 	bl	8006898 <HAL_GetTick>
 8008fe0:	0002      	movs	r2, r0
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b64      	cmp	r3, #100	; 0x64
 8008fe8:	d901      	bls.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e0e3      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fee:	4b75      	ldr	r3, [pc, #468]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	2380      	movs	r3, #128	; 0x80
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	d0f0      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008ffa:	4b71      	ldr	r3, [pc, #452]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	23c0      	movs	r3, #192	; 0xc0
 8009000:	039b      	lsls	r3, r3, #14
 8009002:	4013      	ands	r3, r2
 8009004:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	23c0      	movs	r3, #192	; 0xc0
 800900c:	039b      	lsls	r3, r3, #14
 800900e:	4013      	ands	r3, r2
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	429a      	cmp	r2, r3
 8009014:	d013      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	23c0      	movs	r3, #192	; 0xc0
 800901c:	029b      	lsls	r3, r3, #10
 800901e:	401a      	ands	r2, r3
 8009020:	23c0      	movs	r3, #192	; 0xc0
 8009022:	029b      	lsls	r3, r3, #10
 8009024:	429a      	cmp	r2, r3
 8009026:	d10a      	bne.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009028:	4b65      	ldr	r3, [pc, #404]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	2380      	movs	r3, #128	; 0x80
 800902e:	029b      	lsls	r3, r3, #10
 8009030:	401a      	ands	r2, r3
 8009032:	2380      	movs	r3, #128	; 0x80
 8009034:	029b      	lsls	r3, r3, #10
 8009036:	429a      	cmp	r2, r3
 8009038:	d101      	bne.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e0bb      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800903e:	4b60      	ldr	r3, [pc, #384]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009040:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009042:	23c0      	movs	r3, #192	; 0xc0
 8009044:	029b      	lsls	r3, r3, #10
 8009046:	4013      	ands	r3, r2
 8009048:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d03b      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	23c0      	movs	r3, #192	; 0xc0
 8009056:	029b      	lsls	r3, r3, #10
 8009058:	4013      	ands	r3, r2
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	429a      	cmp	r2, r3
 800905e:	d033      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2220      	movs	r2, #32
 8009066:	4013      	ands	r3, r2
 8009068:	d02e      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800906a:	4b55      	ldr	r3, [pc, #340]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800906c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800906e:	4a56      	ldr	r2, [pc, #344]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8009070:	4013      	ands	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009074:	4b52      	ldr	r3, [pc, #328]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009076:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009078:	4b51      	ldr	r3, [pc, #324]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800907a:	2180      	movs	r1, #128	; 0x80
 800907c:	0309      	lsls	r1, r1, #12
 800907e:	430a      	orrs	r2, r1
 8009080:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009082:	4b4f      	ldr	r3, [pc, #316]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009086:	4b4e      	ldr	r3, [pc, #312]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009088:	4950      	ldr	r1, [pc, #320]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800908a:	400a      	ands	r2, r1
 800908c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800908e:	4b4c      	ldr	r3, [pc, #304]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	2380      	movs	r3, #128	; 0x80
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	4013      	ands	r3, r2
 800909c:	d014      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800909e:	f7fd fbfb 	bl	8006898 <HAL_GetTick>
 80090a2:	0003      	movs	r3, r0
 80090a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090a6:	e009      	b.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090a8:	f7fd fbf6 	bl	8006898 <HAL_GetTick>
 80090ac:	0002      	movs	r2, r0
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	4a47      	ldr	r2, [pc, #284]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d901      	bls.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e07c      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090bc:	4b40      	ldr	r3, [pc, #256]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80090be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090c0:	2380      	movs	r3, #128	; 0x80
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4013      	ands	r3, r2
 80090c6:	d0ef      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	23c0      	movs	r3, #192	; 0xc0
 80090ce:	029b      	lsls	r3, r3, #10
 80090d0:	401a      	ands	r2, r3
 80090d2:	23c0      	movs	r3, #192	; 0xc0
 80090d4:	029b      	lsls	r3, r3, #10
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d10c      	bne.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80090da:	4b39      	ldr	r3, [pc, #228]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a3d      	ldr	r2, [pc, #244]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80090e0:	4013      	ands	r3, r2
 80090e2:	0019      	movs	r1, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	23c0      	movs	r3, #192	; 0xc0
 80090ea:	039b      	lsls	r3, r3, #14
 80090ec:	401a      	ands	r2, r3
 80090ee:	4b34      	ldr	r3, [pc, #208]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80090f0:	430a      	orrs	r2, r1
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	4b32      	ldr	r3, [pc, #200]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80090f6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	23c0      	movs	r3, #192	; 0xc0
 80090fe:	029b      	lsls	r3, r3, #10
 8009100:	401a      	ands	r2, r3
 8009102:	4b2f      	ldr	r3, [pc, #188]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009104:	430a      	orrs	r2, r1
 8009106:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009108:	2317      	movs	r3, #23
 800910a:	18fb      	adds	r3, r7, r3
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d105      	bne.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009112:	4b2b      	ldr	r3, [pc, #172]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009116:	4b2a      	ldr	r3, [pc, #168]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009118:	492f      	ldr	r1, [pc, #188]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800911a:	400a      	ands	r2, r1
 800911c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2201      	movs	r2, #1
 8009124:	4013      	ands	r3, r2
 8009126:	d009      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009128:	4b25      	ldr	r3, [pc, #148]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800912a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800912c:	2203      	movs	r2, #3
 800912e:	4393      	bics	r3, r2
 8009130:	0019      	movs	r1, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	689a      	ldr	r2, [r3, #8]
 8009136:	4b22      	ldr	r3, [pc, #136]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009138:	430a      	orrs	r2, r1
 800913a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2202      	movs	r2, #2
 8009142:	4013      	ands	r3, r2
 8009144:	d009      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009146:	4b1e      	ldr	r3, [pc, #120]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800914a:	220c      	movs	r2, #12
 800914c:	4393      	bics	r3, r2
 800914e:	0019      	movs	r1, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	4b1a      	ldr	r3, [pc, #104]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009156:	430a      	orrs	r2, r1
 8009158:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2204      	movs	r2, #4
 8009160:	4013      	ands	r3, r2
 8009162:	d009      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009164:	4b16      	ldr	r3, [pc, #88]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009168:	4a1c      	ldr	r2, [pc, #112]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800916a:	4013      	ands	r3, r2
 800916c:	0019      	movs	r1, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	691a      	ldr	r2, [r3, #16]
 8009172:	4b13      	ldr	r3, [pc, #76]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009174:	430a      	orrs	r2, r1
 8009176:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2208      	movs	r2, #8
 800917e:	4013      	ands	r3, r2
 8009180:	d009      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009182:	4b0f      	ldr	r3, [pc, #60]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009186:	4a16      	ldr	r2, [pc, #88]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009188:	4013      	ands	r3, r2
 800918a:	0019      	movs	r1, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	695a      	ldr	r2, [r3, #20]
 8009190:	4b0b      	ldr	r3, [pc, #44]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009192:	430a      	orrs	r2, r1
 8009194:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2280      	movs	r2, #128	; 0x80
 800919c:	4013      	ands	r3, r2
 800919e:	d009      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80091a0:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80091a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a4:	4a0f      	ldr	r2, [pc, #60]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091a6:	4013      	ands	r3, r2
 80091a8:	0019      	movs	r1, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	699a      	ldr	r2, [r3, #24]
 80091ae:	4b04      	ldr	r3, [pc, #16]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80091b0:	430a      	orrs	r2, r1
 80091b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	0018      	movs	r0, r3
 80091b8:	46bd      	mov	sp, r7
 80091ba:	b006      	add	sp, #24
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	46c0      	nop			; (mov r8, r8)
 80091c0:	40021000 	.word	0x40021000
 80091c4:	40007000 	.word	0x40007000
 80091c8:	fffcffff 	.word	0xfffcffff
 80091cc:	fff7ffff 	.word	0xfff7ffff
 80091d0:	00001388 	.word	0x00001388
 80091d4:	ffcfffff 	.word	0xffcfffff
 80091d8:	efffffff 	.word	0xefffffff
 80091dc:	fffff3ff 	.word	0xfffff3ff
 80091e0:	ffffcfff 	.word	0xffffcfff
 80091e4:	fff3ffff 	.word	0xfff3ffff

080091e8 <HAL_RCCEx_EnableLSECSS>:
/**
  * @brief  Enables the LSE Clock Security System.
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSECSSON) ;
 80091ec:	4b04      	ldr	r3, [pc, #16]	; (8009200 <HAL_RCCEx_EnableLSECSS+0x18>)
 80091ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091f0:	4b03      	ldr	r3, [pc, #12]	; (8009200 <HAL_RCCEx_EnableLSECSS+0x18>)
 80091f2:	2180      	movs	r1, #128	; 0x80
 80091f4:	0189      	lsls	r1, r1, #6
 80091f6:	430a      	orrs	r2, r1
 80091f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80091fa:	46c0      	nop			; (mov r8, r8)
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	40021000 	.word	0x40021000

08009204 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d101      	bne.n	8009216 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e08e      	b.n	8009334 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2221      	movs	r2, #33	; 0x21
 800921a:	5c9b      	ldrb	r3, [r3, r2]
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	d107      	bne.n	8009232 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2220      	movs	r2, #32
 8009226:	2100      	movs	r1, #0
 8009228:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	0018      	movs	r0, r3
 800922e:	f7fc f923 	bl	8005478 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2221      	movs	r2, #33	; 0x21
 8009236:	2102      	movs	r1, #2
 8009238:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	22ca      	movs	r2, #202	; 0xca
 8009240:	625a      	str	r2, [r3, #36]	; 0x24
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2253      	movs	r2, #83	; 0x53
 8009248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	0018      	movs	r0, r3
 800924e:	f000 f89e 	bl	800938e <RTC_EnterInitMode>
 8009252:	1e03      	subs	r3, r0, #0
 8009254:	d009      	beq.n	800926a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	22ff      	movs	r2, #255	; 0xff
 800925c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2221      	movs	r2, #33	; 0x21
 8009262:	2104      	movs	r1, #4
 8009264:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e064      	b.n	8009334 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689a      	ldr	r2, [r3, #8]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4931      	ldr	r1, [pc, #196]	; (800933c <HAL_RTC_Init+0x138>)
 8009276:	400a      	ands	r2, r1
 8009278:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6899      	ldr	r1, [r3, #8]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	431a      	orrs	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	431a      	orrs	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	430a      	orrs	r2, r1
 8009296:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	68d2      	ldr	r2, [r2, #12]
 80092a0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6919      	ldr	r1, [r3, #16]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	041a      	lsls	r2, r3, #16
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68da      	ldr	r2, [r3, #12]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2180      	movs	r1, #128	; 0x80
 80092c2:	438a      	bics	r2, r1
 80092c4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2103      	movs	r1, #3
 80092d2:	438a      	bics	r2, r1
 80092d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	69da      	ldr	r2, [r3, #28]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	431a      	orrs	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	2220      	movs	r2, #32
 80092f6:	4013      	ands	r3, r2
 80092f8:	d113      	bne.n	8009322 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	0018      	movs	r0, r3
 80092fe:	f000 f81f 	bl	8009340 <HAL_RTC_WaitForSynchro>
 8009302:	1e03      	subs	r3, r0, #0
 8009304:	d00d      	beq.n	8009322 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	22ff      	movs	r2, #255	; 0xff
 800930c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2221      	movs	r2, #33	; 0x21
 8009312:	2104      	movs	r1, #4
 8009314:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2220      	movs	r2, #32
 800931a:	2100      	movs	r1, #0
 800931c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e008      	b.n	8009334 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	22ff      	movs	r2, #255	; 0xff
 8009328:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2221      	movs	r2, #33	; 0x21
 800932e:	2101      	movs	r1, #1
 8009330:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009332:	2300      	movs	r3, #0
  }
}
 8009334:	0018      	movs	r0, r3
 8009336:	46bd      	mov	sp, r7
 8009338:	b002      	add	sp, #8
 800933a:	bd80      	pop	{r7, pc}
 800933c:	ff8fffbf 	.word	0xff8fffbf

08009340 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68da      	ldr	r2, [r3, #12]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	21a0      	movs	r1, #160	; 0xa0
 8009354:	438a      	bics	r2, r1
 8009356:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009358:	f7fd fa9e 	bl	8006898 <HAL_GetTick>
 800935c:	0003      	movs	r3, r0
 800935e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009360:	e00a      	b.n	8009378 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009362:	f7fd fa99 	bl	8006898 <HAL_GetTick>
 8009366:	0002      	movs	r2, r0
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	1ad2      	subs	r2, r2, r3
 800936c:	23fa      	movs	r3, #250	; 0xfa
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	429a      	cmp	r2, r3
 8009372:	d901      	bls.n	8009378 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e006      	b.n	8009386 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	2220      	movs	r2, #32
 8009380:	4013      	ands	r3, r2
 8009382:	d0ee      	beq.n	8009362 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	0018      	movs	r0, r3
 8009388:	46bd      	mov	sp, r7
 800938a:	b004      	add	sp, #16
 800938c:	bd80      	pop	{r7, pc}

0800938e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	2240      	movs	r2, #64	; 0x40
 800939e:	4013      	ands	r3, r2
 80093a0:	d11a      	bne.n	80093d8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2201      	movs	r2, #1
 80093a8:	4252      	negs	r2, r2
 80093aa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80093ac:	f7fd fa74 	bl	8006898 <HAL_GetTick>
 80093b0:	0003      	movs	r3, r0
 80093b2:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80093b4:	e00a      	b.n	80093cc <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80093b6:	f7fd fa6f 	bl	8006898 <HAL_GetTick>
 80093ba:	0002      	movs	r2, r0
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	1ad2      	subs	r2, r2, r3
 80093c0:	23fa      	movs	r3, #250	; 0xfa
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d901      	bls.n	80093cc <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e006      	b.n	80093da <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	2240      	movs	r2, #64	; 0x40
 80093d4:	4013      	ands	r3, r2
 80093d6:	d0ee      	beq.n	80093b6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	0018      	movs	r0, r3
 80093dc:	46bd      	mov	sp, r7
 80093de:	b004      	add	sp, #16
 80093e0:	bd80      	pop	{r7, pc}
	...

080093e4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2220      	movs	r2, #32
 80093f4:	5c9b      	ldrb	r3, [r3, r2]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d101      	bne.n	80093fe <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80093fa:	2302      	movs	r3, #2
 80093fc:	e0ad      	b.n	800955a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2220      	movs	r2, #32
 8009402:	2101      	movs	r1, #1
 8009404:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2221      	movs	r2, #33	; 0x21
 800940a:	2102      	movs	r1, #2
 800940c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	22ca      	movs	r2, #202	; 0xca
 8009414:	625a      	str	r2, [r3, #36]	; 0x24
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2253      	movs	r2, #83	; 0x53
 800941c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689a      	ldr	r2, [r3, #8]
 8009424:	2380      	movs	r3, #128	; 0x80
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	4013      	ands	r3, r2
 800942a:	d021      	beq.n	8009470 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 800942c:	f7fd fa34 	bl	8006898 <HAL_GetTick>
 8009430:	0003      	movs	r3, r0
 8009432:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009434:	e016      	b.n	8009464 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009436:	f7fd fa2f 	bl	8006898 <HAL_GetTick>
 800943a:	0002      	movs	r2, r0
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	1ad2      	subs	r2, r2, r3
 8009440:	23fa      	movs	r3, #250	; 0xfa
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	429a      	cmp	r2, r3
 8009446:	d90d      	bls.n	8009464 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	22ff      	movs	r2, #255	; 0xff
 800944e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2221      	movs	r2, #33	; 0x21
 8009454:	2103      	movs	r1, #3
 8009456:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2220      	movs	r2, #32
 800945c:	2100      	movs	r1, #0
 800945e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e07a      	b.n	800955a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	2204      	movs	r2, #4
 800946c:	4013      	ands	r3, r2
 800946e:	d1e2      	bne.n	8009436 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689a      	ldr	r2, [r3, #8]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	493a      	ldr	r1, [pc, #232]	; (8009564 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800947c:	400a      	ands	r2, r1
 800947e:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	22ff      	movs	r2, #255	; 0xff
 8009488:	401a      	ands	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4936      	ldr	r1, [pc, #216]	; (8009568 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8009490:	430a      	orrs	r2, r1
 8009492:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009494:	f7fd fa00 	bl	8006898 <HAL_GetTick>
 8009498:	0003      	movs	r3, r0
 800949a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800949c:	e016      	b.n	80094cc <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800949e:	f7fd f9fb 	bl	8006898 <HAL_GetTick>
 80094a2:	0002      	movs	r2, r0
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	1ad2      	subs	r2, r2, r3
 80094a8:	23fa      	movs	r3, #250	; 0xfa
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d90d      	bls.n	80094cc <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	22ff      	movs	r2, #255	; 0xff
 80094b6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2221      	movs	r2, #33	; 0x21
 80094bc:	2103      	movs	r1, #3
 80094be:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2220      	movs	r2, #32
 80094c4:	2100      	movs	r1, #0
 80094c6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e046      	b.n	800955a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	2204      	movs	r2, #4
 80094d4:	4013      	ands	r3, r2
 80094d6:	d0e2      	beq.n	800949e <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	689a      	ldr	r2, [r3, #8]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2107      	movs	r1, #7
 80094ec:	438a      	bics	r2, r1
 80094ee:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6899      	ldr	r1, [r3, #8]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	430a      	orrs	r2, r1
 80094fe:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009500:	4b1a      	ldr	r3, [pc, #104]	; (800956c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	4b19      	ldr	r3, [pc, #100]	; (800956c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8009506:	2180      	movs	r1, #128	; 0x80
 8009508:	0349      	lsls	r1, r1, #13
 800950a:	430a      	orrs	r2, r1
 800950c:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800950e:	4b17      	ldr	r3, [pc, #92]	; (800956c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8009510:	689a      	ldr	r2, [r3, #8]
 8009512:	4b16      	ldr	r3, [pc, #88]	; (800956c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8009514:	2180      	movs	r1, #128	; 0x80
 8009516:	0349      	lsls	r1, r1, #13
 8009518:	430a      	orrs	r2, r1
 800951a:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689a      	ldr	r2, [r3, #8]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2180      	movs	r1, #128	; 0x80
 8009528:	01c9      	lsls	r1, r1, #7
 800952a:	430a      	orrs	r2, r1
 800952c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2180      	movs	r1, #128	; 0x80
 800953a:	00c9      	lsls	r1, r1, #3
 800953c:	430a      	orrs	r2, r1
 800953e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	22ff      	movs	r2, #255	; 0xff
 8009546:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2221      	movs	r2, #33	; 0x21
 800954c:	2101      	movs	r1, #1
 800954e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2220      	movs	r2, #32
 8009554:	2100      	movs	r1, #0
 8009556:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	0018      	movs	r0, r3
 800955c:	46bd      	mov	sp, r7
 800955e:	b006      	add	sp, #24
 8009560:	bd80      	pop	{r7, pc}
 8009562:	46c0      	nop			; (mov r8, r8)
 8009564:	fffffbff 	.word	0xfffffbff
 8009568:	fffffb7f 	.word	0xfffffb7f
 800956c:	40010400 	.word	0x40010400

08009570 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68da      	ldr	r2, [r3, #12]
 800957e:	2380      	movs	r3, #128	; 0x80
 8009580:	00db      	lsls	r3, r3, #3
 8009582:	4013      	ands	r3, r2
 8009584:	d00d      	beq.n	80095a2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	0018      	movs	r0, r3
 800958a:	f7fa fa23 	bl	80039d4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	22ff      	movs	r2, #255	; 0xff
 8009596:	401a      	ands	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4907      	ldr	r1, [pc, #28]	; (80095bc <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 800959e:	430a      	orrs	r2, r1
 80095a0:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80095a2:	4b07      	ldr	r3, [pc, #28]	; (80095c0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 80095a4:	2280      	movs	r2, #128	; 0x80
 80095a6:	0352      	lsls	r2, r2, #13
 80095a8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2221      	movs	r2, #33	; 0x21
 80095ae:	2101      	movs	r1, #1
 80095b0:	5499      	strb	r1, [r3, r2]
}
 80095b2:	46c0      	nop			; (mov r8, r8)
 80095b4:	46bd      	mov	sp, r7
 80095b6:	b002      	add	sp, #8
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	fffffb7f 	.word	0xfffffb7f
 80095c0:	40010400 	.word	0x40010400

080095c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e083      	b.n	80096de <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d109      	bne.n	80095f2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	2382      	movs	r3, #130	; 0x82
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d009      	beq.n	80095fe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	61da      	str	r2, [r3, #28]
 80095f0:	e005      	b.n	80095fe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2251      	movs	r2, #81	; 0x51
 8009608:	5c9b      	ldrb	r3, [r3, r2]
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b00      	cmp	r3, #0
 800960e:	d107      	bne.n	8009620 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2250      	movs	r2, #80	; 0x50
 8009614:	2100      	movs	r1, #0
 8009616:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	0018      	movs	r0, r3
 800961c:	f7fb ff4c 	bl	80054b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2251      	movs	r2, #81	; 0x51
 8009624:	2102      	movs	r1, #2
 8009626:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2140      	movs	r1, #64	; 0x40
 8009634:	438a      	bics	r2, r1
 8009636:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	2382      	movs	r3, #130	; 0x82
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	401a      	ands	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6899      	ldr	r1, [r3, #8]
 8009646:	2384      	movs	r3, #132	; 0x84
 8009648:	021b      	lsls	r3, r3, #8
 800964a:	400b      	ands	r3, r1
 800964c:	431a      	orrs	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68d9      	ldr	r1, [r3, #12]
 8009652:	2380      	movs	r3, #128	; 0x80
 8009654:	011b      	lsls	r3, r3, #4
 8009656:	400b      	ands	r3, r1
 8009658:	431a      	orrs	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	2102      	movs	r1, #2
 8009660:	400b      	ands	r3, r1
 8009662:	431a      	orrs	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	695b      	ldr	r3, [r3, #20]
 8009668:	2101      	movs	r1, #1
 800966a:	400b      	ands	r3, r1
 800966c:	431a      	orrs	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6999      	ldr	r1, [r3, #24]
 8009672:	2380      	movs	r3, #128	; 0x80
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	400b      	ands	r3, r1
 8009678:	431a      	orrs	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	2138      	movs	r1, #56	; 0x38
 8009680:	400b      	ands	r3, r1
 8009682:	431a      	orrs	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	2180      	movs	r1, #128	; 0x80
 800968a:	400b      	ands	r3, r1
 800968c:	431a      	orrs	r2, r3
 800968e:	0011      	movs	r1, r2
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009694:	2380      	movs	r3, #128	; 0x80
 8009696:	019b      	lsls	r3, r3, #6
 8009698:	401a      	ands	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	430a      	orrs	r2, r1
 80096a0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	0c1b      	lsrs	r3, r3, #16
 80096a8:	2204      	movs	r2, #4
 80096aa:	4013      	ands	r3, r2
 80096ac:	0019      	movs	r1, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b2:	2210      	movs	r2, #16
 80096b4:	401a      	ands	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	69da      	ldr	r2, [r3, #28]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4907      	ldr	r1, [pc, #28]	; (80096e8 <HAL_SPI_Init+0x124>)
 80096ca:	400a      	ands	r2, r1
 80096cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2251      	movs	r2, #81	; 0x51
 80096d8:	2101      	movs	r1, #1
 80096da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	0018      	movs	r0, r3
 80096e0:	46bd      	mov	sp, r7
 80096e2:	b002      	add	sp, #8
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	46c0      	nop			; (mov r8, r8)
 80096e8:	fffff7ff 	.word	0xfffff7ff

080096ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b088      	sub	sp, #32
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	603b      	str	r3, [r7, #0]
 80096f8:	1dbb      	adds	r3, r7, #6
 80096fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80096fc:	231f      	movs	r3, #31
 80096fe:	18fb      	adds	r3, r7, r3
 8009700:	2200      	movs	r2, #0
 8009702:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2250      	movs	r2, #80	; 0x50
 8009708:	5c9b      	ldrb	r3, [r3, r2]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d101      	bne.n	8009712 <HAL_SPI_Transmit+0x26>
 800970e:	2302      	movs	r3, #2
 8009710:	e13e      	b.n	8009990 <HAL_SPI_Transmit+0x2a4>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2250      	movs	r2, #80	; 0x50
 8009716:	2101      	movs	r1, #1
 8009718:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800971a:	f7fd f8bd 	bl	8006898 <HAL_GetTick>
 800971e:	0003      	movs	r3, r0
 8009720:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009722:	2316      	movs	r3, #22
 8009724:	18fb      	adds	r3, r7, r3
 8009726:	1dba      	adds	r2, r7, #6
 8009728:	8812      	ldrh	r2, [r2, #0]
 800972a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2251      	movs	r2, #81	; 0x51
 8009730:	5c9b      	ldrb	r3, [r3, r2]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b01      	cmp	r3, #1
 8009736:	d004      	beq.n	8009742 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009738:	231f      	movs	r3, #31
 800973a:	18fb      	adds	r3, r7, r3
 800973c:	2202      	movs	r2, #2
 800973e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009740:	e11b      	b.n	800997a <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d003      	beq.n	8009750 <HAL_SPI_Transmit+0x64>
 8009748:	1dbb      	adds	r3, r7, #6
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d104      	bne.n	800975a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009750:	231f      	movs	r3, #31
 8009752:	18fb      	adds	r3, r7, r3
 8009754:	2201      	movs	r2, #1
 8009756:	701a      	strb	r2, [r3, #0]
    goto error;
 8009758:	e10f      	b.n	800997a <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2251      	movs	r2, #81	; 0x51
 800975e:	2103      	movs	r1, #3
 8009760:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	1dba      	adds	r2, r7, #6
 8009772:	8812      	ldrh	r2, [r2, #0]
 8009774:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	1dba      	adds	r2, r7, #6
 800977a:	8812      	ldrh	r2, [r2, #0]
 800977c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	2380      	movs	r3, #128	; 0x80
 80097a2:	021b      	lsls	r3, r3, #8
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d110      	bne.n	80097ca <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2140      	movs	r1, #64	; 0x40
 80097b4:	438a      	bics	r2, r1
 80097b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2180      	movs	r1, #128	; 0x80
 80097c4:	01c9      	lsls	r1, r1, #7
 80097c6:	430a      	orrs	r2, r1
 80097c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2240      	movs	r2, #64	; 0x40
 80097d2:	4013      	ands	r3, r2
 80097d4:	2b40      	cmp	r3, #64	; 0x40
 80097d6:	d007      	beq.n	80097e8 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2140      	movs	r1, #64	; 0x40
 80097e4:	430a      	orrs	r2, r1
 80097e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	68da      	ldr	r2, [r3, #12]
 80097ec:	2380      	movs	r3, #128	; 0x80
 80097ee:	011b      	lsls	r3, r3, #4
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d14e      	bne.n	8009892 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d004      	beq.n	8009806 <HAL_SPI_Transmit+0x11a>
 80097fc:	2316      	movs	r3, #22
 80097fe:	18fb      	adds	r3, r7, r3
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	2b01      	cmp	r3, #1
 8009804:	d13f      	bne.n	8009886 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980a:	881a      	ldrh	r2, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009816:	1c9a      	adds	r2, r3, #2
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009820:	b29b      	uxth	r3, r3
 8009822:	3b01      	subs	r3, #1
 8009824:	b29a      	uxth	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800982a:	e02c      	b.n	8009886 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	2202      	movs	r2, #2
 8009834:	4013      	ands	r3, r2
 8009836:	2b02      	cmp	r3, #2
 8009838:	d112      	bne.n	8009860 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983e:	881a      	ldrh	r2, [r3, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984a:	1c9a      	adds	r2, r3, #2
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	b29a      	uxth	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	86da      	strh	r2, [r3, #54]	; 0x36
 800985e:	e012      	b.n	8009886 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009860:	f7fd f81a 	bl	8006898 <HAL_GetTick>
 8009864:	0002      	movs	r2, r0
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	429a      	cmp	r2, r3
 800986e:	d802      	bhi.n	8009876 <HAL_SPI_Transmit+0x18a>
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	3301      	adds	r3, #1
 8009874:	d102      	bne.n	800987c <HAL_SPI_Transmit+0x190>
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d104      	bne.n	8009886 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 800987c:	231f      	movs	r3, #31
 800987e:	18fb      	adds	r3, r7, r3
 8009880:	2203      	movs	r2, #3
 8009882:	701a      	strb	r2, [r3, #0]
          goto error;
 8009884:	e079      	b.n	800997a <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800988a:	b29b      	uxth	r3, r3
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1cd      	bne.n	800982c <HAL_SPI_Transmit+0x140>
 8009890:	e04f      	b.n	8009932 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d004      	beq.n	80098a4 <HAL_SPI_Transmit+0x1b8>
 800989a:	2316      	movs	r3, #22
 800989c:	18fb      	adds	r3, r7, r3
 800989e:	881b      	ldrh	r3, [r3, #0]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d141      	bne.n	8009928 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	330c      	adds	r3, #12
 80098ae:	7812      	ldrb	r2, [r2, #0]
 80098b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b6:	1c5a      	adds	r2, r3, #1
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	3b01      	subs	r3, #1
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80098ca:	e02d      	b.n	8009928 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	2202      	movs	r2, #2
 80098d4:	4013      	ands	r3, r2
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d113      	bne.n	8009902 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	330c      	adds	r3, #12
 80098e4:	7812      	ldrb	r2, [r2, #0]
 80098e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ec:	1c5a      	adds	r2, r3, #1
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	3b01      	subs	r3, #1
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8009900:	e012      	b.n	8009928 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009902:	f7fc ffc9 	bl	8006898 <HAL_GetTick>
 8009906:	0002      	movs	r2, r0
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	683a      	ldr	r2, [r7, #0]
 800990e:	429a      	cmp	r2, r3
 8009910:	d802      	bhi.n	8009918 <HAL_SPI_Transmit+0x22c>
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	3301      	adds	r3, #1
 8009916:	d102      	bne.n	800991e <HAL_SPI_Transmit+0x232>
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d104      	bne.n	8009928 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 800991e:	231f      	movs	r3, #31
 8009920:	18fb      	adds	r3, r7, r3
 8009922:	2203      	movs	r2, #3
 8009924:	701a      	strb	r2, [r3, #0]
          goto error;
 8009926:	e028      	b.n	800997a <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800992c:	b29b      	uxth	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1cc      	bne.n	80098cc <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009932:	69ba      	ldr	r2, [r7, #24]
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	0018      	movs	r0, r3
 800993a:	f000 fa83 	bl	8009e44 <SPI_EndRxTxTransaction>
 800993e:	1e03      	subs	r3, r0, #0
 8009940:	d002      	beq.n	8009948 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2220      	movs	r2, #32
 8009946:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10a      	bne.n	8009966 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009950:	2300      	movs	r3, #0
 8009952:	613b      	str	r3, [r7, #16]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	613b      	str	r3, [r7, #16]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	613b      	str	r3, [r7, #16]
 8009964:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800996a:	2b00      	cmp	r3, #0
 800996c:	d004      	beq.n	8009978 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 800996e:	231f      	movs	r3, #31
 8009970:	18fb      	adds	r3, r7, r3
 8009972:	2201      	movs	r2, #1
 8009974:	701a      	strb	r2, [r3, #0]
 8009976:	e000      	b.n	800997a <HAL_SPI_Transmit+0x28e>
  }

error:
 8009978:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2251      	movs	r2, #81	; 0x51
 800997e:	2101      	movs	r1, #1
 8009980:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2250      	movs	r2, #80	; 0x50
 8009986:	2100      	movs	r1, #0
 8009988:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800998a:	231f      	movs	r3, #31
 800998c:	18fb      	adds	r3, r7, r3
 800998e:	781b      	ldrb	r3, [r3, #0]
}
 8009990:	0018      	movs	r0, r3
 8009992:	46bd      	mov	sp, r7
 8009994:	b008      	add	sp, #32
 8009996:	bd80      	pop	{r7, pc}

08009998 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b08c      	sub	sp, #48	; 0x30
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
 80099a4:	001a      	movs	r2, r3
 80099a6:	1cbb      	adds	r3, r7, #2
 80099a8:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80099aa:	2301      	movs	r3, #1
 80099ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80099ae:	232b      	movs	r3, #43	; 0x2b
 80099b0:	18fb      	adds	r3, r7, r3
 80099b2:	2200      	movs	r2, #0
 80099b4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2250      	movs	r2, #80	; 0x50
 80099ba:	5c9b      	ldrb	r3, [r3, r2]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d101      	bne.n	80099c4 <HAL_SPI_TransmitReceive+0x2c>
 80099c0:	2302      	movs	r3, #2
 80099c2:	e1a0      	b.n	8009d06 <HAL_SPI_TransmitReceive+0x36e>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2250      	movs	r2, #80	; 0x50
 80099c8:	2101      	movs	r1, #1
 80099ca:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099cc:	f7fc ff64 	bl	8006898 <HAL_GetTick>
 80099d0:	0003      	movs	r3, r0
 80099d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80099d4:	2023      	movs	r0, #35	; 0x23
 80099d6:	183b      	adds	r3, r7, r0
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	2151      	movs	r1, #81	; 0x51
 80099dc:	5c52      	ldrb	r2, [r2, r1]
 80099de:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80099e6:	231a      	movs	r3, #26
 80099e8:	18fb      	adds	r3, r7, r3
 80099ea:	1cba      	adds	r2, r7, #2
 80099ec:	8812      	ldrh	r2, [r2, #0]
 80099ee:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80099f0:	183b      	adds	r3, r7, r0
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d011      	beq.n	8009a1c <HAL_SPI_TransmitReceive+0x84>
 80099f8:	69fa      	ldr	r2, [r7, #28]
 80099fa:	2382      	movs	r3, #130	; 0x82
 80099fc:	005b      	lsls	r3, r3, #1
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d107      	bne.n	8009a12 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d103      	bne.n	8009a12 <HAL_SPI_TransmitReceive+0x7a>
 8009a0a:	183b      	adds	r3, r7, r0
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b04      	cmp	r3, #4
 8009a10:	d004      	beq.n	8009a1c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8009a12:	232b      	movs	r3, #43	; 0x2b
 8009a14:	18fb      	adds	r3, r7, r3
 8009a16:	2202      	movs	r2, #2
 8009a18:	701a      	strb	r2, [r3, #0]
    goto error;
 8009a1a:	e169      	b.n	8009cf0 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d006      	beq.n	8009a30 <HAL_SPI_TransmitReceive+0x98>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d003      	beq.n	8009a30 <HAL_SPI_TransmitReceive+0x98>
 8009a28:	1cbb      	adds	r3, r7, #2
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d104      	bne.n	8009a3a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8009a30:	232b      	movs	r3, #43	; 0x2b
 8009a32:	18fb      	adds	r3, r7, r3
 8009a34:	2201      	movs	r2, #1
 8009a36:	701a      	strb	r2, [r3, #0]
    goto error;
 8009a38:	e15a      	b.n	8009cf0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2251      	movs	r2, #81	; 0x51
 8009a3e:	5c9b      	ldrb	r3, [r3, r2]
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d003      	beq.n	8009a4e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2251      	movs	r2, #81	; 0x51
 8009a4a:	2105      	movs	r1, #5
 8009a4c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	1cba      	adds	r2, r7, #2
 8009a5e:	8812      	ldrh	r2, [r2, #0]
 8009a60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	1cba      	adds	r2, r7, #2
 8009a66:	8812      	ldrh	r2, [r2, #0]
 8009a68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	1cba      	adds	r2, r7, #2
 8009a74:	8812      	ldrh	r2, [r2, #0]
 8009a76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	1cba      	adds	r2, r7, #2
 8009a7c:	8812      	ldrh	r2, [r2, #0]
 8009a7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2240      	movs	r2, #64	; 0x40
 8009a94:	4013      	ands	r3, r2
 8009a96:	2b40      	cmp	r3, #64	; 0x40
 8009a98:	d007      	beq.n	8009aaa <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2140      	movs	r1, #64	; 0x40
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	68da      	ldr	r2, [r3, #12]
 8009aae:	2380      	movs	r3, #128	; 0x80
 8009ab0:	011b      	lsls	r3, r3, #4
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d000      	beq.n	8009ab8 <HAL_SPI_TransmitReceive+0x120>
 8009ab6:	e07a      	b.n	8009bae <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d004      	beq.n	8009aca <HAL_SPI_TransmitReceive+0x132>
 8009ac0:	231a      	movs	r3, #26
 8009ac2:	18fb      	adds	r3, r7, r3
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d166      	bne.n	8009b98 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ace:	881a      	ldrh	r2, [r3, #0]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ada:	1c9a      	adds	r2, r3, #2
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009aee:	e053      	b.n	8009b98 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	2202      	movs	r2, #2
 8009af8:	4013      	ands	r3, r2
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d11b      	bne.n	8009b36 <HAL_SPI_TransmitReceive+0x19e>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d016      	beq.n	8009b36 <HAL_SPI_TransmitReceive+0x19e>
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d113      	bne.n	8009b36 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b12:	881a      	ldrh	r2, [r3, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1e:	1c9a      	adds	r2, r3, #2
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	4013      	ands	r3, r2
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d119      	bne.n	8009b78 <HAL_SPI_TransmitReceive+0x1e0>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d014      	beq.n	8009b78 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b58:	b292      	uxth	r2, r2
 8009b5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b60:	1c9a      	adds	r2, r3, #2
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b74:	2301      	movs	r3, #1
 8009b76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b78:	f7fc fe8e 	bl	8006898 <HAL_GetTick>
 8009b7c:	0002      	movs	r2, r0
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d807      	bhi.n	8009b98 <HAL_SPI_TransmitReceive+0x200>
 8009b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	d004      	beq.n	8009b98 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8009b8e:	232b      	movs	r3, #43	; 0x2b
 8009b90:	18fb      	adds	r3, r7, r3
 8009b92:	2203      	movs	r2, #3
 8009b94:	701a      	strb	r2, [r3, #0]
        goto error;
 8009b96:	e0ab      	b.n	8009cf0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1a6      	bne.n	8009af0 <HAL_SPI_TransmitReceive+0x158>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1a1      	bne.n	8009af0 <HAL_SPI_TransmitReceive+0x158>
 8009bac:	e07f      	b.n	8009cae <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d005      	beq.n	8009bc2 <HAL_SPI_TransmitReceive+0x22a>
 8009bb6:	231a      	movs	r3, #26
 8009bb8:	18fb      	adds	r3, r7, r3
 8009bba:	881b      	ldrh	r3, [r3, #0]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d000      	beq.n	8009bc2 <HAL_SPI_TransmitReceive+0x22a>
 8009bc0:	e06b      	b.n	8009c9a <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	330c      	adds	r3, #12
 8009bcc:	7812      	ldrb	r2, [r2, #0]
 8009bce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	3b01      	subs	r3, #1
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009be8:	e057      	b.n	8009c9a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d11c      	bne.n	8009c32 <HAL_SPI_TransmitReceive+0x29a>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d017      	beq.n	8009c32 <HAL_SPI_TransmitReceive+0x29a>
 8009c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d114      	bne.n	8009c32 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	330c      	adds	r3, #12
 8009c12:	7812      	ldrb	r2, [r2, #0]
 8009c14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	3b01      	subs	r3, #1
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d119      	bne.n	8009c74 <HAL_SPI_TransmitReceive+0x2dc>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d014      	beq.n	8009c74 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68da      	ldr	r2, [r3, #12]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c54:	b2d2      	uxtb	r2, r2
 8009c56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c70:	2301      	movs	r3, #1
 8009c72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c74:	f7fc fe10 	bl	8006898 <HAL_GetTick>
 8009c78:	0002      	movs	r2, r0
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d802      	bhi.n	8009c8a <HAL_SPI_TransmitReceive+0x2f2>
 8009c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c86:	3301      	adds	r3, #1
 8009c88:	d102      	bne.n	8009c90 <HAL_SPI_TransmitReceive+0x2f8>
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d104      	bne.n	8009c9a <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8009c90:	232b      	movs	r3, #43	; 0x2b
 8009c92:	18fb      	adds	r3, r7, r3
 8009c94:	2203      	movs	r2, #3
 8009c96:	701a      	strb	r2, [r3, #0]
        goto error;
 8009c98:	e02a      	b.n	8009cf0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1a2      	bne.n	8009bea <HAL_SPI_TransmitReceive+0x252>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d19d      	bne.n	8009bea <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	0018      	movs	r0, r3
 8009cb6:	f000 f8c5 	bl	8009e44 <SPI_EndRxTxTransaction>
 8009cba:	1e03      	subs	r3, r0, #0
 8009cbc:	d007      	beq.n	8009cce <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8009cbe:	232b      	movs	r3, #43	; 0x2b
 8009cc0:	18fb      	adds	r3, r7, r3
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2220      	movs	r2, #32
 8009cca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009ccc:	e010      	b.n	8009cf0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d10b      	bne.n	8009cee <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	617b      	str	r3, [r7, #20]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	617b      	str	r3, [r7, #20]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	617b      	str	r3, [r7, #20]
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	e000      	b.n	8009cf0 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8009cee:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2251      	movs	r2, #81	; 0x51
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2250      	movs	r2, #80	; 0x50
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009d00:	232b      	movs	r3, #43	; 0x2b
 8009d02:	18fb      	adds	r3, r7, r3
 8009d04:	781b      	ldrb	r3, [r3, #0]
}
 8009d06:	0018      	movs	r0, r3
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	b00c      	add	sp, #48	; 0x30
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2251      	movs	r2, #81	; 0x51
 8009d1a:	5c9b      	ldrb	r3, [r3, r2]
 8009d1c:	b2db      	uxtb	r3, r3
}
 8009d1e:	0018      	movs	r0, r3
 8009d20:	46bd      	mov	sp, r7
 8009d22:	b002      	add	sp, #8
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b088      	sub	sp, #32
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	1dfb      	adds	r3, r7, #7
 8009d36:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d38:	f7fc fdae 	bl	8006898 <HAL_GetTick>
 8009d3c:	0002      	movs	r2, r0
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	1a9b      	subs	r3, r3, r2
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	18d3      	adds	r3, r2, r3
 8009d46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d48:	f7fc fda6 	bl	8006898 <HAL_GetTick>
 8009d4c:	0003      	movs	r3, r0
 8009d4e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d50:	4b3a      	ldr	r3, [pc, #232]	; (8009e3c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	015b      	lsls	r3, r3, #5
 8009d56:	0d1b      	lsrs	r3, r3, #20
 8009d58:	69fa      	ldr	r2, [r7, #28]
 8009d5a:	4353      	muls	r3, r2
 8009d5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d5e:	e058      	b.n	8009e12 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	3301      	adds	r3, #1
 8009d64:	d055      	beq.n	8009e12 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d66:	f7fc fd97 	bl	8006898 <HAL_GetTick>
 8009d6a:	0002      	movs	r2, r0
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	69fa      	ldr	r2, [r7, #28]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d902      	bls.n	8009d7c <SPI_WaitFlagStateUntilTimeout+0x54>
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d142      	bne.n	8009e02 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	21e0      	movs	r1, #224	; 0xe0
 8009d88:	438a      	bics	r2, r1
 8009d8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	2382      	movs	r3, #130	; 0x82
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d113      	bne.n	8009dc0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	689a      	ldr	r2, [r3, #8]
 8009d9c:	2380      	movs	r3, #128	; 0x80
 8009d9e:	021b      	lsls	r3, r3, #8
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d005      	beq.n	8009db0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	689a      	ldr	r2, [r3, #8]
 8009da8:	2380      	movs	r3, #128	; 0x80
 8009daa:	00db      	lsls	r3, r3, #3
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d107      	bne.n	8009dc0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2140      	movs	r1, #64	; 0x40
 8009dbc:	438a      	bics	r2, r1
 8009dbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dc4:	2380      	movs	r3, #128	; 0x80
 8009dc6:	019b      	lsls	r3, r3, #6
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d110      	bne.n	8009dee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	491a      	ldr	r1, [pc, #104]	; (8009e40 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009dd8:	400a      	ands	r2, r1
 8009dda:	601a      	str	r2, [r3, #0]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2180      	movs	r1, #128	; 0x80
 8009de8:	0189      	lsls	r1, r1, #6
 8009dea:	430a      	orrs	r2, r1
 8009dec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2251      	movs	r2, #81	; 0x51
 8009df2:	2101      	movs	r1, #1
 8009df4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2250      	movs	r2, #80	; 0x50
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e017      	b.n	8009e32 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	425a      	negs	r2, r3
 8009e22:	4153      	adcs	r3, r2
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	001a      	movs	r2, r3
 8009e28:	1dfb      	adds	r3, r7, #7
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d197      	bne.n	8009d60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	0018      	movs	r0, r3
 8009e34:	46bd      	mov	sp, r7
 8009e36:	b008      	add	sp, #32
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	46c0      	nop			; (mov r8, r8)
 8009e3c:	2000005c 	.word	0x2000005c
 8009e40:	ffffdfff 	.word	0xffffdfff

08009e44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b088      	sub	sp, #32
 8009e48:	af02      	add	r7, sp, #8
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009e50:	4b1d      	ldr	r3, [pc, #116]	; (8009ec8 <SPI_EndRxTxTransaction+0x84>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	491d      	ldr	r1, [pc, #116]	; (8009ecc <SPI_EndRxTxTransaction+0x88>)
 8009e56:	0018      	movs	r0, r3
 8009e58:	f7f6 f972 	bl	8000140 <__udivsi3>
 8009e5c:	0003      	movs	r3, r0
 8009e5e:	001a      	movs	r2, r3
 8009e60:	0013      	movs	r3, r2
 8009e62:	015b      	lsls	r3, r3, #5
 8009e64:	1a9b      	subs	r3, r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	189b      	adds	r3, r3, r2
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	2382      	movs	r3, #130	; 0x82
 8009e74:	005b      	lsls	r3, r3, #1
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d112      	bne.n	8009ea0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	0013      	movs	r3, r2
 8009e84:	2200      	movs	r2, #0
 8009e86:	2180      	movs	r1, #128	; 0x80
 8009e88:	f7ff ff4e 	bl	8009d28 <SPI_WaitFlagStateUntilTimeout>
 8009e8c:	1e03      	subs	r3, r0, #0
 8009e8e:	d016      	beq.n	8009ebe <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e94:	2220      	movs	r2, #32
 8009e96:	431a      	orrs	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e00f      	b.n	8009ec0 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00a      	beq.n	8009ebc <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	2280      	movs	r2, #128	; 0x80
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	2b80      	cmp	r3, #128	; 0x80
 8009eb8:	d0f2      	beq.n	8009ea0 <SPI_EndRxTxTransaction+0x5c>
 8009eba:	e000      	b.n	8009ebe <SPI_EndRxTxTransaction+0x7a>
        break;
 8009ebc:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	0018      	movs	r0, r3
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	b006      	add	sp, #24
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	2000005c 	.word	0x2000005c
 8009ecc:	016e3600 	.word	0x016e3600

08009ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e044      	b.n	8009f6c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d107      	bne.n	8009efa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2274      	movs	r2, #116	; 0x74
 8009eee:	2100      	movs	r1, #0
 8009ef0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	f7fb fb23 	bl	8005540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2224      	movs	r2, #36	; 0x24
 8009efe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	438a      	bics	r2, r1
 8009f0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	0018      	movs	r0, r3
 8009f14:	f000 f9f2 	bl	800a2fc <UART_SetConfig>
 8009f18:	0003      	movs	r3, r0
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d101      	bne.n	8009f22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e024      	b.n	8009f6c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f000 fc69 	bl	800a804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	490d      	ldr	r1, [pc, #52]	; (8009f74 <HAL_UART_Init+0xa4>)
 8009f3e:	400a      	ands	r2, r1
 8009f40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689a      	ldr	r2, [r3, #8]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	212a      	movs	r1, #42	; 0x2a
 8009f4e:	438a      	bics	r2, r1
 8009f50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	430a      	orrs	r2, r1
 8009f60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	0018      	movs	r0, r3
 8009f66:	f000 fd01 	bl	800a96c <UART_CheckIdleState>
 8009f6a:	0003      	movs	r3, r0
}
 8009f6c:	0018      	movs	r0, r3
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	b002      	add	sp, #8
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	ffffb7ff 	.word	0xffffb7ff

08009f78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b08a      	sub	sp, #40	; 0x28
 8009f7c:	af02      	add	r7, sp, #8
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	603b      	str	r3, [r7, #0]
 8009f84:	1dbb      	adds	r3, r7, #6
 8009f86:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f8c:	2b20      	cmp	r3, #32
 8009f8e:	d000      	beq.n	8009f92 <HAL_UART_Transmit+0x1a>
 8009f90:	e095      	b.n	800a0be <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <HAL_UART_Transmit+0x28>
 8009f98:	1dbb      	adds	r3, r7, #6
 8009f9a:	881b      	ldrh	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d101      	bne.n	8009fa4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e08d      	b.n	800a0c0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	689a      	ldr	r2, [r3, #8]
 8009fa8:	2380      	movs	r3, #128	; 0x80
 8009faa:	015b      	lsls	r3, r3, #5
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d109      	bne.n	8009fc4 <HAL_UART_Transmit+0x4c>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d105      	bne.n	8009fc4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	d001      	beq.n	8009fc4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e07d      	b.n	800a0c0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2274      	movs	r2, #116	; 0x74
 8009fc8:	5c9b      	ldrb	r3, [r3, r2]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d101      	bne.n	8009fd2 <HAL_UART_Transmit+0x5a>
 8009fce:	2302      	movs	r3, #2
 8009fd0:	e076      	b.n	800a0c0 <HAL_UART_Transmit+0x148>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2274      	movs	r2, #116	; 0x74
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2280      	movs	r2, #128	; 0x80
 8009fde:	2100      	movs	r1, #0
 8009fe0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2221      	movs	r2, #33	; 0x21
 8009fe6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fe8:	f7fc fc56 	bl	8006898 <HAL_GetTick>
 8009fec:	0003      	movs	r3, r0
 8009fee:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	1dba      	adds	r2, r7, #6
 8009ff4:	2150      	movs	r1, #80	; 0x50
 8009ff6:	8812      	ldrh	r2, [r2, #0]
 8009ff8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	1dba      	adds	r2, r7, #6
 8009ffe:	2152      	movs	r1, #82	; 0x52
 800a000:	8812      	ldrh	r2, [r2, #0]
 800a002:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	689a      	ldr	r2, [r3, #8]
 800a008:	2380      	movs	r3, #128	; 0x80
 800a00a:	015b      	lsls	r3, r3, #5
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d108      	bne.n	800a022 <HAL_UART_Transmit+0xaa>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d104      	bne.n	800a022 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800a018:	2300      	movs	r3, #0
 800a01a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	61bb      	str	r3, [r7, #24]
 800a020:	e003      	b.n	800a02a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2274      	movs	r2, #116	; 0x74
 800a02e:	2100      	movs	r1, #0
 800a030:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800a032:	e02c      	b.n	800a08e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	0013      	movs	r3, r2
 800a03e:	2200      	movs	r2, #0
 800a040:	2180      	movs	r1, #128	; 0x80
 800a042:	f000 fcdb 	bl	800a9fc <UART_WaitOnFlagUntilTimeout>
 800a046:	1e03      	subs	r3, r0, #0
 800a048:	d001      	beq.n	800a04e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e038      	b.n	800a0c0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10b      	bne.n	800a06c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	001a      	movs	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	05d2      	lsls	r2, r2, #23
 800a060:	0dd2      	lsrs	r2, r2, #23
 800a062:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	3302      	adds	r3, #2
 800a068:	61bb      	str	r3, [r7, #24]
 800a06a:	e007      	b.n	800a07c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	781a      	ldrb	r2, [r3, #0]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	3301      	adds	r3, #1
 800a07a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2252      	movs	r2, #82	; 0x52
 800a080:	5a9b      	ldrh	r3, [r3, r2]
 800a082:	b29b      	uxth	r3, r3
 800a084:	3b01      	subs	r3, #1
 800a086:	b299      	uxth	r1, r3
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2252      	movs	r2, #82	; 0x52
 800a08c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2252      	movs	r2, #82	; 0x52
 800a092:	5a9b      	ldrh	r3, [r3, r2]
 800a094:	b29b      	uxth	r3, r3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1cc      	bne.n	800a034 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	0013      	movs	r3, r2
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	2140      	movs	r1, #64	; 0x40
 800a0a8:	f000 fca8 	bl	800a9fc <UART_WaitOnFlagUntilTimeout>
 800a0ac:	1e03      	subs	r3, r0, #0
 800a0ae:	d001      	beq.n	800a0b4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e005      	b.n	800a0c0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	e000      	b.n	800a0c0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800a0be:	2302      	movs	r3, #2
  }
}
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	b008      	add	sp, #32
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b088      	sub	sp, #32
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	1dbb      	adds	r3, r7, #6
 800a0d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0da:	2b20      	cmp	r3, #32
 800a0dc:	d155      	bne.n	800a18a <HAL_UART_Receive_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d003      	beq.n	800a0ec <HAL_UART_Receive_DMA+0x24>
 800a0e4:	1dbb      	adds	r3, r7, #6
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e04d      	b.n	800a18c <HAL_UART_Receive_DMA+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	2380      	movs	r3, #128	; 0x80
 800a0f6:	015b      	lsls	r3, r3, #5
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d109      	bne.n	800a110 <HAL_UART_Receive_DMA+0x48>
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d105      	bne.n	800a110 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2201      	movs	r2, #1
 800a108:	4013      	ands	r3, r2
 800a10a:	d001      	beq.n	800a110 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	e03d      	b.n	800a18c <HAL_UART_Receive_DMA+0xc4>
      }
    }

    __HAL_LOCK(huart);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2274      	movs	r2, #116	; 0x74
 800a114:	5c9b      	ldrb	r3, [r3, r2]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d101      	bne.n	800a11e <HAL_UART_Receive_DMA+0x56>
 800a11a:	2302      	movs	r3, #2
 800a11c:	e036      	b.n	800a18c <HAL_UART_Receive_DMA+0xc4>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2274      	movs	r2, #116	; 0x74
 800a122:	2101      	movs	r1, #1
 800a124:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a18      	ldr	r2, [pc, #96]	; (800a194 <HAL_UART_Receive_DMA+0xcc>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d020      	beq.n	800a178 <HAL_UART_Receive_DMA+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	2380      	movs	r3, #128	; 0x80
 800a13e:	041b      	lsls	r3, r3, #16
 800a140:	4013      	ands	r3, r2
 800a142:	d019      	beq.n	800a178 <HAL_UART_Receive_DMA+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a144:	f3ef 8310 	mrs	r3, PRIMASK
 800a148:	613b      	str	r3, [r7, #16]
  return(result);
 800a14a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a14c:	61fb      	str	r3, [r7, #28]
 800a14e:	2301      	movs	r3, #1
 800a150:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f383 8810 	msr	PRIMASK, r3
}
 800a158:	46c0      	nop			; (mov r8, r8)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2180      	movs	r1, #128	; 0x80
 800a166:	04c9      	lsls	r1, r1, #19
 800a168:	430a      	orrs	r2, r1
 800a16a:	601a      	str	r2, [r3, #0]
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	f383 8810 	msr	PRIMASK, r3
}
 800a176:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a178:	1dbb      	adds	r3, r7, #6
 800a17a:	881a      	ldrh	r2, [r3, #0]
 800a17c:	68b9      	ldr	r1, [r7, #8]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	0018      	movs	r0, r3
 800a182:	f000 fcff 	bl	800ab84 <UART_Start_Receive_DMA>
 800a186:	0003      	movs	r3, r0
 800a188:	e000      	b.n	800a18c <HAL_UART_Receive_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800a18a:	2302      	movs	r3, #2
  }
}
 800a18c:	0018      	movs	r0, r3
 800a18e:	46bd      	mov	sp, r7
 800a190:	b008      	add	sp, #32
 800a192:	bd80      	pop	{r7, pc}
 800a194:	40004800 	.word	0x40004800

0800a198 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b08c      	sub	sp, #48	; 0x30
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	2280      	movs	r2, #128	; 0x80
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	2b80      	cmp	r3, #128	; 0x80
 800a1b8:	d138      	bne.n	800a22c <HAL_UART_DMAStop+0x94>
 800a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1bc:	2b21      	cmp	r3, #33	; 0x21
 800a1be:	d135      	bne.n	800a22c <HAL_UART_DMAStop+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a1c4:	617b      	str	r3, [r7, #20]
  return(result);
 800a1c6:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a1c8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	f383 8810 	msr	PRIMASK, r3
}
 800a1d4:	46c0      	nop			; (mov r8, r8)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2180      	movs	r1, #128	; 0x80
 800a1e2:	438a      	bics	r2, r1
 800a1e4:	609a      	str	r2, [r3, #8]
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	f383 8810 	msr	PRIMASK, r3
}
 800a1f0:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d014      	beq.n	800a224 <HAL_UART_DMAStop+0x8c>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1fe:	0018      	movs	r0, r3
 800a200:	f7fd f95c 	bl	80074bc <HAL_DMA_Abort>
 800a204:	1e03      	subs	r3, r0, #0
 800a206:	d00d      	beq.n	800a224 <HAL_UART_DMAStop+0x8c>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a20c:	0018      	movs	r0, r3
 800a20e:	f7fd fa43 	bl	8007698 <HAL_DMA_GetError>
 800a212:	0003      	movs	r3, r0
 800a214:	2b20      	cmp	r3, #32
 800a216:	d105      	bne.n	800a224 <HAL_UART_DMAStop+0x8c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2280      	movs	r2, #128	; 0x80
 800a21c:	2110      	movs	r1, #16
 800a21e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a220:	2303      	movs	r3, #3
 800a222:	e044      	b.n	800a2ae <HAL_UART_DMAStop+0x116>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	0018      	movs	r0, r3
 800a228:	f000 fd4e 	bl	800acc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	2240      	movs	r2, #64	; 0x40
 800a234:	4013      	ands	r3, r2
 800a236:	2b40      	cmp	r3, #64	; 0x40
 800a238:	d138      	bne.n	800a2ac <HAL_UART_DMAStop+0x114>
 800a23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23c:	2b22      	cmp	r3, #34	; 0x22
 800a23e:	d135      	bne.n	800a2ac <HAL_UART_DMAStop+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a240:	f3ef 8310 	mrs	r3, PRIMASK
 800a244:	60bb      	str	r3, [r7, #8]
  return(result);
 800a246:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a248:	623b      	str	r3, [r7, #32]
 800a24a:	2301      	movs	r3, #1
 800a24c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f383 8810 	msr	PRIMASK, r3
}
 800a254:	46c0      	nop			; (mov r8, r8)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	689a      	ldr	r2, [r3, #8]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2140      	movs	r1, #64	; 0x40
 800a262:	438a      	bics	r2, r1
 800a264:	609a      	str	r2, [r3, #8]
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	f383 8810 	msr	PRIMASK, r3
}
 800a270:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a276:	2b00      	cmp	r3, #0
 800a278:	d014      	beq.n	800a2a4 <HAL_UART_DMAStop+0x10c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27e:	0018      	movs	r0, r3
 800a280:	f7fd f91c 	bl	80074bc <HAL_DMA_Abort>
 800a284:	1e03      	subs	r3, r0, #0
 800a286:	d00d      	beq.n	800a2a4 <HAL_UART_DMAStop+0x10c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a28c:	0018      	movs	r0, r3
 800a28e:	f7fd fa03 	bl	8007698 <HAL_DMA_GetError>
 800a292:	0003      	movs	r3, r0
 800a294:	2b20      	cmp	r3, #32
 800a296:	d105      	bne.n	800a2a4 <HAL_UART_DMAStop+0x10c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2280      	movs	r2, #128	; 0x80
 800a29c:	2110      	movs	r1, #16
 800a29e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e004      	b.n	800a2ae <HAL_UART_DMAStop+0x116>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	0018      	movs	r0, r3
 800a2a8:	f000 fd32 	bl	800ad10 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	0018      	movs	r0, r3
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	b00c      	add	sp, #48	; 0x30
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a2be:	46c0      	nop			; (mov r8, r8)
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	b002      	add	sp, #8
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b082      	sub	sp, #8
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a2ce:	46c0      	nop			; (mov r8, r8)
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	b002      	add	sp, #8
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b082      	sub	sp, #8
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a2de:	46c0      	nop			; (mov r8, r8)
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	b002      	add	sp, #8
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b082      	sub	sp, #8
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	000a      	movs	r2, r1
 800a2f0:	1cbb      	adds	r3, r7, #2
 800a2f2:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2f4:	46c0      	nop			; (mov r8, r8)
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	b002      	add	sp, #8
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2fc:	b5b0      	push	{r4, r5, r7, lr}
 800a2fe:	b08e      	sub	sp, #56	; 0x38
 800a300:	af00      	add	r7, sp, #0
 800a302:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a304:	231a      	movs	r3, #26
 800a306:	2218      	movs	r2, #24
 800a308:	189b      	adds	r3, r3, r2
 800a30a:	19db      	adds	r3, r3, r7
 800a30c:	2200      	movs	r2, #0
 800a30e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	689a      	ldr	r2, [r3, #8]
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	431a      	orrs	r2, r3
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	431a      	orrs	r2, r3
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	69db      	ldr	r3, [r3, #28]
 800a324:	4313      	orrs	r3, r2
 800a326:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4ac6      	ldr	r2, [pc, #792]	; (800a648 <UART_SetConfig+0x34c>)
 800a330:	4013      	ands	r3, r2
 800a332:	0019      	movs	r1, r3
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a33a:	430a      	orrs	r2, r1
 800a33c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	4ac1      	ldr	r2, [pc, #772]	; (800a64c <UART_SetConfig+0x350>)
 800a346:	4013      	ands	r3, r2
 800a348:	0019      	movs	r1, r3
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	68da      	ldr	r2, [r3, #12]
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	430a      	orrs	r2, r1
 800a354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4abb      	ldr	r2, [pc, #748]	; (800a650 <UART_SetConfig+0x354>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d004      	beq.n	800a370 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a36c:	4313      	orrs	r3, r2
 800a36e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	4ab7      	ldr	r2, [pc, #732]	; (800a654 <UART_SetConfig+0x358>)
 800a378:	4013      	ands	r3, r2
 800a37a:	0019      	movs	r1, r3
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a382:	430a      	orrs	r2, r1
 800a384:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4ab3      	ldr	r2, [pc, #716]	; (800a658 <UART_SetConfig+0x35c>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d131      	bne.n	800a3f4 <UART_SetConfig+0xf8>
 800a390:	4bb2      	ldr	r3, [pc, #712]	; (800a65c <UART_SetConfig+0x360>)
 800a392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a394:	2203      	movs	r2, #3
 800a396:	4013      	ands	r3, r2
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d01d      	beq.n	800a3d8 <UART_SetConfig+0xdc>
 800a39c:	d823      	bhi.n	800a3e6 <UART_SetConfig+0xea>
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d00c      	beq.n	800a3bc <UART_SetConfig+0xc0>
 800a3a2:	d820      	bhi.n	800a3e6 <UART_SetConfig+0xea>
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <UART_SetConfig+0xb2>
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d00e      	beq.n	800a3ca <UART_SetConfig+0xce>
 800a3ac:	e01b      	b.n	800a3e6 <UART_SetConfig+0xea>
 800a3ae:	231b      	movs	r3, #27
 800a3b0:	2218      	movs	r2, #24
 800a3b2:	189b      	adds	r3, r3, r2
 800a3b4:	19db      	adds	r3, r3, r7
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	701a      	strb	r2, [r3, #0]
 800a3ba:	e09c      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a3bc:	231b      	movs	r3, #27
 800a3be:	2218      	movs	r2, #24
 800a3c0:	189b      	adds	r3, r3, r2
 800a3c2:	19db      	adds	r3, r3, r7
 800a3c4:	2202      	movs	r2, #2
 800a3c6:	701a      	strb	r2, [r3, #0]
 800a3c8:	e095      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a3ca:	231b      	movs	r3, #27
 800a3cc:	2218      	movs	r2, #24
 800a3ce:	189b      	adds	r3, r3, r2
 800a3d0:	19db      	adds	r3, r3, r7
 800a3d2:	2204      	movs	r2, #4
 800a3d4:	701a      	strb	r2, [r3, #0]
 800a3d6:	e08e      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a3d8:	231b      	movs	r3, #27
 800a3da:	2218      	movs	r2, #24
 800a3dc:	189b      	adds	r3, r3, r2
 800a3de:	19db      	adds	r3, r3, r7
 800a3e0:	2208      	movs	r2, #8
 800a3e2:	701a      	strb	r2, [r3, #0]
 800a3e4:	e087      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a3e6:	231b      	movs	r3, #27
 800a3e8:	2218      	movs	r2, #24
 800a3ea:	189b      	adds	r3, r3, r2
 800a3ec:	19db      	adds	r3, r3, r7
 800a3ee:	2210      	movs	r2, #16
 800a3f0:	701a      	strb	r2, [r3, #0]
 800a3f2:	e080      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a99      	ldr	r2, [pc, #612]	; (800a660 <UART_SetConfig+0x364>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d131      	bne.n	800a462 <UART_SetConfig+0x166>
 800a3fe:	4b97      	ldr	r3, [pc, #604]	; (800a65c <UART_SetConfig+0x360>)
 800a400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a402:	220c      	movs	r2, #12
 800a404:	4013      	ands	r3, r2
 800a406:	2b0c      	cmp	r3, #12
 800a408:	d01d      	beq.n	800a446 <UART_SetConfig+0x14a>
 800a40a:	d823      	bhi.n	800a454 <UART_SetConfig+0x158>
 800a40c:	2b08      	cmp	r3, #8
 800a40e:	d00c      	beq.n	800a42a <UART_SetConfig+0x12e>
 800a410:	d820      	bhi.n	800a454 <UART_SetConfig+0x158>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <UART_SetConfig+0x120>
 800a416:	2b04      	cmp	r3, #4
 800a418:	d00e      	beq.n	800a438 <UART_SetConfig+0x13c>
 800a41a:	e01b      	b.n	800a454 <UART_SetConfig+0x158>
 800a41c:	231b      	movs	r3, #27
 800a41e:	2218      	movs	r2, #24
 800a420:	189b      	adds	r3, r3, r2
 800a422:	19db      	adds	r3, r3, r7
 800a424:	2200      	movs	r2, #0
 800a426:	701a      	strb	r2, [r3, #0]
 800a428:	e065      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a42a:	231b      	movs	r3, #27
 800a42c:	2218      	movs	r2, #24
 800a42e:	189b      	adds	r3, r3, r2
 800a430:	19db      	adds	r3, r3, r7
 800a432:	2202      	movs	r2, #2
 800a434:	701a      	strb	r2, [r3, #0]
 800a436:	e05e      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a438:	231b      	movs	r3, #27
 800a43a:	2218      	movs	r2, #24
 800a43c:	189b      	adds	r3, r3, r2
 800a43e:	19db      	adds	r3, r3, r7
 800a440:	2204      	movs	r2, #4
 800a442:	701a      	strb	r2, [r3, #0]
 800a444:	e057      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a446:	231b      	movs	r3, #27
 800a448:	2218      	movs	r2, #24
 800a44a:	189b      	adds	r3, r3, r2
 800a44c:	19db      	adds	r3, r3, r7
 800a44e:	2208      	movs	r2, #8
 800a450:	701a      	strb	r2, [r3, #0]
 800a452:	e050      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a454:	231b      	movs	r3, #27
 800a456:	2218      	movs	r2, #24
 800a458:	189b      	adds	r3, r3, r2
 800a45a:	19db      	adds	r3, r3, r7
 800a45c:	2210      	movs	r2, #16
 800a45e:	701a      	strb	r2, [r3, #0]
 800a460:	e049      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a7a      	ldr	r2, [pc, #488]	; (800a650 <UART_SetConfig+0x354>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d13e      	bne.n	800a4ea <UART_SetConfig+0x1ee>
 800a46c:	4b7b      	ldr	r3, [pc, #492]	; (800a65c <UART_SetConfig+0x360>)
 800a46e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a470:	23c0      	movs	r3, #192	; 0xc0
 800a472:	011b      	lsls	r3, r3, #4
 800a474:	4013      	ands	r3, r2
 800a476:	22c0      	movs	r2, #192	; 0xc0
 800a478:	0112      	lsls	r2, r2, #4
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d027      	beq.n	800a4ce <UART_SetConfig+0x1d2>
 800a47e:	22c0      	movs	r2, #192	; 0xc0
 800a480:	0112      	lsls	r2, r2, #4
 800a482:	4293      	cmp	r3, r2
 800a484:	d82a      	bhi.n	800a4dc <UART_SetConfig+0x1e0>
 800a486:	2280      	movs	r2, #128	; 0x80
 800a488:	0112      	lsls	r2, r2, #4
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d011      	beq.n	800a4b2 <UART_SetConfig+0x1b6>
 800a48e:	2280      	movs	r2, #128	; 0x80
 800a490:	0112      	lsls	r2, r2, #4
 800a492:	4293      	cmp	r3, r2
 800a494:	d822      	bhi.n	800a4dc <UART_SetConfig+0x1e0>
 800a496:	2b00      	cmp	r3, #0
 800a498:	d004      	beq.n	800a4a4 <UART_SetConfig+0x1a8>
 800a49a:	2280      	movs	r2, #128	; 0x80
 800a49c:	00d2      	lsls	r2, r2, #3
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d00e      	beq.n	800a4c0 <UART_SetConfig+0x1c4>
 800a4a2:	e01b      	b.n	800a4dc <UART_SetConfig+0x1e0>
 800a4a4:	231b      	movs	r3, #27
 800a4a6:	2218      	movs	r2, #24
 800a4a8:	189b      	adds	r3, r3, r2
 800a4aa:	19db      	adds	r3, r3, r7
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	701a      	strb	r2, [r3, #0]
 800a4b0:	e021      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a4b2:	231b      	movs	r3, #27
 800a4b4:	2218      	movs	r2, #24
 800a4b6:	189b      	adds	r3, r3, r2
 800a4b8:	19db      	adds	r3, r3, r7
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	e01a      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a4c0:	231b      	movs	r3, #27
 800a4c2:	2218      	movs	r2, #24
 800a4c4:	189b      	adds	r3, r3, r2
 800a4c6:	19db      	adds	r3, r3, r7
 800a4c8:	2204      	movs	r2, #4
 800a4ca:	701a      	strb	r2, [r3, #0]
 800a4cc:	e013      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a4ce:	231b      	movs	r3, #27
 800a4d0:	2218      	movs	r2, #24
 800a4d2:	189b      	adds	r3, r3, r2
 800a4d4:	19db      	adds	r3, r3, r7
 800a4d6:	2208      	movs	r2, #8
 800a4d8:	701a      	strb	r2, [r3, #0]
 800a4da:	e00c      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a4dc:	231b      	movs	r3, #27
 800a4de:	2218      	movs	r2, #24
 800a4e0:	189b      	adds	r3, r3, r2
 800a4e2:	19db      	adds	r3, r3, r7
 800a4e4:	2210      	movs	r2, #16
 800a4e6:	701a      	strb	r2, [r3, #0]
 800a4e8:	e005      	b.n	800a4f6 <UART_SetConfig+0x1fa>
 800a4ea:	231b      	movs	r3, #27
 800a4ec:	2218      	movs	r2, #24
 800a4ee:	189b      	adds	r3, r3, r2
 800a4f0:	19db      	adds	r3, r3, r7
 800a4f2:	2210      	movs	r2, #16
 800a4f4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a55      	ldr	r2, [pc, #340]	; (800a650 <UART_SetConfig+0x354>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d000      	beq.n	800a502 <UART_SetConfig+0x206>
 800a500:	e084      	b.n	800a60c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a502:	231b      	movs	r3, #27
 800a504:	2218      	movs	r2, #24
 800a506:	189b      	adds	r3, r3, r2
 800a508:	19db      	adds	r3, r3, r7
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d01d      	beq.n	800a54c <UART_SetConfig+0x250>
 800a510:	dc20      	bgt.n	800a554 <UART_SetConfig+0x258>
 800a512:	2b04      	cmp	r3, #4
 800a514:	d015      	beq.n	800a542 <UART_SetConfig+0x246>
 800a516:	dc1d      	bgt.n	800a554 <UART_SetConfig+0x258>
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d002      	beq.n	800a522 <UART_SetConfig+0x226>
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d005      	beq.n	800a52c <UART_SetConfig+0x230>
 800a520:	e018      	b.n	800a554 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a522:	f7fe fcff 	bl	8008f24 <HAL_RCC_GetPCLK1Freq>
 800a526:	0003      	movs	r3, r0
 800a528:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a52a:	e01c      	b.n	800a566 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a52c:	4b4b      	ldr	r3, [pc, #300]	; (800a65c <UART_SetConfig+0x360>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2210      	movs	r2, #16
 800a532:	4013      	ands	r3, r2
 800a534:	d002      	beq.n	800a53c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a536:	4b4b      	ldr	r3, [pc, #300]	; (800a664 <UART_SetConfig+0x368>)
 800a538:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a53a:	e014      	b.n	800a566 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800a53c:	4b4a      	ldr	r3, [pc, #296]	; (800a668 <UART_SetConfig+0x36c>)
 800a53e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a540:	e011      	b.n	800a566 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a542:	f7fe fc3f 	bl	8008dc4 <HAL_RCC_GetSysClockFreq>
 800a546:	0003      	movs	r3, r0
 800a548:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a54a:	e00c      	b.n	800a566 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a54c:	2380      	movs	r3, #128	; 0x80
 800a54e:	021b      	lsls	r3, r3, #8
 800a550:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a552:	e008      	b.n	800a566 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800a554:	2300      	movs	r3, #0
 800a556:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a558:	231a      	movs	r3, #26
 800a55a:	2218      	movs	r2, #24
 800a55c:	189b      	adds	r3, r3, r2
 800a55e:	19db      	adds	r3, r3, r7
 800a560:	2201      	movs	r2, #1
 800a562:	701a      	strb	r2, [r3, #0]
        break;
 800a564:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d100      	bne.n	800a56e <UART_SetConfig+0x272>
 800a56c:	e133      	b.n	800a7d6 <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	0013      	movs	r3, r2
 800a574:	005b      	lsls	r3, r3, #1
 800a576:	189b      	adds	r3, r3, r2
 800a578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d305      	bcc.n	800a58a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a586:	429a      	cmp	r2, r3
 800a588:	d906      	bls.n	800a598 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800a58a:	231a      	movs	r3, #26
 800a58c:	2218      	movs	r2, #24
 800a58e:	189b      	adds	r3, r3, r2
 800a590:	19db      	adds	r3, r3, r7
 800a592:	2201      	movs	r2, #1
 800a594:	701a      	strb	r2, [r3, #0]
 800a596:	e11e      	b.n	800a7d6 <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59a:	613b      	str	r3, [r7, #16]
 800a59c:	2300      	movs	r3, #0
 800a59e:	617b      	str	r3, [r7, #20]
 800a5a0:	6939      	ldr	r1, [r7, #16]
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	000b      	movs	r3, r1
 800a5a6:	0e1b      	lsrs	r3, r3, #24
 800a5a8:	0010      	movs	r0, r2
 800a5aa:	0205      	lsls	r5, r0, #8
 800a5ac:	431d      	orrs	r5, r3
 800a5ae:	000b      	movs	r3, r1
 800a5b0:	021c      	lsls	r4, r3, #8
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	085b      	lsrs	r3, r3, #1
 800a5b8:	60bb      	str	r3, [r7, #8]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	60fb      	str	r3, [r7, #12]
 800a5be:	68b8      	ldr	r0, [r7, #8]
 800a5c0:	68f9      	ldr	r1, [r7, #12]
 800a5c2:	1900      	adds	r0, r0, r4
 800a5c4:	4169      	adcs	r1, r5
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	603b      	str	r3, [r7, #0]
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	607b      	str	r3, [r7, #4]
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f7f5 ffa2 	bl	800051c <__aeabi_uldivmod>
 800a5d8:	0002      	movs	r2, r0
 800a5da:	000b      	movs	r3, r1
 800a5dc:	0013      	movs	r3, r2
 800a5de:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5e2:	23c0      	movs	r3, #192	; 0xc0
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d309      	bcc.n	800a5fe <UART_SetConfig+0x302>
 800a5ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5ec:	2380      	movs	r3, #128	; 0x80
 800a5ee:	035b      	lsls	r3, r3, #13
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d204      	bcs.n	800a5fe <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5fa:	60da      	str	r2, [r3, #12]
 800a5fc:	e0eb      	b.n	800a7d6 <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 800a5fe:	231a      	movs	r3, #26
 800a600:	2218      	movs	r2, #24
 800a602:	189b      	adds	r3, r3, r2
 800a604:	19db      	adds	r3, r3, r7
 800a606:	2201      	movs	r2, #1
 800a608:	701a      	strb	r2, [r3, #0]
 800a60a:	e0e4      	b.n	800a7d6 <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	69da      	ldr	r2, [r3, #28]
 800a610:	2380      	movs	r3, #128	; 0x80
 800a612:	021b      	lsls	r3, r3, #8
 800a614:	429a      	cmp	r2, r3
 800a616:	d000      	beq.n	800a61a <UART_SetConfig+0x31e>
 800a618:	e086      	b.n	800a728 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 800a61a:	231b      	movs	r3, #27
 800a61c:	2218      	movs	r2, #24
 800a61e:	189b      	adds	r3, r3, r2
 800a620:	19db      	adds	r3, r3, r7
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	2b08      	cmp	r3, #8
 800a626:	d837      	bhi.n	800a698 <UART_SetConfig+0x39c>
 800a628:	009a      	lsls	r2, r3, #2
 800a62a:	4b10      	ldr	r3, [pc, #64]	; (800a66c <UART_SetConfig+0x370>)
 800a62c:	18d3      	adds	r3, r2, r3
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a632:	f7fe fc77 	bl	8008f24 <HAL_RCC_GetPCLK1Freq>
 800a636:	0003      	movs	r3, r0
 800a638:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a63a:	e036      	b.n	800a6aa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a63c:	f7fe fc88 	bl	8008f50 <HAL_RCC_GetPCLK2Freq>
 800a640:	0003      	movs	r3, r0
 800a642:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a644:	e031      	b.n	800a6aa <UART_SetConfig+0x3ae>
 800a646:	46c0      	nop			; (mov r8, r8)
 800a648:	efff69f3 	.word	0xefff69f3
 800a64c:	ffffcfff 	.word	0xffffcfff
 800a650:	40004800 	.word	0x40004800
 800a654:	fffff4ff 	.word	0xfffff4ff
 800a658:	40013800 	.word	0x40013800
 800a65c:	40021000 	.word	0x40021000
 800a660:	40004400 	.word	0x40004400
 800a664:	003d0900 	.word	0x003d0900
 800a668:	00f42400 	.word	0x00f42400
 800a66c:	0800eae8 	.word	0x0800eae8
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a670:	4b60      	ldr	r3, [pc, #384]	; (800a7f4 <UART_SetConfig+0x4f8>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2210      	movs	r2, #16
 800a676:	4013      	ands	r3, r2
 800a678:	d002      	beq.n	800a680 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a67a:	4b5f      	ldr	r3, [pc, #380]	; (800a7f8 <UART_SetConfig+0x4fc>)
 800a67c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a67e:	e014      	b.n	800a6aa <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 800a680:	4b5e      	ldr	r3, [pc, #376]	; (800a7fc <UART_SetConfig+0x500>)
 800a682:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a684:	e011      	b.n	800a6aa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a686:	f7fe fb9d 	bl	8008dc4 <HAL_RCC_GetSysClockFreq>
 800a68a:	0003      	movs	r3, r0
 800a68c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a68e:	e00c      	b.n	800a6aa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a690:	2380      	movs	r3, #128	; 0x80
 800a692:	021b      	lsls	r3, r3, #8
 800a694:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a696:	e008      	b.n	800a6aa <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 800a698:	2300      	movs	r3, #0
 800a69a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a69c:	231a      	movs	r3, #26
 800a69e:	2218      	movs	r2, #24
 800a6a0:	189b      	adds	r3, r3, r2
 800a6a2:	19db      	adds	r3, r3, r7
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	701a      	strb	r2, [r3, #0]
        break;
 800a6a8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d100      	bne.n	800a6b2 <UART_SetConfig+0x3b6>
 800a6b0:	e091      	b.n	800a7d6 <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b4:	005a      	lsls	r2, r3, #1
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	085b      	lsrs	r3, r3, #1
 800a6bc:	18d2      	adds	r2, r2, r3
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	0019      	movs	r1, r3
 800a6c4:	0010      	movs	r0, r2
 800a6c6:	f7f5 fd3b 	bl	8000140 <__udivsi3>
 800a6ca:	0003      	movs	r3, r0
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	2b0f      	cmp	r3, #15
 800a6d4:	d921      	bls.n	800a71a <UART_SetConfig+0x41e>
 800a6d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6d8:	2380      	movs	r3, #128	; 0x80
 800a6da:	025b      	lsls	r3, r3, #9
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d21c      	bcs.n	800a71a <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	200e      	movs	r0, #14
 800a6e6:	2418      	movs	r4, #24
 800a6e8:	1903      	adds	r3, r0, r4
 800a6ea:	19db      	adds	r3, r3, r7
 800a6ec:	210f      	movs	r1, #15
 800a6ee:	438a      	bics	r2, r1
 800a6f0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f4:	085b      	lsrs	r3, r3, #1
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	2207      	movs	r2, #7
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	b299      	uxth	r1, r3
 800a6fe:	1903      	adds	r3, r0, r4
 800a700:	19db      	adds	r3, r3, r7
 800a702:	1902      	adds	r2, r0, r4
 800a704:	19d2      	adds	r2, r2, r7
 800a706:	8812      	ldrh	r2, [r2, #0]
 800a708:	430a      	orrs	r2, r1
 800a70a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	1902      	adds	r2, r0, r4
 800a712:	19d2      	adds	r2, r2, r7
 800a714:	8812      	ldrh	r2, [r2, #0]
 800a716:	60da      	str	r2, [r3, #12]
 800a718:	e05d      	b.n	800a7d6 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 800a71a:	231a      	movs	r3, #26
 800a71c:	2218      	movs	r2, #24
 800a71e:	189b      	adds	r3, r3, r2
 800a720:	19db      	adds	r3, r3, r7
 800a722:	2201      	movs	r2, #1
 800a724:	701a      	strb	r2, [r3, #0]
 800a726:	e056      	b.n	800a7d6 <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a728:	231b      	movs	r3, #27
 800a72a:	2218      	movs	r2, #24
 800a72c:	189b      	adds	r3, r3, r2
 800a72e:	19db      	adds	r3, r3, r7
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	2b08      	cmp	r3, #8
 800a734:	d822      	bhi.n	800a77c <UART_SetConfig+0x480>
 800a736:	009a      	lsls	r2, r3, #2
 800a738:	4b31      	ldr	r3, [pc, #196]	; (800a800 <UART_SetConfig+0x504>)
 800a73a:	18d3      	adds	r3, r2, r3
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a740:	f7fe fbf0 	bl	8008f24 <HAL_RCC_GetPCLK1Freq>
 800a744:	0003      	movs	r3, r0
 800a746:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a748:	e021      	b.n	800a78e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a74a:	f7fe fc01 	bl	8008f50 <HAL_RCC_GetPCLK2Freq>
 800a74e:	0003      	movs	r3, r0
 800a750:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a752:	e01c      	b.n	800a78e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a754:	4b27      	ldr	r3, [pc, #156]	; (800a7f4 <UART_SetConfig+0x4f8>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2210      	movs	r2, #16
 800a75a:	4013      	ands	r3, r2
 800a75c:	d002      	beq.n	800a764 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a75e:	4b26      	ldr	r3, [pc, #152]	; (800a7f8 <UART_SetConfig+0x4fc>)
 800a760:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a762:	e014      	b.n	800a78e <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 800a764:	4b25      	ldr	r3, [pc, #148]	; (800a7fc <UART_SetConfig+0x500>)
 800a766:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a768:	e011      	b.n	800a78e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a76a:	f7fe fb2b 	bl	8008dc4 <HAL_RCC_GetSysClockFreq>
 800a76e:	0003      	movs	r3, r0
 800a770:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a772:	e00c      	b.n	800a78e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a774:	2380      	movs	r3, #128	; 0x80
 800a776:	021b      	lsls	r3, r3, #8
 800a778:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a77a:	e008      	b.n	800a78e <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 800a77c:	2300      	movs	r3, #0
 800a77e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a780:	231a      	movs	r3, #26
 800a782:	2218      	movs	r2, #24
 800a784:	189b      	adds	r3, r3, r2
 800a786:	19db      	adds	r3, r3, r7
 800a788:	2201      	movs	r2, #1
 800a78a:	701a      	strb	r2, [r3, #0]
        break;
 800a78c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800a78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a790:	2b00      	cmp	r3, #0
 800a792:	d020      	beq.n	800a7d6 <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	085a      	lsrs	r2, r3, #1
 800a79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79c:	18d2      	adds	r2, r2, r3
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	0019      	movs	r1, r3
 800a7a4:	0010      	movs	r0, r2
 800a7a6:	f7f5 fccb 	bl	8000140 <__udivsi3>
 800a7aa:	0003      	movs	r3, r0
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b2:	2b0f      	cmp	r3, #15
 800a7b4:	d909      	bls.n	800a7ca <UART_SetConfig+0x4ce>
 800a7b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7b8:	2380      	movs	r3, #128	; 0x80
 800a7ba:	025b      	lsls	r3, r3, #9
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d204      	bcs.n	800a7ca <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7c6:	60da      	str	r2, [r3, #12]
 800a7c8:	e005      	b.n	800a7d6 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 800a7ca:	231a      	movs	r3, #26
 800a7cc:	2218      	movs	r2, #24
 800a7ce:	189b      	adds	r3, r3, r2
 800a7d0:	19db      	adds	r3, r3, r7
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a7e2:	231a      	movs	r3, #26
 800a7e4:	2218      	movs	r2, #24
 800a7e6:	189b      	adds	r3, r3, r2
 800a7e8:	19db      	adds	r3, r3, r7
 800a7ea:	781b      	ldrb	r3, [r3, #0]
}
 800a7ec:	0018      	movs	r0, r3
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	b00e      	add	sp, #56	; 0x38
 800a7f2:	bdb0      	pop	{r4, r5, r7, pc}
 800a7f4:	40021000 	.word	0x40021000
 800a7f8:	003d0900 	.word	0x003d0900
 800a7fc:	00f42400 	.word	0x00f42400
 800a800:	0800eb0c 	.word	0x0800eb0c

0800a804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	2201      	movs	r2, #1
 800a812:	4013      	ands	r3, r2
 800a814:	d00b      	beq.n	800a82e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	4a4a      	ldr	r2, [pc, #296]	; (800a948 <UART_AdvFeatureConfig+0x144>)
 800a81e:	4013      	ands	r3, r2
 800a820:	0019      	movs	r1, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	430a      	orrs	r2, r1
 800a82c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a832:	2202      	movs	r2, #2
 800a834:	4013      	ands	r3, r2
 800a836:	d00b      	beq.n	800a850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	4a43      	ldr	r2, [pc, #268]	; (800a94c <UART_AdvFeatureConfig+0x148>)
 800a840:	4013      	ands	r3, r2
 800a842:	0019      	movs	r1, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	430a      	orrs	r2, r1
 800a84e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a854:	2204      	movs	r2, #4
 800a856:	4013      	ands	r3, r2
 800a858:	d00b      	beq.n	800a872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	4a3b      	ldr	r2, [pc, #236]	; (800a950 <UART_AdvFeatureConfig+0x14c>)
 800a862:	4013      	ands	r3, r2
 800a864:	0019      	movs	r1, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	430a      	orrs	r2, r1
 800a870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a876:	2208      	movs	r2, #8
 800a878:	4013      	ands	r3, r2
 800a87a:	d00b      	beq.n	800a894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	4a34      	ldr	r2, [pc, #208]	; (800a954 <UART_AdvFeatureConfig+0x150>)
 800a884:	4013      	ands	r3, r2
 800a886:	0019      	movs	r1, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	430a      	orrs	r2, r1
 800a892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a898:	2210      	movs	r2, #16
 800a89a:	4013      	ands	r3, r2
 800a89c:	d00b      	beq.n	800a8b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	4a2c      	ldr	r2, [pc, #176]	; (800a958 <UART_AdvFeatureConfig+0x154>)
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	0019      	movs	r1, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	430a      	orrs	r2, r1
 800a8b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ba:	2220      	movs	r2, #32
 800a8bc:	4013      	ands	r3, r2
 800a8be:	d00b      	beq.n	800a8d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	4a25      	ldr	r2, [pc, #148]	; (800a95c <UART_AdvFeatureConfig+0x158>)
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	0019      	movs	r1, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	430a      	orrs	r2, r1
 800a8d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	2240      	movs	r2, #64	; 0x40
 800a8de:	4013      	ands	r3, r2
 800a8e0:	d01d      	beq.n	800a91e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	4a1d      	ldr	r2, [pc, #116]	; (800a960 <UART_AdvFeatureConfig+0x15c>)
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	0019      	movs	r1, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	430a      	orrs	r2, r1
 800a8f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8fe:	2380      	movs	r3, #128	; 0x80
 800a900:	035b      	lsls	r3, r3, #13
 800a902:	429a      	cmp	r2, r3
 800a904:	d10b      	bne.n	800a91e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	4a15      	ldr	r2, [pc, #84]	; (800a964 <UART_AdvFeatureConfig+0x160>)
 800a90e:	4013      	ands	r3, r2
 800a910:	0019      	movs	r1, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	430a      	orrs	r2, r1
 800a91c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a922:	2280      	movs	r2, #128	; 0x80
 800a924:	4013      	ands	r3, r2
 800a926:	d00b      	beq.n	800a940 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	4a0e      	ldr	r2, [pc, #56]	; (800a968 <UART_AdvFeatureConfig+0x164>)
 800a930:	4013      	ands	r3, r2
 800a932:	0019      	movs	r1, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	430a      	orrs	r2, r1
 800a93e:	605a      	str	r2, [r3, #4]
  }
}
 800a940:	46c0      	nop			; (mov r8, r8)
 800a942:	46bd      	mov	sp, r7
 800a944:	b002      	add	sp, #8
 800a946:	bd80      	pop	{r7, pc}
 800a948:	fffdffff 	.word	0xfffdffff
 800a94c:	fffeffff 	.word	0xfffeffff
 800a950:	fffbffff 	.word	0xfffbffff
 800a954:	ffff7fff 	.word	0xffff7fff
 800a958:	ffffefff 	.word	0xffffefff
 800a95c:	ffffdfff 	.word	0xffffdfff
 800a960:	ffefffff 	.word	0xffefffff
 800a964:	ff9fffff 	.word	0xff9fffff
 800a968:	fff7ffff 	.word	0xfff7ffff

0800a96c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b086      	sub	sp, #24
 800a970:	af02      	add	r7, sp, #8
 800a972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2280      	movs	r2, #128	; 0x80
 800a978:	2100      	movs	r1, #0
 800a97a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a97c:	f7fb ff8c 	bl	8006898 <HAL_GetTick>
 800a980:	0003      	movs	r3, r0
 800a982:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2208      	movs	r2, #8
 800a98c:	4013      	ands	r3, r2
 800a98e:	2b08      	cmp	r3, #8
 800a990:	d10c      	bne.n	800a9ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2280      	movs	r2, #128	; 0x80
 800a996:	0391      	lsls	r1, r2, #14
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	4a17      	ldr	r2, [pc, #92]	; (800a9f8 <UART_CheckIdleState+0x8c>)
 800a99c:	9200      	str	r2, [sp, #0]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f000 f82c 	bl	800a9fc <UART_WaitOnFlagUntilTimeout>
 800a9a4:	1e03      	subs	r3, r0, #0
 800a9a6:	d001      	beq.n	800a9ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e021      	b.n	800a9f0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2204      	movs	r2, #4
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	2b04      	cmp	r3, #4
 800a9b8:	d10c      	bne.n	800a9d4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2280      	movs	r2, #128	; 0x80
 800a9be:	03d1      	lsls	r1, r2, #15
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	4a0d      	ldr	r2, [pc, #52]	; (800a9f8 <UART_CheckIdleState+0x8c>)
 800a9c4:	9200      	str	r2, [sp, #0]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f000 f818 	bl	800a9fc <UART_WaitOnFlagUntilTimeout>
 800a9cc:	1e03      	subs	r3, r0, #0
 800a9ce:	d001      	beq.n	800a9d4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	e00d      	b.n	800a9f0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2220      	movs	r2, #32
 800a9d8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2274      	movs	r2, #116	; 0x74
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	0018      	movs	r0, r3
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	b004      	add	sp, #16
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	01ffffff 	.word	0x01ffffff

0800a9fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b094      	sub	sp, #80	; 0x50
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	603b      	str	r3, [r7, #0]
 800aa08:	1dfb      	adds	r3, r7, #7
 800aa0a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa0c:	e0a3      	b.n	800ab56 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa10:	3301      	adds	r3, #1
 800aa12:	d100      	bne.n	800aa16 <UART_WaitOnFlagUntilTimeout+0x1a>
 800aa14:	e09f      	b.n	800ab56 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa16:	f7fb ff3f 	bl	8006898 <HAL_GetTick>
 800aa1a:	0002      	movs	r2, r0
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d302      	bcc.n	800aa2c <UART_WaitOnFlagUntilTimeout+0x30>
 800aa26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d13d      	bne.n	800aaa8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa2c:	f3ef 8310 	mrs	r3, PRIMASK
 800aa30:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa34:	647b      	str	r3, [r7, #68]	; 0x44
 800aa36:	2301      	movs	r3, #1
 800aa38:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3c:	f383 8810 	msr	PRIMASK, r3
}
 800aa40:	46c0      	nop			; (mov r8, r8)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	494c      	ldr	r1, [pc, #304]	; (800ab80 <UART_WaitOnFlagUntilTimeout+0x184>)
 800aa4e:	400a      	ands	r2, r1
 800aa50:	601a      	str	r2, [r3, #0]
 800aa52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa54:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	f383 8810 	msr	PRIMASK, r3
}
 800aa5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa5e:	f3ef 8310 	mrs	r3, PRIMASK
 800aa62:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800aa64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa66:	643b      	str	r3, [r7, #64]	; 0x40
 800aa68:	2301      	movs	r3, #1
 800aa6a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6e:	f383 8810 	msr	PRIMASK, r3
}
 800aa72:	46c0      	nop			; (mov r8, r8)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	689a      	ldr	r2, [r3, #8]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2101      	movs	r1, #1
 800aa80:	438a      	bics	r2, r1
 800aa82:	609a      	str	r2, [r3, #8]
 800aa84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa86:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa8a:	f383 8810 	msr	PRIMASK, r3
}
 800aa8e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2220      	movs	r2, #32
 800aa94:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2220      	movs	r2, #32
 800aa9a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2274      	movs	r2, #116	; 0x74
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e067      	b.n	800ab78 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2204      	movs	r2, #4
 800aab0:	4013      	ands	r3, r2
 800aab2:	d050      	beq.n	800ab56 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	69da      	ldr	r2, [r3, #28]
 800aaba:	2380      	movs	r3, #128	; 0x80
 800aabc:	011b      	lsls	r3, r3, #4
 800aabe:	401a      	ands	r2, r3
 800aac0:	2380      	movs	r3, #128	; 0x80
 800aac2:	011b      	lsls	r3, r3, #4
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d146      	bne.n	800ab56 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2280      	movs	r2, #128	; 0x80
 800aace:	0112      	lsls	r2, r2, #4
 800aad0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aad2:	f3ef 8310 	mrs	r3, PRIMASK
 800aad6:	613b      	str	r3, [r7, #16]
  return(result);
 800aad8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aada:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aadc:	2301      	movs	r3, #1
 800aade:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	f383 8810 	msr	PRIMASK, r3
}
 800aae6:	46c0      	nop			; (mov r8, r8)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4923      	ldr	r1, [pc, #140]	; (800ab80 <UART_WaitOnFlagUntilTimeout+0x184>)
 800aaf4:	400a      	ands	r2, r1
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aafa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	f383 8810 	msr	PRIMASK, r3
}
 800ab02:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab04:	f3ef 8310 	mrs	r3, PRIMASK
 800ab08:	61fb      	str	r3, [r7, #28]
  return(result);
 800ab0a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab0e:	2301      	movs	r3, #1
 800ab10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab12:	6a3b      	ldr	r3, [r7, #32]
 800ab14:	f383 8810 	msr	PRIMASK, r3
}
 800ab18:	46c0      	nop			; (mov r8, r8)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	689a      	ldr	r2, [r3, #8]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2101      	movs	r1, #1
 800ab26:	438a      	bics	r2, r1
 800ab28:	609a      	str	r2, [r3, #8]
 800ab2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab2c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab30:	f383 8810 	msr	PRIMASK, r3
}
 800ab34:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2220      	movs	r2, #32
 800ab3a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2220      	movs	r2, #32
 800ab40:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2280      	movs	r2, #128	; 0x80
 800ab46:	2120      	movs	r1, #32
 800ab48:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2274      	movs	r2, #116	; 0x74
 800ab4e:	2100      	movs	r1, #0
 800ab50:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ab52:	2303      	movs	r3, #3
 800ab54:	e010      	b.n	800ab78 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	69db      	ldr	r3, [r3, #28]
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	4013      	ands	r3, r2
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	425a      	negs	r2, r3
 800ab66:	4153      	adcs	r3, r2
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	001a      	movs	r2, r3
 800ab6c:	1dfb      	adds	r3, r7, #7
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d100      	bne.n	800ab76 <UART_WaitOnFlagUntilTimeout+0x17a>
 800ab74:	e74b      	b.n	800aa0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	0018      	movs	r0, r3
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	b014      	add	sp, #80	; 0x50
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	fffffe5f 	.word	0xfffffe5f

0800ab84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b090      	sub	sp, #64	; 0x40
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	1dbb      	adds	r3, r7, #6
 800ab90:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	1dba      	adds	r2, r7, #6
 800ab9c:	2158      	movs	r1, #88	; 0x58
 800ab9e:	8812      	ldrh	r2, [r2, #0]
 800aba0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2280      	movs	r2, #128	; 0x80
 800aba6:	2100      	movs	r1, #0
 800aba8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2222      	movs	r2, #34	; 0x22
 800abae:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d02b      	beq.n	800ac10 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abbc:	4a3f      	ldr	r2, [pc, #252]	; (800acbc <UART_Start_Receive_DMA+0x138>)
 800abbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc4:	4a3e      	ldr	r2, [pc, #248]	; (800acc0 <UART_Start_Receive_DMA+0x13c>)
 800abc6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abcc:	4a3d      	ldr	r2, [pc, #244]	; (800acc4 <UART_Start_Receive_DMA+0x140>)
 800abce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd4:	2200      	movs	r2, #0
 800abd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3324      	adds	r3, #36	; 0x24
 800abe2:	0019      	movs	r1, r3
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abe8:	001a      	movs	r2, r3
 800abea:	1dbb      	adds	r3, r7, #6
 800abec:	881b      	ldrh	r3, [r3, #0]
 800abee:	f7fc fbff 	bl	80073f0 <HAL_DMA_Start_IT>
 800abf2:	1e03      	subs	r3, r0, #0
 800abf4:	d00c      	beq.n	800ac10 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2280      	movs	r2, #128	; 0x80
 800abfa:	2110      	movs	r1, #16
 800abfc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2274      	movs	r2, #116	; 0x74
 800ac02:	2100      	movs	r1, #0
 800ac04:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2220      	movs	r2, #32
 800ac0a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e050      	b.n	800acb2 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2274      	movs	r2, #116	; 0x74
 800ac14:	2100      	movs	r1, #0
 800ac16:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac18:	f3ef 8310 	mrs	r3, PRIMASK
 800ac1c:	613b      	str	r3, [r7, #16]
  return(result);
 800ac1e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac22:	2301      	movs	r3, #1
 800ac24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	f383 8810 	msr	PRIMASK, r3
}
 800ac2c:	46c0      	nop			; (mov r8, r8)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2180      	movs	r1, #128	; 0x80
 800ac3a:	0049      	lsls	r1, r1, #1
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	f383 8810 	msr	PRIMASK, r3
}
 800ac4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac4c:	f3ef 8310 	mrs	r3, PRIMASK
 800ac50:	61fb      	str	r3, [r7, #28]
  return(result);
 800ac52:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac54:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac56:	2301      	movs	r3, #1
 800ac58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac5a:	6a3b      	ldr	r3, [r7, #32]
 800ac5c:	f383 8810 	msr	PRIMASK, r3
}
 800ac60:	46c0      	nop			; (mov r8, r8)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	689a      	ldr	r2, [r3, #8]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2101      	movs	r1, #1
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	609a      	str	r2, [r3, #8]
 800ac72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac74:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac78:	f383 8810 	msr	PRIMASK, r3
}
 800ac7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac7e:	f3ef 8310 	mrs	r3, PRIMASK
 800ac82:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800ac84:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac86:	637b      	str	r3, [r7, #52]	; 0x34
 800ac88:	2301      	movs	r3, #1
 800ac8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8e:	f383 8810 	msr	PRIMASK, r3
}
 800ac92:	46c0      	nop			; (mov r8, r8)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	689a      	ldr	r2, [r3, #8]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2140      	movs	r1, #64	; 0x40
 800aca0:	430a      	orrs	r2, r1
 800aca2:	609a      	str	r2, [r3, #8]
 800aca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acaa:	f383 8810 	msr	PRIMASK, r3
}
 800acae:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	0018      	movs	r0, r3
 800acb4:	46bd      	mov	sp, r7
 800acb6:	b010      	add	sp, #64	; 0x40
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	46c0      	nop			; (mov r8, r8)
 800acbc:	0800add5 	.word	0x0800add5
 800acc0:	0800aefd 	.word	0x0800aefd
 800acc4:	0800af39 	.word	0x0800af39

0800acc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acd0:	f3ef 8310 	mrs	r3, PRIMASK
 800acd4:	60bb      	str	r3, [r7, #8]
  return(result);
 800acd6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800acd8:	617b      	str	r3, [r7, #20]
 800acda:	2301      	movs	r3, #1
 800acdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f383 8810 	msr	PRIMASK, r3
}
 800ace4:	46c0      	nop			; (mov r8, r8)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	21c0      	movs	r1, #192	; 0xc0
 800acf2:	438a      	bics	r2, r1
 800acf4:	601a      	str	r2, [r3, #0]
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	f383 8810 	msr	PRIMASK, r3
}
 800ad00:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2220      	movs	r2, #32
 800ad06:	679a      	str	r2, [r3, #120]	; 0x78
}
 800ad08:	46c0      	nop			; (mov r8, r8)
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	b006      	add	sp, #24
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b08e      	sub	sp, #56	; 0x38
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad18:	f3ef 8310 	mrs	r3, PRIMASK
 800ad1c:	617b      	str	r3, [r7, #20]
  return(result);
 800ad1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad20:	637b      	str	r3, [r7, #52]	; 0x34
 800ad22:	2301      	movs	r3, #1
 800ad24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	f383 8810 	msr	PRIMASK, r3
}
 800ad2c:	46c0      	nop			; (mov r8, r8)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4925      	ldr	r1, [pc, #148]	; (800add0 <UART_EndRxTransfer+0xc0>)
 800ad3a:	400a      	ands	r2, r1
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	f383 8810 	msr	PRIMASK, r3
}
 800ad48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad4a:	f3ef 8310 	mrs	r3, PRIMASK
 800ad4e:	623b      	str	r3, [r7, #32]
  return(result);
 800ad50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad52:	633b      	str	r3, [r7, #48]	; 0x30
 800ad54:	2301      	movs	r3, #1
 800ad56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	f383 8810 	msr	PRIMASK, r3
}
 800ad5e:	46c0      	nop			; (mov r8, r8)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	689a      	ldr	r2, [r3, #8]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	438a      	bics	r2, r1
 800ad6e:	609a      	str	r2, [r3, #8]
 800ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	f383 8810 	msr	PRIMASK, r3
}
 800ad7a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d118      	bne.n	800adb6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad84:	f3ef 8310 	mrs	r3, PRIMASK
 800ad88:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad8e:	2301      	movs	r3, #1
 800ad90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f383 8810 	msr	PRIMASK, r3
}
 800ad98:	46c0      	nop			; (mov r8, r8)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2110      	movs	r1, #16
 800ada6:	438a      	bics	r2, r1
 800ada8:	601a      	str	r2, [r3, #0]
 800adaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	f383 8810 	msr	PRIMASK, r3
}
 800adb4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2220      	movs	r2, #32
 800adba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	665a      	str	r2, [r3, #100]	; 0x64
}
 800adc8:	46c0      	nop			; (mov r8, r8)
 800adca:	46bd      	mov	sp, r7
 800adcc:	b00e      	add	sp, #56	; 0x38
 800adce:	bd80      	pop	{r7, pc}
 800add0:	fffffedf 	.word	0xfffffedf

0800add4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b094      	sub	sp, #80	; 0x50
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2220      	movs	r2, #32
 800adea:	4013      	ands	r3, r2
 800adec:	d16e      	bne.n	800aecc <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 800adee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf0:	225a      	movs	r2, #90	; 0x5a
 800adf2:	2100      	movs	r1, #0
 800adf4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adf6:	f3ef 8310 	mrs	r3, PRIMASK
 800adfa:	61bb      	str	r3, [r7, #24]
  return(result);
 800adfc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adfe:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae00:	2301      	movs	r3, #1
 800ae02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	f383 8810 	msr	PRIMASK, r3
}
 800ae0a:	46c0      	nop			; (mov r8, r8)
 800ae0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4938      	ldr	r1, [pc, #224]	; (800aef8 <UART_DMAReceiveCplt+0x124>)
 800ae18:	400a      	ands	r2, r1
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae20:	6a3b      	ldr	r3, [r7, #32]
 800ae22:	f383 8810 	msr	PRIMASK, r3
}
 800ae26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae28:	f3ef 8310 	mrs	r3, PRIMASK
 800ae2c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae30:	647b      	str	r3, [r7, #68]	; 0x44
 800ae32:	2301      	movs	r3, #1
 800ae34:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae38:	f383 8810 	msr	PRIMASK, r3
}
 800ae3c:	46c0      	nop			; (mov r8, r8)
 800ae3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689a      	ldr	r2, [r3, #8]
 800ae44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2101      	movs	r1, #1
 800ae4a:	438a      	bics	r2, r1
 800ae4c:	609a      	str	r2, [r3, #8]
 800ae4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae50:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae54:	f383 8810 	msr	PRIMASK, r3
}
 800ae58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ae5e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae62:	643b      	str	r3, [r7, #64]	; 0x40
 800ae64:	2301      	movs	r3, #1
 800ae66:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6a:	f383 8810 	msr	PRIMASK, r3
}
 800ae6e:	46c0      	nop			; (mov r8, r8)
 800ae70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	689a      	ldr	r2, [r3, #8]
 800ae76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2140      	movs	r1, #64	; 0x40
 800ae7c:	438a      	bics	r2, r1
 800ae7e:	609a      	str	r2, [r3, #8]
 800ae80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae82:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae86:	f383 8810 	msr	PRIMASK, r3
}
 800ae8a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae8e:	2220      	movs	r2, #32
 800ae90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d118      	bne.n	800aecc <UART_DMAReceiveCplt+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae9a:	f3ef 8310 	mrs	r3, PRIMASK
 800ae9e:	60fb      	str	r3, [r7, #12]
  return(result);
 800aea0:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aea4:	2301      	movs	r3, #1
 800aea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f383 8810 	msr	PRIMASK, r3
}
 800aeae:	46c0      	nop			; (mov r8, r8)
 800aeb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2110      	movs	r1, #16
 800aebc:	438a      	bics	r2, r1
 800aebe:	601a      	str	r2, [r3, #0]
 800aec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aec2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	f383 8810 	msr	PRIMASK, r3
}
 800aeca:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d108      	bne.n	800aee6 <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aed6:	2258      	movs	r2, #88	; 0x58
 800aed8:	5a9a      	ldrh	r2, [r3, r2]
 800aeda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aedc:	0011      	movs	r1, r2
 800aede:	0018      	movs	r0, r3
 800aee0:	f7ff fa01 	bl	800a2e6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aee4:	e003      	b.n	800aeee <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800aee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aee8:	0018      	movs	r0, r3
 800aeea:	f7ff f9e4 	bl	800a2b6 <HAL_UART_RxCpltCallback>
}
 800aeee:	46c0      	nop			; (mov r8, r8)
 800aef0:	46bd      	mov	sp, r7
 800aef2:	b014      	add	sp, #80	; 0x50
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	46c0      	nop			; (mov r8, r8)
 800aef8:	fffffeff 	.word	0xfffffeff

0800aefc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af08:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d10a      	bne.n	800af28 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2258      	movs	r2, #88	; 0x58
 800af16:	5a9b      	ldrh	r3, [r3, r2]
 800af18:	085b      	lsrs	r3, r3, #1
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	0011      	movs	r1, r2
 800af20:	0018      	movs	r0, r3
 800af22:	f7ff f9e0 	bl	800a2e6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af26:	e003      	b.n	800af30 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	0018      	movs	r0, r3
 800af2c:	f7ff f9cb 	bl	800a2c6 <HAL_UART_RxHalfCpltCallback>
}
 800af30:	46c0      	nop			; (mov r8, r8)
 800af32:	46bd      	mov	sp, r7
 800af34:	b004      	add	sp, #16
 800af36:	bd80      	pop	{r7, pc}

0800af38 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af44:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af4a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af50:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	2280      	movs	r2, #128	; 0x80
 800af5a:	4013      	ands	r3, r2
 800af5c:	2b80      	cmp	r3, #128	; 0x80
 800af5e:	d10a      	bne.n	800af76 <UART_DMAError+0x3e>
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	2b21      	cmp	r3, #33	; 0x21
 800af64:	d107      	bne.n	800af76 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	2252      	movs	r2, #82	; 0x52
 800af6a:	2100      	movs	r1, #0
 800af6c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	0018      	movs	r0, r3
 800af72:	f7ff fea9 	bl	800acc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	2240      	movs	r2, #64	; 0x40
 800af7e:	4013      	ands	r3, r2
 800af80:	2b40      	cmp	r3, #64	; 0x40
 800af82:	d10a      	bne.n	800af9a <UART_DMAError+0x62>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2b22      	cmp	r3, #34	; 0x22
 800af88:	d107      	bne.n	800af9a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	225a      	movs	r2, #90	; 0x5a
 800af8e:	2100      	movs	r1, #0
 800af90:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	0018      	movs	r0, r3
 800af96:	f7ff febb 	bl	800ad10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	2280      	movs	r2, #128	; 0x80
 800af9e:	589b      	ldr	r3, [r3, r2]
 800afa0:	2210      	movs	r2, #16
 800afa2:	431a      	orrs	r2, r3
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	2180      	movs	r1, #128	; 0x80
 800afa8:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	0018      	movs	r0, r3
 800afae:	f7ff f992 	bl	800a2d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afb2:	46c0      	nop			; (mov r8, r8)
 800afb4:	46bd      	mov	sp, r7
 800afb6:	b006      	add	sp, #24
 800afb8:	bd80      	pop	{r7, pc}

0800afba <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b082      	sub	sp, #8
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	e017      	b.n	800affc <HAL_WWDG_Init+0x42>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	0018      	movs	r0, r3
 800afd0:	f7fa fb28 	bl	8005624 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	68da      	ldr	r2, [r3, #12]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2180      	movs	r1, #128	; 0x80
 800afde:	430a      	orrs	r2, r1
 800afe0:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	691a      	ldr	r2, [r3, #16]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	431a      	orrs	r2, r3
 800afec:	0011      	movs	r1, r2
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	689a      	ldr	r2, [r3, #8]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	430a      	orrs	r2, r1
 800aff8:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800affa:	2300      	movs	r3, #0
}
 800affc:	0018      	movs	r0, r3
 800affe:	46bd      	mov	sp, r7
 800b000:	b002      	add	sp, #8
 800b002:	bd80      	pop	{r7, pc}

0800b004 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	68d2      	ldr	r2, [r2, #12]
 800b014:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	0018      	movs	r0, r3
 800b01a:	46bd      	mov	sp, r7
 800b01c:	b002      	add	sp, #8
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <__errno>:
 800b020:	4b01      	ldr	r3, [pc, #4]	; (800b028 <__errno+0x8>)
 800b022:	6818      	ldr	r0, [r3, #0]
 800b024:	4770      	bx	lr
 800b026:	46c0      	nop			; (mov r8, r8)
 800b028:	20000068 	.word	0x20000068

0800b02c <__libc_init_array>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	2600      	movs	r6, #0
 800b030:	4d0c      	ldr	r5, [pc, #48]	; (800b064 <__libc_init_array+0x38>)
 800b032:	4c0d      	ldr	r4, [pc, #52]	; (800b068 <__libc_init_array+0x3c>)
 800b034:	1b64      	subs	r4, r4, r5
 800b036:	10a4      	asrs	r4, r4, #2
 800b038:	42a6      	cmp	r6, r4
 800b03a:	d109      	bne.n	800b050 <__libc_init_array+0x24>
 800b03c:	2600      	movs	r6, #0
 800b03e:	f003 f8cf 	bl	800e1e0 <_init>
 800b042:	4d0a      	ldr	r5, [pc, #40]	; (800b06c <__libc_init_array+0x40>)
 800b044:	4c0a      	ldr	r4, [pc, #40]	; (800b070 <__libc_init_array+0x44>)
 800b046:	1b64      	subs	r4, r4, r5
 800b048:	10a4      	asrs	r4, r4, #2
 800b04a:	42a6      	cmp	r6, r4
 800b04c:	d105      	bne.n	800b05a <__libc_init_array+0x2e>
 800b04e:	bd70      	pop	{r4, r5, r6, pc}
 800b050:	00b3      	lsls	r3, r6, #2
 800b052:	58eb      	ldr	r3, [r5, r3]
 800b054:	4798      	blx	r3
 800b056:	3601      	adds	r6, #1
 800b058:	e7ee      	b.n	800b038 <__libc_init_array+0xc>
 800b05a:	00b3      	lsls	r3, r6, #2
 800b05c:	58eb      	ldr	r3, [r5, r3]
 800b05e:	4798      	blx	r3
 800b060:	3601      	adds	r6, #1
 800b062:	e7f2      	b.n	800b04a <__libc_init_array+0x1e>
 800b064:	0800ef14 	.word	0x0800ef14
 800b068:	0800ef14 	.word	0x0800ef14
 800b06c:	0800ef14 	.word	0x0800ef14
 800b070:	0800ef18 	.word	0x0800ef18

0800b074 <memcpy>:
 800b074:	2300      	movs	r3, #0
 800b076:	b510      	push	{r4, lr}
 800b078:	429a      	cmp	r2, r3
 800b07a:	d100      	bne.n	800b07e <memcpy+0xa>
 800b07c:	bd10      	pop	{r4, pc}
 800b07e:	5ccc      	ldrb	r4, [r1, r3]
 800b080:	54c4      	strb	r4, [r0, r3]
 800b082:	3301      	adds	r3, #1
 800b084:	e7f8      	b.n	800b078 <memcpy+0x4>

0800b086 <memset>:
 800b086:	0003      	movs	r3, r0
 800b088:	1882      	adds	r2, r0, r2
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d100      	bne.n	800b090 <memset+0xa>
 800b08e:	4770      	bx	lr
 800b090:	7019      	strb	r1, [r3, #0]
 800b092:	3301      	adds	r3, #1
 800b094:	e7f9      	b.n	800b08a <memset+0x4>

0800b096 <__cvt>:
 800b096:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b098:	001e      	movs	r6, r3
 800b09a:	2300      	movs	r3, #0
 800b09c:	0014      	movs	r4, r2
 800b09e:	b08b      	sub	sp, #44	; 0x2c
 800b0a0:	429e      	cmp	r6, r3
 800b0a2:	da04      	bge.n	800b0ae <__cvt+0x18>
 800b0a4:	2180      	movs	r1, #128	; 0x80
 800b0a6:	0609      	lsls	r1, r1, #24
 800b0a8:	1873      	adds	r3, r6, r1
 800b0aa:	001e      	movs	r6, r3
 800b0ac:	232d      	movs	r3, #45	; 0x2d
 800b0ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b0b0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b0b2:	7013      	strb	r3, [r2, #0]
 800b0b4:	2320      	movs	r3, #32
 800b0b6:	2203      	movs	r2, #3
 800b0b8:	439f      	bics	r7, r3
 800b0ba:	2f46      	cmp	r7, #70	; 0x46
 800b0bc:	d007      	beq.n	800b0ce <__cvt+0x38>
 800b0be:	003b      	movs	r3, r7
 800b0c0:	3b45      	subs	r3, #69	; 0x45
 800b0c2:	4259      	negs	r1, r3
 800b0c4:	414b      	adcs	r3, r1
 800b0c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b0c8:	3a01      	subs	r2, #1
 800b0ca:	18cb      	adds	r3, r1, r3
 800b0cc:	9310      	str	r3, [sp, #64]	; 0x40
 800b0ce:	ab09      	add	r3, sp, #36	; 0x24
 800b0d0:	9304      	str	r3, [sp, #16]
 800b0d2:	ab08      	add	r3, sp, #32
 800b0d4:	9303      	str	r3, [sp, #12]
 800b0d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b0d8:	9200      	str	r2, [sp, #0]
 800b0da:	9302      	str	r3, [sp, #8]
 800b0dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0de:	0022      	movs	r2, r4
 800b0e0:	9301      	str	r3, [sp, #4]
 800b0e2:	0033      	movs	r3, r6
 800b0e4:	f000 fe4a 	bl	800bd7c <_dtoa_r>
 800b0e8:	0005      	movs	r5, r0
 800b0ea:	2f47      	cmp	r7, #71	; 0x47
 800b0ec:	d102      	bne.n	800b0f4 <__cvt+0x5e>
 800b0ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0f0:	07db      	lsls	r3, r3, #31
 800b0f2:	d528      	bpl.n	800b146 <__cvt+0xb0>
 800b0f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0f6:	18eb      	adds	r3, r5, r3
 800b0f8:	9307      	str	r3, [sp, #28]
 800b0fa:	2f46      	cmp	r7, #70	; 0x46
 800b0fc:	d114      	bne.n	800b128 <__cvt+0x92>
 800b0fe:	782b      	ldrb	r3, [r5, #0]
 800b100:	2b30      	cmp	r3, #48	; 0x30
 800b102:	d10c      	bne.n	800b11e <__cvt+0x88>
 800b104:	2200      	movs	r2, #0
 800b106:	2300      	movs	r3, #0
 800b108:	0020      	movs	r0, r4
 800b10a:	0031      	movs	r1, r6
 800b10c:	f7f5 f99e 	bl	800044c <__aeabi_dcmpeq>
 800b110:	2800      	cmp	r0, #0
 800b112:	d104      	bne.n	800b11e <__cvt+0x88>
 800b114:	2301      	movs	r3, #1
 800b116:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b118:	1a9b      	subs	r3, r3, r2
 800b11a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b120:	9a07      	ldr	r2, [sp, #28]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	18d3      	adds	r3, r2, r3
 800b126:	9307      	str	r3, [sp, #28]
 800b128:	2200      	movs	r2, #0
 800b12a:	2300      	movs	r3, #0
 800b12c:	0020      	movs	r0, r4
 800b12e:	0031      	movs	r1, r6
 800b130:	f7f5 f98c 	bl	800044c <__aeabi_dcmpeq>
 800b134:	2800      	cmp	r0, #0
 800b136:	d001      	beq.n	800b13c <__cvt+0xa6>
 800b138:	9b07      	ldr	r3, [sp, #28]
 800b13a:	9309      	str	r3, [sp, #36]	; 0x24
 800b13c:	2230      	movs	r2, #48	; 0x30
 800b13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b140:	9907      	ldr	r1, [sp, #28]
 800b142:	428b      	cmp	r3, r1
 800b144:	d306      	bcc.n	800b154 <__cvt+0xbe>
 800b146:	0028      	movs	r0, r5
 800b148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b14a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b14c:	1b5b      	subs	r3, r3, r5
 800b14e:	6013      	str	r3, [r2, #0]
 800b150:	b00b      	add	sp, #44	; 0x2c
 800b152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b154:	1c59      	adds	r1, r3, #1
 800b156:	9109      	str	r1, [sp, #36]	; 0x24
 800b158:	701a      	strb	r2, [r3, #0]
 800b15a:	e7f0      	b.n	800b13e <__cvt+0xa8>

0800b15c <__exponent>:
 800b15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b15e:	1c83      	adds	r3, r0, #2
 800b160:	b087      	sub	sp, #28
 800b162:	9303      	str	r3, [sp, #12]
 800b164:	0005      	movs	r5, r0
 800b166:	000c      	movs	r4, r1
 800b168:	232b      	movs	r3, #43	; 0x2b
 800b16a:	7002      	strb	r2, [r0, #0]
 800b16c:	2900      	cmp	r1, #0
 800b16e:	da01      	bge.n	800b174 <__exponent+0x18>
 800b170:	424c      	negs	r4, r1
 800b172:	3302      	adds	r3, #2
 800b174:	706b      	strb	r3, [r5, #1]
 800b176:	2c09      	cmp	r4, #9
 800b178:	dd31      	ble.n	800b1de <__exponent+0x82>
 800b17a:	270a      	movs	r7, #10
 800b17c:	ab04      	add	r3, sp, #16
 800b17e:	1dde      	adds	r6, r3, #7
 800b180:	0020      	movs	r0, r4
 800b182:	0039      	movs	r1, r7
 800b184:	9601      	str	r6, [sp, #4]
 800b186:	f7f5 f94b 	bl	8000420 <__aeabi_idivmod>
 800b18a:	3e01      	subs	r6, #1
 800b18c:	3130      	adds	r1, #48	; 0x30
 800b18e:	0020      	movs	r0, r4
 800b190:	7031      	strb	r1, [r6, #0]
 800b192:	0039      	movs	r1, r7
 800b194:	9402      	str	r4, [sp, #8]
 800b196:	f7f5 f85d 	bl	8000254 <__divsi3>
 800b19a:	9b02      	ldr	r3, [sp, #8]
 800b19c:	0004      	movs	r4, r0
 800b19e:	2b63      	cmp	r3, #99	; 0x63
 800b1a0:	dcee      	bgt.n	800b180 <__exponent+0x24>
 800b1a2:	9b01      	ldr	r3, [sp, #4]
 800b1a4:	3430      	adds	r4, #48	; 0x30
 800b1a6:	1e9a      	subs	r2, r3, #2
 800b1a8:	0013      	movs	r3, r2
 800b1aa:	9903      	ldr	r1, [sp, #12]
 800b1ac:	7014      	strb	r4, [r2, #0]
 800b1ae:	a804      	add	r0, sp, #16
 800b1b0:	3007      	adds	r0, #7
 800b1b2:	4298      	cmp	r0, r3
 800b1b4:	d80e      	bhi.n	800b1d4 <__exponent+0x78>
 800b1b6:	ab04      	add	r3, sp, #16
 800b1b8:	3307      	adds	r3, #7
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d804      	bhi.n	800b1ca <__exponent+0x6e>
 800b1c0:	ab04      	add	r3, sp, #16
 800b1c2:	3009      	adds	r0, #9
 800b1c4:	18c0      	adds	r0, r0, r3
 800b1c6:	9b01      	ldr	r3, [sp, #4]
 800b1c8:	1ac0      	subs	r0, r0, r3
 800b1ca:	9b03      	ldr	r3, [sp, #12]
 800b1cc:	1818      	adds	r0, r3, r0
 800b1ce:	1b40      	subs	r0, r0, r5
 800b1d0:	b007      	add	sp, #28
 800b1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1d4:	7818      	ldrb	r0, [r3, #0]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	7008      	strb	r0, [r1, #0]
 800b1da:	3101      	adds	r1, #1
 800b1dc:	e7e7      	b.n	800b1ae <__exponent+0x52>
 800b1de:	2330      	movs	r3, #48	; 0x30
 800b1e0:	18e4      	adds	r4, r4, r3
 800b1e2:	70ab      	strb	r3, [r5, #2]
 800b1e4:	1d28      	adds	r0, r5, #4
 800b1e6:	70ec      	strb	r4, [r5, #3]
 800b1e8:	e7f1      	b.n	800b1ce <__exponent+0x72>
	...

0800b1ec <_printf_float>:
 800b1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ee:	b095      	sub	sp, #84	; 0x54
 800b1f0:	000c      	movs	r4, r1
 800b1f2:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f4:	001e      	movs	r6, r3
 800b1f6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b1f8:	0007      	movs	r7, r0
 800b1fa:	f001 fda7 	bl	800cd4c <_localeconv_r>
 800b1fe:	6803      	ldr	r3, [r0, #0]
 800b200:	0018      	movs	r0, r3
 800b202:	930c      	str	r3, [sp, #48]	; 0x30
 800b204:	f7f4 ff80 	bl	8000108 <strlen>
 800b208:	2300      	movs	r3, #0
 800b20a:	9312      	str	r3, [sp, #72]	; 0x48
 800b20c:	7e23      	ldrb	r3, [r4, #24]
 800b20e:	2207      	movs	r2, #7
 800b210:	930a      	str	r3, [sp, #40]	; 0x28
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	900e      	str	r0, [sp, #56]	; 0x38
 800b216:	930d      	str	r3, [sp, #52]	; 0x34
 800b218:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b21a:	682b      	ldr	r3, [r5, #0]
 800b21c:	05c9      	lsls	r1, r1, #23
 800b21e:	d547      	bpl.n	800b2b0 <_printf_float+0xc4>
 800b220:	189b      	adds	r3, r3, r2
 800b222:	4393      	bics	r3, r2
 800b224:	001a      	movs	r2, r3
 800b226:	3208      	adds	r2, #8
 800b228:	602a      	str	r2, [r5, #0]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	64a2      	str	r2, [r4, #72]	; 0x48
 800b230:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b232:	2201      	movs	r2, #1
 800b234:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b236:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b238:	930b      	str	r3, [sp, #44]	; 0x2c
 800b23a:	006b      	lsls	r3, r5, #1
 800b23c:	085b      	lsrs	r3, r3, #1
 800b23e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b240:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b242:	4ba7      	ldr	r3, [pc, #668]	; (800b4e0 <_printf_float+0x2f4>)
 800b244:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b246:	4252      	negs	r2, r2
 800b248:	f7f7 fe72 	bl	8002f30 <__aeabi_dcmpun>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d131      	bne.n	800b2b4 <_printf_float+0xc8>
 800b250:	2201      	movs	r2, #1
 800b252:	4ba3      	ldr	r3, [pc, #652]	; (800b4e0 <_printf_float+0x2f4>)
 800b254:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b256:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b258:	4252      	negs	r2, r2
 800b25a:	f7f5 f907 	bl	800046c <__aeabi_dcmple>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d128      	bne.n	800b2b4 <_printf_float+0xc8>
 800b262:	2200      	movs	r2, #0
 800b264:	2300      	movs	r3, #0
 800b266:	0029      	movs	r1, r5
 800b268:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b26a:	f7f5 f8f5 	bl	8000458 <__aeabi_dcmplt>
 800b26e:	2800      	cmp	r0, #0
 800b270:	d003      	beq.n	800b27a <_printf_float+0x8e>
 800b272:	0023      	movs	r3, r4
 800b274:	222d      	movs	r2, #45	; 0x2d
 800b276:	3343      	adds	r3, #67	; 0x43
 800b278:	701a      	strb	r2, [r3, #0]
 800b27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b27c:	4d99      	ldr	r5, [pc, #612]	; (800b4e4 <_printf_float+0x2f8>)
 800b27e:	2b47      	cmp	r3, #71	; 0x47
 800b280:	d900      	bls.n	800b284 <_printf_float+0x98>
 800b282:	4d99      	ldr	r5, [pc, #612]	; (800b4e8 <_printf_float+0x2fc>)
 800b284:	2303      	movs	r3, #3
 800b286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b288:	6123      	str	r3, [r4, #16]
 800b28a:	3301      	adds	r3, #1
 800b28c:	439a      	bics	r2, r3
 800b28e:	2300      	movs	r3, #0
 800b290:	6022      	str	r2, [r4, #0]
 800b292:	930b      	str	r3, [sp, #44]	; 0x2c
 800b294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b296:	0021      	movs	r1, r4
 800b298:	0038      	movs	r0, r7
 800b29a:	9600      	str	r6, [sp, #0]
 800b29c:	aa13      	add	r2, sp, #76	; 0x4c
 800b29e:	f000 f9e7 	bl	800b670 <_printf_common>
 800b2a2:	1c43      	adds	r3, r0, #1
 800b2a4:	d000      	beq.n	800b2a8 <_printf_float+0xbc>
 800b2a6:	e0a2      	b.n	800b3ee <_printf_float+0x202>
 800b2a8:	2001      	movs	r0, #1
 800b2aa:	4240      	negs	r0, r0
 800b2ac:	b015      	add	sp, #84	; 0x54
 800b2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2b0:	3307      	adds	r3, #7
 800b2b2:	e7b6      	b.n	800b222 <_printf_float+0x36>
 800b2b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2b6:	002b      	movs	r3, r5
 800b2b8:	0010      	movs	r0, r2
 800b2ba:	0029      	movs	r1, r5
 800b2bc:	f7f7 fe38 	bl	8002f30 <__aeabi_dcmpun>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d00b      	beq.n	800b2dc <_printf_float+0xf0>
 800b2c4:	2d00      	cmp	r5, #0
 800b2c6:	da03      	bge.n	800b2d0 <_printf_float+0xe4>
 800b2c8:	0023      	movs	r3, r4
 800b2ca:	222d      	movs	r2, #45	; 0x2d
 800b2cc:	3343      	adds	r3, #67	; 0x43
 800b2ce:	701a      	strb	r2, [r3, #0]
 800b2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2d2:	4d86      	ldr	r5, [pc, #536]	; (800b4ec <_printf_float+0x300>)
 800b2d4:	2b47      	cmp	r3, #71	; 0x47
 800b2d6:	d9d5      	bls.n	800b284 <_printf_float+0x98>
 800b2d8:	4d85      	ldr	r5, [pc, #532]	; (800b4f0 <_printf_float+0x304>)
 800b2da:	e7d3      	b.n	800b284 <_printf_float+0x98>
 800b2dc:	2220      	movs	r2, #32
 800b2de:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b2e0:	6863      	ldr	r3, [r4, #4]
 800b2e2:	4391      	bics	r1, r2
 800b2e4:	910f      	str	r1, [sp, #60]	; 0x3c
 800b2e6:	1c5a      	adds	r2, r3, #1
 800b2e8:	d149      	bne.n	800b37e <_printf_float+0x192>
 800b2ea:	3307      	adds	r3, #7
 800b2ec:	6063      	str	r3, [r4, #4]
 800b2ee:	2380      	movs	r3, #128	; 0x80
 800b2f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2f2:	00db      	lsls	r3, r3, #3
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	9206      	str	r2, [sp, #24]
 800b2fa:	aa12      	add	r2, sp, #72	; 0x48
 800b2fc:	9205      	str	r2, [sp, #20]
 800b2fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b300:	a908      	add	r1, sp, #32
 800b302:	9204      	str	r2, [sp, #16]
 800b304:	aa11      	add	r2, sp, #68	; 0x44
 800b306:	9203      	str	r2, [sp, #12]
 800b308:	2223      	movs	r2, #35	; 0x23
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	9301      	str	r3, [sp, #4]
 800b30e:	6863      	ldr	r3, [r4, #4]
 800b310:	1852      	adds	r2, r2, r1
 800b312:	9202      	str	r2, [sp, #8]
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	0038      	movs	r0, r7
 800b318:	002b      	movs	r3, r5
 800b31a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b31c:	f7ff febb 	bl	800b096 <__cvt>
 800b320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b322:	0005      	movs	r5, r0
 800b324:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b326:	2b47      	cmp	r3, #71	; 0x47
 800b328:	d108      	bne.n	800b33c <_printf_float+0x150>
 800b32a:	1ccb      	adds	r3, r1, #3
 800b32c:	db02      	blt.n	800b334 <_printf_float+0x148>
 800b32e:	6863      	ldr	r3, [r4, #4]
 800b330:	4299      	cmp	r1, r3
 800b332:	dd48      	ble.n	800b3c6 <_printf_float+0x1da>
 800b334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b336:	3b02      	subs	r3, #2
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	930a      	str	r3, [sp, #40]	; 0x28
 800b33c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b33e:	2b65      	cmp	r3, #101	; 0x65
 800b340:	d824      	bhi.n	800b38c <_printf_float+0x1a0>
 800b342:	0020      	movs	r0, r4
 800b344:	001a      	movs	r2, r3
 800b346:	3901      	subs	r1, #1
 800b348:	3050      	adds	r0, #80	; 0x50
 800b34a:	9111      	str	r1, [sp, #68]	; 0x44
 800b34c:	f7ff ff06 	bl	800b15c <__exponent>
 800b350:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b352:	900b      	str	r0, [sp, #44]	; 0x2c
 800b354:	1813      	adds	r3, r2, r0
 800b356:	6123      	str	r3, [r4, #16]
 800b358:	2a01      	cmp	r2, #1
 800b35a:	dc02      	bgt.n	800b362 <_printf_float+0x176>
 800b35c:	6822      	ldr	r2, [r4, #0]
 800b35e:	07d2      	lsls	r2, r2, #31
 800b360:	d501      	bpl.n	800b366 <_printf_float+0x17a>
 800b362:	3301      	adds	r3, #1
 800b364:	6123      	str	r3, [r4, #16]
 800b366:	2323      	movs	r3, #35	; 0x23
 800b368:	aa08      	add	r2, sp, #32
 800b36a:	189b      	adds	r3, r3, r2
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d100      	bne.n	800b374 <_printf_float+0x188>
 800b372:	e78f      	b.n	800b294 <_printf_float+0xa8>
 800b374:	0023      	movs	r3, r4
 800b376:	222d      	movs	r2, #45	; 0x2d
 800b378:	3343      	adds	r3, #67	; 0x43
 800b37a:	701a      	strb	r2, [r3, #0]
 800b37c:	e78a      	b.n	800b294 <_printf_float+0xa8>
 800b37e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b380:	2a47      	cmp	r2, #71	; 0x47
 800b382:	d1b4      	bne.n	800b2ee <_printf_float+0x102>
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1b2      	bne.n	800b2ee <_printf_float+0x102>
 800b388:	3301      	adds	r3, #1
 800b38a:	e7af      	b.n	800b2ec <_printf_float+0x100>
 800b38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b38e:	2b66      	cmp	r3, #102	; 0x66
 800b390:	d11b      	bne.n	800b3ca <_printf_float+0x1de>
 800b392:	6863      	ldr	r3, [r4, #4]
 800b394:	2900      	cmp	r1, #0
 800b396:	dd0d      	ble.n	800b3b4 <_printf_float+0x1c8>
 800b398:	6121      	str	r1, [r4, #16]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d102      	bne.n	800b3a4 <_printf_float+0x1b8>
 800b39e:	6822      	ldr	r2, [r4, #0]
 800b3a0:	07d2      	lsls	r2, r2, #31
 800b3a2:	d502      	bpl.n	800b3aa <_printf_float+0x1be>
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	1859      	adds	r1, r3, r1
 800b3a8:	6121      	str	r1, [r4, #16]
 800b3aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3ac:	65a3      	str	r3, [r4, #88]	; 0x58
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3b2:	e7d8      	b.n	800b366 <_printf_float+0x17a>
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d103      	bne.n	800b3c0 <_printf_float+0x1d4>
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	6821      	ldr	r1, [r4, #0]
 800b3bc:	4211      	tst	r1, r2
 800b3be:	d000      	beq.n	800b3c2 <_printf_float+0x1d6>
 800b3c0:	1c9a      	adds	r2, r3, #2
 800b3c2:	6122      	str	r2, [r4, #16]
 800b3c4:	e7f1      	b.n	800b3aa <_printf_float+0x1be>
 800b3c6:	2367      	movs	r3, #103	; 0x67
 800b3c8:	930a      	str	r3, [sp, #40]	; 0x28
 800b3ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	db06      	blt.n	800b3e0 <_printf_float+0x1f4>
 800b3d2:	6822      	ldr	r2, [r4, #0]
 800b3d4:	6123      	str	r3, [r4, #16]
 800b3d6:	07d2      	lsls	r2, r2, #31
 800b3d8:	d5e7      	bpl.n	800b3aa <_printf_float+0x1be>
 800b3da:	3301      	adds	r3, #1
 800b3dc:	6123      	str	r3, [r4, #16]
 800b3de:	e7e4      	b.n	800b3aa <_printf_float+0x1be>
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	dc01      	bgt.n	800b3ea <_printf_float+0x1fe>
 800b3e6:	1849      	adds	r1, r1, r1
 800b3e8:	1ac9      	subs	r1, r1, r3
 800b3ea:	1852      	adds	r2, r2, r1
 800b3ec:	e7e9      	b.n	800b3c2 <_printf_float+0x1d6>
 800b3ee:	6822      	ldr	r2, [r4, #0]
 800b3f0:	0553      	lsls	r3, r2, #21
 800b3f2:	d407      	bmi.n	800b404 <_printf_float+0x218>
 800b3f4:	6923      	ldr	r3, [r4, #16]
 800b3f6:	002a      	movs	r2, r5
 800b3f8:	0038      	movs	r0, r7
 800b3fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3fc:	47b0      	blx	r6
 800b3fe:	1c43      	adds	r3, r0, #1
 800b400:	d128      	bne.n	800b454 <_printf_float+0x268>
 800b402:	e751      	b.n	800b2a8 <_printf_float+0xbc>
 800b404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b406:	2b65      	cmp	r3, #101	; 0x65
 800b408:	d800      	bhi.n	800b40c <_printf_float+0x220>
 800b40a:	e0e1      	b.n	800b5d0 <_printf_float+0x3e4>
 800b40c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b40e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b410:	2200      	movs	r2, #0
 800b412:	2300      	movs	r3, #0
 800b414:	f7f5 f81a 	bl	800044c <__aeabi_dcmpeq>
 800b418:	2800      	cmp	r0, #0
 800b41a:	d031      	beq.n	800b480 <_printf_float+0x294>
 800b41c:	2301      	movs	r3, #1
 800b41e:	0038      	movs	r0, r7
 800b420:	4a34      	ldr	r2, [pc, #208]	; (800b4f4 <_printf_float+0x308>)
 800b422:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b424:	47b0      	blx	r6
 800b426:	1c43      	adds	r3, r0, #1
 800b428:	d100      	bne.n	800b42c <_printf_float+0x240>
 800b42a:	e73d      	b.n	800b2a8 <_printf_float+0xbc>
 800b42c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b42e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b430:	4293      	cmp	r3, r2
 800b432:	db02      	blt.n	800b43a <_printf_float+0x24e>
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	07db      	lsls	r3, r3, #31
 800b438:	d50c      	bpl.n	800b454 <_printf_float+0x268>
 800b43a:	0038      	movs	r0, r7
 800b43c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b43e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b440:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b442:	47b0      	blx	r6
 800b444:	2500      	movs	r5, #0
 800b446:	1c43      	adds	r3, r0, #1
 800b448:	d100      	bne.n	800b44c <_printf_float+0x260>
 800b44a:	e72d      	b.n	800b2a8 <_printf_float+0xbc>
 800b44c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b44e:	3b01      	subs	r3, #1
 800b450:	42ab      	cmp	r3, r5
 800b452:	dc0a      	bgt.n	800b46a <_printf_float+0x27e>
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	079b      	lsls	r3, r3, #30
 800b458:	d500      	bpl.n	800b45c <_printf_float+0x270>
 800b45a:	e106      	b.n	800b66a <_printf_float+0x47e>
 800b45c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b45e:	68e0      	ldr	r0, [r4, #12]
 800b460:	4298      	cmp	r0, r3
 800b462:	db00      	blt.n	800b466 <_printf_float+0x27a>
 800b464:	e722      	b.n	800b2ac <_printf_float+0xc0>
 800b466:	0018      	movs	r0, r3
 800b468:	e720      	b.n	800b2ac <_printf_float+0xc0>
 800b46a:	0022      	movs	r2, r4
 800b46c:	2301      	movs	r3, #1
 800b46e:	0038      	movs	r0, r7
 800b470:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b472:	321a      	adds	r2, #26
 800b474:	47b0      	blx	r6
 800b476:	1c43      	adds	r3, r0, #1
 800b478:	d100      	bne.n	800b47c <_printf_float+0x290>
 800b47a:	e715      	b.n	800b2a8 <_printf_float+0xbc>
 800b47c:	3501      	adds	r5, #1
 800b47e:	e7e5      	b.n	800b44c <_printf_float+0x260>
 800b480:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b482:	2b00      	cmp	r3, #0
 800b484:	dc38      	bgt.n	800b4f8 <_printf_float+0x30c>
 800b486:	2301      	movs	r3, #1
 800b488:	0038      	movs	r0, r7
 800b48a:	4a1a      	ldr	r2, [pc, #104]	; (800b4f4 <_printf_float+0x308>)
 800b48c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b48e:	47b0      	blx	r6
 800b490:	1c43      	adds	r3, r0, #1
 800b492:	d100      	bne.n	800b496 <_printf_float+0x2aa>
 800b494:	e708      	b.n	800b2a8 <_printf_float+0xbc>
 800b496:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b498:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b49a:	4313      	orrs	r3, r2
 800b49c:	d102      	bne.n	800b4a4 <_printf_float+0x2b8>
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	07db      	lsls	r3, r3, #31
 800b4a2:	d5d7      	bpl.n	800b454 <_printf_float+0x268>
 800b4a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4a6:	0038      	movs	r0, r7
 800b4a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4ac:	47b0      	blx	r6
 800b4ae:	1c43      	adds	r3, r0, #1
 800b4b0:	d100      	bne.n	800b4b4 <_printf_float+0x2c8>
 800b4b2:	e6f9      	b.n	800b2a8 <_printf_float+0xbc>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4bc:	425b      	negs	r3, r3
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	dc01      	bgt.n	800b4c6 <_printf_float+0x2da>
 800b4c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4c4:	e797      	b.n	800b3f6 <_printf_float+0x20a>
 800b4c6:	0022      	movs	r2, r4
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	0038      	movs	r0, r7
 800b4cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4ce:	321a      	adds	r2, #26
 800b4d0:	47b0      	blx	r6
 800b4d2:	1c43      	adds	r3, r0, #1
 800b4d4:	d100      	bne.n	800b4d8 <_printf_float+0x2ec>
 800b4d6:	e6e7      	b.n	800b2a8 <_printf_float+0xbc>
 800b4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4da:	3301      	adds	r3, #1
 800b4dc:	e7eb      	b.n	800b4b6 <_printf_float+0x2ca>
 800b4de:	46c0      	nop			; (mov r8, r8)
 800b4e0:	7fefffff 	.word	0x7fefffff
 800b4e4:	0800eb34 	.word	0x0800eb34
 800b4e8:	0800eb38 	.word	0x0800eb38
 800b4ec:	0800eb3c 	.word	0x0800eb3c
 800b4f0:	0800eb40 	.word	0x0800eb40
 800b4f4:	0800eb44 	.word	0x0800eb44
 800b4f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4fc:	920a      	str	r2, [sp, #40]	; 0x28
 800b4fe:	429a      	cmp	r2, r3
 800b500:	dd00      	ble.n	800b504 <_printf_float+0x318>
 800b502:	930a      	str	r3, [sp, #40]	; 0x28
 800b504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b506:	2b00      	cmp	r3, #0
 800b508:	dc3c      	bgt.n	800b584 <_printf_float+0x398>
 800b50a:	2300      	movs	r3, #0
 800b50c:	930d      	str	r3, [sp, #52]	; 0x34
 800b50e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b510:	43db      	mvns	r3, r3
 800b512:	17db      	asrs	r3, r3, #31
 800b514:	930f      	str	r3, [sp, #60]	; 0x3c
 800b516:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b518:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b51a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b51c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b51e:	4013      	ands	r3, r2
 800b520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b522:	1ad3      	subs	r3, r2, r3
 800b524:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b526:	4293      	cmp	r3, r2
 800b528:	dc34      	bgt.n	800b594 <_printf_float+0x3a8>
 800b52a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b52c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b52e:	4293      	cmp	r3, r2
 800b530:	db3d      	blt.n	800b5ae <_printf_float+0x3c2>
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	07db      	lsls	r3, r3, #31
 800b536:	d43a      	bmi.n	800b5ae <_printf_float+0x3c2>
 800b538:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b53c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	1a52      	subs	r2, r2, r1
 800b542:	920a      	str	r2, [sp, #40]	; 0x28
 800b544:	429a      	cmp	r2, r3
 800b546:	dd00      	ble.n	800b54a <_printf_float+0x35e>
 800b548:	930a      	str	r3, [sp, #40]	; 0x28
 800b54a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	dc36      	bgt.n	800b5be <_printf_float+0x3d2>
 800b550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b552:	2500      	movs	r5, #0
 800b554:	43db      	mvns	r3, r3
 800b556:	17db      	asrs	r3, r3, #31
 800b558:	930b      	str	r3, [sp, #44]	; 0x2c
 800b55a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b55c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b55e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b560:	1a9b      	subs	r3, r3, r2
 800b562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b564:	400a      	ands	r2, r1
 800b566:	1a9b      	subs	r3, r3, r2
 800b568:	42ab      	cmp	r3, r5
 800b56a:	dc00      	bgt.n	800b56e <_printf_float+0x382>
 800b56c:	e772      	b.n	800b454 <_printf_float+0x268>
 800b56e:	0022      	movs	r2, r4
 800b570:	2301      	movs	r3, #1
 800b572:	0038      	movs	r0, r7
 800b574:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b576:	321a      	adds	r2, #26
 800b578:	47b0      	blx	r6
 800b57a:	1c43      	adds	r3, r0, #1
 800b57c:	d100      	bne.n	800b580 <_printf_float+0x394>
 800b57e:	e693      	b.n	800b2a8 <_printf_float+0xbc>
 800b580:	3501      	adds	r5, #1
 800b582:	e7ea      	b.n	800b55a <_printf_float+0x36e>
 800b584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b586:	002a      	movs	r2, r5
 800b588:	0038      	movs	r0, r7
 800b58a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b58c:	47b0      	blx	r6
 800b58e:	1c43      	adds	r3, r0, #1
 800b590:	d1bb      	bne.n	800b50a <_printf_float+0x31e>
 800b592:	e689      	b.n	800b2a8 <_printf_float+0xbc>
 800b594:	0022      	movs	r2, r4
 800b596:	2301      	movs	r3, #1
 800b598:	0038      	movs	r0, r7
 800b59a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b59c:	321a      	adds	r2, #26
 800b59e:	47b0      	blx	r6
 800b5a0:	1c43      	adds	r3, r0, #1
 800b5a2:	d100      	bne.n	800b5a6 <_printf_float+0x3ba>
 800b5a4:	e680      	b.n	800b2a8 <_printf_float+0xbc>
 800b5a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	930d      	str	r3, [sp, #52]	; 0x34
 800b5ac:	e7b3      	b.n	800b516 <_printf_float+0x32a>
 800b5ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5b0:	0038      	movs	r0, r7
 800b5b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5b6:	47b0      	blx	r6
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d1bd      	bne.n	800b538 <_printf_float+0x34c>
 800b5bc:	e674      	b.n	800b2a8 <_printf_float+0xbc>
 800b5be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5c0:	0038      	movs	r0, r7
 800b5c2:	18ea      	adds	r2, r5, r3
 800b5c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c8:	47b0      	blx	r6
 800b5ca:	1c43      	adds	r3, r0, #1
 800b5cc:	d1c0      	bne.n	800b550 <_printf_float+0x364>
 800b5ce:	e66b      	b.n	800b2a8 <_printf_float+0xbc>
 800b5d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	dc02      	bgt.n	800b5dc <_printf_float+0x3f0>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	421a      	tst	r2, r3
 800b5da:	d034      	beq.n	800b646 <_printf_float+0x45a>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	002a      	movs	r2, r5
 800b5e0:	0038      	movs	r0, r7
 800b5e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5e4:	47b0      	blx	r6
 800b5e6:	1c43      	adds	r3, r0, #1
 800b5e8:	d100      	bne.n	800b5ec <_printf_float+0x400>
 800b5ea:	e65d      	b.n	800b2a8 <_printf_float+0xbc>
 800b5ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5ee:	0038      	movs	r0, r7
 800b5f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5f4:	47b0      	blx	r6
 800b5f6:	1c43      	adds	r3, r0, #1
 800b5f8:	d100      	bne.n	800b5fc <_printf_float+0x410>
 800b5fa:	e655      	b.n	800b2a8 <_printf_float+0xbc>
 800b5fc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b5fe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b600:	2200      	movs	r2, #0
 800b602:	2300      	movs	r3, #0
 800b604:	f7f4 ff22 	bl	800044c <__aeabi_dcmpeq>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d11a      	bne.n	800b642 <_printf_float+0x456>
 800b60c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b60e:	1c6a      	adds	r2, r5, #1
 800b610:	3b01      	subs	r3, #1
 800b612:	0038      	movs	r0, r7
 800b614:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b616:	47b0      	blx	r6
 800b618:	1c43      	adds	r3, r0, #1
 800b61a:	d10e      	bne.n	800b63a <_printf_float+0x44e>
 800b61c:	e644      	b.n	800b2a8 <_printf_float+0xbc>
 800b61e:	0022      	movs	r2, r4
 800b620:	2301      	movs	r3, #1
 800b622:	0038      	movs	r0, r7
 800b624:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b626:	321a      	adds	r2, #26
 800b628:	47b0      	blx	r6
 800b62a:	1c43      	adds	r3, r0, #1
 800b62c:	d100      	bne.n	800b630 <_printf_float+0x444>
 800b62e:	e63b      	b.n	800b2a8 <_printf_float+0xbc>
 800b630:	3501      	adds	r5, #1
 800b632:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b634:	3b01      	subs	r3, #1
 800b636:	42ab      	cmp	r3, r5
 800b638:	dcf1      	bgt.n	800b61e <_printf_float+0x432>
 800b63a:	0022      	movs	r2, r4
 800b63c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b63e:	3250      	adds	r2, #80	; 0x50
 800b640:	e6da      	b.n	800b3f8 <_printf_float+0x20c>
 800b642:	2500      	movs	r5, #0
 800b644:	e7f5      	b.n	800b632 <_printf_float+0x446>
 800b646:	002a      	movs	r2, r5
 800b648:	e7e3      	b.n	800b612 <_printf_float+0x426>
 800b64a:	0022      	movs	r2, r4
 800b64c:	2301      	movs	r3, #1
 800b64e:	0038      	movs	r0, r7
 800b650:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b652:	3219      	adds	r2, #25
 800b654:	47b0      	blx	r6
 800b656:	1c43      	adds	r3, r0, #1
 800b658:	d100      	bne.n	800b65c <_printf_float+0x470>
 800b65a:	e625      	b.n	800b2a8 <_printf_float+0xbc>
 800b65c:	3501      	adds	r5, #1
 800b65e:	68e3      	ldr	r3, [r4, #12]
 800b660:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b662:	1a9b      	subs	r3, r3, r2
 800b664:	42ab      	cmp	r3, r5
 800b666:	dcf0      	bgt.n	800b64a <_printf_float+0x45e>
 800b668:	e6f8      	b.n	800b45c <_printf_float+0x270>
 800b66a:	2500      	movs	r5, #0
 800b66c:	e7f7      	b.n	800b65e <_printf_float+0x472>
 800b66e:	46c0      	nop			; (mov r8, r8)

0800b670 <_printf_common>:
 800b670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b672:	0015      	movs	r5, r2
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	688a      	ldr	r2, [r1, #8]
 800b678:	690b      	ldr	r3, [r1, #16]
 800b67a:	000c      	movs	r4, r1
 800b67c:	9000      	str	r0, [sp, #0]
 800b67e:	4293      	cmp	r3, r2
 800b680:	da00      	bge.n	800b684 <_printf_common+0x14>
 800b682:	0013      	movs	r3, r2
 800b684:	0022      	movs	r2, r4
 800b686:	602b      	str	r3, [r5, #0]
 800b688:	3243      	adds	r2, #67	; 0x43
 800b68a:	7812      	ldrb	r2, [r2, #0]
 800b68c:	2a00      	cmp	r2, #0
 800b68e:	d001      	beq.n	800b694 <_printf_common+0x24>
 800b690:	3301      	adds	r3, #1
 800b692:	602b      	str	r3, [r5, #0]
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	069b      	lsls	r3, r3, #26
 800b698:	d502      	bpl.n	800b6a0 <_printf_common+0x30>
 800b69a:	682b      	ldr	r3, [r5, #0]
 800b69c:	3302      	adds	r3, #2
 800b69e:	602b      	str	r3, [r5, #0]
 800b6a0:	6822      	ldr	r2, [r4, #0]
 800b6a2:	2306      	movs	r3, #6
 800b6a4:	0017      	movs	r7, r2
 800b6a6:	401f      	ands	r7, r3
 800b6a8:	421a      	tst	r2, r3
 800b6aa:	d027      	beq.n	800b6fc <_printf_common+0x8c>
 800b6ac:	0023      	movs	r3, r4
 800b6ae:	3343      	adds	r3, #67	; 0x43
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	1e5a      	subs	r2, r3, #1
 800b6b4:	4193      	sbcs	r3, r2
 800b6b6:	6822      	ldr	r2, [r4, #0]
 800b6b8:	0692      	lsls	r2, r2, #26
 800b6ba:	d430      	bmi.n	800b71e <_printf_common+0xae>
 800b6bc:	0022      	movs	r2, r4
 800b6be:	9901      	ldr	r1, [sp, #4]
 800b6c0:	9800      	ldr	r0, [sp, #0]
 800b6c2:	9e08      	ldr	r6, [sp, #32]
 800b6c4:	3243      	adds	r2, #67	; 0x43
 800b6c6:	47b0      	blx	r6
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d025      	beq.n	800b718 <_printf_common+0xa8>
 800b6cc:	2306      	movs	r3, #6
 800b6ce:	6820      	ldr	r0, [r4, #0]
 800b6d0:	682a      	ldr	r2, [r5, #0]
 800b6d2:	68e1      	ldr	r1, [r4, #12]
 800b6d4:	2500      	movs	r5, #0
 800b6d6:	4003      	ands	r3, r0
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	d103      	bne.n	800b6e4 <_printf_common+0x74>
 800b6dc:	1a8d      	subs	r5, r1, r2
 800b6de:	43eb      	mvns	r3, r5
 800b6e0:	17db      	asrs	r3, r3, #31
 800b6e2:	401d      	ands	r5, r3
 800b6e4:	68a3      	ldr	r3, [r4, #8]
 800b6e6:	6922      	ldr	r2, [r4, #16]
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	dd01      	ble.n	800b6f0 <_printf_common+0x80>
 800b6ec:	1a9b      	subs	r3, r3, r2
 800b6ee:	18ed      	adds	r5, r5, r3
 800b6f0:	2700      	movs	r7, #0
 800b6f2:	42bd      	cmp	r5, r7
 800b6f4:	d120      	bne.n	800b738 <_printf_common+0xc8>
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	e010      	b.n	800b71c <_printf_common+0xac>
 800b6fa:	3701      	adds	r7, #1
 800b6fc:	68e3      	ldr	r3, [r4, #12]
 800b6fe:	682a      	ldr	r2, [r5, #0]
 800b700:	1a9b      	subs	r3, r3, r2
 800b702:	42bb      	cmp	r3, r7
 800b704:	ddd2      	ble.n	800b6ac <_printf_common+0x3c>
 800b706:	0022      	movs	r2, r4
 800b708:	2301      	movs	r3, #1
 800b70a:	9901      	ldr	r1, [sp, #4]
 800b70c:	9800      	ldr	r0, [sp, #0]
 800b70e:	9e08      	ldr	r6, [sp, #32]
 800b710:	3219      	adds	r2, #25
 800b712:	47b0      	blx	r6
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	d1f0      	bne.n	800b6fa <_printf_common+0x8a>
 800b718:	2001      	movs	r0, #1
 800b71a:	4240      	negs	r0, r0
 800b71c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b71e:	2030      	movs	r0, #48	; 0x30
 800b720:	18e1      	adds	r1, r4, r3
 800b722:	3143      	adds	r1, #67	; 0x43
 800b724:	7008      	strb	r0, [r1, #0]
 800b726:	0021      	movs	r1, r4
 800b728:	1c5a      	adds	r2, r3, #1
 800b72a:	3145      	adds	r1, #69	; 0x45
 800b72c:	7809      	ldrb	r1, [r1, #0]
 800b72e:	18a2      	adds	r2, r4, r2
 800b730:	3243      	adds	r2, #67	; 0x43
 800b732:	3302      	adds	r3, #2
 800b734:	7011      	strb	r1, [r2, #0]
 800b736:	e7c1      	b.n	800b6bc <_printf_common+0x4c>
 800b738:	0022      	movs	r2, r4
 800b73a:	2301      	movs	r3, #1
 800b73c:	9901      	ldr	r1, [sp, #4]
 800b73e:	9800      	ldr	r0, [sp, #0]
 800b740:	9e08      	ldr	r6, [sp, #32]
 800b742:	321a      	adds	r2, #26
 800b744:	47b0      	blx	r6
 800b746:	1c43      	adds	r3, r0, #1
 800b748:	d0e6      	beq.n	800b718 <_printf_common+0xa8>
 800b74a:	3701      	adds	r7, #1
 800b74c:	e7d1      	b.n	800b6f2 <_printf_common+0x82>
	...

0800b750 <_printf_i>:
 800b750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b752:	b08b      	sub	sp, #44	; 0x2c
 800b754:	9206      	str	r2, [sp, #24]
 800b756:	000a      	movs	r2, r1
 800b758:	3243      	adds	r2, #67	; 0x43
 800b75a:	9307      	str	r3, [sp, #28]
 800b75c:	9005      	str	r0, [sp, #20]
 800b75e:	9204      	str	r2, [sp, #16]
 800b760:	7e0a      	ldrb	r2, [r1, #24]
 800b762:	000c      	movs	r4, r1
 800b764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b766:	2a78      	cmp	r2, #120	; 0x78
 800b768:	d807      	bhi.n	800b77a <_printf_i+0x2a>
 800b76a:	2a62      	cmp	r2, #98	; 0x62
 800b76c:	d809      	bhi.n	800b782 <_printf_i+0x32>
 800b76e:	2a00      	cmp	r2, #0
 800b770:	d100      	bne.n	800b774 <_printf_i+0x24>
 800b772:	e0c1      	b.n	800b8f8 <_printf_i+0x1a8>
 800b774:	2a58      	cmp	r2, #88	; 0x58
 800b776:	d100      	bne.n	800b77a <_printf_i+0x2a>
 800b778:	e08c      	b.n	800b894 <_printf_i+0x144>
 800b77a:	0026      	movs	r6, r4
 800b77c:	3642      	adds	r6, #66	; 0x42
 800b77e:	7032      	strb	r2, [r6, #0]
 800b780:	e022      	b.n	800b7c8 <_printf_i+0x78>
 800b782:	0010      	movs	r0, r2
 800b784:	3863      	subs	r0, #99	; 0x63
 800b786:	2815      	cmp	r0, #21
 800b788:	d8f7      	bhi.n	800b77a <_printf_i+0x2a>
 800b78a:	f7f4 fccf 	bl	800012c <__gnu_thumb1_case_shi>
 800b78e:	0016      	.short	0x0016
 800b790:	fff6001f 	.word	0xfff6001f
 800b794:	fff6fff6 	.word	0xfff6fff6
 800b798:	001ffff6 	.word	0x001ffff6
 800b79c:	fff6fff6 	.word	0xfff6fff6
 800b7a0:	fff6fff6 	.word	0xfff6fff6
 800b7a4:	003600a8 	.word	0x003600a8
 800b7a8:	fff6009a 	.word	0xfff6009a
 800b7ac:	00b9fff6 	.word	0x00b9fff6
 800b7b0:	0036fff6 	.word	0x0036fff6
 800b7b4:	fff6fff6 	.word	0xfff6fff6
 800b7b8:	009e      	.short	0x009e
 800b7ba:	0026      	movs	r6, r4
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	3642      	adds	r6, #66	; 0x42
 800b7c0:	1d11      	adds	r1, r2, #4
 800b7c2:	6019      	str	r1, [r3, #0]
 800b7c4:	6813      	ldr	r3, [r2, #0]
 800b7c6:	7033      	strb	r3, [r6, #0]
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e0a7      	b.n	800b91c <_printf_i+0x1cc>
 800b7cc:	6808      	ldr	r0, [r1, #0]
 800b7ce:	6819      	ldr	r1, [r3, #0]
 800b7d0:	1d0a      	adds	r2, r1, #4
 800b7d2:	0605      	lsls	r5, r0, #24
 800b7d4:	d50b      	bpl.n	800b7ee <_printf_i+0x9e>
 800b7d6:	680d      	ldr	r5, [r1, #0]
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	2d00      	cmp	r5, #0
 800b7dc:	da03      	bge.n	800b7e6 <_printf_i+0x96>
 800b7de:	232d      	movs	r3, #45	; 0x2d
 800b7e0:	9a04      	ldr	r2, [sp, #16]
 800b7e2:	426d      	negs	r5, r5
 800b7e4:	7013      	strb	r3, [r2, #0]
 800b7e6:	4b61      	ldr	r3, [pc, #388]	; (800b96c <_printf_i+0x21c>)
 800b7e8:	270a      	movs	r7, #10
 800b7ea:	9303      	str	r3, [sp, #12]
 800b7ec:	e01b      	b.n	800b826 <_printf_i+0xd6>
 800b7ee:	680d      	ldr	r5, [r1, #0]
 800b7f0:	601a      	str	r2, [r3, #0]
 800b7f2:	0641      	lsls	r1, r0, #25
 800b7f4:	d5f1      	bpl.n	800b7da <_printf_i+0x8a>
 800b7f6:	b22d      	sxth	r5, r5
 800b7f8:	e7ef      	b.n	800b7da <_printf_i+0x8a>
 800b7fa:	680d      	ldr	r5, [r1, #0]
 800b7fc:	6819      	ldr	r1, [r3, #0]
 800b7fe:	1d08      	adds	r0, r1, #4
 800b800:	6018      	str	r0, [r3, #0]
 800b802:	062e      	lsls	r6, r5, #24
 800b804:	d501      	bpl.n	800b80a <_printf_i+0xba>
 800b806:	680d      	ldr	r5, [r1, #0]
 800b808:	e003      	b.n	800b812 <_printf_i+0xc2>
 800b80a:	066d      	lsls	r5, r5, #25
 800b80c:	d5fb      	bpl.n	800b806 <_printf_i+0xb6>
 800b80e:	680d      	ldr	r5, [r1, #0]
 800b810:	b2ad      	uxth	r5, r5
 800b812:	4b56      	ldr	r3, [pc, #344]	; (800b96c <_printf_i+0x21c>)
 800b814:	2708      	movs	r7, #8
 800b816:	9303      	str	r3, [sp, #12]
 800b818:	2a6f      	cmp	r2, #111	; 0x6f
 800b81a:	d000      	beq.n	800b81e <_printf_i+0xce>
 800b81c:	3702      	adds	r7, #2
 800b81e:	0023      	movs	r3, r4
 800b820:	2200      	movs	r2, #0
 800b822:	3343      	adds	r3, #67	; 0x43
 800b824:	701a      	strb	r2, [r3, #0]
 800b826:	6863      	ldr	r3, [r4, #4]
 800b828:	60a3      	str	r3, [r4, #8]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	db03      	blt.n	800b836 <_printf_i+0xe6>
 800b82e:	2204      	movs	r2, #4
 800b830:	6821      	ldr	r1, [r4, #0]
 800b832:	4391      	bics	r1, r2
 800b834:	6021      	str	r1, [r4, #0]
 800b836:	2d00      	cmp	r5, #0
 800b838:	d102      	bne.n	800b840 <_printf_i+0xf0>
 800b83a:	9e04      	ldr	r6, [sp, #16]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00c      	beq.n	800b85a <_printf_i+0x10a>
 800b840:	9e04      	ldr	r6, [sp, #16]
 800b842:	0028      	movs	r0, r5
 800b844:	0039      	movs	r1, r7
 800b846:	f7f4 fd01 	bl	800024c <__aeabi_uidivmod>
 800b84a:	9b03      	ldr	r3, [sp, #12]
 800b84c:	3e01      	subs	r6, #1
 800b84e:	5c5b      	ldrb	r3, [r3, r1]
 800b850:	7033      	strb	r3, [r6, #0]
 800b852:	002b      	movs	r3, r5
 800b854:	0005      	movs	r5, r0
 800b856:	429f      	cmp	r7, r3
 800b858:	d9f3      	bls.n	800b842 <_printf_i+0xf2>
 800b85a:	2f08      	cmp	r7, #8
 800b85c:	d109      	bne.n	800b872 <_printf_i+0x122>
 800b85e:	6823      	ldr	r3, [r4, #0]
 800b860:	07db      	lsls	r3, r3, #31
 800b862:	d506      	bpl.n	800b872 <_printf_i+0x122>
 800b864:	6863      	ldr	r3, [r4, #4]
 800b866:	6922      	ldr	r2, [r4, #16]
 800b868:	4293      	cmp	r3, r2
 800b86a:	dc02      	bgt.n	800b872 <_printf_i+0x122>
 800b86c:	2330      	movs	r3, #48	; 0x30
 800b86e:	3e01      	subs	r6, #1
 800b870:	7033      	strb	r3, [r6, #0]
 800b872:	9b04      	ldr	r3, [sp, #16]
 800b874:	1b9b      	subs	r3, r3, r6
 800b876:	6123      	str	r3, [r4, #16]
 800b878:	9b07      	ldr	r3, [sp, #28]
 800b87a:	0021      	movs	r1, r4
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	9805      	ldr	r0, [sp, #20]
 800b880:	9b06      	ldr	r3, [sp, #24]
 800b882:	aa09      	add	r2, sp, #36	; 0x24
 800b884:	f7ff fef4 	bl	800b670 <_printf_common>
 800b888:	1c43      	adds	r3, r0, #1
 800b88a:	d14c      	bne.n	800b926 <_printf_i+0x1d6>
 800b88c:	2001      	movs	r0, #1
 800b88e:	4240      	negs	r0, r0
 800b890:	b00b      	add	sp, #44	; 0x2c
 800b892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b894:	3145      	adds	r1, #69	; 0x45
 800b896:	700a      	strb	r2, [r1, #0]
 800b898:	4a34      	ldr	r2, [pc, #208]	; (800b96c <_printf_i+0x21c>)
 800b89a:	9203      	str	r2, [sp, #12]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	6821      	ldr	r1, [r4, #0]
 800b8a0:	ca20      	ldmia	r2!, {r5}
 800b8a2:	601a      	str	r2, [r3, #0]
 800b8a4:	0608      	lsls	r0, r1, #24
 800b8a6:	d516      	bpl.n	800b8d6 <_printf_i+0x186>
 800b8a8:	07cb      	lsls	r3, r1, #31
 800b8aa:	d502      	bpl.n	800b8b2 <_printf_i+0x162>
 800b8ac:	2320      	movs	r3, #32
 800b8ae:	4319      	orrs	r1, r3
 800b8b0:	6021      	str	r1, [r4, #0]
 800b8b2:	2710      	movs	r7, #16
 800b8b4:	2d00      	cmp	r5, #0
 800b8b6:	d1b2      	bne.n	800b81e <_printf_i+0xce>
 800b8b8:	2320      	movs	r3, #32
 800b8ba:	6822      	ldr	r2, [r4, #0]
 800b8bc:	439a      	bics	r2, r3
 800b8be:	6022      	str	r2, [r4, #0]
 800b8c0:	e7ad      	b.n	800b81e <_printf_i+0xce>
 800b8c2:	2220      	movs	r2, #32
 800b8c4:	6809      	ldr	r1, [r1, #0]
 800b8c6:	430a      	orrs	r2, r1
 800b8c8:	6022      	str	r2, [r4, #0]
 800b8ca:	0022      	movs	r2, r4
 800b8cc:	2178      	movs	r1, #120	; 0x78
 800b8ce:	3245      	adds	r2, #69	; 0x45
 800b8d0:	7011      	strb	r1, [r2, #0]
 800b8d2:	4a27      	ldr	r2, [pc, #156]	; (800b970 <_printf_i+0x220>)
 800b8d4:	e7e1      	b.n	800b89a <_printf_i+0x14a>
 800b8d6:	0648      	lsls	r0, r1, #25
 800b8d8:	d5e6      	bpl.n	800b8a8 <_printf_i+0x158>
 800b8da:	b2ad      	uxth	r5, r5
 800b8dc:	e7e4      	b.n	800b8a8 <_printf_i+0x158>
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	680d      	ldr	r5, [r1, #0]
 800b8e2:	1d10      	adds	r0, r2, #4
 800b8e4:	6949      	ldr	r1, [r1, #20]
 800b8e6:	6018      	str	r0, [r3, #0]
 800b8e8:	6813      	ldr	r3, [r2, #0]
 800b8ea:	062e      	lsls	r6, r5, #24
 800b8ec:	d501      	bpl.n	800b8f2 <_printf_i+0x1a2>
 800b8ee:	6019      	str	r1, [r3, #0]
 800b8f0:	e002      	b.n	800b8f8 <_printf_i+0x1a8>
 800b8f2:	066d      	lsls	r5, r5, #25
 800b8f4:	d5fb      	bpl.n	800b8ee <_printf_i+0x19e>
 800b8f6:	8019      	strh	r1, [r3, #0]
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	9e04      	ldr	r6, [sp, #16]
 800b8fc:	6123      	str	r3, [r4, #16]
 800b8fe:	e7bb      	b.n	800b878 <_printf_i+0x128>
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	1d11      	adds	r1, r2, #4
 800b904:	6019      	str	r1, [r3, #0]
 800b906:	6816      	ldr	r6, [r2, #0]
 800b908:	2100      	movs	r1, #0
 800b90a:	0030      	movs	r0, r6
 800b90c:	6862      	ldr	r2, [r4, #4]
 800b90e:	f001 fa9b 	bl	800ce48 <memchr>
 800b912:	2800      	cmp	r0, #0
 800b914:	d001      	beq.n	800b91a <_printf_i+0x1ca>
 800b916:	1b80      	subs	r0, r0, r6
 800b918:	6060      	str	r0, [r4, #4]
 800b91a:	6863      	ldr	r3, [r4, #4]
 800b91c:	6123      	str	r3, [r4, #16]
 800b91e:	2300      	movs	r3, #0
 800b920:	9a04      	ldr	r2, [sp, #16]
 800b922:	7013      	strb	r3, [r2, #0]
 800b924:	e7a8      	b.n	800b878 <_printf_i+0x128>
 800b926:	6923      	ldr	r3, [r4, #16]
 800b928:	0032      	movs	r2, r6
 800b92a:	9906      	ldr	r1, [sp, #24]
 800b92c:	9805      	ldr	r0, [sp, #20]
 800b92e:	9d07      	ldr	r5, [sp, #28]
 800b930:	47a8      	blx	r5
 800b932:	1c43      	adds	r3, r0, #1
 800b934:	d0aa      	beq.n	800b88c <_printf_i+0x13c>
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	079b      	lsls	r3, r3, #30
 800b93a:	d415      	bmi.n	800b968 <_printf_i+0x218>
 800b93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b93e:	68e0      	ldr	r0, [r4, #12]
 800b940:	4298      	cmp	r0, r3
 800b942:	daa5      	bge.n	800b890 <_printf_i+0x140>
 800b944:	0018      	movs	r0, r3
 800b946:	e7a3      	b.n	800b890 <_printf_i+0x140>
 800b948:	0022      	movs	r2, r4
 800b94a:	2301      	movs	r3, #1
 800b94c:	9906      	ldr	r1, [sp, #24]
 800b94e:	9805      	ldr	r0, [sp, #20]
 800b950:	9e07      	ldr	r6, [sp, #28]
 800b952:	3219      	adds	r2, #25
 800b954:	47b0      	blx	r6
 800b956:	1c43      	adds	r3, r0, #1
 800b958:	d098      	beq.n	800b88c <_printf_i+0x13c>
 800b95a:	3501      	adds	r5, #1
 800b95c:	68e3      	ldr	r3, [r4, #12]
 800b95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b960:	1a9b      	subs	r3, r3, r2
 800b962:	42ab      	cmp	r3, r5
 800b964:	dcf0      	bgt.n	800b948 <_printf_i+0x1f8>
 800b966:	e7e9      	b.n	800b93c <_printf_i+0x1ec>
 800b968:	2500      	movs	r5, #0
 800b96a:	e7f7      	b.n	800b95c <_printf_i+0x20c>
 800b96c:	0800eb46 	.word	0x0800eb46
 800b970:	0800eb57 	.word	0x0800eb57

0800b974 <iprintf>:
 800b974:	b40f      	push	{r0, r1, r2, r3}
 800b976:	4b0b      	ldr	r3, [pc, #44]	; (800b9a4 <iprintf+0x30>)
 800b978:	b513      	push	{r0, r1, r4, lr}
 800b97a:	681c      	ldr	r4, [r3, #0]
 800b97c:	2c00      	cmp	r4, #0
 800b97e:	d005      	beq.n	800b98c <iprintf+0x18>
 800b980:	69a3      	ldr	r3, [r4, #24]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d102      	bne.n	800b98c <iprintf+0x18>
 800b986:	0020      	movs	r0, r4
 800b988:	f001 f940 	bl	800cc0c <__sinit>
 800b98c:	ab05      	add	r3, sp, #20
 800b98e:	0020      	movs	r0, r4
 800b990:	9a04      	ldr	r2, [sp, #16]
 800b992:	68a1      	ldr	r1, [r4, #8]
 800b994:	9301      	str	r3, [sp, #4]
 800b996:	f001 ff35 	bl	800d804 <_vfiprintf_r>
 800b99a:	bc16      	pop	{r1, r2, r4}
 800b99c:	bc08      	pop	{r3}
 800b99e:	b004      	add	sp, #16
 800b9a0:	4718      	bx	r3
 800b9a2:	46c0      	nop			; (mov r8, r8)
 800b9a4:	20000068 	.word	0x20000068

0800b9a8 <putchar>:
 800b9a8:	4b08      	ldr	r3, [pc, #32]	; (800b9cc <putchar+0x24>)
 800b9aa:	b570      	push	{r4, r5, r6, lr}
 800b9ac:	681c      	ldr	r4, [r3, #0]
 800b9ae:	0005      	movs	r5, r0
 800b9b0:	2c00      	cmp	r4, #0
 800b9b2:	d005      	beq.n	800b9c0 <putchar+0x18>
 800b9b4:	69a3      	ldr	r3, [r4, #24]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d102      	bne.n	800b9c0 <putchar+0x18>
 800b9ba:	0020      	movs	r0, r4
 800b9bc:	f001 f926 	bl	800cc0c <__sinit>
 800b9c0:	0029      	movs	r1, r5
 800b9c2:	0020      	movs	r0, r4
 800b9c4:	68a2      	ldr	r2, [r4, #8]
 800b9c6:	f002 f857 	bl	800da78 <_putc_r>
 800b9ca:	bd70      	pop	{r4, r5, r6, pc}
 800b9cc:	20000068 	.word	0x20000068

0800b9d0 <_puts_r>:
 800b9d0:	b570      	push	{r4, r5, r6, lr}
 800b9d2:	0005      	movs	r5, r0
 800b9d4:	000e      	movs	r6, r1
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d004      	beq.n	800b9e4 <_puts_r+0x14>
 800b9da:	6983      	ldr	r3, [r0, #24]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d101      	bne.n	800b9e4 <_puts_r+0x14>
 800b9e0:	f001 f914 	bl	800cc0c <__sinit>
 800b9e4:	69ab      	ldr	r3, [r5, #24]
 800b9e6:	68ac      	ldr	r4, [r5, #8]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d102      	bne.n	800b9f2 <_puts_r+0x22>
 800b9ec:	0028      	movs	r0, r5
 800b9ee:	f001 f90d 	bl	800cc0c <__sinit>
 800b9f2:	4b2d      	ldr	r3, [pc, #180]	; (800baa8 <_puts_r+0xd8>)
 800b9f4:	429c      	cmp	r4, r3
 800b9f6:	d122      	bne.n	800ba3e <_puts_r+0x6e>
 800b9f8:	686c      	ldr	r4, [r5, #4]
 800b9fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9fc:	07db      	lsls	r3, r3, #31
 800b9fe:	d405      	bmi.n	800ba0c <_puts_r+0x3c>
 800ba00:	89a3      	ldrh	r3, [r4, #12]
 800ba02:	059b      	lsls	r3, r3, #22
 800ba04:	d402      	bmi.n	800ba0c <_puts_r+0x3c>
 800ba06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba08:	f001 f9a5 	bl	800cd56 <__retarget_lock_acquire_recursive>
 800ba0c:	89a3      	ldrh	r3, [r4, #12]
 800ba0e:	071b      	lsls	r3, r3, #28
 800ba10:	d502      	bpl.n	800ba18 <_puts_r+0x48>
 800ba12:	6923      	ldr	r3, [r4, #16]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d129      	bne.n	800ba6c <_puts_r+0x9c>
 800ba18:	0021      	movs	r1, r4
 800ba1a:	0028      	movs	r0, r5
 800ba1c:	f000 f8aa 	bl	800bb74 <__swsetup_r>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d023      	beq.n	800ba6c <_puts_r+0x9c>
 800ba24:	2501      	movs	r5, #1
 800ba26:	426d      	negs	r5, r5
 800ba28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba2a:	07db      	lsls	r3, r3, #31
 800ba2c:	d405      	bmi.n	800ba3a <_puts_r+0x6a>
 800ba2e:	89a3      	ldrh	r3, [r4, #12]
 800ba30:	059b      	lsls	r3, r3, #22
 800ba32:	d402      	bmi.n	800ba3a <_puts_r+0x6a>
 800ba34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba36:	f001 f98f 	bl	800cd58 <__retarget_lock_release_recursive>
 800ba3a:	0028      	movs	r0, r5
 800ba3c:	bd70      	pop	{r4, r5, r6, pc}
 800ba3e:	4b1b      	ldr	r3, [pc, #108]	; (800baac <_puts_r+0xdc>)
 800ba40:	429c      	cmp	r4, r3
 800ba42:	d101      	bne.n	800ba48 <_puts_r+0x78>
 800ba44:	68ac      	ldr	r4, [r5, #8]
 800ba46:	e7d8      	b.n	800b9fa <_puts_r+0x2a>
 800ba48:	4b19      	ldr	r3, [pc, #100]	; (800bab0 <_puts_r+0xe0>)
 800ba4a:	429c      	cmp	r4, r3
 800ba4c:	d1d5      	bne.n	800b9fa <_puts_r+0x2a>
 800ba4e:	68ec      	ldr	r4, [r5, #12]
 800ba50:	e7d3      	b.n	800b9fa <_puts_r+0x2a>
 800ba52:	3601      	adds	r6, #1
 800ba54:	60a3      	str	r3, [r4, #8]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	da04      	bge.n	800ba64 <_puts_r+0x94>
 800ba5a:	69a2      	ldr	r2, [r4, #24]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	dc16      	bgt.n	800ba8e <_puts_r+0xbe>
 800ba60:	290a      	cmp	r1, #10
 800ba62:	d014      	beq.n	800ba8e <_puts_r+0xbe>
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	1c5a      	adds	r2, r3, #1
 800ba68:	6022      	str	r2, [r4, #0]
 800ba6a:	7019      	strb	r1, [r3, #0]
 800ba6c:	68a3      	ldr	r3, [r4, #8]
 800ba6e:	7831      	ldrb	r1, [r6, #0]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	2900      	cmp	r1, #0
 800ba74:	d1ed      	bne.n	800ba52 <_puts_r+0x82>
 800ba76:	60a3      	str	r3, [r4, #8]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	da0f      	bge.n	800ba9c <_puts_r+0xcc>
 800ba7c:	0028      	movs	r0, r5
 800ba7e:	0022      	movs	r2, r4
 800ba80:	310a      	adds	r1, #10
 800ba82:	f000 f821 	bl	800bac8 <__swbuf_r>
 800ba86:	250a      	movs	r5, #10
 800ba88:	1c43      	adds	r3, r0, #1
 800ba8a:	d1cd      	bne.n	800ba28 <_puts_r+0x58>
 800ba8c:	e7ca      	b.n	800ba24 <_puts_r+0x54>
 800ba8e:	0022      	movs	r2, r4
 800ba90:	0028      	movs	r0, r5
 800ba92:	f000 f819 	bl	800bac8 <__swbuf_r>
 800ba96:	1c43      	adds	r3, r0, #1
 800ba98:	d1e8      	bne.n	800ba6c <_puts_r+0x9c>
 800ba9a:	e7c3      	b.n	800ba24 <_puts_r+0x54>
 800ba9c:	250a      	movs	r5, #10
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	1c5a      	adds	r2, r3, #1
 800baa2:	6022      	str	r2, [r4, #0]
 800baa4:	701d      	strb	r5, [r3, #0]
 800baa6:	e7bf      	b.n	800ba28 <_puts_r+0x58>
 800baa8:	0800ec18 	.word	0x0800ec18
 800baac:	0800ec38 	.word	0x0800ec38
 800bab0:	0800ebf8 	.word	0x0800ebf8

0800bab4 <puts>:
 800bab4:	b510      	push	{r4, lr}
 800bab6:	4b03      	ldr	r3, [pc, #12]	; (800bac4 <puts+0x10>)
 800bab8:	0001      	movs	r1, r0
 800baba:	6818      	ldr	r0, [r3, #0]
 800babc:	f7ff ff88 	bl	800b9d0 <_puts_r>
 800bac0:	bd10      	pop	{r4, pc}
 800bac2:	46c0      	nop			; (mov r8, r8)
 800bac4:	20000068 	.word	0x20000068

0800bac8 <__swbuf_r>:
 800bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baca:	0005      	movs	r5, r0
 800bacc:	000e      	movs	r6, r1
 800bace:	0014      	movs	r4, r2
 800bad0:	2800      	cmp	r0, #0
 800bad2:	d004      	beq.n	800bade <__swbuf_r+0x16>
 800bad4:	6983      	ldr	r3, [r0, #24]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d101      	bne.n	800bade <__swbuf_r+0x16>
 800bada:	f001 f897 	bl	800cc0c <__sinit>
 800bade:	4b22      	ldr	r3, [pc, #136]	; (800bb68 <__swbuf_r+0xa0>)
 800bae0:	429c      	cmp	r4, r3
 800bae2:	d12e      	bne.n	800bb42 <__swbuf_r+0x7a>
 800bae4:	686c      	ldr	r4, [r5, #4]
 800bae6:	69a3      	ldr	r3, [r4, #24]
 800bae8:	60a3      	str	r3, [r4, #8]
 800baea:	89a3      	ldrh	r3, [r4, #12]
 800baec:	071b      	lsls	r3, r3, #28
 800baee:	d532      	bpl.n	800bb56 <__swbuf_r+0x8e>
 800baf0:	6923      	ldr	r3, [r4, #16]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d02f      	beq.n	800bb56 <__swbuf_r+0x8e>
 800baf6:	6823      	ldr	r3, [r4, #0]
 800baf8:	6922      	ldr	r2, [r4, #16]
 800bafa:	b2f7      	uxtb	r7, r6
 800bafc:	1a98      	subs	r0, r3, r2
 800bafe:	6963      	ldr	r3, [r4, #20]
 800bb00:	b2f6      	uxtb	r6, r6
 800bb02:	4283      	cmp	r3, r0
 800bb04:	dc05      	bgt.n	800bb12 <__swbuf_r+0x4a>
 800bb06:	0021      	movs	r1, r4
 800bb08:	0028      	movs	r0, r5
 800bb0a:	f000 ffdd 	bl	800cac8 <_fflush_r>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d127      	bne.n	800bb62 <__swbuf_r+0x9a>
 800bb12:	68a3      	ldr	r3, [r4, #8]
 800bb14:	3001      	adds	r0, #1
 800bb16:	3b01      	subs	r3, #1
 800bb18:	60a3      	str	r3, [r4, #8]
 800bb1a:	6823      	ldr	r3, [r4, #0]
 800bb1c:	1c5a      	adds	r2, r3, #1
 800bb1e:	6022      	str	r2, [r4, #0]
 800bb20:	701f      	strb	r7, [r3, #0]
 800bb22:	6963      	ldr	r3, [r4, #20]
 800bb24:	4283      	cmp	r3, r0
 800bb26:	d004      	beq.n	800bb32 <__swbuf_r+0x6a>
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	07db      	lsls	r3, r3, #31
 800bb2c:	d507      	bpl.n	800bb3e <__swbuf_r+0x76>
 800bb2e:	2e0a      	cmp	r6, #10
 800bb30:	d105      	bne.n	800bb3e <__swbuf_r+0x76>
 800bb32:	0021      	movs	r1, r4
 800bb34:	0028      	movs	r0, r5
 800bb36:	f000 ffc7 	bl	800cac8 <_fflush_r>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d111      	bne.n	800bb62 <__swbuf_r+0x9a>
 800bb3e:	0030      	movs	r0, r6
 800bb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb42:	4b0a      	ldr	r3, [pc, #40]	; (800bb6c <__swbuf_r+0xa4>)
 800bb44:	429c      	cmp	r4, r3
 800bb46:	d101      	bne.n	800bb4c <__swbuf_r+0x84>
 800bb48:	68ac      	ldr	r4, [r5, #8]
 800bb4a:	e7cc      	b.n	800bae6 <__swbuf_r+0x1e>
 800bb4c:	4b08      	ldr	r3, [pc, #32]	; (800bb70 <__swbuf_r+0xa8>)
 800bb4e:	429c      	cmp	r4, r3
 800bb50:	d1c9      	bne.n	800bae6 <__swbuf_r+0x1e>
 800bb52:	68ec      	ldr	r4, [r5, #12]
 800bb54:	e7c7      	b.n	800bae6 <__swbuf_r+0x1e>
 800bb56:	0021      	movs	r1, r4
 800bb58:	0028      	movs	r0, r5
 800bb5a:	f000 f80b 	bl	800bb74 <__swsetup_r>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d0c9      	beq.n	800baf6 <__swbuf_r+0x2e>
 800bb62:	2601      	movs	r6, #1
 800bb64:	4276      	negs	r6, r6
 800bb66:	e7ea      	b.n	800bb3e <__swbuf_r+0x76>
 800bb68:	0800ec18 	.word	0x0800ec18
 800bb6c:	0800ec38 	.word	0x0800ec38
 800bb70:	0800ebf8 	.word	0x0800ebf8

0800bb74 <__swsetup_r>:
 800bb74:	4b37      	ldr	r3, [pc, #220]	; (800bc54 <__swsetup_r+0xe0>)
 800bb76:	b570      	push	{r4, r5, r6, lr}
 800bb78:	681d      	ldr	r5, [r3, #0]
 800bb7a:	0006      	movs	r6, r0
 800bb7c:	000c      	movs	r4, r1
 800bb7e:	2d00      	cmp	r5, #0
 800bb80:	d005      	beq.n	800bb8e <__swsetup_r+0x1a>
 800bb82:	69ab      	ldr	r3, [r5, #24]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d102      	bne.n	800bb8e <__swsetup_r+0x1a>
 800bb88:	0028      	movs	r0, r5
 800bb8a:	f001 f83f 	bl	800cc0c <__sinit>
 800bb8e:	4b32      	ldr	r3, [pc, #200]	; (800bc58 <__swsetup_r+0xe4>)
 800bb90:	429c      	cmp	r4, r3
 800bb92:	d10f      	bne.n	800bbb4 <__swsetup_r+0x40>
 800bb94:	686c      	ldr	r4, [r5, #4]
 800bb96:	230c      	movs	r3, #12
 800bb98:	5ee2      	ldrsh	r2, [r4, r3]
 800bb9a:	b293      	uxth	r3, r2
 800bb9c:	0711      	lsls	r1, r2, #28
 800bb9e:	d42d      	bmi.n	800bbfc <__swsetup_r+0x88>
 800bba0:	06d9      	lsls	r1, r3, #27
 800bba2:	d411      	bmi.n	800bbc8 <__swsetup_r+0x54>
 800bba4:	2309      	movs	r3, #9
 800bba6:	2001      	movs	r0, #1
 800bba8:	6033      	str	r3, [r6, #0]
 800bbaa:	3337      	adds	r3, #55	; 0x37
 800bbac:	4313      	orrs	r3, r2
 800bbae:	81a3      	strh	r3, [r4, #12]
 800bbb0:	4240      	negs	r0, r0
 800bbb2:	bd70      	pop	{r4, r5, r6, pc}
 800bbb4:	4b29      	ldr	r3, [pc, #164]	; (800bc5c <__swsetup_r+0xe8>)
 800bbb6:	429c      	cmp	r4, r3
 800bbb8:	d101      	bne.n	800bbbe <__swsetup_r+0x4a>
 800bbba:	68ac      	ldr	r4, [r5, #8]
 800bbbc:	e7eb      	b.n	800bb96 <__swsetup_r+0x22>
 800bbbe:	4b28      	ldr	r3, [pc, #160]	; (800bc60 <__swsetup_r+0xec>)
 800bbc0:	429c      	cmp	r4, r3
 800bbc2:	d1e8      	bne.n	800bb96 <__swsetup_r+0x22>
 800bbc4:	68ec      	ldr	r4, [r5, #12]
 800bbc6:	e7e6      	b.n	800bb96 <__swsetup_r+0x22>
 800bbc8:	075b      	lsls	r3, r3, #29
 800bbca:	d513      	bpl.n	800bbf4 <__swsetup_r+0x80>
 800bbcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbce:	2900      	cmp	r1, #0
 800bbd0:	d008      	beq.n	800bbe4 <__swsetup_r+0x70>
 800bbd2:	0023      	movs	r3, r4
 800bbd4:	3344      	adds	r3, #68	; 0x44
 800bbd6:	4299      	cmp	r1, r3
 800bbd8:	d002      	beq.n	800bbe0 <__swsetup_r+0x6c>
 800bbda:	0030      	movs	r0, r6
 800bbdc:	f001 fd08 	bl	800d5f0 <_free_r>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	6363      	str	r3, [r4, #52]	; 0x34
 800bbe4:	2224      	movs	r2, #36	; 0x24
 800bbe6:	89a3      	ldrh	r3, [r4, #12]
 800bbe8:	4393      	bics	r3, r2
 800bbea:	81a3      	strh	r3, [r4, #12]
 800bbec:	2300      	movs	r3, #0
 800bbee:	6063      	str	r3, [r4, #4]
 800bbf0:	6923      	ldr	r3, [r4, #16]
 800bbf2:	6023      	str	r3, [r4, #0]
 800bbf4:	2308      	movs	r3, #8
 800bbf6:	89a2      	ldrh	r2, [r4, #12]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	81a3      	strh	r3, [r4, #12]
 800bbfc:	6923      	ldr	r3, [r4, #16]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10b      	bne.n	800bc1a <__swsetup_r+0xa6>
 800bc02:	21a0      	movs	r1, #160	; 0xa0
 800bc04:	2280      	movs	r2, #128	; 0x80
 800bc06:	89a3      	ldrh	r3, [r4, #12]
 800bc08:	0089      	lsls	r1, r1, #2
 800bc0a:	0092      	lsls	r2, r2, #2
 800bc0c:	400b      	ands	r3, r1
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d003      	beq.n	800bc1a <__swsetup_r+0xa6>
 800bc12:	0021      	movs	r1, r4
 800bc14:	0030      	movs	r0, r6
 800bc16:	f001 f8c9 	bl	800cdac <__smakebuf_r>
 800bc1a:	220c      	movs	r2, #12
 800bc1c:	5ea3      	ldrsh	r3, [r4, r2]
 800bc1e:	2001      	movs	r0, #1
 800bc20:	001a      	movs	r2, r3
 800bc22:	b299      	uxth	r1, r3
 800bc24:	4002      	ands	r2, r0
 800bc26:	4203      	tst	r3, r0
 800bc28:	d00f      	beq.n	800bc4a <__swsetup_r+0xd6>
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	60a2      	str	r2, [r4, #8]
 800bc2e:	6962      	ldr	r2, [r4, #20]
 800bc30:	4252      	negs	r2, r2
 800bc32:	61a2      	str	r2, [r4, #24]
 800bc34:	2000      	movs	r0, #0
 800bc36:	6922      	ldr	r2, [r4, #16]
 800bc38:	4282      	cmp	r2, r0
 800bc3a:	d1ba      	bne.n	800bbb2 <__swsetup_r+0x3e>
 800bc3c:	060a      	lsls	r2, r1, #24
 800bc3e:	d5b8      	bpl.n	800bbb2 <__swsetup_r+0x3e>
 800bc40:	2240      	movs	r2, #64	; 0x40
 800bc42:	4313      	orrs	r3, r2
 800bc44:	81a3      	strh	r3, [r4, #12]
 800bc46:	3801      	subs	r0, #1
 800bc48:	e7b3      	b.n	800bbb2 <__swsetup_r+0x3e>
 800bc4a:	0788      	lsls	r0, r1, #30
 800bc4c:	d400      	bmi.n	800bc50 <__swsetup_r+0xdc>
 800bc4e:	6962      	ldr	r2, [r4, #20]
 800bc50:	60a2      	str	r2, [r4, #8]
 800bc52:	e7ef      	b.n	800bc34 <__swsetup_r+0xc0>
 800bc54:	20000068 	.word	0x20000068
 800bc58:	0800ec18 	.word	0x0800ec18
 800bc5c:	0800ec38 	.word	0x0800ec38
 800bc60:	0800ebf8 	.word	0x0800ebf8

0800bc64 <quorem>:
 800bc64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc66:	0006      	movs	r6, r0
 800bc68:	690b      	ldr	r3, [r1, #16]
 800bc6a:	6932      	ldr	r2, [r6, #16]
 800bc6c:	b087      	sub	sp, #28
 800bc6e:	2000      	movs	r0, #0
 800bc70:	9103      	str	r1, [sp, #12]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	db65      	blt.n	800bd42 <quorem+0xde>
 800bc76:	3b01      	subs	r3, #1
 800bc78:	009c      	lsls	r4, r3, #2
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	000b      	movs	r3, r1
 800bc7e:	3314      	adds	r3, #20
 800bc80:	9305      	str	r3, [sp, #20]
 800bc82:	191b      	adds	r3, r3, r4
 800bc84:	9304      	str	r3, [sp, #16]
 800bc86:	0033      	movs	r3, r6
 800bc88:	3314      	adds	r3, #20
 800bc8a:	9302      	str	r3, [sp, #8]
 800bc8c:	191c      	adds	r4, r3, r4
 800bc8e:	9b04      	ldr	r3, [sp, #16]
 800bc90:	6827      	ldr	r7, [r4, #0]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	0038      	movs	r0, r7
 800bc96:	1c5d      	adds	r5, r3, #1
 800bc98:	0029      	movs	r1, r5
 800bc9a:	9301      	str	r3, [sp, #4]
 800bc9c:	f7f4 fa50 	bl	8000140 <__udivsi3>
 800bca0:	9001      	str	r0, [sp, #4]
 800bca2:	42af      	cmp	r7, r5
 800bca4:	d324      	bcc.n	800bcf0 <quorem+0x8c>
 800bca6:	2500      	movs	r5, #0
 800bca8:	46ac      	mov	ip, r5
 800bcaa:	9802      	ldr	r0, [sp, #8]
 800bcac:	9f05      	ldr	r7, [sp, #20]
 800bcae:	cf08      	ldmia	r7!, {r3}
 800bcb0:	9a01      	ldr	r2, [sp, #4]
 800bcb2:	b299      	uxth	r1, r3
 800bcb4:	4351      	muls	r1, r2
 800bcb6:	0c1b      	lsrs	r3, r3, #16
 800bcb8:	4353      	muls	r3, r2
 800bcba:	1949      	adds	r1, r1, r5
 800bcbc:	0c0a      	lsrs	r2, r1, #16
 800bcbe:	189b      	adds	r3, r3, r2
 800bcc0:	6802      	ldr	r2, [r0, #0]
 800bcc2:	b289      	uxth	r1, r1
 800bcc4:	b292      	uxth	r2, r2
 800bcc6:	4462      	add	r2, ip
 800bcc8:	1a52      	subs	r2, r2, r1
 800bcca:	6801      	ldr	r1, [r0, #0]
 800bccc:	0c1d      	lsrs	r5, r3, #16
 800bcce:	0c09      	lsrs	r1, r1, #16
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	1acb      	subs	r3, r1, r3
 800bcd4:	1411      	asrs	r1, r2, #16
 800bcd6:	185b      	adds	r3, r3, r1
 800bcd8:	1419      	asrs	r1, r3, #16
 800bcda:	b292      	uxth	r2, r2
 800bcdc:	041b      	lsls	r3, r3, #16
 800bcde:	431a      	orrs	r2, r3
 800bce0:	9b04      	ldr	r3, [sp, #16]
 800bce2:	468c      	mov	ip, r1
 800bce4:	c004      	stmia	r0!, {r2}
 800bce6:	42bb      	cmp	r3, r7
 800bce8:	d2e1      	bcs.n	800bcae <quorem+0x4a>
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d030      	beq.n	800bd52 <quorem+0xee>
 800bcf0:	0030      	movs	r0, r6
 800bcf2:	9903      	ldr	r1, [sp, #12]
 800bcf4:	f001 fb38 	bl	800d368 <__mcmp>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	db21      	blt.n	800bd40 <quorem+0xdc>
 800bcfc:	0030      	movs	r0, r6
 800bcfe:	2400      	movs	r4, #0
 800bd00:	9b01      	ldr	r3, [sp, #4]
 800bd02:	9903      	ldr	r1, [sp, #12]
 800bd04:	3301      	adds	r3, #1
 800bd06:	9301      	str	r3, [sp, #4]
 800bd08:	3014      	adds	r0, #20
 800bd0a:	3114      	adds	r1, #20
 800bd0c:	6803      	ldr	r3, [r0, #0]
 800bd0e:	c920      	ldmia	r1!, {r5}
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	1914      	adds	r4, r2, r4
 800bd14:	b2aa      	uxth	r2, r5
 800bd16:	1aa2      	subs	r2, r4, r2
 800bd18:	0c1b      	lsrs	r3, r3, #16
 800bd1a:	0c2d      	lsrs	r5, r5, #16
 800bd1c:	1414      	asrs	r4, r2, #16
 800bd1e:	1b5b      	subs	r3, r3, r5
 800bd20:	191b      	adds	r3, r3, r4
 800bd22:	141c      	asrs	r4, r3, #16
 800bd24:	b292      	uxth	r2, r2
 800bd26:	041b      	lsls	r3, r3, #16
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	c008      	stmia	r0!, {r3}
 800bd2c:	9b04      	ldr	r3, [sp, #16]
 800bd2e:	428b      	cmp	r3, r1
 800bd30:	d2ec      	bcs.n	800bd0c <quorem+0xa8>
 800bd32:	9b00      	ldr	r3, [sp, #0]
 800bd34:	9a02      	ldr	r2, [sp, #8]
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	18d3      	adds	r3, r2, r3
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	2a00      	cmp	r2, #0
 800bd3e:	d015      	beq.n	800bd6c <quorem+0x108>
 800bd40:	9801      	ldr	r0, [sp, #4]
 800bd42:	b007      	add	sp, #28
 800bd44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd46:	6823      	ldr	r3, [r4, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d106      	bne.n	800bd5a <quorem+0xf6>
 800bd4c:	9b00      	ldr	r3, [sp, #0]
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	9b02      	ldr	r3, [sp, #8]
 800bd54:	3c04      	subs	r4, #4
 800bd56:	42a3      	cmp	r3, r4
 800bd58:	d3f5      	bcc.n	800bd46 <quorem+0xe2>
 800bd5a:	9b00      	ldr	r3, [sp, #0]
 800bd5c:	6133      	str	r3, [r6, #16]
 800bd5e:	e7c7      	b.n	800bcf0 <quorem+0x8c>
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	2a00      	cmp	r2, #0
 800bd64:	d106      	bne.n	800bd74 <quorem+0x110>
 800bd66:	9a00      	ldr	r2, [sp, #0]
 800bd68:	3a01      	subs	r2, #1
 800bd6a:	9200      	str	r2, [sp, #0]
 800bd6c:	9a02      	ldr	r2, [sp, #8]
 800bd6e:	3b04      	subs	r3, #4
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d3f5      	bcc.n	800bd60 <quorem+0xfc>
 800bd74:	9b00      	ldr	r3, [sp, #0]
 800bd76:	6133      	str	r3, [r6, #16]
 800bd78:	e7e2      	b.n	800bd40 <quorem+0xdc>
	...

0800bd7c <_dtoa_r>:
 800bd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd7e:	b09d      	sub	sp, #116	; 0x74
 800bd80:	9202      	str	r2, [sp, #8]
 800bd82:	9303      	str	r3, [sp, #12]
 800bd84:	9b02      	ldr	r3, [sp, #8]
 800bd86:	9c03      	ldr	r4, [sp, #12]
 800bd88:	9308      	str	r3, [sp, #32]
 800bd8a:	9409      	str	r4, [sp, #36]	; 0x24
 800bd8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bd8e:	0007      	movs	r7, r0
 800bd90:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800bd92:	2c00      	cmp	r4, #0
 800bd94:	d10e      	bne.n	800bdb4 <_dtoa_r+0x38>
 800bd96:	2010      	movs	r0, #16
 800bd98:	f001 f84c 	bl	800ce34 <malloc>
 800bd9c:	1e02      	subs	r2, r0, #0
 800bd9e:	6278      	str	r0, [r7, #36]	; 0x24
 800bda0:	d104      	bne.n	800bdac <_dtoa_r+0x30>
 800bda2:	21ea      	movs	r1, #234	; 0xea
 800bda4:	4bc7      	ldr	r3, [pc, #796]	; (800c0c4 <_dtoa_r+0x348>)
 800bda6:	48c8      	ldr	r0, [pc, #800]	; (800c0c8 <_dtoa_r+0x34c>)
 800bda8:	f001 ff22 	bl	800dbf0 <__assert_func>
 800bdac:	6044      	str	r4, [r0, #4]
 800bdae:	6084      	str	r4, [r0, #8]
 800bdb0:	6004      	str	r4, [r0, #0]
 800bdb2:	60c4      	str	r4, [r0, #12]
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb6:	6819      	ldr	r1, [r3, #0]
 800bdb8:	2900      	cmp	r1, #0
 800bdba:	d00a      	beq.n	800bdd2 <_dtoa_r+0x56>
 800bdbc:	685a      	ldr	r2, [r3, #4]
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	4093      	lsls	r3, r2
 800bdc2:	604a      	str	r2, [r1, #4]
 800bdc4:	608b      	str	r3, [r1, #8]
 800bdc6:	0038      	movs	r0, r7
 800bdc8:	f001 f88e 	bl	800cee8 <_Bfree>
 800bdcc:	2200      	movs	r2, #0
 800bdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd0:	601a      	str	r2, [r3, #0]
 800bdd2:	9b03      	ldr	r3, [sp, #12]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	da20      	bge.n	800be1a <_dtoa_r+0x9e>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	602b      	str	r3, [r5, #0]
 800bddc:	9b03      	ldr	r3, [sp, #12]
 800bdde:	005b      	lsls	r3, r3, #1
 800bde0:	085b      	lsrs	r3, r3, #1
 800bde2:	9309      	str	r3, [sp, #36]	; 0x24
 800bde4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bde6:	4bb9      	ldr	r3, [pc, #740]	; (800c0cc <_dtoa_r+0x350>)
 800bde8:	4ab8      	ldr	r2, [pc, #736]	; (800c0cc <_dtoa_r+0x350>)
 800bdea:	402b      	ands	r3, r5
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d117      	bne.n	800be20 <_dtoa_r+0xa4>
 800bdf0:	4bb7      	ldr	r3, [pc, #732]	; (800c0d0 <_dtoa_r+0x354>)
 800bdf2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bdf4:	0328      	lsls	r0, r5, #12
 800bdf6:	6013      	str	r3, [r2, #0]
 800bdf8:	9b02      	ldr	r3, [sp, #8]
 800bdfa:	0b00      	lsrs	r0, r0, #12
 800bdfc:	4318      	orrs	r0, r3
 800bdfe:	d101      	bne.n	800be04 <_dtoa_r+0x88>
 800be00:	f000 fdbf 	bl	800c982 <_dtoa_r+0xc06>
 800be04:	48b3      	ldr	r0, [pc, #716]	; (800c0d4 <_dtoa_r+0x358>)
 800be06:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800be08:	9006      	str	r0, [sp, #24]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <_dtoa_r+0x98>
 800be0e:	4bb2      	ldr	r3, [pc, #712]	; (800c0d8 <_dtoa_r+0x35c>)
 800be10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800be12:	6013      	str	r3, [r2, #0]
 800be14:	9806      	ldr	r0, [sp, #24]
 800be16:	b01d      	add	sp, #116	; 0x74
 800be18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be1a:	2300      	movs	r3, #0
 800be1c:	602b      	str	r3, [r5, #0]
 800be1e:	e7e1      	b.n	800bde4 <_dtoa_r+0x68>
 800be20:	9b08      	ldr	r3, [sp, #32]
 800be22:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800be24:	9312      	str	r3, [sp, #72]	; 0x48
 800be26:	9413      	str	r4, [sp, #76]	; 0x4c
 800be28:	9812      	ldr	r0, [sp, #72]	; 0x48
 800be2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800be2c:	2200      	movs	r2, #0
 800be2e:	2300      	movs	r3, #0
 800be30:	f7f4 fb0c 	bl	800044c <__aeabi_dcmpeq>
 800be34:	1e04      	subs	r4, r0, #0
 800be36:	d009      	beq.n	800be4c <_dtoa_r+0xd0>
 800be38:	2301      	movs	r3, #1
 800be3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800be3c:	6013      	str	r3, [r2, #0]
 800be3e:	4ba7      	ldr	r3, [pc, #668]	; (800c0dc <_dtoa_r+0x360>)
 800be40:	9306      	str	r3, [sp, #24]
 800be42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800be44:	2b00      	cmp	r3, #0
 800be46:	d0e5      	beq.n	800be14 <_dtoa_r+0x98>
 800be48:	4ba5      	ldr	r3, [pc, #660]	; (800c0e0 <_dtoa_r+0x364>)
 800be4a:	e7e1      	b.n	800be10 <_dtoa_r+0x94>
 800be4c:	ab1a      	add	r3, sp, #104	; 0x68
 800be4e:	9301      	str	r3, [sp, #4]
 800be50:	ab1b      	add	r3, sp, #108	; 0x6c
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	0038      	movs	r0, r7
 800be56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be5a:	f001 fb39 	bl	800d4d0 <__d2b>
 800be5e:	006e      	lsls	r6, r5, #1
 800be60:	9005      	str	r0, [sp, #20]
 800be62:	0d76      	lsrs	r6, r6, #21
 800be64:	d100      	bne.n	800be68 <_dtoa_r+0xec>
 800be66:	e07c      	b.n	800bf62 <_dtoa_r+0x1e6>
 800be68:	9812      	ldr	r0, [sp, #72]	; 0x48
 800be6a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800be6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be6e:	4a9d      	ldr	r2, [pc, #628]	; (800c0e4 <_dtoa_r+0x368>)
 800be70:	031b      	lsls	r3, r3, #12
 800be72:	0b1b      	lsrs	r3, r3, #12
 800be74:	431a      	orrs	r2, r3
 800be76:	0011      	movs	r1, r2
 800be78:	4b9b      	ldr	r3, [pc, #620]	; (800c0e8 <_dtoa_r+0x36c>)
 800be7a:	9418      	str	r4, [sp, #96]	; 0x60
 800be7c:	18f6      	adds	r6, r6, r3
 800be7e:	2200      	movs	r2, #0
 800be80:	4b9a      	ldr	r3, [pc, #616]	; (800c0ec <_dtoa_r+0x370>)
 800be82:	f7f6 fcc3 	bl	800280c <__aeabi_dsub>
 800be86:	4a9a      	ldr	r2, [pc, #616]	; (800c0f0 <_dtoa_r+0x374>)
 800be88:	4b9a      	ldr	r3, [pc, #616]	; (800c0f4 <_dtoa_r+0x378>)
 800be8a:	f7f6 fa53 	bl	8002334 <__aeabi_dmul>
 800be8e:	4a9a      	ldr	r2, [pc, #616]	; (800c0f8 <_dtoa_r+0x37c>)
 800be90:	4b9a      	ldr	r3, [pc, #616]	; (800c0fc <_dtoa_r+0x380>)
 800be92:	f7f5 fb11 	bl	80014b8 <__aeabi_dadd>
 800be96:	0004      	movs	r4, r0
 800be98:	0030      	movs	r0, r6
 800be9a:	000d      	movs	r5, r1
 800be9c:	f7f7 f89c 	bl	8002fd8 <__aeabi_i2d>
 800bea0:	4a97      	ldr	r2, [pc, #604]	; (800c100 <_dtoa_r+0x384>)
 800bea2:	4b98      	ldr	r3, [pc, #608]	; (800c104 <_dtoa_r+0x388>)
 800bea4:	f7f6 fa46 	bl	8002334 <__aeabi_dmul>
 800bea8:	0002      	movs	r2, r0
 800beaa:	000b      	movs	r3, r1
 800beac:	0020      	movs	r0, r4
 800beae:	0029      	movs	r1, r5
 800beb0:	f7f5 fb02 	bl	80014b8 <__aeabi_dadd>
 800beb4:	0004      	movs	r4, r0
 800beb6:	000d      	movs	r5, r1
 800beb8:	f7f7 f858 	bl	8002f6c <__aeabi_d2iz>
 800bebc:	2200      	movs	r2, #0
 800bebe:	9002      	str	r0, [sp, #8]
 800bec0:	2300      	movs	r3, #0
 800bec2:	0020      	movs	r0, r4
 800bec4:	0029      	movs	r1, r5
 800bec6:	f7f4 fac7 	bl	8000458 <__aeabi_dcmplt>
 800beca:	2800      	cmp	r0, #0
 800becc:	d00b      	beq.n	800bee6 <_dtoa_r+0x16a>
 800bece:	9802      	ldr	r0, [sp, #8]
 800bed0:	f7f7 f882 	bl	8002fd8 <__aeabi_i2d>
 800bed4:	002b      	movs	r3, r5
 800bed6:	0022      	movs	r2, r4
 800bed8:	f7f4 fab8 	bl	800044c <__aeabi_dcmpeq>
 800bedc:	4243      	negs	r3, r0
 800bede:	4158      	adcs	r0, r3
 800bee0:	9b02      	ldr	r3, [sp, #8]
 800bee2:	1a1b      	subs	r3, r3, r0
 800bee4:	9302      	str	r3, [sp, #8]
 800bee6:	2301      	movs	r3, #1
 800bee8:	9316      	str	r3, [sp, #88]	; 0x58
 800beea:	9b02      	ldr	r3, [sp, #8]
 800beec:	2b16      	cmp	r3, #22
 800beee:	d80f      	bhi.n	800bf10 <_dtoa_r+0x194>
 800bef0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bef2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bef4:	00da      	lsls	r2, r3, #3
 800bef6:	4b84      	ldr	r3, [pc, #528]	; (800c108 <_dtoa_r+0x38c>)
 800bef8:	189b      	adds	r3, r3, r2
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	f7f4 faab 	bl	8000458 <__aeabi_dcmplt>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d049      	beq.n	800bf9a <_dtoa_r+0x21e>
 800bf06:	9b02      	ldr	r3, [sp, #8]
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	9302      	str	r3, [sp, #8]
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	9316      	str	r3, [sp, #88]	; 0x58
 800bf10:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bf12:	1b9e      	subs	r6, r3, r6
 800bf14:	2300      	movs	r3, #0
 800bf16:	930a      	str	r3, [sp, #40]	; 0x28
 800bf18:	0033      	movs	r3, r6
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	930d      	str	r3, [sp, #52]	; 0x34
 800bf1e:	d504      	bpl.n	800bf2a <_dtoa_r+0x1ae>
 800bf20:	2301      	movs	r3, #1
 800bf22:	1b9b      	subs	r3, r3, r6
 800bf24:	930a      	str	r3, [sp, #40]	; 0x28
 800bf26:	2300      	movs	r3, #0
 800bf28:	930d      	str	r3, [sp, #52]	; 0x34
 800bf2a:	9b02      	ldr	r3, [sp, #8]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	db36      	blt.n	800bf9e <_dtoa_r+0x222>
 800bf30:	9a02      	ldr	r2, [sp, #8]
 800bf32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf34:	4694      	mov	ip, r2
 800bf36:	4463      	add	r3, ip
 800bf38:	930d      	str	r3, [sp, #52]	; 0x34
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	9215      	str	r2, [sp, #84]	; 0x54
 800bf3e:	930e      	str	r3, [sp, #56]	; 0x38
 800bf40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf42:	2401      	movs	r4, #1
 800bf44:	2b09      	cmp	r3, #9
 800bf46:	d864      	bhi.n	800c012 <_dtoa_r+0x296>
 800bf48:	2b05      	cmp	r3, #5
 800bf4a:	dd02      	ble.n	800bf52 <_dtoa_r+0x1d6>
 800bf4c:	2400      	movs	r4, #0
 800bf4e:	3b04      	subs	r3, #4
 800bf50:	9322      	str	r3, [sp, #136]	; 0x88
 800bf52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf54:	1e98      	subs	r0, r3, #2
 800bf56:	2803      	cmp	r0, #3
 800bf58:	d864      	bhi.n	800c024 <_dtoa_r+0x2a8>
 800bf5a:	f7f4 f8dd 	bl	8000118 <__gnu_thumb1_case_uqi>
 800bf5e:	3829      	.short	0x3829
 800bf60:	5836      	.short	0x5836
 800bf62:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bf64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bf66:	189e      	adds	r6, r3, r2
 800bf68:	4b68      	ldr	r3, [pc, #416]	; (800c10c <_dtoa_r+0x390>)
 800bf6a:	18f2      	adds	r2, r6, r3
 800bf6c:	2a20      	cmp	r2, #32
 800bf6e:	dd0f      	ble.n	800bf90 <_dtoa_r+0x214>
 800bf70:	2340      	movs	r3, #64	; 0x40
 800bf72:	1a9b      	subs	r3, r3, r2
 800bf74:	409d      	lsls	r5, r3
 800bf76:	4b66      	ldr	r3, [pc, #408]	; (800c110 <_dtoa_r+0x394>)
 800bf78:	9802      	ldr	r0, [sp, #8]
 800bf7a:	18f3      	adds	r3, r6, r3
 800bf7c:	40d8      	lsrs	r0, r3
 800bf7e:	4328      	orrs	r0, r5
 800bf80:	f7f7 f85a 	bl	8003038 <__aeabi_ui2d>
 800bf84:	2301      	movs	r3, #1
 800bf86:	4c63      	ldr	r4, [pc, #396]	; (800c114 <_dtoa_r+0x398>)
 800bf88:	3e01      	subs	r6, #1
 800bf8a:	1909      	adds	r1, r1, r4
 800bf8c:	9318      	str	r3, [sp, #96]	; 0x60
 800bf8e:	e776      	b.n	800be7e <_dtoa_r+0x102>
 800bf90:	2320      	movs	r3, #32
 800bf92:	9802      	ldr	r0, [sp, #8]
 800bf94:	1a9b      	subs	r3, r3, r2
 800bf96:	4098      	lsls	r0, r3
 800bf98:	e7f2      	b.n	800bf80 <_dtoa_r+0x204>
 800bf9a:	9016      	str	r0, [sp, #88]	; 0x58
 800bf9c:	e7b8      	b.n	800bf10 <_dtoa_r+0x194>
 800bf9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfa0:	9a02      	ldr	r2, [sp, #8]
 800bfa2:	1a9b      	subs	r3, r3, r2
 800bfa4:	930a      	str	r3, [sp, #40]	; 0x28
 800bfa6:	4253      	negs	r3, r2
 800bfa8:	930e      	str	r3, [sp, #56]	; 0x38
 800bfaa:	2300      	movs	r3, #0
 800bfac:	9315      	str	r3, [sp, #84]	; 0x54
 800bfae:	e7c7      	b.n	800bf40 <_dtoa_r+0x1c4>
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bfb6:	930c      	str	r3, [sp, #48]	; 0x30
 800bfb8:	9307      	str	r3, [sp, #28]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	dc13      	bgt.n	800bfe6 <_dtoa_r+0x26a>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	001a      	movs	r2, r3
 800bfc2:	930c      	str	r3, [sp, #48]	; 0x30
 800bfc4:	9307      	str	r3, [sp, #28]
 800bfc6:	9223      	str	r2, [sp, #140]	; 0x8c
 800bfc8:	e00d      	b.n	800bfe6 <_dtoa_r+0x26a>
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e7f1      	b.n	800bfb2 <_dtoa_r+0x236>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800bfd2:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfd4:	4694      	mov	ip, r2
 800bfd6:	9b02      	ldr	r3, [sp, #8]
 800bfd8:	4463      	add	r3, ip
 800bfda:	930c      	str	r3, [sp, #48]	; 0x30
 800bfdc:	3301      	adds	r3, #1
 800bfde:	9307      	str	r3, [sp, #28]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	dc00      	bgt.n	800bfe6 <_dtoa_r+0x26a>
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfea:	6042      	str	r2, [r0, #4]
 800bfec:	3204      	adds	r2, #4
 800bfee:	0015      	movs	r5, r2
 800bff0:	3514      	adds	r5, #20
 800bff2:	6841      	ldr	r1, [r0, #4]
 800bff4:	429d      	cmp	r5, r3
 800bff6:	d919      	bls.n	800c02c <_dtoa_r+0x2b0>
 800bff8:	0038      	movs	r0, r7
 800bffa:	f000 ff31 	bl	800ce60 <_Balloc>
 800bffe:	9006      	str	r0, [sp, #24]
 800c000:	2800      	cmp	r0, #0
 800c002:	d117      	bne.n	800c034 <_dtoa_r+0x2b8>
 800c004:	21d5      	movs	r1, #213	; 0xd5
 800c006:	0002      	movs	r2, r0
 800c008:	4b43      	ldr	r3, [pc, #268]	; (800c118 <_dtoa_r+0x39c>)
 800c00a:	0049      	lsls	r1, r1, #1
 800c00c:	e6cb      	b.n	800bda6 <_dtoa_r+0x2a>
 800c00e:	2301      	movs	r3, #1
 800c010:	e7de      	b.n	800bfd0 <_dtoa_r+0x254>
 800c012:	2300      	movs	r3, #0
 800c014:	940f      	str	r4, [sp, #60]	; 0x3c
 800c016:	9322      	str	r3, [sp, #136]	; 0x88
 800c018:	3b01      	subs	r3, #1
 800c01a:	930c      	str	r3, [sp, #48]	; 0x30
 800c01c:	9307      	str	r3, [sp, #28]
 800c01e:	2200      	movs	r2, #0
 800c020:	3313      	adds	r3, #19
 800c022:	e7d0      	b.n	800bfc6 <_dtoa_r+0x24a>
 800c024:	2301      	movs	r3, #1
 800c026:	930f      	str	r3, [sp, #60]	; 0x3c
 800c028:	3b02      	subs	r3, #2
 800c02a:	e7f6      	b.n	800c01a <_dtoa_r+0x29e>
 800c02c:	3101      	adds	r1, #1
 800c02e:	6041      	str	r1, [r0, #4]
 800c030:	0052      	lsls	r2, r2, #1
 800c032:	e7dc      	b.n	800bfee <_dtoa_r+0x272>
 800c034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c036:	9a06      	ldr	r2, [sp, #24]
 800c038:	601a      	str	r2, [r3, #0]
 800c03a:	9b07      	ldr	r3, [sp, #28]
 800c03c:	2b0e      	cmp	r3, #14
 800c03e:	d900      	bls.n	800c042 <_dtoa_r+0x2c6>
 800c040:	e0eb      	b.n	800c21a <_dtoa_r+0x49e>
 800c042:	2c00      	cmp	r4, #0
 800c044:	d100      	bne.n	800c048 <_dtoa_r+0x2cc>
 800c046:	e0e8      	b.n	800c21a <_dtoa_r+0x49e>
 800c048:	9b02      	ldr	r3, [sp, #8]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	dd68      	ble.n	800c120 <_dtoa_r+0x3a4>
 800c04e:	001a      	movs	r2, r3
 800c050:	210f      	movs	r1, #15
 800c052:	4b2d      	ldr	r3, [pc, #180]	; (800c108 <_dtoa_r+0x38c>)
 800c054:	400a      	ands	r2, r1
 800c056:	00d2      	lsls	r2, r2, #3
 800c058:	189b      	adds	r3, r3, r2
 800c05a:	681d      	ldr	r5, [r3, #0]
 800c05c:	685e      	ldr	r6, [r3, #4]
 800c05e:	9b02      	ldr	r3, [sp, #8]
 800c060:	111c      	asrs	r4, r3, #4
 800c062:	2302      	movs	r3, #2
 800c064:	9310      	str	r3, [sp, #64]	; 0x40
 800c066:	9b02      	ldr	r3, [sp, #8]
 800c068:	05db      	lsls	r3, r3, #23
 800c06a:	d50b      	bpl.n	800c084 <_dtoa_r+0x308>
 800c06c:	4b2b      	ldr	r3, [pc, #172]	; (800c11c <_dtoa_r+0x3a0>)
 800c06e:	400c      	ands	r4, r1
 800c070:	6a1a      	ldr	r2, [r3, #32]
 800c072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c074:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c076:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c078:	f7f5 fd5a 	bl	8001b30 <__aeabi_ddiv>
 800c07c:	2303      	movs	r3, #3
 800c07e:	9008      	str	r0, [sp, #32]
 800c080:	9109      	str	r1, [sp, #36]	; 0x24
 800c082:	9310      	str	r3, [sp, #64]	; 0x40
 800c084:	4b25      	ldr	r3, [pc, #148]	; (800c11c <_dtoa_r+0x3a0>)
 800c086:	9314      	str	r3, [sp, #80]	; 0x50
 800c088:	2c00      	cmp	r4, #0
 800c08a:	d108      	bne.n	800c09e <_dtoa_r+0x322>
 800c08c:	9808      	ldr	r0, [sp, #32]
 800c08e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c090:	002a      	movs	r2, r5
 800c092:	0033      	movs	r3, r6
 800c094:	f7f5 fd4c 	bl	8001b30 <__aeabi_ddiv>
 800c098:	9008      	str	r0, [sp, #32]
 800c09a:	9109      	str	r1, [sp, #36]	; 0x24
 800c09c:	e05c      	b.n	800c158 <_dtoa_r+0x3dc>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	421c      	tst	r4, r3
 800c0a2:	d00b      	beq.n	800c0bc <_dtoa_r+0x340>
 800c0a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0a6:	0028      	movs	r0, r5
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	9310      	str	r3, [sp, #64]	; 0x40
 800c0ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0ae:	0031      	movs	r1, r6
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	f7f6 f93e 	bl	8002334 <__aeabi_dmul>
 800c0b8:	0005      	movs	r5, r0
 800c0ba:	000e      	movs	r6, r1
 800c0bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0be:	1064      	asrs	r4, r4, #1
 800c0c0:	3308      	adds	r3, #8
 800c0c2:	e7e0      	b.n	800c086 <_dtoa_r+0x30a>
 800c0c4:	0800eb75 	.word	0x0800eb75
 800c0c8:	0800eb8c 	.word	0x0800eb8c
 800c0cc:	7ff00000 	.word	0x7ff00000
 800c0d0:	0000270f 	.word	0x0000270f
 800c0d4:	0800eb71 	.word	0x0800eb71
 800c0d8:	0800eb74 	.word	0x0800eb74
 800c0dc:	0800eb44 	.word	0x0800eb44
 800c0e0:	0800eb45 	.word	0x0800eb45
 800c0e4:	3ff00000 	.word	0x3ff00000
 800c0e8:	fffffc01 	.word	0xfffffc01
 800c0ec:	3ff80000 	.word	0x3ff80000
 800c0f0:	636f4361 	.word	0x636f4361
 800c0f4:	3fd287a7 	.word	0x3fd287a7
 800c0f8:	8b60c8b3 	.word	0x8b60c8b3
 800c0fc:	3fc68a28 	.word	0x3fc68a28
 800c100:	509f79fb 	.word	0x509f79fb
 800c104:	3fd34413 	.word	0x3fd34413
 800c108:	0800ece0 	.word	0x0800ece0
 800c10c:	00000432 	.word	0x00000432
 800c110:	00000412 	.word	0x00000412
 800c114:	fe100000 	.word	0xfe100000
 800c118:	0800ebe7 	.word	0x0800ebe7
 800c11c:	0800ecb8 	.word	0x0800ecb8
 800c120:	2302      	movs	r3, #2
 800c122:	9310      	str	r3, [sp, #64]	; 0x40
 800c124:	9b02      	ldr	r3, [sp, #8]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d016      	beq.n	800c158 <_dtoa_r+0x3dc>
 800c12a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c12c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c12e:	425c      	negs	r4, r3
 800c130:	230f      	movs	r3, #15
 800c132:	4ab6      	ldr	r2, [pc, #728]	; (800c40c <_dtoa_r+0x690>)
 800c134:	4023      	ands	r3, r4
 800c136:	00db      	lsls	r3, r3, #3
 800c138:	18d3      	adds	r3, r2, r3
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	f7f6 f8f9 	bl	8002334 <__aeabi_dmul>
 800c142:	2601      	movs	r6, #1
 800c144:	2300      	movs	r3, #0
 800c146:	9008      	str	r0, [sp, #32]
 800c148:	9109      	str	r1, [sp, #36]	; 0x24
 800c14a:	4db1      	ldr	r5, [pc, #708]	; (800c410 <_dtoa_r+0x694>)
 800c14c:	1124      	asrs	r4, r4, #4
 800c14e:	2c00      	cmp	r4, #0
 800c150:	d000      	beq.n	800c154 <_dtoa_r+0x3d8>
 800c152:	e094      	b.n	800c27e <_dtoa_r+0x502>
 800c154:	2b00      	cmp	r3, #0
 800c156:	d19f      	bne.n	800c098 <_dtoa_r+0x31c>
 800c158:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d100      	bne.n	800c160 <_dtoa_r+0x3e4>
 800c15e:	e09b      	b.n	800c298 <_dtoa_r+0x51c>
 800c160:	9c08      	ldr	r4, [sp, #32]
 800c162:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c164:	2200      	movs	r2, #0
 800c166:	0020      	movs	r0, r4
 800c168:	0029      	movs	r1, r5
 800c16a:	4baa      	ldr	r3, [pc, #680]	; (800c414 <_dtoa_r+0x698>)
 800c16c:	f7f4 f974 	bl	8000458 <__aeabi_dcmplt>
 800c170:	2800      	cmp	r0, #0
 800c172:	d100      	bne.n	800c176 <_dtoa_r+0x3fa>
 800c174:	e090      	b.n	800c298 <_dtoa_r+0x51c>
 800c176:	9b07      	ldr	r3, [sp, #28]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d100      	bne.n	800c17e <_dtoa_r+0x402>
 800c17c:	e08c      	b.n	800c298 <_dtoa_r+0x51c>
 800c17e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c180:	2b00      	cmp	r3, #0
 800c182:	dd46      	ble.n	800c212 <_dtoa_r+0x496>
 800c184:	9b02      	ldr	r3, [sp, #8]
 800c186:	2200      	movs	r2, #0
 800c188:	0020      	movs	r0, r4
 800c18a:	0029      	movs	r1, r5
 800c18c:	1e5e      	subs	r6, r3, #1
 800c18e:	4ba2      	ldr	r3, [pc, #648]	; (800c418 <_dtoa_r+0x69c>)
 800c190:	f7f6 f8d0 	bl	8002334 <__aeabi_dmul>
 800c194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c196:	9008      	str	r0, [sp, #32]
 800c198:	9109      	str	r1, [sp, #36]	; 0x24
 800c19a:	3301      	adds	r3, #1
 800c19c:	9310      	str	r3, [sp, #64]	; 0x40
 800c19e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c1a2:	9c08      	ldr	r4, [sp, #32]
 800c1a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c1a6:	9314      	str	r3, [sp, #80]	; 0x50
 800c1a8:	f7f6 ff16 	bl	8002fd8 <__aeabi_i2d>
 800c1ac:	0022      	movs	r2, r4
 800c1ae:	002b      	movs	r3, r5
 800c1b0:	f7f6 f8c0 	bl	8002334 <__aeabi_dmul>
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	4b99      	ldr	r3, [pc, #612]	; (800c41c <_dtoa_r+0x6a0>)
 800c1b8:	f7f5 f97e 	bl	80014b8 <__aeabi_dadd>
 800c1bc:	9010      	str	r0, [sp, #64]	; 0x40
 800c1be:	9111      	str	r1, [sp, #68]	; 0x44
 800c1c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c1c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c1c4:	9208      	str	r2, [sp, #32]
 800c1c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c8:	4a95      	ldr	r2, [pc, #596]	; (800c420 <_dtoa_r+0x6a4>)
 800c1ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c1cc:	4694      	mov	ip, r2
 800c1ce:	4463      	add	r3, ip
 800c1d0:	9317      	str	r3, [sp, #92]	; 0x5c
 800c1d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d161      	bne.n	800c29e <_dtoa_r+0x522>
 800c1da:	2200      	movs	r2, #0
 800c1dc:	0020      	movs	r0, r4
 800c1de:	0029      	movs	r1, r5
 800c1e0:	4b90      	ldr	r3, [pc, #576]	; (800c424 <_dtoa_r+0x6a8>)
 800c1e2:	f7f6 fb13 	bl	800280c <__aeabi_dsub>
 800c1e6:	9a08      	ldr	r2, [sp, #32]
 800c1e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1ea:	0004      	movs	r4, r0
 800c1ec:	000d      	movs	r5, r1
 800c1ee:	f7f4 f947 	bl	8000480 <__aeabi_dcmpgt>
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	d000      	beq.n	800c1f8 <_dtoa_r+0x47c>
 800c1f6:	e2af      	b.n	800c758 <_dtoa_r+0x9dc>
 800c1f8:	488b      	ldr	r0, [pc, #556]	; (800c428 <_dtoa_r+0x6ac>)
 800c1fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c1fc:	4684      	mov	ip, r0
 800c1fe:	4461      	add	r1, ip
 800c200:	000b      	movs	r3, r1
 800c202:	0020      	movs	r0, r4
 800c204:	0029      	movs	r1, r5
 800c206:	9a08      	ldr	r2, [sp, #32]
 800c208:	f7f4 f926 	bl	8000458 <__aeabi_dcmplt>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	d000      	beq.n	800c212 <_dtoa_r+0x496>
 800c210:	e29f      	b.n	800c752 <_dtoa_r+0x9d6>
 800c212:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c214:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c216:	9308      	str	r3, [sp, #32]
 800c218:	9409      	str	r4, [sp, #36]	; 0x24
 800c21a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	da00      	bge.n	800c222 <_dtoa_r+0x4a6>
 800c220:	e172      	b.n	800c508 <_dtoa_r+0x78c>
 800c222:	9a02      	ldr	r2, [sp, #8]
 800c224:	2a0e      	cmp	r2, #14
 800c226:	dd00      	ble.n	800c22a <_dtoa_r+0x4ae>
 800c228:	e16e      	b.n	800c508 <_dtoa_r+0x78c>
 800c22a:	4b78      	ldr	r3, [pc, #480]	; (800c40c <_dtoa_r+0x690>)
 800c22c:	00d2      	lsls	r2, r2, #3
 800c22e:	189b      	adds	r3, r3, r2
 800c230:	685c      	ldr	r4, [r3, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	930a      	str	r3, [sp, #40]	; 0x28
 800c236:	940b      	str	r4, [sp, #44]	; 0x2c
 800c238:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	db00      	blt.n	800c240 <_dtoa_r+0x4c4>
 800c23e:	e0f7      	b.n	800c430 <_dtoa_r+0x6b4>
 800c240:	9b07      	ldr	r3, [sp, #28]
 800c242:	2b00      	cmp	r3, #0
 800c244:	dd00      	ble.n	800c248 <_dtoa_r+0x4cc>
 800c246:	e0f3      	b.n	800c430 <_dtoa_r+0x6b4>
 800c248:	d000      	beq.n	800c24c <_dtoa_r+0x4d0>
 800c24a:	e282      	b.n	800c752 <_dtoa_r+0x9d6>
 800c24c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c24e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c250:	2200      	movs	r2, #0
 800c252:	4b74      	ldr	r3, [pc, #464]	; (800c424 <_dtoa_r+0x6a8>)
 800c254:	f7f6 f86e 	bl	8002334 <__aeabi_dmul>
 800c258:	9a08      	ldr	r2, [sp, #32]
 800c25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c25c:	f7f4 f91a 	bl	8000494 <__aeabi_dcmpge>
 800c260:	9e07      	ldr	r6, [sp, #28]
 800c262:	0035      	movs	r5, r6
 800c264:	2800      	cmp	r0, #0
 800c266:	d000      	beq.n	800c26a <_dtoa_r+0x4ee>
 800c268:	e259      	b.n	800c71e <_dtoa_r+0x9a2>
 800c26a:	9b06      	ldr	r3, [sp, #24]
 800c26c:	9a06      	ldr	r2, [sp, #24]
 800c26e:	3301      	adds	r3, #1
 800c270:	9308      	str	r3, [sp, #32]
 800c272:	2331      	movs	r3, #49	; 0x31
 800c274:	7013      	strb	r3, [r2, #0]
 800c276:	9b02      	ldr	r3, [sp, #8]
 800c278:	3301      	adds	r3, #1
 800c27a:	9302      	str	r3, [sp, #8]
 800c27c:	e254      	b.n	800c728 <_dtoa_r+0x9ac>
 800c27e:	4234      	tst	r4, r6
 800c280:	d007      	beq.n	800c292 <_dtoa_r+0x516>
 800c282:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c284:	3301      	adds	r3, #1
 800c286:	9310      	str	r3, [sp, #64]	; 0x40
 800c288:	682a      	ldr	r2, [r5, #0]
 800c28a:	686b      	ldr	r3, [r5, #4]
 800c28c:	f7f6 f852 	bl	8002334 <__aeabi_dmul>
 800c290:	0033      	movs	r3, r6
 800c292:	1064      	asrs	r4, r4, #1
 800c294:	3508      	adds	r5, #8
 800c296:	e75a      	b.n	800c14e <_dtoa_r+0x3d2>
 800c298:	9e02      	ldr	r6, [sp, #8]
 800c29a:	9b07      	ldr	r3, [sp, #28]
 800c29c:	e780      	b.n	800c1a0 <_dtoa_r+0x424>
 800c29e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c2a2:	1e5a      	subs	r2, r3, #1
 800c2a4:	4b59      	ldr	r3, [pc, #356]	; (800c40c <_dtoa_r+0x690>)
 800c2a6:	00d2      	lsls	r2, r2, #3
 800c2a8:	189b      	adds	r3, r3, r2
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	2900      	cmp	r1, #0
 800c2b0:	d051      	beq.n	800c356 <_dtoa_r+0x5da>
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	495d      	ldr	r1, [pc, #372]	; (800c42c <_dtoa_r+0x6b0>)
 800c2b6:	f7f5 fc3b 	bl	8001b30 <__aeabi_ddiv>
 800c2ba:	9a08      	ldr	r2, [sp, #32]
 800c2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2be:	f7f6 faa5 	bl	800280c <__aeabi_dsub>
 800c2c2:	9a06      	ldr	r2, [sp, #24]
 800c2c4:	9b06      	ldr	r3, [sp, #24]
 800c2c6:	4694      	mov	ip, r2
 800c2c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c2ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2cc:	9010      	str	r0, [sp, #64]	; 0x40
 800c2ce:	9111      	str	r1, [sp, #68]	; 0x44
 800c2d0:	4463      	add	r3, ip
 800c2d2:	9319      	str	r3, [sp, #100]	; 0x64
 800c2d4:	0029      	movs	r1, r5
 800c2d6:	0020      	movs	r0, r4
 800c2d8:	f7f6 fe48 	bl	8002f6c <__aeabi_d2iz>
 800c2dc:	9014      	str	r0, [sp, #80]	; 0x50
 800c2de:	f7f6 fe7b 	bl	8002fd8 <__aeabi_i2d>
 800c2e2:	0002      	movs	r2, r0
 800c2e4:	000b      	movs	r3, r1
 800c2e6:	0020      	movs	r0, r4
 800c2e8:	0029      	movs	r1, r5
 800c2ea:	f7f6 fa8f 	bl	800280c <__aeabi_dsub>
 800c2ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	9308      	str	r3, [sp, #32]
 800c2f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2f8:	0004      	movs	r4, r0
 800c2fa:	3330      	adds	r3, #48	; 0x30
 800c2fc:	7013      	strb	r3, [r2, #0]
 800c2fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c300:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c302:	000d      	movs	r5, r1
 800c304:	f7f4 f8a8 	bl	8000458 <__aeabi_dcmplt>
 800c308:	2800      	cmp	r0, #0
 800c30a:	d175      	bne.n	800c3f8 <_dtoa_r+0x67c>
 800c30c:	0022      	movs	r2, r4
 800c30e:	002b      	movs	r3, r5
 800c310:	2000      	movs	r0, #0
 800c312:	4940      	ldr	r1, [pc, #256]	; (800c414 <_dtoa_r+0x698>)
 800c314:	f7f6 fa7a 	bl	800280c <__aeabi_dsub>
 800c318:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c31a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c31c:	f7f4 f89c 	bl	8000458 <__aeabi_dcmplt>
 800c320:	2800      	cmp	r0, #0
 800c322:	d000      	beq.n	800c326 <_dtoa_r+0x5aa>
 800c324:	e0d2      	b.n	800c4cc <_dtoa_r+0x750>
 800c326:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c328:	9a08      	ldr	r2, [sp, #32]
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d100      	bne.n	800c330 <_dtoa_r+0x5b4>
 800c32e:	e770      	b.n	800c212 <_dtoa_r+0x496>
 800c330:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c332:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c334:	2200      	movs	r2, #0
 800c336:	4b38      	ldr	r3, [pc, #224]	; (800c418 <_dtoa_r+0x69c>)
 800c338:	f7f5 fffc 	bl	8002334 <__aeabi_dmul>
 800c33c:	4b36      	ldr	r3, [pc, #216]	; (800c418 <_dtoa_r+0x69c>)
 800c33e:	9010      	str	r0, [sp, #64]	; 0x40
 800c340:	9111      	str	r1, [sp, #68]	; 0x44
 800c342:	2200      	movs	r2, #0
 800c344:	0020      	movs	r0, r4
 800c346:	0029      	movs	r1, r5
 800c348:	f7f5 fff4 	bl	8002334 <__aeabi_dmul>
 800c34c:	9b08      	ldr	r3, [sp, #32]
 800c34e:	0004      	movs	r4, r0
 800c350:	000d      	movs	r5, r1
 800c352:	9317      	str	r3, [sp, #92]	; 0x5c
 800c354:	e7be      	b.n	800c2d4 <_dtoa_r+0x558>
 800c356:	9808      	ldr	r0, [sp, #32]
 800c358:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c35a:	f7f5 ffeb 	bl	8002334 <__aeabi_dmul>
 800c35e:	9a06      	ldr	r2, [sp, #24]
 800c360:	9b06      	ldr	r3, [sp, #24]
 800c362:	4694      	mov	ip, r2
 800c364:	9308      	str	r3, [sp, #32]
 800c366:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c368:	9010      	str	r0, [sp, #64]	; 0x40
 800c36a:	9111      	str	r1, [sp, #68]	; 0x44
 800c36c:	4463      	add	r3, ip
 800c36e:	9319      	str	r3, [sp, #100]	; 0x64
 800c370:	0029      	movs	r1, r5
 800c372:	0020      	movs	r0, r4
 800c374:	f7f6 fdfa 	bl	8002f6c <__aeabi_d2iz>
 800c378:	9017      	str	r0, [sp, #92]	; 0x5c
 800c37a:	f7f6 fe2d 	bl	8002fd8 <__aeabi_i2d>
 800c37e:	0002      	movs	r2, r0
 800c380:	000b      	movs	r3, r1
 800c382:	0020      	movs	r0, r4
 800c384:	0029      	movs	r1, r5
 800c386:	f7f6 fa41 	bl	800280c <__aeabi_dsub>
 800c38a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c38c:	9a08      	ldr	r2, [sp, #32]
 800c38e:	3330      	adds	r3, #48	; 0x30
 800c390:	7013      	strb	r3, [r2, #0]
 800c392:	0013      	movs	r3, r2
 800c394:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c396:	3301      	adds	r3, #1
 800c398:	0004      	movs	r4, r0
 800c39a:	000d      	movs	r5, r1
 800c39c:	9308      	str	r3, [sp, #32]
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d12c      	bne.n	800c3fc <_dtoa_r+0x680>
 800c3a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c3a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c3a6:	9a06      	ldr	r2, [sp, #24]
 800c3a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3aa:	4694      	mov	ip, r2
 800c3ac:	4463      	add	r3, ip
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	9308      	str	r3, [sp, #32]
 800c3b2:	4b1e      	ldr	r3, [pc, #120]	; (800c42c <_dtoa_r+0x6b0>)
 800c3b4:	f7f5 f880 	bl	80014b8 <__aeabi_dadd>
 800c3b8:	0002      	movs	r2, r0
 800c3ba:	000b      	movs	r3, r1
 800c3bc:	0020      	movs	r0, r4
 800c3be:	0029      	movs	r1, r5
 800c3c0:	f7f4 f85e 	bl	8000480 <__aeabi_dcmpgt>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d000      	beq.n	800c3ca <_dtoa_r+0x64e>
 800c3c8:	e080      	b.n	800c4cc <_dtoa_r+0x750>
 800c3ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c3cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c3ce:	2000      	movs	r0, #0
 800c3d0:	4916      	ldr	r1, [pc, #88]	; (800c42c <_dtoa_r+0x6b0>)
 800c3d2:	f7f6 fa1b 	bl	800280c <__aeabi_dsub>
 800c3d6:	0002      	movs	r2, r0
 800c3d8:	000b      	movs	r3, r1
 800c3da:	0020      	movs	r0, r4
 800c3dc:	0029      	movs	r1, r5
 800c3de:	f7f4 f83b 	bl	8000458 <__aeabi_dcmplt>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d100      	bne.n	800c3e8 <_dtoa_r+0x66c>
 800c3e6:	e714      	b.n	800c212 <_dtoa_r+0x496>
 800c3e8:	9b08      	ldr	r3, [sp, #32]
 800c3ea:	001a      	movs	r2, r3
 800c3ec:	3a01      	subs	r2, #1
 800c3ee:	9208      	str	r2, [sp, #32]
 800c3f0:	7812      	ldrb	r2, [r2, #0]
 800c3f2:	2a30      	cmp	r2, #48	; 0x30
 800c3f4:	d0f8      	beq.n	800c3e8 <_dtoa_r+0x66c>
 800c3f6:	9308      	str	r3, [sp, #32]
 800c3f8:	9602      	str	r6, [sp, #8]
 800c3fa:	e055      	b.n	800c4a8 <_dtoa_r+0x72c>
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	4b06      	ldr	r3, [pc, #24]	; (800c418 <_dtoa_r+0x69c>)
 800c400:	f7f5 ff98 	bl	8002334 <__aeabi_dmul>
 800c404:	0004      	movs	r4, r0
 800c406:	000d      	movs	r5, r1
 800c408:	e7b2      	b.n	800c370 <_dtoa_r+0x5f4>
 800c40a:	46c0      	nop			; (mov r8, r8)
 800c40c:	0800ece0 	.word	0x0800ece0
 800c410:	0800ecb8 	.word	0x0800ecb8
 800c414:	3ff00000 	.word	0x3ff00000
 800c418:	40240000 	.word	0x40240000
 800c41c:	401c0000 	.word	0x401c0000
 800c420:	fcc00000 	.word	0xfcc00000
 800c424:	40140000 	.word	0x40140000
 800c428:	7cc00000 	.word	0x7cc00000
 800c42c:	3fe00000 	.word	0x3fe00000
 800c430:	9b07      	ldr	r3, [sp, #28]
 800c432:	9e06      	ldr	r6, [sp, #24]
 800c434:	3b01      	subs	r3, #1
 800c436:	199b      	adds	r3, r3, r6
 800c438:	930c      	str	r3, [sp, #48]	; 0x30
 800c43a:	9c08      	ldr	r4, [sp, #32]
 800c43c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c43e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c442:	0020      	movs	r0, r4
 800c444:	0029      	movs	r1, r5
 800c446:	f7f5 fb73 	bl	8001b30 <__aeabi_ddiv>
 800c44a:	f7f6 fd8f 	bl	8002f6c <__aeabi_d2iz>
 800c44e:	9007      	str	r0, [sp, #28]
 800c450:	f7f6 fdc2 	bl	8002fd8 <__aeabi_i2d>
 800c454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c458:	f7f5 ff6c 	bl	8002334 <__aeabi_dmul>
 800c45c:	0002      	movs	r2, r0
 800c45e:	000b      	movs	r3, r1
 800c460:	0020      	movs	r0, r4
 800c462:	0029      	movs	r1, r5
 800c464:	f7f6 f9d2 	bl	800280c <__aeabi_dsub>
 800c468:	0033      	movs	r3, r6
 800c46a:	9a07      	ldr	r2, [sp, #28]
 800c46c:	3601      	adds	r6, #1
 800c46e:	3230      	adds	r2, #48	; 0x30
 800c470:	701a      	strb	r2, [r3, #0]
 800c472:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c474:	9608      	str	r6, [sp, #32]
 800c476:	429a      	cmp	r2, r3
 800c478:	d139      	bne.n	800c4ee <_dtoa_r+0x772>
 800c47a:	0002      	movs	r2, r0
 800c47c:	000b      	movs	r3, r1
 800c47e:	f7f5 f81b 	bl	80014b8 <__aeabi_dadd>
 800c482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c486:	0004      	movs	r4, r0
 800c488:	000d      	movs	r5, r1
 800c48a:	f7f3 fff9 	bl	8000480 <__aeabi_dcmpgt>
 800c48e:	2800      	cmp	r0, #0
 800c490:	d11b      	bne.n	800c4ca <_dtoa_r+0x74e>
 800c492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c496:	0020      	movs	r0, r4
 800c498:	0029      	movs	r1, r5
 800c49a:	f7f3 ffd7 	bl	800044c <__aeabi_dcmpeq>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d002      	beq.n	800c4a8 <_dtoa_r+0x72c>
 800c4a2:	9b07      	ldr	r3, [sp, #28]
 800c4a4:	07db      	lsls	r3, r3, #31
 800c4a6:	d410      	bmi.n	800c4ca <_dtoa_r+0x74e>
 800c4a8:	0038      	movs	r0, r7
 800c4aa:	9905      	ldr	r1, [sp, #20]
 800c4ac:	f000 fd1c 	bl	800cee8 <_Bfree>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	9a08      	ldr	r2, [sp, #32]
 800c4b4:	9802      	ldr	r0, [sp, #8]
 800c4b6:	7013      	strb	r3, [r2, #0]
 800c4b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	6018      	str	r0, [r3, #0]
 800c4be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d100      	bne.n	800c4c6 <_dtoa_r+0x74a>
 800c4c4:	e4a6      	b.n	800be14 <_dtoa_r+0x98>
 800c4c6:	601a      	str	r2, [r3, #0]
 800c4c8:	e4a4      	b.n	800be14 <_dtoa_r+0x98>
 800c4ca:	9e02      	ldr	r6, [sp, #8]
 800c4cc:	9b08      	ldr	r3, [sp, #32]
 800c4ce:	9308      	str	r3, [sp, #32]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	781a      	ldrb	r2, [r3, #0]
 800c4d4:	2a39      	cmp	r2, #57	; 0x39
 800c4d6:	d106      	bne.n	800c4e6 <_dtoa_r+0x76a>
 800c4d8:	9a06      	ldr	r2, [sp, #24]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d1f7      	bne.n	800c4ce <_dtoa_r+0x752>
 800c4de:	2230      	movs	r2, #48	; 0x30
 800c4e0:	9906      	ldr	r1, [sp, #24]
 800c4e2:	3601      	adds	r6, #1
 800c4e4:	700a      	strb	r2, [r1, #0]
 800c4e6:	781a      	ldrb	r2, [r3, #0]
 800c4e8:	3201      	adds	r2, #1
 800c4ea:	701a      	strb	r2, [r3, #0]
 800c4ec:	e784      	b.n	800c3f8 <_dtoa_r+0x67c>
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	4baa      	ldr	r3, [pc, #680]	; (800c79c <_dtoa_r+0xa20>)
 800c4f2:	f7f5 ff1f 	bl	8002334 <__aeabi_dmul>
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	0004      	movs	r4, r0
 800c4fc:	000d      	movs	r5, r1
 800c4fe:	f7f3 ffa5 	bl	800044c <__aeabi_dcmpeq>
 800c502:	2800      	cmp	r0, #0
 800c504:	d09b      	beq.n	800c43e <_dtoa_r+0x6c2>
 800c506:	e7cf      	b.n	800c4a8 <_dtoa_r+0x72c>
 800c508:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c50a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c50c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c50e:	2d00      	cmp	r5, #0
 800c510:	d012      	beq.n	800c538 <_dtoa_r+0x7bc>
 800c512:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c514:	2a01      	cmp	r2, #1
 800c516:	dc66      	bgt.n	800c5e6 <_dtoa_r+0x86a>
 800c518:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c51a:	2a00      	cmp	r2, #0
 800c51c:	d05d      	beq.n	800c5da <_dtoa_r+0x85e>
 800c51e:	4aa0      	ldr	r2, [pc, #640]	; (800c7a0 <_dtoa_r+0xa24>)
 800c520:	189b      	adds	r3, r3, r2
 800c522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c524:	2101      	movs	r1, #1
 800c526:	18d2      	adds	r2, r2, r3
 800c528:	920a      	str	r2, [sp, #40]	; 0x28
 800c52a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c52c:	0038      	movs	r0, r7
 800c52e:	18d3      	adds	r3, r2, r3
 800c530:	930d      	str	r3, [sp, #52]	; 0x34
 800c532:	f000 fd89 	bl	800d048 <__i2b>
 800c536:	0005      	movs	r5, r0
 800c538:	2c00      	cmp	r4, #0
 800c53a:	dd0e      	ble.n	800c55a <_dtoa_r+0x7de>
 800c53c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c53e:	2b00      	cmp	r3, #0
 800c540:	dd0b      	ble.n	800c55a <_dtoa_r+0x7de>
 800c542:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c544:	0023      	movs	r3, r4
 800c546:	4294      	cmp	r4, r2
 800c548:	dd00      	ble.n	800c54c <_dtoa_r+0x7d0>
 800c54a:	0013      	movs	r3, r2
 800c54c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c54e:	1ae4      	subs	r4, r4, r3
 800c550:	1ad2      	subs	r2, r2, r3
 800c552:	920a      	str	r2, [sp, #40]	; 0x28
 800c554:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c556:	1ad3      	subs	r3, r2, r3
 800c558:	930d      	str	r3, [sp, #52]	; 0x34
 800c55a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d01f      	beq.n	800c5a0 <_dtoa_r+0x824>
 800c560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c562:	2b00      	cmp	r3, #0
 800c564:	d054      	beq.n	800c610 <_dtoa_r+0x894>
 800c566:	2e00      	cmp	r6, #0
 800c568:	dd11      	ble.n	800c58e <_dtoa_r+0x812>
 800c56a:	0029      	movs	r1, r5
 800c56c:	0032      	movs	r2, r6
 800c56e:	0038      	movs	r0, r7
 800c570:	f000 fe30 	bl	800d1d4 <__pow5mult>
 800c574:	9a05      	ldr	r2, [sp, #20]
 800c576:	0001      	movs	r1, r0
 800c578:	0005      	movs	r5, r0
 800c57a:	0038      	movs	r0, r7
 800c57c:	f000 fd7a 	bl	800d074 <__multiply>
 800c580:	9905      	ldr	r1, [sp, #20]
 800c582:	9014      	str	r0, [sp, #80]	; 0x50
 800c584:	0038      	movs	r0, r7
 800c586:	f000 fcaf 	bl	800cee8 <_Bfree>
 800c58a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c58c:	9305      	str	r3, [sp, #20]
 800c58e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c590:	1b9a      	subs	r2, r3, r6
 800c592:	42b3      	cmp	r3, r6
 800c594:	d004      	beq.n	800c5a0 <_dtoa_r+0x824>
 800c596:	0038      	movs	r0, r7
 800c598:	9905      	ldr	r1, [sp, #20]
 800c59a:	f000 fe1b 	bl	800d1d4 <__pow5mult>
 800c59e:	9005      	str	r0, [sp, #20]
 800c5a0:	2101      	movs	r1, #1
 800c5a2:	0038      	movs	r0, r7
 800c5a4:	f000 fd50 	bl	800d048 <__i2b>
 800c5a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5aa:	0006      	movs	r6, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	dd31      	ble.n	800c614 <_dtoa_r+0x898>
 800c5b0:	001a      	movs	r2, r3
 800c5b2:	0001      	movs	r1, r0
 800c5b4:	0038      	movs	r0, r7
 800c5b6:	f000 fe0d 	bl	800d1d4 <__pow5mult>
 800c5ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c5bc:	0006      	movs	r6, r0
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	dd2d      	ble.n	800c61e <_dtoa_r+0x8a2>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	930e      	str	r3, [sp, #56]	; 0x38
 800c5c6:	6933      	ldr	r3, [r6, #16]
 800c5c8:	3303      	adds	r3, #3
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	18f3      	adds	r3, r6, r3
 800c5ce:	6858      	ldr	r0, [r3, #4]
 800c5d0:	f000 fcf2 	bl	800cfb8 <__hi0bits>
 800c5d4:	2320      	movs	r3, #32
 800c5d6:	1a18      	subs	r0, r3, r0
 800c5d8:	e039      	b.n	800c64e <_dtoa_r+0x8d2>
 800c5da:	2336      	movs	r3, #54	; 0x36
 800c5dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c5de:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c5e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c5e2:	1a9b      	subs	r3, r3, r2
 800c5e4:	e79d      	b.n	800c522 <_dtoa_r+0x7a6>
 800c5e6:	9b07      	ldr	r3, [sp, #28]
 800c5e8:	1e5e      	subs	r6, r3, #1
 800c5ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5ec:	42b3      	cmp	r3, r6
 800c5ee:	db07      	blt.n	800c600 <_dtoa_r+0x884>
 800c5f0:	1b9e      	subs	r6, r3, r6
 800c5f2:	9b07      	ldr	r3, [sp, #28]
 800c5f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	da93      	bge.n	800c522 <_dtoa_r+0x7a6>
 800c5fa:	1ae4      	subs	r4, r4, r3
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	e790      	b.n	800c522 <_dtoa_r+0x7a6>
 800c600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c602:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c604:	1af3      	subs	r3, r6, r3
 800c606:	18d3      	adds	r3, r2, r3
 800c608:	960e      	str	r6, [sp, #56]	; 0x38
 800c60a:	9315      	str	r3, [sp, #84]	; 0x54
 800c60c:	2600      	movs	r6, #0
 800c60e:	e7f0      	b.n	800c5f2 <_dtoa_r+0x876>
 800c610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c612:	e7c0      	b.n	800c596 <_dtoa_r+0x81a>
 800c614:	2300      	movs	r3, #0
 800c616:	930e      	str	r3, [sp, #56]	; 0x38
 800c618:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	dc13      	bgt.n	800c646 <_dtoa_r+0x8ca>
 800c61e:	2300      	movs	r3, #0
 800c620:	930e      	str	r3, [sp, #56]	; 0x38
 800c622:	9b08      	ldr	r3, [sp, #32]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d10e      	bne.n	800c646 <_dtoa_r+0x8ca>
 800c628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c62a:	031b      	lsls	r3, r3, #12
 800c62c:	d10b      	bne.n	800c646 <_dtoa_r+0x8ca>
 800c62e:	4b5d      	ldr	r3, [pc, #372]	; (800c7a4 <_dtoa_r+0xa28>)
 800c630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c632:	4213      	tst	r3, r2
 800c634:	d007      	beq.n	800c646 <_dtoa_r+0x8ca>
 800c636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c638:	3301      	adds	r3, #1
 800c63a:	930a      	str	r3, [sp, #40]	; 0x28
 800c63c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c63e:	3301      	adds	r3, #1
 800c640:	930d      	str	r3, [sp, #52]	; 0x34
 800c642:	2301      	movs	r3, #1
 800c644:	930e      	str	r3, [sp, #56]	; 0x38
 800c646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c648:	2001      	movs	r0, #1
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1bb      	bne.n	800c5c6 <_dtoa_r+0x84a>
 800c64e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c650:	221f      	movs	r2, #31
 800c652:	1818      	adds	r0, r3, r0
 800c654:	0003      	movs	r3, r0
 800c656:	4013      	ands	r3, r2
 800c658:	4210      	tst	r0, r2
 800c65a:	d046      	beq.n	800c6ea <_dtoa_r+0x96e>
 800c65c:	3201      	adds	r2, #1
 800c65e:	1ad2      	subs	r2, r2, r3
 800c660:	2a04      	cmp	r2, #4
 800c662:	dd3f      	ble.n	800c6e4 <_dtoa_r+0x968>
 800c664:	221c      	movs	r2, #28
 800c666:	1ad3      	subs	r3, r2, r3
 800c668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c66a:	18e4      	adds	r4, r4, r3
 800c66c:	18d2      	adds	r2, r2, r3
 800c66e:	920a      	str	r2, [sp, #40]	; 0x28
 800c670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c672:	18d3      	adds	r3, r2, r3
 800c674:	930d      	str	r3, [sp, #52]	; 0x34
 800c676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c678:	2b00      	cmp	r3, #0
 800c67a:	dd05      	ble.n	800c688 <_dtoa_r+0x90c>
 800c67c:	001a      	movs	r2, r3
 800c67e:	0038      	movs	r0, r7
 800c680:	9905      	ldr	r1, [sp, #20]
 800c682:	f000 fe03 	bl	800d28c <__lshift>
 800c686:	9005      	str	r0, [sp, #20]
 800c688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	dd05      	ble.n	800c69a <_dtoa_r+0x91e>
 800c68e:	0031      	movs	r1, r6
 800c690:	001a      	movs	r2, r3
 800c692:	0038      	movs	r0, r7
 800c694:	f000 fdfa 	bl	800d28c <__lshift>
 800c698:	0006      	movs	r6, r0
 800c69a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d026      	beq.n	800c6ee <_dtoa_r+0x972>
 800c6a0:	0031      	movs	r1, r6
 800c6a2:	9805      	ldr	r0, [sp, #20]
 800c6a4:	f000 fe60 	bl	800d368 <__mcmp>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	da20      	bge.n	800c6ee <_dtoa_r+0x972>
 800c6ac:	9b02      	ldr	r3, [sp, #8]
 800c6ae:	220a      	movs	r2, #10
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	9302      	str	r3, [sp, #8]
 800c6b4:	0038      	movs	r0, r7
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	9905      	ldr	r1, [sp, #20]
 800c6ba:	f000 fc39 	bl	800cf30 <__multadd>
 800c6be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6c0:	9005      	str	r0, [sp, #20]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d100      	bne.n	800c6c8 <_dtoa_r+0x94c>
 800c6c6:	e166      	b.n	800c996 <_dtoa_r+0xc1a>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	0029      	movs	r1, r5
 800c6cc:	220a      	movs	r2, #10
 800c6ce:	0038      	movs	r0, r7
 800c6d0:	f000 fc2e 	bl	800cf30 <__multadd>
 800c6d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6d6:	0005      	movs	r5, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	dc47      	bgt.n	800c76c <_dtoa_r+0x9f0>
 800c6dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6de:	2b02      	cmp	r3, #2
 800c6e0:	dc0d      	bgt.n	800c6fe <_dtoa_r+0x982>
 800c6e2:	e043      	b.n	800c76c <_dtoa_r+0x9f0>
 800c6e4:	2a04      	cmp	r2, #4
 800c6e6:	d0c6      	beq.n	800c676 <_dtoa_r+0x8fa>
 800c6e8:	0013      	movs	r3, r2
 800c6ea:	331c      	adds	r3, #28
 800c6ec:	e7bc      	b.n	800c668 <_dtoa_r+0x8ec>
 800c6ee:	9b07      	ldr	r3, [sp, #28]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	dc35      	bgt.n	800c760 <_dtoa_r+0x9e4>
 800c6f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	dd32      	ble.n	800c760 <_dtoa_r+0x9e4>
 800c6fa:	9b07      	ldr	r3, [sp, #28]
 800c6fc:	930c      	str	r3, [sp, #48]	; 0x30
 800c6fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c700:	2b00      	cmp	r3, #0
 800c702:	d10c      	bne.n	800c71e <_dtoa_r+0x9a2>
 800c704:	0031      	movs	r1, r6
 800c706:	2205      	movs	r2, #5
 800c708:	0038      	movs	r0, r7
 800c70a:	f000 fc11 	bl	800cf30 <__multadd>
 800c70e:	0006      	movs	r6, r0
 800c710:	0001      	movs	r1, r0
 800c712:	9805      	ldr	r0, [sp, #20]
 800c714:	f000 fe28 	bl	800d368 <__mcmp>
 800c718:	2800      	cmp	r0, #0
 800c71a:	dd00      	ble.n	800c71e <_dtoa_r+0x9a2>
 800c71c:	e5a5      	b.n	800c26a <_dtoa_r+0x4ee>
 800c71e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c720:	43db      	mvns	r3, r3
 800c722:	9302      	str	r3, [sp, #8]
 800c724:	9b06      	ldr	r3, [sp, #24]
 800c726:	9308      	str	r3, [sp, #32]
 800c728:	2400      	movs	r4, #0
 800c72a:	0031      	movs	r1, r6
 800c72c:	0038      	movs	r0, r7
 800c72e:	f000 fbdb 	bl	800cee8 <_Bfree>
 800c732:	2d00      	cmp	r5, #0
 800c734:	d100      	bne.n	800c738 <_dtoa_r+0x9bc>
 800c736:	e6b7      	b.n	800c4a8 <_dtoa_r+0x72c>
 800c738:	2c00      	cmp	r4, #0
 800c73a:	d005      	beq.n	800c748 <_dtoa_r+0x9cc>
 800c73c:	42ac      	cmp	r4, r5
 800c73e:	d003      	beq.n	800c748 <_dtoa_r+0x9cc>
 800c740:	0021      	movs	r1, r4
 800c742:	0038      	movs	r0, r7
 800c744:	f000 fbd0 	bl	800cee8 <_Bfree>
 800c748:	0029      	movs	r1, r5
 800c74a:	0038      	movs	r0, r7
 800c74c:	f000 fbcc 	bl	800cee8 <_Bfree>
 800c750:	e6aa      	b.n	800c4a8 <_dtoa_r+0x72c>
 800c752:	2600      	movs	r6, #0
 800c754:	0035      	movs	r5, r6
 800c756:	e7e2      	b.n	800c71e <_dtoa_r+0x9a2>
 800c758:	9602      	str	r6, [sp, #8]
 800c75a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c75c:	0035      	movs	r5, r6
 800c75e:	e584      	b.n	800c26a <_dtoa_r+0x4ee>
 800c760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c762:	2b00      	cmp	r3, #0
 800c764:	d100      	bne.n	800c768 <_dtoa_r+0x9ec>
 800c766:	e0ce      	b.n	800c906 <_dtoa_r+0xb8a>
 800c768:	9b07      	ldr	r3, [sp, #28]
 800c76a:	930c      	str	r3, [sp, #48]	; 0x30
 800c76c:	2c00      	cmp	r4, #0
 800c76e:	dd05      	ble.n	800c77c <_dtoa_r+0xa00>
 800c770:	0029      	movs	r1, r5
 800c772:	0022      	movs	r2, r4
 800c774:	0038      	movs	r0, r7
 800c776:	f000 fd89 	bl	800d28c <__lshift>
 800c77a:	0005      	movs	r5, r0
 800c77c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c77e:	0028      	movs	r0, r5
 800c780:	2b00      	cmp	r3, #0
 800c782:	d022      	beq.n	800c7ca <_dtoa_r+0xa4e>
 800c784:	0038      	movs	r0, r7
 800c786:	6869      	ldr	r1, [r5, #4]
 800c788:	f000 fb6a 	bl	800ce60 <_Balloc>
 800c78c:	1e04      	subs	r4, r0, #0
 800c78e:	d10f      	bne.n	800c7b0 <_dtoa_r+0xa34>
 800c790:	0002      	movs	r2, r0
 800c792:	4b05      	ldr	r3, [pc, #20]	; (800c7a8 <_dtoa_r+0xa2c>)
 800c794:	4905      	ldr	r1, [pc, #20]	; (800c7ac <_dtoa_r+0xa30>)
 800c796:	f7ff fb06 	bl	800bda6 <_dtoa_r+0x2a>
 800c79a:	46c0      	nop			; (mov r8, r8)
 800c79c:	40240000 	.word	0x40240000
 800c7a0:	00000433 	.word	0x00000433
 800c7a4:	7ff00000 	.word	0x7ff00000
 800c7a8:	0800ebe7 	.word	0x0800ebe7
 800c7ac:	000002ea 	.word	0x000002ea
 800c7b0:	0029      	movs	r1, r5
 800c7b2:	692b      	ldr	r3, [r5, #16]
 800c7b4:	310c      	adds	r1, #12
 800c7b6:	1c9a      	adds	r2, r3, #2
 800c7b8:	0092      	lsls	r2, r2, #2
 800c7ba:	300c      	adds	r0, #12
 800c7bc:	f7fe fc5a 	bl	800b074 <memcpy>
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	0021      	movs	r1, r4
 800c7c4:	0038      	movs	r0, r7
 800c7c6:	f000 fd61 	bl	800d28c <__lshift>
 800c7ca:	9b06      	ldr	r3, [sp, #24]
 800c7cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	189b      	adds	r3, r3, r2
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	002c      	movs	r4, r5
 800c7d8:	0005      	movs	r5, r0
 800c7da:	9314      	str	r3, [sp, #80]	; 0x50
 800c7dc:	9b08      	ldr	r3, [sp, #32]
 800c7de:	4013      	ands	r3, r2
 800c7e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7e2:	0031      	movs	r1, r6
 800c7e4:	9805      	ldr	r0, [sp, #20]
 800c7e6:	f7ff fa3d 	bl	800bc64 <quorem>
 800c7ea:	0003      	movs	r3, r0
 800c7ec:	0021      	movs	r1, r4
 800c7ee:	3330      	adds	r3, #48	; 0x30
 800c7f0:	900d      	str	r0, [sp, #52]	; 0x34
 800c7f2:	9805      	ldr	r0, [sp, #20]
 800c7f4:	9307      	str	r3, [sp, #28]
 800c7f6:	f000 fdb7 	bl	800d368 <__mcmp>
 800c7fa:	002a      	movs	r2, r5
 800c7fc:	900e      	str	r0, [sp, #56]	; 0x38
 800c7fe:	0031      	movs	r1, r6
 800c800:	0038      	movs	r0, r7
 800c802:	f000 fdcd 	bl	800d3a0 <__mdiff>
 800c806:	68c3      	ldr	r3, [r0, #12]
 800c808:	9008      	str	r0, [sp, #32]
 800c80a:	9310      	str	r3, [sp, #64]	; 0x40
 800c80c:	2301      	movs	r3, #1
 800c80e:	930c      	str	r3, [sp, #48]	; 0x30
 800c810:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c812:	2b00      	cmp	r3, #0
 800c814:	d104      	bne.n	800c820 <_dtoa_r+0xaa4>
 800c816:	0001      	movs	r1, r0
 800c818:	9805      	ldr	r0, [sp, #20]
 800c81a:	f000 fda5 	bl	800d368 <__mcmp>
 800c81e:	900c      	str	r0, [sp, #48]	; 0x30
 800c820:	0038      	movs	r0, r7
 800c822:	9908      	ldr	r1, [sp, #32]
 800c824:	f000 fb60 	bl	800cee8 <_Bfree>
 800c828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c82a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c82c:	3301      	adds	r3, #1
 800c82e:	9308      	str	r3, [sp, #32]
 800c830:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c832:	4313      	orrs	r3, r2
 800c834:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c836:	4313      	orrs	r3, r2
 800c838:	d10c      	bne.n	800c854 <_dtoa_r+0xad8>
 800c83a:	9b07      	ldr	r3, [sp, #28]
 800c83c:	2b39      	cmp	r3, #57	; 0x39
 800c83e:	d026      	beq.n	800c88e <_dtoa_r+0xb12>
 800c840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c842:	2b00      	cmp	r3, #0
 800c844:	dd02      	ble.n	800c84c <_dtoa_r+0xad0>
 800c846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c848:	3331      	adds	r3, #49	; 0x31
 800c84a:	9307      	str	r3, [sp, #28]
 800c84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c84e:	9a07      	ldr	r2, [sp, #28]
 800c850:	701a      	strb	r2, [r3, #0]
 800c852:	e76a      	b.n	800c72a <_dtoa_r+0x9ae>
 800c854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c856:	2b00      	cmp	r3, #0
 800c858:	db04      	blt.n	800c864 <_dtoa_r+0xae8>
 800c85a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c85c:	4313      	orrs	r3, r2
 800c85e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c860:	4313      	orrs	r3, r2
 800c862:	d11f      	bne.n	800c8a4 <_dtoa_r+0xb28>
 800c864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c866:	2b00      	cmp	r3, #0
 800c868:	ddf0      	ble.n	800c84c <_dtoa_r+0xad0>
 800c86a:	9905      	ldr	r1, [sp, #20]
 800c86c:	2201      	movs	r2, #1
 800c86e:	0038      	movs	r0, r7
 800c870:	f000 fd0c 	bl	800d28c <__lshift>
 800c874:	0031      	movs	r1, r6
 800c876:	9005      	str	r0, [sp, #20]
 800c878:	f000 fd76 	bl	800d368 <__mcmp>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	dc03      	bgt.n	800c888 <_dtoa_r+0xb0c>
 800c880:	d1e4      	bne.n	800c84c <_dtoa_r+0xad0>
 800c882:	9b07      	ldr	r3, [sp, #28]
 800c884:	07db      	lsls	r3, r3, #31
 800c886:	d5e1      	bpl.n	800c84c <_dtoa_r+0xad0>
 800c888:	9b07      	ldr	r3, [sp, #28]
 800c88a:	2b39      	cmp	r3, #57	; 0x39
 800c88c:	d1db      	bne.n	800c846 <_dtoa_r+0xaca>
 800c88e:	2339      	movs	r3, #57	; 0x39
 800c890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c892:	7013      	strb	r3, [r2, #0]
 800c894:	9b08      	ldr	r3, [sp, #32]
 800c896:	9308      	str	r3, [sp, #32]
 800c898:	3b01      	subs	r3, #1
 800c89a:	781a      	ldrb	r2, [r3, #0]
 800c89c:	2a39      	cmp	r2, #57	; 0x39
 800c89e:	d068      	beq.n	800c972 <_dtoa_r+0xbf6>
 800c8a0:	3201      	adds	r2, #1
 800c8a2:	e7d5      	b.n	800c850 <_dtoa_r+0xad4>
 800c8a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	dd07      	ble.n	800c8ba <_dtoa_r+0xb3e>
 800c8aa:	9b07      	ldr	r3, [sp, #28]
 800c8ac:	2b39      	cmp	r3, #57	; 0x39
 800c8ae:	d0ee      	beq.n	800c88e <_dtoa_r+0xb12>
 800c8b0:	9b07      	ldr	r3, [sp, #28]
 800c8b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	7013      	strb	r3, [r2, #0]
 800c8b8:	e737      	b.n	800c72a <_dtoa_r+0x9ae>
 800c8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8bc:	9a07      	ldr	r2, [sp, #28]
 800c8be:	701a      	strb	r2, [r3, #0]
 800c8c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d03e      	beq.n	800c946 <_dtoa_r+0xbca>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	220a      	movs	r2, #10
 800c8cc:	9905      	ldr	r1, [sp, #20]
 800c8ce:	0038      	movs	r0, r7
 800c8d0:	f000 fb2e 	bl	800cf30 <__multadd>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	9005      	str	r0, [sp, #20]
 800c8d8:	220a      	movs	r2, #10
 800c8da:	0021      	movs	r1, r4
 800c8dc:	0038      	movs	r0, r7
 800c8de:	42ac      	cmp	r4, r5
 800c8e0:	d106      	bne.n	800c8f0 <_dtoa_r+0xb74>
 800c8e2:	f000 fb25 	bl	800cf30 <__multadd>
 800c8e6:	0004      	movs	r4, r0
 800c8e8:	0005      	movs	r5, r0
 800c8ea:	9b08      	ldr	r3, [sp, #32]
 800c8ec:	930a      	str	r3, [sp, #40]	; 0x28
 800c8ee:	e778      	b.n	800c7e2 <_dtoa_r+0xa66>
 800c8f0:	f000 fb1e 	bl	800cf30 <__multadd>
 800c8f4:	0029      	movs	r1, r5
 800c8f6:	0004      	movs	r4, r0
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	220a      	movs	r2, #10
 800c8fc:	0038      	movs	r0, r7
 800c8fe:	f000 fb17 	bl	800cf30 <__multadd>
 800c902:	0005      	movs	r5, r0
 800c904:	e7f1      	b.n	800c8ea <_dtoa_r+0xb6e>
 800c906:	9b07      	ldr	r3, [sp, #28]
 800c908:	930c      	str	r3, [sp, #48]	; 0x30
 800c90a:	2400      	movs	r4, #0
 800c90c:	0031      	movs	r1, r6
 800c90e:	9805      	ldr	r0, [sp, #20]
 800c910:	f7ff f9a8 	bl	800bc64 <quorem>
 800c914:	9b06      	ldr	r3, [sp, #24]
 800c916:	3030      	adds	r0, #48	; 0x30
 800c918:	5518      	strb	r0, [r3, r4]
 800c91a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c91c:	3401      	adds	r4, #1
 800c91e:	9007      	str	r0, [sp, #28]
 800c920:	42a3      	cmp	r3, r4
 800c922:	dd07      	ble.n	800c934 <_dtoa_r+0xbb8>
 800c924:	2300      	movs	r3, #0
 800c926:	220a      	movs	r2, #10
 800c928:	0038      	movs	r0, r7
 800c92a:	9905      	ldr	r1, [sp, #20]
 800c92c:	f000 fb00 	bl	800cf30 <__multadd>
 800c930:	9005      	str	r0, [sp, #20]
 800c932:	e7eb      	b.n	800c90c <_dtoa_r+0xb90>
 800c934:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c936:	2001      	movs	r0, #1
 800c938:	2b00      	cmp	r3, #0
 800c93a:	dd00      	ble.n	800c93e <_dtoa_r+0xbc2>
 800c93c:	0018      	movs	r0, r3
 800c93e:	2400      	movs	r4, #0
 800c940:	9b06      	ldr	r3, [sp, #24]
 800c942:	181b      	adds	r3, r3, r0
 800c944:	9308      	str	r3, [sp, #32]
 800c946:	9905      	ldr	r1, [sp, #20]
 800c948:	2201      	movs	r2, #1
 800c94a:	0038      	movs	r0, r7
 800c94c:	f000 fc9e 	bl	800d28c <__lshift>
 800c950:	0031      	movs	r1, r6
 800c952:	9005      	str	r0, [sp, #20]
 800c954:	f000 fd08 	bl	800d368 <__mcmp>
 800c958:	2800      	cmp	r0, #0
 800c95a:	dc9b      	bgt.n	800c894 <_dtoa_r+0xb18>
 800c95c:	d102      	bne.n	800c964 <_dtoa_r+0xbe8>
 800c95e:	9b07      	ldr	r3, [sp, #28]
 800c960:	07db      	lsls	r3, r3, #31
 800c962:	d497      	bmi.n	800c894 <_dtoa_r+0xb18>
 800c964:	9b08      	ldr	r3, [sp, #32]
 800c966:	9308      	str	r3, [sp, #32]
 800c968:	3b01      	subs	r3, #1
 800c96a:	781a      	ldrb	r2, [r3, #0]
 800c96c:	2a30      	cmp	r2, #48	; 0x30
 800c96e:	d0fa      	beq.n	800c966 <_dtoa_r+0xbea>
 800c970:	e6db      	b.n	800c72a <_dtoa_r+0x9ae>
 800c972:	9a06      	ldr	r2, [sp, #24]
 800c974:	429a      	cmp	r2, r3
 800c976:	d18e      	bne.n	800c896 <_dtoa_r+0xb1a>
 800c978:	9b02      	ldr	r3, [sp, #8]
 800c97a:	3301      	adds	r3, #1
 800c97c:	9302      	str	r3, [sp, #8]
 800c97e:	2331      	movs	r3, #49	; 0x31
 800c980:	e799      	b.n	800c8b6 <_dtoa_r+0xb3a>
 800c982:	4b09      	ldr	r3, [pc, #36]	; (800c9a8 <_dtoa_r+0xc2c>)
 800c984:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c986:	9306      	str	r3, [sp, #24]
 800c988:	4b08      	ldr	r3, [pc, #32]	; (800c9ac <_dtoa_r+0xc30>)
 800c98a:	2a00      	cmp	r2, #0
 800c98c:	d001      	beq.n	800c992 <_dtoa_r+0xc16>
 800c98e:	f7ff fa3f 	bl	800be10 <_dtoa_r+0x94>
 800c992:	f7ff fa3f 	bl	800be14 <_dtoa_r+0x98>
 800c996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c998:	2b00      	cmp	r3, #0
 800c99a:	dcb6      	bgt.n	800c90a <_dtoa_r+0xb8e>
 800c99c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c99e:	2b02      	cmp	r3, #2
 800c9a0:	dd00      	ble.n	800c9a4 <_dtoa_r+0xc28>
 800c9a2:	e6ac      	b.n	800c6fe <_dtoa_r+0x982>
 800c9a4:	e7b1      	b.n	800c90a <_dtoa_r+0xb8e>
 800c9a6:	46c0      	nop			; (mov r8, r8)
 800c9a8:	0800eb68 	.word	0x0800eb68
 800c9ac:	0800eb70 	.word	0x0800eb70

0800c9b0 <__sflush_r>:
 800c9b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9b2:	898b      	ldrh	r3, [r1, #12]
 800c9b4:	0005      	movs	r5, r0
 800c9b6:	000c      	movs	r4, r1
 800c9b8:	071a      	lsls	r2, r3, #28
 800c9ba:	d45f      	bmi.n	800ca7c <__sflush_r+0xcc>
 800c9bc:	684a      	ldr	r2, [r1, #4]
 800c9be:	2a00      	cmp	r2, #0
 800c9c0:	dc04      	bgt.n	800c9cc <__sflush_r+0x1c>
 800c9c2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c9c4:	2a00      	cmp	r2, #0
 800c9c6:	dc01      	bgt.n	800c9cc <__sflush_r+0x1c>
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c9cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c9ce:	2f00      	cmp	r7, #0
 800c9d0:	d0fa      	beq.n	800c9c8 <__sflush_r+0x18>
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	2180      	movs	r1, #128	; 0x80
 800c9d6:	682e      	ldr	r6, [r5, #0]
 800c9d8:	602a      	str	r2, [r5, #0]
 800c9da:	001a      	movs	r2, r3
 800c9dc:	0149      	lsls	r1, r1, #5
 800c9de:	400a      	ands	r2, r1
 800c9e0:	420b      	tst	r3, r1
 800c9e2:	d034      	beq.n	800ca4e <__sflush_r+0x9e>
 800c9e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9e6:	89a3      	ldrh	r3, [r4, #12]
 800c9e8:	075b      	lsls	r3, r3, #29
 800c9ea:	d506      	bpl.n	800c9fa <__sflush_r+0x4a>
 800c9ec:	6863      	ldr	r3, [r4, #4]
 800c9ee:	1ac0      	subs	r0, r0, r3
 800c9f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d001      	beq.n	800c9fa <__sflush_r+0x4a>
 800c9f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9f8:	1ac0      	subs	r0, r0, r3
 800c9fa:	0002      	movs	r2, r0
 800c9fc:	6a21      	ldr	r1, [r4, #32]
 800c9fe:	2300      	movs	r3, #0
 800ca00:	0028      	movs	r0, r5
 800ca02:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ca04:	47b8      	blx	r7
 800ca06:	89a1      	ldrh	r1, [r4, #12]
 800ca08:	1c43      	adds	r3, r0, #1
 800ca0a:	d106      	bne.n	800ca1a <__sflush_r+0x6a>
 800ca0c:	682b      	ldr	r3, [r5, #0]
 800ca0e:	2b1d      	cmp	r3, #29
 800ca10:	d831      	bhi.n	800ca76 <__sflush_r+0xc6>
 800ca12:	4a2c      	ldr	r2, [pc, #176]	; (800cac4 <__sflush_r+0x114>)
 800ca14:	40da      	lsrs	r2, r3
 800ca16:	07d3      	lsls	r3, r2, #31
 800ca18:	d52d      	bpl.n	800ca76 <__sflush_r+0xc6>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	6063      	str	r3, [r4, #4]
 800ca1e:	6923      	ldr	r3, [r4, #16]
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	04cb      	lsls	r3, r1, #19
 800ca24:	d505      	bpl.n	800ca32 <__sflush_r+0x82>
 800ca26:	1c43      	adds	r3, r0, #1
 800ca28:	d102      	bne.n	800ca30 <__sflush_r+0x80>
 800ca2a:	682b      	ldr	r3, [r5, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d100      	bne.n	800ca32 <__sflush_r+0x82>
 800ca30:	6560      	str	r0, [r4, #84]	; 0x54
 800ca32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca34:	602e      	str	r6, [r5, #0]
 800ca36:	2900      	cmp	r1, #0
 800ca38:	d0c6      	beq.n	800c9c8 <__sflush_r+0x18>
 800ca3a:	0023      	movs	r3, r4
 800ca3c:	3344      	adds	r3, #68	; 0x44
 800ca3e:	4299      	cmp	r1, r3
 800ca40:	d002      	beq.n	800ca48 <__sflush_r+0x98>
 800ca42:	0028      	movs	r0, r5
 800ca44:	f000 fdd4 	bl	800d5f0 <_free_r>
 800ca48:	2000      	movs	r0, #0
 800ca4a:	6360      	str	r0, [r4, #52]	; 0x34
 800ca4c:	e7bd      	b.n	800c9ca <__sflush_r+0x1a>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	0028      	movs	r0, r5
 800ca52:	6a21      	ldr	r1, [r4, #32]
 800ca54:	47b8      	blx	r7
 800ca56:	1c43      	adds	r3, r0, #1
 800ca58:	d1c5      	bne.n	800c9e6 <__sflush_r+0x36>
 800ca5a:	682b      	ldr	r3, [r5, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d0c2      	beq.n	800c9e6 <__sflush_r+0x36>
 800ca60:	2b1d      	cmp	r3, #29
 800ca62:	d001      	beq.n	800ca68 <__sflush_r+0xb8>
 800ca64:	2b16      	cmp	r3, #22
 800ca66:	d101      	bne.n	800ca6c <__sflush_r+0xbc>
 800ca68:	602e      	str	r6, [r5, #0]
 800ca6a:	e7ad      	b.n	800c9c8 <__sflush_r+0x18>
 800ca6c:	2340      	movs	r3, #64	; 0x40
 800ca6e:	89a2      	ldrh	r2, [r4, #12]
 800ca70:	4313      	orrs	r3, r2
 800ca72:	81a3      	strh	r3, [r4, #12]
 800ca74:	e7a9      	b.n	800c9ca <__sflush_r+0x1a>
 800ca76:	2340      	movs	r3, #64	; 0x40
 800ca78:	430b      	orrs	r3, r1
 800ca7a:	e7fa      	b.n	800ca72 <__sflush_r+0xc2>
 800ca7c:	690f      	ldr	r7, [r1, #16]
 800ca7e:	2f00      	cmp	r7, #0
 800ca80:	d0a2      	beq.n	800c9c8 <__sflush_r+0x18>
 800ca82:	680a      	ldr	r2, [r1, #0]
 800ca84:	600f      	str	r7, [r1, #0]
 800ca86:	1bd2      	subs	r2, r2, r7
 800ca88:	9201      	str	r2, [sp, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	079b      	lsls	r3, r3, #30
 800ca8e:	d100      	bne.n	800ca92 <__sflush_r+0xe2>
 800ca90:	694a      	ldr	r2, [r1, #20]
 800ca92:	60a2      	str	r2, [r4, #8]
 800ca94:	9b01      	ldr	r3, [sp, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	dc00      	bgt.n	800ca9c <__sflush_r+0xec>
 800ca9a:	e795      	b.n	800c9c8 <__sflush_r+0x18>
 800ca9c:	003a      	movs	r2, r7
 800ca9e:	0028      	movs	r0, r5
 800caa0:	9b01      	ldr	r3, [sp, #4]
 800caa2:	6a21      	ldr	r1, [r4, #32]
 800caa4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800caa6:	47b0      	blx	r6
 800caa8:	2800      	cmp	r0, #0
 800caaa:	dc06      	bgt.n	800caba <__sflush_r+0x10a>
 800caac:	2340      	movs	r3, #64	; 0x40
 800caae:	2001      	movs	r0, #1
 800cab0:	89a2      	ldrh	r2, [r4, #12]
 800cab2:	4240      	negs	r0, r0
 800cab4:	4313      	orrs	r3, r2
 800cab6:	81a3      	strh	r3, [r4, #12]
 800cab8:	e787      	b.n	800c9ca <__sflush_r+0x1a>
 800caba:	9b01      	ldr	r3, [sp, #4]
 800cabc:	183f      	adds	r7, r7, r0
 800cabe:	1a1b      	subs	r3, r3, r0
 800cac0:	9301      	str	r3, [sp, #4]
 800cac2:	e7e7      	b.n	800ca94 <__sflush_r+0xe4>
 800cac4:	20400001 	.word	0x20400001

0800cac8 <_fflush_r>:
 800cac8:	690b      	ldr	r3, [r1, #16]
 800caca:	b570      	push	{r4, r5, r6, lr}
 800cacc:	0005      	movs	r5, r0
 800cace:	000c      	movs	r4, r1
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d102      	bne.n	800cada <_fflush_r+0x12>
 800cad4:	2500      	movs	r5, #0
 800cad6:	0028      	movs	r0, r5
 800cad8:	bd70      	pop	{r4, r5, r6, pc}
 800cada:	2800      	cmp	r0, #0
 800cadc:	d004      	beq.n	800cae8 <_fflush_r+0x20>
 800cade:	6983      	ldr	r3, [r0, #24]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d101      	bne.n	800cae8 <_fflush_r+0x20>
 800cae4:	f000 f892 	bl	800cc0c <__sinit>
 800cae8:	4b14      	ldr	r3, [pc, #80]	; (800cb3c <_fflush_r+0x74>)
 800caea:	429c      	cmp	r4, r3
 800caec:	d11b      	bne.n	800cb26 <_fflush_r+0x5e>
 800caee:	686c      	ldr	r4, [r5, #4]
 800caf0:	220c      	movs	r2, #12
 800caf2:	5ea3      	ldrsh	r3, [r4, r2]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d0ed      	beq.n	800cad4 <_fflush_r+0xc>
 800caf8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cafa:	07d2      	lsls	r2, r2, #31
 800cafc:	d404      	bmi.n	800cb08 <_fflush_r+0x40>
 800cafe:	059b      	lsls	r3, r3, #22
 800cb00:	d402      	bmi.n	800cb08 <_fflush_r+0x40>
 800cb02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb04:	f000 f927 	bl	800cd56 <__retarget_lock_acquire_recursive>
 800cb08:	0028      	movs	r0, r5
 800cb0a:	0021      	movs	r1, r4
 800cb0c:	f7ff ff50 	bl	800c9b0 <__sflush_r>
 800cb10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb12:	0005      	movs	r5, r0
 800cb14:	07db      	lsls	r3, r3, #31
 800cb16:	d4de      	bmi.n	800cad6 <_fflush_r+0xe>
 800cb18:	89a3      	ldrh	r3, [r4, #12]
 800cb1a:	059b      	lsls	r3, r3, #22
 800cb1c:	d4db      	bmi.n	800cad6 <_fflush_r+0xe>
 800cb1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb20:	f000 f91a 	bl	800cd58 <__retarget_lock_release_recursive>
 800cb24:	e7d7      	b.n	800cad6 <_fflush_r+0xe>
 800cb26:	4b06      	ldr	r3, [pc, #24]	; (800cb40 <_fflush_r+0x78>)
 800cb28:	429c      	cmp	r4, r3
 800cb2a:	d101      	bne.n	800cb30 <_fflush_r+0x68>
 800cb2c:	68ac      	ldr	r4, [r5, #8]
 800cb2e:	e7df      	b.n	800caf0 <_fflush_r+0x28>
 800cb30:	4b04      	ldr	r3, [pc, #16]	; (800cb44 <_fflush_r+0x7c>)
 800cb32:	429c      	cmp	r4, r3
 800cb34:	d1dc      	bne.n	800caf0 <_fflush_r+0x28>
 800cb36:	68ec      	ldr	r4, [r5, #12]
 800cb38:	e7da      	b.n	800caf0 <_fflush_r+0x28>
 800cb3a:	46c0      	nop			; (mov r8, r8)
 800cb3c:	0800ec18 	.word	0x0800ec18
 800cb40:	0800ec38 	.word	0x0800ec38
 800cb44:	0800ebf8 	.word	0x0800ebf8

0800cb48 <std>:
 800cb48:	2300      	movs	r3, #0
 800cb4a:	b510      	push	{r4, lr}
 800cb4c:	0004      	movs	r4, r0
 800cb4e:	6003      	str	r3, [r0, #0]
 800cb50:	6043      	str	r3, [r0, #4]
 800cb52:	6083      	str	r3, [r0, #8]
 800cb54:	8181      	strh	r1, [r0, #12]
 800cb56:	6643      	str	r3, [r0, #100]	; 0x64
 800cb58:	0019      	movs	r1, r3
 800cb5a:	81c2      	strh	r2, [r0, #14]
 800cb5c:	6103      	str	r3, [r0, #16]
 800cb5e:	6143      	str	r3, [r0, #20]
 800cb60:	6183      	str	r3, [r0, #24]
 800cb62:	2208      	movs	r2, #8
 800cb64:	305c      	adds	r0, #92	; 0x5c
 800cb66:	f7fe fa8e 	bl	800b086 <memset>
 800cb6a:	4b05      	ldr	r3, [pc, #20]	; (800cb80 <std+0x38>)
 800cb6c:	6224      	str	r4, [r4, #32]
 800cb6e:	6263      	str	r3, [r4, #36]	; 0x24
 800cb70:	4b04      	ldr	r3, [pc, #16]	; (800cb84 <std+0x3c>)
 800cb72:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb74:	4b04      	ldr	r3, [pc, #16]	; (800cb88 <std+0x40>)
 800cb76:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb78:	4b04      	ldr	r3, [pc, #16]	; (800cb8c <std+0x44>)
 800cb7a:	6323      	str	r3, [r4, #48]	; 0x30
 800cb7c:	bd10      	pop	{r4, pc}
 800cb7e:	46c0      	nop			; (mov r8, r8)
 800cb80:	0800db31 	.word	0x0800db31
 800cb84:	0800db59 	.word	0x0800db59
 800cb88:	0800db91 	.word	0x0800db91
 800cb8c:	0800dbbd 	.word	0x0800dbbd

0800cb90 <_cleanup_r>:
 800cb90:	b510      	push	{r4, lr}
 800cb92:	4902      	ldr	r1, [pc, #8]	; (800cb9c <_cleanup_r+0xc>)
 800cb94:	f000 f8ba 	bl	800cd0c <_fwalk_reent>
 800cb98:	bd10      	pop	{r4, pc}
 800cb9a:	46c0      	nop			; (mov r8, r8)
 800cb9c:	0800cac9 	.word	0x0800cac9

0800cba0 <__sfmoreglue>:
 800cba0:	b570      	push	{r4, r5, r6, lr}
 800cba2:	2568      	movs	r5, #104	; 0x68
 800cba4:	1e4a      	subs	r2, r1, #1
 800cba6:	4355      	muls	r5, r2
 800cba8:	000e      	movs	r6, r1
 800cbaa:	0029      	movs	r1, r5
 800cbac:	3174      	adds	r1, #116	; 0x74
 800cbae:	f000 fd8b 	bl	800d6c8 <_malloc_r>
 800cbb2:	1e04      	subs	r4, r0, #0
 800cbb4:	d008      	beq.n	800cbc8 <__sfmoreglue+0x28>
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	002a      	movs	r2, r5
 800cbba:	6001      	str	r1, [r0, #0]
 800cbbc:	6046      	str	r6, [r0, #4]
 800cbbe:	300c      	adds	r0, #12
 800cbc0:	60a0      	str	r0, [r4, #8]
 800cbc2:	3268      	adds	r2, #104	; 0x68
 800cbc4:	f7fe fa5f 	bl	800b086 <memset>
 800cbc8:	0020      	movs	r0, r4
 800cbca:	bd70      	pop	{r4, r5, r6, pc}

0800cbcc <__sfp_lock_acquire>:
 800cbcc:	b510      	push	{r4, lr}
 800cbce:	4802      	ldr	r0, [pc, #8]	; (800cbd8 <__sfp_lock_acquire+0xc>)
 800cbd0:	f000 f8c1 	bl	800cd56 <__retarget_lock_acquire_recursive>
 800cbd4:	bd10      	pop	{r4, pc}
 800cbd6:	46c0      	nop			; (mov r8, r8)
 800cbd8:	200006a5 	.word	0x200006a5

0800cbdc <__sfp_lock_release>:
 800cbdc:	b510      	push	{r4, lr}
 800cbde:	4802      	ldr	r0, [pc, #8]	; (800cbe8 <__sfp_lock_release+0xc>)
 800cbe0:	f000 f8ba 	bl	800cd58 <__retarget_lock_release_recursive>
 800cbe4:	bd10      	pop	{r4, pc}
 800cbe6:	46c0      	nop			; (mov r8, r8)
 800cbe8:	200006a5 	.word	0x200006a5

0800cbec <__sinit_lock_acquire>:
 800cbec:	b510      	push	{r4, lr}
 800cbee:	4802      	ldr	r0, [pc, #8]	; (800cbf8 <__sinit_lock_acquire+0xc>)
 800cbf0:	f000 f8b1 	bl	800cd56 <__retarget_lock_acquire_recursive>
 800cbf4:	bd10      	pop	{r4, pc}
 800cbf6:	46c0      	nop			; (mov r8, r8)
 800cbf8:	200006a6 	.word	0x200006a6

0800cbfc <__sinit_lock_release>:
 800cbfc:	b510      	push	{r4, lr}
 800cbfe:	4802      	ldr	r0, [pc, #8]	; (800cc08 <__sinit_lock_release+0xc>)
 800cc00:	f000 f8aa 	bl	800cd58 <__retarget_lock_release_recursive>
 800cc04:	bd10      	pop	{r4, pc}
 800cc06:	46c0      	nop			; (mov r8, r8)
 800cc08:	200006a6 	.word	0x200006a6

0800cc0c <__sinit>:
 800cc0c:	b513      	push	{r0, r1, r4, lr}
 800cc0e:	0004      	movs	r4, r0
 800cc10:	f7ff ffec 	bl	800cbec <__sinit_lock_acquire>
 800cc14:	69a3      	ldr	r3, [r4, #24]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d002      	beq.n	800cc20 <__sinit+0x14>
 800cc1a:	f7ff ffef 	bl	800cbfc <__sinit_lock_release>
 800cc1e:	bd13      	pop	{r0, r1, r4, pc}
 800cc20:	64a3      	str	r3, [r4, #72]	; 0x48
 800cc22:	64e3      	str	r3, [r4, #76]	; 0x4c
 800cc24:	6523      	str	r3, [r4, #80]	; 0x50
 800cc26:	4b13      	ldr	r3, [pc, #76]	; (800cc74 <__sinit+0x68>)
 800cc28:	4a13      	ldr	r2, [pc, #76]	; (800cc78 <__sinit+0x6c>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc2e:	9301      	str	r3, [sp, #4]
 800cc30:	42a3      	cmp	r3, r4
 800cc32:	d101      	bne.n	800cc38 <__sinit+0x2c>
 800cc34:	2301      	movs	r3, #1
 800cc36:	61a3      	str	r3, [r4, #24]
 800cc38:	0020      	movs	r0, r4
 800cc3a:	f000 f81f 	bl	800cc7c <__sfp>
 800cc3e:	6060      	str	r0, [r4, #4]
 800cc40:	0020      	movs	r0, r4
 800cc42:	f000 f81b 	bl	800cc7c <__sfp>
 800cc46:	60a0      	str	r0, [r4, #8]
 800cc48:	0020      	movs	r0, r4
 800cc4a:	f000 f817 	bl	800cc7c <__sfp>
 800cc4e:	2200      	movs	r2, #0
 800cc50:	2104      	movs	r1, #4
 800cc52:	60e0      	str	r0, [r4, #12]
 800cc54:	6860      	ldr	r0, [r4, #4]
 800cc56:	f7ff ff77 	bl	800cb48 <std>
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	2109      	movs	r1, #9
 800cc5e:	68a0      	ldr	r0, [r4, #8]
 800cc60:	f7ff ff72 	bl	800cb48 <std>
 800cc64:	2202      	movs	r2, #2
 800cc66:	2112      	movs	r1, #18
 800cc68:	68e0      	ldr	r0, [r4, #12]
 800cc6a:	f7ff ff6d 	bl	800cb48 <std>
 800cc6e:	2301      	movs	r3, #1
 800cc70:	61a3      	str	r3, [r4, #24]
 800cc72:	e7d2      	b.n	800cc1a <__sinit+0xe>
 800cc74:	0800eb30 	.word	0x0800eb30
 800cc78:	0800cb91 	.word	0x0800cb91

0800cc7c <__sfp>:
 800cc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc7e:	0007      	movs	r7, r0
 800cc80:	f7ff ffa4 	bl	800cbcc <__sfp_lock_acquire>
 800cc84:	4b1f      	ldr	r3, [pc, #124]	; (800cd04 <__sfp+0x88>)
 800cc86:	681e      	ldr	r6, [r3, #0]
 800cc88:	69b3      	ldr	r3, [r6, #24]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d102      	bne.n	800cc94 <__sfp+0x18>
 800cc8e:	0030      	movs	r0, r6
 800cc90:	f7ff ffbc 	bl	800cc0c <__sinit>
 800cc94:	3648      	adds	r6, #72	; 0x48
 800cc96:	68b4      	ldr	r4, [r6, #8]
 800cc98:	6873      	ldr	r3, [r6, #4]
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	d504      	bpl.n	800cca8 <__sfp+0x2c>
 800cc9e:	6833      	ldr	r3, [r6, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d022      	beq.n	800ccea <__sfp+0x6e>
 800cca4:	6836      	ldr	r6, [r6, #0]
 800cca6:	e7f6      	b.n	800cc96 <__sfp+0x1a>
 800cca8:	220c      	movs	r2, #12
 800ccaa:	5ea5      	ldrsh	r5, [r4, r2]
 800ccac:	2d00      	cmp	r5, #0
 800ccae:	d11a      	bne.n	800cce6 <__sfp+0x6a>
 800ccb0:	0020      	movs	r0, r4
 800ccb2:	4b15      	ldr	r3, [pc, #84]	; (800cd08 <__sfp+0x8c>)
 800ccb4:	3058      	adds	r0, #88	; 0x58
 800ccb6:	60e3      	str	r3, [r4, #12]
 800ccb8:	6665      	str	r5, [r4, #100]	; 0x64
 800ccba:	f000 f84b 	bl	800cd54 <__retarget_lock_init_recursive>
 800ccbe:	f7ff ff8d 	bl	800cbdc <__sfp_lock_release>
 800ccc2:	0020      	movs	r0, r4
 800ccc4:	2208      	movs	r2, #8
 800ccc6:	0029      	movs	r1, r5
 800ccc8:	6025      	str	r5, [r4, #0]
 800ccca:	60a5      	str	r5, [r4, #8]
 800cccc:	6065      	str	r5, [r4, #4]
 800ccce:	6125      	str	r5, [r4, #16]
 800ccd0:	6165      	str	r5, [r4, #20]
 800ccd2:	61a5      	str	r5, [r4, #24]
 800ccd4:	305c      	adds	r0, #92	; 0x5c
 800ccd6:	f7fe f9d6 	bl	800b086 <memset>
 800ccda:	6365      	str	r5, [r4, #52]	; 0x34
 800ccdc:	63a5      	str	r5, [r4, #56]	; 0x38
 800ccde:	64a5      	str	r5, [r4, #72]	; 0x48
 800cce0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800cce2:	0020      	movs	r0, r4
 800cce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cce6:	3468      	adds	r4, #104	; 0x68
 800cce8:	e7d7      	b.n	800cc9a <__sfp+0x1e>
 800ccea:	2104      	movs	r1, #4
 800ccec:	0038      	movs	r0, r7
 800ccee:	f7ff ff57 	bl	800cba0 <__sfmoreglue>
 800ccf2:	1e04      	subs	r4, r0, #0
 800ccf4:	6030      	str	r0, [r6, #0]
 800ccf6:	d1d5      	bne.n	800cca4 <__sfp+0x28>
 800ccf8:	f7ff ff70 	bl	800cbdc <__sfp_lock_release>
 800ccfc:	230c      	movs	r3, #12
 800ccfe:	603b      	str	r3, [r7, #0]
 800cd00:	e7ef      	b.n	800cce2 <__sfp+0x66>
 800cd02:	46c0      	nop			; (mov r8, r8)
 800cd04:	0800eb30 	.word	0x0800eb30
 800cd08:	ffff0001 	.word	0xffff0001

0800cd0c <_fwalk_reent>:
 800cd0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd0e:	0004      	movs	r4, r0
 800cd10:	0006      	movs	r6, r0
 800cd12:	2700      	movs	r7, #0
 800cd14:	9101      	str	r1, [sp, #4]
 800cd16:	3448      	adds	r4, #72	; 0x48
 800cd18:	6863      	ldr	r3, [r4, #4]
 800cd1a:	68a5      	ldr	r5, [r4, #8]
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	9b00      	ldr	r3, [sp, #0]
 800cd20:	3b01      	subs	r3, #1
 800cd22:	9300      	str	r3, [sp, #0]
 800cd24:	d504      	bpl.n	800cd30 <_fwalk_reent+0x24>
 800cd26:	6824      	ldr	r4, [r4, #0]
 800cd28:	2c00      	cmp	r4, #0
 800cd2a:	d1f5      	bne.n	800cd18 <_fwalk_reent+0xc>
 800cd2c:	0038      	movs	r0, r7
 800cd2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cd30:	89ab      	ldrh	r3, [r5, #12]
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	d908      	bls.n	800cd48 <_fwalk_reent+0x3c>
 800cd36:	220e      	movs	r2, #14
 800cd38:	5eab      	ldrsh	r3, [r5, r2]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	d004      	beq.n	800cd48 <_fwalk_reent+0x3c>
 800cd3e:	0029      	movs	r1, r5
 800cd40:	0030      	movs	r0, r6
 800cd42:	9b01      	ldr	r3, [sp, #4]
 800cd44:	4798      	blx	r3
 800cd46:	4307      	orrs	r7, r0
 800cd48:	3568      	adds	r5, #104	; 0x68
 800cd4a:	e7e8      	b.n	800cd1e <_fwalk_reent+0x12>

0800cd4c <_localeconv_r>:
 800cd4c:	4800      	ldr	r0, [pc, #0]	; (800cd50 <_localeconv_r+0x4>)
 800cd4e:	4770      	bx	lr
 800cd50:	200001bc 	.word	0x200001bc

0800cd54 <__retarget_lock_init_recursive>:
 800cd54:	4770      	bx	lr

0800cd56 <__retarget_lock_acquire_recursive>:
 800cd56:	4770      	bx	lr

0800cd58 <__retarget_lock_release_recursive>:
 800cd58:	4770      	bx	lr
	...

0800cd5c <__swhatbuf_r>:
 800cd5c:	b570      	push	{r4, r5, r6, lr}
 800cd5e:	000e      	movs	r6, r1
 800cd60:	001d      	movs	r5, r3
 800cd62:	230e      	movs	r3, #14
 800cd64:	5ec9      	ldrsh	r1, [r1, r3]
 800cd66:	0014      	movs	r4, r2
 800cd68:	b096      	sub	sp, #88	; 0x58
 800cd6a:	2900      	cmp	r1, #0
 800cd6c:	da08      	bge.n	800cd80 <__swhatbuf_r+0x24>
 800cd6e:	220c      	movs	r2, #12
 800cd70:	5eb3      	ldrsh	r3, [r6, r2]
 800cd72:	2200      	movs	r2, #0
 800cd74:	602a      	str	r2, [r5, #0]
 800cd76:	061b      	lsls	r3, r3, #24
 800cd78:	d411      	bmi.n	800cd9e <__swhatbuf_r+0x42>
 800cd7a:	2380      	movs	r3, #128	; 0x80
 800cd7c:	00db      	lsls	r3, r3, #3
 800cd7e:	e00f      	b.n	800cda0 <__swhatbuf_r+0x44>
 800cd80:	466a      	mov	r2, sp
 800cd82:	f000 ff75 	bl	800dc70 <_fstat_r>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	dbf1      	blt.n	800cd6e <__swhatbuf_r+0x12>
 800cd8a:	23f0      	movs	r3, #240	; 0xf0
 800cd8c:	9901      	ldr	r1, [sp, #4]
 800cd8e:	021b      	lsls	r3, r3, #8
 800cd90:	4019      	ands	r1, r3
 800cd92:	4b05      	ldr	r3, [pc, #20]	; (800cda8 <__swhatbuf_r+0x4c>)
 800cd94:	18c9      	adds	r1, r1, r3
 800cd96:	424b      	negs	r3, r1
 800cd98:	4159      	adcs	r1, r3
 800cd9a:	6029      	str	r1, [r5, #0]
 800cd9c:	e7ed      	b.n	800cd7a <__swhatbuf_r+0x1e>
 800cd9e:	2340      	movs	r3, #64	; 0x40
 800cda0:	2000      	movs	r0, #0
 800cda2:	6023      	str	r3, [r4, #0]
 800cda4:	b016      	add	sp, #88	; 0x58
 800cda6:	bd70      	pop	{r4, r5, r6, pc}
 800cda8:	ffffe000 	.word	0xffffe000

0800cdac <__smakebuf_r>:
 800cdac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdae:	2602      	movs	r6, #2
 800cdb0:	898b      	ldrh	r3, [r1, #12]
 800cdb2:	0005      	movs	r5, r0
 800cdb4:	000c      	movs	r4, r1
 800cdb6:	4233      	tst	r3, r6
 800cdb8:	d006      	beq.n	800cdc8 <__smakebuf_r+0x1c>
 800cdba:	0023      	movs	r3, r4
 800cdbc:	3347      	adds	r3, #71	; 0x47
 800cdbe:	6023      	str	r3, [r4, #0]
 800cdc0:	6123      	str	r3, [r4, #16]
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	6163      	str	r3, [r4, #20]
 800cdc6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800cdc8:	466a      	mov	r2, sp
 800cdca:	ab01      	add	r3, sp, #4
 800cdcc:	f7ff ffc6 	bl	800cd5c <__swhatbuf_r>
 800cdd0:	9900      	ldr	r1, [sp, #0]
 800cdd2:	0007      	movs	r7, r0
 800cdd4:	0028      	movs	r0, r5
 800cdd6:	f000 fc77 	bl	800d6c8 <_malloc_r>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d108      	bne.n	800cdf0 <__smakebuf_r+0x44>
 800cdde:	220c      	movs	r2, #12
 800cde0:	5ea3      	ldrsh	r3, [r4, r2]
 800cde2:	059a      	lsls	r2, r3, #22
 800cde4:	d4ef      	bmi.n	800cdc6 <__smakebuf_r+0x1a>
 800cde6:	2203      	movs	r2, #3
 800cde8:	4393      	bics	r3, r2
 800cdea:	431e      	orrs	r6, r3
 800cdec:	81a6      	strh	r6, [r4, #12]
 800cdee:	e7e4      	b.n	800cdba <__smakebuf_r+0xe>
 800cdf0:	4b0f      	ldr	r3, [pc, #60]	; (800ce30 <__smakebuf_r+0x84>)
 800cdf2:	62ab      	str	r3, [r5, #40]	; 0x28
 800cdf4:	2380      	movs	r3, #128	; 0x80
 800cdf6:	89a2      	ldrh	r2, [r4, #12]
 800cdf8:	6020      	str	r0, [r4, #0]
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	81a3      	strh	r3, [r4, #12]
 800cdfe:	9b00      	ldr	r3, [sp, #0]
 800ce00:	6120      	str	r0, [r4, #16]
 800ce02:	6163      	str	r3, [r4, #20]
 800ce04:	9b01      	ldr	r3, [sp, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00d      	beq.n	800ce26 <__smakebuf_r+0x7a>
 800ce0a:	0028      	movs	r0, r5
 800ce0c:	230e      	movs	r3, #14
 800ce0e:	5ee1      	ldrsh	r1, [r4, r3]
 800ce10:	f000 ff40 	bl	800dc94 <_isatty_r>
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d006      	beq.n	800ce26 <__smakebuf_r+0x7a>
 800ce18:	2203      	movs	r2, #3
 800ce1a:	89a3      	ldrh	r3, [r4, #12]
 800ce1c:	4393      	bics	r3, r2
 800ce1e:	001a      	movs	r2, r3
 800ce20:	2301      	movs	r3, #1
 800ce22:	4313      	orrs	r3, r2
 800ce24:	81a3      	strh	r3, [r4, #12]
 800ce26:	89a0      	ldrh	r0, [r4, #12]
 800ce28:	4307      	orrs	r7, r0
 800ce2a:	81a7      	strh	r7, [r4, #12]
 800ce2c:	e7cb      	b.n	800cdc6 <__smakebuf_r+0x1a>
 800ce2e:	46c0      	nop			; (mov r8, r8)
 800ce30:	0800cb91 	.word	0x0800cb91

0800ce34 <malloc>:
 800ce34:	b510      	push	{r4, lr}
 800ce36:	4b03      	ldr	r3, [pc, #12]	; (800ce44 <malloc+0x10>)
 800ce38:	0001      	movs	r1, r0
 800ce3a:	6818      	ldr	r0, [r3, #0]
 800ce3c:	f000 fc44 	bl	800d6c8 <_malloc_r>
 800ce40:	bd10      	pop	{r4, pc}
 800ce42:	46c0      	nop			; (mov r8, r8)
 800ce44:	20000068 	.word	0x20000068

0800ce48 <memchr>:
 800ce48:	b2c9      	uxtb	r1, r1
 800ce4a:	1882      	adds	r2, r0, r2
 800ce4c:	4290      	cmp	r0, r2
 800ce4e:	d101      	bne.n	800ce54 <memchr+0xc>
 800ce50:	2000      	movs	r0, #0
 800ce52:	4770      	bx	lr
 800ce54:	7803      	ldrb	r3, [r0, #0]
 800ce56:	428b      	cmp	r3, r1
 800ce58:	d0fb      	beq.n	800ce52 <memchr+0xa>
 800ce5a:	3001      	adds	r0, #1
 800ce5c:	e7f6      	b.n	800ce4c <memchr+0x4>
	...

0800ce60 <_Balloc>:
 800ce60:	b570      	push	{r4, r5, r6, lr}
 800ce62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ce64:	0006      	movs	r6, r0
 800ce66:	000c      	movs	r4, r1
 800ce68:	2d00      	cmp	r5, #0
 800ce6a:	d10e      	bne.n	800ce8a <_Balloc+0x2a>
 800ce6c:	2010      	movs	r0, #16
 800ce6e:	f7ff ffe1 	bl	800ce34 <malloc>
 800ce72:	1e02      	subs	r2, r0, #0
 800ce74:	6270      	str	r0, [r6, #36]	; 0x24
 800ce76:	d104      	bne.n	800ce82 <_Balloc+0x22>
 800ce78:	2166      	movs	r1, #102	; 0x66
 800ce7a:	4b19      	ldr	r3, [pc, #100]	; (800cee0 <_Balloc+0x80>)
 800ce7c:	4819      	ldr	r0, [pc, #100]	; (800cee4 <_Balloc+0x84>)
 800ce7e:	f000 feb7 	bl	800dbf0 <__assert_func>
 800ce82:	6045      	str	r5, [r0, #4]
 800ce84:	6085      	str	r5, [r0, #8]
 800ce86:	6005      	str	r5, [r0, #0]
 800ce88:	60c5      	str	r5, [r0, #12]
 800ce8a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800ce8c:	68eb      	ldr	r3, [r5, #12]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d013      	beq.n	800ceba <_Balloc+0x5a>
 800ce92:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ce94:	00a2      	lsls	r2, r4, #2
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	189b      	adds	r3, r3, r2
 800ce9a:	6818      	ldr	r0, [r3, #0]
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d118      	bne.n	800ced2 <_Balloc+0x72>
 800cea0:	2101      	movs	r1, #1
 800cea2:	000d      	movs	r5, r1
 800cea4:	40a5      	lsls	r5, r4
 800cea6:	1d6a      	adds	r2, r5, #5
 800cea8:	0030      	movs	r0, r6
 800ceaa:	0092      	lsls	r2, r2, #2
 800ceac:	f000 fb74 	bl	800d598 <_calloc_r>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d00c      	beq.n	800cece <_Balloc+0x6e>
 800ceb4:	6044      	str	r4, [r0, #4]
 800ceb6:	6085      	str	r5, [r0, #8]
 800ceb8:	e00d      	b.n	800ced6 <_Balloc+0x76>
 800ceba:	2221      	movs	r2, #33	; 0x21
 800cebc:	2104      	movs	r1, #4
 800cebe:	0030      	movs	r0, r6
 800cec0:	f000 fb6a 	bl	800d598 <_calloc_r>
 800cec4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cec6:	60e8      	str	r0, [r5, #12]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d1e1      	bne.n	800ce92 <_Balloc+0x32>
 800cece:	2000      	movs	r0, #0
 800ced0:	bd70      	pop	{r4, r5, r6, pc}
 800ced2:	6802      	ldr	r2, [r0, #0]
 800ced4:	601a      	str	r2, [r3, #0]
 800ced6:	2300      	movs	r3, #0
 800ced8:	6103      	str	r3, [r0, #16]
 800ceda:	60c3      	str	r3, [r0, #12]
 800cedc:	e7f8      	b.n	800ced0 <_Balloc+0x70>
 800cede:	46c0      	nop			; (mov r8, r8)
 800cee0:	0800eb75 	.word	0x0800eb75
 800cee4:	0800ec58 	.word	0x0800ec58

0800cee8 <_Bfree>:
 800cee8:	b570      	push	{r4, r5, r6, lr}
 800ceea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ceec:	0005      	movs	r5, r0
 800ceee:	000c      	movs	r4, r1
 800cef0:	2e00      	cmp	r6, #0
 800cef2:	d10e      	bne.n	800cf12 <_Bfree+0x2a>
 800cef4:	2010      	movs	r0, #16
 800cef6:	f7ff ff9d 	bl	800ce34 <malloc>
 800cefa:	1e02      	subs	r2, r0, #0
 800cefc:	6268      	str	r0, [r5, #36]	; 0x24
 800cefe:	d104      	bne.n	800cf0a <_Bfree+0x22>
 800cf00:	218a      	movs	r1, #138	; 0x8a
 800cf02:	4b09      	ldr	r3, [pc, #36]	; (800cf28 <_Bfree+0x40>)
 800cf04:	4809      	ldr	r0, [pc, #36]	; (800cf2c <_Bfree+0x44>)
 800cf06:	f000 fe73 	bl	800dbf0 <__assert_func>
 800cf0a:	6046      	str	r6, [r0, #4]
 800cf0c:	6086      	str	r6, [r0, #8]
 800cf0e:	6006      	str	r6, [r0, #0]
 800cf10:	60c6      	str	r6, [r0, #12]
 800cf12:	2c00      	cmp	r4, #0
 800cf14:	d007      	beq.n	800cf26 <_Bfree+0x3e>
 800cf16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cf18:	6862      	ldr	r2, [r4, #4]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	0092      	lsls	r2, r2, #2
 800cf1e:	189b      	adds	r3, r3, r2
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	6022      	str	r2, [r4, #0]
 800cf24:	601c      	str	r4, [r3, #0]
 800cf26:	bd70      	pop	{r4, r5, r6, pc}
 800cf28:	0800eb75 	.word	0x0800eb75
 800cf2c:	0800ec58 	.word	0x0800ec58

0800cf30 <__multadd>:
 800cf30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf32:	000e      	movs	r6, r1
 800cf34:	9001      	str	r0, [sp, #4]
 800cf36:	000c      	movs	r4, r1
 800cf38:	001d      	movs	r5, r3
 800cf3a:	2000      	movs	r0, #0
 800cf3c:	690f      	ldr	r7, [r1, #16]
 800cf3e:	3614      	adds	r6, #20
 800cf40:	6833      	ldr	r3, [r6, #0]
 800cf42:	3001      	adds	r0, #1
 800cf44:	b299      	uxth	r1, r3
 800cf46:	4351      	muls	r1, r2
 800cf48:	0c1b      	lsrs	r3, r3, #16
 800cf4a:	4353      	muls	r3, r2
 800cf4c:	1949      	adds	r1, r1, r5
 800cf4e:	0c0d      	lsrs	r5, r1, #16
 800cf50:	195b      	adds	r3, r3, r5
 800cf52:	0c1d      	lsrs	r5, r3, #16
 800cf54:	b289      	uxth	r1, r1
 800cf56:	041b      	lsls	r3, r3, #16
 800cf58:	185b      	adds	r3, r3, r1
 800cf5a:	c608      	stmia	r6!, {r3}
 800cf5c:	4287      	cmp	r7, r0
 800cf5e:	dcef      	bgt.n	800cf40 <__multadd+0x10>
 800cf60:	2d00      	cmp	r5, #0
 800cf62:	d022      	beq.n	800cfaa <__multadd+0x7a>
 800cf64:	68a3      	ldr	r3, [r4, #8]
 800cf66:	42bb      	cmp	r3, r7
 800cf68:	dc19      	bgt.n	800cf9e <__multadd+0x6e>
 800cf6a:	6863      	ldr	r3, [r4, #4]
 800cf6c:	9801      	ldr	r0, [sp, #4]
 800cf6e:	1c59      	adds	r1, r3, #1
 800cf70:	f7ff ff76 	bl	800ce60 <_Balloc>
 800cf74:	1e06      	subs	r6, r0, #0
 800cf76:	d105      	bne.n	800cf84 <__multadd+0x54>
 800cf78:	0002      	movs	r2, r0
 800cf7a:	21b5      	movs	r1, #181	; 0xb5
 800cf7c:	4b0c      	ldr	r3, [pc, #48]	; (800cfb0 <__multadd+0x80>)
 800cf7e:	480d      	ldr	r0, [pc, #52]	; (800cfb4 <__multadd+0x84>)
 800cf80:	f000 fe36 	bl	800dbf0 <__assert_func>
 800cf84:	0021      	movs	r1, r4
 800cf86:	6923      	ldr	r3, [r4, #16]
 800cf88:	310c      	adds	r1, #12
 800cf8a:	1c9a      	adds	r2, r3, #2
 800cf8c:	0092      	lsls	r2, r2, #2
 800cf8e:	300c      	adds	r0, #12
 800cf90:	f7fe f870 	bl	800b074 <memcpy>
 800cf94:	0021      	movs	r1, r4
 800cf96:	9801      	ldr	r0, [sp, #4]
 800cf98:	f7ff ffa6 	bl	800cee8 <_Bfree>
 800cf9c:	0034      	movs	r4, r6
 800cf9e:	1d3b      	adds	r3, r7, #4
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	18e3      	adds	r3, r4, r3
 800cfa4:	605d      	str	r5, [r3, #4]
 800cfa6:	1c7b      	adds	r3, r7, #1
 800cfa8:	6123      	str	r3, [r4, #16]
 800cfaa:	0020      	movs	r0, r4
 800cfac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cfae:	46c0      	nop			; (mov r8, r8)
 800cfb0:	0800ebe7 	.word	0x0800ebe7
 800cfb4:	0800ec58 	.word	0x0800ec58

0800cfb8 <__hi0bits>:
 800cfb8:	0003      	movs	r3, r0
 800cfba:	0c02      	lsrs	r2, r0, #16
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	4282      	cmp	r2, r0
 800cfc0:	d101      	bne.n	800cfc6 <__hi0bits+0xe>
 800cfc2:	041b      	lsls	r3, r3, #16
 800cfc4:	3010      	adds	r0, #16
 800cfc6:	0e1a      	lsrs	r2, r3, #24
 800cfc8:	d101      	bne.n	800cfce <__hi0bits+0x16>
 800cfca:	3008      	adds	r0, #8
 800cfcc:	021b      	lsls	r3, r3, #8
 800cfce:	0f1a      	lsrs	r2, r3, #28
 800cfd0:	d101      	bne.n	800cfd6 <__hi0bits+0x1e>
 800cfd2:	3004      	adds	r0, #4
 800cfd4:	011b      	lsls	r3, r3, #4
 800cfd6:	0f9a      	lsrs	r2, r3, #30
 800cfd8:	d101      	bne.n	800cfde <__hi0bits+0x26>
 800cfda:	3002      	adds	r0, #2
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	db03      	blt.n	800cfea <__hi0bits+0x32>
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	005b      	lsls	r3, r3, #1
 800cfe6:	d400      	bmi.n	800cfea <__hi0bits+0x32>
 800cfe8:	2020      	movs	r0, #32
 800cfea:	4770      	bx	lr

0800cfec <__lo0bits>:
 800cfec:	6803      	ldr	r3, [r0, #0]
 800cfee:	0002      	movs	r2, r0
 800cff0:	2107      	movs	r1, #7
 800cff2:	0018      	movs	r0, r3
 800cff4:	4008      	ands	r0, r1
 800cff6:	420b      	tst	r3, r1
 800cff8:	d00d      	beq.n	800d016 <__lo0bits+0x2a>
 800cffa:	3906      	subs	r1, #6
 800cffc:	2000      	movs	r0, #0
 800cffe:	420b      	tst	r3, r1
 800d000:	d105      	bne.n	800d00e <__lo0bits+0x22>
 800d002:	3002      	adds	r0, #2
 800d004:	4203      	tst	r3, r0
 800d006:	d003      	beq.n	800d010 <__lo0bits+0x24>
 800d008:	40cb      	lsrs	r3, r1
 800d00a:	0008      	movs	r0, r1
 800d00c:	6013      	str	r3, [r2, #0]
 800d00e:	4770      	bx	lr
 800d010:	089b      	lsrs	r3, r3, #2
 800d012:	6013      	str	r3, [r2, #0]
 800d014:	e7fb      	b.n	800d00e <__lo0bits+0x22>
 800d016:	b299      	uxth	r1, r3
 800d018:	2900      	cmp	r1, #0
 800d01a:	d101      	bne.n	800d020 <__lo0bits+0x34>
 800d01c:	2010      	movs	r0, #16
 800d01e:	0c1b      	lsrs	r3, r3, #16
 800d020:	b2d9      	uxtb	r1, r3
 800d022:	2900      	cmp	r1, #0
 800d024:	d101      	bne.n	800d02a <__lo0bits+0x3e>
 800d026:	3008      	adds	r0, #8
 800d028:	0a1b      	lsrs	r3, r3, #8
 800d02a:	0719      	lsls	r1, r3, #28
 800d02c:	d101      	bne.n	800d032 <__lo0bits+0x46>
 800d02e:	3004      	adds	r0, #4
 800d030:	091b      	lsrs	r3, r3, #4
 800d032:	0799      	lsls	r1, r3, #30
 800d034:	d101      	bne.n	800d03a <__lo0bits+0x4e>
 800d036:	3002      	adds	r0, #2
 800d038:	089b      	lsrs	r3, r3, #2
 800d03a:	07d9      	lsls	r1, r3, #31
 800d03c:	d4e9      	bmi.n	800d012 <__lo0bits+0x26>
 800d03e:	3001      	adds	r0, #1
 800d040:	085b      	lsrs	r3, r3, #1
 800d042:	d1e6      	bne.n	800d012 <__lo0bits+0x26>
 800d044:	2020      	movs	r0, #32
 800d046:	e7e2      	b.n	800d00e <__lo0bits+0x22>

0800d048 <__i2b>:
 800d048:	b510      	push	{r4, lr}
 800d04a:	000c      	movs	r4, r1
 800d04c:	2101      	movs	r1, #1
 800d04e:	f7ff ff07 	bl	800ce60 <_Balloc>
 800d052:	2800      	cmp	r0, #0
 800d054:	d106      	bne.n	800d064 <__i2b+0x1c>
 800d056:	21a0      	movs	r1, #160	; 0xa0
 800d058:	0002      	movs	r2, r0
 800d05a:	4b04      	ldr	r3, [pc, #16]	; (800d06c <__i2b+0x24>)
 800d05c:	4804      	ldr	r0, [pc, #16]	; (800d070 <__i2b+0x28>)
 800d05e:	0049      	lsls	r1, r1, #1
 800d060:	f000 fdc6 	bl	800dbf0 <__assert_func>
 800d064:	2301      	movs	r3, #1
 800d066:	6144      	str	r4, [r0, #20]
 800d068:	6103      	str	r3, [r0, #16]
 800d06a:	bd10      	pop	{r4, pc}
 800d06c:	0800ebe7 	.word	0x0800ebe7
 800d070:	0800ec58 	.word	0x0800ec58

0800d074 <__multiply>:
 800d074:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d076:	690b      	ldr	r3, [r1, #16]
 800d078:	0014      	movs	r4, r2
 800d07a:	6912      	ldr	r2, [r2, #16]
 800d07c:	000d      	movs	r5, r1
 800d07e:	b089      	sub	sp, #36	; 0x24
 800d080:	4293      	cmp	r3, r2
 800d082:	da01      	bge.n	800d088 <__multiply+0x14>
 800d084:	0025      	movs	r5, r4
 800d086:	000c      	movs	r4, r1
 800d088:	692f      	ldr	r7, [r5, #16]
 800d08a:	6926      	ldr	r6, [r4, #16]
 800d08c:	6869      	ldr	r1, [r5, #4]
 800d08e:	19bb      	adds	r3, r7, r6
 800d090:	9302      	str	r3, [sp, #8]
 800d092:	68ab      	ldr	r3, [r5, #8]
 800d094:	19ba      	adds	r2, r7, r6
 800d096:	4293      	cmp	r3, r2
 800d098:	da00      	bge.n	800d09c <__multiply+0x28>
 800d09a:	3101      	adds	r1, #1
 800d09c:	f7ff fee0 	bl	800ce60 <_Balloc>
 800d0a0:	9001      	str	r0, [sp, #4]
 800d0a2:	2800      	cmp	r0, #0
 800d0a4:	d106      	bne.n	800d0b4 <__multiply+0x40>
 800d0a6:	215e      	movs	r1, #94	; 0x5e
 800d0a8:	0002      	movs	r2, r0
 800d0aa:	4b48      	ldr	r3, [pc, #288]	; (800d1cc <__multiply+0x158>)
 800d0ac:	4848      	ldr	r0, [pc, #288]	; (800d1d0 <__multiply+0x15c>)
 800d0ae:	31ff      	adds	r1, #255	; 0xff
 800d0b0:	f000 fd9e 	bl	800dbf0 <__assert_func>
 800d0b4:	9b01      	ldr	r3, [sp, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	3314      	adds	r3, #20
 800d0ba:	469c      	mov	ip, r3
 800d0bc:	19bb      	adds	r3, r7, r6
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	4463      	add	r3, ip
 800d0c2:	9303      	str	r3, [sp, #12]
 800d0c4:	4663      	mov	r3, ip
 800d0c6:	9903      	ldr	r1, [sp, #12]
 800d0c8:	428b      	cmp	r3, r1
 800d0ca:	d32c      	bcc.n	800d126 <__multiply+0xb2>
 800d0cc:	002b      	movs	r3, r5
 800d0ce:	0022      	movs	r2, r4
 800d0d0:	3314      	adds	r3, #20
 800d0d2:	00bf      	lsls	r7, r7, #2
 800d0d4:	3214      	adds	r2, #20
 800d0d6:	9306      	str	r3, [sp, #24]
 800d0d8:	00b6      	lsls	r6, r6, #2
 800d0da:	19db      	adds	r3, r3, r7
 800d0dc:	9304      	str	r3, [sp, #16]
 800d0de:	1993      	adds	r3, r2, r6
 800d0e0:	9307      	str	r3, [sp, #28]
 800d0e2:	2304      	movs	r3, #4
 800d0e4:	9305      	str	r3, [sp, #20]
 800d0e6:	002b      	movs	r3, r5
 800d0e8:	9904      	ldr	r1, [sp, #16]
 800d0ea:	3315      	adds	r3, #21
 800d0ec:	9200      	str	r2, [sp, #0]
 800d0ee:	4299      	cmp	r1, r3
 800d0f0:	d305      	bcc.n	800d0fe <__multiply+0x8a>
 800d0f2:	1b4b      	subs	r3, r1, r5
 800d0f4:	3b15      	subs	r3, #21
 800d0f6:	089b      	lsrs	r3, r3, #2
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	9305      	str	r3, [sp, #20]
 800d0fe:	9b07      	ldr	r3, [sp, #28]
 800d100:	9a00      	ldr	r2, [sp, #0]
 800d102:	429a      	cmp	r2, r3
 800d104:	d311      	bcc.n	800d12a <__multiply+0xb6>
 800d106:	9b02      	ldr	r3, [sp, #8]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	dd06      	ble.n	800d11a <__multiply+0xa6>
 800d10c:	9b03      	ldr	r3, [sp, #12]
 800d10e:	3b04      	subs	r3, #4
 800d110:	9303      	str	r3, [sp, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	9300      	str	r3, [sp, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d053      	beq.n	800d1c2 <__multiply+0x14e>
 800d11a:	9b01      	ldr	r3, [sp, #4]
 800d11c:	9a02      	ldr	r2, [sp, #8]
 800d11e:	0018      	movs	r0, r3
 800d120:	611a      	str	r2, [r3, #16]
 800d122:	b009      	add	sp, #36	; 0x24
 800d124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d126:	c304      	stmia	r3!, {r2}
 800d128:	e7cd      	b.n	800d0c6 <__multiply+0x52>
 800d12a:	9b00      	ldr	r3, [sp, #0]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	b298      	uxth	r0, r3
 800d130:	2800      	cmp	r0, #0
 800d132:	d01b      	beq.n	800d16c <__multiply+0xf8>
 800d134:	4667      	mov	r7, ip
 800d136:	2400      	movs	r4, #0
 800d138:	9e06      	ldr	r6, [sp, #24]
 800d13a:	ce02      	ldmia	r6!, {r1}
 800d13c:	683a      	ldr	r2, [r7, #0]
 800d13e:	b28b      	uxth	r3, r1
 800d140:	4343      	muls	r3, r0
 800d142:	b292      	uxth	r2, r2
 800d144:	189b      	adds	r3, r3, r2
 800d146:	191b      	adds	r3, r3, r4
 800d148:	0c0c      	lsrs	r4, r1, #16
 800d14a:	4344      	muls	r4, r0
 800d14c:	683a      	ldr	r2, [r7, #0]
 800d14e:	0c11      	lsrs	r1, r2, #16
 800d150:	1861      	adds	r1, r4, r1
 800d152:	0c1c      	lsrs	r4, r3, #16
 800d154:	1909      	adds	r1, r1, r4
 800d156:	0c0c      	lsrs	r4, r1, #16
 800d158:	b29b      	uxth	r3, r3
 800d15a:	0409      	lsls	r1, r1, #16
 800d15c:	430b      	orrs	r3, r1
 800d15e:	c708      	stmia	r7!, {r3}
 800d160:	9b04      	ldr	r3, [sp, #16]
 800d162:	42b3      	cmp	r3, r6
 800d164:	d8e9      	bhi.n	800d13a <__multiply+0xc6>
 800d166:	4663      	mov	r3, ip
 800d168:	9a05      	ldr	r2, [sp, #20]
 800d16a:	509c      	str	r4, [r3, r2]
 800d16c:	9b00      	ldr	r3, [sp, #0]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	0c1e      	lsrs	r6, r3, #16
 800d172:	d020      	beq.n	800d1b6 <__multiply+0x142>
 800d174:	4663      	mov	r3, ip
 800d176:	002c      	movs	r4, r5
 800d178:	4660      	mov	r0, ip
 800d17a:	2700      	movs	r7, #0
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	3414      	adds	r4, #20
 800d180:	6822      	ldr	r2, [r4, #0]
 800d182:	b29b      	uxth	r3, r3
 800d184:	b291      	uxth	r1, r2
 800d186:	4371      	muls	r1, r6
 800d188:	6802      	ldr	r2, [r0, #0]
 800d18a:	0c12      	lsrs	r2, r2, #16
 800d18c:	1889      	adds	r1, r1, r2
 800d18e:	19cf      	adds	r7, r1, r7
 800d190:	0439      	lsls	r1, r7, #16
 800d192:	430b      	orrs	r3, r1
 800d194:	6003      	str	r3, [r0, #0]
 800d196:	cc02      	ldmia	r4!, {r1}
 800d198:	6843      	ldr	r3, [r0, #4]
 800d19a:	0c09      	lsrs	r1, r1, #16
 800d19c:	4371      	muls	r1, r6
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	0c3f      	lsrs	r7, r7, #16
 800d1a2:	18cb      	adds	r3, r1, r3
 800d1a4:	9a04      	ldr	r2, [sp, #16]
 800d1a6:	19db      	adds	r3, r3, r7
 800d1a8:	0c1f      	lsrs	r7, r3, #16
 800d1aa:	3004      	adds	r0, #4
 800d1ac:	42a2      	cmp	r2, r4
 800d1ae:	d8e7      	bhi.n	800d180 <__multiply+0x10c>
 800d1b0:	4662      	mov	r2, ip
 800d1b2:	9905      	ldr	r1, [sp, #20]
 800d1b4:	5053      	str	r3, [r2, r1]
 800d1b6:	9b00      	ldr	r3, [sp, #0]
 800d1b8:	3304      	adds	r3, #4
 800d1ba:	9300      	str	r3, [sp, #0]
 800d1bc:	2304      	movs	r3, #4
 800d1be:	449c      	add	ip, r3
 800d1c0:	e79d      	b.n	800d0fe <__multiply+0x8a>
 800d1c2:	9b02      	ldr	r3, [sp, #8]
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	9302      	str	r3, [sp, #8]
 800d1c8:	e79d      	b.n	800d106 <__multiply+0x92>
 800d1ca:	46c0      	nop			; (mov r8, r8)
 800d1cc:	0800ebe7 	.word	0x0800ebe7
 800d1d0:	0800ec58 	.word	0x0800ec58

0800d1d4 <__pow5mult>:
 800d1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1d6:	2303      	movs	r3, #3
 800d1d8:	0015      	movs	r5, r2
 800d1da:	0007      	movs	r7, r0
 800d1dc:	000e      	movs	r6, r1
 800d1de:	401a      	ands	r2, r3
 800d1e0:	421d      	tst	r5, r3
 800d1e2:	d008      	beq.n	800d1f6 <__pow5mult+0x22>
 800d1e4:	4925      	ldr	r1, [pc, #148]	; (800d27c <__pow5mult+0xa8>)
 800d1e6:	3a01      	subs	r2, #1
 800d1e8:	0092      	lsls	r2, r2, #2
 800d1ea:	5852      	ldr	r2, [r2, r1]
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	0031      	movs	r1, r6
 800d1f0:	f7ff fe9e 	bl	800cf30 <__multadd>
 800d1f4:	0006      	movs	r6, r0
 800d1f6:	10ad      	asrs	r5, r5, #2
 800d1f8:	d03d      	beq.n	800d276 <__pow5mult+0xa2>
 800d1fa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d1fc:	2c00      	cmp	r4, #0
 800d1fe:	d10f      	bne.n	800d220 <__pow5mult+0x4c>
 800d200:	2010      	movs	r0, #16
 800d202:	f7ff fe17 	bl	800ce34 <malloc>
 800d206:	1e02      	subs	r2, r0, #0
 800d208:	6278      	str	r0, [r7, #36]	; 0x24
 800d20a:	d105      	bne.n	800d218 <__pow5mult+0x44>
 800d20c:	21d7      	movs	r1, #215	; 0xd7
 800d20e:	4b1c      	ldr	r3, [pc, #112]	; (800d280 <__pow5mult+0xac>)
 800d210:	481c      	ldr	r0, [pc, #112]	; (800d284 <__pow5mult+0xb0>)
 800d212:	0049      	lsls	r1, r1, #1
 800d214:	f000 fcec 	bl	800dbf0 <__assert_func>
 800d218:	6044      	str	r4, [r0, #4]
 800d21a:	6084      	str	r4, [r0, #8]
 800d21c:	6004      	str	r4, [r0, #0]
 800d21e:	60c4      	str	r4, [r0, #12]
 800d220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d222:	689c      	ldr	r4, [r3, #8]
 800d224:	9301      	str	r3, [sp, #4]
 800d226:	2c00      	cmp	r4, #0
 800d228:	d108      	bne.n	800d23c <__pow5mult+0x68>
 800d22a:	0038      	movs	r0, r7
 800d22c:	4916      	ldr	r1, [pc, #88]	; (800d288 <__pow5mult+0xb4>)
 800d22e:	f7ff ff0b 	bl	800d048 <__i2b>
 800d232:	9b01      	ldr	r3, [sp, #4]
 800d234:	0004      	movs	r4, r0
 800d236:	6098      	str	r0, [r3, #8]
 800d238:	2300      	movs	r3, #0
 800d23a:	6003      	str	r3, [r0, #0]
 800d23c:	2301      	movs	r3, #1
 800d23e:	421d      	tst	r5, r3
 800d240:	d00a      	beq.n	800d258 <__pow5mult+0x84>
 800d242:	0031      	movs	r1, r6
 800d244:	0022      	movs	r2, r4
 800d246:	0038      	movs	r0, r7
 800d248:	f7ff ff14 	bl	800d074 <__multiply>
 800d24c:	0031      	movs	r1, r6
 800d24e:	9001      	str	r0, [sp, #4]
 800d250:	0038      	movs	r0, r7
 800d252:	f7ff fe49 	bl	800cee8 <_Bfree>
 800d256:	9e01      	ldr	r6, [sp, #4]
 800d258:	106d      	asrs	r5, r5, #1
 800d25a:	d00c      	beq.n	800d276 <__pow5mult+0xa2>
 800d25c:	6820      	ldr	r0, [r4, #0]
 800d25e:	2800      	cmp	r0, #0
 800d260:	d107      	bne.n	800d272 <__pow5mult+0x9e>
 800d262:	0022      	movs	r2, r4
 800d264:	0021      	movs	r1, r4
 800d266:	0038      	movs	r0, r7
 800d268:	f7ff ff04 	bl	800d074 <__multiply>
 800d26c:	2300      	movs	r3, #0
 800d26e:	6020      	str	r0, [r4, #0]
 800d270:	6003      	str	r3, [r0, #0]
 800d272:	0004      	movs	r4, r0
 800d274:	e7e2      	b.n	800d23c <__pow5mult+0x68>
 800d276:	0030      	movs	r0, r6
 800d278:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d27a:	46c0      	nop			; (mov r8, r8)
 800d27c:	0800eda8 	.word	0x0800eda8
 800d280:	0800eb75 	.word	0x0800eb75
 800d284:	0800ec58 	.word	0x0800ec58
 800d288:	00000271 	.word	0x00000271

0800d28c <__lshift>:
 800d28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d28e:	000c      	movs	r4, r1
 800d290:	0017      	movs	r7, r2
 800d292:	6923      	ldr	r3, [r4, #16]
 800d294:	1155      	asrs	r5, r2, #5
 800d296:	b087      	sub	sp, #28
 800d298:	18eb      	adds	r3, r5, r3
 800d29a:	9302      	str	r3, [sp, #8]
 800d29c:	3301      	adds	r3, #1
 800d29e:	9301      	str	r3, [sp, #4]
 800d2a0:	6849      	ldr	r1, [r1, #4]
 800d2a2:	68a3      	ldr	r3, [r4, #8]
 800d2a4:	9004      	str	r0, [sp, #16]
 800d2a6:	9a01      	ldr	r2, [sp, #4]
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	db10      	blt.n	800d2ce <__lshift+0x42>
 800d2ac:	9804      	ldr	r0, [sp, #16]
 800d2ae:	f7ff fdd7 	bl	800ce60 <_Balloc>
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	0002      	movs	r2, r0
 800d2b6:	0006      	movs	r6, r0
 800d2b8:	0019      	movs	r1, r3
 800d2ba:	3214      	adds	r2, #20
 800d2bc:	4298      	cmp	r0, r3
 800d2be:	d10c      	bne.n	800d2da <__lshift+0x4e>
 800d2c0:	21da      	movs	r1, #218	; 0xda
 800d2c2:	0002      	movs	r2, r0
 800d2c4:	4b26      	ldr	r3, [pc, #152]	; (800d360 <__lshift+0xd4>)
 800d2c6:	4827      	ldr	r0, [pc, #156]	; (800d364 <__lshift+0xd8>)
 800d2c8:	31ff      	adds	r1, #255	; 0xff
 800d2ca:	f000 fc91 	bl	800dbf0 <__assert_func>
 800d2ce:	3101      	adds	r1, #1
 800d2d0:	005b      	lsls	r3, r3, #1
 800d2d2:	e7e8      	b.n	800d2a6 <__lshift+0x1a>
 800d2d4:	0098      	lsls	r0, r3, #2
 800d2d6:	5011      	str	r1, [r2, r0]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	42ab      	cmp	r3, r5
 800d2dc:	dbfa      	blt.n	800d2d4 <__lshift+0x48>
 800d2de:	43eb      	mvns	r3, r5
 800d2e0:	17db      	asrs	r3, r3, #31
 800d2e2:	401d      	ands	r5, r3
 800d2e4:	211f      	movs	r1, #31
 800d2e6:	0023      	movs	r3, r4
 800d2e8:	0038      	movs	r0, r7
 800d2ea:	00ad      	lsls	r5, r5, #2
 800d2ec:	1955      	adds	r5, r2, r5
 800d2ee:	6922      	ldr	r2, [r4, #16]
 800d2f0:	3314      	adds	r3, #20
 800d2f2:	0092      	lsls	r2, r2, #2
 800d2f4:	4008      	ands	r0, r1
 800d2f6:	4684      	mov	ip, r0
 800d2f8:	189a      	adds	r2, r3, r2
 800d2fa:	420f      	tst	r7, r1
 800d2fc:	d02a      	beq.n	800d354 <__lshift+0xc8>
 800d2fe:	3101      	adds	r1, #1
 800d300:	1a09      	subs	r1, r1, r0
 800d302:	9105      	str	r1, [sp, #20]
 800d304:	2100      	movs	r1, #0
 800d306:	9503      	str	r5, [sp, #12]
 800d308:	4667      	mov	r7, ip
 800d30a:	6818      	ldr	r0, [r3, #0]
 800d30c:	40b8      	lsls	r0, r7
 800d30e:	4301      	orrs	r1, r0
 800d310:	9803      	ldr	r0, [sp, #12]
 800d312:	c002      	stmia	r0!, {r1}
 800d314:	cb02      	ldmia	r3!, {r1}
 800d316:	9003      	str	r0, [sp, #12]
 800d318:	9805      	ldr	r0, [sp, #20]
 800d31a:	40c1      	lsrs	r1, r0
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d8f3      	bhi.n	800d308 <__lshift+0x7c>
 800d320:	0020      	movs	r0, r4
 800d322:	3015      	adds	r0, #21
 800d324:	2304      	movs	r3, #4
 800d326:	4282      	cmp	r2, r0
 800d328:	d304      	bcc.n	800d334 <__lshift+0xa8>
 800d32a:	1b13      	subs	r3, r2, r4
 800d32c:	3b15      	subs	r3, #21
 800d32e:	089b      	lsrs	r3, r3, #2
 800d330:	3301      	adds	r3, #1
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	50e9      	str	r1, [r5, r3]
 800d336:	2900      	cmp	r1, #0
 800d338:	d002      	beq.n	800d340 <__lshift+0xb4>
 800d33a:	9b02      	ldr	r3, [sp, #8]
 800d33c:	3302      	adds	r3, #2
 800d33e:	9301      	str	r3, [sp, #4]
 800d340:	9b01      	ldr	r3, [sp, #4]
 800d342:	9804      	ldr	r0, [sp, #16]
 800d344:	3b01      	subs	r3, #1
 800d346:	0021      	movs	r1, r4
 800d348:	6133      	str	r3, [r6, #16]
 800d34a:	f7ff fdcd 	bl	800cee8 <_Bfree>
 800d34e:	0030      	movs	r0, r6
 800d350:	b007      	add	sp, #28
 800d352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d354:	cb02      	ldmia	r3!, {r1}
 800d356:	c502      	stmia	r5!, {r1}
 800d358:	429a      	cmp	r2, r3
 800d35a:	d8fb      	bhi.n	800d354 <__lshift+0xc8>
 800d35c:	e7f0      	b.n	800d340 <__lshift+0xb4>
 800d35e:	46c0      	nop			; (mov r8, r8)
 800d360:	0800ebe7 	.word	0x0800ebe7
 800d364:	0800ec58 	.word	0x0800ec58

0800d368 <__mcmp>:
 800d368:	6902      	ldr	r2, [r0, #16]
 800d36a:	690b      	ldr	r3, [r1, #16]
 800d36c:	b530      	push	{r4, r5, lr}
 800d36e:	0004      	movs	r4, r0
 800d370:	1ad0      	subs	r0, r2, r3
 800d372:	429a      	cmp	r2, r3
 800d374:	d10d      	bne.n	800d392 <__mcmp+0x2a>
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	3414      	adds	r4, #20
 800d37a:	3114      	adds	r1, #20
 800d37c:	18e2      	adds	r2, r4, r3
 800d37e:	18c9      	adds	r1, r1, r3
 800d380:	3a04      	subs	r2, #4
 800d382:	3904      	subs	r1, #4
 800d384:	6815      	ldr	r5, [r2, #0]
 800d386:	680b      	ldr	r3, [r1, #0]
 800d388:	429d      	cmp	r5, r3
 800d38a:	d003      	beq.n	800d394 <__mcmp+0x2c>
 800d38c:	2001      	movs	r0, #1
 800d38e:	429d      	cmp	r5, r3
 800d390:	d303      	bcc.n	800d39a <__mcmp+0x32>
 800d392:	bd30      	pop	{r4, r5, pc}
 800d394:	4294      	cmp	r4, r2
 800d396:	d3f3      	bcc.n	800d380 <__mcmp+0x18>
 800d398:	e7fb      	b.n	800d392 <__mcmp+0x2a>
 800d39a:	4240      	negs	r0, r0
 800d39c:	e7f9      	b.n	800d392 <__mcmp+0x2a>
	...

0800d3a0 <__mdiff>:
 800d3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3a2:	000e      	movs	r6, r1
 800d3a4:	0007      	movs	r7, r0
 800d3a6:	0011      	movs	r1, r2
 800d3a8:	0030      	movs	r0, r6
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	0014      	movs	r4, r2
 800d3ae:	f7ff ffdb 	bl	800d368 <__mcmp>
 800d3b2:	1e05      	subs	r5, r0, #0
 800d3b4:	d110      	bne.n	800d3d8 <__mdiff+0x38>
 800d3b6:	0001      	movs	r1, r0
 800d3b8:	0038      	movs	r0, r7
 800d3ba:	f7ff fd51 	bl	800ce60 <_Balloc>
 800d3be:	1e02      	subs	r2, r0, #0
 800d3c0:	d104      	bne.n	800d3cc <__mdiff+0x2c>
 800d3c2:	4b40      	ldr	r3, [pc, #256]	; (800d4c4 <__mdiff+0x124>)
 800d3c4:	4940      	ldr	r1, [pc, #256]	; (800d4c8 <__mdiff+0x128>)
 800d3c6:	4841      	ldr	r0, [pc, #260]	; (800d4cc <__mdiff+0x12c>)
 800d3c8:	f000 fc12 	bl	800dbf0 <__assert_func>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	6145      	str	r5, [r0, #20]
 800d3d0:	6103      	str	r3, [r0, #16]
 800d3d2:	0010      	movs	r0, r2
 800d3d4:	b007      	add	sp, #28
 800d3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3d8:	2301      	movs	r3, #1
 800d3da:	9301      	str	r3, [sp, #4]
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	db04      	blt.n	800d3ea <__mdiff+0x4a>
 800d3e0:	0023      	movs	r3, r4
 800d3e2:	0034      	movs	r4, r6
 800d3e4:	001e      	movs	r6, r3
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	9301      	str	r3, [sp, #4]
 800d3ea:	0038      	movs	r0, r7
 800d3ec:	6861      	ldr	r1, [r4, #4]
 800d3ee:	f7ff fd37 	bl	800ce60 <_Balloc>
 800d3f2:	1e02      	subs	r2, r0, #0
 800d3f4:	d103      	bne.n	800d3fe <__mdiff+0x5e>
 800d3f6:	2190      	movs	r1, #144	; 0x90
 800d3f8:	4b32      	ldr	r3, [pc, #200]	; (800d4c4 <__mdiff+0x124>)
 800d3fa:	0089      	lsls	r1, r1, #2
 800d3fc:	e7e3      	b.n	800d3c6 <__mdiff+0x26>
 800d3fe:	9b01      	ldr	r3, [sp, #4]
 800d400:	2700      	movs	r7, #0
 800d402:	60c3      	str	r3, [r0, #12]
 800d404:	6920      	ldr	r0, [r4, #16]
 800d406:	3414      	adds	r4, #20
 800d408:	9401      	str	r4, [sp, #4]
 800d40a:	9b01      	ldr	r3, [sp, #4]
 800d40c:	0084      	lsls	r4, r0, #2
 800d40e:	191b      	adds	r3, r3, r4
 800d410:	0034      	movs	r4, r6
 800d412:	9302      	str	r3, [sp, #8]
 800d414:	6933      	ldr	r3, [r6, #16]
 800d416:	3414      	adds	r4, #20
 800d418:	0099      	lsls	r1, r3, #2
 800d41a:	1863      	adds	r3, r4, r1
 800d41c:	9303      	str	r3, [sp, #12]
 800d41e:	0013      	movs	r3, r2
 800d420:	3314      	adds	r3, #20
 800d422:	469c      	mov	ip, r3
 800d424:	9305      	str	r3, [sp, #20]
 800d426:	9b01      	ldr	r3, [sp, #4]
 800d428:	9304      	str	r3, [sp, #16]
 800d42a:	9b04      	ldr	r3, [sp, #16]
 800d42c:	cc02      	ldmia	r4!, {r1}
 800d42e:	cb20      	ldmia	r3!, {r5}
 800d430:	9304      	str	r3, [sp, #16]
 800d432:	b2ab      	uxth	r3, r5
 800d434:	19df      	adds	r7, r3, r7
 800d436:	b28b      	uxth	r3, r1
 800d438:	1afb      	subs	r3, r7, r3
 800d43a:	0c09      	lsrs	r1, r1, #16
 800d43c:	0c2d      	lsrs	r5, r5, #16
 800d43e:	1a6d      	subs	r5, r5, r1
 800d440:	1419      	asrs	r1, r3, #16
 800d442:	186d      	adds	r5, r5, r1
 800d444:	4661      	mov	r1, ip
 800d446:	142f      	asrs	r7, r5, #16
 800d448:	b29b      	uxth	r3, r3
 800d44a:	042d      	lsls	r5, r5, #16
 800d44c:	432b      	orrs	r3, r5
 800d44e:	c108      	stmia	r1!, {r3}
 800d450:	9b03      	ldr	r3, [sp, #12]
 800d452:	468c      	mov	ip, r1
 800d454:	42a3      	cmp	r3, r4
 800d456:	d8e8      	bhi.n	800d42a <__mdiff+0x8a>
 800d458:	0031      	movs	r1, r6
 800d45a:	9c03      	ldr	r4, [sp, #12]
 800d45c:	3115      	adds	r1, #21
 800d45e:	2304      	movs	r3, #4
 800d460:	428c      	cmp	r4, r1
 800d462:	d304      	bcc.n	800d46e <__mdiff+0xce>
 800d464:	1ba3      	subs	r3, r4, r6
 800d466:	3b15      	subs	r3, #21
 800d468:	089b      	lsrs	r3, r3, #2
 800d46a:	3301      	adds	r3, #1
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	9901      	ldr	r1, [sp, #4]
 800d470:	18cc      	adds	r4, r1, r3
 800d472:	9905      	ldr	r1, [sp, #20]
 800d474:	0026      	movs	r6, r4
 800d476:	18cb      	adds	r3, r1, r3
 800d478:	469c      	mov	ip, r3
 800d47a:	9902      	ldr	r1, [sp, #8]
 800d47c:	428e      	cmp	r6, r1
 800d47e:	d310      	bcc.n	800d4a2 <__mdiff+0x102>
 800d480:	9e02      	ldr	r6, [sp, #8]
 800d482:	1ee1      	subs	r1, r4, #3
 800d484:	2500      	movs	r5, #0
 800d486:	428e      	cmp	r6, r1
 800d488:	d304      	bcc.n	800d494 <__mdiff+0xf4>
 800d48a:	0031      	movs	r1, r6
 800d48c:	3103      	adds	r1, #3
 800d48e:	1b0c      	subs	r4, r1, r4
 800d490:	08a4      	lsrs	r4, r4, #2
 800d492:	00a5      	lsls	r5, r4, #2
 800d494:	195b      	adds	r3, r3, r5
 800d496:	3b04      	subs	r3, #4
 800d498:	6819      	ldr	r1, [r3, #0]
 800d49a:	2900      	cmp	r1, #0
 800d49c:	d00f      	beq.n	800d4be <__mdiff+0x11e>
 800d49e:	6110      	str	r0, [r2, #16]
 800d4a0:	e797      	b.n	800d3d2 <__mdiff+0x32>
 800d4a2:	ce02      	ldmia	r6!, {r1}
 800d4a4:	b28d      	uxth	r5, r1
 800d4a6:	19ed      	adds	r5, r5, r7
 800d4a8:	0c0f      	lsrs	r7, r1, #16
 800d4aa:	1429      	asrs	r1, r5, #16
 800d4ac:	1879      	adds	r1, r7, r1
 800d4ae:	140f      	asrs	r7, r1, #16
 800d4b0:	b2ad      	uxth	r5, r5
 800d4b2:	0409      	lsls	r1, r1, #16
 800d4b4:	430d      	orrs	r5, r1
 800d4b6:	4661      	mov	r1, ip
 800d4b8:	c120      	stmia	r1!, {r5}
 800d4ba:	468c      	mov	ip, r1
 800d4bc:	e7dd      	b.n	800d47a <__mdiff+0xda>
 800d4be:	3801      	subs	r0, #1
 800d4c0:	e7e9      	b.n	800d496 <__mdiff+0xf6>
 800d4c2:	46c0      	nop			; (mov r8, r8)
 800d4c4:	0800ebe7 	.word	0x0800ebe7
 800d4c8:	00000232 	.word	0x00000232
 800d4cc:	0800ec58 	.word	0x0800ec58

0800d4d0 <__d2b>:
 800d4d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4d2:	2101      	movs	r1, #1
 800d4d4:	0014      	movs	r4, r2
 800d4d6:	001e      	movs	r6, r3
 800d4d8:	9f08      	ldr	r7, [sp, #32]
 800d4da:	f7ff fcc1 	bl	800ce60 <_Balloc>
 800d4de:	1e05      	subs	r5, r0, #0
 800d4e0:	d105      	bne.n	800d4ee <__d2b+0x1e>
 800d4e2:	0002      	movs	r2, r0
 800d4e4:	4b26      	ldr	r3, [pc, #152]	; (800d580 <__d2b+0xb0>)
 800d4e6:	4927      	ldr	r1, [pc, #156]	; (800d584 <__d2b+0xb4>)
 800d4e8:	4827      	ldr	r0, [pc, #156]	; (800d588 <__d2b+0xb8>)
 800d4ea:	f000 fb81 	bl	800dbf0 <__assert_func>
 800d4ee:	0333      	lsls	r3, r6, #12
 800d4f0:	0076      	lsls	r6, r6, #1
 800d4f2:	0b1b      	lsrs	r3, r3, #12
 800d4f4:	0d76      	lsrs	r6, r6, #21
 800d4f6:	d124      	bne.n	800d542 <__d2b+0x72>
 800d4f8:	9301      	str	r3, [sp, #4]
 800d4fa:	2c00      	cmp	r4, #0
 800d4fc:	d027      	beq.n	800d54e <__d2b+0x7e>
 800d4fe:	4668      	mov	r0, sp
 800d500:	9400      	str	r4, [sp, #0]
 800d502:	f7ff fd73 	bl	800cfec <__lo0bits>
 800d506:	9c00      	ldr	r4, [sp, #0]
 800d508:	2800      	cmp	r0, #0
 800d50a:	d01e      	beq.n	800d54a <__d2b+0x7a>
 800d50c:	9b01      	ldr	r3, [sp, #4]
 800d50e:	2120      	movs	r1, #32
 800d510:	001a      	movs	r2, r3
 800d512:	1a09      	subs	r1, r1, r0
 800d514:	408a      	lsls	r2, r1
 800d516:	40c3      	lsrs	r3, r0
 800d518:	4322      	orrs	r2, r4
 800d51a:	616a      	str	r2, [r5, #20]
 800d51c:	9301      	str	r3, [sp, #4]
 800d51e:	9c01      	ldr	r4, [sp, #4]
 800d520:	61ac      	str	r4, [r5, #24]
 800d522:	1e63      	subs	r3, r4, #1
 800d524:	419c      	sbcs	r4, r3
 800d526:	3401      	adds	r4, #1
 800d528:	612c      	str	r4, [r5, #16]
 800d52a:	2e00      	cmp	r6, #0
 800d52c:	d018      	beq.n	800d560 <__d2b+0x90>
 800d52e:	4b17      	ldr	r3, [pc, #92]	; (800d58c <__d2b+0xbc>)
 800d530:	18f6      	adds	r6, r6, r3
 800d532:	2335      	movs	r3, #53	; 0x35
 800d534:	1836      	adds	r6, r6, r0
 800d536:	1a18      	subs	r0, r3, r0
 800d538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d53a:	603e      	str	r6, [r7, #0]
 800d53c:	6018      	str	r0, [r3, #0]
 800d53e:	0028      	movs	r0, r5
 800d540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d542:	2280      	movs	r2, #128	; 0x80
 800d544:	0352      	lsls	r2, r2, #13
 800d546:	4313      	orrs	r3, r2
 800d548:	e7d6      	b.n	800d4f8 <__d2b+0x28>
 800d54a:	616c      	str	r4, [r5, #20]
 800d54c:	e7e7      	b.n	800d51e <__d2b+0x4e>
 800d54e:	a801      	add	r0, sp, #4
 800d550:	f7ff fd4c 	bl	800cfec <__lo0bits>
 800d554:	2401      	movs	r4, #1
 800d556:	9b01      	ldr	r3, [sp, #4]
 800d558:	612c      	str	r4, [r5, #16]
 800d55a:	616b      	str	r3, [r5, #20]
 800d55c:	3020      	adds	r0, #32
 800d55e:	e7e4      	b.n	800d52a <__d2b+0x5a>
 800d560:	4b0b      	ldr	r3, [pc, #44]	; (800d590 <__d2b+0xc0>)
 800d562:	18c0      	adds	r0, r0, r3
 800d564:	4b0b      	ldr	r3, [pc, #44]	; (800d594 <__d2b+0xc4>)
 800d566:	6038      	str	r0, [r7, #0]
 800d568:	18e3      	adds	r3, r4, r3
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	18eb      	adds	r3, r5, r3
 800d56e:	6958      	ldr	r0, [r3, #20]
 800d570:	f7ff fd22 	bl	800cfb8 <__hi0bits>
 800d574:	0164      	lsls	r4, r4, #5
 800d576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d578:	1a24      	subs	r4, r4, r0
 800d57a:	601c      	str	r4, [r3, #0]
 800d57c:	e7df      	b.n	800d53e <__d2b+0x6e>
 800d57e:	46c0      	nop			; (mov r8, r8)
 800d580:	0800ebe7 	.word	0x0800ebe7
 800d584:	0000030a 	.word	0x0000030a
 800d588:	0800ec58 	.word	0x0800ec58
 800d58c:	fffffbcd 	.word	0xfffffbcd
 800d590:	fffffbce 	.word	0xfffffbce
 800d594:	3fffffff 	.word	0x3fffffff

0800d598 <_calloc_r>:
 800d598:	b570      	push	{r4, r5, r6, lr}
 800d59a:	0c13      	lsrs	r3, r2, #16
 800d59c:	0c0d      	lsrs	r5, r1, #16
 800d59e:	d11e      	bne.n	800d5de <_calloc_r+0x46>
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d10c      	bne.n	800d5be <_calloc_r+0x26>
 800d5a4:	b289      	uxth	r1, r1
 800d5a6:	b294      	uxth	r4, r2
 800d5a8:	434c      	muls	r4, r1
 800d5aa:	0021      	movs	r1, r4
 800d5ac:	f000 f88c 	bl	800d6c8 <_malloc_r>
 800d5b0:	1e05      	subs	r5, r0, #0
 800d5b2:	d01b      	beq.n	800d5ec <_calloc_r+0x54>
 800d5b4:	0022      	movs	r2, r4
 800d5b6:	2100      	movs	r1, #0
 800d5b8:	f7fd fd65 	bl	800b086 <memset>
 800d5bc:	e016      	b.n	800d5ec <_calloc_r+0x54>
 800d5be:	1c1d      	adds	r5, r3, #0
 800d5c0:	1c0b      	adds	r3, r1, #0
 800d5c2:	b292      	uxth	r2, r2
 800d5c4:	b289      	uxth	r1, r1
 800d5c6:	b29c      	uxth	r4, r3
 800d5c8:	4351      	muls	r1, r2
 800d5ca:	b2ab      	uxth	r3, r5
 800d5cc:	4363      	muls	r3, r4
 800d5ce:	0c0c      	lsrs	r4, r1, #16
 800d5d0:	191c      	adds	r4, r3, r4
 800d5d2:	0c22      	lsrs	r2, r4, #16
 800d5d4:	d107      	bne.n	800d5e6 <_calloc_r+0x4e>
 800d5d6:	0424      	lsls	r4, r4, #16
 800d5d8:	b289      	uxth	r1, r1
 800d5da:	430c      	orrs	r4, r1
 800d5dc:	e7e5      	b.n	800d5aa <_calloc_r+0x12>
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d101      	bne.n	800d5e6 <_calloc_r+0x4e>
 800d5e2:	1c13      	adds	r3, r2, #0
 800d5e4:	e7ed      	b.n	800d5c2 <_calloc_r+0x2a>
 800d5e6:	230c      	movs	r3, #12
 800d5e8:	2500      	movs	r5, #0
 800d5ea:	6003      	str	r3, [r0, #0]
 800d5ec:	0028      	movs	r0, r5
 800d5ee:	bd70      	pop	{r4, r5, r6, pc}

0800d5f0 <_free_r>:
 800d5f0:	b570      	push	{r4, r5, r6, lr}
 800d5f2:	0005      	movs	r5, r0
 800d5f4:	2900      	cmp	r1, #0
 800d5f6:	d010      	beq.n	800d61a <_free_r+0x2a>
 800d5f8:	1f0c      	subs	r4, r1, #4
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	da00      	bge.n	800d602 <_free_r+0x12>
 800d600:	18e4      	adds	r4, r4, r3
 800d602:	0028      	movs	r0, r5
 800d604:	f000 fb7e 	bl	800dd04 <__malloc_lock>
 800d608:	4a1d      	ldr	r2, [pc, #116]	; (800d680 <_free_r+0x90>)
 800d60a:	6813      	ldr	r3, [r2, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d105      	bne.n	800d61c <_free_r+0x2c>
 800d610:	6063      	str	r3, [r4, #4]
 800d612:	6014      	str	r4, [r2, #0]
 800d614:	0028      	movs	r0, r5
 800d616:	f000 fb7d 	bl	800dd14 <__malloc_unlock>
 800d61a:	bd70      	pop	{r4, r5, r6, pc}
 800d61c:	42a3      	cmp	r3, r4
 800d61e:	d908      	bls.n	800d632 <_free_r+0x42>
 800d620:	6821      	ldr	r1, [r4, #0]
 800d622:	1860      	adds	r0, r4, r1
 800d624:	4283      	cmp	r3, r0
 800d626:	d1f3      	bne.n	800d610 <_free_r+0x20>
 800d628:	6818      	ldr	r0, [r3, #0]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	1841      	adds	r1, r0, r1
 800d62e:	6021      	str	r1, [r4, #0]
 800d630:	e7ee      	b.n	800d610 <_free_r+0x20>
 800d632:	001a      	movs	r2, r3
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d001      	beq.n	800d63e <_free_r+0x4e>
 800d63a:	42a3      	cmp	r3, r4
 800d63c:	d9f9      	bls.n	800d632 <_free_r+0x42>
 800d63e:	6811      	ldr	r1, [r2, #0]
 800d640:	1850      	adds	r0, r2, r1
 800d642:	42a0      	cmp	r0, r4
 800d644:	d10b      	bne.n	800d65e <_free_r+0x6e>
 800d646:	6820      	ldr	r0, [r4, #0]
 800d648:	1809      	adds	r1, r1, r0
 800d64a:	1850      	adds	r0, r2, r1
 800d64c:	6011      	str	r1, [r2, #0]
 800d64e:	4283      	cmp	r3, r0
 800d650:	d1e0      	bne.n	800d614 <_free_r+0x24>
 800d652:	6818      	ldr	r0, [r3, #0]
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	1841      	adds	r1, r0, r1
 800d658:	6011      	str	r1, [r2, #0]
 800d65a:	6053      	str	r3, [r2, #4]
 800d65c:	e7da      	b.n	800d614 <_free_r+0x24>
 800d65e:	42a0      	cmp	r0, r4
 800d660:	d902      	bls.n	800d668 <_free_r+0x78>
 800d662:	230c      	movs	r3, #12
 800d664:	602b      	str	r3, [r5, #0]
 800d666:	e7d5      	b.n	800d614 <_free_r+0x24>
 800d668:	6821      	ldr	r1, [r4, #0]
 800d66a:	1860      	adds	r0, r4, r1
 800d66c:	4283      	cmp	r3, r0
 800d66e:	d103      	bne.n	800d678 <_free_r+0x88>
 800d670:	6818      	ldr	r0, [r3, #0]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	1841      	adds	r1, r0, r1
 800d676:	6021      	str	r1, [r4, #0]
 800d678:	6063      	str	r3, [r4, #4]
 800d67a:	6054      	str	r4, [r2, #4]
 800d67c:	e7ca      	b.n	800d614 <_free_r+0x24>
 800d67e:	46c0      	nop			; (mov r8, r8)
 800d680:	200006a8 	.word	0x200006a8

0800d684 <sbrk_aligned>:
 800d684:	b570      	push	{r4, r5, r6, lr}
 800d686:	4e0f      	ldr	r6, [pc, #60]	; (800d6c4 <sbrk_aligned+0x40>)
 800d688:	000d      	movs	r5, r1
 800d68a:	6831      	ldr	r1, [r6, #0]
 800d68c:	0004      	movs	r4, r0
 800d68e:	2900      	cmp	r1, #0
 800d690:	d102      	bne.n	800d698 <sbrk_aligned+0x14>
 800d692:	f000 fa3b 	bl	800db0c <_sbrk_r>
 800d696:	6030      	str	r0, [r6, #0]
 800d698:	0029      	movs	r1, r5
 800d69a:	0020      	movs	r0, r4
 800d69c:	f000 fa36 	bl	800db0c <_sbrk_r>
 800d6a0:	1c43      	adds	r3, r0, #1
 800d6a2:	d00a      	beq.n	800d6ba <sbrk_aligned+0x36>
 800d6a4:	2303      	movs	r3, #3
 800d6a6:	1cc5      	adds	r5, r0, #3
 800d6a8:	439d      	bics	r5, r3
 800d6aa:	42a8      	cmp	r0, r5
 800d6ac:	d007      	beq.n	800d6be <sbrk_aligned+0x3a>
 800d6ae:	1a29      	subs	r1, r5, r0
 800d6b0:	0020      	movs	r0, r4
 800d6b2:	f000 fa2b 	bl	800db0c <_sbrk_r>
 800d6b6:	1c43      	adds	r3, r0, #1
 800d6b8:	d101      	bne.n	800d6be <sbrk_aligned+0x3a>
 800d6ba:	2501      	movs	r5, #1
 800d6bc:	426d      	negs	r5, r5
 800d6be:	0028      	movs	r0, r5
 800d6c0:	bd70      	pop	{r4, r5, r6, pc}
 800d6c2:	46c0      	nop			; (mov r8, r8)
 800d6c4:	200006ac 	.word	0x200006ac

0800d6c8 <_malloc_r>:
 800d6c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6ca:	2203      	movs	r2, #3
 800d6cc:	1ccb      	adds	r3, r1, #3
 800d6ce:	4393      	bics	r3, r2
 800d6d0:	3308      	adds	r3, #8
 800d6d2:	0006      	movs	r6, r0
 800d6d4:	001f      	movs	r7, r3
 800d6d6:	2b0c      	cmp	r3, #12
 800d6d8:	d232      	bcs.n	800d740 <_malloc_r+0x78>
 800d6da:	270c      	movs	r7, #12
 800d6dc:	42b9      	cmp	r1, r7
 800d6de:	d831      	bhi.n	800d744 <_malloc_r+0x7c>
 800d6e0:	0030      	movs	r0, r6
 800d6e2:	f000 fb0f 	bl	800dd04 <__malloc_lock>
 800d6e6:	4d32      	ldr	r5, [pc, #200]	; (800d7b0 <_malloc_r+0xe8>)
 800d6e8:	682b      	ldr	r3, [r5, #0]
 800d6ea:	001c      	movs	r4, r3
 800d6ec:	2c00      	cmp	r4, #0
 800d6ee:	d12e      	bne.n	800d74e <_malloc_r+0x86>
 800d6f0:	0039      	movs	r1, r7
 800d6f2:	0030      	movs	r0, r6
 800d6f4:	f7ff ffc6 	bl	800d684 <sbrk_aligned>
 800d6f8:	0004      	movs	r4, r0
 800d6fa:	1c43      	adds	r3, r0, #1
 800d6fc:	d11e      	bne.n	800d73c <_malloc_r+0x74>
 800d6fe:	682c      	ldr	r4, [r5, #0]
 800d700:	0025      	movs	r5, r4
 800d702:	2d00      	cmp	r5, #0
 800d704:	d14a      	bne.n	800d79c <_malloc_r+0xd4>
 800d706:	6823      	ldr	r3, [r4, #0]
 800d708:	0029      	movs	r1, r5
 800d70a:	18e3      	adds	r3, r4, r3
 800d70c:	0030      	movs	r0, r6
 800d70e:	9301      	str	r3, [sp, #4]
 800d710:	f000 f9fc 	bl	800db0c <_sbrk_r>
 800d714:	9b01      	ldr	r3, [sp, #4]
 800d716:	4283      	cmp	r3, r0
 800d718:	d143      	bne.n	800d7a2 <_malloc_r+0xda>
 800d71a:	6823      	ldr	r3, [r4, #0]
 800d71c:	3703      	adds	r7, #3
 800d71e:	1aff      	subs	r7, r7, r3
 800d720:	2303      	movs	r3, #3
 800d722:	439f      	bics	r7, r3
 800d724:	3708      	adds	r7, #8
 800d726:	2f0c      	cmp	r7, #12
 800d728:	d200      	bcs.n	800d72c <_malloc_r+0x64>
 800d72a:	270c      	movs	r7, #12
 800d72c:	0039      	movs	r1, r7
 800d72e:	0030      	movs	r0, r6
 800d730:	f7ff ffa8 	bl	800d684 <sbrk_aligned>
 800d734:	1c43      	adds	r3, r0, #1
 800d736:	d034      	beq.n	800d7a2 <_malloc_r+0xda>
 800d738:	6823      	ldr	r3, [r4, #0]
 800d73a:	19df      	adds	r7, r3, r7
 800d73c:	6027      	str	r7, [r4, #0]
 800d73e:	e013      	b.n	800d768 <_malloc_r+0xa0>
 800d740:	2b00      	cmp	r3, #0
 800d742:	dacb      	bge.n	800d6dc <_malloc_r+0x14>
 800d744:	230c      	movs	r3, #12
 800d746:	2500      	movs	r5, #0
 800d748:	6033      	str	r3, [r6, #0]
 800d74a:	0028      	movs	r0, r5
 800d74c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d74e:	6822      	ldr	r2, [r4, #0]
 800d750:	1bd1      	subs	r1, r2, r7
 800d752:	d420      	bmi.n	800d796 <_malloc_r+0xce>
 800d754:	290b      	cmp	r1, #11
 800d756:	d917      	bls.n	800d788 <_malloc_r+0xc0>
 800d758:	19e2      	adds	r2, r4, r7
 800d75a:	6027      	str	r7, [r4, #0]
 800d75c:	42a3      	cmp	r3, r4
 800d75e:	d111      	bne.n	800d784 <_malloc_r+0xbc>
 800d760:	602a      	str	r2, [r5, #0]
 800d762:	6863      	ldr	r3, [r4, #4]
 800d764:	6011      	str	r1, [r2, #0]
 800d766:	6053      	str	r3, [r2, #4]
 800d768:	0030      	movs	r0, r6
 800d76a:	0025      	movs	r5, r4
 800d76c:	f000 fad2 	bl	800dd14 <__malloc_unlock>
 800d770:	2207      	movs	r2, #7
 800d772:	350b      	adds	r5, #11
 800d774:	1d23      	adds	r3, r4, #4
 800d776:	4395      	bics	r5, r2
 800d778:	1aea      	subs	r2, r5, r3
 800d77a:	429d      	cmp	r5, r3
 800d77c:	d0e5      	beq.n	800d74a <_malloc_r+0x82>
 800d77e:	1b5b      	subs	r3, r3, r5
 800d780:	50a3      	str	r3, [r4, r2]
 800d782:	e7e2      	b.n	800d74a <_malloc_r+0x82>
 800d784:	605a      	str	r2, [r3, #4]
 800d786:	e7ec      	b.n	800d762 <_malloc_r+0x9a>
 800d788:	6862      	ldr	r2, [r4, #4]
 800d78a:	42a3      	cmp	r3, r4
 800d78c:	d101      	bne.n	800d792 <_malloc_r+0xca>
 800d78e:	602a      	str	r2, [r5, #0]
 800d790:	e7ea      	b.n	800d768 <_malloc_r+0xa0>
 800d792:	605a      	str	r2, [r3, #4]
 800d794:	e7e8      	b.n	800d768 <_malloc_r+0xa0>
 800d796:	0023      	movs	r3, r4
 800d798:	6864      	ldr	r4, [r4, #4]
 800d79a:	e7a7      	b.n	800d6ec <_malloc_r+0x24>
 800d79c:	002c      	movs	r4, r5
 800d79e:	686d      	ldr	r5, [r5, #4]
 800d7a0:	e7af      	b.n	800d702 <_malloc_r+0x3a>
 800d7a2:	230c      	movs	r3, #12
 800d7a4:	0030      	movs	r0, r6
 800d7a6:	6033      	str	r3, [r6, #0]
 800d7a8:	f000 fab4 	bl	800dd14 <__malloc_unlock>
 800d7ac:	e7cd      	b.n	800d74a <_malloc_r+0x82>
 800d7ae:	46c0      	nop			; (mov r8, r8)
 800d7b0:	200006a8 	.word	0x200006a8

0800d7b4 <__sfputc_r>:
 800d7b4:	6893      	ldr	r3, [r2, #8]
 800d7b6:	b510      	push	{r4, lr}
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	6093      	str	r3, [r2, #8]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	da04      	bge.n	800d7ca <__sfputc_r+0x16>
 800d7c0:	6994      	ldr	r4, [r2, #24]
 800d7c2:	42a3      	cmp	r3, r4
 800d7c4:	db07      	blt.n	800d7d6 <__sfputc_r+0x22>
 800d7c6:	290a      	cmp	r1, #10
 800d7c8:	d005      	beq.n	800d7d6 <__sfputc_r+0x22>
 800d7ca:	6813      	ldr	r3, [r2, #0]
 800d7cc:	1c58      	adds	r0, r3, #1
 800d7ce:	6010      	str	r0, [r2, #0]
 800d7d0:	7019      	strb	r1, [r3, #0]
 800d7d2:	0008      	movs	r0, r1
 800d7d4:	bd10      	pop	{r4, pc}
 800d7d6:	f7fe f977 	bl	800bac8 <__swbuf_r>
 800d7da:	0001      	movs	r1, r0
 800d7dc:	e7f9      	b.n	800d7d2 <__sfputc_r+0x1e>

0800d7de <__sfputs_r>:
 800d7de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e0:	0006      	movs	r6, r0
 800d7e2:	000f      	movs	r7, r1
 800d7e4:	0014      	movs	r4, r2
 800d7e6:	18d5      	adds	r5, r2, r3
 800d7e8:	42ac      	cmp	r4, r5
 800d7ea:	d101      	bne.n	800d7f0 <__sfputs_r+0x12>
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	e007      	b.n	800d800 <__sfputs_r+0x22>
 800d7f0:	7821      	ldrb	r1, [r4, #0]
 800d7f2:	003a      	movs	r2, r7
 800d7f4:	0030      	movs	r0, r6
 800d7f6:	f7ff ffdd 	bl	800d7b4 <__sfputc_r>
 800d7fa:	3401      	adds	r4, #1
 800d7fc:	1c43      	adds	r3, r0, #1
 800d7fe:	d1f3      	bne.n	800d7e8 <__sfputs_r+0xa>
 800d800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d804 <_vfiprintf_r>:
 800d804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d806:	b0a1      	sub	sp, #132	; 0x84
 800d808:	0006      	movs	r6, r0
 800d80a:	000c      	movs	r4, r1
 800d80c:	001f      	movs	r7, r3
 800d80e:	9203      	str	r2, [sp, #12]
 800d810:	2800      	cmp	r0, #0
 800d812:	d004      	beq.n	800d81e <_vfiprintf_r+0x1a>
 800d814:	6983      	ldr	r3, [r0, #24]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d101      	bne.n	800d81e <_vfiprintf_r+0x1a>
 800d81a:	f7ff f9f7 	bl	800cc0c <__sinit>
 800d81e:	4b8e      	ldr	r3, [pc, #568]	; (800da58 <_vfiprintf_r+0x254>)
 800d820:	429c      	cmp	r4, r3
 800d822:	d11c      	bne.n	800d85e <_vfiprintf_r+0x5a>
 800d824:	6874      	ldr	r4, [r6, #4]
 800d826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d828:	07db      	lsls	r3, r3, #31
 800d82a:	d405      	bmi.n	800d838 <_vfiprintf_r+0x34>
 800d82c:	89a3      	ldrh	r3, [r4, #12]
 800d82e:	059b      	lsls	r3, r3, #22
 800d830:	d402      	bmi.n	800d838 <_vfiprintf_r+0x34>
 800d832:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d834:	f7ff fa8f 	bl	800cd56 <__retarget_lock_acquire_recursive>
 800d838:	89a3      	ldrh	r3, [r4, #12]
 800d83a:	071b      	lsls	r3, r3, #28
 800d83c:	d502      	bpl.n	800d844 <_vfiprintf_r+0x40>
 800d83e:	6923      	ldr	r3, [r4, #16]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d11d      	bne.n	800d880 <_vfiprintf_r+0x7c>
 800d844:	0021      	movs	r1, r4
 800d846:	0030      	movs	r0, r6
 800d848:	f7fe f994 	bl	800bb74 <__swsetup_r>
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d017      	beq.n	800d880 <_vfiprintf_r+0x7c>
 800d850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d852:	07db      	lsls	r3, r3, #31
 800d854:	d50d      	bpl.n	800d872 <_vfiprintf_r+0x6e>
 800d856:	2001      	movs	r0, #1
 800d858:	4240      	negs	r0, r0
 800d85a:	b021      	add	sp, #132	; 0x84
 800d85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d85e:	4b7f      	ldr	r3, [pc, #508]	; (800da5c <_vfiprintf_r+0x258>)
 800d860:	429c      	cmp	r4, r3
 800d862:	d101      	bne.n	800d868 <_vfiprintf_r+0x64>
 800d864:	68b4      	ldr	r4, [r6, #8]
 800d866:	e7de      	b.n	800d826 <_vfiprintf_r+0x22>
 800d868:	4b7d      	ldr	r3, [pc, #500]	; (800da60 <_vfiprintf_r+0x25c>)
 800d86a:	429c      	cmp	r4, r3
 800d86c:	d1db      	bne.n	800d826 <_vfiprintf_r+0x22>
 800d86e:	68f4      	ldr	r4, [r6, #12]
 800d870:	e7d9      	b.n	800d826 <_vfiprintf_r+0x22>
 800d872:	89a3      	ldrh	r3, [r4, #12]
 800d874:	059b      	lsls	r3, r3, #22
 800d876:	d4ee      	bmi.n	800d856 <_vfiprintf_r+0x52>
 800d878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d87a:	f7ff fa6d 	bl	800cd58 <__retarget_lock_release_recursive>
 800d87e:	e7ea      	b.n	800d856 <_vfiprintf_r+0x52>
 800d880:	2300      	movs	r3, #0
 800d882:	ad08      	add	r5, sp, #32
 800d884:	616b      	str	r3, [r5, #20]
 800d886:	3320      	adds	r3, #32
 800d888:	766b      	strb	r3, [r5, #25]
 800d88a:	3310      	adds	r3, #16
 800d88c:	76ab      	strb	r3, [r5, #26]
 800d88e:	9707      	str	r7, [sp, #28]
 800d890:	9f03      	ldr	r7, [sp, #12]
 800d892:	783b      	ldrb	r3, [r7, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d001      	beq.n	800d89c <_vfiprintf_r+0x98>
 800d898:	2b25      	cmp	r3, #37	; 0x25
 800d89a:	d14e      	bne.n	800d93a <_vfiprintf_r+0x136>
 800d89c:	9b03      	ldr	r3, [sp, #12]
 800d89e:	1afb      	subs	r3, r7, r3
 800d8a0:	9305      	str	r3, [sp, #20]
 800d8a2:	9b03      	ldr	r3, [sp, #12]
 800d8a4:	429f      	cmp	r7, r3
 800d8a6:	d00d      	beq.n	800d8c4 <_vfiprintf_r+0xc0>
 800d8a8:	9b05      	ldr	r3, [sp, #20]
 800d8aa:	0021      	movs	r1, r4
 800d8ac:	0030      	movs	r0, r6
 800d8ae:	9a03      	ldr	r2, [sp, #12]
 800d8b0:	f7ff ff95 	bl	800d7de <__sfputs_r>
 800d8b4:	1c43      	adds	r3, r0, #1
 800d8b6:	d100      	bne.n	800d8ba <_vfiprintf_r+0xb6>
 800d8b8:	e0b5      	b.n	800da26 <_vfiprintf_r+0x222>
 800d8ba:	696a      	ldr	r2, [r5, #20]
 800d8bc:	9b05      	ldr	r3, [sp, #20]
 800d8be:	4694      	mov	ip, r2
 800d8c0:	4463      	add	r3, ip
 800d8c2:	616b      	str	r3, [r5, #20]
 800d8c4:	783b      	ldrb	r3, [r7, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d100      	bne.n	800d8cc <_vfiprintf_r+0xc8>
 800d8ca:	e0ac      	b.n	800da26 <_vfiprintf_r+0x222>
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	1c7b      	adds	r3, r7, #1
 800d8d0:	9303      	str	r3, [sp, #12]
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	4252      	negs	r2, r2
 800d8d6:	606a      	str	r2, [r5, #4]
 800d8d8:	a904      	add	r1, sp, #16
 800d8da:	3254      	adds	r2, #84	; 0x54
 800d8dc:	1852      	adds	r2, r2, r1
 800d8de:	602b      	str	r3, [r5, #0]
 800d8e0:	60eb      	str	r3, [r5, #12]
 800d8e2:	60ab      	str	r3, [r5, #8]
 800d8e4:	7013      	strb	r3, [r2, #0]
 800d8e6:	65ab      	str	r3, [r5, #88]	; 0x58
 800d8e8:	9b03      	ldr	r3, [sp, #12]
 800d8ea:	2205      	movs	r2, #5
 800d8ec:	7819      	ldrb	r1, [r3, #0]
 800d8ee:	485d      	ldr	r0, [pc, #372]	; (800da64 <_vfiprintf_r+0x260>)
 800d8f0:	f7ff faaa 	bl	800ce48 <memchr>
 800d8f4:	9b03      	ldr	r3, [sp, #12]
 800d8f6:	1c5f      	adds	r7, r3, #1
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d120      	bne.n	800d93e <_vfiprintf_r+0x13a>
 800d8fc:	682a      	ldr	r2, [r5, #0]
 800d8fe:	06d3      	lsls	r3, r2, #27
 800d900:	d504      	bpl.n	800d90c <_vfiprintf_r+0x108>
 800d902:	2353      	movs	r3, #83	; 0x53
 800d904:	a904      	add	r1, sp, #16
 800d906:	185b      	adds	r3, r3, r1
 800d908:	2120      	movs	r1, #32
 800d90a:	7019      	strb	r1, [r3, #0]
 800d90c:	0713      	lsls	r3, r2, #28
 800d90e:	d504      	bpl.n	800d91a <_vfiprintf_r+0x116>
 800d910:	2353      	movs	r3, #83	; 0x53
 800d912:	a904      	add	r1, sp, #16
 800d914:	185b      	adds	r3, r3, r1
 800d916:	212b      	movs	r1, #43	; 0x2b
 800d918:	7019      	strb	r1, [r3, #0]
 800d91a:	9b03      	ldr	r3, [sp, #12]
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	2b2a      	cmp	r3, #42	; 0x2a
 800d920:	d016      	beq.n	800d950 <_vfiprintf_r+0x14c>
 800d922:	2100      	movs	r1, #0
 800d924:	68eb      	ldr	r3, [r5, #12]
 800d926:	9f03      	ldr	r7, [sp, #12]
 800d928:	783a      	ldrb	r2, [r7, #0]
 800d92a:	1c78      	adds	r0, r7, #1
 800d92c:	3a30      	subs	r2, #48	; 0x30
 800d92e:	4684      	mov	ip, r0
 800d930:	2a09      	cmp	r2, #9
 800d932:	d94f      	bls.n	800d9d4 <_vfiprintf_r+0x1d0>
 800d934:	2900      	cmp	r1, #0
 800d936:	d111      	bne.n	800d95c <_vfiprintf_r+0x158>
 800d938:	e017      	b.n	800d96a <_vfiprintf_r+0x166>
 800d93a:	3701      	adds	r7, #1
 800d93c:	e7a9      	b.n	800d892 <_vfiprintf_r+0x8e>
 800d93e:	4b49      	ldr	r3, [pc, #292]	; (800da64 <_vfiprintf_r+0x260>)
 800d940:	682a      	ldr	r2, [r5, #0]
 800d942:	1ac0      	subs	r0, r0, r3
 800d944:	2301      	movs	r3, #1
 800d946:	4083      	lsls	r3, r0
 800d948:	4313      	orrs	r3, r2
 800d94a:	602b      	str	r3, [r5, #0]
 800d94c:	9703      	str	r7, [sp, #12]
 800d94e:	e7cb      	b.n	800d8e8 <_vfiprintf_r+0xe4>
 800d950:	9b07      	ldr	r3, [sp, #28]
 800d952:	1d19      	adds	r1, r3, #4
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	9107      	str	r1, [sp, #28]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	db01      	blt.n	800d960 <_vfiprintf_r+0x15c>
 800d95c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d95e:	e004      	b.n	800d96a <_vfiprintf_r+0x166>
 800d960:	425b      	negs	r3, r3
 800d962:	60eb      	str	r3, [r5, #12]
 800d964:	2302      	movs	r3, #2
 800d966:	4313      	orrs	r3, r2
 800d968:	602b      	str	r3, [r5, #0]
 800d96a:	783b      	ldrb	r3, [r7, #0]
 800d96c:	2b2e      	cmp	r3, #46	; 0x2e
 800d96e:	d10a      	bne.n	800d986 <_vfiprintf_r+0x182>
 800d970:	787b      	ldrb	r3, [r7, #1]
 800d972:	2b2a      	cmp	r3, #42	; 0x2a
 800d974:	d137      	bne.n	800d9e6 <_vfiprintf_r+0x1e2>
 800d976:	9b07      	ldr	r3, [sp, #28]
 800d978:	3702      	adds	r7, #2
 800d97a:	1d1a      	adds	r2, r3, #4
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	9207      	str	r2, [sp, #28]
 800d980:	2b00      	cmp	r3, #0
 800d982:	db2d      	blt.n	800d9e0 <_vfiprintf_r+0x1dc>
 800d984:	9309      	str	r3, [sp, #36]	; 0x24
 800d986:	2203      	movs	r2, #3
 800d988:	7839      	ldrb	r1, [r7, #0]
 800d98a:	4837      	ldr	r0, [pc, #220]	; (800da68 <_vfiprintf_r+0x264>)
 800d98c:	f7ff fa5c 	bl	800ce48 <memchr>
 800d990:	2800      	cmp	r0, #0
 800d992:	d007      	beq.n	800d9a4 <_vfiprintf_r+0x1a0>
 800d994:	4b34      	ldr	r3, [pc, #208]	; (800da68 <_vfiprintf_r+0x264>)
 800d996:	682a      	ldr	r2, [r5, #0]
 800d998:	1ac0      	subs	r0, r0, r3
 800d99a:	2340      	movs	r3, #64	; 0x40
 800d99c:	4083      	lsls	r3, r0
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	3701      	adds	r7, #1
 800d9a2:	602b      	str	r3, [r5, #0]
 800d9a4:	7839      	ldrb	r1, [r7, #0]
 800d9a6:	1c7b      	adds	r3, r7, #1
 800d9a8:	2206      	movs	r2, #6
 800d9aa:	4830      	ldr	r0, [pc, #192]	; (800da6c <_vfiprintf_r+0x268>)
 800d9ac:	9303      	str	r3, [sp, #12]
 800d9ae:	7629      	strb	r1, [r5, #24]
 800d9b0:	f7ff fa4a 	bl	800ce48 <memchr>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d045      	beq.n	800da44 <_vfiprintf_r+0x240>
 800d9b8:	4b2d      	ldr	r3, [pc, #180]	; (800da70 <_vfiprintf_r+0x26c>)
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d127      	bne.n	800da0e <_vfiprintf_r+0x20a>
 800d9be:	2207      	movs	r2, #7
 800d9c0:	9b07      	ldr	r3, [sp, #28]
 800d9c2:	3307      	adds	r3, #7
 800d9c4:	4393      	bics	r3, r2
 800d9c6:	3308      	adds	r3, #8
 800d9c8:	9307      	str	r3, [sp, #28]
 800d9ca:	696b      	ldr	r3, [r5, #20]
 800d9cc:	9a04      	ldr	r2, [sp, #16]
 800d9ce:	189b      	adds	r3, r3, r2
 800d9d0:	616b      	str	r3, [r5, #20]
 800d9d2:	e75d      	b.n	800d890 <_vfiprintf_r+0x8c>
 800d9d4:	210a      	movs	r1, #10
 800d9d6:	434b      	muls	r3, r1
 800d9d8:	4667      	mov	r7, ip
 800d9da:	189b      	adds	r3, r3, r2
 800d9dc:	3909      	subs	r1, #9
 800d9de:	e7a3      	b.n	800d928 <_vfiprintf_r+0x124>
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	425b      	negs	r3, r3
 800d9e4:	e7ce      	b.n	800d984 <_vfiprintf_r+0x180>
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	001a      	movs	r2, r3
 800d9ea:	3701      	adds	r7, #1
 800d9ec:	606b      	str	r3, [r5, #4]
 800d9ee:	7839      	ldrb	r1, [r7, #0]
 800d9f0:	1c78      	adds	r0, r7, #1
 800d9f2:	3930      	subs	r1, #48	; 0x30
 800d9f4:	4684      	mov	ip, r0
 800d9f6:	2909      	cmp	r1, #9
 800d9f8:	d903      	bls.n	800da02 <_vfiprintf_r+0x1fe>
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d0c3      	beq.n	800d986 <_vfiprintf_r+0x182>
 800d9fe:	9209      	str	r2, [sp, #36]	; 0x24
 800da00:	e7c1      	b.n	800d986 <_vfiprintf_r+0x182>
 800da02:	230a      	movs	r3, #10
 800da04:	435a      	muls	r2, r3
 800da06:	4667      	mov	r7, ip
 800da08:	1852      	adds	r2, r2, r1
 800da0a:	3b09      	subs	r3, #9
 800da0c:	e7ef      	b.n	800d9ee <_vfiprintf_r+0x1ea>
 800da0e:	ab07      	add	r3, sp, #28
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	0022      	movs	r2, r4
 800da14:	0029      	movs	r1, r5
 800da16:	0030      	movs	r0, r6
 800da18:	4b16      	ldr	r3, [pc, #88]	; (800da74 <_vfiprintf_r+0x270>)
 800da1a:	f7fd fbe7 	bl	800b1ec <_printf_float>
 800da1e:	9004      	str	r0, [sp, #16]
 800da20:	9b04      	ldr	r3, [sp, #16]
 800da22:	3301      	adds	r3, #1
 800da24:	d1d1      	bne.n	800d9ca <_vfiprintf_r+0x1c6>
 800da26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da28:	07db      	lsls	r3, r3, #31
 800da2a:	d405      	bmi.n	800da38 <_vfiprintf_r+0x234>
 800da2c:	89a3      	ldrh	r3, [r4, #12]
 800da2e:	059b      	lsls	r3, r3, #22
 800da30:	d402      	bmi.n	800da38 <_vfiprintf_r+0x234>
 800da32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da34:	f7ff f990 	bl	800cd58 <__retarget_lock_release_recursive>
 800da38:	89a3      	ldrh	r3, [r4, #12]
 800da3a:	065b      	lsls	r3, r3, #25
 800da3c:	d500      	bpl.n	800da40 <_vfiprintf_r+0x23c>
 800da3e:	e70a      	b.n	800d856 <_vfiprintf_r+0x52>
 800da40:	980d      	ldr	r0, [sp, #52]	; 0x34
 800da42:	e70a      	b.n	800d85a <_vfiprintf_r+0x56>
 800da44:	ab07      	add	r3, sp, #28
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	0022      	movs	r2, r4
 800da4a:	0029      	movs	r1, r5
 800da4c:	0030      	movs	r0, r6
 800da4e:	4b09      	ldr	r3, [pc, #36]	; (800da74 <_vfiprintf_r+0x270>)
 800da50:	f7fd fe7e 	bl	800b750 <_printf_i>
 800da54:	e7e3      	b.n	800da1e <_vfiprintf_r+0x21a>
 800da56:	46c0      	nop			; (mov r8, r8)
 800da58:	0800ec18 	.word	0x0800ec18
 800da5c:	0800ec38 	.word	0x0800ec38
 800da60:	0800ebf8 	.word	0x0800ebf8
 800da64:	0800edb4 	.word	0x0800edb4
 800da68:	0800edba 	.word	0x0800edba
 800da6c:	0800edbe 	.word	0x0800edbe
 800da70:	0800b1ed 	.word	0x0800b1ed
 800da74:	0800d7df 	.word	0x0800d7df

0800da78 <_putc_r>:
 800da78:	b570      	push	{r4, r5, r6, lr}
 800da7a:	0006      	movs	r6, r0
 800da7c:	000d      	movs	r5, r1
 800da7e:	0014      	movs	r4, r2
 800da80:	2800      	cmp	r0, #0
 800da82:	d004      	beq.n	800da8e <_putc_r+0x16>
 800da84:	6983      	ldr	r3, [r0, #24]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d101      	bne.n	800da8e <_putc_r+0x16>
 800da8a:	f7ff f8bf 	bl	800cc0c <__sinit>
 800da8e:	4b1c      	ldr	r3, [pc, #112]	; (800db00 <_putc_r+0x88>)
 800da90:	429c      	cmp	r4, r3
 800da92:	d124      	bne.n	800dade <_putc_r+0x66>
 800da94:	6874      	ldr	r4, [r6, #4]
 800da96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da98:	07db      	lsls	r3, r3, #31
 800da9a:	d405      	bmi.n	800daa8 <_putc_r+0x30>
 800da9c:	89a3      	ldrh	r3, [r4, #12]
 800da9e:	059b      	lsls	r3, r3, #22
 800daa0:	d402      	bmi.n	800daa8 <_putc_r+0x30>
 800daa2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800daa4:	f7ff f957 	bl	800cd56 <__retarget_lock_acquire_recursive>
 800daa8:	68a3      	ldr	r3, [r4, #8]
 800daaa:	3b01      	subs	r3, #1
 800daac:	60a3      	str	r3, [r4, #8]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	da05      	bge.n	800dabe <_putc_r+0x46>
 800dab2:	69a2      	ldr	r2, [r4, #24]
 800dab4:	4293      	cmp	r3, r2
 800dab6:	db1c      	blt.n	800daf2 <_putc_r+0x7a>
 800dab8:	b2eb      	uxtb	r3, r5
 800daba:	2b0a      	cmp	r3, #10
 800dabc:	d019      	beq.n	800daf2 <_putc_r+0x7a>
 800dabe:	6823      	ldr	r3, [r4, #0]
 800dac0:	1c5a      	adds	r2, r3, #1
 800dac2:	6022      	str	r2, [r4, #0]
 800dac4:	701d      	strb	r5, [r3, #0]
 800dac6:	b2ed      	uxtb	r5, r5
 800dac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800daca:	07db      	lsls	r3, r3, #31
 800dacc:	d405      	bmi.n	800dada <_putc_r+0x62>
 800dace:	89a3      	ldrh	r3, [r4, #12]
 800dad0:	059b      	lsls	r3, r3, #22
 800dad2:	d402      	bmi.n	800dada <_putc_r+0x62>
 800dad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dad6:	f7ff f93f 	bl	800cd58 <__retarget_lock_release_recursive>
 800dada:	0028      	movs	r0, r5
 800dadc:	bd70      	pop	{r4, r5, r6, pc}
 800dade:	4b09      	ldr	r3, [pc, #36]	; (800db04 <_putc_r+0x8c>)
 800dae0:	429c      	cmp	r4, r3
 800dae2:	d101      	bne.n	800dae8 <_putc_r+0x70>
 800dae4:	68b4      	ldr	r4, [r6, #8]
 800dae6:	e7d6      	b.n	800da96 <_putc_r+0x1e>
 800dae8:	4b07      	ldr	r3, [pc, #28]	; (800db08 <_putc_r+0x90>)
 800daea:	429c      	cmp	r4, r3
 800daec:	d1d3      	bne.n	800da96 <_putc_r+0x1e>
 800daee:	68f4      	ldr	r4, [r6, #12]
 800daf0:	e7d1      	b.n	800da96 <_putc_r+0x1e>
 800daf2:	0029      	movs	r1, r5
 800daf4:	0022      	movs	r2, r4
 800daf6:	0030      	movs	r0, r6
 800daf8:	f7fd ffe6 	bl	800bac8 <__swbuf_r>
 800dafc:	0005      	movs	r5, r0
 800dafe:	e7e3      	b.n	800dac8 <_putc_r+0x50>
 800db00:	0800ec18 	.word	0x0800ec18
 800db04:	0800ec38 	.word	0x0800ec38
 800db08:	0800ebf8 	.word	0x0800ebf8

0800db0c <_sbrk_r>:
 800db0c:	2300      	movs	r3, #0
 800db0e:	b570      	push	{r4, r5, r6, lr}
 800db10:	4d06      	ldr	r5, [pc, #24]	; (800db2c <_sbrk_r+0x20>)
 800db12:	0004      	movs	r4, r0
 800db14:	0008      	movs	r0, r1
 800db16:	602b      	str	r3, [r5, #0]
 800db18:	f7f8 fbd0 	bl	80062bc <_sbrk>
 800db1c:	1c43      	adds	r3, r0, #1
 800db1e:	d103      	bne.n	800db28 <_sbrk_r+0x1c>
 800db20:	682b      	ldr	r3, [r5, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d000      	beq.n	800db28 <_sbrk_r+0x1c>
 800db26:	6023      	str	r3, [r4, #0]
 800db28:	bd70      	pop	{r4, r5, r6, pc}
 800db2a:	46c0      	nop			; (mov r8, r8)
 800db2c:	200006b0 	.word	0x200006b0

0800db30 <__sread>:
 800db30:	b570      	push	{r4, r5, r6, lr}
 800db32:	000c      	movs	r4, r1
 800db34:	250e      	movs	r5, #14
 800db36:	5f49      	ldrsh	r1, [r1, r5]
 800db38:	f000 f8f4 	bl	800dd24 <_read_r>
 800db3c:	2800      	cmp	r0, #0
 800db3e:	db03      	blt.n	800db48 <__sread+0x18>
 800db40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800db42:	181b      	adds	r3, r3, r0
 800db44:	6563      	str	r3, [r4, #84]	; 0x54
 800db46:	bd70      	pop	{r4, r5, r6, pc}
 800db48:	89a3      	ldrh	r3, [r4, #12]
 800db4a:	4a02      	ldr	r2, [pc, #8]	; (800db54 <__sread+0x24>)
 800db4c:	4013      	ands	r3, r2
 800db4e:	81a3      	strh	r3, [r4, #12]
 800db50:	e7f9      	b.n	800db46 <__sread+0x16>
 800db52:	46c0      	nop			; (mov r8, r8)
 800db54:	ffffefff 	.word	0xffffefff

0800db58 <__swrite>:
 800db58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5a:	001f      	movs	r7, r3
 800db5c:	898b      	ldrh	r3, [r1, #12]
 800db5e:	0005      	movs	r5, r0
 800db60:	000c      	movs	r4, r1
 800db62:	0016      	movs	r6, r2
 800db64:	05db      	lsls	r3, r3, #23
 800db66:	d505      	bpl.n	800db74 <__swrite+0x1c>
 800db68:	230e      	movs	r3, #14
 800db6a:	5ec9      	ldrsh	r1, [r1, r3]
 800db6c:	2200      	movs	r2, #0
 800db6e:	2302      	movs	r3, #2
 800db70:	f000 f8a2 	bl	800dcb8 <_lseek_r>
 800db74:	89a3      	ldrh	r3, [r4, #12]
 800db76:	4a05      	ldr	r2, [pc, #20]	; (800db8c <__swrite+0x34>)
 800db78:	0028      	movs	r0, r5
 800db7a:	4013      	ands	r3, r2
 800db7c:	81a3      	strh	r3, [r4, #12]
 800db7e:	0032      	movs	r2, r6
 800db80:	230e      	movs	r3, #14
 800db82:	5ee1      	ldrsh	r1, [r4, r3]
 800db84:	003b      	movs	r3, r7
 800db86:	f000 f81f 	bl	800dbc8 <_write_r>
 800db8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db8c:	ffffefff 	.word	0xffffefff

0800db90 <__sseek>:
 800db90:	b570      	push	{r4, r5, r6, lr}
 800db92:	000c      	movs	r4, r1
 800db94:	250e      	movs	r5, #14
 800db96:	5f49      	ldrsh	r1, [r1, r5]
 800db98:	f000 f88e 	bl	800dcb8 <_lseek_r>
 800db9c:	89a3      	ldrh	r3, [r4, #12]
 800db9e:	1c42      	adds	r2, r0, #1
 800dba0:	d103      	bne.n	800dbaa <__sseek+0x1a>
 800dba2:	4a05      	ldr	r2, [pc, #20]	; (800dbb8 <__sseek+0x28>)
 800dba4:	4013      	ands	r3, r2
 800dba6:	81a3      	strh	r3, [r4, #12]
 800dba8:	bd70      	pop	{r4, r5, r6, pc}
 800dbaa:	2280      	movs	r2, #128	; 0x80
 800dbac:	0152      	lsls	r2, r2, #5
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	81a3      	strh	r3, [r4, #12]
 800dbb2:	6560      	str	r0, [r4, #84]	; 0x54
 800dbb4:	e7f8      	b.n	800dba8 <__sseek+0x18>
 800dbb6:	46c0      	nop			; (mov r8, r8)
 800dbb8:	ffffefff 	.word	0xffffefff

0800dbbc <__sclose>:
 800dbbc:	b510      	push	{r4, lr}
 800dbbe:	230e      	movs	r3, #14
 800dbc0:	5ec9      	ldrsh	r1, [r1, r3]
 800dbc2:	f000 f833 	bl	800dc2c <_close_r>
 800dbc6:	bd10      	pop	{r4, pc}

0800dbc8 <_write_r>:
 800dbc8:	b570      	push	{r4, r5, r6, lr}
 800dbca:	0004      	movs	r4, r0
 800dbcc:	0008      	movs	r0, r1
 800dbce:	0011      	movs	r1, r2
 800dbd0:	001a      	movs	r2, r3
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	4d05      	ldr	r5, [pc, #20]	; (800dbec <_write_r+0x24>)
 800dbd6:	602b      	str	r3, [r5, #0]
 800dbd8:	f7f5 fd8a 	bl	80036f0 <_write>
 800dbdc:	1c43      	adds	r3, r0, #1
 800dbde:	d103      	bne.n	800dbe8 <_write_r+0x20>
 800dbe0:	682b      	ldr	r3, [r5, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d000      	beq.n	800dbe8 <_write_r+0x20>
 800dbe6:	6023      	str	r3, [r4, #0]
 800dbe8:	bd70      	pop	{r4, r5, r6, pc}
 800dbea:	46c0      	nop			; (mov r8, r8)
 800dbec:	200006b0 	.word	0x200006b0

0800dbf0 <__assert_func>:
 800dbf0:	b530      	push	{r4, r5, lr}
 800dbf2:	0014      	movs	r4, r2
 800dbf4:	001a      	movs	r2, r3
 800dbf6:	4b09      	ldr	r3, [pc, #36]	; (800dc1c <__assert_func+0x2c>)
 800dbf8:	0005      	movs	r5, r0
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	b085      	sub	sp, #20
 800dbfe:	68d8      	ldr	r0, [r3, #12]
 800dc00:	4b07      	ldr	r3, [pc, #28]	; (800dc20 <__assert_func+0x30>)
 800dc02:	2c00      	cmp	r4, #0
 800dc04:	d101      	bne.n	800dc0a <__assert_func+0x1a>
 800dc06:	4b07      	ldr	r3, [pc, #28]	; (800dc24 <__assert_func+0x34>)
 800dc08:	001c      	movs	r4, r3
 800dc0a:	9301      	str	r3, [sp, #4]
 800dc0c:	9100      	str	r1, [sp, #0]
 800dc0e:	002b      	movs	r3, r5
 800dc10:	4905      	ldr	r1, [pc, #20]	; (800dc28 <__assert_func+0x38>)
 800dc12:	9402      	str	r4, [sp, #8]
 800dc14:	f000 f81c 	bl	800dc50 <fiprintf>
 800dc18:	f000 f8a5 	bl	800dd66 <abort>
 800dc1c:	20000068 	.word	0x20000068
 800dc20:	0800edc5 	.word	0x0800edc5
 800dc24:	0800ee00 	.word	0x0800ee00
 800dc28:	0800edd2 	.word	0x0800edd2

0800dc2c <_close_r>:
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	b570      	push	{r4, r5, r6, lr}
 800dc30:	4d06      	ldr	r5, [pc, #24]	; (800dc4c <_close_r+0x20>)
 800dc32:	0004      	movs	r4, r0
 800dc34:	0008      	movs	r0, r1
 800dc36:	602b      	str	r3, [r5, #0]
 800dc38:	f7f8 fb13 	bl	8006262 <_close>
 800dc3c:	1c43      	adds	r3, r0, #1
 800dc3e:	d103      	bne.n	800dc48 <_close_r+0x1c>
 800dc40:	682b      	ldr	r3, [r5, #0]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d000      	beq.n	800dc48 <_close_r+0x1c>
 800dc46:	6023      	str	r3, [r4, #0]
 800dc48:	bd70      	pop	{r4, r5, r6, pc}
 800dc4a:	46c0      	nop			; (mov r8, r8)
 800dc4c:	200006b0 	.word	0x200006b0

0800dc50 <fiprintf>:
 800dc50:	b40e      	push	{r1, r2, r3}
 800dc52:	b503      	push	{r0, r1, lr}
 800dc54:	0001      	movs	r1, r0
 800dc56:	ab03      	add	r3, sp, #12
 800dc58:	4804      	ldr	r0, [pc, #16]	; (800dc6c <fiprintf+0x1c>)
 800dc5a:	cb04      	ldmia	r3!, {r2}
 800dc5c:	6800      	ldr	r0, [r0, #0]
 800dc5e:	9301      	str	r3, [sp, #4]
 800dc60:	f7ff fdd0 	bl	800d804 <_vfiprintf_r>
 800dc64:	b002      	add	sp, #8
 800dc66:	bc08      	pop	{r3}
 800dc68:	b003      	add	sp, #12
 800dc6a:	4718      	bx	r3
 800dc6c:	20000068 	.word	0x20000068

0800dc70 <_fstat_r>:
 800dc70:	2300      	movs	r3, #0
 800dc72:	b570      	push	{r4, r5, r6, lr}
 800dc74:	4d06      	ldr	r5, [pc, #24]	; (800dc90 <_fstat_r+0x20>)
 800dc76:	0004      	movs	r4, r0
 800dc78:	0008      	movs	r0, r1
 800dc7a:	0011      	movs	r1, r2
 800dc7c:	602b      	str	r3, [r5, #0]
 800dc7e:	f7f8 fafa 	bl	8006276 <_fstat>
 800dc82:	1c43      	adds	r3, r0, #1
 800dc84:	d103      	bne.n	800dc8e <_fstat_r+0x1e>
 800dc86:	682b      	ldr	r3, [r5, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d000      	beq.n	800dc8e <_fstat_r+0x1e>
 800dc8c:	6023      	str	r3, [r4, #0]
 800dc8e:	bd70      	pop	{r4, r5, r6, pc}
 800dc90:	200006b0 	.word	0x200006b0

0800dc94 <_isatty_r>:
 800dc94:	2300      	movs	r3, #0
 800dc96:	b570      	push	{r4, r5, r6, lr}
 800dc98:	4d06      	ldr	r5, [pc, #24]	; (800dcb4 <_isatty_r+0x20>)
 800dc9a:	0004      	movs	r4, r0
 800dc9c:	0008      	movs	r0, r1
 800dc9e:	602b      	str	r3, [r5, #0]
 800dca0:	f7f8 faf7 	bl	8006292 <_isatty>
 800dca4:	1c43      	adds	r3, r0, #1
 800dca6:	d103      	bne.n	800dcb0 <_isatty_r+0x1c>
 800dca8:	682b      	ldr	r3, [r5, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d000      	beq.n	800dcb0 <_isatty_r+0x1c>
 800dcae:	6023      	str	r3, [r4, #0]
 800dcb0:	bd70      	pop	{r4, r5, r6, pc}
 800dcb2:	46c0      	nop			; (mov r8, r8)
 800dcb4:	200006b0 	.word	0x200006b0

0800dcb8 <_lseek_r>:
 800dcb8:	b570      	push	{r4, r5, r6, lr}
 800dcba:	0004      	movs	r4, r0
 800dcbc:	0008      	movs	r0, r1
 800dcbe:	0011      	movs	r1, r2
 800dcc0:	001a      	movs	r2, r3
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	4d05      	ldr	r5, [pc, #20]	; (800dcdc <_lseek_r+0x24>)
 800dcc6:	602b      	str	r3, [r5, #0]
 800dcc8:	f7f8 faec 	bl	80062a4 <_lseek>
 800dccc:	1c43      	adds	r3, r0, #1
 800dcce:	d103      	bne.n	800dcd8 <_lseek_r+0x20>
 800dcd0:	682b      	ldr	r3, [r5, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d000      	beq.n	800dcd8 <_lseek_r+0x20>
 800dcd6:	6023      	str	r3, [r4, #0]
 800dcd8:	bd70      	pop	{r4, r5, r6, pc}
 800dcda:	46c0      	nop			; (mov r8, r8)
 800dcdc:	200006b0 	.word	0x200006b0

0800dce0 <__ascii_mbtowc>:
 800dce0:	b082      	sub	sp, #8
 800dce2:	2900      	cmp	r1, #0
 800dce4:	d100      	bne.n	800dce8 <__ascii_mbtowc+0x8>
 800dce6:	a901      	add	r1, sp, #4
 800dce8:	1e10      	subs	r0, r2, #0
 800dcea:	d006      	beq.n	800dcfa <__ascii_mbtowc+0x1a>
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d006      	beq.n	800dcfe <__ascii_mbtowc+0x1e>
 800dcf0:	7813      	ldrb	r3, [r2, #0]
 800dcf2:	600b      	str	r3, [r1, #0]
 800dcf4:	7810      	ldrb	r0, [r2, #0]
 800dcf6:	1e43      	subs	r3, r0, #1
 800dcf8:	4198      	sbcs	r0, r3
 800dcfa:	b002      	add	sp, #8
 800dcfc:	4770      	bx	lr
 800dcfe:	2002      	movs	r0, #2
 800dd00:	4240      	negs	r0, r0
 800dd02:	e7fa      	b.n	800dcfa <__ascii_mbtowc+0x1a>

0800dd04 <__malloc_lock>:
 800dd04:	b510      	push	{r4, lr}
 800dd06:	4802      	ldr	r0, [pc, #8]	; (800dd10 <__malloc_lock+0xc>)
 800dd08:	f7ff f825 	bl	800cd56 <__retarget_lock_acquire_recursive>
 800dd0c:	bd10      	pop	{r4, pc}
 800dd0e:	46c0      	nop			; (mov r8, r8)
 800dd10:	200006a4 	.word	0x200006a4

0800dd14 <__malloc_unlock>:
 800dd14:	b510      	push	{r4, lr}
 800dd16:	4802      	ldr	r0, [pc, #8]	; (800dd20 <__malloc_unlock+0xc>)
 800dd18:	f7ff f81e 	bl	800cd58 <__retarget_lock_release_recursive>
 800dd1c:	bd10      	pop	{r4, pc}
 800dd1e:	46c0      	nop			; (mov r8, r8)
 800dd20:	200006a4 	.word	0x200006a4

0800dd24 <_read_r>:
 800dd24:	b570      	push	{r4, r5, r6, lr}
 800dd26:	0004      	movs	r4, r0
 800dd28:	0008      	movs	r0, r1
 800dd2a:	0011      	movs	r1, r2
 800dd2c:	001a      	movs	r2, r3
 800dd2e:	2300      	movs	r3, #0
 800dd30:	4d05      	ldr	r5, [pc, #20]	; (800dd48 <_read_r+0x24>)
 800dd32:	602b      	str	r3, [r5, #0]
 800dd34:	f7f8 fa78 	bl	8006228 <_read>
 800dd38:	1c43      	adds	r3, r0, #1
 800dd3a:	d103      	bne.n	800dd44 <_read_r+0x20>
 800dd3c:	682b      	ldr	r3, [r5, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d000      	beq.n	800dd44 <_read_r+0x20>
 800dd42:	6023      	str	r3, [r4, #0]
 800dd44:	bd70      	pop	{r4, r5, r6, pc}
 800dd46:	46c0      	nop			; (mov r8, r8)
 800dd48:	200006b0 	.word	0x200006b0

0800dd4c <__ascii_wctomb>:
 800dd4c:	0003      	movs	r3, r0
 800dd4e:	1e08      	subs	r0, r1, #0
 800dd50:	d005      	beq.n	800dd5e <__ascii_wctomb+0x12>
 800dd52:	2aff      	cmp	r2, #255	; 0xff
 800dd54:	d904      	bls.n	800dd60 <__ascii_wctomb+0x14>
 800dd56:	228a      	movs	r2, #138	; 0x8a
 800dd58:	2001      	movs	r0, #1
 800dd5a:	601a      	str	r2, [r3, #0]
 800dd5c:	4240      	negs	r0, r0
 800dd5e:	4770      	bx	lr
 800dd60:	2001      	movs	r0, #1
 800dd62:	700a      	strb	r2, [r1, #0]
 800dd64:	e7fb      	b.n	800dd5e <__ascii_wctomb+0x12>

0800dd66 <abort>:
 800dd66:	2006      	movs	r0, #6
 800dd68:	b510      	push	{r4, lr}
 800dd6a:	f000 f82d 	bl	800ddc8 <raise>
 800dd6e:	2001      	movs	r0, #1
 800dd70:	f7f8 fa4e 	bl	8006210 <_exit>

0800dd74 <_raise_r>:
 800dd74:	b570      	push	{r4, r5, r6, lr}
 800dd76:	0004      	movs	r4, r0
 800dd78:	000d      	movs	r5, r1
 800dd7a:	291f      	cmp	r1, #31
 800dd7c:	d904      	bls.n	800dd88 <_raise_r+0x14>
 800dd7e:	2316      	movs	r3, #22
 800dd80:	6003      	str	r3, [r0, #0]
 800dd82:	2001      	movs	r0, #1
 800dd84:	4240      	negs	r0, r0
 800dd86:	bd70      	pop	{r4, r5, r6, pc}
 800dd88:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d004      	beq.n	800dd98 <_raise_r+0x24>
 800dd8e:	008a      	lsls	r2, r1, #2
 800dd90:	189b      	adds	r3, r3, r2
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	2a00      	cmp	r2, #0
 800dd96:	d108      	bne.n	800ddaa <_raise_r+0x36>
 800dd98:	0020      	movs	r0, r4
 800dd9a:	f000 f831 	bl	800de00 <_getpid_r>
 800dd9e:	002a      	movs	r2, r5
 800dda0:	0001      	movs	r1, r0
 800dda2:	0020      	movs	r0, r4
 800dda4:	f000 f81a 	bl	800dddc <_kill_r>
 800dda8:	e7ed      	b.n	800dd86 <_raise_r+0x12>
 800ddaa:	2000      	movs	r0, #0
 800ddac:	2a01      	cmp	r2, #1
 800ddae:	d0ea      	beq.n	800dd86 <_raise_r+0x12>
 800ddb0:	1c51      	adds	r1, r2, #1
 800ddb2:	d103      	bne.n	800ddbc <_raise_r+0x48>
 800ddb4:	2316      	movs	r3, #22
 800ddb6:	3001      	adds	r0, #1
 800ddb8:	6023      	str	r3, [r4, #0]
 800ddba:	e7e4      	b.n	800dd86 <_raise_r+0x12>
 800ddbc:	2400      	movs	r4, #0
 800ddbe:	0028      	movs	r0, r5
 800ddc0:	601c      	str	r4, [r3, #0]
 800ddc2:	4790      	blx	r2
 800ddc4:	0020      	movs	r0, r4
 800ddc6:	e7de      	b.n	800dd86 <_raise_r+0x12>

0800ddc8 <raise>:
 800ddc8:	b510      	push	{r4, lr}
 800ddca:	4b03      	ldr	r3, [pc, #12]	; (800ddd8 <raise+0x10>)
 800ddcc:	0001      	movs	r1, r0
 800ddce:	6818      	ldr	r0, [r3, #0]
 800ddd0:	f7ff ffd0 	bl	800dd74 <_raise_r>
 800ddd4:	bd10      	pop	{r4, pc}
 800ddd6:	46c0      	nop			; (mov r8, r8)
 800ddd8:	20000068 	.word	0x20000068

0800dddc <_kill_r>:
 800dddc:	2300      	movs	r3, #0
 800ddde:	b570      	push	{r4, r5, r6, lr}
 800dde0:	4d06      	ldr	r5, [pc, #24]	; (800ddfc <_kill_r+0x20>)
 800dde2:	0004      	movs	r4, r0
 800dde4:	0008      	movs	r0, r1
 800dde6:	0011      	movs	r1, r2
 800dde8:	602b      	str	r3, [r5, #0]
 800ddea:	f7f8 fa01 	bl	80061f0 <_kill>
 800ddee:	1c43      	adds	r3, r0, #1
 800ddf0:	d103      	bne.n	800ddfa <_kill_r+0x1e>
 800ddf2:	682b      	ldr	r3, [r5, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d000      	beq.n	800ddfa <_kill_r+0x1e>
 800ddf8:	6023      	str	r3, [r4, #0]
 800ddfa:	bd70      	pop	{r4, r5, r6, pc}
 800ddfc:	200006b0 	.word	0x200006b0

0800de00 <_getpid_r>:
 800de00:	b510      	push	{r4, lr}
 800de02:	f7f8 f9ef 	bl	80061e4 <_getpid>
 800de06:	bd10      	pop	{r4, pc}

0800de08 <log>:
 800de08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de0a:	0004      	movs	r4, r0
 800de0c:	000d      	movs	r5, r1
 800de0e:	f000 f831 	bl	800de74 <__ieee754_log>
 800de12:	0022      	movs	r2, r4
 800de14:	0006      	movs	r6, r0
 800de16:	000f      	movs	r7, r1
 800de18:	002b      	movs	r3, r5
 800de1a:	0020      	movs	r0, r4
 800de1c:	0029      	movs	r1, r5
 800de1e:	f7f5 f887 	bl	8002f30 <__aeabi_dcmpun>
 800de22:	2800      	cmp	r0, #0
 800de24:	d115      	bne.n	800de52 <log+0x4a>
 800de26:	2200      	movs	r2, #0
 800de28:	2300      	movs	r3, #0
 800de2a:	0020      	movs	r0, r4
 800de2c:	0029      	movs	r1, r5
 800de2e:	f7f2 fb27 	bl	8000480 <__aeabi_dcmpgt>
 800de32:	2800      	cmp	r0, #0
 800de34:	d10d      	bne.n	800de52 <log+0x4a>
 800de36:	2200      	movs	r2, #0
 800de38:	2300      	movs	r3, #0
 800de3a:	0020      	movs	r0, r4
 800de3c:	0029      	movs	r1, r5
 800de3e:	f7f2 fb05 	bl	800044c <__aeabi_dcmpeq>
 800de42:	2800      	cmp	r0, #0
 800de44:	d008      	beq.n	800de58 <log+0x50>
 800de46:	f7fd f8eb 	bl	800b020 <__errno>
 800de4a:	2322      	movs	r3, #34	; 0x22
 800de4c:	2600      	movs	r6, #0
 800de4e:	4f07      	ldr	r7, [pc, #28]	; (800de6c <log+0x64>)
 800de50:	6003      	str	r3, [r0, #0]
 800de52:	0030      	movs	r0, r6
 800de54:	0039      	movs	r1, r7
 800de56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de58:	f7fd f8e2 	bl	800b020 <__errno>
 800de5c:	2321      	movs	r3, #33	; 0x21
 800de5e:	6003      	str	r3, [r0, #0]
 800de60:	4803      	ldr	r0, [pc, #12]	; (800de70 <log+0x68>)
 800de62:	f000 f9b7 	bl	800e1d4 <nan>
 800de66:	0006      	movs	r6, r0
 800de68:	000f      	movs	r7, r1
 800de6a:	e7f2      	b.n	800de52 <log+0x4a>
 800de6c:	fff00000 	.word	0xfff00000
 800de70:	0800ee00 	.word	0x0800ee00

0800de74 <__ieee754_log>:
 800de74:	2280      	movs	r2, #128	; 0x80
 800de76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de78:	000b      	movs	r3, r1
 800de7a:	b08d      	sub	sp, #52	; 0x34
 800de7c:	0352      	lsls	r2, r2, #13
 800de7e:	4291      	cmp	r1, r2
 800de80:	da22      	bge.n	800dec8 <__ieee754_log+0x54>
 800de82:	004a      	lsls	r2, r1, #1
 800de84:	0852      	lsrs	r2, r2, #1
 800de86:	4302      	orrs	r2, r0
 800de88:	d107      	bne.n	800de9a <__ieee754_log+0x26>
 800de8a:	2200      	movs	r2, #0
 800de8c:	2300      	movs	r3, #0
 800de8e:	2000      	movs	r0, #0
 800de90:	49b3      	ldr	r1, [pc, #716]	; (800e160 <__ieee754_log+0x2ec>)
 800de92:	f7f3 fe4d 	bl	8001b30 <__aeabi_ddiv>
 800de96:	b00d      	add	sp, #52	; 0x34
 800de98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de9a:	2900      	cmp	r1, #0
 800de9c:	da05      	bge.n	800deaa <__ieee754_log+0x36>
 800de9e:	0002      	movs	r2, r0
 800dea0:	f7f4 fcb4 	bl	800280c <__aeabi_dsub>
 800dea4:	2200      	movs	r2, #0
 800dea6:	2300      	movs	r3, #0
 800dea8:	e7f3      	b.n	800de92 <__ieee754_log+0x1e>
 800deaa:	4bae      	ldr	r3, [pc, #696]	; (800e164 <__ieee754_log+0x2f0>)
 800deac:	2200      	movs	r2, #0
 800deae:	f7f4 fa41 	bl	8002334 <__aeabi_dmul>
 800deb2:	2436      	movs	r4, #54	; 0x36
 800deb4:	000b      	movs	r3, r1
 800deb6:	4264      	negs	r4, r4
 800deb8:	4aab      	ldr	r2, [pc, #684]	; (800e168 <__ieee754_log+0x2f4>)
 800deba:	4293      	cmp	r3, r2
 800debc:	dd06      	ble.n	800decc <__ieee754_log+0x58>
 800debe:	0002      	movs	r2, r0
 800dec0:	000b      	movs	r3, r1
 800dec2:	f7f3 faf9 	bl	80014b8 <__aeabi_dadd>
 800dec6:	e7e6      	b.n	800de96 <__ieee754_log+0x22>
 800dec8:	2400      	movs	r4, #0
 800deca:	e7f5      	b.n	800deb8 <__ieee754_log+0x44>
 800decc:	4da7      	ldr	r5, [pc, #668]	; (800e16c <__ieee754_log+0x2f8>)
 800dece:	151a      	asrs	r2, r3, #20
 800ded0:	1952      	adds	r2, r2, r5
 800ded2:	1912      	adds	r2, r2, r4
 800ded4:	031b      	lsls	r3, r3, #12
 800ded6:	4ca6      	ldr	r4, [pc, #664]	; (800e170 <__ieee754_log+0x2fc>)
 800ded8:	0b1b      	lsrs	r3, r3, #12
 800deda:	9302      	str	r3, [sp, #8]
 800dedc:	191c      	adds	r4, r3, r4
 800dede:	2380      	movs	r3, #128	; 0x80
 800dee0:	035b      	lsls	r3, r3, #13
 800dee2:	4023      	ands	r3, r4
 800dee4:	4ca3      	ldr	r4, [pc, #652]	; (800e174 <__ieee754_log+0x300>)
 800dee6:	9d02      	ldr	r5, [sp, #8]
 800dee8:	405c      	eors	r4, r3
 800deea:	151b      	asrs	r3, r3, #20
 800deec:	189b      	adds	r3, r3, r2
 800deee:	4325      	orrs	r5, r4
 800def0:	2200      	movs	r2, #0
 800def2:	9300      	str	r3, [sp, #0]
 800def4:	0029      	movs	r1, r5
 800def6:	4b9f      	ldr	r3, [pc, #636]	; (800e174 <__ieee754_log+0x300>)
 800def8:	f7f4 fc88 	bl	800280c <__aeabi_dsub>
 800defc:	9b02      	ldr	r3, [sp, #8]
 800defe:	0006      	movs	r6, r0
 800df00:	3302      	adds	r3, #2
 800df02:	031b      	lsls	r3, r3, #12
 800df04:	000f      	movs	r7, r1
 800df06:	2200      	movs	r2, #0
 800df08:	0b1b      	lsrs	r3, r3, #12
 800df0a:	2b02      	cmp	r3, #2
 800df0c:	dc64      	bgt.n	800dfd8 <__ieee754_log+0x164>
 800df0e:	2300      	movs	r3, #0
 800df10:	f7f2 fa9c 	bl	800044c <__aeabi_dcmpeq>
 800df14:	2800      	cmp	r0, #0
 800df16:	d019      	beq.n	800df4c <__ieee754_log+0xd8>
 800df18:	9b00      	ldr	r3, [sp, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d100      	bne.n	800df20 <__ieee754_log+0xac>
 800df1e:	e11c      	b.n	800e15a <__ieee754_log+0x2e6>
 800df20:	0018      	movs	r0, r3
 800df22:	f7f5 f859 	bl	8002fd8 <__aeabi_i2d>
 800df26:	4a94      	ldr	r2, [pc, #592]	; (800e178 <__ieee754_log+0x304>)
 800df28:	4b94      	ldr	r3, [pc, #592]	; (800e17c <__ieee754_log+0x308>)
 800df2a:	0004      	movs	r4, r0
 800df2c:	000d      	movs	r5, r1
 800df2e:	f7f4 fa01 	bl	8002334 <__aeabi_dmul>
 800df32:	4a93      	ldr	r2, [pc, #588]	; (800e180 <__ieee754_log+0x30c>)
 800df34:	0006      	movs	r6, r0
 800df36:	000f      	movs	r7, r1
 800df38:	4b92      	ldr	r3, [pc, #584]	; (800e184 <__ieee754_log+0x310>)
 800df3a:	0020      	movs	r0, r4
 800df3c:	0029      	movs	r1, r5
 800df3e:	f7f4 f9f9 	bl	8002334 <__aeabi_dmul>
 800df42:	0002      	movs	r2, r0
 800df44:	000b      	movs	r3, r1
 800df46:	0030      	movs	r0, r6
 800df48:	0039      	movs	r1, r7
 800df4a:	e7ba      	b.n	800dec2 <__ieee754_log+0x4e>
 800df4c:	4a8e      	ldr	r2, [pc, #568]	; (800e188 <__ieee754_log+0x314>)
 800df4e:	4b8f      	ldr	r3, [pc, #572]	; (800e18c <__ieee754_log+0x318>)
 800df50:	0030      	movs	r0, r6
 800df52:	0039      	movs	r1, r7
 800df54:	f7f4 f9ee 	bl	8002334 <__aeabi_dmul>
 800df58:	0002      	movs	r2, r0
 800df5a:	000b      	movs	r3, r1
 800df5c:	2000      	movs	r0, #0
 800df5e:	498c      	ldr	r1, [pc, #560]	; (800e190 <__ieee754_log+0x31c>)
 800df60:	f7f4 fc54 	bl	800280c <__aeabi_dsub>
 800df64:	0032      	movs	r2, r6
 800df66:	0004      	movs	r4, r0
 800df68:	000d      	movs	r5, r1
 800df6a:	003b      	movs	r3, r7
 800df6c:	0030      	movs	r0, r6
 800df6e:	0039      	movs	r1, r7
 800df70:	f7f4 f9e0 	bl	8002334 <__aeabi_dmul>
 800df74:	000b      	movs	r3, r1
 800df76:	0002      	movs	r2, r0
 800df78:	0029      	movs	r1, r5
 800df7a:	0020      	movs	r0, r4
 800df7c:	f7f4 f9da 	bl	8002334 <__aeabi_dmul>
 800df80:	9b00      	ldr	r3, [sp, #0]
 800df82:	9002      	str	r0, [sp, #8]
 800df84:	9103      	str	r1, [sp, #12]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d106      	bne.n	800df98 <__ieee754_log+0x124>
 800df8a:	0002      	movs	r2, r0
 800df8c:	000b      	movs	r3, r1
 800df8e:	0030      	movs	r0, r6
 800df90:	0039      	movs	r1, r7
 800df92:	f7f4 fc3b 	bl	800280c <__aeabi_dsub>
 800df96:	e77e      	b.n	800de96 <__ieee754_log+0x22>
 800df98:	9800      	ldr	r0, [sp, #0]
 800df9a:	f7f5 f81d 	bl	8002fd8 <__aeabi_i2d>
 800df9e:	4a76      	ldr	r2, [pc, #472]	; (800e178 <__ieee754_log+0x304>)
 800dfa0:	4b76      	ldr	r3, [pc, #472]	; (800e17c <__ieee754_log+0x308>)
 800dfa2:	0004      	movs	r4, r0
 800dfa4:	000d      	movs	r5, r1
 800dfa6:	f7f4 f9c5 	bl	8002334 <__aeabi_dmul>
 800dfaa:	4a75      	ldr	r2, [pc, #468]	; (800e180 <__ieee754_log+0x30c>)
 800dfac:	9000      	str	r0, [sp, #0]
 800dfae:	9101      	str	r1, [sp, #4]
 800dfb0:	4b74      	ldr	r3, [pc, #464]	; (800e184 <__ieee754_log+0x310>)
 800dfb2:	0020      	movs	r0, r4
 800dfb4:	0029      	movs	r1, r5
 800dfb6:	f7f4 f9bd 	bl	8002334 <__aeabi_dmul>
 800dfba:	0002      	movs	r2, r0
 800dfbc:	000b      	movs	r3, r1
 800dfbe:	9802      	ldr	r0, [sp, #8]
 800dfc0:	9903      	ldr	r1, [sp, #12]
 800dfc2:	f7f4 fc23 	bl	800280c <__aeabi_dsub>
 800dfc6:	0032      	movs	r2, r6
 800dfc8:	003b      	movs	r3, r7
 800dfca:	f7f4 fc1f 	bl	800280c <__aeabi_dsub>
 800dfce:	0002      	movs	r2, r0
 800dfd0:	000b      	movs	r3, r1
 800dfd2:	9800      	ldr	r0, [sp, #0]
 800dfd4:	9901      	ldr	r1, [sp, #4]
 800dfd6:	e7dc      	b.n	800df92 <__ieee754_log+0x11e>
 800dfd8:	2380      	movs	r3, #128	; 0x80
 800dfda:	05db      	lsls	r3, r3, #23
 800dfdc:	f7f3 fa6c 	bl	80014b8 <__aeabi_dadd>
 800dfe0:	0002      	movs	r2, r0
 800dfe2:	000b      	movs	r3, r1
 800dfe4:	0030      	movs	r0, r6
 800dfe6:	0039      	movs	r1, r7
 800dfe8:	f7f3 fda2 	bl	8001b30 <__aeabi_ddiv>
 800dfec:	9004      	str	r0, [sp, #16]
 800dfee:	9105      	str	r1, [sp, #20]
 800dff0:	9800      	ldr	r0, [sp, #0]
 800dff2:	f7f4 fff1 	bl	8002fd8 <__aeabi_i2d>
 800dff6:	9a04      	ldr	r2, [sp, #16]
 800dff8:	9b05      	ldr	r3, [sp, #20]
 800dffa:	9006      	str	r0, [sp, #24]
 800dffc:	9107      	str	r1, [sp, #28]
 800dffe:	0010      	movs	r0, r2
 800e000:	0019      	movs	r1, r3
 800e002:	f7f4 f997 	bl	8002334 <__aeabi_dmul>
 800e006:	4a63      	ldr	r2, [pc, #396]	; (800e194 <__ieee754_log+0x320>)
 800e008:	9b02      	ldr	r3, [sp, #8]
 800e00a:	4694      	mov	ip, r2
 800e00c:	4463      	add	r3, ip
 800e00e:	0002      	movs	r2, r0
 800e010:	930b      	str	r3, [sp, #44]	; 0x2c
 800e012:	000b      	movs	r3, r1
 800e014:	9008      	str	r0, [sp, #32]
 800e016:	9109      	str	r1, [sp, #36]	; 0x24
 800e018:	f7f4 f98c 	bl	8002334 <__aeabi_dmul>
 800e01c:	0004      	movs	r4, r0
 800e01e:	000d      	movs	r5, r1
 800e020:	4a5d      	ldr	r2, [pc, #372]	; (800e198 <__ieee754_log+0x324>)
 800e022:	4b5e      	ldr	r3, [pc, #376]	; (800e19c <__ieee754_log+0x328>)
 800e024:	f7f4 f986 	bl	8002334 <__aeabi_dmul>
 800e028:	4a5d      	ldr	r2, [pc, #372]	; (800e1a0 <__ieee754_log+0x32c>)
 800e02a:	4b5e      	ldr	r3, [pc, #376]	; (800e1a4 <__ieee754_log+0x330>)
 800e02c:	f7f3 fa44 	bl	80014b8 <__aeabi_dadd>
 800e030:	0022      	movs	r2, r4
 800e032:	002b      	movs	r3, r5
 800e034:	f7f4 f97e 	bl	8002334 <__aeabi_dmul>
 800e038:	4a5b      	ldr	r2, [pc, #364]	; (800e1a8 <__ieee754_log+0x334>)
 800e03a:	4b5c      	ldr	r3, [pc, #368]	; (800e1ac <__ieee754_log+0x338>)
 800e03c:	f7f3 fa3c 	bl	80014b8 <__aeabi_dadd>
 800e040:	0022      	movs	r2, r4
 800e042:	002b      	movs	r3, r5
 800e044:	f7f4 f976 	bl	8002334 <__aeabi_dmul>
 800e048:	4a59      	ldr	r2, [pc, #356]	; (800e1b0 <__ieee754_log+0x33c>)
 800e04a:	4b5a      	ldr	r3, [pc, #360]	; (800e1b4 <__ieee754_log+0x340>)
 800e04c:	f7f3 fa34 	bl	80014b8 <__aeabi_dadd>
 800e050:	9a08      	ldr	r2, [sp, #32]
 800e052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e054:	f7f4 f96e 	bl	8002334 <__aeabi_dmul>
 800e058:	4a57      	ldr	r2, [pc, #348]	; (800e1b8 <__ieee754_log+0x344>)
 800e05a:	9008      	str	r0, [sp, #32]
 800e05c:	9109      	str	r1, [sp, #36]	; 0x24
 800e05e:	4b57      	ldr	r3, [pc, #348]	; (800e1bc <__ieee754_log+0x348>)
 800e060:	0020      	movs	r0, r4
 800e062:	0029      	movs	r1, r5
 800e064:	f7f4 f966 	bl	8002334 <__aeabi_dmul>
 800e068:	4a55      	ldr	r2, [pc, #340]	; (800e1c0 <__ieee754_log+0x34c>)
 800e06a:	4b56      	ldr	r3, [pc, #344]	; (800e1c4 <__ieee754_log+0x350>)
 800e06c:	f7f3 fa24 	bl	80014b8 <__aeabi_dadd>
 800e070:	0022      	movs	r2, r4
 800e072:	002b      	movs	r3, r5
 800e074:	f7f4 f95e 	bl	8002334 <__aeabi_dmul>
 800e078:	4a53      	ldr	r2, [pc, #332]	; (800e1c8 <__ieee754_log+0x354>)
 800e07a:	4b54      	ldr	r3, [pc, #336]	; (800e1cc <__ieee754_log+0x358>)
 800e07c:	f7f3 fa1c 	bl	80014b8 <__aeabi_dadd>
 800e080:	0022      	movs	r2, r4
 800e082:	002b      	movs	r3, r5
 800e084:	f7f4 f956 	bl	8002334 <__aeabi_dmul>
 800e088:	0002      	movs	r2, r0
 800e08a:	000b      	movs	r3, r1
 800e08c:	9808      	ldr	r0, [sp, #32]
 800e08e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e090:	f7f3 fa12 	bl	80014b8 <__aeabi_dadd>
 800e094:	9a02      	ldr	r2, [sp, #8]
 800e096:	4b4e      	ldr	r3, [pc, #312]	; (800e1d0 <__ieee754_log+0x35c>)
 800e098:	0004      	movs	r4, r0
 800e09a:	1a9b      	subs	r3, r3, r2
 800e09c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e09e:	000d      	movs	r5, r1
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	dd34      	ble.n	800e110 <__ieee754_log+0x29c>
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	4b39      	ldr	r3, [pc, #228]	; (800e190 <__ieee754_log+0x31c>)
 800e0aa:	0030      	movs	r0, r6
 800e0ac:	0039      	movs	r1, r7
 800e0ae:	f7f4 f941 	bl	8002334 <__aeabi_dmul>
 800e0b2:	0032      	movs	r2, r6
 800e0b4:	003b      	movs	r3, r7
 800e0b6:	f7f4 f93d 	bl	8002334 <__aeabi_dmul>
 800e0ba:	0002      	movs	r2, r0
 800e0bc:	000b      	movs	r3, r1
 800e0be:	9002      	str	r0, [sp, #8]
 800e0c0:	9103      	str	r1, [sp, #12]
 800e0c2:	0020      	movs	r0, r4
 800e0c4:	0029      	movs	r1, r5
 800e0c6:	f7f3 f9f7 	bl	80014b8 <__aeabi_dadd>
 800e0ca:	9a04      	ldr	r2, [sp, #16]
 800e0cc:	9b05      	ldr	r3, [sp, #20]
 800e0ce:	f7f4 f931 	bl	8002334 <__aeabi_dmul>
 800e0d2:	9b00      	ldr	r3, [sp, #0]
 800e0d4:	0004      	movs	r4, r0
 800e0d6:	000d      	movs	r5, r1
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d106      	bne.n	800e0ea <__ieee754_log+0x276>
 800e0dc:	0002      	movs	r2, r0
 800e0de:	000b      	movs	r3, r1
 800e0e0:	9802      	ldr	r0, [sp, #8]
 800e0e2:	9903      	ldr	r1, [sp, #12]
 800e0e4:	f7f4 fb92 	bl	800280c <__aeabi_dsub>
 800e0e8:	e74f      	b.n	800df8a <__ieee754_log+0x116>
 800e0ea:	4a23      	ldr	r2, [pc, #140]	; (800e178 <__ieee754_log+0x304>)
 800e0ec:	4b23      	ldr	r3, [pc, #140]	; (800e17c <__ieee754_log+0x308>)
 800e0ee:	9806      	ldr	r0, [sp, #24]
 800e0f0:	9907      	ldr	r1, [sp, #28]
 800e0f2:	f7f4 f91f 	bl	8002334 <__aeabi_dmul>
 800e0f6:	4a22      	ldr	r2, [pc, #136]	; (800e180 <__ieee754_log+0x30c>)
 800e0f8:	9000      	str	r0, [sp, #0]
 800e0fa:	9101      	str	r1, [sp, #4]
 800e0fc:	9806      	ldr	r0, [sp, #24]
 800e0fe:	9907      	ldr	r1, [sp, #28]
 800e100:	4b20      	ldr	r3, [pc, #128]	; (800e184 <__ieee754_log+0x310>)
 800e102:	f7f4 f917 	bl	8002334 <__aeabi_dmul>
 800e106:	0022      	movs	r2, r4
 800e108:	002b      	movs	r3, r5
 800e10a:	f7f3 f9d5 	bl	80014b8 <__aeabi_dadd>
 800e10e:	e754      	b.n	800dfba <__ieee754_log+0x146>
 800e110:	0002      	movs	r2, r0
 800e112:	000b      	movs	r3, r1
 800e114:	0030      	movs	r0, r6
 800e116:	0039      	movs	r1, r7
 800e118:	f7f4 fb78 	bl	800280c <__aeabi_dsub>
 800e11c:	9a04      	ldr	r2, [sp, #16]
 800e11e:	9b05      	ldr	r3, [sp, #20]
 800e120:	f7f4 f908 	bl	8002334 <__aeabi_dmul>
 800e124:	9b00      	ldr	r3, [sp, #0]
 800e126:	0004      	movs	r4, r0
 800e128:	000d      	movs	r5, r1
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d102      	bne.n	800e134 <__ieee754_log+0x2c0>
 800e12e:	0002      	movs	r2, r0
 800e130:	000b      	movs	r3, r1
 800e132:	e72c      	b.n	800df8e <__ieee754_log+0x11a>
 800e134:	4a10      	ldr	r2, [pc, #64]	; (800e178 <__ieee754_log+0x304>)
 800e136:	4b11      	ldr	r3, [pc, #68]	; (800e17c <__ieee754_log+0x308>)
 800e138:	9806      	ldr	r0, [sp, #24]
 800e13a:	9907      	ldr	r1, [sp, #28]
 800e13c:	f7f4 f8fa 	bl	8002334 <__aeabi_dmul>
 800e140:	4a0f      	ldr	r2, [pc, #60]	; (800e180 <__ieee754_log+0x30c>)
 800e142:	9000      	str	r0, [sp, #0]
 800e144:	9101      	str	r1, [sp, #4]
 800e146:	9806      	ldr	r0, [sp, #24]
 800e148:	9907      	ldr	r1, [sp, #28]
 800e14a:	4b0e      	ldr	r3, [pc, #56]	; (800e184 <__ieee754_log+0x310>)
 800e14c:	f7f4 f8f2 	bl	8002334 <__aeabi_dmul>
 800e150:	0002      	movs	r2, r0
 800e152:	000b      	movs	r3, r1
 800e154:	0020      	movs	r0, r4
 800e156:	0029      	movs	r1, r5
 800e158:	e733      	b.n	800dfc2 <__ieee754_log+0x14e>
 800e15a:	2000      	movs	r0, #0
 800e15c:	2100      	movs	r1, #0
 800e15e:	e69a      	b.n	800de96 <__ieee754_log+0x22>
 800e160:	c3500000 	.word	0xc3500000
 800e164:	43500000 	.word	0x43500000
 800e168:	7fefffff 	.word	0x7fefffff
 800e16c:	fffffc01 	.word	0xfffffc01
 800e170:	00095f64 	.word	0x00095f64
 800e174:	3ff00000 	.word	0x3ff00000
 800e178:	fee00000 	.word	0xfee00000
 800e17c:	3fe62e42 	.word	0x3fe62e42
 800e180:	35793c76 	.word	0x35793c76
 800e184:	3dea39ef 	.word	0x3dea39ef
 800e188:	55555555 	.word	0x55555555
 800e18c:	3fd55555 	.word	0x3fd55555
 800e190:	3fe00000 	.word	0x3fe00000
 800e194:	fff9eb86 	.word	0xfff9eb86
 800e198:	df3e5244 	.word	0xdf3e5244
 800e19c:	3fc2f112 	.word	0x3fc2f112
 800e1a0:	96cb03de 	.word	0x96cb03de
 800e1a4:	3fc74664 	.word	0x3fc74664
 800e1a8:	94229359 	.word	0x94229359
 800e1ac:	3fd24924 	.word	0x3fd24924
 800e1b0:	55555593 	.word	0x55555593
 800e1b4:	3fe55555 	.word	0x3fe55555
 800e1b8:	d078c69f 	.word	0xd078c69f
 800e1bc:	3fc39a09 	.word	0x3fc39a09
 800e1c0:	1d8e78af 	.word	0x1d8e78af
 800e1c4:	3fcc71c5 	.word	0x3fcc71c5
 800e1c8:	9997fa04 	.word	0x9997fa04
 800e1cc:	3fd99999 	.word	0x3fd99999
 800e1d0:	0006b851 	.word	0x0006b851

0800e1d4 <nan>:
 800e1d4:	2000      	movs	r0, #0
 800e1d6:	4901      	ldr	r1, [pc, #4]	; (800e1dc <nan+0x8>)
 800e1d8:	4770      	bx	lr
 800e1da:	46c0      	nop			; (mov r8, r8)
 800e1dc:	7ff80000 	.word	0x7ff80000

0800e1e0 <_init>:
 800e1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1e2:	46c0      	nop			; (mov r8, r8)
 800e1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1e6:	bc08      	pop	{r3}
 800e1e8:	469e      	mov	lr, r3
 800e1ea:	4770      	bx	lr

0800e1ec <_fini>:
 800e1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ee:	46c0      	nop			; (mov r8, r8)
 800e1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1f2:	bc08      	pop	{r3}
 800e1f4:	469e      	mov	lr, r3
 800e1f6:	4770      	bx	lr
